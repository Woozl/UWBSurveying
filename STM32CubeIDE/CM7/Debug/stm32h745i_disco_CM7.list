
stm32h745i_disco_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000269e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d30  08026c80  08026c80  00036c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000054  0802a9b0  0802a9b0  0003a9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802aa04  0802aa04  00051008  2**0
                  CONTENTS
  5 .ARM          00000000  0802aa04  0802aa04  00051008  2**0
                  CONTENTS
  6 .preinit_array 00000000  0802aa04  0802aa04  00051008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0802aa04  0802aa04  0003aa04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802aa18  0802aa18  0003aa18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  0802aa20  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b344  2400012c  0802ab4c  0004012c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b470  0802ab4c  0004b470  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00051008  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00000af4  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 00000514  90000af4  90000af4  00050af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00000000  90001008  90001008  00051036  2**0
                  CONTENTS
 16 .debug_info   000b78bf  00000000  00000000  00051036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00012f51  00000000  00000000  001088f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003e60  00000000  00000000  0011b848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000039b8  00000000  00000000  0011f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001287a  00000000  00000000  00123060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00049b39  00000000  00000000  001358da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001b3e13  00000000  00000000  0017f413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  00333226  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00010fc4  00000000  00000000  003332f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08026c68 	.word	0x08026c68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	08026c68 	.word	0x08026c68

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000386:	f000 fb63 	bl	8000a50 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b64      	ldr	r3, [pc, #400]	; (800051c <main+0x19c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b5e      	ldr	r3, [pc, #376]	; (800051c <main+0x19c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b59      	ldr	r3, [pc, #356]	; (800051c <main+0x19c>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a58      	ldr	r2, [pc, #352]	; (800051c <main+0x19c>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b52      	ldr	r3, [pc, #328]	; (800051c <main+0x19c>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b4f      	ldr	r3, [pc, #316]	; (800051c <main+0x19c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b4c      	ldr	r3, [pc, #304]	; (800051c <main+0x19c>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	4941      	ldr	r1, [pc, #260]	; (800051c <main+0x19c>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	60ba      	str	r2, [r7, #8]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x86>
    } while(sets-- != 0U);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60fa      	str	r2, [r7, #12]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b39      	ldr	r3, [pc, #228]	; (800051c <main+0x19c>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a38      	ldr	r2, [pc, #224]	; (800051c <main+0x19c>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000454:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000456:	bf00      	nop
 8000458:	4b31      	ldr	r3, [pc, #196]	; (8000520 <main+0x1a0>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d004      	beq.n	800046e <main+0xee>
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	1e5a      	subs	r2, r3, #1
 8000468:	617a      	str	r2, [r7, #20]
 800046a:	2b00      	cmp	r3, #0
 800046c:	dcf4      	bgt.n	8000458 <main+0xd8>
  if ( timeout < 0 )
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	2b00      	cmp	r3, #0
 8000472:	da01      	bge.n	8000478 <main+0xf8>
  {
  Error_Handler();
 8000474:	f000 fb36 	bl	8000ae4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f00c fd68 	bl	800cf4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f85e 	bl	800053c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000480:	4b27      	ldr	r3, [pc, #156]	; (8000520 <main+0x1a0>)
 8000482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000486:	4a26      	ldr	r2, [pc, #152]	; (8000520 <main+0x1a0>)
 8000488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <main+0x1a0>)
 8000492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800049e:	2000      	movs	r0, #0
 80004a0:	f00d fc7c 	bl	800dd9c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004a4:	2100      	movs	r1, #0
 80004a6:	2000      	movs	r0, #0
 80004a8:	f00d fc92 	bl	800ddd0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004b0:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004b2:	bf00      	nop
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <main+0x1a0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d104      	bne.n	80004ca <main+0x14a>
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	617a      	str	r2, [r7, #20]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dcf4      	bgt.n	80004b4 <main+0x134>
if ( timeout < 0 )
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	da01      	bge.n	80004d4 <main+0x154>
{
Error_Handler();
 80004d0:	f000 fb08 	bl	8000ae4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa08 	bl	80008e8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f982 	bl	80007e0 <MX_QUADSPI_Init>
  MX_FMC_Init();
 80004dc:	f000 f9ae 	bl	800083c <MX_FMC_Init>
  MX_LTDC_Init();
 80004e0:	f000 f8fa 	bl	80006d8 <MX_LTDC_Init>
  MX_CRC_Init();
 80004e4:	f000 f8b8 	bl	8000658 <MX_CRC_Init>
  MX_DMA2D_Init();
 80004e8:	f000 f8d8 	bl	800069c <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 80004ec:	f001 f8af 	bl	800164e <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f006 fd34 	bl	8006f5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <main+0x1a4>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <main+0x1a8>)
 80004fa:	f006 fd79 	bl	8006ff0 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <main+0x1ac>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000504:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <main+0x1b0>)
 8000506:	2100      	movs	r1, #0
 8000508:	480a      	ldr	r0, [pc, #40]	; (8000534 <main+0x1b4>)
 800050a:	f006 fd71 	bl	8006ff0 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <main+0x1b8>)
 8000512:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f006 fd46 	bl	8006fa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x198>
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	58024400 	.word	0x58024400
 8000524:	080276cc 	.word	0x080276cc
 8000528:	08000a41 	.word	0x08000a41
 800052c:	2400b188 	.word	0x2400b188
 8000530:	080276f0 	.word	0x080276f0
 8000534:	0800165b 	.word	0x0800165b
 8000538:	2400b28c 	.word	0x2400b28c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b09c      	sub	sp, #112	; 0x70
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000546:	224c      	movs	r2, #76	; 0x4c
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f025 fb9e 	bl	8025c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2220      	movs	r2, #32
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f025 fb98 	bl	8025c8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800055c:	2004      	movs	r0, #4
 800055e:	f00e ffa1 	bl	800f4a4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	4b39      	ldr	r3, [pc, #228]	; (800064c <SystemClock_Config+0x110>)
 8000568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056a:	4a38      	ldr	r2, [pc, #224]	; (800064c <SystemClock_Config+0x110>)
 800056c:	f023 0301 	bic.w	r3, r3, #1
 8000570:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <SystemClock_Config+0x110>)
 8000574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b34      	ldr	r3, [pc, #208]	; (8000650 <SystemClock_Config+0x114>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a33      	ldr	r2, [pc, #204]	; (8000650 <SystemClock_Config+0x114>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b31      	ldr	r3, [pc, #196]	; (8000650 <SystemClock_Config+0x114>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000594:	bf00      	nop
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <SystemClock_Config+0x114>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800059e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005a2:	d1f8      	bne.n	8000596 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <SystemClock_Config+0x118>)
 80005a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a8:	f023 0303 	bic.w	r3, r3, #3
 80005ac:	4a29      	ldr	r2, [pc, #164]	; (8000654 <SystemClock_Config+0x118>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b4:	2303      	movs	r3, #3
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005be:	2301      	movs	r3, #1
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2340      	movs	r3, #64	; 0x40
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ce:	2305      	movs	r3, #5
 80005d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80005d2:	23a0      	movs	r3, #160	; 0xa0
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005da:	2304      	movs	r3, #4
 80005dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005e2:	2308      	movs	r3, #8
 80005e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	4618      	mov	r0, r3
 80005f4:	f00f fe92 	bl	801031c <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005fe:	f000 fa71 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	233f      	movs	r3, #63	; 0x3f
 8000604:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2303      	movs	r3, #3
 8000608:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800060e:	2308      	movs	r3, #8
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000612:	2340      	movs	r3, #64	; 0x40
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000616:	2340      	movs	r3, #64	; 0x40
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800061a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2102      	movs	r1, #2
 8000628:	4618      	mov	r0, r3
 800062a:	f010 faa3 	bl	8010b74 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000634:	f000 fa56 	bl	8000ae4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000638:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800063c:	2100      	movs	r1, #0
 800063e:	2000      	movs	r0, #0
 8000640:	f010 fc4e 	bl	8010ee0 <HAL_RCC_MCOConfig>
}
 8000644:	bf00      	nop
 8000646:	3770      	adds	r7, #112	; 0x70
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	58000400 	.word	0x58000400
 8000650:	58024800 	.word	0x58024800
 8000654:	58024400 	.word	0x58024400

08000658 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_CRC_Init+0x3c>)
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <MX_CRC_Init+0x40>)
 8000660:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_CRC_Init+0x3c>)
 8000664:	2200      	movs	r2, #0
 8000666:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_CRC_Init+0x3c>)
 800066a:	2200      	movs	r2, #0
 800066c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_CRC_Init+0x3c>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_CRC_Init+0x3c>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_CRC_Init+0x3c>)
 800067c:	2201      	movs	r2, #1
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_CRC_Init+0x3c>)
 8000682:	f00c fe59 	bl	800d338 <HAL_CRC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800068c:	f000 fa2a 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2400b18c 	.word	0x2400b18c
 8000698:	58024c00 	.word	0x58024c00

0800069c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_DMA2D_Init+0x38>)
 80006a4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006ac:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006bc:	f00c ff26 	bl	800d50c <HAL_DMA2D_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80006c6:	f000 fa0d 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2400b290 	.word	0x2400b290
 80006d4:	52001000 	.word	0x52001000

080006d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 80006de:	f000 fa07 	bl	8000af0 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2234      	movs	r2, #52	; 0x34
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f025 facf 	bl	8025c8c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80006ee:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006f0:	4a3a      	ldr	r2, [pc, #232]	; (80007dc <MX_LTDC_Init+0x104>)
 80006f2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80006f4:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80006fa:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000700:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_LTDC_Init+0x100>)
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000712:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000714:	2209      	movs	r2, #9
 8000716:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_LTDC_Init+0x100>)
 800071a:	2235      	movs	r2, #53	; 0x35
 800071c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800071e:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000720:	220b      	movs	r2, #11
 8000722:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000726:	f240 2215 	movw	r2, #533	; 0x215
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800072c:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MX_LTDC_Init+0x100>)
 800072e:	f240 121b 	movw	r2, #283	; 0x11b
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000736:	f240 2235 	movw	r2, #565	; 0x235
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <MX_LTDC_Init+0x100>)
 800073e:	f240 121d 	movw	r2, #285	; 0x11d
 8000742:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_LTDC_Init+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800075c:	481e      	ldr	r0, [pc, #120]	; (80007d8 <MX_LTDC_Init+0x100>)
 800075e:	f00e f9a5 	bl	800eaac <HAL_LTDC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000768:	f000 f9bc 	bl	8000ae4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000770:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000774:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800077a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800077e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000784:	23ff      	movs	r3, #255	; 0xff
 8000786:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800078c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000790:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000792:	2305      	movs	r3, #5
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000796:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800079c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80007a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_LTDC_Init+0x100>)
 80007c2:	f00e fafb 	bl	800edbc <HAL_LTDC_ConfigLayer>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80007cc:	f000 f98a 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3738      	adds	r7, #56	; 0x38
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2400b1b0 	.word	0x2400b1b0
 80007dc:	50001000 	.word	0x50001000

080007e0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_QUADSPI_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007f8:	2210      	movs	r2, #16
 80007fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007fe:	221a      	movs	r2, #26
 8000800:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_QUADSPI_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000812:	2240      	movs	r2, #64	; 0x40
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000818:	f00e fe9e 	bl	800f558 <HAL_QSPI_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f95f 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_QUADSPI_Init+0x58>)
 8000828:	f000 f9d6 	bl	8000bd8 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2400b2f8 	.word	0x2400b2f8
 8000834:	52005000 	.word	0x52005000
 8000838:	08000ae5 	.word	0x08000ae5

0800083c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_FMC_Init+0xa0>)
 8000856:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <MX_FMC_Init+0xa4>)
 8000858:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_FMC_Init+0xa0>)
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_FMC_Init+0xa0>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_FMC_Init+0xa0>)
 8000868:	2204      	movs	r2, #4
 800086a:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_FMC_Init+0xa0>)
 800086e:	2210      	movs	r2, #16
 8000870:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_FMC_Init+0xa0>)
 8000874:	2240      	movs	r2, #64	; 0x40
 8000876:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_FMC_Init+0xa0>)
 800087a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800087e:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_FMC_Init+0xa0>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_FMC_Init+0xa0>)
 8000888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088c:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_FMC_Init+0xa0>)
 8000890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_FMC_Init+0xa0>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80008a0:	2306      	movs	r3, #6
 80008a2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80008a8:	2306      	movs	r3, #6
 80008aa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_FMC_Init+0xa0>)
 80008be:	f011 fe35 	bl	801252c <HAL_SDRAM_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80008c8:	f000 f90c 	bl	8000ae4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_FMC_Init+0xa8>)
 80008ce:	f000 f9a4 	bl	8000c1a <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2400b258 	.word	0x2400b258
 80008e0:	52004140 	.word	0x52004140
 80008e4:	08000ae5 	.word	0x08000ae5

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008fe:	4b4e      	ldr	r3, [pc, #312]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4a4c      	ldr	r2, [pc, #304]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4b4a      	ldr	r3, [pc, #296]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000918:	623b      	str	r3, [r7, #32]
 800091a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091c:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <MX_GPIO_Init+0x150>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	4a45      	ldr	r2, [pc, #276]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092c:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <MX_GPIO_Init+0x150>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	61fb      	str	r3, [r7, #28]
 8000938:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800093a:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <MX_GPIO_Init+0x150>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	4a3d      	ldr	r2, [pc, #244]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094a:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <MX_GPIO_Init+0x150>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000958:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <MX_GPIO_Init+0x150>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	4a36      	ldr	r2, [pc, #216]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000968:	4b33      	ldr	r3, [pc, #204]	; (8000a38 <MX_GPIO_Init+0x150>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000976:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <MX_GPIO_Init+0x150>)
 800097e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	4a27      	ldr	r2, [pc, #156]	; (8000a38 <MX_GPIO_Init+0x150>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009d8:	f043 0320 	orr.w	r3, r3, #32
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	f003 0320 	and.w	r3, r3, #32
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_GPIO_Init+0x150>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0x154>)
 8000a2a:	f00c fee3 	bl	800d7f4 <HAL_GPIO_Init>

}
 8000a2e:	bf00      	nop
 8000a30:	3738      	adds	r7, #56	; 0x38
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	58020000 	.word	0x58020000

08000a40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f006 fb63 	bl	8007114 <osDelay>
 8000a4e:	e7fb      	b.n	8000a48 <StartDefaultTask+0x8>

08000a50 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a62:	f00c fbed 	bl	800d240 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a66:	2301      	movs	r3, #1
 8000a68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000a6e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000a72:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000a74:	2313      	movs	r3, #19
 8000a76:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a80:	2303      	movs	r3, #3
 8000a82:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a94:	463b      	mov	r3, r7
 8000a96:	4618      	mov	r0, r3
 8000a98:	f00c fc0a 	bl	800d2b0 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000aa0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000aa4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000aa6:	231a      	movs	r3, #26
 8000aa8:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4618      	mov	r0, r3
 8000aae:	f00c fbff 	bl	800d2b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ab2:	2004      	movs	r0, #4
 8000ab4:	f00c fbdc 	bl	800d270 <HAL_MPU_Enable>

}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f00c fa77 	bl	800cfc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40001000 	.word	0x40001000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000af6:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000af8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000afc:	4a34      	ldr	r2, [pc, #208]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000b06:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a2d      	ldr	r2, [pc, #180]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a25      	ldr	r2, [pc, #148]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <initLtdcClocks+0xe0>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <initLtdcClocks+0xe4>)
 8000bba:	f00c fe1b 	bl	800d7f4 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <initLtdcClocks+0xe4>)
 8000bc4:	f00d f8d0 	bl	800dd68 <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	58020c00 	.word	0x58020c00

08000bd8 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000be0:	2303      	movs	r3, #3
 8000be2:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000be4:	2301      	movs	r3, #1
 8000be6:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000be8:	2340      	movs	r3, #64	; 0x40
 8000bea:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f00b f964 	bl	800bec0 <BSP_QSPI_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c02:	2000      	movs	r0, #0
 8000c04:	f00b fa36 	bl	800c074 <BSP_QSPI_EnableMemoryMappedMode>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4798      	blx	r3
   }
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f00b fd94 	bl	800c750 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f00b fd35 	bl	800c698 <BSP_SDRAM_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <initBspSdRam+0x1e>
   {
      error_handler();
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4798      	blx	r3
   }
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x38>)
 8000c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_MspInit+0x38>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_MspInit+0x38>)
 8000c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	210f      	movs	r1, #15
 8000c68:	f06f 0001 	mvn.w	r0, #1
 8000c6c:	f00c fab2 	bl	800d1d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	58024400 	.word	0x58024400

08000c7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <HAL_CRC_MspInit+0x3c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d10e      	bne.n	8000cac <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_CRC_MspInit+0x40>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <HAL_CRC_MspInit+0x40>)
 8000c96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <HAL_CRC_MspInit+0x40>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	58024c00 	.word	0x58024c00
 8000cbc:	58024400 	.word	0x58024400

08000cc0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_DMA2D_MspInit+0x48>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d116      	bne.n	8000d00 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_DMA2D_MspInit+0x4c>)
 8000cd4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <HAL_DMA2D_MspInit+0x4c>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_DMA2D_MspInit+0x4c>)
 8000ce4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2105      	movs	r1, #5
 8000cf4:	205a      	movs	r0, #90	; 0x5a
 8000cf6:	f00c fa6d 	bl	800d1d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000cfa:	205a      	movs	r0, #90	; 0x5a
 8000cfc:	f00c fa84 	bl	800d208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	52001000 	.word	0x52001000
 8000d0c:	58024400 	.word	0x58024400

08000d10 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0bc      	sub	sp, #240	; 0xf0
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	22bc      	movs	r2, #188	; 0xbc
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f024 ffab 	bl	8025c8c <memset>
  if(hltdc->Instance==LTDC)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a68      	ldr	r2, [pc, #416]	; (8000edc <HAL_LTDC_MspInit+0x1cc>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	f040 80c8 	bne.w	8000ed2 <HAL_LTDC_MspInit+0x1c2>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d42:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d46:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000d48:	2305      	movs	r3, #5
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000d4c:	23a0      	movs	r3, #160	; 0xa0
 8000d4e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000d58:	2353      	movs	r3, #83	; 0x53
 8000d5a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d60:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f010 fb38 	bl	80113e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000d7a:	f7ff feb3 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d7e:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000d80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000d84:	4a56      	ldr	r2, [pc, #344]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000d8e:	4b54      	ldr	r3, [pc, #336]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000d90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d9c:	4b50      	ldr	r3, [pc, #320]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	4a4f      	ldr	r2, [pc, #316]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000da4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dac:	4b4c      	ldr	r3, [pc, #304]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dba:	4b49      	ldr	r3, [pc, #292]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	4a47      	ldr	r2, [pc, #284]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dca:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000dd8:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	4a40      	ldr	r2, [pc, #256]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000de0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de8:	4b3d      	ldr	r3, [pc, #244]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df6:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	4a38      	ldr	r2, [pc, #224]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e06:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <HAL_LTDC_MspInit+0x1d0>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000e14:	23fc      	movs	r3, #252	; 0xfc
 8000e16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e2c:	230e      	movs	r3, #14
 8000e2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e36:	4619      	mov	r1, r3
 8000e38:	482a      	ldr	r0, [pc, #168]	; (8000ee4 <HAL_LTDC_MspInit+0x1d4>)
 8000e3a:	f00c fcdb 	bl	800d7f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000e3e:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e58:	230e      	movs	r3, #14
 8000e5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e62:	4619      	mov	r1, r3
 8000e64:	4820      	ldr	r0, [pc, #128]	; (8000ee8 <HAL_LTDC_MspInit+0x1d8>)
 8000e66:	f00c fcc5 	bl	800d7f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000e6a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e84:	230e      	movs	r3, #14
 8000e86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e8a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4816      	ldr	r0, [pc, #88]	; (8000eec <HAL_LTDC_MspInit+0x1dc>)
 8000e92:	f00c fcaf 	bl	800d7f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb0:	230e      	movs	r3, #14
 8000eb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eb6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <HAL_LTDC_MspInit+0x1e0>)
 8000ebe:	f00c fc99 	bl	800d7f4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	2058      	movs	r0, #88	; 0x58
 8000ec8:	f00c f984 	bl	800d1d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ecc:	2058      	movs	r0, #88	; 0x58
 8000ece:	f00c f99b 	bl	800d208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	37f0      	adds	r7, #240	; 0xf0
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	50001000 	.word	0x50001000
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58022800 	.word	0x58022800
 8000ee8:	58022000 	.word	0x58022000
 8000eec:	58022400 	.word	0x58022400
 8000ef0:	58021c00 	.word	0x58021c00

08000ef4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0bc      	sub	sp, #240	; 0xf0
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	22bc      	movs	r2, #188	; 0xbc
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f024 feb9 	bl	8025c8c <memset>
  if(hqspi->Instance==QUADSPI)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a76      	ldr	r2, [pc, #472]	; (80010f8 <HAL_QSPI_MspInit+0x204>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	f040 80e4 	bne.w	80010ee <HAL_QSPI_MspInit+0x1fa>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f2a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 0320 	add.w	r3, r7, #32
 8000f34:	4618      	mov	r0, r3
 8000f36:	f010 fa55 	bl	80113e4 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000f40:	f7ff fdd0 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f44:	4b6d      	ldr	r3, [pc, #436]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f4a:	4a6c      	ldr	r2, [pc, #432]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f54:	4b69      	ldr	r3, [pc, #420]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f62:	4b66      	ldr	r3, [pc, #408]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	4a64      	ldr	r2, [pc, #400]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f72:	4b62      	ldr	r3, [pc, #392]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f80:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a5d      	ldr	r2, [pc, #372]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f88:	f043 0320 	orr.w	r3, r3, #32
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b5a      	ldr	r3, [pc, #360]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0320 	and.w	r3, r3, #32
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	4b57      	ldr	r3, [pc, #348]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	4a55      	ldr	r2, [pc, #340]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fae:	4b53      	ldr	r3, [pc, #332]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	4a4e      	ldr	r2, [pc, #312]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <HAL_QSPI_MspInit+0x208>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000fda:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ff4:	2309      	movs	r3, #9
 8000ff6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ffe:	4619      	mov	r1, r3
 8001000:	483f      	ldr	r0, [pc, #252]	; (8001100 <HAL_QSPI_MspInit+0x20c>)
 8001002:	f00c fbf7 	bl	800d7f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001006:	2340      	movs	r3, #64	; 0x40
 8001008:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001012:	2301      	movs	r3, #1
 8001014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800101e:	230a      	movs	r3, #10
 8001020:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001024:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001028:	4619      	mov	r1, r3
 800102a:	4835      	ldr	r0, [pc, #212]	; (8001100 <HAL_QSPI_MspInit+0x20c>)
 800102c:	f00c fbe2 	bl	800d7f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001030:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001034:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800104a:	2309      	movs	r3, #9
 800104c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001050:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001054:	4619      	mov	r1, r3
 8001056:	482b      	ldr	r0, [pc, #172]	; (8001104 <HAL_QSPI_MspInit+0x210>)
 8001058:	f00c fbcc 	bl	800d7f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800105c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001060:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001076:	230a      	movs	r3, #10
 8001078:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800107c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001080:	4619      	mov	r1, r3
 8001082:	4820      	ldr	r0, [pc, #128]	; (8001104 <HAL_QSPI_MspInit+0x210>)
 8001084:	f00c fbb6 	bl	800d7f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001088:	230c      	movs	r3, #12
 800108a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010a0:	2309      	movs	r3, #9
 80010a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010aa:	4619      	mov	r1, r3
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <HAL_QSPI_MspInit+0x214>)
 80010ae:	f00c fba1 	bl	800d7f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010cc:	2309      	movs	r3, #9
 80010ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010d6:	4619      	mov	r1, r3
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <HAL_QSPI_MspInit+0x218>)
 80010da:	f00c fb8b 	bl	800d7f4 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2105      	movs	r1, #5
 80010e2:	205c      	movs	r0, #92	; 0x5c
 80010e4:	f00c f876 	bl	800d1d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80010e8:	205c      	movs	r0, #92	; 0x5c
 80010ea:	f00c f88d 	bl	800d208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	37f0      	adds	r7, #240	; 0xf0
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	52005000 	.word	0x52005000
 80010fc:	58024400 	.word	0x58024400
 8001100:	58021800 	.word	0x58021800
 8001104:	58021400 	.word	0x58021400
 8001108:	58021c00 	.word	0x58021c00
 800110c:	58020c00 	.word	0x58020c00

08001110 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	b0b6      	sub	sp, #216	; 0xd8
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001116:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001126:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <HAL_FMC_MspInit+0x154>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	f040 8096 	bne.w	800125c <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 8001130:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <HAL_FMC_MspInit+0x154>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	22bc      	movs	r2, #188	; 0xbc
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f024 fda4 	bl	8025c8c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001148:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800114a:	2300      	movs	r3, #0
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4618      	mov	r0, r3
 8001154:	f010 f946 	bl	80113e4 <HAL_RCCEx_PeriphCLKConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 800115e:	f7ff fcc1 	bl	8000ae4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_FMC_MspInit+0x158>)
 8001164:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001168:	4a3f      	ldr	r2, [pc, #252]	; (8001268 <HAL_FMC_MspInit+0x158>)
 800116a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800116e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001172:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <HAL_FMC_MspInit+0x158>)
 8001174:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001180:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001184:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800119a:	230c      	movs	r3, #12
 800119c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011a4:	4619      	mov	r1, r3
 80011a6:	4831      	ldr	r0, [pc, #196]	; (800126c <HAL_FMC_MspInit+0x15c>)
 80011a8:	f00c fb24 	bl	800d7f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80011ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80011b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c6:	230c      	movs	r3, #12
 80011c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4827      	ldr	r0, [pc, #156]	; (8001270 <HAL_FMC_MspInit+0x160>)
 80011d4:	f00c fb0e 	bl	800d7f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80011d8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80011dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011f2:	230c      	movs	r3, #12
 80011f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011fc:	4619      	mov	r1, r3
 80011fe:	481d      	ldr	r0, [pc, #116]	; (8001274 <HAL_FMC_MspInit+0x164>)
 8001200:	f00c faf8 	bl	800d7f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001204:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800121e:	230c      	movs	r3, #12
 8001220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001224:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001228:	4619      	mov	r1, r3
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <HAL_FMC_MspInit+0x168>)
 800122c:	f00c fae2 	bl	800d7f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001230:	23e0      	movs	r3, #224	; 0xe0
 8001232:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001248:	230c      	movs	r3, #12
 800124a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800124e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001252:	4619      	mov	r1, r3
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <HAL_FMC_MspInit+0x16c>)
 8001256:	f00c facd 	bl	800d7f4 <HAL_GPIO_Init>
 800125a:	e000      	b.n	800125e <HAL_FMC_MspInit+0x14e>
    return;
 800125c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800125e:	37d8      	adds	r7, #216	; 0xd8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	24000148 	.word	0x24000148
 8001268:	58024400 	.word	0x58024400
 800126c:	58021000 	.word	0x58021000
 8001270:	58021800 	.word	0x58021800
 8001274:	58020c00 	.word	0x58020c00
 8001278:	58021400 	.word	0x58021400
 800127c:	58021c00 	.word	0x58021c00

08001280 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001288:	f7ff ff42 	bl	8001110 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_FMC_MspDeInit+0x58>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d123      	bne.n	80012e8 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_FMC_MspDeInit+0x58>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_FMC_MspDeInit+0x5c>)
 80012a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_FMC_MspDeInit+0x5c>)
 80012ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012b2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80012b6:	f64f 7183 	movw	r1, #65411	; 0xff83
 80012ba:	480e      	ldr	r0, [pc, #56]	; (80012f4 <HAL_FMC_MspDeInit+0x60>)
 80012bc:	f00c fc4a 	bl	800db54 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80012c0:	f248 1133 	movw	r1, #33075	; 0x8133
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <HAL_FMC_MspDeInit+0x64>)
 80012c6:	f00c fc45 	bl	800db54 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80012ca:	f24c 7103 	movw	r1, #50947	; 0xc703
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <HAL_FMC_MspDeInit+0x68>)
 80012d0:	f00c fc40 	bl	800db54 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80012d4:	f64f 013f 	movw	r1, #63551	; 0xf83f
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <HAL_FMC_MspDeInit+0x6c>)
 80012da:	f00c fc3b 	bl	800db54 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80012de:	21e0      	movs	r1, #224	; 0xe0
 80012e0:	4808      	ldr	r0, [pc, #32]	; (8001304 <HAL_FMC_MspDeInit+0x70>)
 80012e2:	f00c fc37 	bl	800db54 <HAL_GPIO_DeInit>
 80012e6:	e000      	b.n	80012ea <HAL_FMC_MspDeInit+0x56>
    return;
 80012e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2400014c 	.word	0x2400014c
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58021000 	.word	0x58021000
 80012f8:	58021800 	.word	0x58021800
 80012fc:	58020c00 	.word	0x58020c00
 8001300:	58021400 	.word	0x58021400
 8001304:	58021c00 	.word	0x58021c00

08001308 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 8001310:	f7ff ffc0 	bl	8001294 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b090      	sub	sp, #64	; 0x40
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	d827      	bhi.n	800137a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800132a:	2200      	movs	r2, #0
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	2036      	movs	r0, #54	; 0x36
 8001330:	f00b ff50 	bl	800d1d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001334:	2036      	movs	r0, #54	; 0x36
 8001336:	f00b ff67 	bl	800d208 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800133a:	4a29      	ldr	r2, [pc, #164]	; (80013e0 <HAL_InitTick+0xc4>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <HAL_InitTick+0xc8>)
 8001342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001346:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_InitTick+0xc8>)
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_InitTick+0xc8>)
 8001352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800135e:	f107 0210 	add.w	r2, r7, #16
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f00f fff9 	bl	8011360 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001374:	2b00      	cmp	r3, #0
 8001376:	d106      	bne.n	8001386 <HAL_InitTick+0x6a>
 8001378:	e001      	b.n	800137e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e02b      	b.n	80013d6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800137e:	f00f ffc3 	bl	8011308 <HAL_RCC_GetPCLK1Freq>
 8001382:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001384:	e004      	b.n	8001390 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001386:	f00f ffbf 	bl	8011308 <HAL_RCC_GetPCLK1Freq>
 800138a:	4603      	mov	r3, r0
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <HAL_InitTick+0xcc>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	0c9b      	lsrs	r3, r3, #18
 800139a:	3b01      	subs	r3, #1
 800139c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_InitTick+0xd0>)
 80013a0:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <HAL_InitTick+0xd4>)
 80013a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_InitTick+0xd0>)
 80013a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_InitTick+0xd0>)
 80013ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_InitTick+0xd0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_InitTick+0xd0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013be:	480b      	ldr	r0, [pc, #44]	; (80013ec <HAL_InitTick+0xd0>)
 80013c0:	f011 f969 	bl	8012696 <HAL_TIM_Base_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d104      	bne.n	80013d4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013ca:	4808      	ldr	r0, [pc, #32]	; (80013ec <HAL_InitTick+0xd0>)
 80013cc:	f011 f9c4 	bl	8012758 <HAL_TIM_Base_Start_IT>
 80013d0:	4603      	mov	r3, r0
 80013d2:	e000      	b.n	80013d6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3740      	adds	r7, #64	; 0x40
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	24000048 	.word	0x24000048
 80013e4:	58024400 	.word	0x58024400
 80013e8:	431bde83 	.word	0x431bde83
 80013ec:	2400b344 	.word	0x2400b344
 80013f0:	40001000 	.word	0x40001000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <TIM6_DAC_IRQHandler+0x10>)
 8001426:	f011 fa0f 	bl	8012848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2400b344 	.word	0x2400b344

08001434 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <LTDC_IRQHandler+0x10>)
 800143a:	f00d fc07 	bl	800ec4c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2400b1b0 	.word	0x2400b1b0

08001448 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <DMA2D_IRQHandler+0x10>)
 800144e:	f00c f8c1 	bl	800d5d4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2400b290 	.word	0x2400b290

0800145c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <QUADSPI_IRQHandler+0x10>)
 8001462:	f00e f8ed 	bl	800f640 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2400b2f8 	.word	0x2400b2f8

08001470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_kill>:

int _kill(int pid, int sig)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800148a:	f024 fba5 	bl	8025bd8 <__errno>
 800148e:	4603      	mov	r3, r0
 8001490:	2216      	movs	r2, #22
 8001492:	601a      	str	r2, [r3, #0]
	return -1;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_exit>:

void _exit (int status)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ffe7 	bl	8001480 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014b2:	e7fe      	b.n	80014b2 <_exit+0x12>

080014b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e00a      	b.n	80014dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014c6:	f3af 8000 	nop.w
 80014ca:	4601      	mov	r1, r0
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	b2ca      	uxtb	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbf0      	blt.n	80014c6 <_read+0x12>
	}

return len;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e009      	b.n	8001514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf1      	blt.n	8001500 <_write+0x12>
	}
	return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_close>:

int _close(int file)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
	return -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154e:	605a      	str	r2, [r3, #4]
	return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_isatty>:

int _isatty(int file)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	return 1;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f024 fb0a 	bl	8025bd8 <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	24080000 	.word	0x24080000
 80015f0:	00001000 	.word	0x00001000
 80015f4:	24000150 	.word	0x24000150
 80015f8:	2400b470 	.word	0x2400b470

080015fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001634 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001600:	f009 f86a 	bl	800a6d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162a:	f024 faed 	bl	8025c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162e:	f7fe fea7 	bl	8000380 <main>
  bx  lr
 8001632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001634:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001638:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800163c:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 8001640:	0802aa20 	.word	0x0802aa20
  ldr r2, =_sbss
 8001644:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8001648:	2400b470 	.word	0x2400b470

0800164c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC3_IRQHandler>

0800164e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001652:	f001 fc69 	bl	8002f28 <touchgfx_init>
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}

0800165a <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001662:	f001 fc8b 	bl	8002f7c <touchgfx_taskEntry>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    {
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
    }
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	08027734 	.word	0x08027734

08001690 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    }
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffe9 	bl	8001670 <_ZN8touchgfx15TouchControllerD1Ev>
 800169e:	2104      	movs	r1, #4
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f024 fa38 	bl	8025b16 <_ZdlPvj>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 80016b8:	f000 faa8 	bl	8001c0c <_ZN25STM32H745ITouchController4initEv>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f000 fabe 	bl	8001c54 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ffbb 	bl	8001670 <_ZN8touchgfx15TouchControllerD1Ev>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	0802771c 	.word	0x0802771c

08001708 <_ZN20STM32TouchControllerD0Ev>:
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ffe7 	bl	80016e4 <_ZN20STM32TouchControllerD1Ev>
 8001716:	2104      	movs	r1, #4
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f024 f9fc 	bl	8025b16 <_ZdlPvj>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d80c      	bhi.n	8001752 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001751 	.word	0x08001751
 8001744:	08001751 	.word	0x08001751
 8001748:	08001751 	.word	0x08001751
 800174c:	08001751 	.word	0x08001751
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 8001750:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop

08001760 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d80c      	bhi.n	800178a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8001770:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	08001789 	.word	0x08001789
 800177c:	08001789 	.word	0x08001789
 8001780:	08001789 	.word	0x08001789
 8001784:	08001789 	.word	0x08001789
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 8001788:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d80c      	bhi.n	80017c2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	080017c1 	.word	0x080017c1
 80017b8:	080017c1 	.word	0x080017c1
 80017bc:	080017c1 	.word	0x080017c1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80017c0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop

080017d0 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    {
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <_ZN8touchgfx3HALD1Ev+0x1c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	601a      	str	r2, [r3, #0]
    }
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	080287b4 	.word	0x080287b4

080017f0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    }
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ffe9 	bl	80017d0 <_ZN8touchgfx3HALD1Ev>
 80017fe:	217c      	movs	r1, #124	; 0x7c
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f024 f988 	bl	8025b16 <_ZdlPvj>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	887a      	ldrh	r2, [r7, #2]
 800184e:	429a      	cmp	r2, r3
 8001850:	d304      	bcc.n	800185c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	883a      	ldrh	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d205      	bcs.n	8001868 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001860:	219e      	movs	r1, #158	; 0x9e
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001864:	f024 f986 	bl	8025b74 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001868:	4a09      	ldr	r2, [pc, #36]	; (8001890 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001870:	883b      	ldrh	r3, [r7, #0]
 8001872:	8013      	strh	r3, [r2, #0]
    }
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2400aee0 	.word	0x2400aee0
 8001880:	2400aee2 	.word	0x2400aee2
 8001884:	08026c9c 	.word	0x08026c9c
 8001888:	08026d00 	.word	0x08026d00
 800188c:	08026d44 	.word	0x08026d44
 8001890:	2400aee6 	.word	0x2400aee6
 8001894:	2400aee8 	.word	0x2400aee8

08001898 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4610      	mov	r0, r2
 80018b8:	4798      	blx	r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	e000      	b.n	80018c0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80018be:	2300      	movs	r3, #0
    }
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f013 fabb 	bl	8014e4c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	33a4      	adds	r3, #164	; 0xa4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
    }
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
    {
        return false;
 80018f4:	2300      	movs	r3, #0
    }
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d106      	bne.n	8001926 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800191c:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001920:	4811      	ldr	r0, [pc, #68]	; (8001968 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001922:	f024 f927 	bl	8025b74 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf14      	ite	ne
 800193e:	2301      	movne	r3, #1
 8001940:	2300      	moveq	r3, #0
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001946:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	bf14      	ite	ne
 800194e:	2301      	movne	r3, #1
 8001950:	2300      	moveq	r3, #0
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001956:	701a      	strb	r2, [r3, #0]
    }
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	08026d98 	.word	0x08026d98
 8001964:	08026dd0 	.word	0x08026dd0
 8001968:	08026d44 	.word	0x08026d44
 800196c:	2400aeea 	.word	0x2400aeea
 8001970:	2400aeeb 	.word	0x2400aeeb

08001974 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800197c:	2300      	movs	r3, #0
    }
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	4610      	mov	r0, r2
 80019a6:	4798      	blx	r3
        }
    }
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80019b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3318      	adds	r3, #24
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4610      	mov	r0, r2
 80019e0:	4798      	blx	r3
 80019e2:	4603      	mov	r3, r0
    }
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d011      	beq.n	8001a28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d11e      	bne.n	8001a4a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001a14:	881a      	ldrh	r2, [r3, #0]
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001a18:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001a1c:	89bb      	ldrh	r3, [r7, #12]
 8001a1e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001a26:	e010      	b.n	8001a4a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001a3c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
    }
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	2400aee4 	.word	0x2400aee4
 8001a5c:	2400aee2 	.word	0x2400aee2
 8001a60:	2400aee0 	.word	0x2400aee0

08001a64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f012 fba1 	bl	80141b6 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fe9f 	bl	80017d0 <_ZN8touchgfx3HALD1Ev>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	08027a9c 	.word	0x08027a9c

08001aa0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ffe7 	bl	8001a7c <_ZN20TouchGFXGeneratedHALD1Ev>
 8001aae:	217c      	movs	r1, #124	; 0x7c
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f024 f830 	bl	8025b16 <_ZdlPvj>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ffca 	bl	8001a64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 fd3a 	bl	800355c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fdc6 	bl	800368c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6839      	ldr	r1, [r7, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fdc5 	bl	80036a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 fdcd 	bl	80036d4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	f001 fe14 	bl	8003784 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 fd17 	bl	80035a4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 fd1b 	bl	80035c4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fd1d 	bl	80035e0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f001 fd1f 	bl	80035fc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff4f 	bl	8001a7c <_ZN20TouchGFXGeneratedHALD1Ev>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	0802774c 	.word	0x0802774c

08001bec <_ZN11TouchGFXHALD0Ev>:
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ffe7 	bl	8001bc8 <_ZN11TouchGFXHALD1Ev>
 8001bfa:	217c      	movs	r1, #124	; 0x7c
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f023 ff8a 	bl	8025b16 <_ZdlPvj>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001c12:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c16:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001c18:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001c1c:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001c1e:	2308      	movs	r3, #8
 8001c20:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f00a ff16 	bl	800ca5c <BSP_TS_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	e000      	b.n	8001c4a <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001c48:	bf00      	nop
}
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	24000154 	.word	0x24000154

08001c54 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	f083 0301 	eor.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e014      	b.n	8001c9a <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001c70:	490d      	ldr	r1, [pc, #52]	; (8001ca8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001c72:	2000      	movs	r0, #0
 8001c74:	f00a ffae 	bl	800cbd4 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e00a      	b.n	8001c9a <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	461a      	mov	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	601a      	str	r2, [r3, #0]
    return true;
 8001c98:	2301      	movs	r3, #1
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	24000154 	.word	0x24000154
 8001ca8:	24000158 	.word	0x24000158

08001cac <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f005 fa48 	bl	800714a <osSemaphoreNew>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001cbe:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001ccc:	2128      	movs	r1, #40	; 0x28
 8001cce:	480e      	ldr	r0, [pc, #56]	; (8001d08 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001cd0:	f023 ff50 	bl	8025b74 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f005 fb55 	bl	8007388 <osMessageQueueNew>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001ce2:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001cf4:	f023 ff3e 	bl	8025b74 <__assert_func>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	24000164 	.word	0x24000164
 8001d00:	08026e20 	.word	0x08026e20
 8001d04:	08026e6c 	.word	0x08026e6c
 8001d08:	08026e9c 	.word	0x08026e9c
 8001d0c:	24000168 	.word	0x24000168
 8001d10:	08026eec 	.word	0x08026eec

08001d14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	4618      	mov	r0, r3
 8001d22:	f005 fa9b 	bl	800725c <osSemaphoreAcquire>
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	24000164 	.word	0x24000164

08001d30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f005 fae1 	bl	8007300 <osSemaphoreRelease>
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	24000164 	.word	0x24000164

08001d48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f005 fa82 	bl	800725c <osSemaphoreAcquire>
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	24000164 	.word	0x24000164

08001d60 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f005 fac9 	bl	8007300 <osSemaphoreRelease>
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	24000164 	.word	0x24000164

08001d78 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	2300      	movs	r3, #0
 8001d82:	2200      	movs	r2, #0
 8001d84:	4903      	ldr	r1, [pc, #12]	; (8001d94 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8001d86:	f005 fb73 	bl	8007470 <osMessageQueuePut>
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	24000168 	.word	0x24000168
 8001d94:	24000004 	.word	0x24000004

08001d98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	1d39      	adds	r1, r7, #4
 8001da4:	2300      	movs	r3, #0
 8001da6:	2200      	movs	r2, #0
 8001da8:	f005 fbc2 	bl	8007530 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	1d39      	adds	r1, r7, #4
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	2200      	movs	r2, #0
 8001db8:	f005 fbba 	bl	8007530 <osMessageQueueGet>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	24000168 	.word	0x24000168

08001dc8 <__NVIC_EnableIRQ>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_DisableIRQ>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db12      	blt.n	8001e3c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	490a      	ldr	r1, [pc, #40]	; (8001e48 <__NVIC_DisableIRQ+0x44>)
 8001e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	3320      	adds	r3, #32
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e30:	f3bf 8f4f 	dsb	sy
}
 8001e34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e36:	f3bf 8f6f 	isb	sy
}
 8001e3a:	bf00      	nop
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
        : color(0)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
    {
    }
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
    {
        return color;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
    }
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    {
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	601a      	str	r2, [r3, #0]
    }
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	0802786c 	.word	0x0802786c

08001ea0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    }
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ffe9 	bl	8001e80 <_ZN8touchgfx9DMA_QueueD1Ev>
 8001eae:	2104      	movs	r1, #4
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f023 fe30 	bl	8025b16 <_ZdlPvj>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3344      	adds	r3, #68	; 0x44
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
    }
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
    {
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
    }
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	08028d0c 	.word	0x08028d0c

08001efc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
    }
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ffe9 	bl	8001edc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8001f0a:	210c      	movs	r1, #12
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f023 fe02 	bl	8025b16 <_ZdlPvj>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	721a      	strb	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	725a      	strb	r2, [r3, #9]
    {
    }
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	08028d0c 	.word	0x08028d0c

08001f50 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8001f58:	2301      	movs	r3, #1
    }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3328      	adds	r3, #40	; 0x28
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4798      	blx	r3
    }
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
        return instance;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
    }
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	2400aeec 	.word	0x2400aeec

08001f9c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3314      	adds	r3, #20
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4798      	blx	r3
    }
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8001fc6:	f7ff ffdd 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ffe5 	bl	8001f9c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	330c      	adds	r3, #12
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff30 	bl	8001e4c <_ZN8touchgfx9colortypeC1Ev>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	330c      	adds	r3, #12
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f7ff ff87 	bl	8001f1c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800200e:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <_ZN8STM32DMAC1Ev+0x50>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f103 000c 	add.w	r0, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3320      	adds	r3, #32
 800201e:	2260      	movs	r2, #96	; 0x60
 8002020:	4619      	mov	r1, r3
 8002022:	f013 f879 	bl	8015118 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3320      	adds	r3, #32
 800202a:	245f      	movs	r4, #95	; 0x5f
 800202c:	461d      	mov	r5, r3
 800202e:	2c00      	cmp	r4, #0
 8002030:	db05      	blt.n	800203e <_ZN8STM32DMAC1Ev+0x46>
 8002032:	4628      	mov	r0, r5
 8002034:	f7ff ffd1 	bl	8001fda <_ZN8touchgfx6BlitOpC1Ev>
 8002038:	3520      	adds	r5, #32
 800203a:	3c01      	subs	r4, #1
 800203c:	e7f7      	b.n	800202e <_ZN8STM32DMAC1Ev+0x36>
{
}
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bdb0      	pop	{r4, r5, r7, pc}
 8002048:	0802781c 	.word	0x0802781c

0800204c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	4a09      	ldr	r2, [pc, #36]	; (800207c <_ZN8STM32DMAD1Ev+0x30>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800205a:	205a      	movs	r0, #90	; 0x5a
 800205c:	f7ff fed2 	bl	8001e04 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	330c      	adds	r3, #12
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fac7 	bl	80025f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff35 	bl	8001edc <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	0802781c 	.word	0x0802781c

08002080 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
}
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ffdf 	bl	800204c <_ZN8STM32DMAD1Ev>
 800208e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f023 fd3f 	bl	8025b16 <_ZdlPvj>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80020b2:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020b4:	f043 0310 	orr.w	r3, r3, #16
 80020b8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020da:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <_ZN8STM32DMA10initializeEv+0x54>)
 80020dc:	f023 0310 	bic.w	r3, r3, #16
 80020e0:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <_ZN8STM32DMA10initializeEv+0x58>)
 80020e4:	4a06      	ldr	r2, [pc, #24]	; (8002100 <_ZN8STM32DMA10initializeEv+0x5c>)
 80020e6:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80020e8:	205a      	movs	r0, #90	; 0x5a
 80020ea:	f7ff fe6d 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	58024400 	.word	0x58024400
 80020fc:	2400b290 	.word	0x2400b290
 8002100:	08001fbf 	.word	0x08001fbf

08002104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	2b0b      	cmp	r3, #11
 8002118:	d826      	bhi.n	8002168 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800211a:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002120:	0800215d 	.word	0x0800215d
 8002124:	08002157 	.word	0x08002157
 8002128:	08002151 	.word	0x08002151
 800212c:	08002169 	.word	0x08002169
 8002130:	08002169 	.word	0x08002169
 8002134:	08002169 	.word	0x08002169
 8002138:	08002169 	.word	0x08002169
 800213c:	08002163 	.word	0x08002163
 8002140:	08002163 	.word	0x08002163
 8002144:	08002163 	.word	0x08002163
 8002148:	08002163 	.word	0x08002163
 800214c:	08002163 	.word	0x08002163
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
        break;
 8002154:	e00e      	b.n	8002174 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8002156:	2301      	movs	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
        break;
 800215a:	e00b      	b.n	8002174 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800215c:	2302      	movs	r3, #2
 800215e:	60fb      	str	r3, [r7, #12]
        break;
 8002160:	e008      	b.n	8002174 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002162:	2305      	movs	r3, #5
 8002164:	60fb      	str	r3, [r7, #12]
        break;
 8002166:	e005      	b.n	8002174 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800216a:	4a06      	ldr	r2, [pc, #24]	; (8002184 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800216c:	2166      	movs	r1, #102	; 0x66
 800216e:	4806      	ldr	r0, [pc, #24]	; (8002188 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002170:	f023 fd00 	bl	8025b74 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002174:	68fb      	ldr	r3, [r7, #12]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	08026f30 	.word	0x08026f30
 8002184:	08026f4c 	.word	0x08026f4c
 8002188:	08026f98 	.word	0x08026f98

0800218c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	2b0a      	cmp	r3, #10
 80021a0:	d821      	bhi.n	80021e6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021e1 	.word	0x080021e1
 80021ac:	080021db 	.word	0x080021db
 80021b0:	080021d5 	.word	0x080021d5
 80021b4:	080021e7 	.word	0x080021e7
 80021b8:	080021e7 	.word	0x080021e7
 80021bc:	080021e7 	.word	0x080021e7
 80021c0:	080021e7 	.word	0x080021e7
 80021c4:	080021db 	.word	0x080021db
 80021c8:	080021db 	.word	0x080021db
 80021cc:	080021db 	.word	0x080021db
 80021d0:	080021db 	.word	0x080021db
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
        break;
 80021d8:	e00b      	b.n	80021f2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80021da:	2301      	movs	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
        break;
 80021de:	e008      	b.n	80021f2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80021e0:	2302      	movs	r3, #2
 80021e2:	60fb      	str	r3, [r7, #12]
        break;
 80021e4:	e005      	b.n	80021f2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80021ea:	2187      	movs	r1, #135	; 0x87
 80021ec:	4805      	ldr	r0, [pc, #20]	; (8002204 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80021ee:	f023 fcc1 	bl	8025b74 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	08026f30 	.word	0x08026f30
 8002200:	08026fe4 	.word	0x08026fe4
 8002204:	08026f98 	.word	0x08026f98

08002208 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002210:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	7f5b      	ldrb	r3, [r3, #29]
 800222e:	4619      	mov	r1, r3
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff67 	bl	8002104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002236:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	7f9b      	ldrb	r3, [r3, #30]
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff60 	bl	8002104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002244:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	7f9b      	ldrb	r3, [r3, #30]
 800224a:	4619      	mov	r1, r3
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff9d 	bl	800218c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002252:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	8b5b      	ldrh	r3, [r3, #26]
 8002258:	461a      	mov	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	8a9b      	ldrh	r3, [r3, #20]
 800225e:	1ad2      	subs	r2, r2, r3
 8002260:	4b96      	ldr	r3, [pc, #600]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	8b5b      	ldrh	r3, [r3, #26]
 8002268:	461a      	mov	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	8a9b      	ldrh	r3, [r3, #20]
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	4b92      	ldr	r3, [pc, #584]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002272:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	8b1b      	ldrh	r3, [r3, #24]
 8002278:	461a      	mov	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	8a9b      	ldrh	r3, [r3, #20]
 800227e:	1ad2      	subs	r2, r2, r3
 8002280:	4b8e      	ldr	r3, [pc, #568]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002282:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002284:	4a8d      	ldr	r2, [pc, #564]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	8adb      	ldrh	r3, [r3, #22]
 800228e:	461a      	mov	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	8a9b      	ldrh	r3, [r3, #20]
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	4b88      	ldr	r3, [pc, #544]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800229a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	4b86      	ldr	r3, [pc, #536]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4b84      	ldr	r3, [pc, #528]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80022aa:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b4:	d036      	beq.n	8002324 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 80022b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ba:	f200 80e2 	bhi.w	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80022be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c2:	d014      	beq.n	80022ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 80022c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c8:	f200 80db 	bhi.w	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d059      	beq.n	8002384 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	f200 80d6 	bhi.w	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80022d6:	2b40      	cmp	r3, #64	; 0x40
 80022d8:	f000 80be 	beq.w	8002458 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	f200 80d0 	bhi.w	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d039      	beq.n	800235a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	f000 80b6 	beq.w	8002458 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80022ec:	e0c9      	b.n	8002482 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	7f1b      	ldrb	r3, [r3, #28]
 80022f2:	061b      	lsls	r3, r3, #24
 80022f4:	4619      	mov	r1, r3
 80022f6:	4a71      	ldr	r2, [pc, #452]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80022f8:	4b71      	ldr	r3, [pc, #452]	; (80024c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80022fa:	430b      	orrs	r3, r1
 80022fc:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	330c      	adds	r3, #12
 8002302:	4c6e      	ldr	r4, [pc, #440]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fdaf 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 800230a:	4603      	mov	r3, r0
 800230c:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800230e:	4a6b      	ldr	r2, [pc, #428]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	4b68      	ldr	r3, [pc, #416]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800231a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800231c:	4b67      	ldr	r3, [pc, #412]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002320:	601a      	str	r2, [r3, #0]
        break;
 8002322:	e0c7      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7f1b      	ldrb	r3, [r3, #28]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	4619      	mov	r1, r3
 800232c:	4a63      	ldr	r2, [pc, #396]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800232e:	4b66      	ldr	r3, [pc, #408]	; (80024c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002330:	430b      	orrs	r3, r1
 8002332:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	330c      	adds	r3, #12
 8002338:	4c60      	ldr	r4, [pc, #384]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fd94 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 8002340:	4603      	mov	r3, r0
 8002342:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002344:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	4b5b      	ldr	r3, [pc, #364]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002350:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002352:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002354:	4a5b      	ldr	r2, [pc, #364]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002356:	601a      	str	r2, [r3, #0]
        break;
 8002358:	e0ac      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	7f1b      	ldrb	r3, [r3, #28]
 800235e:	061b      	lsls	r3, r3, #24
 8002360:	461a      	mov	r2, r3
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	4a55      	ldr	r2, [pc, #340]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800236e:	4a53      	ldr	r2, [pc, #332]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800237a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800237c:	4b4f      	ldr	r3, [pc, #316]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800237e:	4a51      	ldr	r2, [pc, #324]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002380:	601a      	str	r2, [r3, #0]
        break;
 8002382:	e097      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8002384:	2301      	movs	r3, #1
 8002386:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1d1a      	adds	r2, r3, #4
 8002392:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	7f1b      	ldrb	r3, [r3, #28]
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	461a      	mov	r2, r3
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	4a46      	ldr	r2, [pc, #280]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80023aa:	4a44      	ldr	r2, [pc, #272]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	4b41      	ldr	r3, [pc, #260]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023b6:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d00d      	beq.n	80023e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 80023c6:	e020      	b.n	800240a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023c8:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	8852      	ldrh	r2, [r2, #2]
 80023d4:	3a01      	subs	r2, #1
 80023d6:	0212      	lsls	r2, r2, #8
 80023d8:	4611      	mov	r1, r2
 80023da:	4a38      	ldr	r2, [pc, #224]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023dc:	430b      	orrs	r3, r1
 80023de:	61d3      	str	r3, [r2, #28]
                break;
 80023e0:	e01a      	b.n	8002418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	7f1b      	ldrb	r3, [r3, #28]
 80023e6:	2bff      	cmp	r3, #255	; 0xff
 80023e8:	d101      	bne.n	80023ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 80023ea:	2300      	movs	r3, #0
 80023ec:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023ee:	4b33      	ldr	r3, [pc, #204]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	4b36      	ldr	r3, [pc, #216]	; (80024cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	8852      	ldrh	r2, [r2, #2]
 80023fa:	3a01      	subs	r2, #1
 80023fc:	0212      	lsls	r2, r2, #8
 80023fe:	4313      	orrs	r3, r2
 8002400:	4a2e      	ldr	r2, [pc, #184]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002402:	f043 0310 	orr.w	r3, r3, #16
 8002406:	61d3      	str	r3, [r2, #28]
                break;
 8002408:	e006      	b.n	8002418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800240a:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800240c:	4a31      	ldr	r2, [pc, #196]	; (80024d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 800240e:	f240 1111 	movw	r1, #273	; 0x111
 8002412:	4831      	ldr	r0, [pc, #196]	; (80024d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8002414:	f023 fbae 	bl	8025b74 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800241e:	f043 0320 	orr.w	r3, r3, #32
 8002422:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d000      	beq.n	800243c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 800243a:	e7f3      	b.n	8002424 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800243e:	2210      	movs	r2, #16
 8002440:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8002442:	7ffb      	ldrb	r3, [r7, #31]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800244a:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800244c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 800244e:	e031      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002452:	4a22      	ldr	r2, [pc, #136]	; (80024dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8002454:	601a      	str	r2, [r3, #0]
        break;
 8002456:	e02d      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	7f1b      	ldrb	r3, [r3, #28]
 800245c:	061b      	lsls	r3, r3, #24
 800245e:	461a      	mov	r2, r3
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	4a15      	ldr	r2, [pc, #84]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800246c:	4a13      	ldr	r2, [pc, #76]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002478:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800247e:	601a      	str	r2, [r3, #0]
        break;
 8002480:	e018      	b.n	80024b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	7f1b      	ldrb	r3, [r3, #28]
 8002486:	061b      	lsls	r3, r3, #24
 8002488:	461a      	mov	r2, r3
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002494:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	7f5a      	ldrb	r2, [r3, #29]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	7f9b      	ldrb	r3, [r3, #30]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d003      	beq.n	80024aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 80024a6:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80024a8:	e003      	b.n	80024b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024ac:	f240 2201 	movw	r2, #513	; 0x201
 80024b0:	601a      	str	r2, [r3, #0]
        break;
 80024b2:	bf00      	nop
    }
}
 80024b4:	bf00      	nop
 80024b6:	3724      	adds	r7, #36	; 0x24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd90      	pop	{r4, r7, pc}
 80024bc:	52001000 	.word	0x52001000
 80024c0:	0002000a 	.word	0x0002000a
 80024c4:	00020201 	.word	0x00020201
 80024c8:	00020009 	.word	0x00020009
 80024cc:	ffff00ef 	.word	0xffff00ef
 80024d0:	08027030 	.word	0x08027030
 80024d4:	0802704c 	.word	0x0802704c
 80024d8:	08026f98 	.word	0x08026f98
 80024dc:	00010201 	.word	0x00010201

080024e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	7f9b      	ldrb	r3, [r3, #30]
 80024ee:	4619      	mov	r1, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff fe4b 	bl	800218c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80024f6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024f8:	4a3b      	ldr	r2, [pc, #236]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	8adb      	ldrh	r3, [r3, #22]
 8002502:	461a      	mov	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	8a9b      	ldrh	r3, [r3, #20]
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	431a      	orrs	r2, r3
 800250c:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800250e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002516:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	8b5b      	ldrh	r3, [r3, #26]
 800251c:	461a      	mov	r2, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	8a9b      	ldrh	r3, [r3, #20]
 8002522:	1ad2      	subs	r2, r2, r3
 8002524:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002526:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d12e      	bne.n	800258e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	8b5b      	ldrh	r3, [r3, #26]
 8002534:	461a      	mov	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	8a9b      	ldrh	r3, [r3, #20]
 800253a:	1ad2      	subs	r2, r2, r3
 800253c:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800253e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	8b5b      	ldrh	r3, [r3, #26]
 8002544:	461a      	mov	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	8a9b      	ldrh	r3, [r3, #20]
 800254a:	1ad2      	subs	r2, r2, r3
 800254c:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800254e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	7f1b      	ldrb	r3, [r3, #28]
 800255a:	061b      	lsls	r3, r3, #24
 800255c:	4619      	mov	r1, r3
 800255e:	4a22      	ldr	r2, [pc, #136]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8002562:	430b      	orrs	r3, r1
 8002564:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	330c      	adds	r3, #12
 800256a:	4c1f      	ldr	r4, [pc, #124]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fc7b 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 8002572:	4603      	mov	r3, r0
 8002574:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800257c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002584:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800258a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800258c:	e027      	b.n	80025de <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800258e:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	330c      	adds	r3, #12
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fc62 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 80025a4:	4603      	mov	r3, r0
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	330c      	adds	r3, #12
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fc59 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 80025b6:	4603      	mov	r3, r0
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80025be:	431c      	orrs	r4, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fc4f 	bl	8001e68 <_ZNK8touchgfx9colortypecvmEv>
 80025ca:	4603      	mov	r3, r0
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80025d4:	4323      	orrs	r3, r4
 80025d6:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80025da:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 80025dc:	601a      	str	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}
 80025e6:	bf00      	nop
 80025e8:	52001000 	.word	0x52001000
 80025ec:	00010009 	.word	0x00010009
 80025f0:	00020201 	.word	0x00020201
 80025f4:	00030201 	.word	0x00030201

080025f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	4a05      	ldr	r2, [pc, #20]	; (8002618 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fc39 	bl	8001e80 <_ZN8touchgfx9DMA_QueueD1Ev>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	08028d5c 	.word	0x08028d5c

0800261c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ffe7 	bl	80025f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800262a:	2114      	movs	r1, #20
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f023 fa72 	bl	8025b16 <_ZdlPvj>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	801a      	strh	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	805a      	strh	r2, [r3, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	809a      	strh	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	80da      	strh	r2, [r3, #6]
    {
    }
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6013      	str	r3, [r2, #0]
    }
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	2400af48 	.word	0x2400af48

0800268c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
    {
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
    }
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	08027a88 	.word	0x08027a88

080026ac <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
    }
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ffe9 	bl	800268c <_ZN8touchgfx12FontProviderD1Ev>
 80026ba:	2104      	movs	r1, #4
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f023 fa2a 	bl	8025b16 <_ZdlPvj>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80026da:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	611a      	str	r2, [r3, #16]
    {
    }
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	08027a78 	.word	0x08027a78

0800270c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
    {
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	601a      	str	r2, [r3, #0]
    }
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	08027a78 	.word	0x08027a78

0800272c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
    }
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ffe9 	bl	800270c <_ZN8touchgfx7MVPHeapD1Ev>
 800273a:	2114      	movs	r1, #20
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f023 f9ea 	bl	8025b16 <_ZdlPvj>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
    {
    }
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
    {
    }
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
    {
    }
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	70fb      	strb	r3, [r7, #3]
    {
    }
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
    {
    }
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
    {
    }
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
    {
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	601a      	str	r2, [r3, #0]
    }
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	08027a50 	.word	0x08027a50

080027f0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    }
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ffe9 	bl	80027d0 <_ZN8touchgfx15UIEventListenerD1Ev>
 80027fe:	2104      	movs	r1, #4
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f023 f988 	bl	8025b16 <_ZdlPvj>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
    {
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	601a      	str	r2, [r3, #0]
    }
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	08029104 	.word	0x08029104

08002830 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
    }
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ffe9 	bl	8002810 <_ZN8touchgfx3LCDD1Ev>
 800283e:	2108      	movs	r1, #8
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f023 f968 	bl	8025b16 <_ZdlPvj>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800287a:	6810      	ldr	r0, [r2, #0]
 800287c:	6851      	ldr	r1, [r2, #4]
 800287e:	c303      	stmia	r3!, {r0, r1}
    }
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
    {
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	601a      	str	r2, [r3, #0]
    }
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	08027a38 	.word	0x08027a38

080028ac <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
    }
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ffe9 	bl	800288c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80028ba:	2104      	movs	r1, #4
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f023 f92a 	bl	8025b16 <_ZdlPvj>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	805a      	strh	r2, [r3, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	809a      	strh	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	80da      	strh	r2, [r3, #6]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	811a      	strh	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	815a      	strh	r2, [r3, #10]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	819a      	strh	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	739a      	strb	r2, [r3, #14]
        {
        }
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ffd5 	bl	80028cc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	829a      	strh	r2, [r3, #20]
    {
    }
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002946:	4a55      	ldr	r2, [pc, #340]	; (8002a9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	615a      	str	r2, [r3, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	331c      	adds	r3, #28
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ffcc 	bl	8002912 <_ZN8touchgfx8GesturesC1Ev>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	639a      	str	r2, [r3, #56]	; 0x38
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	63da      	str	r2, [r3, #60]	; 0x3c
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	641a      	str	r2, [r3, #64]	; 0x40
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	64da      	str	r2, [r3, #76]	; 0x4c
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3350      	adds	r3, #80	; 0x50
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fe39 	bl	800263c <_ZN8touchgfx4RectC1Ev>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	659a      	str	r2, [r3, #88]	; 0x58
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	661a      	str	r2, [r3, #96]	; 0x60
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	671a      	str	r2, [r3, #112]	; 0x70
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8002a52:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002a58:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002a5a:	8b3b      	ldrh	r3, [r7, #24]
 8002a5c:	8013      	strh	r3, [r2, #0]
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002a60:	881a      	ldrh	r2, [r3, #0]
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002a64:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002a66:	4a11      	ldr	r2, [pc, #68]	; (8002aac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002a68:	8bbb      	ldrh	r3, [r7, #28]
 8002a6a:	8013      	strh	r3, [r2, #0]
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002a6e:	881a      	ldrh	r2, [r3, #0]
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002a72:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002a7a:	8b3a      	ldrh	r2, [r7, #24]
 8002a7c:	8bbb      	ldrh	r3, [r7, #28]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	bf34      	ite	cc
 8002a82:	2301      	movcc	r3, #1
 8002a84:	2300      	movcs	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	080287b4 	.word	0x080287b4
 8002aa0:	2400aeec 	.word	0x2400aeec
 8002aa4:	2400aee0 	.word	0x2400aee0
 8002aa8:	2400aee6 	.word	0x2400aee6
 8002aac:	2400aee2 	.word	0x2400aee2
 8002ab0:	2400aee8 	.word	0x2400aee8
 8002ab4:	2400aee4 	.word	0x2400aee4

08002ab8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fe81 	bl	80027d0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	08029218 	.word	0x08029218

08002adc <_ZN8touchgfx11ApplicationD0Ev>:
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ffe7 	bl	8002ab8 <_ZN8touchgfx11ApplicationD1Ev>
 8002aea:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f023 f811 	bl	8025b16 <_ZdlPvj>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f804 	bl	8002b14 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00f      	beq.n	8002b46 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4798      	blx	r3
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff97 	bl	8002ab8 <_ZN8touchgfx11ApplicationD1Ev>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	080279f4 	.word	0x080279f4

08002b98 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ffe7 	bl	8002b74 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002ba6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f022 ffb3 	bl	8025b16 <_ZdlPvj>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	4a08      	ldr	r2, [pc, #32]	; (8002be8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fae9 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ffcb 	bl	8002b74 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	08027998 	.word	0x08027998

08002bec <_ZN23FrontendApplicationBaseD0Ev>:
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ffe1 	bl	8002bbc <_ZN23FrontendApplicationBaseD1Ev>
 8002bfa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f022 ff89 	bl	8025b16 <_ZdlPvj>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ffcb 	bl	8002bbc <_ZN23FrontendApplicationBaseD1Ev>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	08027954 	.word	0x08027954

08002c34 <_ZN19FrontendApplicationD0Ev>:
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ffe7 	bl	8002c10 <_ZN19FrontendApplicationD1Ev>
 8002c42:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f022 ff65 	bl	8025b16 <_ZdlPvj>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002c64:	4618      	mov	r0, r3
 8002c66:	f003 fffd 	bl	8006c64 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f014 f977 	bl	8016f60 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 f8ee 	bl	8003e68 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	f7ff fd0d 	bl	80026cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002cb2:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	601a      	str	r2, [r3, #0]
    {

    }
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	08027940 	.word	0x08027940

08002cc8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4801      	ldr	r0, [pc, #4]	; (8002cd4 <__tcf_0+0xc>)
 8002cce:	f000 f95f 	bl	8002f90 <_ZN12FrontendHeapD1Ev>
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	2400016c 	.word	0x2400016c

08002cd8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	f3bf 8f5b 	dmb	ish
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002cf8:	480b      	ldr	r0, [pc, #44]	; (8002d28 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002cfa:	f022 ff0e 	bl	8025b1a <__cxa_guard_acquire>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002d0e:	4807      	ldr	r0, [pc, #28]	; (8002d2c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002d10:	f000 f868 	bl	8002de4 <_ZN12FrontendHeapC1Ev>
 8002d14:	4804      	ldr	r0, [pc, #16]	; (8002d28 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002d16:	f022 ff0c 	bl	8025b32 <__cxa_guard_release>
 8002d1a:	4805      	ldr	r0, [pc, #20]	; (8002d30 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8002d1c:	f022 ff48 	bl	8025bb0 <atexit>
        return instance;
 8002d20:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8002d22:	4618      	mov	r0, r3
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	24000874 	.word	0x24000874
 8002d2c:	2400016c 	.word	0x2400016c
 8002d30:	08002cc9 	.word	0x08002cc9

08002d34 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fce1 	bl	800270c <_ZN8touchgfx7MVPHeapD1Ev>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	08027940 	.word	0x08027940

08002d58 <_ZN16FrontendHeapBaseD0Ev>:
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ffe7 	bl	8002d34 <_ZN16FrontendHeapBaseD1Ev>
 8002d66:	2114      	movs	r1, #20
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f022 fed4 	bl	8025b16 <_ZdlPvj>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f010 f90a 	bl	8012f9c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002d88:	4a03      	ldr	r2, [pc, #12]	; (8002d98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	0802790c 	.word	0x0802790c

08002d9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f010 f8f8 	bl	8012f9c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002dac:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	080278d8 	.word	0x080278d8

08002dc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f010 f8e6 	bl	8012f9c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	080278a4 	.word	0x080278a4

08002de4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f103 0114 	add.w	r1, r3, #20
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f503 64b3 	add.w	r4, r3, #1432	; 0x598
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
                     app(model, *this)
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4623      	mov	r3, r4
 8002e0a:	f7ff ff43 	bl	8002c94 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8002e0e:	4a18      	ldr	r2, [pc, #96]	; (8002e70 <_ZN12FrontendHeapC1Ev+0x8c>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3314      	adds	r3, #20
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ffad 	bl	8002d78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	332c      	adds	r3, #44	; 0x2c
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ffba 	bl	8002d9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ffc6 	bl	8002dc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 ff04 	bl	8006c48 <_ZN5ModelC1Ev>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f503 60b6 	add.w	r0, r3, #1456	; 0x5b0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f003 fee4 	bl	8006c1c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f7ff ff0b 	bl	8002c7a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd90      	pop	{r4, r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	08027890 	.word	0x08027890

08002e74 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	8bbb      	ldrh	r3, [r7, #28]
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	8b3b      	ldrh	r3, [r7, #24]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	f7ff fd51 	bl	8002938 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	601a      	str	r2, [r3, #0]
    }
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	08027a9c 	.word	0x08027a9c

08002eac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	8bbb      	ldrh	r3, [r7, #28]
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	8b3b      	ldrh	r3, [r7, #24]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	f7ff ffd3 	bl	8002e74 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	601a      	str	r2, [r3, #0]
    }
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	0802774c 	.word	0x0802774c

08002ee4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	08027734 	.word	0x08027734

08002f04 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ffe8 	bl	8002ee4 <_ZN8touchgfx15TouchControllerC1Ev>
 8002f14:	4a03      	ldr	r2, [pc, #12]	; (8002f24 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0802771c 	.word	0x0802771c

08002f28 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002f2e:	f000 fd51 	bl	80039d4 <_ZN14BitmapDatabase11getInstanceEv>
 8002f32:	4604      	mov	r4, r0
 8002f34:	f000 fd58 	bl	80039e8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2300      	movs	r3, #0
 8002f42:	2200      	movs	r2, #0
 8002f44:	4620      	mov	r0, r4
 8002f46:	f016 fd8f 	bl	8019a68 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8002f4a:	4809      	ldr	r0, [pc, #36]	; (8002f70 <touchgfx_init+0x48>)
 8002f4c:	f7ff fb8e 	bl	800266c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f003 fdb1 	bl	8006ab8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002f56:	4807      	ldr	r0, [pc, #28]	; (8002f74 <touchgfx_init+0x4c>)
 8002f58:	f016 fcc8 	bl	80198ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8002f5c:	f7ff febc 	bl	8002cd8 <_ZN12FrontendHeap11getInstanceEv>
 8002f60:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002f62:	4805      	ldr	r0, [pc, #20]	; (8002f78 <touchgfx_init+0x50>)
 8002f64:	f7fe fdb8 	bl	8001ad8 <_ZN11TouchGFXHAL10initializeEv>
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd90      	pop	{r4, r7, pc}
 8002f70:	24001514 	.word	0x24001514
 8002f74:	24000008 	.word	0x24000008
 8002f78:	24001518 	.word	0x24001518

08002f7c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <touchgfx_taskEntry+0x10>)
 8002f82:	f011 f980 	bl	8014286 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	24001518 	.word	0x24001518

08002f90 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <_ZN12FrontendHeapD1Ev+0x4c>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fe33 	bl	8002c10 <_ZN19FrontendApplicationD1Ev>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f827 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	332c      	adds	r3, #44	; 0x2c
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f844 	bl	8003048 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3314      	adds	r3, #20
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f863 	bl	8003090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff feb1 	bl	8002d34 <_ZN16FrontendHeapBaseD1Ev>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	08027890 	.word	0x08027890

08002fe0 <_ZN12FrontendHeapD0Ev>:
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ffd1 	bl	8002f90 <_ZN12FrontendHeapD1Ev>
 8002fee:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f022 fd8f 	bl	8025b16 <_ZdlPvj>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	4a05      	ldr	r2, [pc, #20]	; (8003024 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4618      	mov	r0, r3
 8003016:	f00f ffbf 	bl	8012f98 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	080278a4 	.word	0x080278a4

08003028 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ffe7 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003036:	2114      	movs	r1, #20
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f022 fd6c 	bl	8025b16 <_ZdlPvj>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	4a05      	ldr	r2, [pc, #20]	; (8003068 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4618      	mov	r0, r3
 800305a:	f00f ff9d 	bl	8012f98 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	080278d8 	.word	0x080278d8

0800306c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ffe7 	bl	8003048 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800307a:	f240 516c 	movw	r1, #1388	; 0x56c
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f022 fd49 	bl	8025b16 <_ZdlPvj>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f00f ff79 	bl	8012f98 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	0802790c 	.word	0x0802790c

080030b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ffe7 	bl	8003090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80030c2:	2118      	movs	r1, #24
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f022 fd26 	bl	8025b16 <_ZdlPvj>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fb93 	bl	8002810 <_ZN8touchgfx3LCDD1Ev>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	0802a3bc 	.word	0x0802a3bc

080030f8 <_ZN8touchgfx8LCD16bppD0Ev>:
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ffe7 	bl	80030d4 <_ZN8touchgfx8LCD16bppD1Ev>
 8003106:	2178      	movs	r1, #120	; 0x78
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f022 fd04 	bl	8025b16 <_ZdlPvj>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <_Z41__static_initialization_and_destruction_0ii>:
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af02      	add	r7, sp, #8
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d119      	bne.n	800315c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800312e:	4293      	cmp	r3, r2
 8003130:	d114      	bne.n	800315c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003132:	4818      	ldr	r0, [pc, #96]	; (8003194 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003134:	f7ff fee6 	bl	8002f04 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8003138:	4817      	ldr	r0, [pc, #92]	; (8003198 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800313a:	f7fe ff5d 	bl	8001ff8 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800313e:	4817      	ldr	r0, [pc, #92]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003140:	f019 fd5a 	bl	801cbf8 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003144:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003152:	4a12      	ldr	r2, [pc, #72]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003154:	4910      	ldr	r1, [pc, #64]	; (8003198 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003156:	4812      	ldr	r0, [pc, #72]	; (80031a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003158:	f7ff fea8 	bl	8002eac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d113      	bne.n	800318a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003168:	4293      	cmp	r3, r2
 800316a:	d10e      	bne.n	800318a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800316c:	480c      	ldr	r0, [pc, #48]	; (80031a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800316e:	f7fe fd2b 	bl	8001bc8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003172:	480c      	ldr	r0, [pc, #48]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003174:	f000 f83a 	bl	80031ec <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8003178:	4808      	ldr	r0, [pc, #32]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800317a:	f7ff ffab 	bl	80030d4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 800317e:	4806      	ldr	r0, [pc, #24]	; (8003198 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003180:	f7fe ff64 	bl	800204c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003184:	4803      	ldr	r0, [pc, #12]	; (8003194 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003186:	f7fe faad 	bl	80016e4 <_ZN20STM32TouchControllerD1Ev>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	24000878 	.word	0x24000878
 8003198:	2400087c 	.word	0x2400087c
 800319c:	2400149c 	.word	0x2400149c
 80031a0:	24001518 	.word	0x24001518
 80031a4:	24000008 	.word	0x24000008

080031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fb67 	bl	800288c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	080279dc 	.word	0x080279dc

080031cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ffe7 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80031da:	2110      	movs	r1, #16
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f022 fc9a 	bl	8025b16 <_ZdlPvj>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId MEDIUM = 3;  // verdana_14_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	4a05      	ldr	r2, [pc, #20]	; (800320c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fa45 	bl	800268c <_ZN8touchgfx12FontProviderD1Ev>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	08027b6c 	.word	0x08027b6c

08003210 <_ZN23ApplicationFontProviderD0Ev>:
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ffe7 	bl	80031ec <_ZN23ApplicationFontProviderD1Ev>
 800321e:	2104      	movs	r1, #4
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f022 fc78 	bl	8025b16 <_ZdlPvj>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003238:	2301      	movs	r3, #1
    }
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800324e:	230c      	movs	r3, #12
    }
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003268:	887a      	ldrh	r2, [r7, #2]
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	3308      	adds	r3, #8
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4413      	add	r3, r2
    }
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003290:	887a      	ldrh	r2, [r7, #2]
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	3308      	adds	r3, #8
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4413      	add	r3, r2
    }
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80032b4:	2301      	movs	r3, #1
    }
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80032ca:	f240 5364 	movw	r3, #1380	; 0x564
    }
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80032e6:	887b      	ldrh	r3, [r7, #2]
 80032e8:	f240 5264 	movw	r2, #1380	; 0x564
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	3308      	adds	r3, #8
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
    }
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	f240 5264 	movw	r2, #1380	; 0x564
 8003314:	fb02 f303 	mul.w	r3, r2, r3
 8003318:	3308      	adds	r3, #8
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4413      	add	r3, r2
    }
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003332:	2301      	movs	r3, #1
    }
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003348:	2310      	movs	r3, #16
    }
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003362:	887b      	ldrh	r3, [r7, #2]
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	3308      	adds	r3, #8
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4413      	add	r3, r2
    }
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003384:	887b      	ldrh	r3, [r7, #2]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	3308      	adds	r3, #8
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4413      	add	r3, r2
    }
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68d2      	ldr	r2, [r2, #12]
 80033aa:	1052      	asrs	r2, r2, #1
 80033ac:	1899      	adds	r1, r3, r2
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d102      	bne.n	80033c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	e00a      	b.n	80033d6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68d2      	ldr	r2, [r2, #12]
 80033c8:	1052      	asrs	r2, r2, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6892      	ldr	r2, [r2, #8]
 80033d2:	4413      	add	r3, r2
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4608      	mov	r0, r1
 80033d8:	4798      	blx	r3
    }
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800340a:	2300      	movs	r3, #0
 800340c:	2b01      	cmp	r3, #1
 800340e:	d001      	beq.n	8003414 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003414:	2300      	movs	r3, #0
    }
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <_GLOBAL__sub_I_touchgfx_init>:
 8003422:	b580      	push	{r7, lr}
 8003424:	af00      	add	r7, sp, #0
 8003426:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800342a:	2001      	movs	r0, #1
 800342c:	f7ff fe74 	bl	8003118 <_Z41__static_initialization_and_destruction_0ii>
 8003430:	bd80      	pop	{r7, pc}

08003432 <_GLOBAL__sub_D_touchgfx_init>:
 8003432:	b580      	push	{r7, lr}
 8003434:	af00      	add	r7, sp, #0
 8003436:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800343a:	2000      	movs	r0, #0
 800343c:	f7ff fe6c 	bl	8003118 <_Z41__static_initialization_and_destruction_0ii>
 8003440:	bd80      	pop	{r7, pc}

08003442 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3320      	adds	r3, #32
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
    }
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800346c:	3301      	adds	r3, #1
 800346e:	b2da      	uxtb	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <__NVIC_EnableIRQ>:
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db0b      	blt.n	80034ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <__NVIC_EnableIRQ+0x38>)
 800349e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_DisableIRQ>:
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	db12      	blt.n	80034f8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	490a      	ldr	r1, [pc, #40]	; (8003504 <__NVIC_DisableIRQ+0x44>)
 80034da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2001      	movs	r0, #1
 80034e2:	fa00 f202 	lsl.w	r2, r0, r2
 80034e6:	3320      	adds	r3, #32
 80034e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80034ec:	f3bf 8f4f 	dsb	sy
}
 80034f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034f2:	f3bf 8f6f 	isb	sy
}
 80034f6:	bf00      	nop
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100

08003508 <__NVIC_SetPriority>:
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003518:	2b00      	cmp	r3, #0
 800351a:	db0a      	blt.n	8003532 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	490c      	ldr	r1, [pc, #48]	; (8003554 <__NVIC_SetPriority+0x4c>)
 8003522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003526:	0112      	lsls	r2, r2, #4
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	440b      	add	r3, r1
 800352c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003530:	e00a      	b.n	8003548 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	4908      	ldr	r1, [pc, #32]	; (8003558 <__NVIC_SetPriority+0x50>)
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	3b04      	subs	r3, #4
 8003540:	0112      	lsls	r2, r2, #4
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	440b      	add	r3, r1
 8003546:	761a      	strb	r2, [r3, #24]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000e100 	.word	0xe000e100
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800355c:	b5b0      	push	{r4, r5, r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4618      	mov	r0, r3
 8003568:	f010 fe7b 	bl	8014262 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800356c:	687d      	ldr	r5, [r7, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3360      	adds	r3, #96	; 0x60
 8003574:	681c      	ldr	r4, [r3, #0]
 8003576:	f013 fdd9 	bl	801712c <_ZN8touchgfx11Application11getInstanceEv>
 800357a:	4603      	mov	r3, r0
 800357c:	4619      	mov	r1, r3
 800357e:	4628      	mov	r0, r5
 8003580:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3384      	adds	r3, #132	; 0x84
 800358a:	681c      	ldr	r4, [r3, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003590:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003594:	47a0      	blx	r4
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bdb0      	pop	{r4, r5, r7, pc}
 800359e:	bf00      	nop
 80035a0:	d0200000 	.word	0xd0200000

080035a4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80035ac:	2109      	movs	r1, #9
 80035ae:	205a      	movs	r0, #90	; 0x5a
 80035b0:	f7ff ffaa 	bl	8003508 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80035b4:	2109      	movs	r1, #9
 80035b6:	2058      	movs	r0, #88	; 0x58
 80035b8:	f7ff ffa6 	bl	8003508 <__NVIC_SetPriority>
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80035cc:	205a      	movs	r0, #90	; 0x5a
 80035ce:	f7ff ff59 	bl	8003484 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80035d2:	2058      	movs	r0, #88	; 0x58
 80035d4:	f7ff ff56 	bl	8003484 <__NVIC_EnableIRQ>
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80035e8:	205a      	movs	r0, #90	; 0x5a
 80035ea:	f7ff ff69 	bl	80034c0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80035ee:	2058      	movs	r0, #88	; 0x58
 80035f0:	f7ff ff66 	bl	80034c0 <__NVIC_DisableIRQ>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	b29b      	uxth	r3, r3
 800360a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003616:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003618:	4b0c      	ldr	r3, [pc, #48]	; (800364c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800362a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800362c:	4b08      	ldr	r3, [pc, #32]	; (8003650 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800362e:	881a      	ldrh	r2, [r3, #0]
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003632:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003638:	4a04      	ldr	r2, [pc, #16]	; (800364c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	50001000 	.word	0x50001000
 8003650:	24001594 	.word	0x24001594
 8003654:	24001596 	.word	0x24001596

08003658 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4618      	mov	r0, r3
 8003664:	f010 fde4 	bl	8014230 <_ZN8touchgfx3HAL10beginFrameEv>
 8003668:	4603      	mov	r3, r0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4618      	mov	r0, r3
 800367e:	f010 fde3 	bl	8014248 <_ZN8touchgfx3HAL8endFrameEv>

}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	50001084 	.word	0x50001084

080036a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80036b2:	4a06      	ldr	r2, [pc, #24]	; (80036cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	50001084 	.word	0x50001084
 80036d0:	50001000 	.word	0x50001000

080036d4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f010 fd6d 	bl	80141c2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf14      	ite	ne
 80036f4:	2301      	movne	r3, #1
 80036f6:	2300      	moveq	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d03c      	beq.n	8003778 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003700:	2200      	movs	r2, #0
 8003702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003706:	f3bf 8f4f 	dsb	sy
}
 800370a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800370c:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800370e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003712:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	0b5b      	lsrs	r3, r3, #13
 8003718:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800371c:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	08db      	lsrs	r3, r3, #3
 8003722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003726:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003730:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003736:	4912      	ldr	r1, [pc, #72]	; (8003780 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1e5a      	subs	r2, r3, #1
 8003742:	60fa      	str	r2, [r7, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d000      	beq.n	8003754 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 8003752:	e7e9      	b.n	8003728 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1e5a      	subs	r2, r3, #1
 8003758:	613a      	str	r2, [r7, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	bf14      	ite	ne
 800375e:	2301      	movne	r3, #1
 8003760:	2300      	moveq	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d000      	beq.n	800376a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8003768:	e7d9      	b.n	800371e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800376a:	f3bf 8f4f 	dsb	sy
}
 800376e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003770:	f3bf 8f6f 	isb	sy
}
 8003774:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003776:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003778:	bf00      	nop
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	f010 fe7e 	bl	801449a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800379e:	4603      	mov	r3, r0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80037b0:	4b26      	ldr	r3, [pc, #152]	; (800384c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d03c      	beq.n	8003840 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80037c6:	4b21      	ldr	r3, [pc, #132]	; (800384c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80037ce:	f3bf 8f4f 	dsb	sy
}
 80037d2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80037d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037da:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	0b5b      	lsrs	r3, r3, #13
 80037e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80037e4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	08db      	lsrs	r3, r3, #3
 80037ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ee:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80037f8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80037fe:	4913      	ldr	r1, [pc, #76]	; (800384c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	60fa      	str	r2, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d000      	beq.n	800381c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 800381a:	e7e9      	b.n	80037f0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1e5a      	subs	r2, r3, #1
 8003820:	613a      	str	r2, [r7, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d000      	beq.n	8003832 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8003830:	e7d9      	b.n	80037e6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003832:	f3bf 8f4f 	dsb	sy
}
 8003836:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003838:	f3bf 8f6f 	isb	sy
}
 800383c:	bf00      	nop
}
 800383e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003858:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d03c      	beq.n	80038e8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800386e:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003870:	2200      	movs	r2, #0
 8003872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003876:	f3bf 8f4f 	dsb	sy
}
 800387a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800387c:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800387e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003882:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	0b5b      	lsrs	r3, r3, #13
 8003888:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800388c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	08db      	lsrs	r3, r3, #3
 8003892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003896:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80038a0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038a6:	4913      	ldr	r1, [pc, #76]	; (80038f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1e5a      	subs	r2, r3, #1
 80038b2:	60fa      	str	r2, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d000      	beq.n	80038c4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 80038c2:	e7e9      	b.n	8003898 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1e5a      	subs	r2, r3, #1
 80038c8:	613a      	str	r2, [r7, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf14      	ite	ne
 80038ce:	2301      	movne	r3, #1
 80038d0:	2300      	moveq	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d000      	beq.n	80038da <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 80038d8:	e7d9      	b.n	800388e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80038da:	f3bf 8f4f 	dsb	sy
}
 80038de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038e0:	f3bf 8f6f 	isb	sy
}
 80038e4:	bf00      	nop
}
 80038e6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <HAL_LTDC_LineEventCallback+0x74>)
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <HAL_LTDC_LineEventCallback+0x78>)
 8003906:	8812      	ldrh	r2, [r2, #0]
 8003908:	4293      	cmp	r3, r2
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d017      	beq.n	8003946 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003916:	4b17      	ldr	r3, [pc, #92]	; (8003974 <HAL_LTDC_LineEventCallback+0x7c>)
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	4619      	mov	r1, r3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f00b fa8b 	bl	800ee38 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003922:	f7fe fb2f 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 8003926:	4603      	mov	r3, r0
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fd98 	bl	800345e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800392e:	f7fe fa23 	bl	8001d78 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003932:	f7fe fb27 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 8003936:	4603      	mov	r3, r0
 8003938:	4618      	mov	r0, r3
 800393a:	f011 fa87 	bl	8014e4c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800393e:	2000      	movs	r0, #0
 8003940:	f7fd fef2 	bl	8001728 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003944:	e00e      	b.n	8003964 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003946:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <HAL_LTDC_LineEventCallback+0x78>)
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f00b fa73 	bl	800ee38 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003952:	2000      	movs	r0, #0
 8003954:	f7fd ff04 	bl	8001760 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003958:	f7fe fb14 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 800395c:	4603      	mov	r3, r0
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fd6f 	bl	8003442 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	50001000 	.word	0x50001000
 8003970:	24001594 	.word	0x24001594
 8003974:	24001596 	.word	0x24001596

08003978 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d81e      	bhi.n	80039c8 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039a1 	.word	0x080039a1
 8003994:	080039ab 	.word	0x080039ab
 8003998:	080039b5 	.word	0x080039b5
 800399c:	080039bf 	.word	0x080039bf
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80039a0:	f003 f902 	bl	8006ba8 <_ZN17TypedTextDatabase8getFontsEv>
 80039a4:	4603      	mov	r3, r0
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	e00f      	b.n	80039ca <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80039aa:	f003 f8fd 	bl	8006ba8 <_ZN17TypedTextDatabase8getFontsEv>
 80039ae:	4603      	mov	r3, r0
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	e00a      	b.n	80039ca <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80039b4:	f003 f8f8 	bl	8006ba8 <_ZN17TypedTextDatabase8getFontsEv>
 80039b8:	4603      	mov	r3, r0
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	e005      	b.n	80039ca <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::MEDIUM:
        // verdana_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80039be:	f003 f8f3 	bl	8006ba8 <_ZN17TypedTextDatabase8getFontsEv>
 80039c2:	4603      	mov	r3, r0
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	e000      	b.n	80039ca <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 80039c8:	2300      	movs	r3, #0
    }
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop

080039d4 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
    return bitmap_database;
 80039d8:	4b02      	ldr	r3, [pc, #8]	; (80039e4 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	08027b78 	.word	0x08027b78

080039e8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80039ec:	2301      	movs	r3, #1
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
    {
 8003a00:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	601a      	str	r2, [r3, #0]
    }
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	08027fa0 	.word	0x08027fa0

08003a18 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
    }
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ffe9 	bl	80039f8 <_ZN8touchgfx4FontD1Ev>
 8003a26:	2110      	movs	r1, #16
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f022 f874 	bl	8025b16 <_ZdlPvj>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003a44:	887b      	ldrh	r3, [r7, #2]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e010      	b.n	8003a70 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	681c      	ldr	r4, [r3, #0]
 8003a5e:	f107 030f 	add.w	r3, r7, #15
 8003a62:	f107 0210 	add.w	r2, r7, #16
 8003a66:	8879      	ldrh	r1, [r7, #2]
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	47a0      	blx	r4
 8003a6c:	6178      	str	r0, [r7, #20]
        return glyph;
 8003a6e:	697b      	ldr	r3, [r7, #20]
    }
 8003a70:	4618      	mov	r0, r3
 8003a72:	371c      	adds	r7, #28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd90      	pop	{r4, r7, pc}

08003a78 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	895b      	ldrh	r3, [r3, #10]
    }
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	899b      	ldrh	r3, [r3, #12]
    }
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	889b      	ldrh	r3, [r3, #4]
    }
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	889a      	ldrh	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	799b      	ldrb	r3, [r3, #6]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	b29b      	uxth	r3, r3
    }
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	79db      	ldrb	r3, [r3, #7]
 8003aee:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003af2:	b2db      	uxtb	r3, r3
    }
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	79db      	ldrb	r3, [r3, #7]
 8003b0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003b10:	b2db      	uxtb	r3, r3
    }
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff61 	bl	80039f8 <_ZN8touchgfx4FontD1Ev>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	080294dc 	.word	0x080294dc

08003b44 <_ZN8touchgfx9ConstFontD0Ev>:
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff ffe7 	bl	8003b20 <_ZN8touchgfx9ConstFontD1Ev>
 8003b52:	2118      	movs	r1, #24
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f021 ffde 	bl	8025b16 <_ZdlPvj>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	4a05      	ldr	r2, [pc, #20]	; (8003b84 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ffd3 	bl	8003b20 <_ZN8touchgfx9ConstFontD1Ev>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	08027bec 	.word	0x08027bec

08003b88 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ffe7 	bl	8003b64 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003b96:	2128      	movs	r1, #40	; 0x28
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f021 ffbc 	bl	8025b16 <_ZdlPvj>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
    {
 8003bb0:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	601a      	str	r2, [r3, #0]
    }
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	08027b94 	.word	0x08027b94

08003bc8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
    }
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ffe9 	bl	8003ba8 <_ZN8touchgfx9TypedTextD1Ev>
 8003bd6:	2108      	movs	r1, #8
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f021 ff9c 	bl	8025b16 <_ZdlPvj>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003c10:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c20:	e002      	b.n	8003c28 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003c22:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
    }
 8003c28:	4618      	mov	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	2400aeec 	.word	0x2400aeec

08003c38 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8003c40:	4a07      	ldr	r2, [pc, #28]	; (8003c60 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	721a      	strb	r2, [r3, #8]
    {
    }
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	08027bc8 	.word	0x08027bc8

08003c64 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
    {
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	601a      	str	r2, [r3, #0]
    }
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	08027bc8 	.word	0x08027bc8

08003c84 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
    }
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ffe9 	bl	8003c64 <_ZN8touchgfx10TransitionD1Ev>
 8003c92:	210c      	movs	r1, #12
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f021 ff3e 	bl	8025b16 <_ZdlPvj>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
    {
    }
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
    {
    }
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
    {
    }
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8003ce8:	f013 fa20 	bl	801712c <_ZN8touchgfx11Application11getInstanceEv>
 8003cec:	4603      	mov	r3, r0
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	3230      	adds	r2, #48	; 0x30
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	4790      	blx	r2
    }
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	605a      	str	r2, [r3, #4]
    }
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f013 fa6a 	bl	8017200 <_ZN8touchgfx11ApplicationC1Ev>
 8003d2c:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8003d46:	6013      	str	r3, [r2, #0]
    }
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	080279f4 	.word	0x080279f4
 8003d58:	2400af38 	.word	0x2400af38

08003d5c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	601a      	str	r2, [r3, #0]
    }
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	721a      	strb	r2, [r3, #8]
    }
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	605a      	str	r2, [r3, #4]
    }
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff ffac 	bl	8003d1c <_ZN8touchgfx14MVPApplicationC1Ev>
 8003dc4:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f89f 	bl	8003f14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003de6:	f7fe f8cd 	bl	8001f84 <_ZN8touchgfx3HAL11getInstanceEv>
 8003dea:	4603      	mov	r3, r0
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	3208      	adds	r2, #8
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f002 fe5d 	bl	8006ab8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003dfe:	f7ff feff 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 8003e02:	4603      	mov	r3, r0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f01a fd42 	bl	801e88e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	08027998 	.word	0x08027998

08003e18 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ffe9 	bl	8003e18 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	3308      	adds	r3, #8
 8003e54:	3208      	adds	r2, #8
 8003e56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b089      	sub	sp, #36	; 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	f107 0008 	add.w	r0, r7, #8
 8003e82:	f107 0318 	add.w	r3, r7, #24
 8003e86:	cb0c      	ldmia	r3, {r2, r3}
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	f000 f85f 	bl	8003f4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8003e8e:	f107 0308 	add.w	r3, r7, #8
 8003e92:	4619      	mov	r1, r3
 8003e94:	4620      	mov	r0, r4
 8003e96:	f7ff ffcb 	bl	8003e30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8003e9a:	f107 0308 	add.w	r3, r7, #8
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff f982 	bl	80031a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8003eb0:	bf00      	nop
 8003eb2:	3724      	adds	r7, #36	; 0x24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd90      	pop	{r4, r7, pc}
 8003eb8:	08003ebd 	.word	0x08003ebd

08003ebc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	4b04      	ldr	r3, [pc, #16]	; (8003eec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8003edc:	4804      	ldr	r0, [pc, #16]	; (8003ef0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8003ede:	f000 f867 	bl	8003fb0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	2400af2c 	.word	0x2400af2c
 8003ef0:	2400af28 	.word	0x2400af28

08003ef4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	4a04      	ldr	r2, [pc, #16]	; (8003f10 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	08027a38 	.word	0x08027a38

08003f14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ffe8 	bl	8003ef4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8003f24:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	60da      	str	r2, [r3, #12]
    }
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	080279dc 	.word	0x080279dc

08003f4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	4639      	mov	r1, r7
 8003f58:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff ffc8 	bl	8003ef4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8003f64:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3308      	adds	r3, #8
 8003f74:	463a      	mov	r2, r7
 8003f76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f7a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	080279dc 	.word	0x080279dc

08003f8c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fe4e 	bl	8003c38 <_ZN8touchgfx10TransitionC1Ev>
 8003f9c:	4a03      	ldr	r2, [pc, #12]	; (8003fac <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	08027ba4 	.word	0x08027ba4

08003fb0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b08f      	sub	sp, #60	; 0x3c
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3320      	adds	r3, #32
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4798      	blx	r3
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f240 5263 	movw	r2, #1379	; 0x563
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d805      	bhi.n	8003fe6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8003fda:	4b7f      	ldr	r3, [pc, #508]	; (80041d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8003fdc:	4a7f      	ldr	r2, [pc, #508]	; (80041dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8003fde:	21a3      	movs	r1, #163	; 0xa3
 8003fe0:	487f      	ldr	r0, [pc, #508]	; (80041e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8003fe2:	f021 fdc7 	bl	8025b74 <__assert_func>
 8003fe6:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3320      	adds	r3, #32
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4798      	blx	r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b0f      	cmp	r3, #15
 8003ffe:	d805      	bhi.n	800400c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8004000:	4b78      	ldr	r3, [pc, #480]	; (80041e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004002:	4a76      	ldr	r2, [pc, #472]	; (80041dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004004:	21a4      	movs	r1, #164	; 0xa4
 8004006:	4876      	ldr	r0, [pc, #472]	; (80041e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004008:	f021 fdb4 	bl	8025b74 <__assert_func>
 800400c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3320      	adds	r3, #32
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4610      	mov	r0, r2
 800401e:	4798      	blx	r3
 8004020:	4603      	mov	r3, r0
 8004022:	2b0b      	cmp	r3, #11
 8004024:	d805      	bhi.n	8004032 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8004026:	4b70      	ldr	r3, [pc, #448]	; (80041e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8004028:	4a6c      	ldr	r2, [pc, #432]	; (80041dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800402a:	21a5      	movs	r1, #165	; 0xa5
 800402c:	486c      	ldr	r0, [pc, #432]	; (80041e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800402e:	f021 fda1 	bl	8025b74 <__assert_func>
 8004032:	bf00      	nop
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004040:	f013 f874 	bl	801712c <_ZN8touchgfx11Application11getInstanceEv>
 8004044:	4603      	mov	r3, r0
 8004046:	4618      	mov	r0, r3
 8004048:	f013 f8be 	bl	80171c8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4610      	mov	r0, r2
 8004064:	4798      	blx	r3
    if (*currentTrans)
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4610      	mov	r0, r2
 800407c:	4798      	blx	r3
    if (*currentScreen)
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4610      	mov	r0, r2
 8004096:	4798      	blx	r3
    if (*currentPresenter)
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3304      	adds	r3, #4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4610      	mov	r0, r2
 80040b0:	4798      	blx	r3
    if (*currentScreen)
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4610      	mov	r0, r2
 80040c8:	4798      	blx	r3
    if (*currentPresenter)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3308      	adds	r3, #8
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4610      	mov	r0, r2
 80040e2:	4798      	blx	r3
}
 80040e4:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 f87d 	bl	80041ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4619      	mov	r1, r3
 80040f6:	200c      	movs	r0, #12
 80040f8:	f7ff fd76 	bl	8003be8 <_ZnwjPv>
 80040fc:	4604      	mov	r4, r0
 80040fe:	4620      	mov	r0, r4
 8004100:	f7ff ff44 	bl	8003f8c <_ZN8touchgfx12NoTransitionC1Ev>
 8004104:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f880 	bl	8004212 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004112:	4603      	mov	r3, r0
 8004114:	4619      	mov	r1, r3
 8004116:	f240 5064 	movw	r0, #1380	; 0x564
 800411a:	f7ff fd65 	bl	8003be8 <_ZnwjPv>
 800411e:	4604      	mov	r4, r0
 8004120:	4620      	mov	r0, r4
 8004122:	f002 fead 	bl	8006e80 <_ZN11Screen1ViewC1Ev>
 8004126:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2100      	movs	r1, #0
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f882 	bl	8004238 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004134:	4603      	mov	r3, r0
 8004136:	4619      	mov	r1, r3
 8004138:	2010      	movs	r0, #16
 800413a:	f7ff fd55 	bl	8003be8 <_ZnwjPv>
 800413e:	4604      	mov	r4, r0
 8004140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004142:	4620      	mov	r0, r4
 8004144:	f002 fe44 	bl	8006dd0 <_ZN16Screen1PresenterC1ER11Screen1View>
 8004148:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800414e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004154:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	3304      	adds	r3, #4
 8004166:	e000      	b.n	800416a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8004168:	2300      	movs	r3, #0
 800416a:	4619      	mov	r1, r3
 800416c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800416e:	f7ff fdf5 	bl	8003d5c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	3304      	adds	r3, #4
 8004176:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff fe0a 	bl	8003d92 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f86b 	bl	800425e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004192:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	69f8      	ldr	r0, [r7, #28]
 800419e:	4798      	blx	r3
    newPresenter->activate();
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69b8      	ldr	r0, [r7, #24]
 80041a8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80041aa:	6979      	ldr	r1, [r7, #20]
 80041ac:	69f8      	ldr	r0, [r7, #28]
 80041ae:	f014 fbb5 	bl	801891c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3310      	adds	r3, #16
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6978      	ldr	r0, [r7, #20]
 80041bc:	4798      	blx	r3
    newTransition->invalidate();
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3314      	adds	r3, #20
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6978      	ldr	r0, [r7, #20]
 80041c8:	4798      	blx	r3
}
 80041ca:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	373c      	adds	r7, #60	; 0x3c
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd90      	pop	{r4, r7, pc}
 80041d6:	bf00      	nop
 80041d8:	0802708c 	.word	0x0802708c
 80041dc:	0802711c 	.word	0x0802711c
 80041e0:	08027220 	.word	0x08027220
 80041e4:	08027278 	.word	0x08027278
 80041e8:	0802731c 	.word	0x0802731c

080041ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3324      	adds	r3, #36	; 0x24
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	887a      	ldrh	r2, [r7, #2]
 8004202:	4611      	mov	r1, r2
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
 8004208:	4603      	mov	r3, r0
    }
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	460b      	mov	r3, r1
 800421c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3324      	adds	r3, #36	; 0x24
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	887a      	ldrh	r2, [r7, #2]
 8004228:	4611      	mov	r1, r2
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	4798      	blx	r3
 800422e:	4603      	mov	r3, r0
    }
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3324      	adds	r3, #36	; 0x24
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	887a      	ldrh	r2, [r7, #2]
 800424e:	4611      	mov	r1, r2
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	4798      	blx	r3
 8004254:	4603      	mov	r3, r0
    }
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <_ZN8touchgfx12NoTransitionD1Ev>:
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	4a05      	ldr	r2, [pc, #20]	; (800429c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fce9 	bl	8003c64 <_ZN8touchgfx10TransitionD1Ev>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	08027ba4 	.word	0x08027ba4

080042a0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ffe7 	bl	800427c <_ZN8touchgfx12NoTransitionD1Ev>
 80042ae:	210c      	movs	r1, #12
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f021 fc30 	bl	8025b16 <_ZdlPvj>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
    }
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08c      	sub	sp, #48	; 0x30
 80042f4:	af08      	add	r7, sp, #32
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	4611      	mov	r1, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	460b      	mov	r3, r1
 8004300:	80fb      	strh	r3, [r7, #6]
 8004302:	4613      	mov	r3, r2
 8004304:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	88b9      	ldrh	r1, [r7, #4]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800430e:	9306      	str	r3, [sp, #24]
 8004310:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004312:	9305      	str	r3, [sp, #20]
 8004314:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004318:	9304      	str	r3, [sp, #16]
 800431a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800431e:	9303      	str	r3, [sp, #12]
 8004320:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004324:	9302      	str	r3, [sp, #8]
 8004326:	7f3b      	ldrb	r3, [r7, #28]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	7e3b      	ldrb	r3, [r7, #24]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	460b      	mov	r3, r1
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	f013 ff6f 	bl	8018214 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8004336:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004340:	619a      	str	r2, [r3, #24]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004346:	61da      	str	r2, [r3, #28]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800434c:	621a      	str	r2, [r3, #32]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004352:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	08027bec 	.word	0x08027bec

08004364 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	889b      	ldrh	r3, [r3, #4]
 8004378:	0adb      	lsrs	r3, r3, #11
 800437a:	b29b      	uxth	r3, r3
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4413      	add	r3, r2
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004396:	b480      	push	{r7}
 8004398:	b089      	sub	sp, #36	; 0x24
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	460b      	mov	r3, r1
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7b1b      	ldrb	r3, [r3, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	e030      	b.n	8004418 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	7b5b      	ldrb	r3, [r3, #13]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	b21b      	sxth	r3, r3
 80043c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ca:	b219      	sxth	r1, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	7adb      	ldrb	r3, [r3, #11]
 80043d0:	b21b      	sxth	r3, r3
 80043d2:	430b      	orrs	r3, r1
 80043d4:	b21b      	sxth	r3, r3
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	7b1b      	ldrb	r3, [r3, #12]
 80043e2:	837b      	strh	r3, [r7, #26]
 80043e4:	8b7b      	ldrh	r3, [r7, #26]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d015      	beq.n	8004416 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	897a      	ldrh	r2, [r7, #10]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d103      	bne.n	80043fc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80043fa:	e00d      	b.n	8004418 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	897a      	ldrh	r2, [r7, #10]
 8004402:	429a      	cmp	r2, r3
 8004404:	d306      	bcc.n	8004414 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004406:	8b7b      	ldrh	r3, [r7, #26]
 8004408:	3b01      	subs	r3, #1
 800440a:	837b      	strh	r3, [r7, #26]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	3304      	adds	r3, #4
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	e7e7      	b.n	80043e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8004414:	bf00      	nop
        }
    }
    return 0;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3724      	adds	r7, #36	; 0x24
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
        : color(col)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	601a      	str	r2, [r3, #0]
    }
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	791b      	ldrb	r3, [r3, #4]
    }
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3304      	adds	r3, #4
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe f8e4 	bl	800263c <_ZN8touchgfx4RectC1Ev>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	330c      	adds	r3, #12
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe f8df 	bl	800263c <_ZN8touchgfx4RectC1Ev>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	615a      	str	r2, [r3, #20]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	619a      	str	r2, [r3, #24]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	61da      	str	r2, [r3, #28]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	841a      	strh	r2, [r3, #32]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	845a      	strh	r2, [r3, #34]	; 0x22
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	08029478 	.word	0x08029478

080044bc <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
    {
 80044c4:	4a04      	ldr	r2, [pc, #16]	; (80044d8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]
    }
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	08029478 	.word	0x08029478

080044dc <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
    }
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ffe9 	bl	80044bc <_ZN8touchgfx8DrawableD1Ev>
 80044ea:	2128      	movs	r1, #40	; 0x28
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f021 fb12 	bl	8025b16 <_ZdlPvj>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8004504:	2300      	movs	r3, #0
    }
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	4608      	mov	r0, r1
 800451c:	4611      	mov	r1, r2
 800451e:	461a      	mov	r2, r3
 8004520:	4603      	mov	r3, r0
 8004522:	817b      	strh	r3, [r7, #10]
 8004524:	460b      	mov	r3, r1
 8004526:	813b      	strh	r3, [r7, #8]
 8004528:	4613      	mov	r3, r2
 800452a:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800452c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004530:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004534:	4619      	mov	r1, r3
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f844 	bl	80045c4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800453c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004544:	4619      	mov	r1, r3
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f898 	bl	800467c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	887a      	ldrh	r2, [r7, #2]
 8004598:	809a      	strh	r2, [r3, #4]
    }
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	460b      	mov	r3, r1
 80045b0:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	887a      	ldrh	r2, [r7, #2]
 80045b6:	80da      	strh	r2, [r3, #6]
    }
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	807b      	strh	r3, [r7, #2]
 80045d0:	4613      	mov	r3, r2
 80045d2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	332c      	adds	r3, #44	; 0x2c
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80045e0:	4611      	mov	r1, r2
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4798      	blx	r3
        setY(y);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3330      	adds	r3, #48	; 0x30
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f9b7 2000 	ldrsh.w	r2, [r7]
 80045f2:	4611      	mov	r1, r2
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4798      	blx	r3
    }
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	811a      	strh	r2, [r3, #8]
    }
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	460b      	mov	r3, r1
 8004628:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	887a      	ldrh	r2, [r7, #2]
 800462e:	815a      	strh	r2, [r3, #10]
    }
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
    {
    }
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
    {
    }
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
    {
    }
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
 8004688:	4613      	mov	r3, r2
 800468a:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3334      	adds	r3, #52	; 0x34
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004698:	4611      	mov	r1, r2
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
        setHeight(height);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3338      	adds	r3, #56	; 0x38
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80046aa:	4611      	mov	r1, r2
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4798      	blx	r3
    }
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <_ZN8touchgfx8Drawable14setWidthHeightERKS0_>:
     *
     * @param  drawable The Drawable to copy the width and height from.
     *
     * @see setWidthHeight(int16_t,int16_t)
     */
    void setWidthHeight(const Drawable& drawable)
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
    {
        setWidthHeight(drawable.getWidth(), drawable.getHeight());
 80046c2:	6838      	ldr	r0, [r7, #0]
 80046c4:	f7ff ff46 	bl	8004554 <_ZNK8touchgfx8Drawable8getWidthEv>
 80046c8:	4603      	mov	r3, r0
 80046ca:	461c      	mov	r4, r3
 80046cc:	6838      	ldr	r0, [r7, #0]
 80046ce:	f7ff ff4e 	bl	800456e <_ZNK8touchgfx8Drawable9getHeightEv>
 80046d2:	4603      	mov	r3, r0
 80046d4:	461a      	mov	r2, r3
 80046d6:	4621      	mov	r1, r4
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff ffcf 	bl	800467c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd90      	pop	{r4, r7, pc}

080046e6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
    {
    }
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
    {
    }
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @param  vis true if this Drawable should be visible. By default, drawables are visible
     *             unless this function has been called with false as argument.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setVisible(bool vis)
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	807b      	strh	r3, [r7, #2]
 8004790:	4613      	mov	r3, r2
 8004792:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3350      	adds	r3, #80	; 0x50
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	8879      	ldrh	r1, [r7, #2]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80047a4:	b292      	uxth	r2, r2
 80047a6:	1a8a      	subs	r2, r1, r2
 80047a8:	b292      	uxth	r2, r2
 80047aa:	b210      	sxth	r0, r2
 80047ac:	8839      	ldrh	r1, [r7, #0]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80047b4:	b292      	uxth	r2, r2
 80047b6:	1a8a      	subs	r2, r1, r2
 80047b8:	b292      	uxth	r2, r2
 80047ba:	b212      	sxth	r2, r2
 80047bc:	4601      	mov	r1, r0
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
    }
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047d8:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e0:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e8:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f7ff ffe1 	bl	80047ca <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	601a      	str	r2, [r3, #0]
    }
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fe16 	bl	800445c <_ZN8touchgfx8DrawableC1Ev>
 8004830:	4a05      	ldr	r2, [pc, #20]	; (8004848 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	080283cc 	.word	0x080283cc

0800484c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
    {
 800486c:	4a06      	ldr	r2, [pc, #24]	; (8004888 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3304      	adds	r3, #4
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f8f4 	bl	8004a64 <_ZN8touchgfx9ContainerD1Ev>
    }
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	08029548 	.word	0x08029548

0800488c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
    }
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff ffe5 	bl	8004864 <_ZN8touchgfx6ScreenD1Ev>
 800489a:	213c      	movs	r1, #60	; 0x3c
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f021 f93a 	bl	8025b16 <_ZdlPvj>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
    {
    }
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
    {
    }
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
    {
    }
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
    {
    }
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	70fb      	strb	r3, [r7, #3]
    {
    }
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3304      	adds	r3, #4
 8004922:	6839      	ldr	r1, [r7, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f00e fba9 	bl	801307c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	607b      	str	r3, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	817b      	strh	r3, [r7, #10]
 8004940:	4613      	mov	r3, r2
 8004942:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff ff02 	bl	8004750 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff08 	bl	800476a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004964:	2300      	movs	r3, #0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	601a      	str	r2, [r3, #0]
        }
    }
 8004970:	bf00      	nop
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fd6a 	bl	800445c <_ZN8touchgfx8DrawableC1Ev>
 8004988:	4a03      	ldr	r2, [pc, #12]	; (8004998 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	08027f3c 	.word	0x08027f3c

0800499c <_ZN8touchgfx6WidgetD1Ev>:
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	4a05      	ldr	r2, [pc, #20]	; (80049bc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff fd85 	bl	80044bc <_ZN8touchgfx8DrawableD1Ev>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	08027f3c 	.word	0x08027f3c

080049c0 <_ZN8touchgfx6WidgetD0Ev>:
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff ffe7 	bl	800499c <_ZN8touchgfx6WidgetD1Ev>
 80049ce:	2128      	movs	r1, #40	; 0x28
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f021 f8a0 	bl	8025b16 <_ZdlPvj>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4618      	mov	r0, r3
 80049ec:	2326      	movs	r3, #38	; 0x26
 80049ee:	461a      	mov	r2, r3
 80049f0:	2100      	movs	r1, #0
 80049f2:	f021 f94b 	bl	8025c8c <memset>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ffbd 	bl	8004978 <_ZN8touchgfx6WidgetC1Ev>
 80049fe:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	22ff      	movs	r2, #255	; 0xff
 8004a08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3328      	adds	r3, #40	; 0x28
 8004a10:	2100      	movs	r1, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fd06 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	08028f94 	.word	0x08028f94

08004a28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	78fa      	ldrb	r2, [r7, #3]
 8004a54:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	4a05      	ldr	r2, [pc, #20]	; (8004a84 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff fd21 	bl	80044bc <_ZN8touchgfx8DrawableD1Ev>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	080283cc 	.word	0x080283cc

08004a88 <_ZN8touchgfx9ContainerD0Ev>:
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff ffe7 	bl	8004a64 <_ZN8touchgfx9ContainerD1Ev>
 8004a96:	212c      	movs	r1, #44	; 0x2c
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f021 f83c 	bl	8025b16 <_ZdlPvj>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff feb4 	bl	8004820 <_ZN8touchgfx9ContainerC1Ev>
 8004ab8:	4a0b      	ldr	r2, [pc, #44]	; (8004ae8 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	22ff      	movs	r2, #255	; 0xff
 8004aca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fe29 	bl	8004730 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	08027ea4 	.word	0x08027ea4

08004aec <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	78fa      	ldrb	r2, [r7, #3]
 8004afc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3388      	adds	r3, #136	; 0x88
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	4798      	blx	r3
    }
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
        alpha = newAlpha;
        handleAlphaUpdated();
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @param  callback The callback.
     *
     * @see executeAction
     */
    void setAction(GenericCallback<const AbstractButtonContainer&>& callback)
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00d      	beq.n	8004b90 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	330c      	adds	r3, #12
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4610      	mov	r0, r2
 8004b84:	4798      	blx	r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 8004b90:	2300      	movs	r3, #0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4798      	blx	r3
        }
    }
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
    {
    }
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
    {
    }
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <_ZN8touchgfx3BoxD1Ev+0x20>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fed5 	bl	800499c <_ZN8touchgfx6WidgetD1Ev>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	08028f94 	.word	0x08028f94

08004c00 <_ZN8touchgfx3BoxD0Ev>:
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ffe7 	bl	8004bdc <_ZN8touchgfx3BoxD1Ev>
 8004c0e:	212c      	movs	r1, #44	; 0x2c
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f020 ff80 	bl	8025b16 <_ZdlPvj>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fed8 	bl	80049e0 <_ZN8touchgfx3BoxC1Ev>
 8004c30:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	332c      	adds	r3, #44	; 0x2c
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fbf1 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	080290a0 	.word	0x080290a0

08004c58 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	887a      	ldrh	r2, [r7, #2]
 8004c84:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b084      	sub	sp, #16
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff ff38 	bl	8004b14 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8004ca8:	6838      	ldr	r0, [r7, #0]
 8004caa:	f7ff fbca 	bl	8004442 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8004cba:	7bbb      	ldrb	r3, [r7, #14]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	f083 0301 	eor.w	r3, r3, #1
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d108      	bne.n	8004cde <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8004ccc:	7bbb      	ldrb	r3, [r7, #14]
 8004cce:	f083 0301 	eor.w	r3, r3, #1
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00f      	beq.n	8004cf8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00c      	beq.n	8004cf8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7bba      	ldrb	r2, [r7, #14]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff01 	bl	8004aec <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3314      	adds	r3, #20
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 8004cfe:	6838      	ldr	r0, [r7, #0]
 8004d00:	f7ff fb9f 	bl	8004442 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3384      	adds	r3, #132	; 0x84
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4798      	blx	r3
        }
    }
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	4a05      	ldr	r2, [pc, #20]	; (8004d4c <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff fe91 	bl	8004a64 <_ZN8touchgfx9ContainerD1Ev>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	08027ea4 	.word	0x08027ea4

08004d50 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff ffe7 	bl	8004d2c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8004d5e:	2134      	movs	r1, #52	; 0x34
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f020 fed8 	bl	8025b16 <_ZdlPvj>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8004d7c:	4a06      	ldr	r2, [pc, #24]	; (8004d98 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	887a      	ldrh	r2, [r7, #2]
 8004d86:	809a      	strh	r2, [r3, #4]
    }
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	08027b94 	.word	0x08027b94

08004d9c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4618      	mov	r0, r3
 8004da8:	2326      	movs	r3, #38	; 0x26
 8004daa:	461a      	mov	r2, r3
 8004dac:	2100      	movs	r1, #0
 8004dae:	f020 ff6d 	bl	8025c8c <memset>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fddf 	bl	8004978 <_ZN8touchgfx6WidgetC1Ev>
 8004dba:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3328      	adds	r3, #40	; 0x28
 8004dc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff ffd1 	bl	8004d70 <_ZN8touchgfx9TypedTextC1Et>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3330      	adds	r3, #48	; 0x30
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff fb25 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	869a      	strh	r2, [r3, #52]	; 0x34
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	22ff      	movs	r2, #255	; 0xff
 8004de4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	08028eec 	.word	0x08028eec

08004e10 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	4a08      	ldr	r2, [pc, #32]	; (8004e5c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3328      	adds	r3, #40	; 0x28
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fe feb0 	bl	8003ba8 <_ZN8touchgfx9TypedTextD1Ev>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff fda6 	bl	800499c <_ZN8touchgfx6WidgetD1Ev>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	08028eec 	.word	0x08028eec

08004e60 <_ZN8touchgfx8TextAreaD0Ev>:
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff ffe1 	bl	8004e30 <_ZN8touchgfx8TextAreaD1Ev>
 8004e6e:	213c      	movs	r1, #60	; 0x3c
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f020 fe50 	bl	8025b16 <_ZdlPvj>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff ff86 	bl	8004d9c <_ZN8touchgfx8TextAreaC1Ev>
 8004e90:	4a05      	ldr	r2, [pc, #20]	; (8004ea8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	08028ff8 	.word	0x08028ff8

08004eac <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	4a05      	ldr	r2, [pc, #20]	; (8004ecc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff fcd1 	bl	8004864 <_ZN8touchgfx6ScreenD1Ev>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	08027dc0 	.word	0x08027dc0

08004ed0 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ffe7 	bl	8004eac <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8004ede:	2140      	movs	r1, #64	; 0x40
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f020 fe18 	bl	8025b16 <_ZdlPvj>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	4a2b      	ldr	r2, [pc, #172]	; (8004fa8 <_ZN15Screen1ViewBaseD1Ev+0xb8>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f203 5354 	addw	r3, r3, #1364	; 0x554
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 fa13 	bl	8006330 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8004f10:	4618      	mov	r0, r3
 8004f12:	f001 faa5 	bl	8006460 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 fa29 	bl	8006374 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 fa23 	bl	8006374 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 fa45 	bl	80063c4 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fd8f 	bl	8004a64 <_ZN8touchgfx9ContainerD1Ev>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff ff6f 	bl	8004e30 <_ZN8touchgfx8TextAreaD1Ev>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 fa55 	bl	8006408 <_ZN8touchgfx19ScrollableContainerD1Ev>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 fa2d 	bl	80063c4 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 f9ff 	bl	8006374 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3398      	adds	r3, #152	; 0x98
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f001 f9fa 	bl	8006374 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	336c      	adds	r3, #108	; 0x6c
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff fe29 	bl	8004bdc <_ZN8touchgfx3BoxD1Ev>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3340      	adds	r3, #64	; 0x40
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fe24 	bl	8004bdc <_ZN8touchgfx3BoxD1Ev>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff ff88 	bl	8004eac <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	08027c44 	.word	0x08027c44

08004fac <_ZN15Screen1ViewBaseD0Ev>:
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff ff9b 	bl	8004ef0 <_ZN15Screen1ViewBaseD1Ev>
 8004fba:	f240 5164 	movw	r1, #1380	; 0x564
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f020 fda9 	bl	8025b16 <_ZdlPvj>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8004fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd4:	b0d6      	sub	sp, #344	; 0x158
 8004fd6:	af02      	add	r7, sp, #8
 8004fd8:	1d3b      	adds	r3, r7, #4
 8004fda:	6018      	str	r0, [r3, #0]
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
 8004fdc:	1d3b      	adds	r3, r7, #4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 ff89 	bl	8005ef8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8004fe6:	4aeb      	ldr	r2, [pc, #940]	; (8005394 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 8004fe8:	1d3b      	adds	r3, r7, #4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	1d3b      	adds	r3, r7, #4
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3340      	adds	r3, #64	; 0x40
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fcf3 	bl	80049e0 <_ZN8touchgfx3BoxC1Ev>
 8004ffa:	1d3b      	adds	r3, r7, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	336c      	adds	r3, #108	; 0x6c
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fced 	bl	80049e0 <_ZN8touchgfx3BoxC1Ev>
 8005006:	1d3b      	adds	r3, r7, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3398      	adds	r3, #152	; 0x98
 800500c:	4618      	mov	r0, r3
 800500e:	f000 ffd3 	bl	8005fb8 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8005012:	1d3b      	adds	r3, r7, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800501a:	4618      	mov	r0, r3
 800501c:	f000 ffcc 	bl	8005fb8 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8005020:	1d3b      	adds	r3, r7, #4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fdf9 	bl	8004c20 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800502e:	1d3b      	adds	r3, r7, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005036:	4618      	mov	r0, r3
 8005038:	f00e fd8e 	bl	8013b58 <_ZN8touchgfx19ScrollableContainerC1Ev>
 800503c:	1d3b      	adds	r3, r7, #4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fea9 	bl	8004d9c <_ZN8touchgfx8TextAreaC1Ev>
 800504a:	1d3b      	adds	r3, r7, #4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fbe4 	bl	8004820 <_ZN8touchgfx9ContainerC1Ev>
 8005058:	1d3b      	adds	r3, r7, #4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff fddd 	bl	8004c20 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005066:	1d3b      	adds	r3, r7, #4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800506e:	4618      	mov	r0, r3
 8005070:	f000 ffa2 	bl	8005fb8 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8005074:	1d3b      	adds	r3, r7, #4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 800507c:	4618      	mov	r0, r3
 800507e:	f000 ff9b 	bl	8005fb8 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f203 5314 	addw	r3, r3, #1300	; 0x514
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fef8 	bl	8004e80 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8005090:	1d3b      	adds	r3, r7, #4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f203 5054 	addw	r0, r3, #1364	; 0x554
 8005098:	f107 0314 	add.w	r3, r7, #20
 800509c:	4abe      	ldr	r2, [pc, #760]	; (8005398 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	f107 0314 	add.w	r3, r7, #20
 80050a4:	2200      	movs	r2, #0
 80050a6:	605a      	str	r2, [r3, #4]
 80050a8:	f107 0314 	add.w	r3, r7, #20
 80050ac:	1d39      	adds	r1, r7, #4
 80050ae:	cb0c      	ldmia	r3, {r2, r3}
 80050b0:	6809      	ldr	r1, [r1, #0]
 80050b2:	f000 ffb9 	bl	8006028 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 80050b6:	1d3b      	adds	r3, r7, #4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80050be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80050c8:	2200      	movs	r2, #0
 80050ca:	2100      	movs	r1, #0
 80050cc:	f7ff fa21 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80050d0:	1d3b      	adds	r3, r7, #4
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80050d8:	2300      	movs	r3, #0
 80050da:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 80050de:	2300      	movs	r3, #0
 80050e0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80050ea:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	461a      	mov	r2, r3
 80050f2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80050f6:	021b      	lsls	r3, r3, #8
 80050f8:	431a      	orrs	r2, r3
 80050fa:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80050fe:	4313      	orrs	r3, r2
 8005100:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005104:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff f98a 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005114:	4619      	mov	r1, r3
 8005116:	4620      	mov	r0, r4
 8005118:	f7ff fc86 	bl	8004a28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    background.setPosition(0, 0, 480, 272);
 800511c:	1d3b      	adds	r3, r7, #4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8005124:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800512e:	2200      	movs	r2, #0
 8005130:	2100      	movs	r1, #0
 8005132:	f7ff f9ee 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFromRGB(255, 163, 59));
 8005136:	1d3b      	adds	r3, r7, #4
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800513e:	23ff      	movs	r3, #255	; 0xff
 8005140:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005144:	23a3      	movs	r3, #163	; 0xa3
 8005146:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 800514a:	233b      	movs	r3, #59	; 0x3b
 800514c:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8005150:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	461a      	mov	r2, r3
 8005158:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	431a      	orrs	r2, r3
 8005160:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8005164:	4313      	orrs	r3, r2
 8005166:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800516a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800516e:	4611      	mov	r1, r2
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff f957 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800517a:	4619      	mov	r1, r3
 800517c:	4620      	mov	r0, r4
 800517e:	f7ff fc53 	bl	8004a28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    txButton.setBoxWithBorderPosition(0, 0, 69, 48);
 8005182:	1d3b      	adds	r3, r7, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800518a:	2330      	movs	r3, #48	; 0x30
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	2345      	movs	r3, #69	; 0x45
 8005190:	2200      	movs	r2, #0
 8005192:	2100      	movs	r1, #0
 8005194:	f000 ff68 	bl	8006068 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    txButton.setBorderSize(5);
 8005198:	1d3b      	adds	r3, r7, #4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3398      	adds	r3, #152	; 0x98
 800519e:	2105      	movs	r1, #5
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 ff81 	bl	80060a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    txButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80051b4:	2366      	movs	r3, #102	; 0x66
 80051b6:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 80051ba:	2399      	movs	r3, #153	; 0x99
 80051bc:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80051c0:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	461a      	mov	r2, r3
 80051c8:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	431a      	orrs	r2, r3
 80051d0:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80051da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80051de:	4611      	mov	r1, r2
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff f91f 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 80051e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051ea:	461d      	mov	r5, r3
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 80051f2:	2399      	movs	r3, #153	; 0x99
 80051f4:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 80051f8:	23cc      	movs	r3, #204	; 0xcc
 80051fa:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 80051fe:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8005202:	041b      	lsls	r3, r3, #16
 8005204:	461a      	mov	r2, r3
 8005206:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	431a      	orrs	r2, r3
 800520e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005212:	4313      	orrs	r3, r2
 8005214:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005218:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800521c:	4611      	mov	r1, r2
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff f900 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005224:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005228:	461e      	mov	r6, r3
 800522a:	2300      	movs	r3, #0
 800522c:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
 8005230:	2333      	movs	r3, #51	; 0x33
 8005232:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005236:	2366      	movs	r3, #102	; 0x66
 8005238:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 800523c:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	461a      	mov	r2, r3
 8005244:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	431a      	orrs	r2, r3
 800524c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8005250:	4313      	orrs	r3, r2
 8005252:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005256:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff f8e1 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005262:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005266:	4698      	mov	r8, r3
 8005268:	2333      	movs	r3, #51	; 0x33
 800526a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 800526e:	2366      	movs	r3, #102	; 0x66
 8005270:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8005274:	2399      	movs	r3, #153	; 0x99
 8005276:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
 800527a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800527e:	041b      	lsls	r3, r3, #16
 8005280:	461a      	mov	r2, r3
 8005282:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	431a      	orrs	r2, r3
 800528a:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800528e:	4313      	orrs	r3, r2
 8005290:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005294:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005298:	4611      	mov	r1, r2
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff f8c2 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 80052a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	4643      	mov	r3, r8
 80052a8:	4632      	mov	r2, r6
 80052aa:	4629      	mov	r1, r5
 80052ac:	4620      	mov	r0, r4
 80052ae:	f000 ff0d 	bl	80060cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    txButton.setText(TypedText(T___SINGLEUSE_C6V9));
 80052b2:	1d3b      	adds	r3, r7, #4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80052ba:	f107 031c 	add.w	r3, r7, #28
 80052be:	2100      	movs	r1, #0
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff fd55 	bl	8004d70 <_ZN8touchgfx9TypedTextC1Et>
 80052c6:	f107 031c 	add.w	r3, r7, #28
 80052ca:	4619      	mov	r1, r3
 80052cc:	4620      	mov	r0, r4
 80052ce:	f000 ff1a 	bl	8006106 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 80052d2:	f107 031c 	add.w	r3, r7, #28
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fe fc66 	bl	8003ba8 <_ZN8touchgfx9TypedTextD1Ev>
    txButton.setTextPosition(0, 11, 69, 48);
 80052dc:	1d3b      	adds	r3, r7, #4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80052e4:	2330      	movs	r3, #48	; 0x30
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	2345      	movs	r3, #69	; 0x45
 80052ea:	220b      	movs	r2, #11
 80052ec:	2100      	movs	r1, #0
 80052ee:	f000 ff20 	bl	8006132 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    txButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 80052f2:	1d3b      	adds	r3, r7, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80052fa:	23ff      	movs	r3, #255	; 0xff
 80052fc:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8005300:	23ff      	movs	r3, #255	; 0xff
 8005302:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 8005306:	23ff      	movs	r3, #255	; 0xff
 8005308:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 800530c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8005310:	041b      	lsls	r3, r3, #16
 8005312:	461a      	mov	r2, r3
 8005314:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	431a      	orrs	r2, r3
 800531c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8005320:	4313      	orrs	r3, r2
 8005322:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005326:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800532a:	4611      	mov	r1, r2
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff f879 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005336:	461d      	mov	r5, r3
 8005338:	23ff      	movs	r3, #255	; 0xff
 800533a:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
 800533e:	23ff      	movs	r3, #255	; 0xff
 8005340:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
 8005344:	23ff      	movs	r3, #255	; 0xff
 8005346:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800534a:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 800534e:	041b      	lsls	r3, r3, #16
 8005350:	461a      	mov	r2, r3
 8005352:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	431a      	orrs	r2, r3
 800535a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800535e:	4313      	orrs	r3, r2
 8005360:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005364:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff f85a 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005374:	461a      	mov	r2, r3
 8005376:	4629      	mov	r1, r5
 8005378:	4620      	mov	r0, r4
 800537a:	f000 fefa 	bl	8006172 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    txButton.setPosition(23, 18, 69, 48);
 800537e:	1d3b      	adds	r3, r7, #4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8005386:	2330      	movs	r3, #48	; 0x30
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	2345      	movs	r3, #69	; 0x45
 800538c:	2212      	movs	r2, #18
 800538e:	2117      	movs	r1, #23
 8005390:	e004      	b.n	800539c <_ZN15Screen1ViewBaseC1Ev+0x3cc>
 8005392:	bf00      	nop
 8005394:	08027c44 	.word	0x08027c44
 8005398:	08005e99 	.word	0x08005e99
 800539c:	f7ff f8b9 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>
    txButton.setAction(flexButtonCallback);
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80053a8:	1d3b      	adds	r3, r7, #4
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f203 5354 	addw	r3, r3, #1364	; 0x554
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f7ff fbc8 	bl	8004b48 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    rxButton.setBoxWithBorderPosition(0, 0, 69, 48);
 80053b8:	1d3b      	adds	r3, r7, #4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 80053c0:	2330      	movs	r3, #48	; 0x30
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	2345      	movs	r3, #69	; 0x45
 80053c6:	2200      	movs	r2, #0
 80053c8:	2100      	movs	r1, #0
 80053ca:	f000 fe4d 	bl	8006068 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    rxButton.setBorderSize(5);
 80053ce:	1d3b      	adds	r3, r7, #4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80053d6:	2105      	movs	r1, #5
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fe65 	bl	80060a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    rxButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 80053de:	1d3b      	adds	r3, r7, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80053e6:	2300      	movs	r3, #0
 80053e8:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
 80053ec:	2366      	movs	r3, #102	; 0x66
 80053ee:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80053f2:	2399      	movs	r3, #153	; 0x99
 80053f4:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
 80053f8:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 80053fc:	041b      	lsls	r3, r3, #16
 80053fe:	461a      	mov	r2, r3
 8005400:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	431a      	orrs	r2, r3
 8005408:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 800540c:	4313      	orrs	r3, r2
 800540e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005412:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005416:	4611      	mov	r1, r2
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff f803 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 800541e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005422:	461d      	mov	r5, r3
 8005424:	2300      	movs	r3, #0
 8005426:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800542a:	2399      	movs	r3, #153	; 0x99
 800542c:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 8005430:	23cc      	movs	r3, #204	; 0xcc
 8005432:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
 8005436:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	461a      	mov	r2, r3
 800543e:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	431a      	orrs	r2, r3
 8005446:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800544a:	4313      	orrs	r3, r2
 800544c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005450:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe ffe4 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 800545c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005460:	461e      	mov	r6, r3
 8005462:	2300      	movs	r3, #0
 8005464:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8005468:	2333      	movs	r3, #51	; 0x33
 800546a:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 800546e:	2366      	movs	r3, #102	; 0x66
 8005470:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 8005474:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	461a      	mov	r2, r3
 800547c:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8005480:	021b      	lsls	r3, r3, #8
 8005482:	431a      	orrs	r2, r3
 8005484:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 8005488:	4313      	orrs	r3, r2
 800548a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800548e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe ffc5 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 800549a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800549e:	4698      	mov	r8, r3
 80054a0:	2333      	movs	r3, #51	; 0x33
 80054a2:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
 80054a6:	2366      	movs	r3, #102	; 0x66
 80054a8:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
 80054ac:	2399      	movs	r3, #153	; 0x99
 80054ae:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 80054b2:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	461a      	mov	r2, r3
 80054ba:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	431a      	orrs	r2, r3
 80054c2:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80054cc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80054d0:	4611      	mov	r1, r2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fe ffa6 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 80054d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	4643      	mov	r3, r8
 80054e0:	4632      	mov	r2, r6
 80054e2:	4629      	mov	r1, r5
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 fdf1 	bl	80060cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    rxButton.setText(TypedText(T___SINGLEUSE_NCFE));
 80054ea:	1d3b      	adds	r3, r7, #4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80054f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054f6:	2101      	movs	r1, #1
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff fc39 	bl	8004d70 <_ZN8touchgfx9TypedTextC1Et>
 80054fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005502:	4619      	mov	r1, r3
 8005504:	4620      	mov	r0, r4
 8005506:	f000 fdfe 	bl	8006106 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 800550a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe fb4a 	bl	8003ba8 <_ZN8touchgfx9TypedTextD1Ev>
    rxButton.setTextPosition(0, 11, 69, 48);
 8005514:	1d3b      	adds	r3, r7, #4
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 800551c:	2330      	movs	r3, #48	; 0x30
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	2345      	movs	r3, #69	; 0x45
 8005522:	220b      	movs	r2, #11
 8005524:	2100      	movs	r1, #0
 8005526:	f000 fe04 	bl	8006132 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    rxButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 800552a:	1d3b      	adds	r3, r7, #4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8005532:	23ff      	movs	r3, #255	; 0xff
 8005534:	f887 30f8 	strb.w	r3, [r7, #248]	; 0xf8
 8005538:	23ff      	movs	r3, #255	; 0xff
 800553a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800553e:	23ff      	movs	r3, #255	; 0xff
 8005540:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
 8005544:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	461a      	mov	r2, r3
 800554c:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	431a      	orrs	r2, r3
 8005554:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8005558:	4313      	orrs	r3, r2
 800555a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800555e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005562:	4611      	mov	r1, r2
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe ff5d 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 800556a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800556e:	461d      	mov	r5, r3
 8005570:	23ff      	movs	r3, #255	; 0xff
 8005572:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 8005576:	23ff      	movs	r3, #255	; 0xff
 8005578:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 800557c:	23ff      	movs	r3, #255	; 0xff
 800557e:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
 8005582:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8005586:	041b      	lsls	r3, r3, #16
 8005588:	461a      	mov	r2, r3
 800558a:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	431a      	orrs	r2, r3
 8005592:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 8005596:	4313      	orrs	r3, r2
 8005598:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800559c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80055a0:	4611      	mov	r1, r2
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe ff3e 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 80055a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055ac:	461a      	mov	r2, r3
 80055ae:	4629      	mov	r1, r5
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 fdde 	bl	8006172 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    rxButton.setPosition(112, 18, 69, 48);
 80055b6:	1d3b      	adds	r3, r7, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 80055be:	2330      	movs	r3, #48	; 0x30
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	2345      	movs	r3, #69	; 0x45
 80055c4:	2212      	movs	r2, #18
 80055c6:	2170      	movs	r1, #112	; 0x70
 80055c8:	f7fe ffa3 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>
    rxButton.setAction(flexButtonCallback);
 80055cc:	1d3b      	adds	r3, r7, #4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f503 72aa 	add.w	r2, r3, #340	; 0x154
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f203 5354 	addw	r3, r3, #1364	; 0x554
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f7ff fab2 	bl	8004b48 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    scrollBackgroundBox.setPosition(208, 0, 272, 272);
 80055e4:	1d3b      	adds	r3, r7, #4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f503 7004 	add.w	r0, r3, #528	; 0x210
 80055ec:	f44f 7388 	mov.w	r3, #272	; 0x110
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80055f6:	2200      	movs	r2, #0
 80055f8:	21d0      	movs	r1, #208	; 0xd0
 80055fa:	f7fe ff8a 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollBackgroundBox.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80055fe:	1d3b      	adds	r3, r7, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8005606:	23ff      	movs	r3, #255	; 0xff
 8005608:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
 800560c:	23ff      	movs	r3, #255	; 0xff
 800560e:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8005612:	23ff      	movs	r3, #255	; 0xff
 8005614:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8005618:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 800561c:	041b      	lsls	r3, r3, #16
 800561e:	461a      	mov	r2, r3
 8005620:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005624:	021b      	lsls	r3, r3, #8
 8005626:	431a      	orrs	r2, r3
 8005628:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800562c:	4313      	orrs	r3, r2
 800562e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005632:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005636:	4611      	mov	r1, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f7fe fef3 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 800563e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005642:	4619      	mov	r1, r3
 8005644:	4620      	mov	r0, r4
 8005646:	f7ff f9ef 	bl	8004a28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    scrollBackgroundBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800564a:	1d3b      	adds	r3, r7, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8005652:	2300      	movs	r3, #0
 8005654:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
 800565e:	2300      	movs	r3, #0
 8005660:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8005664:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	461a      	mov	r2, r3
 800566c:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	431a      	orrs	r2, r3
 8005674:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8005678:	4313      	orrs	r3, r2
 800567a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800567e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005682:	4611      	mov	r1, r2
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe fecd 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 800568a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800568e:	4619      	mov	r1, r3
 8005690:	4620      	mov	r0, r4
 8005692:	f7ff fae1 	bl	8004c58 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    scrollBackgroundBox.setBorderSize(5);
 8005696:	1d3b      	adds	r3, r7, #4
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800569e:	2105      	movs	r1, #5
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fae7 	bl	8004c74 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    scrollableContainer.setPosition(219, 11, 250, 250);
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f503 7011 	add.w	r0, r3, #580	; 0x244
 80056ae:	23fa      	movs	r3, #250	; 0xfa
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	23fa      	movs	r3, #250	; 0xfa
 80056b4:	220b      	movs	r2, #11
 80056b6:	21db      	movs	r1, #219	; 0xdb
 80056b8:	f7fe ff2b 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80056bc:	1d3b      	adds	r3, r7, #4
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f503 7411 	add.w	r4, r3, #580	; 0x244
 80056c4:	2300      	movs	r3, #0
 80056c6:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 80056ca:	2300      	movs	r3, #0
 80056cc:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 80056d6:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80056da:	041b      	lsls	r3, r3, #16
 80056dc:	461a      	mov	r2, r3
 80056de:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	431a      	orrs	r2, r3
 80056e6:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80056f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80056f4:	4611      	mov	r1, r2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe fe94 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 80056fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005700:	4619      	mov	r1, r3
 8005702:	4620      	mov	r0, r4
 8005704:	f00e fd3c 	bl	8014180 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>

    feedbackTextArea.setXY(0, 0);
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005710:	2200      	movs	r2, #0
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe ff55 	bl	80045c4 <_ZN8touchgfx8Drawable5setXYEss>
    feedbackTextArea.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800571a:	1d3b      	adds	r3, r7, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8005722:	2300      	movs	r3, #0
 8005724:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8005728:	2300      	movs	r3, #0
 800572a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 800572e:	2300      	movs	r3, #0
 8005730:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8005734:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005738:	041b      	lsls	r3, r3, #16
 800573a:	461a      	mov	r2, r3
 800573c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	431a      	orrs	r2, r3
 8005744:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005748:	4313      	orrs	r3, r2
 800574a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800574e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005752:	4611      	mov	r1, r2
 8005754:	4618      	mov	r0, r3
 8005756:	f7fe fe65 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 800575a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800575e:	461a      	mov	r2, r3
 8005760:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8005764:	f107 0310 	add.w	r3, r7, #16
 8005768:	601a      	str	r2, [r3, #0]
        this->color = color;
 800576a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800576e:	f107 0210 	add.w	r2, r7, #16
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8005776:	bf00      	nop
    feedbackTextArea.setLinespacing(0);
 8005778:	1d3b      	adds	r3, r7, #4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005780:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005784:	2300      	movs	r3, #0
 8005786:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800578a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800578e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005792:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8005794:	bf00      	nop
    feedbackTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X7DN));
 8005796:	1d3b      	adds	r3, r7, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f503 7440 	add.w	r4, r3, #768	; 0x300
 800579e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057a2:	2102      	movs	r1, #2
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fae3 	bl	8004d70 <_ZN8touchgfx9TypedTextC1Et>
 80057aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057ae:	4619      	mov	r1, r3
 80057b0:	4620      	mov	r0, r4
 80057b2:	f00f fea6 	bl	8015502 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80057b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fe f9f4 	bl	8003ba8 <_ZN8touchgfx9TypedTextD1Ev>
    scrollableContainer.add(feedbackTextArea);
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f503 7211 	add.w	r2, r3, #580	; 0x244
 80057c8:	1d3b      	adds	r3, r7, #4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80057d0:	4619      	mov	r1, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	f00d fee5 	bl	80135a2 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
    scrollableContainer.setScrollbarsPermanentlyVisible();
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80057e0:	2101      	movs	r1, #1
 80057e2:	4618      	mov	r0, r3
 80057e4:	f00e fcd1 	bl	801418a <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>

    txInfoContainer.setPosition(7, 77, 190, 184);
 80057e8:	1d3b      	adds	r3, r7, #4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 80057f0:	23b8      	movs	r3, #184	; 0xb8
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	23be      	movs	r3, #190	; 0xbe
 80057f6:	224d      	movs	r2, #77	; 0x4d
 80057f8:	2107      	movs	r1, #7
 80057fa:	f7fe fe8a 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>

    txInfoBackgroundBox.setPosition(0, 0, 190, 184);
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f503 705a 	add.w	r0, r3, #872	; 0x368
 8005806:	23b8      	movs	r3, #184	; 0xb8
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	23be      	movs	r3, #190	; 0xbe
 800580c:	2200      	movs	r2, #0
 800580e:	2100      	movs	r1, #0
 8005810:	f7fe fe7f 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>
    txInfoBackgroundBox.setColor(touchgfx::Color::getColorFromRGB(255, 201, 143));
 8005814:	1d3b      	adds	r3, r7, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f503 745a 	add.w	r4, r3, #872	; 0x368
 800581c:	23ff      	movs	r3, #255	; 0xff
 800581e:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8005822:	23c9      	movs	r3, #201	; 0xc9
 8005824:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 8005828:	238f      	movs	r3, #143	; 0x8f
 800582a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800582e:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8005832:	041b      	lsls	r3, r3, #16
 8005834:	461a      	mov	r2, r3
 8005836:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	431a      	orrs	r2, r3
 800583e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005842:	4313      	orrs	r3, r2
 8005844:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005848:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800584c:	4611      	mov	r1, r2
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe fde8 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005858:	4619      	mov	r1, r3
 800585a:	4620      	mov	r0, r4
 800585c:	f7ff f8e4 	bl	8004a28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    txInfoBackgroundBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f503 745a 	add.w	r4, r3, #872	; 0x368
 8005868:	2300      	movs	r3, #0
 800586a:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 800586e:	2300      	movs	r3, #0
 8005870:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 8005874:	2300      	movs	r3, #0
 8005876:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800587a:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	461a      	mov	r2, r3
 8005882:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	431a      	orrs	r2, r3
 800588a:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 800588e:	4313      	orrs	r3, r2
 8005890:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005894:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fdc2 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 80058a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058a4:	4619      	mov	r1, r3
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff f9d6 	bl	8004c58 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    txInfoBackgroundBox.setBorderSize(5);
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80058b4:	2105      	movs	r1, #5
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff f9dc 	bl	8004c74 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    txInfoContainer.add(txInfoBackgroundBox);
 80058bc:	1d3b      	adds	r3, r7, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 80058c4:	1d3b      	adds	r3, r7, #4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f00d fbd4 	bl	801307c <_ZN8touchgfx9Container3addERNS_8DrawableE>

    sendValButton.setBoxWithBorderPosition(0, 0, 158, 32);
 80058d4:	1d3b      	adds	r3, r7, #4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 80058dc:	2320      	movs	r3, #32
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	239e      	movs	r3, #158	; 0x9e
 80058e2:	2200      	movs	r2, #0
 80058e4:	2100      	movs	r1, #0
 80058e6:	f000 fbbf 	bl	8006068 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    sendValButton.setBorderSize(5);
 80058ea:	1d3b      	adds	r3, r7, #4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80058f2:	2105      	movs	r1, #5
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fbd7 	bl	80060a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    sendValButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 80058fa:	1d3b      	adds	r3, r7, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8005902:	2300      	movs	r3, #0
 8005904:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8005908:	2366      	movs	r3, #102	; 0x66
 800590a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800590e:	2399      	movs	r3, #153	; 0x99
 8005910:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8005914:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	461a      	mov	r2, r3
 800591c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	431a      	orrs	r2, r3
 8005924:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005928:	4313      	orrs	r3, r2
 800592a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800592e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005932:	4611      	mov	r1, r2
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe fd75 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 800593a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800593c:	461d      	mov	r5, r3
 800593e:	2300      	movs	r3, #0
 8005940:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
 8005944:	2399      	movs	r3, #153	; 0x99
 8005946:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
 800594a:	23cc      	movs	r3, #204	; 0xcc
 800594c:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
 8005950:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8005954:	041b      	lsls	r3, r3, #16
 8005956:	461a      	mov	r2, r3
 8005958:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	431a      	orrs	r2, r3
 8005960:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8005964:	4313      	orrs	r3, r2
 8005966:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800596a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800596e:	4611      	mov	r1, r2
 8005970:	4618      	mov	r0, r3
 8005972:	f7fe fd57 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005978:	461e      	mov	r6, r3
 800597a:	2300      	movs	r3, #0
 800597c:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
 8005980:	2333      	movs	r3, #51	; 0x33
 8005982:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
 8005986:	2366      	movs	r3, #102	; 0x66
 8005988:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
 800598c:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8005990:	041b      	lsls	r3, r3, #16
 8005992:	461a      	mov	r2, r3
 8005994:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	431a      	orrs	r2, r3
 800599c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80059a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80059aa:	4611      	mov	r1, r2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe fd39 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 80059b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b4:	4698      	mov	r8, r3
 80059b6:	2333      	movs	r3, #51	; 0x33
 80059b8:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
 80059bc:	2366      	movs	r3, #102	; 0x66
 80059be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80059c2:	2399      	movs	r3, #153	; 0x99
 80059c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80059c8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80059cc:	041b      	lsls	r3, r3, #16
 80059ce:	461a      	mov	r2, r3
 80059d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	431a      	orrs	r2, r3
 80059d8:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80059dc:	4313      	orrs	r3, r2
 80059de:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80059e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80059e6:	4611      	mov	r1, r2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fe fd1b 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 80059ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	4643      	mov	r3, r8
 80059f4:	4632      	mov	r2, r6
 80059f6:	4629      	mov	r1, r5
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 fb67 	bl	80060cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    sendValButton.setText(TypedText(T___SINGLEUSE_N3IE));
 80059fe:	1d3b      	adds	r3, r7, #4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8005a06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a0a:	2105      	movs	r1, #5
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff f9af 	bl	8004d70 <_ZN8touchgfx9TypedTextC1Et>
 8005a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a16:	4619      	mov	r1, r3
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 fb74 	bl	8006106 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8005a1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe f8c0 	bl	8003ba8 <_ZN8touchgfx9TypedTextD1Ev>
    sendValButton.setTextPosition(0, 6, 158, 32);
 8005a28:	1d3b      	adds	r3, r7, #4
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8005a30:	2320      	movs	r3, #32
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	239e      	movs	r3, #158	; 0x9e
 8005a36:	2206      	movs	r2, #6
 8005a38:	2100      	movs	r1, #0
 8005a3a:	f000 fb7a 	bl	8006132 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    sendValButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 8005a3e:	1d3b      	adds	r3, r7, #4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8005a46:	23ff      	movs	r3, #255	; 0xff
 8005a48:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
 8005a4c:	23ff      	movs	r3, #255	; 0xff
 8005a4e:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
 8005a52:	23ff      	movs	r3, #255	; 0xff
 8005a54:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
 8005a58:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	431a      	orrs	r2, r3
 8005a68:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005a76:	4611      	mov	r1, r2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fe fcd3 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a80:	461d      	mov	r5, r3
 8005a82:	23ff      	movs	r3, #255	; 0xff
 8005a84:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8005a88:	23ff      	movs	r3, #255	; 0xff
 8005a8a:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 8005a8e:	23ff      	movs	r3, #255	; 0xff
 8005a90:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
 8005a94:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8005a98:	041b      	lsls	r3, r3, #16
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005aae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe fcb5 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005aba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005abc:	461a      	mov	r2, r3
 8005abe:	4629      	mov	r1, r5
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 fb56 	bl	8006172 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    sendValButton.setPosition(16, 68, 158, 32);
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8005ace:	2320      	movs	r3, #32
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	239e      	movs	r3, #158	; 0x9e
 8005ad4:	2244      	movs	r2, #68	; 0x44
 8005ad6:	2110      	movs	r1, #16
 8005ad8:	f7fe fd1b 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>
    txInfoContainer.add(sendValButton);
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8005ae4:	1d3b      	adds	r3, r7, #4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f00d fac4 	bl	801307c <_ZN8touchgfx9Container3addERNS_8DrawableE>

    newValButton.setBoxWithBorderPosition(0, 0, 69, 47);
 8005af4:	1d3b      	adds	r3, r7, #4
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 8005afc:	232f      	movs	r3, #47	; 0x2f
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	2345      	movs	r3, #69	; 0x45
 8005b02:	2200      	movs	r2, #0
 8005b04:	2100      	movs	r1, #0
 8005b06:	f000 faaf 	bl	8006068 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    newValButton.setBorderSize(5);
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8005b12:	2105      	movs	r1, #5
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fac7 	bl	80060a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    newValButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 8005b1a:	1d3b      	adds	r3, r7, #4
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 8005b22:	2300      	movs	r3, #0
 8005b24:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
 8005b28:	2366      	movs	r3, #102	; 0x66
 8005b2a:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
 8005b2e:	2399      	movs	r3, #153	; 0x99
 8005b30:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8005b34:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8005b38:	041b      	lsls	r3, r3, #16
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	431a      	orrs	r2, r3
 8005b44:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005b4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005b52:	4611      	mov	r1, r2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fe fc65 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005b5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b5c:	461d      	mov	r5, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
 8005b64:	2399      	movs	r3, #153	; 0x99
 8005b66:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 8005b6a:	23cc      	movs	r3, #204	; 0xcc
 8005b6c:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
 8005b70:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	461a      	mov	r2, r3
 8005b78:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005b8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe fc47 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b98:	461e      	mov	r6, r3
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005ba0:	2333      	movs	r3, #51	; 0x33
 8005ba2:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8005ba6:	2366      	movs	r3, #102	; 0x66
 8005ba8:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
 8005bac:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005bc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005bca:	4611      	mov	r1, r2
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe fc29 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd4:	4698      	mov	r8, r3
 8005bd6:	2333      	movs	r3, #51	; 0x33
 8005bd8:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 8005bdc:	2366      	movs	r3, #102	; 0x66
 8005bde:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 8005be2:	2399      	movs	r3, #153	; 0x99
 8005be4:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
 8005be8:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8005bec:	041b      	lsls	r3, r3, #16
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005c02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c06:	4611      	mov	r1, r2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe fc0b 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	4643      	mov	r3, r8
 8005c14:	4632      	mov	r2, r6
 8005c16:	4629      	mov	r1, r5
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 fa57 	bl	80060cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    newValButton.setText(TypedText(T___SINGLEUSE_TVNT));
 8005c1e:	1d3b      	adds	r3, r7, #4
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 8005c26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c2a:	2104      	movs	r1, #4
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff f89f 	bl	8004d70 <_ZN8touchgfx9TypedTextC1Et>
 8005c32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c36:	4619      	mov	r1, r3
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 fa64 	bl	8006106 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8005c3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fd ffb0 	bl	8003ba8 <_ZN8touchgfx9TypedTextD1Ev>
    newValButton.setTextPosition(0, 6, 69, 47);
 8005c48:	1d3b      	adds	r3, r7, #4
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 8005c50:	232f      	movs	r3, #47	; 0x2f
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2345      	movs	r3, #69	; 0x45
 8005c56:	2206      	movs	r2, #6
 8005c58:	2100      	movs	r1, #0
 8005c5a:	f000 fa6a 	bl	8006132 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    newValButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 8005c66:	23ff      	movs	r3, #255	; 0xff
 8005c68:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
 8005c6c:	23ff      	movs	r3, #255	; 0xff
 8005c6e:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
 8005c72:	23ff      	movs	r3, #255	; 0xff
 8005c74:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005c78:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 8005c7c:	041b      	lsls	r3, r3, #16
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	431a      	orrs	r2, r3
 8005c88:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005c92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c96:	4611      	mov	r1, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fbc3 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca0:	461d      	mov	r5, r3
 8005ca2:	23ff      	movs	r3, #255	; 0xff
 8005ca4:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
 8005ca8:	23ff      	movs	r3, #255	; 0xff
 8005caa:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005cae:	23ff      	movs	r3, #255	; 0xff
 8005cb0:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 8005cb4:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8005cb8:	041b      	lsls	r3, r3, #16
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005cce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fe fba5 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005cda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 fa44 	bl	8006172 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    newValButton.setPosition(16, 12, 69, 47);
 8005cea:	1d3b      	adds	r3, r7, #4
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 8005cf2:	232f      	movs	r3, #47	; 0x2f
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	2345      	movs	r3, #69	; 0x45
 8005cf8:	220c      	movs	r2, #12
 8005cfa:	2110      	movs	r1, #16
 8005cfc:	f7fe fc09 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>
    txInfoContainer.add(newValButton);
 8005d00:	1d3b      	adds	r3, r7, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8005d08:	1d3b      	adds	r3, r7, #4
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8005d10:	4619      	mov	r1, r3
 8005d12:	4610      	mov	r0, r2
 8005d14:	f00d f9b2 	bl	801307c <_ZN8touchgfx9Container3addERNS_8DrawableE>

    sendValTextArea.setPosition(95, 26, 79, 19);
 8005d18:	1d3b      	adds	r3, r7, #4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f203 5014 	addw	r0, r3, #1300	; 0x514
 8005d20:	2313      	movs	r3, #19
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	234f      	movs	r3, #79	; 0x4f
 8005d26:	221a      	movs	r2, #26
 8005d28:	215f      	movs	r1, #95	; 0x5f
 8005d2a:	f7fe fbf2 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>
    sendValTextArea.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005d2e:	1d3b      	adds	r3, r7, #4
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f203 5414 	addw	r4, r3, #1300	; 0x514
 8005d36:	2300      	movs	r3, #0
 8005d38:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
 8005d42:	2300      	movs	r3, #0
 8005d44:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
 8005d48:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8005d4c:	041b      	lsls	r3, r3, #16
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	431a      	orrs	r2, r3
 8005d58:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005d62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005d66:	4611      	mov	r1, r2
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fe fb5b 	bl	8004424 <_ZN8touchgfx9colortypeC1Em>
 8005d6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 8005d7a:	f107 030c 	add.w	r3, r7, #12
 8005d7e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8005d80:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005d84:	f107 020c 	add.w	r2, r7, #12
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8005d8c:	bf00      	nop
    sendValTextArea.setLinespacing(0);
 8005d8e:	1d3b      	adds	r3, r7, #4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8005d96:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
        linespace = space;
 8005da0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005da4:	f8b7 214a 	ldrh.w	r2, [r7, #330]	; 0x14a
 8005da8:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8005daa:	bf00      	nop
    sendValTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NA10));
 8005dac:	1d3b      	adds	r3, r7, #4
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f203 5414 	addw	r4, r3, #1300	; 0x514
 8005db4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005db8:	2103      	movs	r1, #3
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fe ffd8 	bl	8004d70 <_ZN8touchgfx9TypedTextC1Et>
 8005dc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f00f fb9b 	bl	8015502 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005dcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fd fee9 	bl	8003ba8 <_ZN8touchgfx9TypedTextD1Ev>
    txInfoContainer.add(sendValTextArea);
 8005dd6:	1d3b      	adds	r3, r7, #4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8005dde:	1d3b      	adds	r3, r7, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f00d f947 	bl	801307c <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 8005dee:	1d3b      	adds	r3, r7, #4
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	1d3b      	adds	r3, r7, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3340      	adds	r3, #64	; 0x40
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f7fe fd8a 	bl	8004914 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(background);
 8005e00:	1d3b      	adds	r3, r7, #4
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	1d3b      	adds	r3, r7, #4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	336c      	adds	r3, #108	; 0x6c
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	f7fe fd81 	bl	8004914 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(txButton);
 8005e12:	1d3b      	adds	r3, r7, #4
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	1d3b      	adds	r3, r7, #4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3398      	adds	r3, #152	; 0x98
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	f7fe fd78 	bl	8004914 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rxButton);
 8005e24:	1d3b      	adds	r3, r7, #4
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	1d3b      	adds	r3, r7, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e30:	4619      	mov	r1, r3
 8005e32:	4610      	mov	r0, r2
 8005e34:	f7fe fd6e 	bl	8004914 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollBackgroundBox);
 8005e38:	1d3b      	adds	r3, r7, #4
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	1d3b      	adds	r3, r7, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f7fe fd64 	bl	8004914 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollableContainer);
 8005e4c:	1d3b      	adds	r3, r7, #4
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	1d3b      	adds	r3, r7, #4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f7fe fd5a 	bl	8004914 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(txInfoContainer);
 8005e60:	1d3b      	adds	r3, r7, #4
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	1d3b      	adds	r3, r7, #4
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7fe fd50 	bl	8004914 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e84 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
    if (&src == &txButton)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3398      	adds	r3, #152	; 0x98
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d10d      	bne.n	8005ec8 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x30>
    {
        //showTxInfo
        //When txButton clicked show txInfoContainer
        //Show txInfoContainer
        txInfoContainer.setVisible(true);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fe fc2b 	bl	8004710 <_ZN8touchgfx8Drawable10setVisibleEb>
        txInfoContainer.invalidate();
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f012 f8fd 	bl	80180c0 <_ZNK8touchgfx8Drawable10invalidateEv>
        //When rxButton clicked hide txInfoContainer
        //Hide txInfoContainer
        txInfoContainer.setVisible(false);
        txInfoContainer.invalidate();
    }
}
 8005ec6:	e012      	b.n	8005eee <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x56>
    else if (&src == &rxButton)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d10c      	bne.n	8005eee <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x56>
        txInfoContainer.setVisible(false);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005eda:	2100      	movs	r1, #0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe fc17 	bl	8004710 <_ZN8touchgfx8Drawable10setVisibleEb>
        txInfoContainer.invalidate();
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f012 f8e9 	bl	80180c0 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8005eee:	bf00      	nop
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f012 fb5e 	bl	80185c4 <_ZN8touchgfx6ScreenC1Ev>
 8005f08:	4a05      	ldr	r2, [pc, #20]	; (8005f20 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	08027dc0 	.word	0x08027dc0

08005f24 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	4a05      	ldr	r2, [pc, #20]	; (8005f44 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe fef9 	bl	8004d2c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	08027df4 	.word	0x08027df4

08005f48 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff ffe7 	bl	8005f24 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8005f56:	2134      	movs	r1, #52	; 0x34
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f01f fddc 	bl	8025b16 <_ZdlPvj>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	4a08      	ldr	r2, [pc, #32]	; (8005f94 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3334      	adds	r3, #52	; 0x34
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fa22 	bl	80063c4 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff ffce 	bl	8005f24 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	08027d28 	.word	0x08027d28

08005f98 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff ffe1 	bl	8005f68 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8005fa6:	2178      	movs	r1, #120	; 0x78
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f01f fdb4 	bl	8025b16 <_ZdlPvj>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
 */
template <class T>
class TextButtonStyle : public T
{
public:
    TextButtonStyle()
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
        : T()
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f900 	bl	80061c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8005fc8:	4a0e      	ldr	r2, [pc, #56]	; (8006004 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x4c>)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3378      	adds	r3, #120	; 0x78
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fee2 	bl	8004d9c <_ZN8touchgfx8TextAreaC1Ev>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	33b4      	adds	r3, #180	; 0xb4
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fb ff35 	bl	8001e4c <_ZN8touchgfx9colortypeC1Ev>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	33b8      	adds	r3, #184	; 0xb8
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fb ff30 	bl	8001e4c <_ZN8touchgfx9colortypeC1Ev>
    {
        T::add(text);
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3378      	adds	r3, #120	; 0x78
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	f00d f841 	bl	801307c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	08027c90 	.word	0x08027c90

08006008 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	4a04      	ldr	r2, [pc, #16]	; (8006024 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	08027e8c 	.word	0x08027e8c

08006028 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	4639      	mov	r1, r7
 8006034:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff ffe4 	bl	8006008 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8006040:	4a08      	ldr	r2, [pc, #32]	; (8006064 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	605a      	str	r2, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3308      	adds	r3, #8
 8006050:	463a      	mov	r2, r7
 8006052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006056:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	08027c78 	.word	0x08027c78

08006068 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param  width  The width of this BoxWithBorderButtonStyle.
     * @param  height The height of this BoxWithBorderButtonStyle.
     *
     * @note Changing this does not automatically yield a redraw.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8006068:	b590      	push	{r4, r7, lr}
 800606a:	b087      	sub	sp, #28
 800606c:	af02      	add	r7, sp, #8
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	4608      	mov	r0, r1
 8006072:	4611      	mov	r1, r2
 8006074:	461a      	mov	r2, r3
 8006076:	4603      	mov	r3, r0
 8006078:	817b      	strh	r3, [r7, #10]
 800607a:	460b      	mov	r3, r1
 800607c:	813b      	strh	r3, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006088:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800608c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006090:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8006094:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	4623      	mov	r3, r4
 800609c:	f7fe fa39 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80060a0:	bf00      	nop
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd90      	pop	{r4, r7, pc}

080060a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    /**
     * Sets border size.
     *
     * @param  size The size.
     */
    void setBorderSize(uint8_t size)
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3334      	adds	r3, #52	; 0x34
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	b292      	uxth	r2, r2
 80060bc:	4611      	mov	r1, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fdd8 	bl	8004c74 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3388      	adds	r3, #136	; 0x88
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	4798      	blx	r3
    }
 80060fe:	bf00      	nop
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>:
    /**
     * Sets a text.
     *
     * @param  t A TypedText to process.
     */
    void setText(TypedText t)
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
    {
        text.setTypedText(t);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3378      	adds	r3, #120	; 0x78
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f00f f9f3 	bl	8015502 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        text.setWidthHeight(*this);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3378      	adds	r3, #120	; 0x78
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	4611      	mov	r1, r2
 8006124:	4618      	mov	r0, r3
 8006126:	f7fe fac7 	bl	80046b8 <_ZN8touchgfx8Drawable14setWidthHeightERKS0_>
    }
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width of the text.
     * @param  height The height of the text.
     */
    void setTextPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8006132:	b590      	push	{r4, r7, lr}
 8006134:	b087      	sub	sp, #28
 8006136:	af02      	add	r7, sp, #8
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	4608      	mov	r0, r1
 800613c:	4611      	mov	r1, r2
 800613e:	461a      	mov	r2, r3
 8006140:	4603      	mov	r3, r0
 8006142:	817b      	strh	r3, [r7, #10]
 8006144:	460b      	mov	r3, r1
 8006146:	813b      	strh	r3, [r7, #8]
 8006148:	4613      	mov	r3, r2
 800614a:	80fb      	strh	r3, [r7, #6]
    {
        text.setPosition(x, y, width, height);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8006152:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8006156:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800615a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800615e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	4623      	mov	r3, r4
 8006166:	f7fe f9d4 	bl	8004512 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	bd90      	pop	{r4, r7, pc}

08006172 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>:
     * Sets text colors.
     *
     * @param  newColorReleased The new color released.
     * @param  newColorPressed  The new color pressed.
     */
    void setTextColors(colortype newColorReleased, colortype newColorPressed)
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	607a      	str	r2, [r7, #4]
    {
        colorReleased = newColorReleased;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        colorPressed = newColorPressed;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        handlePressedUpdated();
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3388      	adds	r3, #136	; 0x88
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	4798      	blx	r3
    }
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fc7a 	bl	8004aa8 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 80061b4:	4a03      	ldr	r2, [pc, #12]	; (80061c4 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	08027df4 	.word	0x08027df4

080061c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle()
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4618      	mov	r0, r3
 80061d4:	2334      	movs	r3, #52	; 0x34
 80061d6:	461a      	mov	r2, r3
 80061d8:	2100      	movs	r1, #0
 80061da:	f01f fd57 	bl	8025c8c <memset>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff ffdf 	bl	80061a4 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 80061e6:	4a17      	ldr	r2, [pc, #92]	; (8006244 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x7c>)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3334      	adds	r3, #52	; 0x34
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fe fd15 	bl	8004c20 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3368      	adds	r3, #104	; 0x68
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fb fe26 	bl	8001e4c <_ZN8touchgfx9colortypeC1Ev>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	336c      	adds	r3, #108	; 0x6c
 8006204:	4618      	mov	r0, r3
 8006206:	f7fb fe21 	bl	8001e4c <_ZN8touchgfx9colortypeC1Ev>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3370      	adds	r3, #112	; 0x70
 800620e:	4618      	mov	r0, r3
 8006210:	f7fb fe1c 	bl	8001e4c <_ZN8touchgfx9colortypeC1Ev>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3374      	adds	r3, #116	; 0x74
 8006218:	4618      	mov	r0, r3
 800621a:	f7fb fe17 	bl	8001e4c <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3334      	adds	r3, #52	; 0x34
 8006222:	2200      	movs	r2, #0
 8006224:	2100      	movs	r1, #0
 8006226:	4618      	mov	r0, r3
 8006228:	f7fe f9cc 	bl	80045c4 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3334      	adds	r3, #52	; 0x34
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f00c ff21 	bl	801307c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	08027d28 	.word	0x08027d28

08006248 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
    }
 8006250:	4a04      	ldr	r2, [pc, #16]	; (8006264 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	08027e8c 	.word	0x08027e8c

08006268 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
    }
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff ffe9 	bl	8006248 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8006276:	2104      	movs	r1, #4
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f01f fc4c 	bl	8025b16 <_ZdlPvj>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype down;          ///< The down
    colortype borderUp;      ///< The border up
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 8006288:	b590      	push	{r4, r7, lr}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4618      	mov	r0, r3
 800629a:	f7fe fc3b 	bl	8004b14 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	336c      	adds	r3, #108	; 0x6c
 80062a8:	e001      	b.n	80062ae <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3368      	adds	r3, #104	; 0x68
 80062ae:	6819      	ldr	r1, [r3, #0]
 80062b0:	4620      	mov	r0, r4
 80062b2:	f7fe fbb9 	bl	8004a28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fe fc28 	bl	8004b14 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3374      	adds	r3, #116	; 0x74
 80062ce:	e001      	b.n	80062d4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3370      	adds	r3, #112	; 0x70
 80062d4:	6819      	ldr	r1, [r3, #0]
 80062d6:	4620      	mov	r0, r4
 80062d8:	f7fe fcbe 	bl	8004c58 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fc67 	bl	8004bb2 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd90      	pop	{r4, r7, pc}

080062ec <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    TextArea text;           ///< The text
    colortype colorReleased; ///< The color released
    colortype colorPressed;  ///< The color pressed

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe fc09 	bl	8004b14 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	33b8      	adds	r3, #184	; 0xb8
 800630c:	e001      	b.n	8006312 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	33b4      	adds	r3, #180	; 0xb4
 8006312:	60fc      	str	r4, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800631e:	bf00      	nop
        T::handlePressedUpdated();
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff ffb0 	bl	8006288 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 8006328:	bf00      	nop
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	bd90      	pop	{r4, r7, pc}

08006330 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	4a05      	ldr	r2, [pc, #20]	; (8006350 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff ff81 	bl	8006248 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	08027c78 	.word	0x08027c78

08006354 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff ffe7 	bl	8006330 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8006362:	2110      	movs	r1, #16
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f01f fbd6 	bl	8025b16 <_ZdlPvj>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
class TextButtonStyle : public T
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	4a08      	ldr	r2, [pc, #32]	; (80063a0 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev+0x2c>)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3378      	adds	r3, #120	; 0x78
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe fd52 	bl	8004e30 <_ZN8touchgfx8TextAreaD1Ev>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff fdea 	bl	8005f68 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	08027c90 	.word	0x08027c90

080063a4 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff ffe1 	bl	8006374 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 80063b2:	21bc      	movs	r1, #188	; 0xbc
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f01f fbae 	bl	8025b16 <_ZdlPvj>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	4a05      	ldr	r2, [pc, #20]	; (80063e4 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe fc01 	bl	8004bdc <_ZN8touchgfx3BoxD1Ev>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4618      	mov	r0, r3
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	080290a0 	.word	0x080290a0

080063e8 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff ffe7 	bl	80063c4 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80063f6:	2134      	movs	r1, #52	; 0x34
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f01f fb8c 	bl	8025b16 <_ZdlPvj>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <_ZN8touchgfx19ScrollableContainerD1Ev>:
 * @see Container
 *
 * @note The ScrollableContainer will consume all DragEvents in the area covered by the
 *       container.
 */
class ScrollableContainer : public Container
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	4a0a      	ldr	r2, [pc, #40]	; (800643c <_ZN8touchgfx19ScrollableContainerD1Ev+0x34>)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3364      	adds	r3, #100	; 0x64
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe fbde 	bl	8004bdc <_ZN8touchgfx3BoxD1Ev>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3338      	adds	r3, #56	; 0x38
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe fbd9 	bl	8004bdc <_ZN8touchgfx3BoxD1Ev>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4618      	mov	r0, r3
 800642e:	f7fe fb19 	bl	8004a64 <_ZN8touchgfx9ContainerD1Ev>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	080284bc 	.word	0x080284bc

08006440 <_ZN8touchgfx19ScrollableContainerD0Ev>:
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff ffdd 	bl	8006408 <_ZN8touchgfx19ScrollableContainerD1Ev>
 800644e:	21bc      	movs	r1, #188	; 0xbc
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f01f fb60 	bl	8025b16 <_ZdlPvj>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	4a05      	ldr	r2, [pc, #20]	; (8006480 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe fcdd 	bl	8004e30 <_ZN8touchgfx8TextAreaD1Ev>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	08028ff8 	.word	0x08028ff8

08006484 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff ffe7 	bl	8006460 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006492:	2140      	movs	r1, #64	; 0x40
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f01f fb3e 	bl	8025b16 <_ZdlPvj>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	68d2      	ldr	r2, [r2, #12]
 80064b6:	1052      	asrs	r2, r2, #1
 80064b8:	1898      	adds	r0, r3, r2
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	e00a      	b.n	80064e2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	68d2      	ldr	r2, [r2, #12]
 80064d4:	1052      	asrs	r2, r2, #1
 80064d6:	4413      	add	r3, r2
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6892      	ldr	r2, [r2, #8]
 80064de:	4413      	add	r3, r2
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	4798      	blx	r3
    }
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d010      	beq.n	8006520 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d107      	bne.n	8006516 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8006516:	2300      	movs	r3, #0
 8006518:	2b01      	cmp	r3, #1
 800651a:	d001      	beq.n	8006520 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8006520:	2300      	movs	r3, #0
    }
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 800652e:	b590      	push	{r4, r7, lr}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
    {
        text.setAlpha(T::getAlpha());
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe faf5 	bl	8004b2e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8006544:	4603      	mov	r3, r0
 8006546:	4619      	mov	r1, r3
 8006548:	4620      	mov	r0, r4
 800654a:	f7fe fc61 	bl	8004e10 <_ZN8touchgfx8TextArea8setAlphaEh>
        T::handleAlphaUpdated();
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 f804 	bl	800655e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>
    }
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	bd90      	pop	{r4, r7, pc}

0800655e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 800655e:	b590      	push	{r4, r7, lr}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe fadd 	bl	8004b2e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8006574:	4603      	mov	r3, r0
 8006576:	4619      	mov	r1, r3
 8006578:	4620      	mov	r0, r4
 800657a:	f7fe fa63 	bl	8004a44 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe fb20 	bl	8004bc6 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	bd90      	pop	{r4, r7, pc}
	...

08006590 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <__tcf_0+0xc>)
 8006596:	f7fd fae5 	bl	8003b64 <_ZN8touchgfx13GeneratedFontD1Ev>
 800659a:	bd80      	pop	{r7, pc}
 800659c:	24001598 	.word	0x24001598

080065a0 <_Z23getFont_verdana_10_4bppv>:
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08c      	sub	sp, #48	; 0x30
 80065a4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80065a6:	4b1f      	ldr	r3, [pc, #124]	; (8006624 <_Z23getFont_verdana_10_4bppv+0x84>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	f3bf 8f5b 	dmb	ish
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bf0c      	ite	eq
 80065b8:	2301      	moveq	r3, #1
 80065ba:	2300      	movne	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d02c      	beq.n	800661c <_Z23getFont_verdana_10_4bppv+0x7c>
 80065c2:	4818      	ldr	r0, [pc, #96]	; (8006624 <_Z23getFont_verdana_10_4bppv+0x84>)
 80065c4:	f01f faa9 	bl	8025b1a <__cxa_guard_acquire>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bf14      	ite	ne
 80065ce:	2301      	movne	r3, #1
 80065d0:	2300      	moveq	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d021      	beq.n	800661c <_Z23getFont_verdana_10_4bppv+0x7c>
 80065d8:	2300      	movs	r3, #0
 80065da:	930a      	str	r3, [sp, #40]	; 0x28
 80065dc:	2300      	movs	r3, #0
 80065de:	9309      	str	r3, [sp, #36]	; 0x24
 80065e0:	2300      	movs	r3, #0
 80065e2:	9308      	str	r3, [sp, #32]
 80065e4:	233f      	movs	r3, #63	; 0x3f
 80065e6:	9307      	str	r3, [sp, #28]
 80065e8:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <_Z23getFont_verdana_10_4bppv+0x88>)
 80065ea:	9306      	str	r3, [sp, #24]
 80065ec:	4b0f      	ldr	r3, [pc, #60]	; (800662c <_Z23getFont_verdana_10_4bppv+0x8c>)
 80065ee:	9305      	str	r3, [sp, #20]
 80065f0:	2300      	movs	r3, #0
 80065f2:	9304      	str	r3, [sp, #16]
 80065f4:	2300      	movs	r3, #0
 80065f6:	9303      	str	r3, [sp, #12]
 80065f8:	2301      	movs	r3, #1
 80065fa:	9302      	str	r3, [sp, #8]
 80065fc:	2304      	movs	r3, #4
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	2300      	movs	r3, #0
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	230a      	movs	r3, #10
 8006606:	2201      	movs	r2, #1
 8006608:	4909      	ldr	r1, [pc, #36]	; (8006630 <_Z23getFont_verdana_10_4bppv+0x90>)
 800660a:	480a      	ldr	r0, [pc, #40]	; (8006634 <_Z23getFont_verdana_10_4bppv+0x94>)
 800660c:	f7fd fe70 	bl	80042f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006610:	4804      	ldr	r0, [pc, #16]	; (8006624 <_Z23getFont_verdana_10_4bppv+0x84>)
 8006612:	f01f fa8e 	bl	8025b32 <__cxa_guard_release>
 8006616:	4808      	ldr	r0, [pc, #32]	; (8006638 <_Z23getFont_verdana_10_4bppv+0x98>)
 8006618:	f01f faca 	bl	8025bb0 <atexit>
    return verdana_10_4bpp;
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800661e:	4618      	mov	r0, r3
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	240015c0 	.word	0x240015c0
 8006628:	0802a9b0 	.word	0x0802a9b0
 800662c:	0802a9f4 	.word	0x0802a9f4
 8006630:	9000085c 	.word	0x9000085c
 8006634:	24001598 	.word	0x24001598
 8006638:	08006591 	.word	0x08006591

0800663c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_14_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_14_4bpp();

touchgfx::GeneratedFont& getFont_verdana_14_4bpp()
{
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 41, 14, 3, 4, 1, 1, 0, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
 8006640:	4801      	ldr	r0, [pc, #4]	; (8006648 <__tcf_0+0xc>)
 8006642:	f7fd fa8f 	bl	8003b64 <_ZN8touchgfx13GeneratedFontD1Ev>
 8006646:	bd80      	pop	{r7, pc}
 8006648:	240015c4 	.word	0x240015c4

0800664c <_Z23getFont_verdana_14_4bppv>:
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08c      	sub	sp, #48	; 0x30
 8006650:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 41, 14, 3, 4, 1, 1, 0, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 8006652:	4b1f      	ldr	r3, [pc, #124]	; (80066d0 <_Z23getFont_verdana_14_4bppv+0x84>)
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	f3bf 8f5b 	dmb	ish
 800665a:	b2db      	uxtb	r3, r3
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	bf0c      	ite	eq
 8006664:	2301      	moveq	r3, #1
 8006666:	2300      	movne	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d02c      	beq.n	80066c8 <_Z23getFont_verdana_14_4bppv+0x7c>
 800666e:	4818      	ldr	r0, [pc, #96]	; (80066d0 <_Z23getFont_verdana_14_4bppv+0x84>)
 8006670:	f01f fa53 	bl	8025b1a <__cxa_guard_acquire>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	bf14      	ite	ne
 800667a:	2301      	movne	r3, #1
 800667c:	2300      	moveq	r3, #0
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d021      	beq.n	80066c8 <_Z23getFont_verdana_14_4bppv+0x7c>
 8006684:	2300      	movs	r3, #0
 8006686:	930a      	str	r3, [sp, #40]	; 0x28
 8006688:	2300      	movs	r3, #0
 800668a:	9309      	str	r3, [sp, #36]	; 0x24
 800668c:	2300      	movs	r3, #0
 800668e:	9308      	str	r3, [sp, #32]
 8006690:	233f      	movs	r3, #63	; 0x3f
 8006692:	9307      	str	r3, [sp, #28]
 8006694:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <_Z23getFont_verdana_14_4bppv+0x88>)
 8006696:	9306      	str	r3, [sp, #24]
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <_Z23getFont_verdana_14_4bppv+0x8c>)
 800669a:	9305      	str	r3, [sp, #20]
 800669c:	2300      	movs	r3, #0
 800669e:	9304      	str	r3, [sp, #16]
 80066a0:	2301      	movs	r3, #1
 80066a2:	9303      	str	r3, [sp, #12]
 80066a4:	2301      	movs	r3, #1
 80066a6:	9302      	str	r3, [sp, #8]
 80066a8:	2304      	movs	r3, #4
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	2303      	movs	r3, #3
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	230e      	movs	r3, #14
 80066b2:	2229      	movs	r2, #41	; 0x29
 80066b4:	4909      	ldr	r1, [pc, #36]	; (80066dc <_Z23getFont_verdana_14_4bppv+0x90>)
 80066b6:	480a      	ldr	r0, [pc, #40]	; (80066e0 <_Z23getFont_verdana_14_4bppv+0x94>)
 80066b8:	f7fd fe1a 	bl	80042f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80066bc:	4804      	ldr	r0, [pc, #16]	; (80066d0 <_Z23getFont_verdana_14_4bppv+0x84>)
 80066be:	f01f fa38 	bl	8025b32 <__cxa_guard_release>
 80066c2:	4808      	ldr	r0, [pc, #32]	; (80066e4 <_Z23getFont_verdana_14_4bppv+0x98>)
 80066c4:	f01f fa74 	bl	8025bb0 <atexit>
    return verdana_14_4bpp;
 80066c8:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <_Z23getFont_verdana_14_4bppv+0x94>)
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	240015ec 	.word	0x240015ec
 80066d4:	0802a9b4 	.word	0x0802a9b4
 80066d8:	0802a9f8 	.word	0x0802a9f8
 80066dc:	9000086c 	.word	0x9000086c
 80066e0:	240015c4 	.word	0x240015c4
 80066e4:	0800663d 	.word	0x0800663d

080066e8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 4, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__tcf_0+0xc>)
 80066ee:	f7fd fa39 	bl	8003b64 <_ZN8touchgfx13GeneratedFontD1Ev>
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	240015f0 	.word	0x240015f0

080066f8 <_Z23getFont_verdana_20_4bppv>:
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08c      	sub	sp, #48	; 0x30
 80066fc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 4, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80066fe:	4b1f      	ldr	r3, [pc, #124]	; (800677c <_Z23getFont_verdana_20_4bppv+0x84>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	f3bf 8f5b 	dmb	ish
 8006706:	b2db      	uxtb	r3, r3
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	bf0c      	ite	eq
 8006710:	2301      	moveq	r3, #1
 8006712:	2300      	movne	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d02c      	beq.n	8006774 <_Z23getFont_verdana_20_4bppv+0x7c>
 800671a:	4818      	ldr	r0, [pc, #96]	; (800677c <_Z23getFont_verdana_20_4bppv+0x84>)
 800671c:	f01f f9fd 	bl	8025b1a <__cxa_guard_acquire>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	bf14      	ite	ne
 8006726:	2301      	movne	r3, #1
 8006728:	2300      	moveq	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d021      	beq.n	8006774 <_Z23getFont_verdana_20_4bppv+0x7c>
 8006730:	2300      	movs	r3, #0
 8006732:	930a      	str	r3, [sp, #40]	; 0x28
 8006734:	2300      	movs	r3, #0
 8006736:	9309      	str	r3, [sp, #36]	; 0x24
 8006738:	2300      	movs	r3, #0
 800673a:	9308      	str	r3, [sp, #32]
 800673c:	233f      	movs	r3, #63	; 0x3f
 800673e:	9307      	str	r3, [sp, #28]
 8006740:	4b0f      	ldr	r3, [pc, #60]	; (8006780 <_Z23getFont_verdana_20_4bppv+0x88>)
 8006742:	9306      	str	r3, [sp, #24]
 8006744:	4b0f      	ldr	r3, [pc, #60]	; (8006784 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8006746:	9305      	str	r3, [sp, #20]
 8006748:	2301      	movs	r3, #1
 800674a:	9304      	str	r3, [sp, #16]
 800674c:	2300      	movs	r3, #0
 800674e:	9303      	str	r3, [sp, #12]
 8006750:	2301      	movs	r3, #1
 8006752:	9302      	str	r3, [sp, #8]
 8006754:	2304      	movs	r3, #4
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	2300      	movs	r3, #0
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	2314      	movs	r3, #20
 800675e:	2204      	movs	r2, #4
 8006760:	4909      	ldr	r1, [pc, #36]	; (8006788 <_Z23getFont_verdana_20_4bppv+0x90>)
 8006762:	480a      	ldr	r0, [pc, #40]	; (800678c <_Z23getFont_verdana_20_4bppv+0x94>)
 8006764:	f7fd fdc4 	bl	80042f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006768:	4804      	ldr	r0, [pc, #16]	; (800677c <_Z23getFont_verdana_20_4bppv+0x84>)
 800676a:	f01f f9e2 	bl	8025b32 <__cxa_guard_release>
 800676e:	4808      	ldr	r0, [pc, #32]	; (8006790 <_Z23getFont_verdana_20_4bppv+0x98>)
 8006770:	f01f fa1e 	bl	8025bb0 <atexit>
    return verdana_20_4bpp;
 8006774:	4b05      	ldr	r3, [pc, #20]	; (800678c <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8006776:	4618      	mov	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	24001618 	.word	0x24001618
 8006780:	0802a9ec 	.word	0x0802a9ec
 8006784:	0802a9fc 	.word	0x0802a9fc
 8006788:	90000aac 	.word	0x90000aac
 800678c:	240015f0 	.word	0x240015f0
 8006790:	080066e9 	.word	0x080066e9

08006794 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
 8006798:	4801      	ldr	r0, [pc, #4]	; (80067a0 <__tcf_0+0xc>)
 800679a:	f7fd f9e3 	bl	8003b64 <_ZN8touchgfx13GeneratedFontD1Ev>
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	2400161c 	.word	0x2400161c

080067a4 <_Z23getFont_verdana_40_4bppv>:
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08c      	sub	sp, #48	; 0x30
 80067a8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80067aa:	4b1f      	ldr	r3, [pc, #124]	; (8006828 <_Z23getFont_verdana_40_4bppv+0x84>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f3bf 8f5b 	dmb	ish
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	bf0c      	ite	eq
 80067bc:	2301      	moveq	r3, #1
 80067be:	2300      	movne	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d02c      	beq.n	8006820 <_Z23getFont_verdana_40_4bppv+0x7c>
 80067c6:	4818      	ldr	r0, [pc, #96]	; (8006828 <_Z23getFont_verdana_40_4bppv+0x84>)
 80067c8:	f01f f9a7 	bl	8025b1a <__cxa_guard_acquire>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bf14      	ite	ne
 80067d2:	2301      	movne	r3, #1
 80067d4:	2300      	moveq	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d021      	beq.n	8006820 <_Z23getFont_verdana_40_4bppv+0x7c>
 80067dc:	2300      	movs	r3, #0
 80067de:	930a      	str	r3, [sp, #40]	; 0x28
 80067e0:	2300      	movs	r3, #0
 80067e2:	9309      	str	r3, [sp, #36]	; 0x24
 80067e4:	2300      	movs	r3, #0
 80067e6:	9308      	str	r3, [sp, #32]
 80067e8:	233f      	movs	r3, #63	; 0x3f
 80067ea:	9307      	str	r3, [sp, #28]
 80067ec:	4b0f      	ldr	r3, [pc, #60]	; (800682c <_Z23getFont_verdana_40_4bppv+0x88>)
 80067ee:	9306      	str	r3, [sp, #24]
 80067f0:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80067f2:	9305      	str	r3, [sp, #20]
 80067f4:	2300      	movs	r3, #0
 80067f6:	9304      	str	r3, [sp, #16]
 80067f8:	2300      	movs	r3, #0
 80067fa:	9303      	str	r3, [sp, #12]
 80067fc:	2301      	movs	r3, #1
 80067fe:	9302      	str	r3, [sp, #8]
 8006800:	2304      	movs	r3, #4
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	2300      	movs	r3, #0
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	2328      	movs	r3, #40	; 0x28
 800680a:	2201      	movs	r2, #1
 800680c:	4909      	ldr	r1, [pc, #36]	; (8006834 <_Z23getFont_verdana_40_4bppv+0x90>)
 800680e:	480a      	ldr	r0, [pc, #40]	; (8006838 <_Z23getFont_verdana_40_4bppv+0x94>)
 8006810:	f7fd fd6e 	bl	80042f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006814:	4804      	ldr	r0, [pc, #16]	; (8006828 <_Z23getFont_verdana_40_4bppv+0x84>)
 8006816:	f01f f98c 	bl	8025b32 <__cxa_guard_release>
 800681a:	4808      	ldr	r0, [pc, #32]	; (800683c <_Z23getFont_verdana_40_4bppv+0x98>)
 800681c:	f01f f9c8 	bl	8025bb0 <atexit>
    return verdana_40_4bpp;
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8006822:	4618      	mov	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	24001644 	.word	0x24001644
 800682c:	0802a9f0 	.word	0x0802a9f0
 8006830:	0802aa00 	.word	0x0802aa00
 8006834:	90000ae4 	.word	0x90000ae4
 8006838:	2400161c 	.word	0x2400161c
 800683c:	08006795 	.word	0x08006795

08006840 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	460b      	mov	r3, r1
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800684e:	2300      	movs	r3, #0
    }
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8006864:	2300      	movs	r3, #0
    }
 8006866:	4618      	mov	r0, r3
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800687a:	2300      	movs	r3, #0
    }
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	4613      	mov	r3, r2
 8006894:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8006896:	4a07      	ldr	r2, [pc, #28]	; (80068b4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6013      	str	r3, [r2, #0]
        fonts = f;
 800689c:	4a06      	ldr	r2, [pc, #24]	; (80068b8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80068a2:	4a06      	ldr	r2, [pc, #24]	; (80068bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	8013      	strh	r3, [r2, #0]
    }
 80068a8:	bf00      	nop
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	2400af3c 	.word	0x2400af3c
 80068b8:	2400af44 	.word	0x2400af44
 80068bc:	2400af40 	.word	0x2400af40

080068c0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80068c0:	b40e      	push	{r1, r2, r3}
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80068ca:	f107 0320 	add.w	r3, r7, #32
 80068ce:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	2100      	movs	r1, #0
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f011 fad0 	bl	8017e7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80068dc:	4603      	mov	r3, r0
 80068de:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80068e0:	89fb      	ldrh	r3, [r7, #14]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068ec:	b003      	add	sp, #12
 80068ee:	4770      	bx	lr

080068f0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80068f0:	b40c      	push	{r2, r3}
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	460b      	mov	r3, r1
 80068fc:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80068fe:	f107 031c 	add.w	r3, r7, #28
 8006902:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8006904:	78f9      	ldrb	r1, [r7, #3]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f011 fab6 	bl	8017e7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8006910:	4603      	mov	r3, r0
 8006912:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8006914:	89fb      	ldrh	r3, [r7, #14]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006920:	b002      	add	sp, #8
 8006922:	4770      	bx	lr

08006924 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	; 0x28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006934:	2b00      	cmp	r3, #0
 8006936:	d016      	beq.n	8006966 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3322      	adds	r3, #34	; 0x22
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	8adb      	ldrh	r3, [r3, #22]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d105      	bne.n	8006952 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8006946:	4b43      	ldr	r3, [pc, #268]	; (8006a54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8006948:	4a43      	ldr	r2, [pc, #268]	; (8006a58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800694a:	21c0      	movs	r1, #192	; 0xc0
 800694c:	4843      	ldr	r0, [pc, #268]	; (8006a5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800694e:	f01f f911 	bl	8025b74 <__assert_func>
            return buffer[pos];
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	8a9b      	ldrh	r3, [r3, #20]
 8006956:	461a      	mov	r2, r3
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8006966:	2300      	movs	r3, #0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d06a      	beq.n	8006a42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f012 fd77 	bl	8019460 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3322      	adds	r3, #34	; 0x22
 8006976:	623b      	str	r3, [r7, #32]
 8006978:	2301      	movs	r3, #1
 800697a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	8adb      	ldrh	r3, [r3, #22]
 8006980:	8bfa      	ldrh	r2, [r7, #30]
 8006982:	429a      	cmp	r2, r3
 8006984:	d305      	bcc.n	8006992 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8006986:	4b36      	ldr	r3, [pc, #216]	; (8006a60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8006988:	4a36      	ldr	r2, [pc, #216]	; (8006a64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800698a:	21c5      	movs	r1, #197	; 0xc5
 800698c:	4833      	ldr	r0, [pc, #204]	; (8006a5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800698e:	f01f f8f1 	bl	8025b74 <__assert_func>
            const uint16_t index = pos + offset;
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	8a9a      	ldrh	r2, [r3, #20]
 8006996:	8bfb      	ldrh	r3, [r7, #30]
 8006998:	4413      	add	r3, r2
 800699a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800699c:	8bbb      	ldrh	r3, [r7, #28]
 800699e:	2b09      	cmp	r3, #9
 80069a0:	d801      	bhi.n	80069a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80069a2:	8bbb      	ldrh	r3, [r7, #28]
 80069a4:	e001      	b.n	80069aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80069a6:	8bbb      	ldrh	r3, [r7, #28]
 80069a8:	3b0a      	subs	r3, #10
 80069aa:	6a3a      	ldr	r2, [r7, #32]
 80069ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b0:	f640 123f 	movw	r2, #2367	; 0x93f
 80069b4:	4293      	cmp	r3, r2
 80069b6:	bf0c      	ite	eq
 80069b8:	2301      	moveq	r3, #1
 80069ba:	2300      	movne	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d03f      	beq.n	8006a42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3322      	adds	r3, #34	; 0x22
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	3222      	adds	r2, #34	; 0x22
 80069ca:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	8ad2      	ldrh	r2, [r2, #22]
 80069d0:	2a00      	cmp	r2, #0
 80069d2:	d105      	bne.n	80069e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80069d4:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80069d6:	4a20      	ldr	r2, [pc, #128]	; (8006a58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80069d8:	21c0      	movs	r1, #192	; 0xc0
 80069da:	4820      	ldr	r0, [pc, #128]	; (8006a5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80069dc:	f01f f8ca 	bl	8025b74 <__assert_func>
            return buffer[pos];
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	8a92      	ldrh	r2, [r2, #20]
 80069e4:	4611      	mov	r1, r2
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	4613      	mov	r3, r2
 80069f0:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	8adb      	ldrh	r3, [r3, #22]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d806      	bhi.n	8006a08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80069fa:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80069fc:	4a1b      	ldr	r2, [pc, #108]	; (8006a6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80069fe:	f240 110d 	movw	r1, #269	; 0x10d
 8006a02:	4816      	ldr	r0, [pc, #88]	; (8006a5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006a04:	f01f f8b6 	bl	8025b74 <__assert_func>
            const uint16_t index = pos + 1;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	8a9b      	ldrh	r3, [r3, #20]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8006a10:	89bb      	ldrh	r3, [r7, #12]
 8006a12:	2b09      	cmp	r3, #9
 8006a14:	d801      	bhi.n	8006a1a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8006a16:	89bb      	ldrh	r3, [r7, #12]
 8006a18:	e000      	b.n	8006a1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	89f9      	ldrh	r1, [r7, #14]
 8006a20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8006a24:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3322      	adds	r3, #34	; 0x22
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	f640 133f 	movw	r3, #2367	; 0x93f
 8006a30:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	8a9b      	ldrh	r3, [r3, #20]
 8006a36:	4619      	mov	r1, r3
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	8afa      	ldrh	r2, [r7, #22]
 8006a3c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8006a40:	bf00      	nop
        }
    }
    return getNextChar();
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f012 fbf0 	bl	8019228 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8006a48:	4603      	mov	r3, r0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3728      	adds	r7, #40	; 0x28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	080273c0 	.word	0x080273c0
 8006a58:	080273cc 	.word	0x080273cc
 8006a5c:	08027478 	.word	0x08027478
 8006a60:	080274d0 	.word	0x080274d0
 8006a64:	080274e0 	.word	0x080274e0
 8006a68:	080275b4 	.word	0x080275b4
 8006a6c:	080275c0 	.word	0x080275c0

08006a70 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f012 fb8d 	bl	8019198 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b088      	sub	sp, #32
 8006a8a:	af02      	add	r7, sp, #8
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	1d38      	adds	r0, r7, #4
 8006a90:	e880 0006 	stmia.w	r0, {r1, r2}
 8006a94:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8006a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a9a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8006a9c:	1d39      	adds	r1, r7, #4
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f00f ff04 	bl	80168b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8006ab0:	bf00      	nop
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8006ab8:	b590      	push	{r4, r7, lr}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d127      	bne.n	8006b1c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	4a1e      	ldr	r2, [pc, #120]	; (8006b48 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8006ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d016      	beq.n	8006b06 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	4a1b      	ldr	r2, [pc, #108]	; (8006b48 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8006adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	4413      	add	r3, r2
 8006aea:	4a18      	ldr	r2, [pc, #96]	; (8006b4c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8006aec:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4413      	add	r3, r2
 8006af6:	4a16      	ldr	r2, [pc, #88]	; (8006b50 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8006af8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	e00a      	b.n	8006b1c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8006b06:	4b11      	ldr	r3, [pc, #68]	; (8006b4c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8006b08:	4a12      	ldr	r2, [pc, #72]	; (8006b54 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8006b0a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8006b0c:	4a12      	ldr	r2, [pc, #72]	; (8006b58 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8006b0e:	4b10      	ldr	r3, [pc, #64]	; (8006b50 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8006b10:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8006b12:	88fb      	ldrh	r3, [r7, #6]
 8006b14:	4a11      	ldr	r2, [pc, #68]	; (8006b5c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8006b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b1a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00d      	beq.n	8006b3e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8006b22:	4a0f      	ldr	r2, [pc, #60]	; (8006b60 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8006b24:	88fb      	ldrh	r3, [r7, #6]
 8006b26:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8006b28:	f000 f83e 	bl	8006ba8 <_ZN17TypedTextDatabase8getFontsEv>
 8006b2c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8006b2e:	f000 f833 	bl	8006b98 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8006b32:	4603      	mov	r3, r0
 8006b34:	461a      	mov	r2, r3
 8006b36:	4621      	mov	r1, r4
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7ff fea5 	bl	8006888 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd90      	pop	{r4, r7, pc}
 8006b46:	bf00      	nop
 8006b48:	24001648 	.word	0x24001648
 8006b4c:	24001650 	.word	0x24001650
 8006b50:	24001654 	.word	0x24001654
 8006b54:	90000b0c 	.word	0x90000b0c
 8006b58:	90000af4 	.word	0x90000af4
 8006b5c:	90001004 	.word	0x90001004
 8006b60:	2400164c 	.word	0x2400164c

08006b64 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8006b70:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8006b76:	6819      	ldr	r1, [r3, #0]
 8006b78:	887b      	ldrh	r3, [r7, #2]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	4413      	add	r3, r2
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	24001650 	.word	0x24001650
 8006b94:	24001654 	.word	0x24001654

08006b98 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8006b98:	b480      	push	{r7}
 8006b9a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8006b9c:	2306      	movs	r3, #6
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8006bac:	4b02      	ldr	r3, [pc, #8]	; (8006bb8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	24001658 	.word	0x24001658

08006bbc <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_14_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d118      	bne.n	8006bfe <_Z41__static_initialization_and_destruction_0ii+0x42>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d113      	bne.n	8006bfe <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 8006bd6:	f7ff fd8f 	bl	80066f8 <_Z23getFont_verdana_20_4bppv>
 8006bda:	4603      	mov	r3, r0
};
 8006bdc:	4a0a      	ldr	r2, [pc, #40]	; (8006c08 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006bde:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8006be0:	f7ff fde0 	bl	80067a4 <_Z23getFont_verdana_40_4bppv>
 8006be4:	4603      	mov	r3, r0
};
 8006be6:	4a08      	ldr	r2, [pc, #32]	; (8006c08 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006be8:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 8006bea:	f7ff fcd9 	bl	80065a0 <_Z23getFont_verdana_10_4bppv>
 8006bee:	4603      	mov	r3, r0
};
 8006bf0:	4a05      	ldr	r2, [pc, #20]	; (8006c08 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006bf2:	6093      	str	r3, [r2, #8]
    &(getFont_verdana_14_4bpp())
 8006bf4:	f7ff fd2a 	bl	800664c <_Z23getFont_verdana_14_4bppv>
 8006bf8:	4603      	mov	r3, r0
};
 8006bfa:	4a03      	ldr	r2, [pc, #12]	; (8006c08 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006bfc:	60d3      	str	r3, [r2, #12]
} // namespace TypedTextDatabase
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	24001658 	.word	0x24001658

08006c0c <_GLOBAL__sub_I_touchgfx_fonts>:
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006c14:	2001      	movs	r0, #1
 8006c16:	f7ff ffd1 	bl	8006bbc <_Z41__static_initialization_and_destruction_0ii>
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fd f8be 	bl	8003db0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8006c34:	4a03      	ldr	r2, [pc, #12]	; (8006c44 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	601a      	str	r2, [r3, #0]
{

}
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	08027954 	.word	0x08027954

08006c48 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
{

}
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <_ZN5Model4tickEv>:

void Model::tick()
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
    {
    }
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
    {
    }
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
    {
 8006ca8:	4a04      	ldr	r2, [pc, #16]	; (8006cbc <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	601a      	str	r2, [r3, #0]
    }
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	0802802c 	.word	0x0802802c

08006cc0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
    }
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff ffe9 	bl	8006ca0 <_ZN8touchgfx9PresenterD1Ev>
 8006cce:	2104      	movs	r1, #4
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f01e ff20 	bl	8025b16 <_ZdlPvj>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
    {
 8006ce8:	4a04      	ldr	r2, [pc, #16]	; (8006cfc <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	601a      	str	r2, [r3, #0]
    }
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	0802802c 	.word	0x0802802c

08006d00 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	4a06      	ldr	r2, [pc, #24]	; (8006d24 <_ZN13ModelListenerC1Ev+0x24>)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	605a      	str	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	0802801c 	.word	0x0802801c

08006d28 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	4a04      	ldr	r2, [pc, #16]	; (8006d44 <_ZN13ModelListenerD1Ev+0x1c>)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	0802801c 	.word	0x0802801c

08006d48 <_ZN13ModelListenerD0Ev>:
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff ffe9 	bl	8006d28 <_ZN13ModelListenerD1Ev>
 8006d56:	2108      	movs	r1, #8
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f01e fedc 	bl	8025b16 <_ZdlPvj>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	4a09      	ldr	r2, [pc, #36]	; (8006d98 <_ZN16Screen1PresenterD1Ev+0x30>)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	4a09      	ldr	r2, [pc, #36]	; (8006d9c <_ZN16Screen1PresenterD1Ev+0x34>)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	605a      	str	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff ffd1 	bl	8006d28 <_ZN13ModelListenerD1Ev>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff ff89 	bl	8006ca0 <_ZN8touchgfx9PresenterD1Ev>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	08027ff4 	.word	0x08027ff4
 8006d9c:	0802800c 	.word	0x0802800c

08006da0 <_ZThn4_N16Screen1PresenterD1Ev>:
 8006da0:	f1a0 0004 	sub.w	r0, r0, #4
 8006da4:	e7e0      	b.n	8006d68 <_ZN16Screen1PresenterD1Ev>
 8006da6:	bf00      	nop

08006da8 <_ZN16Screen1PresenterD0Ev>:
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff ffd9 	bl	8006d68 <_ZN16Screen1PresenterD1Ev>
 8006db6:	2110      	movs	r1, #16
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f01e feac 	bl	8025b16 <_ZdlPvj>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <_ZThn4_N16Screen1PresenterD0Ev>:
 8006dc8:	f1a0 0004 	sub.w	r0, r0, #4
 8006dcc:	e7ec      	b.n	8006da8 <_ZN16Screen1PresenterD0Ev>
	...

08006dd0 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
    : view(v)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff ff7f 	bl	8006ce0 <_ZN8touchgfx9PresenterC1Ev>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff ff8a 	bl	8006d00 <_ZN13ModelListenerC1Ev>
 8006dec:	4a06      	ldr	r2, [pc, #24]	; (8006e08 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	4a06      	ldr	r2, [pc, #24]	; (8006e0c <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	605a      	str	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	60da      	str	r2, [r3, #12]
{

}
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	08027ff4 	.word	0x08027ff4
 8006e0c:	0802800c 	.word	0x0802800c

08006e10 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]

}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]

}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	4a05      	ldr	r2, [pc, #20]	; (8006e58 <_ZN11Screen1ViewD1Ev+0x20>)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe f851 	bl	8004ef0 <_ZN15Screen1ViewBaseD1Ev>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	08028044 	.word	0x08028044

08006e5c <_ZN11Screen1ViewD0Ev>:
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff ffe7 	bl	8006e38 <_ZN11Screen1ViewD1Ev>
 8006e6a:	f240 5164 	movw	r1, #1380	; 0x564
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f01e fe51 	bl	8025b16 <_ZdlPvj>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe f8a0 	bl	8004fd0 <_ZN15Screen1ViewBaseC1Ev>
 8006e90:	4a03      	ldr	r2, [pc, #12]	; (8006ea0 <_ZN11Screen1ViewC1Ev+0x20>)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	601a      	str	r2, [r3, #0]
{

}
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	08028044 	.word	0x08028044

08006ea4 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe ffe8 	bl	8005e84 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8006eb4:	bf00      	nop
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fd fd04 	bl	80048d4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8006ecc:	bf00      	nop
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <__NVIC_SetPriority>:
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	6039      	str	r1, [r7, #0]
 8006ede:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	db0a      	blt.n	8006efe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	490c      	ldr	r1, [pc, #48]	; (8006f20 <__NVIC_SetPriority+0x4c>)
 8006eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ef2:	0112      	lsls	r2, r2, #4
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006efc:	e00a      	b.n	8006f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	4908      	ldr	r1, [pc, #32]	; (8006f24 <__NVIC_SetPriority+0x50>)
 8006f04:	88fb      	ldrh	r3, [r7, #6]
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	3b04      	subs	r3, #4
 8006f0c:	0112      	lsls	r2, r2, #4
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	440b      	add	r3, r1
 8006f12:	761a      	strb	r2, [r3, #24]
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	e000e100 	.word	0xe000e100
 8006f24:	e000ed00 	.word	0xe000ed00

08006f28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006f2c:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <SysTick_Handler+0x1c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006f30:	f002 fea6 	bl	8009c80 <xTaskGetSchedulerState>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d001      	beq.n	8006f3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006f3a:	f000 ffe5 	bl	8007f08 <xPortSysTickHandler>
  }
}
 8006f3e:	bf00      	nop
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	e000e010 	.word	0xe000e010

08006f48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	f06f 0004 	mvn.w	r0, #4
 8006f52:	f7ff ffbf 	bl	8006ed4 <__NVIC_SetPriority>
#endif
}
 8006f56:	bf00      	nop
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f62:	f3ef 8305 	mrs	r3, IPSR
 8006f66:	603b      	str	r3, [r7, #0]
  return(result);
 8006f68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006f6e:	f06f 0305 	mvn.w	r3, #5
 8006f72:	607b      	str	r3, [r7, #4]
 8006f74:	e00c      	b.n	8006f90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f76:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <osKernelInitialize+0x44>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d105      	bne.n	8006f8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f7e:	4b08      	ldr	r3, [pc, #32]	; (8006fa0 <osKernelInitialize+0x44>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	607b      	str	r3, [r7, #4]
 8006f88:	e002      	b.n	8006f90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f90:	687b      	ldr	r3, [r7, #4]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	24001668 	.word	0x24001668

08006fa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006faa:	f3ef 8305 	mrs	r3, IPSR
 8006fae:	603b      	str	r3, [r7, #0]
  return(result);
 8006fb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8006fb6:	f06f 0305 	mvn.w	r3, #5
 8006fba:	607b      	str	r3, [r7, #4]
 8006fbc:	e010      	b.n	8006fe0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006fbe:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <osKernelStart+0x48>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d109      	bne.n	8006fda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006fc6:	f7ff ffbf 	bl	8006f48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006fca:	4b08      	ldr	r3, [pc, #32]	; (8006fec <osKernelStart+0x48>)
 8006fcc:	2202      	movs	r2, #2
 8006fce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006fd0:	f002 fa0e 	bl	80093f0 <vTaskStartScheduler>
      stat = osOK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	607b      	str	r3, [r7, #4]
 8006fd8:	e002      	b.n	8006fe0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006fda:	f04f 33ff 	mov.w	r3, #4294967295
 8006fde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006fe0:	687b      	ldr	r3, [r7, #4]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	24001668 	.word	0x24001668

08006ff0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08e      	sub	sp, #56	; 0x38
 8006ff4:	af04      	add	r7, sp, #16
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007000:	f3ef 8305 	mrs	r3, IPSR
 8007004:	617b      	str	r3, [r7, #20]
  return(result);
 8007006:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007008:	2b00      	cmp	r3, #0
 800700a:	d17e      	bne.n	800710a <osThreadNew+0x11a>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d07b      	beq.n	800710a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007012:	2380      	movs	r3, #128	; 0x80
 8007014:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007016:	2318      	movs	r3, #24
 8007018:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800701e:	f04f 33ff 	mov.w	r3, #4294967295
 8007022:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d045      	beq.n	80070b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <osThreadNew+0x48>
        name = attr->name;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d008      	beq.n	800705e <osThreadNew+0x6e>
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	2b38      	cmp	r3, #56	; 0x38
 8007050:	d805      	bhi.n	800705e <osThreadNew+0x6e>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <osThreadNew+0x72>
        return (NULL);
 800705e:	2300      	movs	r3, #0
 8007060:	e054      	b.n	800710c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	089b      	lsrs	r3, r3, #2
 8007070:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00e      	beq.n	8007098 <osThreadNew+0xa8>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	2b5b      	cmp	r3, #91	; 0x5b
 8007080:	d90a      	bls.n	8007098 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007086:	2b00      	cmp	r3, #0
 8007088:	d006      	beq.n	8007098 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <osThreadNew+0xa8>
        mem = 1;
 8007092:	2301      	movs	r3, #1
 8007094:	61bb      	str	r3, [r7, #24]
 8007096:	e010      	b.n	80070ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10c      	bne.n	80070ba <osThreadNew+0xca>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d108      	bne.n	80070ba <osThreadNew+0xca>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <osThreadNew+0xca>
          mem = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	e001      	b.n	80070ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d110      	bne.n	80070e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070c8:	9202      	str	r2, [sp, #8]
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	6a3a      	ldr	r2, [r7, #32]
 80070d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f001 ffb4 	bl	8009044 <xTaskCreateStatic>
 80070dc:	4603      	mov	r3, r0
 80070de:	613b      	str	r3, [r7, #16]
 80070e0:	e013      	b.n	800710a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d110      	bne.n	800710a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	f107 0310 	add.w	r3, r7, #16
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f001 ffff 	bl	80090fe <xTaskCreate>
 8007100:	4603      	mov	r3, r0
 8007102:	2b01      	cmp	r3, #1
 8007104:	d001      	beq.n	800710a <osThreadNew+0x11a>
            hTask = NULL;
 8007106:	2300      	movs	r3, #0
 8007108:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800710a:	693b      	ldr	r3, [r7, #16]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3728      	adds	r7, #40	; 0x28
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800711c:	f3ef 8305 	mrs	r3, IPSR
 8007120:	60bb      	str	r3, [r7, #8]
  return(result);
 8007122:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007124:	2b00      	cmp	r3, #0
 8007126:	d003      	beq.n	8007130 <osDelay+0x1c>
    stat = osErrorISR;
 8007128:	f06f 0305 	mvn.w	r3, #5
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	e007      	b.n	8007140 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <osDelay+0x2c>
      vTaskDelay(ticks);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f002 f924 	bl	8009388 <vTaskDelay>
    }
  }

  return (stat);
 8007140:	68fb      	ldr	r3, [r7, #12]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800714a:	b580      	push	{r7, lr}
 800714c:	b08a      	sub	sp, #40	; 0x28
 800714e:	af02      	add	r7, sp, #8
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800715a:	f3ef 8305 	mrs	r3, IPSR
 800715e:	613b      	str	r3, [r7, #16]
  return(result);
 8007160:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007162:	2b00      	cmp	r3, #0
 8007164:	d175      	bne.n	8007252 <osSemaphoreNew+0x108>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d072      	beq.n	8007252 <osSemaphoreNew+0x108>
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	429a      	cmp	r2, r3
 8007172:	d86e      	bhi.n	8007252 <osSemaphoreNew+0x108>
    mem = -1;
 8007174:	f04f 33ff 	mov.w	r3, #4294967295
 8007178:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d015      	beq.n	80071ac <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d006      	beq.n	8007196 <osSemaphoreNew+0x4c>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	2b4f      	cmp	r3, #79	; 0x4f
 800718e:	d902      	bls.n	8007196 <osSemaphoreNew+0x4c>
        mem = 1;
 8007190:	2301      	movs	r3, #1
 8007192:	61bb      	str	r3, [r7, #24]
 8007194:	e00c      	b.n	80071b0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d108      	bne.n	80071b0 <osSemaphoreNew+0x66>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <osSemaphoreNew+0x66>
          mem = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	61bb      	str	r3, [r7, #24]
 80071aa:	e001      	b.n	80071b0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b6:	d04c      	beq.n	8007252 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d128      	bne.n	8007210 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d10a      	bne.n	80071da <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	2203      	movs	r2, #3
 80071ca:	9200      	str	r2, [sp, #0]
 80071cc:	2200      	movs	r2, #0
 80071ce:	2100      	movs	r1, #0
 80071d0:	2001      	movs	r0, #1
 80071d2:	f000 ff91 	bl	80080f8 <xQueueGenericCreateStatic>
 80071d6:	61f8      	str	r0, [r7, #28]
 80071d8:	e005      	b.n	80071e6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80071da:	2203      	movs	r2, #3
 80071dc:	2100      	movs	r1, #0
 80071de:	2001      	movs	r0, #1
 80071e0:	f001 f802 	bl	80081e8 <xQueueGenericCreate>
 80071e4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d022      	beq.n	8007232 <osSemaphoreNew+0xe8>
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d01f      	beq.n	8007232 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80071f2:	2300      	movs	r3, #0
 80071f4:	2200      	movs	r2, #0
 80071f6:	2100      	movs	r1, #0
 80071f8:	69f8      	ldr	r0, [r7, #28]
 80071fa:	f001 f8bd 	bl	8008378 <xQueueGenericSend>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b01      	cmp	r3, #1
 8007202:	d016      	beq.n	8007232 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007204:	69f8      	ldr	r0, [r7, #28]
 8007206:	f001 fd49 	bl	8008c9c <vQueueDelete>
            hSemaphore = NULL;
 800720a:	2300      	movs	r3, #0
 800720c:	61fb      	str	r3, [r7, #28]
 800720e:	e010      	b.n	8007232 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d108      	bne.n	8007228 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	461a      	mov	r2, r3
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f001 f83f 	bl	80082a2 <xQueueCreateCountingSemaphoreStatic>
 8007224:	61f8      	str	r0, [r7, #28]
 8007226:	e004      	b.n	8007232 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f001 f870 	bl	8008310 <xQueueCreateCountingSemaphore>
 8007230:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00c      	beq.n	8007252 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <osSemaphoreNew+0xfc>
          name = attr->name;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	e001      	b.n	800724a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007246:	2300      	movs	r3, #0
 8007248:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800724a:	6979      	ldr	r1, [r7, #20]
 800724c:	69f8      	ldr	r0, [r7, #28]
 800724e:	f001 fe71 	bl	8008f34 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007252:	69fb      	ldr	r3, [r7, #28]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3720      	adds	r7, #32
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800726a:	2300      	movs	r3, #0
 800726c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d103      	bne.n	800727c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007274:	f06f 0303 	mvn.w	r3, #3
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	e039      	b.n	80072f0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800727c:	f3ef 8305 	mrs	r3, IPSR
 8007280:	60fb      	str	r3, [r7, #12]
  return(result);
 8007282:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007284:	2b00      	cmp	r3, #0
 8007286:	d022      	beq.n	80072ce <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800728e:	f06f 0303 	mvn.w	r3, #3
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	e02c      	b.n	80072f0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007296:	2300      	movs	r3, #0
 8007298:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800729a:	f107 0308 	add.w	r3, r7, #8
 800729e:	461a      	mov	r2, r3
 80072a0:	2100      	movs	r1, #0
 80072a2:	6938      	ldr	r0, [r7, #16]
 80072a4:	f001 fc7a 	bl	8008b9c <xQueueReceiveFromISR>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d003      	beq.n	80072b6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80072ae:	f06f 0302 	mvn.w	r3, #2
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	e01c      	b.n	80072f0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d019      	beq.n	80072f0 <osSemaphoreAcquire+0x94>
 80072bc:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <osSemaphoreAcquire+0xa0>)
 80072be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	e010      	b.n	80072f0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6938      	ldr	r0, [r7, #16]
 80072d2:	f001 fb57 	bl	8008984 <xQueueSemaphoreTake>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d009      	beq.n	80072f0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80072e2:	f06f 0301 	mvn.w	r3, #1
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	e002      	b.n	80072f0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80072ea:	f06f 0302 	mvn.w	r3, #2
 80072ee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80072f0:	697b      	ldr	r3, [r7, #20]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	e000ed04 	.word	0xe000ed04

08007300 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800730c:	2300      	movs	r3, #0
 800730e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d103      	bne.n	800731e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007316:	f06f 0303 	mvn.w	r3, #3
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e02c      	b.n	8007378 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800731e:	f3ef 8305 	mrs	r3, IPSR
 8007322:	60fb      	str	r3, [r7, #12]
  return(result);
 8007324:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007326:	2b00      	cmp	r3, #0
 8007328:	d01a      	beq.n	8007360 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800732a:	2300      	movs	r3, #0
 800732c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800732e:	f107 0308 	add.w	r3, r7, #8
 8007332:	4619      	mov	r1, r3
 8007334:	6938      	ldr	r0, [r7, #16]
 8007336:	f001 f9b8 	bl	80086aa <xQueueGiveFromISR>
 800733a:	4603      	mov	r3, r0
 800733c:	2b01      	cmp	r3, #1
 800733e:	d003      	beq.n	8007348 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007340:	f06f 0302 	mvn.w	r3, #2
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	e017      	b.n	8007378 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d014      	beq.n	8007378 <osSemaphoreRelease+0x78>
 800734e:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <osSemaphoreRelease+0x84>)
 8007350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	e00b      	b.n	8007378 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007360:	2300      	movs	r3, #0
 8007362:	2200      	movs	r2, #0
 8007364:	2100      	movs	r1, #0
 8007366:	6938      	ldr	r0, [r7, #16]
 8007368:	f001 f806 	bl	8008378 <xQueueGenericSend>
 800736c:	4603      	mov	r3, r0
 800736e:	2b01      	cmp	r3, #1
 8007370:	d002      	beq.n	8007378 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007372:	f06f 0302 	mvn.w	r3, #2
 8007376:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007378:	697b      	ldr	r3, [r7, #20]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007398:	f3ef 8305 	mrs	r3, IPSR
 800739c:	613b      	str	r3, [r7, #16]
  return(result);
 800739e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d15f      	bne.n	8007464 <osMessageQueueNew+0xdc>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d05c      	beq.n	8007464 <osMessageQueueNew+0xdc>
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d059      	beq.n	8007464 <osMessageQueueNew+0xdc>
    mem = -1;
 80073b0:	f04f 33ff 	mov.w	r3, #4294967295
 80073b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d029      	beq.n	8007410 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d012      	beq.n	80073ea <osMessageQueueNew+0x62>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	2b4f      	cmp	r3, #79	; 0x4f
 80073ca:	d90e      	bls.n	80073ea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695a      	ldr	r2, [r3, #20]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d302      	bcc.n	80073ea <osMessageQueueNew+0x62>
        mem = 1;
 80073e4:	2301      	movs	r3, #1
 80073e6:	61bb      	str	r3, [r7, #24]
 80073e8:	e014      	b.n	8007414 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d110      	bne.n	8007414 <osMessageQueueNew+0x8c>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10c      	bne.n	8007414 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d108      	bne.n	8007414 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d104      	bne.n	8007414 <osMessageQueueNew+0x8c>
          mem = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	61bb      	str	r3, [r7, #24]
 800740e:	e001      	b.n	8007414 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d10b      	bne.n	8007432 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	2100      	movs	r1, #0
 8007424:	9100      	str	r1, [sp, #0]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fe65 	bl	80080f8 <xQueueGenericCreateStatic>
 800742e:	61f8      	str	r0, [r7, #28]
 8007430:	e008      	b.n	8007444 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d105      	bne.n	8007444 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007438:	2200      	movs	r2, #0
 800743a:	68b9      	ldr	r1, [r7, #8]
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 fed3 	bl	80081e8 <xQueueGenericCreate>
 8007442:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00c      	beq.n	8007464 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	e001      	b.n	800745c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007458:	2300      	movs	r3, #0
 800745a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800745c:	6979      	ldr	r1, [r7, #20]
 800745e:	69f8      	ldr	r0, [r7, #28]
 8007460:	f001 fd68 	bl	8008f34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007464:	69fb      	ldr	r3, [r7, #28]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007470:	b580      	push	{r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	4613      	mov	r3, r2
 800747e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007484:	2300      	movs	r3, #0
 8007486:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007488:	f3ef 8305 	mrs	r3, IPSR
 800748c:	617b      	str	r3, [r7, #20]
  return(result);
 800748e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007490:	2b00      	cmp	r3, #0
 8007492:	d028      	beq.n	80074e6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <osMessageQueuePut+0x36>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <osMessageQueuePut+0x36>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80074a6:	f06f 0303 	mvn.w	r3, #3
 80074aa:	61fb      	str	r3, [r7, #28]
 80074ac:	e038      	b.n	8007520 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80074b2:	f107 0210 	add.w	r2, r7, #16
 80074b6:	2300      	movs	r3, #0
 80074b8:	68b9      	ldr	r1, [r7, #8]
 80074ba:	69b8      	ldr	r0, [r7, #24]
 80074bc:	f001 f85a 	bl	8008574 <xQueueGenericSendFromISR>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d003      	beq.n	80074ce <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80074c6:	f06f 0302 	mvn.w	r3, #2
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	e028      	b.n	8007520 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d025      	beq.n	8007520 <osMessageQueuePut+0xb0>
 80074d4:	4b15      	ldr	r3, [pc, #84]	; (800752c <osMessageQueuePut+0xbc>)
 80074d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	e01c      	b.n	8007520 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <osMessageQueuePut+0x82>
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d103      	bne.n	80074fa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80074f2:	f06f 0303 	mvn.w	r3, #3
 80074f6:	61fb      	str	r3, [r7, #28]
 80074f8:	e012      	b.n	8007520 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80074fa:	2300      	movs	r3, #0
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	69b8      	ldr	r0, [r7, #24]
 8007502:	f000 ff39 	bl	8008378 <xQueueGenericSend>
 8007506:	4603      	mov	r3, r0
 8007508:	2b01      	cmp	r3, #1
 800750a:	d009      	beq.n	8007520 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007512:	f06f 0301 	mvn.w	r3, #1
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	e002      	b.n	8007520 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800751a:	f06f 0302 	mvn.w	r3, #2
 800751e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007520:	69fb      	ldr	r3, [r7, #28]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3720      	adds	r7, #32
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007542:	2300      	movs	r3, #0
 8007544:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007546:	f3ef 8305 	mrs	r3, IPSR
 800754a:	617b      	str	r3, [r7, #20]
  return(result);
 800754c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800754e:	2b00      	cmp	r3, #0
 8007550:	d028      	beq.n	80075a4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <osMessageQueueGet+0x34>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <osMessageQueueGet+0x34>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007564:	f06f 0303 	mvn.w	r3, #3
 8007568:	61fb      	str	r3, [r7, #28]
 800756a:	e037      	b.n	80075dc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800756c:	2300      	movs	r3, #0
 800756e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007570:	f107 0310 	add.w	r3, r7, #16
 8007574:	461a      	mov	r2, r3
 8007576:	68b9      	ldr	r1, [r7, #8]
 8007578:	69b8      	ldr	r0, [r7, #24]
 800757a:	f001 fb0f 	bl	8008b9c <xQueueReceiveFromISR>
 800757e:	4603      	mov	r3, r0
 8007580:	2b01      	cmp	r3, #1
 8007582:	d003      	beq.n	800758c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007584:	f06f 0302 	mvn.w	r3, #2
 8007588:	61fb      	str	r3, [r7, #28]
 800758a:	e027      	b.n	80075dc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d024      	beq.n	80075dc <osMessageQueueGet+0xac>
 8007592:	4b15      	ldr	r3, [pc, #84]	; (80075e8 <osMessageQueueGet+0xb8>)
 8007594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	e01b      	b.n	80075dc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <osMessageQueueGet+0x80>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d103      	bne.n	80075b8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80075b0:	f06f 0303 	mvn.w	r3, #3
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	e011      	b.n	80075dc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	68b9      	ldr	r1, [r7, #8]
 80075bc:	69b8      	ldr	r0, [r7, #24]
 80075be:	f001 f901 	bl	80087c4 <xQueueReceive>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d009      	beq.n	80075dc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80075ce:	f06f 0301 	mvn.w	r3, #1
 80075d2:	61fb      	str	r3, [r7, #28]
 80075d4:	e002      	b.n	80075dc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80075d6:	f06f 0302 	mvn.w	r3, #2
 80075da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80075dc:	69fb      	ldr	r3, [r7, #28]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3720      	adds	r7, #32
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4a07      	ldr	r2, [pc, #28]	; (8007618 <vApplicationGetIdleTaskMemory+0x2c>)
 80075fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	4a06      	ldr	r2, [pc, #24]	; (800761c <vApplicationGetIdleTaskMemory+0x30>)
 8007602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2280      	movs	r2, #128	; 0x80
 8007608:	601a      	str	r2, [r3, #0]
}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	2400166c 	.word	0x2400166c
 800761c:	240016c8 	.word	0x240016c8

08007620 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4a07      	ldr	r2, [pc, #28]	; (800764c <vApplicationGetTimerTaskMemory+0x2c>)
 8007630:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	4a06      	ldr	r2, [pc, #24]	; (8007650 <vApplicationGetTimerTaskMemory+0x30>)
 8007636:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800763e:	601a      	str	r2, [r3, #0]
}
 8007640:	bf00      	nop
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	240018c8 	.word	0x240018c8
 8007650:	24001924 	.word	0x24001924

08007654 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08a      	sub	sp, #40	; 0x28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800765c:	2300      	movs	r3, #0
 800765e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007660:	f001 ff2c 	bl	80094bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007664:	4b5b      	ldr	r3, [pc, #364]	; (80077d4 <pvPortMalloc+0x180>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800766c:	f000 f920 	bl	80078b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007670:	4b59      	ldr	r3, [pc, #356]	; (80077d8 <pvPortMalloc+0x184>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4013      	ands	r3, r2
 8007678:	2b00      	cmp	r3, #0
 800767a:	f040 8093 	bne.w	80077a4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01d      	beq.n	80076c0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007684:	2208      	movs	r2, #8
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4413      	add	r3, r2
 800768a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	2b00      	cmp	r3, #0
 8007694:	d014      	beq.n	80076c0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f023 0307 	bic.w	r3, r3, #7
 800769c:	3308      	adds	r3, #8
 800769e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f003 0307 	and.w	r3, r3, #7
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076bc:	bf00      	nop
 80076be:	e7fe      	b.n	80076be <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d06e      	beq.n	80077a4 <pvPortMalloc+0x150>
 80076c6:	4b45      	ldr	r3, [pc, #276]	; (80077dc <pvPortMalloc+0x188>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d869      	bhi.n	80077a4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076d0:	4b43      	ldr	r3, [pc, #268]	; (80077e0 <pvPortMalloc+0x18c>)
 80076d2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076d4:	4b42      	ldr	r3, [pc, #264]	; (80077e0 <pvPortMalloc+0x18c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076da:	e004      	b.n	80076e6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d903      	bls.n	80076f8 <pvPortMalloc+0xa4>
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1f1      	bne.n	80076dc <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076f8:	4b36      	ldr	r3, [pc, #216]	; (80077d4 <pvPortMalloc+0x180>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fe:	429a      	cmp	r2, r3
 8007700:	d050      	beq.n	80077a4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2208      	movs	r2, #8
 8007708:	4413      	add	r3, r2
 800770a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	1ad2      	subs	r2, r2, r3
 800771c:	2308      	movs	r3, #8
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	429a      	cmp	r2, r3
 8007722:	d91f      	bls.n	8007764 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4413      	add	r3, r2
 800772a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <pvPortMalloc+0xf8>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	613b      	str	r3, [r7, #16]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	1ad2      	subs	r2, r2, r3
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800775e:	69b8      	ldr	r0, [r7, #24]
 8007760:	f000 f908 	bl	8007974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007764:	4b1d      	ldr	r3, [pc, #116]	; (80077dc <pvPortMalloc+0x188>)
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	4a1b      	ldr	r2, [pc, #108]	; (80077dc <pvPortMalloc+0x188>)
 8007770:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007772:	4b1a      	ldr	r3, [pc, #104]	; (80077dc <pvPortMalloc+0x188>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <pvPortMalloc+0x190>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d203      	bcs.n	8007786 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800777e:	4b17      	ldr	r3, [pc, #92]	; (80077dc <pvPortMalloc+0x188>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a18      	ldr	r2, [pc, #96]	; (80077e4 <pvPortMalloc+0x190>)
 8007784:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	4b13      	ldr	r3, [pc, #76]	; (80077d8 <pvPortMalloc+0x184>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	431a      	orrs	r2, r3
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800779a:	4b13      	ldr	r3, [pc, #76]	; (80077e8 <pvPortMalloc+0x194>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3301      	adds	r3, #1
 80077a0:	4a11      	ldr	r2, [pc, #68]	; (80077e8 <pvPortMalloc+0x194>)
 80077a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077a4:	f001 fe98 	bl	80094d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <pvPortMalloc+0x174>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	60fb      	str	r3, [r7, #12]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <pvPortMalloc+0x172>
	return pvReturn;
 80077c8:	69fb      	ldr	r3, [r7, #28]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3728      	adds	r7, #40	; 0x28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	24009d2c 	.word	0x24009d2c
 80077d8:	24009d40 	.word	0x24009d40
 80077dc:	24009d30 	.word	0x24009d30
 80077e0:	24009d24 	.word	0x24009d24
 80077e4:	24009d34 	.word	0x24009d34
 80077e8:	24009d38 	.word	0x24009d38

080077ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d04d      	beq.n	800789a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077fe:	2308      	movs	r3, #8
 8007800:	425b      	negs	r3, r3
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4413      	add	r3, r2
 8007806:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	4b24      	ldr	r3, [pc, #144]	; (80078a4 <vPortFree+0xb8>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4013      	ands	r3, r2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10a      	bne.n	8007830 <vPortFree+0x44>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	60fb      	str	r3, [r7, #12]
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00a      	beq.n	800784e <vPortFree+0x62>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	60bb      	str	r3, [r7, #8]
}
 800784a:	bf00      	nop
 800784c:	e7fe      	b.n	800784c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	4b14      	ldr	r3, [pc, #80]	; (80078a4 <vPortFree+0xb8>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4013      	ands	r3, r2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01e      	beq.n	800789a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d11a      	bne.n	800789a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	4b0e      	ldr	r3, [pc, #56]	; (80078a4 <vPortFree+0xb8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	43db      	mvns	r3, r3
 800786e:	401a      	ands	r2, r3
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007874:	f001 fe22 	bl	80094bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <vPortFree+0xbc>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4413      	add	r3, r2
 8007882:	4a09      	ldr	r2, [pc, #36]	; (80078a8 <vPortFree+0xbc>)
 8007884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007886:	6938      	ldr	r0, [r7, #16]
 8007888:	f000 f874 	bl	8007974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800788c:	4b07      	ldr	r3, [pc, #28]	; (80078ac <vPortFree+0xc0>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	4a06      	ldr	r2, [pc, #24]	; (80078ac <vPortFree+0xc0>)
 8007894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007896:	f001 fe1f 	bl	80094d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800789a:	bf00      	nop
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	24009d40 	.word	0x24009d40
 80078a8:	24009d30 	.word	0x24009d30
 80078ac:	24009d3c 	.word	0x24009d3c

080078b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078bc:	4b27      	ldr	r3, [pc, #156]	; (800795c <prvHeapInit+0xac>)
 80078be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00c      	beq.n	80078e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3307      	adds	r3, #7
 80078ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0307 	bic.w	r3, r3, #7
 80078d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	4a1f      	ldr	r2, [pc, #124]	; (800795c <prvHeapInit+0xac>)
 80078e0:	4413      	add	r3, r2
 80078e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078e8:	4a1d      	ldr	r2, [pc, #116]	; (8007960 <prvHeapInit+0xb0>)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078ee:	4b1c      	ldr	r3, [pc, #112]	; (8007960 <prvHeapInit+0xb0>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	4413      	add	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078fc:	2208      	movs	r2, #8
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1a9b      	subs	r3, r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0307 	bic.w	r3, r3, #7
 800790a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4a15      	ldr	r2, [pc, #84]	; (8007964 <prvHeapInit+0xb4>)
 8007910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <prvHeapInit+0xb4>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2200      	movs	r2, #0
 8007918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800791a:	4b12      	ldr	r3, [pc, #72]	; (8007964 <prvHeapInit+0xb4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	1ad2      	subs	r2, r2, r3
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007930:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <prvHeapInit+0xb4>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	4a0a      	ldr	r2, [pc, #40]	; (8007968 <prvHeapInit+0xb8>)
 800793e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4a09      	ldr	r2, [pc, #36]	; (800796c <prvHeapInit+0xbc>)
 8007946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007948:	4b09      	ldr	r3, [pc, #36]	; (8007970 <prvHeapInit+0xc0>)
 800794a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800794e:	601a      	str	r2, [r3, #0]
}
 8007950:	bf00      	nop
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	24001d24 	.word	0x24001d24
 8007960:	24009d24 	.word	0x24009d24
 8007964:	24009d2c 	.word	0x24009d2c
 8007968:	24009d34 	.word	0x24009d34
 800796c:	24009d30 	.word	0x24009d30
 8007970:	24009d40 	.word	0x24009d40

08007974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800797c:	4b28      	ldr	r3, [pc, #160]	; (8007a20 <prvInsertBlockIntoFreeList+0xac>)
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	e002      	b.n	8007988 <prvInsertBlockIntoFreeList+0x14>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	429a      	cmp	r2, r3
 8007990:	d8f7      	bhi.n	8007982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4413      	add	r3, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d108      	bne.n	80079b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	441a      	add	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	441a      	add	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d118      	bne.n	80079fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4b15      	ldr	r3, [pc, #84]	; (8007a24 <prvInsertBlockIntoFreeList+0xb0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d00d      	beq.n	80079f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	441a      	add	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	e008      	b.n	8007a04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079f2:	4b0c      	ldr	r3, [pc, #48]	; (8007a24 <prvInsertBlockIntoFreeList+0xb0>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	e003      	b.n	8007a04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d002      	beq.n	8007a12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a12:	bf00      	nop
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	24009d24 	.word	0x24009d24
 8007a24:	24009d2c 	.word	0x24009d2c

08007a28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f103 0208 	add.w	r2, r3, #8
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f103 0208 	add.w	r2, r3, #8
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f103 0208 	add.w	r2, r3, #8
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a82:	b480      	push	{r7}
 8007a84:	b085      	sub	sp, #20
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	601a      	str	r2, [r3, #0]
}
 8007abe:	bf00      	nop
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae0:	d103      	bne.n	8007aea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	e00c      	b.n	8007b04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3308      	adds	r3, #8
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	e002      	b.n	8007af8 <vListInsert+0x2e>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d2f6      	bcs.n	8007af2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	601a      	str	r2, [r3, #0]
}
 8007b30:	bf00      	nop
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	6892      	ldr	r2, [r2, #8]
 8007b52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6852      	ldr	r2, [r2, #4]
 8007b5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d103      	bne.n	8007b70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	1e5a      	subs	r2, r3, #1
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3b04      	subs	r3, #4
 8007ba0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3b04      	subs	r3, #4
 8007bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	f023 0201 	bic.w	r2, r3, #1
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3b04      	subs	r3, #4
 8007bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bc0:	4a0c      	ldr	r2, [pc, #48]	; (8007bf4 <pxPortInitialiseStack+0x64>)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3b14      	subs	r3, #20
 8007bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3b04      	subs	r3, #4
 8007bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f06f 0202 	mvn.w	r2, #2
 8007bde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3b20      	subs	r3, #32
 8007be4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007be6:	68fb      	ldr	r3, [r7, #12]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	08007bf9 	.word	0x08007bf9

08007bf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c02:	4b12      	ldr	r3, [pc, #72]	; (8007c4c <prvTaskExitError+0x54>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0a:	d00a      	beq.n	8007c22 <prvTaskExitError+0x2a>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	60fb      	str	r3, [r7, #12]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <prvTaskExitError+0x28>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	60bb      	str	r3, [r7, #8]
}
 8007c34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c36:	bf00      	nop
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0fc      	beq.n	8007c38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c3e:	bf00      	nop
 8007c40:	bf00      	nop
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	2400000c 	.word	0x2400000c

08007c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c50:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <pxCurrentTCBConst2>)
 8007c52:	6819      	ldr	r1, [r3, #0]
 8007c54:	6808      	ldr	r0, [r1, #0]
 8007c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5a:	f380 8809 	msr	PSP, r0
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f04f 0000 	mov.w	r0, #0
 8007c66:	f380 8811 	msr	BASEPRI, r0
 8007c6a:	4770      	bx	lr
 8007c6c:	f3af 8000 	nop.w

08007c70 <pxCurrentTCBConst2>:
 8007c70:	24009d4c 	.word	0x24009d4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop

08007c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c78:	4808      	ldr	r0, [pc, #32]	; (8007c9c <prvPortStartFirstTask+0x24>)
 8007c7a:	6800      	ldr	r0, [r0, #0]
 8007c7c:	6800      	ldr	r0, [r0, #0]
 8007c7e:	f380 8808 	msr	MSP, r0
 8007c82:	f04f 0000 	mov.w	r0, #0
 8007c86:	f380 8814 	msr	CONTROL, r0
 8007c8a:	b662      	cpsie	i
 8007c8c:	b661      	cpsie	f
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	df00      	svc	0
 8007c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c9a:	bf00      	nop
 8007c9c:	e000ed08 	.word	0xe000ed08

08007ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ca6:	4b46      	ldr	r3, [pc, #280]	; (8007dc0 <xPortStartScheduler+0x120>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a46      	ldr	r2, [pc, #280]	; (8007dc4 <xPortStartScheduler+0x124>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d10a      	bne.n	8007cc6 <xPortStartScheduler+0x26>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	613b      	str	r3, [r7, #16]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cc6:	4b3e      	ldr	r3, [pc, #248]	; (8007dc0 <xPortStartScheduler+0x120>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a3f      	ldr	r2, [pc, #252]	; (8007dc8 <xPortStartScheduler+0x128>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d10a      	bne.n	8007ce6 <xPortStartScheduler+0x46>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	60fb      	str	r3, [r7, #12]
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ce6:	4b39      	ldr	r3, [pc, #228]	; (8007dcc <xPortStartScheduler+0x12c>)
 8007ce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	22ff      	movs	r2, #255	; 0xff
 8007cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	4b31      	ldr	r3, [pc, #196]	; (8007dd0 <xPortStartScheduler+0x130>)
 8007d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d0e:	4b31      	ldr	r3, [pc, #196]	; (8007dd4 <xPortStartScheduler+0x134>)
 8007d10:	2207      	movs	r2, #7
 8007d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d14:	e009      	b.n	8007d2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007d16:	4b2f      	ldr	r3, [pc, #188]	; (8007dd4 <xPortStartScheduler+0x134>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	4a2d      	ldr	r2, [pc, #180]	; (8007dd4 <xPortStartScheduler+0x134>)
 8007d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d32:	2b80      	cmp	r3, #128	; 0x80
 8007d34:	d0ef      	beq.n	8007d16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d36:	4b27      	ldr	r3, [pc, #156]	; (8007dd4 <xPortStartScheduler+0x134>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f1c3 0307 	rsb	r3, r3, #7
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d00a      	beq.n	8007d58 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	60bb      	str	r3, [r7, #8]
}
 8007d54:	bf00      	nop
 8007d56:	e7fe      	b.n	8007d56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d58:	4b1e      	ldr	r3, [pc, #120]	; (8007dd4 <xPortStartScheduler+0x134>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	021b      	lsls	r3, r3, #8
 8007d5e:	4a1d      	ldr	r2, [pc, #116]	; (8007dd4 <xPortStartScheduler+0x134>)
 8007d60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d62:	4b1c      	ldr	r3, [pc, #112]	; (8007dd4 <xPortStartScheduler+0x134>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d6a:	4a1a      	ldr	r2, [pc, #104]	; (8007dd4 <xPortStartScheduler+0x134>)
 8007d6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d76:	4b18      	ldr	r3, [pc, #96]	; (8007dd8 <xPortStartScheduler+0x138>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a17      	ldr	r2, [pc, #92]	; (8007dd8 <xPortStartScheduler+0x138>)
 8007d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d82:	4b15      	ldr	r3, [pc, #84]	; (8007dd8 <xPortStartScheduler+0x138>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a14      	ldr	r2, [pc, #80]	; (8007dd8 <xPortStartScheduler+0x138>)
 8007d88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d8e:	f000 f8dd 	bl	8007f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d92:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <xPortStartScheduler+0x13c>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d98:	f000 f8fc 	bl	8007f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d9c:	4b10      	ldr	r3, [pc, #64]	; (8007de0 <xPortStartScheduler+0x140>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a0f      	ldr	r2, [pc, #60]	; (8007de0 <xPortStartScheduler+0x140>)
 8007da2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007da6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007da8:	f7ff ff66 	bl	8007c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007dac:	f001 fcfc 	bl	80097a8 <vTaskSwitchContext>
	prvTaskExitError();
 8007db0:	f7ff ff22 	bl	8007bf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	e000ed00 	.word	0xe000ed00
 8007dc4:	410fc271 	.word	0x410fc271
 8007dc8:	410fc270 	.word	0x410fc270
 8007dcc:	e000e400 	.word	0xe000e400
 8007dd0:	24009d44 	.word	0x24009d44
 8007dd4:	24009d48 	.word	0x24009d48
 8007dd8:	e000ed20 	.word	0xe000ed20
 8007ddc:	2400000c 	.word	0x2400000c
 8007de0:	e000ef34 	.word	0xe000ef34

08007de4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	607b      	str	r3, [r7, #4]
}
 8007dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dfe:	4b0f      	ldr	r3, [pc, #60]	; (8007e3c <vPortEnterCritical+0x58>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	4a0d      	ldr	r2, [pc, #52]	; (8007e3c <vPortEnterCritical+0x58>)
 8007e06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e08:	4b0c      	ldr	r3, [pc, #48]	; (8007e3c <vPortEnterCritical+0x58>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d10f      	bne.n	8007e30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e10:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <vPortEnterCritical+0x5c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <vPortEnterCritical+0x4c>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	603b      	str	r3, [r7, #0]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <vPortEnterCritical+0x4a>
	}
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	2400000c 	.word	0x2400000c
 8007e40:	e000ed04 	.word	0xe000ed04

08007e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e4a:	4b12      	ldr	r3, [pc, #72]	; (8007e94 <vPortExitCritical+0x50>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10a      	bne.n	8007e68 <vPortExitCritical+0x24>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	607b      	str	r3, [r7, #4]
}
 8007e64:	bf00      	nop
 8007e66:	e7fe      	b.n	8007e66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <vPortExitCritical+0x50>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	4a09      	ldr	r2, [pc, #36]	; (8007e94 <vPortExitCritical+0x50>)
 8007e70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e72:	4b08      	ldr	r3, [pc, #32]	; (8007e94 <vPortExitCritical+0x50>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d105      	bne.n	8007e86 <vPortExitCritical+0x42>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	2400000c 	.word	0x2400000c
	...

08007ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ea0:	f3ef 8009 	mrs	r0, PSP
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <pxCurrentTCBConst>)
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	f01e 0f10 	tst.w	lr, #16
 8007eb0:	bf08      	it	eq
 8007eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eba:	6010      	str	r0, [r2, #0]
 8007ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ec4:	f380 8811 	msr	BASEPRI, r0
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f001 fc6a 	bl	80097a8 <vTaskSwitchContext>
 8007ed4:	f04f 0000 	mov.w	r0, #0
 8007ed8:	f380 8811 	msr	BASEPRI, r0
 8007edc:	bc09      	pop	{r0, r3}
 8007ede:	6819      	ldr	r1, [r3, #0]
 8007ee0:	6808      	ldr	r0, [r1, #0]
 8007ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee6:	f01e 0f10 	tst.w	lr, #16
 8007eea:	bf08      	it	eq
 8007eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ef0:	f380 8809 	msr	PSP, r0
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	f3af 8000 	nop.w

08007f00 <pxCurrentTCBConst>:
 8007f00:	24009d4c 	.word	0x24009d4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop

08007f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	607b      	str	r3, [r7, #4]
}
 8007f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f22:	f001 fb87 	bl	8009634 <xTaskIncrementTick>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f2c:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <xPortSysTickHandler+0x40>)
 8007f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	2300      	movs	r3, #0
 8007f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	f383 8811 	msr	BASEPRI, r3
}
 8007f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f50:	4b0b      	ldr	r3, [pc, #44]	; (8007f80 <vPortSetupTimerInterrupt+0x34>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f56:	4b0b      	ldr	r3, [pc, #44]	; (8007f84 <vPortSetupTimerInterrupt+0x38>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f5c:	4b0a      	ldr	r3, [pc, #40]	; (8007f88 <vPortSetupTimerInterrupt+0x3c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a0a      	ldr	r2, [pc, #40]	; (8007f8c <vPortSetupTimerInterrupt+0x40>)
 8007f62:	fba2 2303 	umull	r2, r3, r2, r3
 8007f66:	099b      	lsrs	r3, r3, #6
 8007f68:	4a09      	ldr	r2, [pc, #36]	; (8007f90 <vPortSetupTimerInterrupt+0x44>)
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f6e:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <vPortSetupTimerInterrupt+0x34>)
 8007f70:	2207      	movs	r2, #7
 8007f72:	601a      	str	r2, [r3, #0]
}
 8007f74:	bf00      	nop
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	e000e010 	.word	0xe000e010
 8007f84:	e000e018 	.word	0xe000e018
 8007f88:	24000010 	.word	0x24000010
 8007f8c:	10624dd3 	.word	0x10624dd3
 8007f90:	e000e014 	.word	0xe000e014

08007f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fa4 <vPortEnableVFP+0x10>
 8007f98:	6801      	ldr	r1, [r0, #0]
 8007f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f9e:	6001      	str	r1, [r0, #0]
 8007fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007fa2:	bf00      	nop
 8007fa4:	e000ed88 	.word	0xe000ed88

08007fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fae:	f3ef 8305 	mrs	r3, IPSR
 8007fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b0f      	cmp	r3, #15
 8007fb8:	d914      	bls.n	8007fe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007fba:	4a17      	ldr	r2, [pc, #92]	; (8008018 <vPortValidateInterruptPriority+0x70>)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fc4:	4b15      	ldr	r3, [pc, #84]	; (800801c <vPortValidateInterruptPriority+0x74>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	7afa      	ldrb	r2, [r7, #11]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d20a      	bcs.n	8007fe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	607b      	str	r3, [r7, #4]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fe4:	4b0e      	ldr	r3, [pc, #56]	; (8008020 <vPortValidateInterruptPriority+0x78>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fec:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <vPortValidateInterruptPriority+0x7c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d90a      	bls.n	800800a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	603b      	str	r3, [r7, #0]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <vPortValidateInterruptPriority+0x60>
	}
 800800a:	bf00      	nop
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	e000e3f0 	.word	0xe000e3f0
 800801c:	24009d44 	.word	0x24009d44
 8008020:	e000ed0c 	.word	0xe000ed0c
 8008024:	24009d48 	.word	0x24009d48

08008028 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <xQueueGenericReset+0x2a>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	60bb      	str	r3, [r7, #8]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008052:	f7ff fec7 	bl	8007de4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008062:	fb01 f303 	mul.w	r3, r1, r3
 8008066:	441a      	add	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008082:	3b01      	subs	r3, #1
 8008084:	68f9      	ldr	r1, [r7, #12]
 8008086:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008088:	fb01 f303 	mul.w	r3, r1, r3
 800808c:	441a      	add	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	22ff      	movs	r2, #255	; 0xff
 8008096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	22ff      	movs	r2, #255	; 0xff
 800809e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d114      	bne.n	80080d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01a      	beq.n	80080e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3310      	adds	r3, #16
 80080b4:	4618      	mov	r0, r3
 80080b6:	f001 fc25 	bl	8009904 <xTaskRemoveFromEventList>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d012      	beq.n	80080e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080c0:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <xQueueGenericReset+0xcc>)
 80080c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	e009      	b.n	80080e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3310      	adds	r3, #16
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fca6 	bl	8007a28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	3324      	adds	r3, #36	; 0x24
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff fca1 	bl	8007a28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80080e6:	f7ff fead 	bl	8007e44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80080ea:	2301      	movs	r3, #1
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	e000ed04 	.word	0xe000ed04

080080f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b08e      	sub	sp, #56	; 0x38
 80080fc:	af02      	add	r7, sp, #8
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
}
 800813a:	bf00      	nop
 800813c:	e7fe      	b.n	800813c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <xQueueGenericCreateStatic+0x52>
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <xQueueGenericCreateStatic+0x56>
 800814a:	2301      	movs	r3, #1
 800814c:	e000      	b.n	8008150 <xQueueGenericCreateStatic+0x58>
 800814e:	2300      	movs	r3, #0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10a      	bne.n	800816a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	623b      	str	r3, [r7, #32]
}
 8008166:	bf00      	nop
 8008168:	e7fe      	b.n	8008168 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d102      	bne.n	8008176 <xQueueGenericCreateStatic+0x7e>
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <xQueueGenericCreateStatic+0x82>
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <xQueueGenericCreateStatic+0x84>
 800817a:	2300      	movs	r3, #0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	61fb      	str	r3, [r7, #28]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008196:	2350      	movs	r3, #80	; 0x50
 8008198:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b50      	cmp	r3, #80	; 0x50
 800819e:	d00a      	beq.n	80081b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	61bb      	str	r3, [r7, #24]
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80081bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00d      	beq.n	80081de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	4613      	mov	r3, r2
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f83f 	bl	800825c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3730      	adds	r7, #48	; 0x30
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08a      	sub	sp, #40	; 0x28
 80081ec:	af02      	add	r7, sp, #8
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	4613      	mov	r3, r2
 80081f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <xQueueGenericCreate+0x2a>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	613b      	str	r3, [r7, #16]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	fb02 f303 	mul.w	r3, r2, r3
 800821a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	3350      	adds	r3, #80	; 0x50
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff fa17 	bl	8007654 <pvPortMalloc>
 8008226:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d011      	beq.n	8008252 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	3350      	adds	r3, #80	; 0x50
 8008236:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008240:	79fa      	ldrb	r2, [r7, #7]
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	4613      	mov	r3, r2
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	68b9      	ldr	r1, [r7, #8]
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 f805 	bl	800825c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008252:	69bb      	ldr	r3, [r7, #24]
	}
 8008254:	4618      	mov	r0, r3
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d103      	bne.n	8008278 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	e002      	b.n	800827e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800828a:	2101      	movs	r1, #1
 800828c:	69b8      	ldr	r0, [r7, #24]
 800828e:	f7ff fecb 	bl	8008028 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	78fa      	ldrb	r2, [r7, #3]
 8008296:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800829a:	bf00      	nop
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b08a      	sub	sp, #40	; 0x28
 80082a6:	af02      	add	r7, sp, #8
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10a      	bne.n	80082ca <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	61bb      	str	r3, [r7, #24]
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d90a      	bls.n	80082e8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	617b      	str	r3, [r7, #20]
}
 80082e4:	bf00      	nop
 80082e6:	e7fe      	b.n	80082e6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80082e8:	2302      	movs	r3, #2
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	2100      	movs	r1, #0
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f7ff ff00 	bl	80080f8 <xQueueGenericCreateStatic>
 80082f8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008306:	69fb      	ldr	r3, [r7, #28]
	}
 8008308:	4618      	mov	r0, r3
 800830a:	3720      	adds	r7, #32
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10a      	bne.n	8008336 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	613b      	str	r3, [r7, #16]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	429a      	cmp	r2, r3
 800833c:	d90a      	bls.n	8008354 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	60fb      	str	r3, [r7, #12]
}
 8008350:	bf00      	nop
 8008352:	e7fe      	b.n	8008352 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008354:	2202      	movs	r2, #2
 8008356:	2100      	movs	r1, #0
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff ff45 	bl	80081e8 <xQueueGenericCreate>
 800835e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800836c:	697b      	ldr	r3, [r7, #20]
	}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08e      	sub	sp, #56	; 0x38
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008386:	2300      	movs	r3, #0
 8008388:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10a      	bne.n	80083aa <xQueueGenericSend+0x32>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083a6:	bf00      	nop
 80083a8:	e7fe      	b.n	80083a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d103      	bne.n	80083b8 <xQueueGenericSend+0x40>
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <xQueueGenericSend+0x44>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e000      	b.n	80083be <xQueueGenericSend+0x46>
 80083bc:	2300      	movs	r3, #0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <xQueueGenericSend+0x60>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083d4:	bf00      	nop
 80083d6:	e7fe      	b.n	80083d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d103      	bne.n	80083e6 <xQueueGenericSend+0x6e>
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d101      	bne.n	80083ea <xQueueGenericSend+0x72>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e000      	b.n	80083ec <xQueueGenericSend+0x74>
 80083ea:	2300      	movs	r3, #0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <xQueueGenericSend+0x8e>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	623b      	str	r3, [r7, #32]
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008406:	f001 fc3b 	bl	8009c80 <xTaskGetSchedulerState>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d102      	bne.n	8008416 <xQueueGenericSend+0x9e>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <xQueueGenericSend+0xa2>
 8008416:	2301      	movs	r3, #1
 8008418:	e000      	b.n	800841c <xQueueGenericSend+0xa4>
 800841a:	2300      	movs	r3, #0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10a      	bne.n	8008436 <xQueueGenericSend+0xbe>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	61fb      	str	r3, [r7, #28]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008436:	f7ff fcd5 	bl	8007de4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008442:	429a      	cmp	r2, r3
 8008444:	d302      	bcc.n	800844c <xQueueGenericSend+0xd4>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b02      	cmp	r3, #2
 800844a:	d129      	bne.n	80084a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008452:	f000 fc5e 	bl	8008d12 <prvCopyDataToQueue>
 8008456:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	2b00      	cmp	r3, #0
 800845e:	d010      	beq.n	8008482 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	3324      	adds	r3, #36	; 0x24
 8008464:	4618      	mov	r0, r3
 8008466:	f001 fa4d 	bl	8009904 <xTaskRemoveFromEventList>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d013      	beq.n	8008498 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008470:	4b3f      	ldr	r3, [pc, #252]	; (8008570 <xQueueGenericSend+0x1f8>)
 8008472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	e00a      	b.n	8008498 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008484:	2b00      	cmp	r3, #0
 8008486:	d007      	beq.n	8008498 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008488:	4b39      	ldr	r3, [pc, #228]	; (8008570 <xQueueGenericSend+0x1f8>)
 800848a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008498:	f7ff fcd4 	bl	8007e44 <vPortExitCritical>
				return pdPASS;
 800849c:	2301      	movs	r3, #1
 800849e:	e063      	b.n	8008568 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d103      	bne.n	80084ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084a6:	f7ff fccd 	bl	8007e44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084aa:	2300      	movs	r3, #0
 80084ac:	e05c      	b.n	8008568 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d106      	bne.n	80084c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084b4:	f107 0314 	add.w	r3, r7, #20
 80084b8:	4618      	mov	r0, r3
 80084ba:	f001 fa87 	bl	80099cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084be:	2301      	movs	r3, #1
 80084c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084c2:	f7ff fcbf 	bl	8007e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084c6:	f000 fff9 	bl	80094bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084ca:	f7ff fc8b 	bl	8007de4 <vPortEnterCritical>
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084d4:	b25b      	sxtb	r3, r3
 80084d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084da:	d103      	bne.n	80084e4 <xQueueGenericSend+0x16c>
 80084dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084ea:	b25b      	sxtb	r3, r3
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d103      	bne.n	80084fa <xQueueGenericSend+0x182>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084fa:	f7ff fca3 	bl	8007e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084fe:	1d3a      	adds	r2, r7, #4
 8008500:	f107 0314 	add.w	r3, r7, #20
 8008504:	4611      	mov	r1, r2
 8008506:	4618      	mov	r0, r3
 8008508:	f001 fa76 	bl	80099f8 <xTaskCheckForTimeOut>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d124      	bne.n	800855c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008512:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008514:	f000 fcf5 	bl	8008f02 <prvIsQueueFull>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d018      	beq.n	8008550 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	3310      	adds	r3, #16
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	4611      	mov	r1, r2
 8008526:	4618      	mov	r0, r3
 8008528:	f001 f99c 	bl	8009864 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800852c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800852e:	f000 fc80 	bl	8008e32 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008532:	f000 ffd1 	bl	80094d8 <xTaskResumeAll>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	f47f af7c 	bne.w	8008436 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800853e:	4b0c      	ldr	r3, [pc, #48]	; (8008570 <xQueueGenericSend+0x1f8>)
 8008540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	e772      	b.n	8008436 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008552:	f000 fc6e 	bl	8008e32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008556:	f000 ffbf 	bl	80094d8 <xTaskResumeAll>
 800855a:	e76c      	b.n	8008436 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800855c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800855e:	f000 fc68 	bl	8008e32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008562:	f000 ffb9 	bl	80094d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008566:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008568:	4618      	mov	r0, r3
 800856a:	3738      	adds	r7, #56	; 0x38
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	e000ed04 	.word	0xe000ed04

08008574 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b090      	sub	sp, #64	; 0x40
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10a      	bne.n	80085a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800859e:	bf00      	nop
 80085a0:	e7fe      	b.n	80085a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d103      	bne.n	80085b0 <xQueueGenericSendFromISR+0x3c>
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <xQueueGenericSendFromISR+0x40>
 80085b0:	2301      	movs	r3, #1
 80085b2:	e000      	b.n	80085b6 <xQueueGenericSendFromISR+0x42>
 80085b4:	2300      	movs	r3, #0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10a      	bne.n	80085d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085cc:	bf00      	nop
 80085ce:	e7fe      	b.n	80085ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d103      	bne.n	80085de <xQueueGenericSendFromISR+0x6a>
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d101      	bne.n	80085e2 <xQueueGenericSendFromISR+0x6e>
 80085de:	2301      	movs	r3, #1
 80085e0:	e000      	b.n	80085e4 <xQueueGenericSendFromISR+0x70>
 80085e2:	2300      	movs	r3, #0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10a      	bne.n	80085fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	623b      	str	r3, [r7, #32]
}
 80085fa:	bf00      	nop
 80085fc:	e7fe      	b.n	80085fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085fe:	f7ff fcd3 	bl	8007fa8 <vPortValidateInterruptPriority>
	__asm volatile
 8008602:	f3ef 8211 	mrs	r2, BASEPRI
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	61fa      	str	r2, [r7, #28]
 8008618:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800861a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800861c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800861e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008626:	429a      	cmp	r2, r3
 8008628:	d302      	bcc.n	8008630 <xQueueGenericSendFromISR+0xbc>
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b02      	cmp	r3, #2
 800862e:	d12f      	bne.n	8008690 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008646:	f000 fb64 	bl	8008d12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800864a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800864e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008652:	d112      	bne.n	800867a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	2b00      	cmp	r3, #0
 800865a:	d016      	beq.n	800868a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	3324      	adds	r3, #36	; 0x24
 8008660:	4618      	mov	r0, r3
 8008662:	f001 f94f 	bl	8009904 <xTaskRemoveFromEventList>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00e      	beq.n	800868a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00b      	beq.n	800868a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	e007      	b.n	800868a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800867a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800867e:	3301      	adds	r3, #1
 8008680:	b2db      	uxtb	r3, r3
 8008682:	b25a      	sxtb	r2, r3
 8008684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800868a:	2301      	movs	r3, #1
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800868e:	e001      	b.n	8008694 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008690:	2300      	movs	r3, #0
 8008692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008696:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f383 8811 	msr	BASEPRI, r3
}
 800869e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3740      	adds	r7, #64	; 0x40
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b08e      	sub	sp, #56	; 0x38
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10a      	bne.n	80086d4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	623b      	str	r3, [r7, #32]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	61fb      	str	r3, [r7, #28]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d103      	bne.n	8008702 <xQueueGiveFromISR+0x58>
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <xQueueGiveFromISR+0x5c>
 8008702:	2301      	movs	r3, #1
 8008704:	e000      	b.n	8008708 <xQueueGiveFromISR+0x5e>
 8008706:	2300      	movs	r3, #0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10a      	bne.n	8008722 <xQueueGiveFromISR+0x78>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	61bb      	str	r3, [r7, #24]
}
 800871e:	bf00      	nop
 8008720:	e7fe      	b.n	8008720 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008722:	f7ff fc41 	bl	8007fa8 <vPortValidateInterruptPriority>
	__asm volatile
 8008726:	f3ef 8211 	mrs	r2, BASEPRI
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	617a      	str	r2, [r7, #20]
 800873c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800873e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008740:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008746:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800874e:	429a      	cmp	r2, r3
 8008750:	d22b      	bcs.n	80087aa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	1c5a      	adds	r2, r3, #1
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008764:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876c:	d112      	bne.n	8008794 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	2b00      	cmp	r3, #0
 8008774:	d016      	beq.n	80087a4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	3324      	adds	r3, #36	; 0x24
 800877a:	4618      	mov	r0, r3
 800877c:	f001 f8c2 	bl	8009904 <xTaskRemoveFromEventList>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00e      	beq.n	80087a4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00b      	beq.n	80087a4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2201      	movs	r2, #1
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	e007      	b.n	80087a4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008798:	3301      	adds	r3, #1
 800879a:	b2db      	uxtb	r3, r3
 800879c:	b25a      	sxtb	r2, r3
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087a4:	2301      	movs	r3, #1
 80087a6:	637b      	str	r3, [r7, #52]	; 0x34
 80087a8:	e001      	b.n	80087ae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	637b      	str	r3, [r7, #52]	; 0x34
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f383 8811 	msr	BASEPRI, r3
}
 80087b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3738      	adds	r7, #56	; 0x38
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08c      	sub	sp, #48	; 0x30
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80087d0:	2300      	movs	r3, #0
 80087d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10a      	bne.n	80087f4 <xQueueReceive+0x30>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	623b      	str	r3, [r7, #32]
}
 80087f0:	bf00      	nop
 80087f2:	e7fe      	b.n	80087f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d103      	bne.n	8008802 <xQueueReceive+0x3e>
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <xQueueReceive+0x42>
 8008802:	2301      	movs	r3, #1
 8008804:	e000      	b.n	8008808 <xQueueReceive+0x44>
 8008806:	2300      	movs	r3, #0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10a      	bne.n	8008822 <xQueueReceive+0x5e>
	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	61fb      	str	r3, [r7, #28]
}
 800881e:	bf00      	nop
 8008820:	e7fe      	b.n	8008820 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008822:	f001 fa2d 	bl	8009c80 <xTaskGetSchedulerState>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d102      	bne.n	8008832 <xQueueReceive+0x6e>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <xQueueReceive+0x72>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <xQueueReceive+0x74>
 8008836:	2300      	movs	r3, #0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10a      	bne.n	8008852 <xQueueReceive+0x8e>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	61bb      	str	r3, [r7, #24]
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008852:	f7ff fac7 	bl	8007de4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01f      	beq.n	80088a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008862:	68b9      	ldr	r1, [r7, #8]
 8008864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008866:	f000 fabe 	bl	8008de6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	1e5a      	subs	r2, r3, #1
 800886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008870:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00f      	beq.n	800889a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	3310      	adds	r3, #16
 800887e:	4618      	mov	r0, r3
 8008880:	f001 f840 	bl	8009904 <xTaskRemoveFromEventList>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d007      	beq.n	800889a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800888a:	4b3d      	ldr	r3, [pc, #244]	; (8008980 <xQueueReceive+0x1bc>)
 800888c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800889a:	f7ff fad3 	bl	8007e44 <vPortExitCritical>
				return pdPASS;
 800889e:	2301      	movs	r3, #1
 80088a0:	e069      	b.n	8008976 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d103      	bne.n	80088b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088a8:	f7ff facc 	bl	8007e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088ac:	2300      	movs	r3, #0
 80088ae:	e062      	b.n	8008976 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d106      	bne.n	80088c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088b6:	f107 0310 	add.w	r3, r7, #16
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 f886 	bl	80099cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088c0:	2301      	movs	r3, #1
 80088c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088c4:	f7ff fabe 	bl	8007e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088c8:	f000 fdf8 	bl	80094bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088cc:	f7ff fa8a 	bl	8007de4 <vPortEnterCritical>
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088d6:	b25b      	sxtb	r3, r3
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088dc:	d103      	bne.n	80088e6 <xQueueReceive+0x122>
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ec:	b25b      	sxtb	r3, r3
 80088ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f2:	d103      	bne.n	80088fc <xQueueReceive+0x138>
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088fc:	f7ff faa2 	bl	8007e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008900:	1d3a      	adds	r2, r7, #4
 8008902:	f107 0310 	add.w	r3, r7, #16
 8008906:	4611      	mov	r1, r2
 8008908:	4618      	mov	r0, r3
 800890a:	f001 f875 	bl	80099f8 <xTaskCheckForTimeOut>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d123      	bne.n	800895c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008916:	f000 fade 	bl	8008ed6 <prvIsQueueEmpty>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d017      	beq.n	8008950 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	3324      	adds	r3, #36	; 0x24
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	4611      	mov	r1, r2
 8008928:	4618      	mov	r0, r3
 800892a:	f000 ff9b 	bl	8009864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800892e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008930:	f000 fa7f 	bl	8008e32 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008934:	f000 fdd0 	bl	80094d8 <xTaskResumeAll>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d189      	bne.n	8008852 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800893e:	4b10      	ldr	r3, [pc, #64]	; (8008980 <xQueueReceive+0x1bc>)
 8008940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	e780      	b.n	8008852 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008952:	f000 fa6e 	bl	8008e32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008956:	f000 fdbf 	bl	80094d8 <xTaskResumeAll>
 800895a:	e77a      	b.n	8008852 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800895c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800895e:	f000 fa68 	bl	8008e32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008962:	f000 fdb9 	bl	80094d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008968:	f000 fab5 	bl	8008ed6 <prvIsQueueEmpty>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	f43f af6f 	beq.w	8008852 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008974:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008976:	4618      	mov	r0, r3
 8008978:	3730      	adds	r7, #48	; 0x30
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	e000ed04 	.word	0xe000ed04

08008984 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08e      	sub	sp, #56	; 0x38
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800898e:	2300      	movs	r3, #0
 8008990:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008996:	2300      	movs	r3, #0
 8008998:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	623b      	str	r3, [r7, #32]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	61fb      	str	r3, [r7, #28]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089d4:	f001 f954 	bl	8009c80 <xTaskGetSchedulerState>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d102      	bne.n	80089e4 <xQueueSemaphoreTake+0x60>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d101      	bne.n	80089e8 <xQueueSemaphoreTake+0x64>
 80089e4:	2301      	movs	r3, #1
 80089e6:	e000      	b.n	80089ea <xQueueSemaphoreTake+0x66>
 80089e8:	2300      	movs	r3, #0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10a      	bne.n	8008a04 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	61bb      	str	r3, [r7, #24]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a04:	f7ff f9ee 	bl	8007de4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d024      	beq.n	8008a5e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	1e5a      	subs	r2, r3, #1
 8008a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d104      	bne.n	8008a2e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008a24:	f001 faa2 	bl	8009f6c <pvTaskIncrementMutexHeldCount>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00f      	beq.n	8008a56 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a38:	3310      	adds	r3, #16
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 ff62 	bl	8009904 <xTaskRemoveFromEventList>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d007      	beq.n	8008a56 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a46:	4b54      	ldr	r3, [pc, #336]	; (8008b98 <xQueueSemaphoreTake+0x214>)
 8008a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a56:	f7ff f9f5 	bl	8007e44 <vPortExitCritical>
				return pdPASS;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e097      	b.n	8008b8e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d111      	bne.n	8008a88 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	617b      	str	r3, [r7, #20]
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a80:	f7ff f9e0 	bl	8007e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a84:	2300      	movs	r3, #0
 8008a86:	e082      	b.n	8008b8e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a8e:	f107 030c 	add.w	r3, r7, #12
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 ff9a 	bl	80099cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a9c:	f7ff f9d2 	bl	8007e44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008aa0:	f000 fd0c 	bl	80094bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008aa4:	f7ff f99e 	bl	8007de4 <vPortEnterCritical>
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aae:	b25b      	sxtb	r3, r3
 8008ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab4:	d103      	bne.n	8008abe <xQueueSemaphoreTake+0x13a>
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ac4:	b25b      	sxtb	r3, r3
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aca:	d103      	bne.n	8008ad4 <xQueueSemaphoreTake+0x150>
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ad4:	f7ff f9b6 	bl	8007e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ad8:	463a      	mov	r2, r7
 8008ada:	f107 030c 	add.w	r3, r7, #12
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 ff89 	bl	80099f8 <xTaskCheckForTimeOut>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d132      	bne.n	8008b52 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008aee:	f000 f9f2 	bl	8008ed6 <prvIsQueueEmpty>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d026      	beq.n	8008b46 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d109      	bne.n	8008b14 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008b00:	f7ff f970 	bl	8007de4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 f8d7 	bl	8009cbc <xTaskPriorityInherit>
 8008b0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008b10:	f7ff f998 	bl	8007e44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	3324      	adds	r3, #36	; 0x24
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 fea1 	bl	8009864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b24:	f000 f985 	bl	8008e32 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b28:	f000 fcd6 	bl	80094d8 <xTaskResumeAll>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f47f af68 	bne.w	8008a04 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008b34:	4b18      	ldr	r3, [pc, #96]	; (8008b98 <xQueueSemaphoreTake+0x214>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	e75e      	b.n	8008a04 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b48:	f000 f973 	bl	8008e32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b4c:	f000 fcc4 	bl	80094d8 <xTaskResumeAll>
 8008b50:	e758      	b.n	8008a04 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008b52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b54:	f000 f96d 	bl	8008e32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b58:	f000 fcbe 	bl	80094d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b5e:	f000 f9ba 	bl	8008ed6 <prvIsQueueEmpty>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f43f af4d 	beq.w	8008a04 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00d      	beq.n	8008b8c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008b70:	f7ff f938 	bl	8007de4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b76:	f000 f8b4 	bl	8008ce2 <prvGetDisinheritPriorityAfterTimeout>
 8008b7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 f970 	bl	8009e68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b88:	f7ff f95c 	bl	8007e44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3738      	adds	r7, #56	; 0x38
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08e      	sub	sp, #56	; 0x38
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10a      	bne.n	8008bc8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	623b      	str	r3, [r7, #32]
}
 8008bc4:	bf00      	nop
 8008bc6:	e7fe      	b.n	8008bc6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d103      	bne.n	8008bd6 <xQueueReceiveFromISR+0x3a>
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <xQueueReceiveFromISR+0x3e>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e000      	b.n	8008bdc <xQueueReceiveFromISR+0x40>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10a      	bne.n	8008bf6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	61fb      	str	r3, [r7, #28]
}
 8008bf2:	bf00      	nop
 8008bf4:	e7fe      	b.n	8008bf4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bf6:	f7ff f9d7 	bl	8007fa8 <vPortValidateInterruptPriority>
	__asm volatile
 8008bfa:	f3ef 8211 	mrs	r2, BASEPRI
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	61ba      	str	r2, [r7, #24]
 8008c10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008c12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d02f      	beq.n	8008c82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c30:	f000 f8d9 	bl	8008de6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c36:	1e5a      	subs	r2, r3, #1
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008c3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c44:	d112      	bne.n	8008c6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d016      	beq.n	8008c7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	3310      	adds	r3, #16
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fe56 	bl	8009904 <xTaskRemoveFromEventList>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00e      	beq.n	8008c7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00b      	beq.n	8008c7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	e007      	b.n	8008c7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c70:	3301      	adds	r3, #1
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	b25a      	sxtb	r2, r3
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c80:	e001      	b.n	8008c86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	637b      	str	r3, [r7, #52]	; 0x34
 8008c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f383 8811 	msr	BASEPRI, r3
}
 8008c90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3738      	adds	r7, #56	; 0x38
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10a      	bne.n	8008cc4 <vQueueDelete+0x28>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	60bb      	str	r3, [r7, #8]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 f95f 	bl	8008f88 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d102      	bne.n	8008cda <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f7fe fd89 	bl	80077ec <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008cda:	bf00      	nop
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b085      	sub	sp, #20
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d006      	beq.n	8008d00 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	e001      	b.n	8008d04 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008d00:	2300      	movs	r3, #0
 8008d02:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008d04:	68fb      	ldr	r3, [r7, #12]
	}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b086      	sub	sp, #24
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	60f8      	str	r0, [r7, #12]
 8008d1a:	60b9      	str	r1, [r7, #8]
 8008d1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10d      	bne.n	8008d4c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d14d      	bne.n	8008dd4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f001 f825 	bl	8009d8c <xTaskPriorityDisinherit>
 8008d42:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	609a      	str	r2, [r3, #8]
 8008d4a:	e043      	b.n	8008dd4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d119      	bne.n	8008d86 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6858      	ldr	r0, [r3, #4]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	68b9      	ldr	r1, [r7, #8]
 8008d5e:	f01c ff87 	bl	8025c70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6a:	441a      	add	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d32b      	bcc.n	8008dd4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	605a      	str	r2, [r3, #4]
 8008d84:	e026      	b.n	8008dd4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	68d8      	ldr	r0, [r3, #12]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8e:	461a      	mov	r2, r3
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	f01c ff6d 	bl	8025c70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	425b      	negs	r3, r3
 8008da0:	441a      	add	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d207      	bcs.n	8008dc2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dba:	425b      	negs	r3, r3
 8008dbc:	441a      	add	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d105      	bne.n	8008dd4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ddc:	697b      	ldr	r3, [r7, #20]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3718      	adds	r7, #24
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d018      	beq.n	8008e2a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68da      	ldr	r2, [r3, #12]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e00:	441a      	add	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d303      	bcc.n	8008e1a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68d9      	ldr	r1, [r3, #12]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	461a      	mov	r2, r3
 8008e24:	6838      	ldr	r0, [r7, #0]
 8008e26:	f01c ff23 	bl	8025c70 <memcpy>
	}
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e3a:	f7fe ffd3 	bl	8007de4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e44:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e46:	e011      	b.n	8008e6c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d012      	beq.n	8008e76 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3324      	adds	r3, #36	; 0x24
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fd55 	bl	8009904 <xTaskRemoveFromEventList>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e60:	f000 fe2c 	bl	8009abc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dce9      	bgt.n	8008e48 <prvUnlockQueue+0x16>
 8008e74:	e000      	b.n	8008e78 <prvUnlockQueue+0x46>
					break;
 8008e76:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	22ff      	movs	r2, #255	; 0xff
 8008e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e80:	f7fe ffe0 	bl	8007e44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e84:	f7fe ffae 	bl	8007de4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e8e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e90:	e011      	b.n	8008eb6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d012      	beq.n	8008ec0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3310      	adds	r3, #16
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fd30 	bl	8009904 <xTaskRemoveFromEventList>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008eaa:	f000 fe07 	bl	8009abc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008eb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	dce9      	bgt.n	8008e92 <prvUnlockQueue+0x60>
 8008ebe:	e000      	b.n	8008ec2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ec0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	22ff      	movs	r2, #255	; 0xff
 8008ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008eca:	f7fe ffbb 	bl	8007e44 <vPortExitCritical>
}
 8008ece:	bf00      	nop
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ede:	f7fe ff81 	bl	8007de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d102      	bne.n	8008ef0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008eea:	2301      	movs	r3, #1
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	e001      	b.n	8008ef4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ef4:	f7fe ffa6 	bl	8007e44 <vPortExitCritical>

	return xReturn;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b084      	sub	sp, #16
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f0a:	f7fe ff6b 	bl	8007de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d102      	bne.n	8008f20 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	e001      	b.n	8008f24 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f24:	f7fe ff8e 	bl	8007e44 <vPortExitCritical>

	return xReturn;
 8008f28:	68fb      	ldr	r3, [r7, #12]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
 8008f42:	e014      	b.n	8008f6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f44:	4a0f      	ldr	r2, [pc, #60]	; (8008f84 <vQueueAddToRegistry+0x50>)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10b      	bne.n	8008f68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f50:	490c      	ldr	r1, [pc, #48]	; (8008f84 <vQueueAddToRegistry+0x50>)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f5a:	4a0a      	ldr	r2, [pc, #40]	; (8008f84 <vQueueAddToRegistry+0x50>)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	4413      	add	r3, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f66:	e006      	b.n	8008f76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b07      	cmp	r3, #7
 8008f72:	d9e7      	bls.n	8008f44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	2400b390 	.word	0x2400b390

08008f88 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f90:	2300      	movs	r3, #0
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	e016      	b.n	8008fc4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008f96:	4a10      	ldr	r2, [pc, #64]	; (8008fd8 <vQueueUnregisterQueue+0x50>)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	4413      	add	r3, r2
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d10b      	bne.n	8008fbe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008fa6:	4a0c      	ldr	r2, [pc, #48]	; (8008fd8 <vQueueUnregisterQueue+0x50>)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2100      	movs	r1, #0
 8008fac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008fb0:	4a09      	ldr	r2, [pc, #36]	; (8008fd8 <vQueueUnregisterQueue+0x50>)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	2200      	movs	r2, #0
 8008fba:	605a      	str	r2, [r3, #4]
				break;
 8008fbc:	e006      	b.n	8008fcc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b07      	cmp	r3, #7
 8008fc8:	d9e5      	bls.n	8008f96 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008fca:	bf00      	nop
 8008fcc:	bf00      	nop
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	2400b390 	.word	0x2400b390

08008fdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008fec:	f7fe fefa 	bl	8007de4 <vPortEnterCritical>
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ff6:	b25b      	sxtb	r3, r3
 8008ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffc:	d103      	bne.n	8009006 <vQueueWaitForMessageRestricted+0x2a>
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800900c:	b25b      	sxtb	r3, r3
 800900e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009012:	d103      	bne.n	800901c <vQueueWaitForMessageRestricted+0x40>
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800901c:	f7fe ff12 	bl	8007e44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009024:	2b00      	cmp	r3, #0
 8009026:	d106      	bne.n	8009036 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	3324      	adds	r3, #36	; 0x24
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	68b9      	ldr	r1, [r7, #8]
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fc3b 	bl	80098ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009036:	6978      	ldr	r0, [r7, #20]
 8009038:	f7ff fefb 	bl	8008e32 <prvUnlockQueue>
	}
 800903c:	bf00      	nop
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08e      	sub	sp, #56	; 0x38
 8009048:	af04      	add	r7, sp, #16
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10a      	bne.n	800906e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	623b      	str	r3, [r7, #32]
}
 800906a:	bf00      	nop
 800906c:	e7fe      	b.n	800906c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800906e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <xTaskCreateStatic+0x46>
	__asm volatile
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	61fb      	str	r3, [r7, #28]
}
 8009086:	bf00      	nop
 8009088:	e7fe      	b.n	8009088 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800908a:	235c      	movs	r3, #92	; 0x5c
 800908c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	2b5c      	cmp	r3, #92	; 0x5c
 8009092:	d00a      	beq.n	80090aa <xTaskCreateStatic+0x66>
	__asm volatile
 8009094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	61bb      	str	r3, [r7, #24]
}
 80090a6:	bf00      	nop
 80090a8:	e7fe      	b.n	80090a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80090aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d01e      	beq.n	80090f0 <xTaskCreateStatic+0xac>
 80090b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01b      	beq.n	80090f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	2202      	movs	r2, #2
 80090c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090ca:	2300      	movs	r3, #0
 80090cc:	9303      	str	r3, [sp, #12]
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	9302      	str	r3, [sp, #8]
 80090d2:	f107 0314 	add.w	r3, r7, #20
 80090d6:	9301      	str	r3, [sp, #4]
 80090d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	68b9      	ldr	r1, [r7, #8]
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 f850 	bl	8009188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090ea:	f000 f8dd 	bl	80092a8 <prvAddNewTaskToReadyList>
 80090ee:	e001      	b.n	80090f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090f4:	697b      	ldr	r3, [r7, #20]
	}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3728      	adds	r7, #40	; 0x28
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b08c      	sub	sp, #48	; 0x30
 8009102:	af04      	add	r7, sp, #16
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	603b      	str	r3, [r7, #0]
 800910a:	4613      	mov	r3, r2
 800910c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe fa9e 	bl	8007654 <pvPortMalloc>
 8009118:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00e      	beq.n	800913e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009120:	205c      	movs	r0, #92	; 0x5c
 8009122:	f7fe fa97 	bl	8007654 <pvPortMalloc>
 8009126:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	631a      	str	r2, [r3, #48]	; 0x30
 8009134:	e005      	b.n	8009142 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009136:	6978      	ldr	r0, [r7, #20]
 8009138:	f7fe fb58 	bl	80077ec <vPortFree>
 800913c:	e001      	b.n	8009142 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800913e:	2300      	movs	r3, #0
 8009140:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d017      	beq.n	8009178 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009150:	88fa      	ldrh	r2, [r7, #6]
 8009152:	2300      	movs	r3, #0
 8009154:	9303      	str	r3, [sp, #12]
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	9302      	str	r3, [sp, #8]
 800915a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 f80e 	bl	8009188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800916c:	69f8      	ldr	r0, [r7, #28]
 800916e:	f000 f89b 	bl	80092a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009172:	2301      	movs	r3, #1
 8009174:	61bb      	str	r3, [r7, #24]
 8009176:	e002      	b.n	800917e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009178:	f04f 33ff 	mov.w	r3, #4294967295
 800917c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800917e:	69bb      	ldr	r3, [r7, #24]
	}
 8009180:	4618      	mov	r0, r3
 8009182:	3720      	adds	r7, #32
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	461a      	mov	r2, r3
 80091a0:	21a5      	movs	r1, #165	; 0xa5
 80091a2:	f01c fd73 	bl	8025c8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80091b0:	440b      	add	r3, r1
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	f023 0307 	bic.w	r3, r3, #7
 80091be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	f003 0307 	and.w	r3, r3, #7
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	617b      	str	r3, [r7, #20]
}
 80091dc:	bf00      	nop
 80091de:	e7fe      	b.n	80091de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d01f      	beq.n	8009226 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091e6:	2300      	movs	r3, #0
 80091e8:	61fb      	str	r3, [r7, #28]
 80091ea:	e012      	b.n	8009212 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	7819      	ldrb	r1, [r3, #0]
 80091f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	4413      	add	r3, r2
 80091fa:	3334      	adds	r3, #52	; 0x34
 80091fc:	460a      	mov	r2, r1
 80091fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	4413      	add	r3, r2
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d006      	beq.n	800921a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	3301      	adds	r3, #1
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	2b0f      	cmp	r3, #15
 8009216:	d9e9      	bls.n	80091ec <prvInitialiseNewTask+0x64>
 8009218:	e000      	b.n	800921c <prvInitialiseNewTask+0x94>
			{
				break;
 800921a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800921c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009224:	e003      	b.n	800922e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	2b37      	cmp	r3, #55	; 0x37
 8009232:	d901      	bls.n	8009238 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009234:	2337      	movs	r3, #55	; 0x37
 8009236:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800923c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009242:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	2200      	movs	r2, #0
 8009248:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800924a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924c:	3304      	adds	r3, #4
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe fc0a 	bl	8007a68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009256:	3318      	adds	r3, #24
 8009258:	4618      	mov	r0, r3
 800925a:	f7fe fc05 	bl	8007a68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009262:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009266:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009272:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	2200      	movs	r2, #0
 8009278:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	68f9      	ldr	r1, [r7, #12]
 8009286:	69b8      	ldr	r0, [r7, #24]
 8009288:	f7fe fc82 	bl	8007b90 <pxPortInitialiseStack>
 800928c:	4602      	mov	r2, r0
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800929e:	bf00      	nop
 80092a0:	3720      	adds	r7, #32
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
	...

080092a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092b0:	f7fe fd98 	bl	8007de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092b4:	4b2d      	ldr	r3, [pc, #180]	; (800936c <prvAddNewTaskToReadyList+0xc4>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3301      	adds	r3, #1
 80092ba:	4a2c      	ldr	r2, [pc, #176]	; (800936c <prvAddNewTaskToReadyList+0xc4>)
 80092bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092be:	4b2c      	ldr	r3, [pc, #176]	; (8009370 <prvAddNewTaskToReadyList+0xc8>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d109      	bne.n	80092da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092c6:	4a2a      	ldr	r2, [pc, #168]	; (8009370 <prvAddNewTaskToReadyList+0xc8>)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092cc:	4b27      	ldr	r3, [pc, #156]	; (800936c <prvAddNewTaskToReadyList+0xc4>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d110      	bne.n	80092f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092d4:	f000 fc16 	bl	8009b04 <prvInitialiseTaskLists>
 80092d8:	e00d      	b.n	80092f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092da:	4b26      	ldr	r3, [pc, #152]	; (8009374 <prvAddNewTaskToReadyList+0xcc>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d109      	bne.n	80092f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092e2:	4b23      	ldr	r3, [pc, #140]	; (8009370 <prvAddNewTaskToReadyList+0xc8>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d802      	bhi.n	80092f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092f0:	4a1f      	ldr	r2, [pc, #124]	; (8009370 <prvAddNewTaskToReadyList+0xc8>)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092f6:	4b20      	ldr	r3, [pc, #128]	; (8009378 <prvAddNewTaskToReadyList+0xd0>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3301      	adds	r3, #1
 80092fc:	4a1e      	ldr	r2, [pc, #120]	; (8009378 <prvAddNewTaskToReadyList+0xd0>)
 80092fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009300:	4b1d      	ldr	r3, [pc, #116]	; (8009378 <prvAddNewTaskToReadyList+0xd0>)
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930c:	4b1b      	ldr	r3, [pc, #108]	; (800937c <prvAddNewTaskToReadyList+0xd4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	429a      	cmp	r2, r3
 8009312:	d903      	bls.n	800931c <prvAddNewTaskToReadyList+0x74>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009318:	4a18      	ldr	r2, [pc, #96]	; (800937c <prvAddNewTaskToReadyList+0xd4>)
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009320:	4613      	mov	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4a15      	ldr	r2, [pc, #84]	; (8009380 <prvAddNewTaskToReadyList+0xd8>)
 800932a:	441a      	add	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	4619      	mov	r1, r3
 8009332:	4610      	mov	r0, r2
 8009334:	f7fe fba5 	bl	8007a82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009338:	f7fe fd84 	bl	8007e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800933c:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <prvAddNewTaskToReadyList+0xcc>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00e      	beq.n	8009362 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009344:	4b0a      	ldr	r3, [pc, #40]	; (8009370 <prvAddNewTaskToReadyList+0xc8>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	429a      	cmp	r2, r3
 8009350:	d207      	bcs.n	8009362 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009352:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <prvAddNewTaskToReadyList+0xdc>)
 8009354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009362:	bf00      	nop
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	2400a220 	.word	0x2400a220
 8009370:	24009d4c 	.word	0x24009d4c
 8009374:	2400a22c 	.word	0x2400a22c
 8009378:	2400a23c 	.word	0x2400a23c
 800937c:	2400a228 	.word	0x2400a228
 8009380:	24009d50 	.word	0x24009d50
 8009384:	e000ed04 	.word	0xe000ed04

08009388 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009390:	2300      	movs	r3, #0
 8009392:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d017      	beq.n	80093ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800939a:	4b13      	ldr	r3, [pc, #76]	; (80093e8 <vTaskDelay+0x60>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <vTaskDelay+0x30>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	60bb      	str	r3, [r7, #8]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80093b8:	f000 f880 	bl	80094bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093bc:	2100      	movs	r1, #0
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fde8 	bl	8009f94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093c4:	f000 f888 	bl	80094d8 <xTaskResumeAll>
 80093c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d107      	bne.n	80093e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80093d0:	4b06      	ldr	r3, [pc, #24]	; (80093ec <vTaskDelay+0x64>)
 80093d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d6:	601a      	str	r2, [r3, #0]
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093e0:	bf00      	nop
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	2400a248 	.word	0x2400a248
 80093ec:	e000ed04 	.word	0xe000ed04

080093f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08a      	sub	sp, #40	; 0x28
 80093f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093f6:	2300      	movs	r3, #0
 80093f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093fa:	2300      	movs	r3, #0
 80093fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093fe:	463a      	mov	r2, r7
 8009400:	1d39      	adds	r1, r7, #4
 8009402:	f107 0308 	add.w	r3, r7, #8
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe f8f0 	bl	80075ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	9202      	str	r2, [sp, #8]
 8009414:	9301      	str	r3, [sp, #4]
 8009416:	2300      	movs	r3, #0
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	2300      	movs	r3, #0
 800941c:	460a      	mov	r2, r1
 800941e:	4921      	ldr	r1, [pc, #132]	; (80094a4 <vTaskStartScheduler+0xb4>)
 8009420:	4821      	ldr	r0, [pc, #132]	; (80094a8 <vTaskStartScheduler+0xb8>)
 8009422:	f7ff fe0f 	bl	8009044 <xTaskCreateStatic>
 8009426:	4603      	mov	r3, r0
 8009428:	4a20      	ldr	r2, [pc, #128]	; (80094ac <vTaskStartScheduler+0xbc>)
 800942a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800942c:	4b1f      	ldr	r3, [pc, #124]	; (80094ac <vTaskStartScheduler+0xbc>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009434:	2301      	movs	r3, #1
 8009436:	617b      	str	r3, [r7, #20]
 8009438:	e001      	b.n	800943e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800943a:	2300      	movs	r3, #0
 800943c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d102      	bne.n	800944a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009444:	f000 fdfa 	bl	800a03c <xTimerCreateTimerTask>
 8009448:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d116      	bne.n	800947e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	613b      	str	r3, [r7, #16]
}
 8009462:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009464:	4b12      	ldr	r3, [pc, #72]	; (80094b0 <vTaskStartScheduler+0xc0>)
 8009466:	f04f 32ff 	mov.w	r2, #4294967295
 800946a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800946c:	4b11      	ldr	r3, [pc, #68]	; (80094b4 <vTaskStartScheduler+0xc4>)
 800946e:	2201      	movs	r2, #1
 8009470:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009472:	4b11      	ldr	r3, [pc, #68]	; (80094b8 <vTaskStartScheduler+0xc8>)
 8009474:	2200      	movs	r2, #0
 8009476:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009478:	f7fe fc12 	bl	8007ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800947c:	e00e      	b.n	800949c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009484:	d10a      	bne.n	800949c <vTaskStartScheduler+0xac>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	60fb      	str	r3, [r7, #12]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <vTaskStartScheduler+0xaa>
}
 800949c:	bf00      	nop
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	08027674 	.word	0x08027674
 80094a8:	08009ad5 	.word	0x08009ad5
 80094ac:	2400a244 	.word	0x2400a244
 80094b0:	2400a240 	.word	0x2400a240
 80094b4:	2400a22c 	.word	0x2400a22c
 80094b8:	2400a224 	.word	0x2400a224

080094bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094bc:	b480      	push	{r7}
 80094be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80094c0:	4b04      	ldr	r3, [pc, #16]	; (80094d4 <vTaskSuspendAll+0x18>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3301      	adds	r3, #1
 80094c6:	4a03      	ldr	r2, [pc, #12]	; (80094d4 <vTaskSuspendAll+0x18>)
 80094c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80094ca:	bf00      	nop
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	2400a248 	.word	0x2400a248

080094d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094de:	2300      	movs	r3, #0
 80094e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094e6:	4b42      	ldr	r3, [pc, #264]	; (80095f0 <xTaskResumeAll+0x118>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10a      	bne.n	8009504 <xTaskResumeAll+0x2c>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	603b      	str	r3, [r7, #0]
}
 8009500:	bf00      	nop
 8009502:	e7fe      	b.n	8009502 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009504:	f7fe fc6e 	bl	8007de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009508:	4b39      	ldr	r3, [pc, #228]	; (80095f0 <xTaskResumeAll+0x118>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3b01      	subs	r3, #1
 800950e:	4a38      	ldr	r2, [pc, #224]	; (80095f0 <xTaskResumeAll+0x118>)
 8009510:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009512:	4b37      	ldr	r3, [pc, #220]	; (80095f0 <xTaskResumeAll+0x118>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d162      	bne.n	80095e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800951a:	4b36      	ldr	r3, [pc, #216]	; (80095f4 <xTaskResumeAll+0x11c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d05e      	beq.n	80095e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009522:	e02f      	b.n	8009584 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009524:	4b34      	ldr	r3, [pc, #208]	; (80095f8 <xTaskResumeAll+0x120>)
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3318      	adds	r3, #24
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe fb03 	bl	8007b3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3304      	adds	r3, #4
 800953a:	4618      	mov	r0, r3
 800953c:	f7fe fafe 	bl	8007b3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009544:	4b2d      	ldr	r3, [pc, #180]	; (80095fc <xTaskResumeAll+0x124>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	429a      	cmp	r2, r3
 800954a:	d903      	bls.n	8009554 <xTaskResumeAll+0x7c>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a2a      	ldr	r2, [pc, #168]	; (80095fc <xTaskResumeAll+0x124>)
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009558:	4613      	mov	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4a27      	ldr	r2, [pc, #156]	; (8009600 <xTaskResumeAll+0x128>)
 8009562:	441a      	add	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3304      	adds	r3, #4
 8009568:	4619      	mov	r1, r3
 800956a:	4610      	mov	r0, r2
 800956c:	f7fe fa89 	bl	8007a82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009574:	4b23      	ldr	r3, [pc, #140]	; (8009604 <xTaskResumeAll+0x12c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957a:	429a      	cmp	r2, r3
 800957c:	d302      	bcc.n	8009584 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800957e:	4b22      	ldr	r3, [pc, #136]	; (8009608 <xTaskResumeAll+0x130>)
 8009580:	2201      	movs	r2, #1
 8009582:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009584:	4b1c      	ldr	r3, [pc, #112]	; (80095f8 <xTaskResumeAll+0x120>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1cb      	bne.n	8009524 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009592:	f000 fb55 	bl	8009c40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009596:	4b1d      	ldr	r3, [pc, #116]	; (800960c <xTaskResumeAll+0x134>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d010      	beq.n	80095c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095a2:	f000 f847 	bl	8009634 <xTaskIncrementTick>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80095ac:	4b16      	ldr	r3, [pc, #88]	; (8009608 <xTaskResumeAll+0x130>)
 80095ae:	2201      	movs	r2, #1
 80095b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1f1      	bne.n	80095a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80095be:	4b13      	ldr	r3, [pc, #76]	; (800960c <xTaskResumeAll+0x134>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095c4:	4b10      	ldr	r3, [pc, #64]	; (8009608 <xTaskResumeAll+0x130>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d009      	beq.n	80095e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095cc:	2301      	movs	r3, #1
 80095ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095d0:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <xTaskResumeAll+0x138>)
 80095d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095e0:	f7fe fc30 	bl	8007e44 <vPortExitCritical>

	return xAlreadyYielded;
 80095e4:	68bb      	ldr	r3, [r7, #8]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	2400a248 	.word	0x2400a248
 80095f4:	2400a220 	.word	0x2400a220
 80095f8:	2400a1e0 	.word	0x2400a1e0
 80095fc:	2400a228 	.word	0x2400a228
 8009600:	24009d50 	.word	0x24009d50
 8009604:	24009d4c 	.word	0x24009d4c
 8009608:	2400a234 	.word	0x2400a234
 800960c:	2400a230 	.word	0x2400a230
 8009610:	e000ed04 	.word	0xe000ed04

08009614 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800961a:	4b05      	ldr	r3, [pc, #20]	; (8009630 <xTaskGetTickCount+0x1c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009620:	687b      	ldr	r3, [r7, #4]
}
 8009622:	4618      	mov	r0, r3
 8009624:	370c      	adds	r7, #12
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	2400a224 	.word	0x2400a224

08009634 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800963e:	4b4f      	ldr	r3, [pc, #316]	; (800977c <xTaskIncrementTick+0x148>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	f040 808f 	bne.w	8009766 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009648:	4b4d      	ldr	r3, [pc, #308]	; (8009780 <xTaskIncrementTick+0x14c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3301      	adds	r3, #1
 800964e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009650:	4a4b      	ldr	r2, [pc, #300]	; (8009780 <xTaskIncrementTick+0x14c>)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d120      	bne.n	800969e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800965c:	4b49      	ldr	r3, [pc, #292]	; (8009784 <xTaskIncrementTick+0x150>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00a      	beq.n	800967c <xTaskIncrementTick+0x48>
	__asm volatile
 8009666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	603b      	str	r3, [r7, #0]
}
 8009678:	bf00      	nop
 800967a:	e7fe      	b.n	800967a <xTaskIncrementTick+0x46>
 800967c:	4b41      	ldr	r3, [pc, #260]	; (8009784 <xTaskIncrementTick+0x150>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	60fb      	str	r3, [r7, #12]
 8009682:	4b41      	ldr	r3, [pc, #260]	; (8009788 <xTaskIncrementTick+0x154>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a3f      	ldr	r2, [pc, #252]	; (8009784 <xTaskIncrementTick+0x150>)
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	4a3f      	ldr	r2, [pc, #252]	; (8009788 <xTaskIncrementTick+0x154>)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	4b3e      	ldr	r3, [pc, #248]	; (800978c <xTaskIncrementTick+0x158>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3301      	adds	r3, #1
 8009696:	4a3d      	ldr	r2, [pc, #244]	; (800978c <xTaskIncrementTick+0x158>)
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	f000 fad1 	bl	8009c40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800969e:	4b3c      	ldr	r3, [pc, #240]	; (8009790 <xTaskIncrementTick+0x15c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d349      	bcc.n	800973c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096a8:	4b36      	ldr	r3, [pc, #216]	; (8009784 <xTaskIncrementTick+0x150>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d104      	bne.n	80096bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096b2:	4b37      	ldr	r3, [pc, #220]	; (8009790 <xTaskIncrementTick+0x15c>)
 80096b4:	f04f 32ff 	mov.w	r2, #4294967295
 80096b8:	601a      	str	r2, [r3, #0]
					break;
 80096ba:	e03f      	b.n	800973c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096bc:	4b31      	ldr	r3, [pc, #196]	; (8009784 <xTaskIncrementTick+0x150>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d203      	bcs.n	80096dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096d4:	4a2e      	ldr	r2, [pc, #184]	; (8009790 <xTaskIncrementTick+0x15c>)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096da:	e02f      	b.n	800973c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	3304      	adds	r3, #4
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fe fa2b 	bl	8007b3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	3318      	adds	r3, #24
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe fa22 	bl	8007b3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fc:	4b25      	ldr	r3, [pc, #148]	; (8009794 <xTaskIncrementTick+0x160>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	429a      	cmp	r2, r3
 8009702:	d903      	bls.n	800970c <xTaskIncrementTick+0xd8>
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009708:	4a22      	ldr	r2, [pc, #136]	; (8009794 <xTaskIncrementTick+0x160>)
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009710:	4613      	mov	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4a1f      	ldr	r2, [pc, #124]	; (8009798 <xTaskIncrementTick+0x164>)
 800971a:	441a      	add	r2, r3
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	3304      	adds	r3, #4
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f7fe f9ad 	bl	8007a82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972c:	4b1b      	ldr	r3, [pc, #108]	; (800979c <xTaskIncrementTick+0x168>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009732:	429a      	cmp	r2, r3
 8009734:	d3b8      	bcc.n	80096a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009736:	2301      	movs	r3, #1
 8009738:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800973a:	e7b5      	b.n	80096a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800973c:	4b17      	ldr	r3, [pc, #92]	; (800979c <xTaskIncrementTick+0x168>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009742:	4915      	ldr	r1, [pc, #84]	; (8009798 <xTaskIncrementTick+0x164>)
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	440b      	add	r3, r1
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d901      	bls.n	8009758 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009754:	2301      	movs	r3, #1
 8009756:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009758:	4b11      	ldr	r3, [pc, #68]	; (80097a0 <xTaskIncrementTick+0x16c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d007      	beq.n	8009770 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009760:	2301      	movs	r3, #1
 8009762:	617b      	str	r3, [r7, #20]
 8009764:	e004      	b.n	8009770 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009766:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <xTaskIncrementTick+0x170>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3301      	adds	r3, #1
 800976c:	4a0d      	ldr	r2, [pc, #52]	; (80097a4 <xTaskIncrementTick+0x170>)
 800976e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009770:	697b      	ldr	r3, [r7, #20]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	2400a248 	.word	0x2400a248
 8009780:	2400a224 	.word	0x2400a224
 8009784:	2400a1d8 	.word	0x2400a1d8
 8009788:	2400a1dc 	.word	0x2400a1dc
 800978c:	2400a238 	.word	0x2400a238
 8009790:	2400a240 	.word	0x2400a240
 8009794:	2400a228 	.word	0x2400a228
 8009798:	24009d50 	.word	0x24009d50
 800979c:	24009d4c 	.word	0x24009d4c
 80097a0:	2400a234 	.word	0x2400a234
 80097a4:	2400a230 	.word	0x2400a230

080097a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097ae:	4b28      	ldr	r3, [pc, #160]	; (8009850 <vTaskSwitchContext+0xa8>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d003      	beq.n	80097be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097b6:	4b27      	ldr	r3, [pc, #156]	; (8009854 <vTaskSwitchContext+0xac>)
 80097b8:	2201      	movs	r2, #1
 80097ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097bc:	e041      	b.n	8009842 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80097be:	4b25      	ldr	r3, [pc, #148]	; (8009854 <vTaskSwitchContext+0xac>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c4:	4b24      	ldr	r3, [pc, #144]	; (8009858 <vTaskSwitchContext+0xb0>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	e010      	b.n	80097ee <vTaskSwitchContext+0x46>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	607b      	str	r3, [r7, #4]
}
 80097e4:	bf00      	nop
 80097e6:	e7fe      	b.n	80097e6 <vTaskSwitchContext+0x3e>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	491b      	ldr	r1, [pc, #108]	; (800985c <vTaskSwitchContext+0xb4>)
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	440b      	add	r3, r1
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d0e4      	beq.n	80097cc <vTaskSwitchContext+0x24>
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	4613      	mov	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4a13      	ldr	r2, [pc, #76]	; (800985c <vTaskSwitchContext+0xb4>)
 800980e:	4413      	add	r3, r2
 8009810:	60bb      	str	r3, [r7, #8]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	605a      	str	r2, [r3, #4]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	685a      	ldr	r2, [r3, #4]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	3308      	adds	r3, #8
 8009824:	429a      	cmp	r2, r3
 8009826:	d104      	bne.n	8009832 <vTaskSwitchContext+0x8a>
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	605a      	str	r2, [r3, #4]
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	4a09      	ldr	r2, [pc, #36]	; (8009860 <vTaskSwitchContext+0xb8>)
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	4a06      	ldr	r2, [pc, #24]	; (8009858 <vTaskSwitchContext+0xb0>)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6013      	str	r3, [r2, #0]
}
 8009842:	bf00      	nop
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	2400a248 	.word	0x2400a248
 8009854:	2400a234 	.word	0x2400a234
 8009858:	2400a228 	.word	0x2400a228
 800985c:	24009d50 	.word	0x24009d50
 8009860:	24009d4c 	.word	0x24009d4c

08009864 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10a      	bne.n	800988a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	60fb      	str	r3, [r7, #12]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800988a:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <vTaskPlaceOnEventList+0x44>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3318      	adds	r3, #24
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7fe f919 	bl	8007aca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009898:	2101      	movs	r1, #1
 800989a:	6838      	ldr	r0, [r7, #0]
 800989c:	f000 fb7a 	bl	8009f94 <prvAddCurrentTaskToDelayedList>
}
 80098a0:	bf00      	nop
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	24009d4c 	.word	0x24009d4c

080098ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	617b      	str	r3, [r7, #20]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098d4:	4b0a      	ldr	r3, [pc, #40]	; (8009900 <vTaskPlaceOnEventListRestricted+0x54>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3318      	adds	r3, #24
 80098da:	4619      	mov	r1, r3
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f7fe f8d0 	bl	8007a82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80098e8:	f04f 33ff 	mov.w	r3, #4294967295
 80098ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	68b8      	ldr	r0, [r7, #8]
 80098f2:	f000 fb4f 	bl	8009f94 <prvAddCurrentTaskToDelayedList>
	}
 80098f6:	bf00      	nop
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	24009d4c 	.word	0x24009d4c

08009904 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10a      	bne.n	8009930 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	60fb      	str	r3, [r7, #12]
}
 800992c:	bf00      	nop
 800992e:	e7fe      	b.n	800992e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	3318      	adds	r3, #24
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe f901 	bl	8007b3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800993a:	4b1e      	ldr	r3, [pc, #120]	; (80099b4 <xTaskRemoveFromEventList+0xb0>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d11d      	bne.n	800997e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	3304      	adds	r3, #4
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe f8f8 	bl	8007b3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009950:	4b19      	ldr	r3, [pc, #100]	; (80099b8 <xTaskRemoveFromEventList+0xb4>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	429a      	cmp	r2, r3
 8009956:	d903      	bls.n	8009960 <xTaskRemoveFromEventList+0x5c>
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995c:	4a16      	ldr	r2, [pc, #88]	; (80099b8 <xTaskRemoveFromEventList+0xb4>)
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009964:	4613      	mov	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4a13      	ldr	r2, [pc, #76]	; (80099bc <xTaskRemoveFromEventList+0xb8>)
 800996e:	441a      	add	r2, r3
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	3304      	adds	r3, #4
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f7fe f883 	bl	8007a82 <vListInsertEnd>
 800997c:	e005      	b.n	800998a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	3318      	adds	r3, #24
 8009982:	4619      	mov	r1, r3
 8009984:	480e      	ldr	r0, [pc, #56]	; (80099c0 <xTaskRemoveFromEventList+0xbc>)
 8009986:	f7fe f87c 	bl	8007a82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998e:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <xTaskRemoveFromEventList+0xc0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	429a      	cmp	r2, r3
 8009996:	d905      	bls.n	80099a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009998:	2301      	movs	r3, #1
 800999a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800999c:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <xTaskRemoveFromEventList+0xc4>)
 800999e:	2201      	movs	r2, #1
 80099a0:	601a      	str	r2, [r3, #0]
 80099a2:	e001      	b.n	80099a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80099a4:	2300      	movs	r3, #0
 80099a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80099a8:	697b      	ldr	r3, [r7, #20]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3718      	adds	r7, #24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	2400a248 	.word	0x2400a248
 80099b8:	2400a228 	.word	0x2400a228
 80099bc:	24009d50 	.word	0x24009d50
 80099c0:	2400a1e0 	.word	0x2400a1e0
 80099c4:	24009d4c 	.word	0x24009d4c
 80099c8:	2400a234 	.word	0x2400a234

080099cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099d4:	4b06      	ldr	r3, [pc, #24]	; (80099f0 <vTaskInternalSetTimeOutState+0x24>)
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099dc:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <vTaskInternalSetTimeOutState+0x28>)
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	605a      	str	r2, [r3, #4]
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	2400a238 	.word	0x2400a238
 80099f4:	2400a224 	.word	0x2400a224

080099f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b088      	sub	sp, #32
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10a      	bne.n	8009a1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	613b      	str	r3, [r7, #16]
}
 8009a1a:	bf00      	nop
 8009a1c:	e7fe      	b.n	8009a1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	60fb      	str	r3, [r7, #12]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009a3a:	f7fe f9d3 	bl	8007de4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a3e:	4b1d      	ldr	r3, [pc, #116]	; (8009ab4 <xTaskCheckForTimeOut+0xbc>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a56:	d102      	bne.n	8009a5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	61fb      	str	r3, [r7, #28]
 8009a5c:	e023      	b.n	8009aa6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	4b15      	ldr	r3, [pc, #84]	; (8009ab8 <xTaskCheckForTimeOut+0xc0>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d007      	beq.n	8009a7a <xTaskCheckForTimeOut+0x82>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d302      	bcc.n	8009a7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a74:	2301      	movs	r3, #1
 8009a76:	61fb      	str	r3, [r7, #28]
 8009a78:	e015      	b.n	8009aa6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d20b      	bcs.n	8009a9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	1ad2      	subs	r2, r2, r3
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7ff ff9b 	bl	80099cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a96:	2300      	movs	r3, #0
 8009a98:	61fb      	str	r3, [r7, #28]
 8009a9a:	e004      	b.n	8009aa6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009aa6:	f7fe f9cd 	bl	8007e44 <vPortExitCritical>

	return xReturn;
 8009aaa:	69fb      	ldr	r3, [r7, #28]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3720      	adds	r7, #32
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	2400a224 	.word	0x2400a224
 8009ab8:	2400a238 	.word	0x2400a238

08009abc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ac0:	4b03      	ldr	r3, [pc, #12]	; (8009ad0 <vTaskMissedYield+0x14>)
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	601a      	str	r2, [r3, #0]
}
 8009ac6:	bf00      	nop
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	2400a234 	.word	0x2400a234

08009ad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009adc:	f000 f852 	bl	8009b84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ae0:	4b06      	ldr	r3, [pc, #24]	; (8009afc <prvIdleTask+0x28>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d9f9      	bls.n	8009adc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ae8:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <prvIdleTask+0x2c>)
 8009aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009af8:	e7f0      	b.n	8009adc <prvIdleTask+0x8>
 8009afa:	bf00      	nop
 8009afc:	24009d50 	.word	0x24009d50
 8009b00:	e000ed04 	.word	0xe000ed04

08009b04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	607b      	str	r3, [r7, #4]
 8009b0e:	e00c      	b.n	8009b2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4a12      	ldr	r2, [pc, #72]	; (8009b64 <prvInitialiseTaskLists+0x60>)
 8009b1c:	4413      	add	r3, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fd ff82 	bl	8007a28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3301      	adds	r3, #1
 8009b28:	607b      	str	r3, [r7, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b37      	cmp	r3, #55	; 0x37
 8009b2e:	d9ef      	bls.n	8009b10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b30:	480d      	ldr	r0, [pc, #52]	; (8009b68 <prvInitialiseTaskLists+0x64>)
 8009b32:	f7fd ff79 	bl	8007a28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b36:	480d      	ldr	r0, [pc, #52]	; (8009b6c <prvInitialiseTaskLists+0x68>)
 8009b38:	f7fd ff76 	bl	8007a28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b3c:	480c      	ldr	r0, [pc, #48]	; (8009b70 <prvInitialiseTaskLists+0x6c>)
 8009b3e:	f7fd ff73 	bl	8007a28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b42:	480c      	ldr	r0, [pc, #48]	; (8009b74 <prvInitialiseTaskLists+0x70>)
 8009b44:	f7fd ff70 	bl	8007a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b48:	480b      	ldr	r0, [pc, #44]	; (8009b78 <prvInitialiseTaskLists+0x74>)
 8009b4a:	f7fd ff6d 	bl	8007a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b4e:	4b0b      	ldr	r3, [pc, #44]	; (8009b7c <prvInitialiseTaskLists+0x78>)
 8009b50:	4a05      	ldr	r2, [pc, #20]	; (8009b68 <prvInitialiseTaskLists+0x64>)
 8009b52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b54:	4b0a      	ldr	r3, [pc, #40]	; (8009b80 <prvInitialiseTaskLists+0x7c>)
 8009b56:	4a05      	ldr	r2, [pc, #20]	; (8009b6c <prvInitialiseTaskLists+0x68>)
 8009b58:	601a      	str	r2, [r3, #0]
}
 8009b5a:	bf00      	nop
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	24009d50 	.word	0x24009d50
 8009b68:	2400a1b0 	.word	0x2400a1b0
 8009b6c:	2400a1c4 	.word	0x2400a1c4
 8009b70:	2400a1e0 	.word	0x2400a1e0
 8009b74:	2400a1f4 	.word	0x2400a1f4
 8009b78:	2400a20c 	.word	0x2400a20c
 8009b7c:	2400a1d8 	.word	0x2400a1d8
 8009b80:	2400a1dc 	.word	0x2400a1dc

08009b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b8a:	e019      	b.n	8009bc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b8c:	f7fe f92a 	bl	8007de4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b90:	4b10      	ldr	r3, [pc, #64]	; (8009bd4 <prvCheckTasksWaitingTermination+0x50>)
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fd ffcd 	bl	8007b3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ba2:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <prvCheckTasksWaitingTermination+0x54>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	4a0b      	ldr	r2, [pc, #44]	; (8009bd8 <prvCheckTasksWaitingTermination+0x54>)
 8009baa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <prvCheckTasksWaitingTermination+0x58>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	4a0a      	ldr	r2, [pc, #40]	; (8009bdc <prvCheckTasksWaitingTermination+0x58>)
 8009bb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009bb6:	f7fe f945 	bl	8007e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f810 	bl	8009be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bc0:	4b06      	ldr	r3, [pc, #24]	; (8009bdc <prvCheckTasksWaitingTermination+0x58>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e1      	bne.n	8009b8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	2400a1f4 	.word	0x2400a1f4
 8009bd8:	2400a220 	.word	0x2400a220
 8009bdc:	2400a208 	.word	0x2400a208

08009be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d108      	bne.n	8009c04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fd fdf8 	bl	80077ec <vPortFree>
				vPortFree( pxTCB );
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7fd fdf5 	bl	80077ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c02:	e018      	b.n	8009c36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d103      	bne.n	8009c16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7fd fdec 	bl	80077ec <vPortFree>
	}
 8009c14:	e00f      	b.n	8009c36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d00a      	beq.n	8009c36 <prvDeleteTCB+0x56>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	60fb      	str	r3, [r7, #12]
}
 8009c32:	bf00      	nop
 8009c34:	e7fe      	b.n	8009c34 <prvDeleteTCB+0x54>
	}
 8009c36:	bf00      	nop
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
	...

08009c40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c46:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <prvResetNextTaskUnblockTime+0x38>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d104      	bne.n	8009c5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c50:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <prvResetNextTaskUnblockTime+0x3c>)
 8009c52:	f04f 32ff 	mov.w	r2, #4294967295
 8009c56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c58:	e008      	b.n	8009c6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c5a:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <prvResetNextTaskUnblockTime+0x38>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	4a04      	ldr	r2, [pc, #16]	; (8009c7c <prvResetNextTaskUnblockTime+0x3c>)
 8009c6a:	6013      	str	r3, [r2, #0]
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	2400a1d8 	.word	0x2400a1d8
 8009c7c:	2400a240 	.word	0x2400a240

08009c80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c86:	4b0b      	ldr	r3, [pc, #44]	; (8009cb4 <xTaskGetSchedulerState+0x34>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	607b      	str	r3, [r7, #4]
 8009c92:	e008      	b.n	8009ca6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c94:	4b08      	ldr	r3, [pc, #32]	; (8009cb8 <xTaskGetSchedulerState+0x38>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d102      	bne.n	8009ca2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	607b      	str	r3, [r7, #4]
 8009ca0:	e001      	b.n	8009ca6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ca6:	687b      	ldr	r3, [r7, #4]
	}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	2400a22c 	.word	0x2400a22c
 8009cb8:	2400a248 	.word	0x2400a248

08009cbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d051      	beq.n	8009d76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd6:	4b2a      	ldr	r3, [pc, #168]	; (8009d80 <xTaskPriorityInherit+0xc4>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d241      	bcs.n	8009d64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	db06      	blt.n	8009cf6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ce8:	4b25      	ldr	r3, [pc, #148]	; (8009d80 <xTaskPriorityInherit+0xc4>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6959      	ldr	r1, [r3, #20]
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfe:	4613      	mov	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4a1f      	ldr	r2, [pc, #124]	; (8009d84 <xTaskPriorityInherit+0xc8>)
 8009d08:	4413      	add	r3, r2
 8009d0a:	4299      	cmp	r1, r3
 8009d0c:	d122      	bne.n	8009d54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	3304      	adds	r3, #4
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fd ff12 	bl	8007b3c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d18:	4b19      	ldr	r3, [pc, #100]	; (8009d80 <xTaskPriorityInherit+0xc4>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d26:	4b18      	ldr	r3, [pc, #96]	; (8009d88 <xTaskPriorityInherit+0xcc>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d903      	bls.n	8009d36 <xTaskPriorityInherit+0x7a>
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d32:	4a15      	ldr	r2, [pc, #84]	; (8009d88 <xTaskPriorityInherit+0xcc>)
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4a10      	ldr	r2, [pc, #64]	; (8009d84 <xTaskPriorityInherit+0xc8>)
 8009d44:	441a      	add	r2, r3
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	f7fd fe98 	bl	8007a82 <vListInsertEnd>
 8009d52:	e004      	b.n	8009d5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d54:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <xTaskPriorityInherit+0xc4>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	60fb      	str	r3, [r7, #12]
 8009d62:	e008      	b.n	8009d76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d68:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <xTaskPriorityInherit+0xc4>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d201      	bcs.n	8009d76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009d72:	2301      	movs	r3, #1
 8009d74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d76:	68fb      	ldr	r3, [r7, #12]
	}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	24009d4c 	.word	0x24009d4c
 8009d84:	24009d50 	.word	0x24009d50
 8009d88:	2400a228 	.word	0x2400a228

08009d8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d056      	beq.n	8009e50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009da2:	4b2e      	ldr	r3, [pc, #184]	; (8009e5c <xTaskPriorityDisinherit+0xd0>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d00a      	beq.n	8009dc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	60fb      	str	r3, [r7, #12]
}
 8009dbe:	bf00      	nop
 8009dc0:	e7fe      	b.n	8009dc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10a      	bne.n	8009de0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	60bb      	str	r3, [r7, #8]
}
 8009ddc:	bf00      	nop
 8009dde:	e7fe      	b.n	8009dde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de4:	1e5a      	subs	r2, r3, #1
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d02c      	beq.n	8009e50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d128      	bne.n	8009e50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	3304      	adds	r3, #4
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fd fe9a 	bl	8007b3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e20:	4b0f      	ldr	r3, [pc, #60]	; (8009e60 <xTaskPriorityDisinherit+0xd4>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d903      	bls.n	8009e30 <xTaskPriorityDisinherit+0xa4>
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2c:	4a0c      	ldr	r2, [pc, #48]	; (8009e60 <xTaskPriorityDisinherit+0xd4>)
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e34:	4613      	mov	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4a09      	ldr	r2, [pc, #36]	; (8009e64 <xTaskPriorityDisinherit+0xd8>)
 8009e3e:	441a      	add	r2, r3
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	3304      	adds	r3, #4
 8009e44:	4619      	mov	r1, r3
 8009e46:	4610      	mov	r0, r2
 8009e48:	f7fd fe1b 	bl	8007a82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e50:	697b      	ldr	r3, [r7, #20]
	}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	24009d4c 	.word	0x24009d4c
 8009e60:	2400a228 	.word	0x2400a228
 8009e64:	24009d50 	.word	0x24009d50

08009e68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b088      	sub	sp, #32
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009e76:	2301      	movs	r3, #1
 8009e78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d06a      	beq.n	8009f56 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10a      	bne.n	8009e9e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	60fb      	str	r3, [r7, #12]
}
 8009e9a:	bf00      	nop
 8009e9c:	e7fe      	b.n	8009e9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d902      	bls.n	8009eae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	61fb      	str	r3, [r7, #28]
 8009eac:	e002      	b.n	8009eb4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eb2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb8:	69fa      	ldr	r2, [r7, #28]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d04b      	beq.n	8009f56 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d146      	bne.n	8009f56 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009ec8:	4b25      	ldr	r3, [pc, #148]	; (8009f60 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d10a      	bne.n	8009ee8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	60bb      	str	r3, [r7, #8]
}
 8009ee4:	bf00      	nop
 8009ee6:	e7fe      	b.n	8009ee6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	69fa      	ldr	r2, [r7, #28]
 8009ef2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	db04      	blt.n	8009f06 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	6959      	ldr	r1, [r3, #20]
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4a13      	ldr	r2, [pc, #76]	; (8009f64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009f16:	4413      	add	r3, r2
 8009f18:	4299      	cmp	r1, r3
 8009f1a:	d11c      	bne.n	8009f56 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	3304      	adds	r3, #4
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fd fe0b 	bl	8007b3c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2a:	4b0f      	ldr	r3, [pc, #60]	; (8009f68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d903      	bls.n	8009f3a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	4a0c      	ldr	r2, [pc, #48]	; (8009f68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f3e:	4613      	mov	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4a07      	ldr	r2, [pc, #28]	; (8009f64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009f48:	441a      	add	r2, r3
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4610      	mov	r0, r2
 8009f52:	f7fd fd96 	bl	8007a82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f56:	bf00      	nop
 8009f58:	3720      	adds	r7, #32
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	24009d4c 	.word	0x24009d4c
 8009f64:	24009d50 	.word	0x24009d50
 8009f68:	2400a228 	.word	0x2400a228

08009f6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009f6c:	b480      	push	{r7}
 8009f6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d004      	beq.n	8009f82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009f78:	4b05      	ldr	r3, [pc, #20]	; (8009f90 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f7e:	3201      	adds	r2, #1
 8009f80:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009f82:	4b03      	ldr	r3, [pc, #12]	; (8009f90 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f84:	681b      	ldr	r3, [r3, #0]
	}
 8009f86:	4618      	mov	r0, r3
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	24009d4c 	.word	0x24009d4c

08009f94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f9e:	4b21      	ldr	r3, [pc, #132]	; (800a024 <prvAddCurrentTaskToDelayedList+0x90>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fa4:	4b20      	ldr	r3, [pc, #128]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3304      	adds	r3, #4
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fd fdc6 	bl	8007b3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb6:	d10a      	bne.n	8009fce <prvAddCurrentTaskToDelayedList+0x3a>
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d007      	beq.n	8009fce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fbe:	4b1a      	ldr	r3, [pc, #104]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4819      	ldr	r0, [pc, #100]	; (800a02c <prvAddCurrentTaskToDelayedList+0x98>)
 8009fc8:	f7fd fd5b 	bl	8007a82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fcc:	e026      	b.n	800a01c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fd6:	4b14      	ldr	r3, [pc, #80]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d209      	bcs.n	8009ffa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fe6:	4b12      	ldr	r3, [pc, #72]	; (800a030 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	4b0f      	ldr	r3, [pc, #60]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3304      	adds	r3, #4
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	f7fd fd69 	bl	8007aca <vListInsert>
}
 8009ff8:	e010      	b.n	800a01c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ffa:	4b0e      	ldr	r3, [pc, #56]	; (800a034 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4b0a      	ldr	r3, [pc, #40]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3304      	adds	r3, #4
 800a004:	4619      	mov	r1, r3
 800a006:	4610      	mov	r0, r2
 800a008:	f7fd fd5f 	bl	8007aca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a00c:	4b0a      	ldr	r3, [pc, #40]	; (800a038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	429a      	cmp	r2, r3
 800a014:	d202      	bcs.n	800a01c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a016:	4a08      	ldr	r2, [pc, #32]	; (800a038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	6013      	str	r3, [r2, #0]
}
 800a01c:	bf00      	nop
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	2400a224 	.word	0x2400a224
 800a028:	24009d4c 	.word	0x24009d4c
 800a02c:	2400a20c 	.word	0x2400a20c
 800a030:	2400a1dc 	.word	0x2400a1dc
 800a034:	2400a1d8 	.word	0x2400a1d8
 800a038:	2400a240 	.word	0x2400a240

0800a03c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08a      	sub	sp, #40	; 0x28
 800a040:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a046:	f000 fb07 	bl	800a658 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a04a:	4b1c      	ldr	r3, [pc, #112]	; (800a0bc <xTimerCreateTimerTask+0x80>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d021      	beq.n	800a096 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a056:	2300      	movs	r3, #0
 800a058:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a05a:	1d3a      	adds	r2, r7, #4
 800a05c:	f107 0108 	add.w	r1, r7, #8
 800a060:	f107 030c 	add.w	r3, r7, #12
 800a064:	4618      	mov	r0, r3
 800a066:	f7fd fadb 	bl	8007620 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a06a:	6879      	ldr	r1, [r7, #4]
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	9202      	str	r2, [sp, #8]
 800a072:	9301      	str	r3, [sp, #4]
 800a074:	2302      	movs	r3, #2
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	2300      	movs	r3, #0
 800a07a:	460a      	mov	r2, r1
 800a07c:	4910      	ldr	r1, [pc, #64]	; (800a0c0 <xTimerCreateTimerTask+0x84>)
 800a07e:	4811      	ldr	r0, [pc, #68]	; (800a0c4 <xTimerCreateTimerTask+0x88>)
 800a080:	f7fe ffe0 	bl	8009044 <xTaskCreateStatic>
 800a084:	4603      	mov	r3, r0
 800a086:	4a10      	ldr	r2, [pc, #64]	; (800a0c8 <xTimerCreateTimerTask+0x8c>)
 800a088:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a08a:	4b0f      	ldr	r3, [pc, #60]	; (800a0c8 <xTimerCreateTimerTask+0x8c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a092:	2301      	movs	r3, #1
 800a094:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10a      	bne.n	800a0b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	613b      	str	r3, [r7, #16]
}
 800a0ae:	bf00      	nop
 800a0b0:	e7fe      	b.n	800a0b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a0b2:	697b      	ldr	r3, [r7, #20]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3718      	adds	r7, #24
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	2400a27c 	.word	0x2400a27c
 800a0c0:	0802767c 	.word	0x0802767c
 800a0c4:	0800a201 	.word	0x0800a201
 800a0c8:	2400a280 	.word	0x2400a280

0800a0cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b08a      	sub	sp, #40	; 0x28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
 800a0d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10a      	bne.n	800a0fa <xTimerGenericCommand+0x2e>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	623b      	str	r3, [r7, #32]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0fa:	4b1a      	ldr	r3, [pc, #104]	; (800a164 <xTimerGenericCommand+0x98>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d02a      	beq.n	800a158 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b05      	cmp	r3, #5
 800a112:	dc18      	bgt.n	800a146 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a114:	f7ff fdb4 	bl	8009c80 <xTaskGetSchedulerState>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d109      	bne.n	800a132 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a11e:	4b11      	ldr	r3, [pc, #68]	; (800a164 <xTimerGenericCommand+0x98>)
 800a120:	6818      	ldr	r0, [r3, #0]
 800a122:	f107 0110 	add.w	r1, r7, #16
 800a126:	2300      	movs	r3, #0
 800a128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a12a:	f7fe f925 	bl	8008378 <xQueueGenericSend>
 800a12e:	6278      	str	r0, [r7, #36]	; 0x24
 800a130:	e012      	b.n	800a158 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a132:	4b0c      	ldr	r3, [pc, #48]	; (800a164 <xTimerGenericCommand+0x98>)
 800a134:	6818      	ldr	r0, [r3, #0]
 800a136:	f107 0110 	add.w	r1, r7, #16
 800a13a:	2300      	movs	r3, #0
 800a13c:	2200      	movs	r2, #0
 800a13e:	f7fe f91b 	bl	8008378 <xQueueGenericSend>
 800a142:	6278      	str	r0, [r7, #36]	; 0x24
 800a144:	e008      	b.n	800a158 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a146:	4b07      	ldr	r3, [pc, #28]	; (800a164 <xTimerGenericCommand+0x98>)
 800a148:	6818      	ldr	r0, [r3, #0]
 800a14a:	f107 0110 	add.w	r1, r7, #16
 800a14e:	2300      	movs	r3, #0
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	f7fe fa0f 	bl	8008574 <xQueueGenericSendFromISR>
 800a156:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3728      	adds	r7, #40	; 0x28
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	2400a27c 	.word	0x2400a27c

0800a168 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b088      	sub	sp, #32
 800a16c:	af02      	add	r7, sp, #8
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a172:	4b22      	ldr	r3, [pc, #136]	; (800a1fc <prvProcessExpiredTimer+0x94>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	3304      	adds	r3, #4
 800a180:	4618      	mov	r0, r3
 800a182:	f7fd fcdb 	bl	8007b3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	d022      	beq.n	800a1da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	699a      	ldr	r2, [r3, #24]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	18d1      	adds	r1, r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	6978      	ldr	r0, [r7, #20]
 800a1a2:	f000 f8d1 	bl	800a348 <prvInsertTimerInActiveList>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d01f      	beq.n	800a1ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	6978      	ldr	r0, [r7, #20]
 800a1b8:	f7ff ff88 	bl	800a0cc <xTimerGenericCommand>
 800a1bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d113      	bne.n	800a1ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	60fb      	str	r3, [r7, #12]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1e0:	f023 0301 	bic.w	r3, r3, #1
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	6978      	ldr	r0, [r7, #20]
 800a1f2:	4798      	blx	r3
}
 800a1f4:	bf00      	nop
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	2400a274 	.word	0x2400a274

0800a200 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a208:	f107 0308 	add.w	r3, r7, #8
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 f857 	bl	800a2c0 <prvGetNextExpireTime>
 800a212:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	4619      	mov	r1, r3
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f803 	bl	800a224 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a21e:	f000 f8d5 	bl	800a3cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a222:	e7f1      	b.n	800a208 <prvTimerTask+0x8>

0800a224 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a22e:	f7ff f945 	bl	80094bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a232:	f107 0308 	add.w	r3, r7, #8
 800a236:	4618      	mov	r0, r3
 800a238:	f000 f866 	bl	800a308 <prvSampleTimeNow>
 800a23c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d130      	bne.n	800a2a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10a      	bne.n	800a260 <prvProcessTimerOrBlockTask+0x3c>
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d806      	bhi.n	800a260 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a252:	f7ff f941 	bl	80094d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a256:	68f9      	ldr	r1, [r7, #12]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff ff85 	bl	800a168 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a25e:	e024      	b.n	800a2aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d008      	beq.n	800a278 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a266:	4b13      	ldr	r3, [pc, #76]	; (800a2b4 <prvProcessTimerOrBlockTask+0x90>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d101      	bne.n	800a274 <prvProcessTimerOrBlockTask+0x50>
 800a270:	2301      	movs	r3, #1
 800a272:	e000      	b.n	800a276 <prvProcessTimerOrBlockTask+0x52>
 800a274:	2300      	movs	r3, #0
 800a276:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a278:	4b0f      	ldr	r3, [pc, #60]	; (800a2b8 <prvProcessTimerOrBlockTask+0x94>)
 800a27a:	6818      	ldr	r0, [r3, #0]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	4619      	mov	r1, r3
 800a286:	f7fe fea9 	bl	8008fdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a28a:	f7ff f925 	bl	80094d8 <xTaskResumeAll>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10a      	bne.n	800a2aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a294:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <prvProcessTimerOrBlockTask+0x98>)
 800a296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a29a:	601a      	str	r2, [r3, #0]
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	f3bf 8f6f 	isb	sy
}
 800a2a4:	e001      	b.n	800a2aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a2a6:	f7ff f917 	bl	80094d8 <xTaskResumeAll>
}
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	2400a278 	.word	0x2400a278
 800a2b8:	2400a27c 	.word	0x2400a27c
 800a2bc:	e000ed04 	.word	0xe000ed04

0800a2c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2c8:	4b0e      	ldr	r3, [pc, #56]	; (800a304 <prvGetNextExpireTime+0x44>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <prvGetNextExpireTime+0x16>
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	e000      	b.n	800a2d8 <prvGetNextExpireTime+0x18>
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d105      	bne.n	800a2f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2e4:	4b07      	ldr	r3, [pc, #28]	; (800a304 <prvGetNextExpireTime+0x44>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	e001      	b.n	800a2f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	2400a274 	.word	0x2400a274

0800a308 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a310:	f7ff f980 	bl	8009614 <xTaskGetTickCount>
 800a314:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a316:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <prvSampleTimeNow+0x3c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d205      	bcs.n	800a32c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a320:	f000 f936 	bl	800a590 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	e002      	b.n	800a332 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a332:	4a04      	ldr	r2, [pc, #16]	; (800a344 <prvSampleTimeNow+0x3c>)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a338:	68fb      	ldr	r3, [r7, #12]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	2400a284 	.word	0x2400a284

0800a348 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
 800a354:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a356:	2300      	movs	r3, #0
 800a358:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d812      	bhi.n	800a394 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	1ad2      	subs	r2, r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d302      	bcc.n	800a382 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a37c:	2301      	movs	r3, #1
 800a37e:	617b      	str	r3, [r7, #20]
 800a380:	e01b      	b.n	800a3ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a382:	4b10      	ldr	r3, [pc, #64]	; (800a3c4 <prvInsertTimerInActiveList+0x7c>)
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3304      	adds	r3, #4
 800a38a:	4619      	mov	r1, r3
 800a38c:	4610      	mov	r0, r2
 800a38e:	f7fd fb9c 	bl	8007aca <vListInsert>
 800a392:	e012      	b.n	800a3ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d206      	bcs.n	800a3aa <prvInsertTimerInActiveList+0x62>
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d302      	bcc.n	800a3aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	617b      	str	r3, [r7, #20]
 800a3a8:	e007      	b.n	800a3ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3aa:	4b07      	ldr	r3, [pc, #28]	; (800a3c8 <prvInsertTimerInActiveList+0x80>)
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	f7fd fb88 	bl	8007aca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a3ba:	697b      	ldr	r3, [r7, #20]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	2400a278 	.word	0x2400a278
 800a3c8:	2400a274 	.word	0x2400a274

0800a3cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b08e      	sub	sp, #56	; 0x38
 800a3d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3d2:	e0ca      	b.n	800a56a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	da18      	bge.n	800a40c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a3da:	1d3b      	adds	r3, r7, #4
 800a3dc:	3304      	adds	r3, #4
 800a3de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10a      	bne.n	800a3fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	61fb      	str	r3, [r7, #28]
}
 800a3f8:	bf00      	nop
 800a3fa:	e7fe      	b.n	800a3fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a402:	6850      	ldr	r0, [r2, #4]
 800a404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a406:	6892      	ldr	r2, [r2, #8]
 800a408:	4611      	mov	r1, r2
 800a40a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f2c0 80aa 	blt.w	800a568 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d004      	beq.n	800a42a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	3304      	adds	r3, #4
 800a424:	4618      	mov	r0, r3
 800a426:	f7fd fb89 	bl	8007b3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a42a:	463b      	mov	r3, r7
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff ff6b 	bl	800a308 <prvSampleTimeNow>
 800a432:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b09      	cmp	r3, #9
 800a438:	f200 8097 	bhi.w	800a56a <prvProcessReceivedCommands+0x19e>
 800a43c:	a201      	add	r2, pc, #4	; (adr r2, 800a444 <prvProcessReceivedCommands+0x78>)
 800a43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a442:	bf00      	nop
 800a444:	0800a46d 	.word	0x0800a46d
 800a448:	0800a46d 	.word	0x0800a46d
 800a44c:	0800a46d 	.word	0x0800a46d
 800a450:	0800a4e1 	.word	0x0800a4e1
 800a454:	0800a4f5 	.word	0x0800a4f5
 800a458:	0800a53f 	.word	0x0800a53f
 800a45c:	0800a46d 	.word	0x0800a46d
 800a460:	0800a46d 	.word	0x0800a46d
 800a464:	0800a4e1 	.word	0x0800a4e1
 800a468:	0800a4f5 	.word	0x0800a4f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a472:	f043 0301 	orr.w	r3, r3, #1
 800a476:	b2da      	uxtb	r2, r3
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	18d1      	adds	r1, r2, r3
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a48a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a48c:	f7ff ff5c 	bl	800a348 <prvInsertTimerInActiveList>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d069      	beq.n	800a56a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a49c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d05e      	beq.n	800a56a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	441a      	add	r2, r3
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4be:	f7ff fe05 	bl	800a0cc <xTimerGenericCommand>
 800a4c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d14f      	bne.n	800a56a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	61bb      	str	r3, [r7, #24]
}
 800a4dc:	bf00      	nop
 800a4de:	e7fe      	b.n	800a4de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4e6:	f023 0301 	bic.w	r3, r3, #1
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a4f2:	e03a      	b.n	800a56a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4fa:	f043 0301 	orr.w	r3, r3, #1
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10a      	bne.n	800a52a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	617b      	str	r3, [r7, #20]
}
 800a526:	bf00      	nop
 800a528:	e7fe      	b.n	800a528 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	699a      	ldr	r2, [r3, #24]
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	18d1      	adds	r1, r2, r3
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a538:	f7ff ff06 	bl	800a348 <prvInsertTimerInActiveList>
					break;
 800a53c:	e015      	b.n	800a56a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a544:	f003 0302 	and.w	r3, r3, #2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d103      	bne.n	800a554 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a54c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a54e:	f7fd f94d 	bl	80077ec <vPortFree>
 800a552:	e00a      	b.n	800a56a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a55a:	f023 0301 	bic.w	r3, r3, #1
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a566:	e000      	b.n	800a56a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a568:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a56a:	4b08      	ldr	r3, [pc, #32]	; (800a58c <prvProcessReceivedCommands+0x1c0>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	1d39      	adds	r1, r7, #4
 800a570:	2200      	movs	r2, #0
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe f926 	bl	80087c4 <xQueueReceive>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f47f af2a 	bne.w	800a3d4 <prvProcessReceivedCommands+0x8>
	}
}
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	3730      	adds	r7, #48	; 0x30
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	2400a27c 	.word	0x2400a27c

0800a590 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a596:	e048      	b.n	800a62a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a598:	4b2d      	ldr	r3, [pc, #180]	; (800a650 <prvSwitchTimerLists+0xc0>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a2:	4b2b      	ldr	r3, [pc, #172]	; (800a650 <prvSwitchTimerLists+0xc0>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fd fac3 	bl	8007b3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d02e      	beq.n	800a62a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d90e      	bls.n	800a5fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5ea:	4b19      	ldr	r3, [pc, #100]	; (800a650 <prvSwitchTimerLists+0xc0>)
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	f7fd fa68 	bl	8007aca <vListInsert>
 800a5fa:	e016      	b.n	800a62a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	2300      	movs	r3, #0
 800a602:	693a      	ldr	r2, [r7, #16]
 800a604:	2100      	movs	r1, #0
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f7ff fd60 	bl	800a0cc <xTimerGenericCommand>
 800a60c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10a      	bne.n	800a62a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	603b      	str	r3, [r7, #0]
}
 800a626:	bf00      	nop
 800a628:	e7fe      	b.n	800a628 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a62a:	4b09      	ldr	r3, [pc, #36]	; (800a650 <prvSwitchTimerLists+0xc0>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1b1      	bne.n	800a598 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a634:	4b06      	ldr	r3, [pc, #24]	; (800a650 <prvSwitchTimerLists+0xc0>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a63a:	4b06      	ldr	r3, [pc, #24]	; (800a654 <prvSwitchTimerLists+0xc4>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a04      	ldr	r2, [pc, #16]	; (800a650 <prvSwitchTimerLists+0xc0>)
 800a640:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a642:	4a04      	ldr	r2, [pc, #16]	; (800a654 <prvSwitchTimerLists+0xc4>)
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	6013      	str	r3, [r2, #0]
}
 800a648:	bf00      	nop
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	2400a274 	.word	0x2400a274
 800a654:	2400a278 	.word	0x2400a278

0800a658 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a65e:	f7fd fbc1 	bl	8007de4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a662:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <prvCheckForValidListAndQueue+0x60>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d120      	bne.n	800a6ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a66a:	4814      	ldr	r0, [pc, #80]	; (800a6bc <prvCheckForValidListAndQueue+0x64>)
 800a66c:	f7fd f9dc 	bl	8007a28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a670:	4813      	ldr	r0, [pc, #76]	; (800a6c0 <prvCheckForValidListAndQueue+0x68>)
 800a672:	f7fd f9d9 	bl	8007a28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a676:	4b13      	ldr	r3, [pc, #76]	; (800a6c4 <prvCheckForValidListAndQueue+0x6c>)
 800a678:	4a10      	ldr	r2, [pc, #64]	; (800a6bc <prvCheckForValidListAndQueue+0x64>)
 800a67a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a67c:	4b12      	ldr	r3, [pc, #72]	; (800a6c8 <prvCheckForValidListAndQueue+0x70>)
 800a67e:	4a10      	ldr	r2, [pc, #64]	; (800a6c0 <prvCheckForValidListAndQueue+0x68>)
 800a680:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a682:	2300      	movs	r3, #0
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	4b11      	ldr	r3, [pc, #68]	; (800a6cc <prvCheckForValidListAndQueue+0x74>)
 800a688:	4a11      	ldr	r2, [pc, #68]	; (800a6d0 <prvCheckForValidListAndQueue+0x78>)
 800a68a:	2110      	movs	r1, #16
 800a68c:	200a      	movs	r0, #10
 800a68e:	f7fd fd33 	bl	80080f8 <xQueueGenericCreateStatic>
 800a692:	4603      	mov	r3, r0
 800a694:	4a08      	ldr	r2, [pc, #32]	; (800a6b8 <prvCheckForValidListAndQueue+0x60>)
 800a696:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a698:	4b07      	ldr	r3, [pc, #28]	; (800a6b8 <prvCheckForValidListAndQueue+0x60>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d005      	beq.n	800a6ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a6a0:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <prvCheckForValidListAndQueue+0x60>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	490b      	ldr	r1, [pc, #44]	; (800a6d4 <prvCheckForValidListAndQueue+0x7c>)
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fc44 	bl	8008f34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6ac:	f7fd fbca 	bl	8007e44 <vPortExitCritical>
}
 800a6b0:	bf00      	nop
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	2400a27c 	.word	0x2400a27c
 800a6bc:	2400a24c 	.word	0x2400a24c
 800a6c0:	2400a260 	.word	0x2400a260
 800a6c4:	2400a274 	.word	0x2400a274
 800a6c8:	2400a278 	.word	0x2400a278
 800a6cc:	2400a328 	.word	0x2400a328
 800a6d0:	2400a288 	.word	0x2400a288
 800a6d4:	08027684 	.word	0x08027684

0800a6d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a6dc:	4b3f      	ldr	r3, [pc, #252]	; (800a7dc <SystemInit+0x104>)
 800a6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e2:	4a3e      	ldr	r2, [pc, #248]	; (800a7dc <SystemInit+0x104>)
 800a6e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800a6ec:	4b3b      	ldr	r3, [pc, #236]	; (800a7dc <SystemInit+0x104>)
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	4a3a      	ldr	r2, [pc, #232]	; (800a7dc <SystemInit+0x104>)
 800a6f2:	f043 0310 	orr.w	r3, r3, #16
 800a6f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a6f8:	4b39      	ldr	r3, [pc, #228]	; (800a7e0 <SystemInit+0x108>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 030f 	and.w	r3, r3, #15
 800a700:	2b06      	cmp	r3, #6
 800a702:	d807      	bhi.n	800a714 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a704:	4b36      	ldr	r3, [pc, #216]	; (800a7e0 <SystemInit+0x108>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f023 030f 	bic.w	r3, r3, #15
 800a70c:	4a34      	ldr	r2, [pc, #208]	; (800a7e0 <SystemInit+0x108>)
 800a70e:	f043 0307 	orr.w	r3, r3, #7
 800a712:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a714:	4b33      	ldr	r3, [pc, #204]	; (800a7e4 <SystemInit+0x10c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a32      	ldr	r2, [pc, #200]	; (800a7e4 <SystemInit+0x10c>)
 800a71a:	f043 0301 	orr.w	r3, r3, #1
 800a71e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a720:	4b30      	ldr	r3, [pc, #192]	; (800a7e4 <SystemInit+0x10c>)
 800a722:	2200      	movs	r2, #0
 800a724:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a726:	4b2f      	ldr	r3, [pc, #188]	; (800a7e4 <SystemInit+0x10c>)
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	492e      	ldr	r1, [pc, #184]	; (800a7e4 <SystemInit+0x10c>)
 800a72c:	4b2e      	ldr	r3, [pc, #184]	; (800a7e8 <SystemInit+0x110>)
 800a72e:	4013      	ands	r3, r2
 800a730:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a732:	4b2b      	ldr	r3, [pc, #172]	; (800a7e0 <SystemInit+0x108>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0308 	and.w	r3, r3, #8
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d007      	beq.n	800a74e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a73e:	4b28      	ldr	r3, [pc, #160]	; (800a7e0 <SystemInit+0x108>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f023 030f 	bic.w	r3, r3, #15
 800a746:	4a26      	ldr	r2, [pc, #152]	; (800a7e0 <SystemInit+0x108>)
 800a748:	f043 0307 	orr.w	r3, r3, #7
 800a74c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a74e:	4b25      	ldr	r3, [pc, #148]	; (800a7e4 <SystemInit+0x10c>)
 800a750:	2200      	movs	r2, #0
 800a752:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800a754:	4b23      	ldr	r3, [pc, #140]	; (800a7e4 <SystemInit+0x10c>)
 800a756:	2200      	movs	r2, #0
 800a758:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800a75a:	4b22      	ldr	r3, [pc, #136]	; (800a7e4 <SystemInit+0x10c>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a760:	4b20      	ldr	r3, [pc, #128]	; (800a7e4 <SystemInit+0x10c>)
 800a762:	4a22      	ldr	r2, [pc, #136]	; (800a7ec <SystemInit+0x114>)
 800a764:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a766:	4b1f      	ldr	r3, [pc, #124]	; (800a7e4 <SystemInit+0x10c>)
 800a768:	4a21      	ldr	r2, [pc, #132]	; (800a7f0 <SystemInit+0x118>)
 800a76a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a76c:	4b1d      	ldr	r3, [pc, #116]	; (800a7e4 <SystemInit+0x10c>)
 800a76e:	4a21      	ldr	r2, [pc, #132]	; (800a7f4 <SystemInit+0x11c>)
 800a770:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a772:	4b1c      	ldr	r3, [pc, #112]	; (800a7e4 <SystemInit+0x10c>)
 800a774:	2200      	movs	r2, #0
 800a776:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a778:	4b1a      	ldr	r3, [pc, #104]	; (800a7e4 <SystemInit+0x10c>)
 800a77a:	4a1e      	ldr	r2, [pc, #120]	; (800a7f4 <SystemInit+0x11c>)
 800a77c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a77e:	4b19      	ldr	r3, [pc, #100]	; (800a7e4 <SystemInit+0x10c>)
 800a780:	2200      	movs	r2, #0
 800a782:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a784:	4b17      	ldr	r3, [pc, #92]	; (800a7e4 <SystemInit+0x10c>)
 800a786:	4a1b      	ldr	r2, [pc, #108]	; (800a7f4 <SystemInit+0x11c>)
 800a788:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a78a:	4b16      	ldr	r3, [pc, #88]	; (800a7e4 <SystemInit+0x10c>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a790:	4b14      	ldr	r3, [pc, #80]	; (800a7e4 <SystemInit+0x10c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a13      	ldr	r2, [pc, #76]	; (800a7e4 <SystemInit+0x10c>)
 800a796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a79a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a79c:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <SystemInit+0x10c>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800a7a2:	4b15      	ldr	r3, [pc, #84]	; (800a7f8 <SystemInit+0x120>)
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	4a14      	ldr	r2, [pc, #80]	; (800a7f8 <SystemInit+0x120>)
 800a7a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800a7ae:	4b13      	ldr	r3, [pc, #76]	; (800a7fc <SystemInit+0x124>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	4b13      	ldr	r3, [pc, #76]	; (800a800 <SystemInit+0x128>)
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7ba:	d202      	bcs.n	800a7c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800a7bc:	4b11      	ldr	r3, [pc, #68]	; (800a804 <SystemInit+0x12c>)
 800a7be:	2201      	movs	r2, #1
 800a7c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800a7c2:	4b11      	ldr	r3, [pc, #68]	; (800a808 <SystemInit+0x130>)
 800a7c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800a7c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800a7ca:	4b04      	ldr	r3, [pc, #16]	; (800a7dc <SystemInit+0x104>)
 800a7cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a7d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800a7d2:	bf00      	nop
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	e000ed00 	.word	0xe000ed00
 800a7e0:	52002000 	.word	0x52002000
 800a7e4:	58024400 	.word	0x58024400
 800a7e8:	eaf6ed7f 	.word	0xeaf6ed7f
 800a7ec:	02020200 	.word	0x02020200
 800a7f0:	01ff0000 	.word	0x01ff0000
 800a7f4:	01010280 	.word	0x01010280
 800a7f8:	580000c0 	.word	0x580000c0
 800a7fc:	5c001000 	.word	0x5c001000
 800a800:	ffff0000 	.word	0xffff0000
 800a804:	51008108 	.word	0x51008108
 800a808:	52004000 	.word	0x52004000

0800a80c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d103      	bne.n	800a824 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800a81c:	f04f 33ff 	mov.w	r3, #4294967295
 800a820:	60fb      	str	r3, [r7, #12]
 800a822:	e02c      	b.n	800a87e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	891a      	ldrh	r2, [r3, #8]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	68da      	ldr	r2, [r3, #12]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	691a      	ldr	r2, [r3, #16]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	695a      	ldr	r2, [r3, #20]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a0c      	ldr	r2, [pc, #48]	; (800a888 <FT5336_RegisterBusIO+0x7c>)
 800a858:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a0b      	ldr	r2, [pc, #44]	; (800a88c <FT5336_RegisterBusIO+0x80>)
 800a85e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d004      	beq.n	800a878 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4798      	blx	r3
 800a874:	60f8      	str	r0, [r7, #12]
 800a876:	e002      	b.n	800a87e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800a878:	f04f 33ff 	mov.w	r3, #4294967295
 800a87c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a87e:	68fb      	ldr	r3, [r7, #12]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	0800ac93 	.word	0x0800ac93
 800a88c:	0800acc7 	.word	0x0800acc7

0800a890 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2201      	movs	r2, #1
 800a89e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2205      	movs	r2, #5
 800a8aa:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a8b2:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a8ba:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10d      	bne.n	800a8fc <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f98e 	bl	800ac08 <FT5336_DisableIT>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800a902:	f04f 33ff 	mov.w	r3, #4294967295
 800a906:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a908:	68fb      	ldr	r3, [r7, #12]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800a912:	b480      	push	{r7}
 800a914:	b085      	sub	sp, #20
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a924:	2b01      	cmp	r3, #1
 800a926:	d103      	bne.n	800a930 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800a930:	68fb      	ldr	r3, [r7, #12]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
 800a946:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f103 0218 	add.w	r2, r3, #24
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	4619      	mov	r1, r3
 800a956:	4610      	mov	r0, r2
 800a958:	f000 fa2c 	bl	800adb4 <ft5336_radian_value>
 800a95c:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f103 0218 	add.w	r2, r3, #24
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	4619      	mov	r1, r3
 800a96c:	4610      	mov	r0, r2
 800a96e:	f000 fa32 	bl	800add6 <ft5336_offset_left_right>
 800a972:	4602      	mov	r2, r0
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	4413      	add	r3, r2
 800a978:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f103 0218 	add.w	r2, r3, #24
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	b2db      	uxtb	r3, r3
 800a986:	4619      	mov	r1, r3
 800a988:	4610      	mov	r0, r2
 800a98a:	f000 fa35 	bl	800adf8 <ft5336_offset_up_down>
 800a98e:	4602      	mov	r2, r0
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	4413      	add	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f103 0218 	add.w	r2, r3, #24
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	f000 fa38 	bl	800ae1a <ft5336_disatnce_left_right>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f103 0218 	add.w	r2, r3, #24
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	f000 fa3b 	bl	800ae3c <ft5336_distance_up_down>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f103 0218 	add.w	r2, r3, #24
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	695b      	ldr	r3, [r3, #20]
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	4619      	mov	r1, r3
 800a9dc:	4610      	mov	r0, r2
 800a9de:	f000 fa3e 	bl	800ae5e <ft5336_distance_zoom>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d002      	beq.n	800a9f6 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800a9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	3318      	adds	r3, #24
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 fa46 	bl	800aea2 <ft5336_chip_id>
 800aa16:	4603      	mov	r3, r0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f90f 	bl	800ac52 <FT5336_DetectTouch>
 800aa34:	4603      	mov	r3, r0
 800aa36:	461a      	mov	r2, r3
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f103 0018 	add.w	r0, r3, #24
 800aa42:	f107 0208 	add.w	r2, r7, #8
 800aa46:	2304      	movs	r3, #4
 800aa48:	2103      	movs	r1, #3
 800aa4a:	f000 f956 	bl	800acfa <ft5336_read_reg>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d003      	beq.n	800aa5c <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800aa54:	f04f 33ff 	mov.w	r3, #4294967295
 800aa58:	60fb      	str	r3, [r7, #12]
 800aa5a:	e00f      	b.n	800aa7c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800aa5c:	7a3b      	ldrb	r3, [r7, #8]
 800aa5e:	021b      	lsls	r3, r3, #8
 800aa60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800aa64:	7a7a      	ldrb	r2, [r7, #9]
 800aa66:	431a      	orrs	r2, r3
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800aa6c:	7abb      	ldrb	r3, [r7, #10]
 800aa6e:	021b      	lsls	r3, r3, #8
 800aa70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800aa74:	7afa      	ldrb	r2, [r7, #11]
 800aa76:	431a      	orrs	r2, r3
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b08c      	sub	sp, #48	; 0x30
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f8dc 	bl	800ac52 <FT5336_DetectTouch>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f103 0018 	add.w	r0, r3, #24
 800aaa8:	f107 0208 	add.w	r2, r7, #8
 800aaac:	231e      	movs	r3, #30
 800aaae:	2103      	movs	r1, #3
 800aab0:	f000 f923 	bl	800acfa <ft5336_read_reg>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d003      	beq.n	800aac2 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800aaba:	f04f 33ff 	mov.w	r3, #4294967295
 800aabe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aac0:	e07e      	b.n	800abc0 <FT5336_GetMultiTouchState+0x13a>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800aac2:	2300      	movs	r3, #0
 800aac4:	62bb      	str	r3, [r7, #40]	; 0x28
 800aac6:	e078      	b.n	800abba <FT5336_GetMultiTouchState+0x134>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800aac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaca:	4613      	mov	r3, r2
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	4413      	add	r3, r2
 800aad0:	005b      	lsls	r3, r3, #1
 800aad2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aad6:	4413      	add	r3, r2
 800aad8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800aadc:	021b      	lsls	r3, r3, #8
 800aade:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800aae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae4:	4613      	mov	r3, r2
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	4413      	add	r3, r2
 800aaea:	005b      	lsls	r3, r3, #1
 800aaec:	3301      	adds	r3, #1
 800aaee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800aaf8:	ea41 0203 	orr.w	r2, r1, r3
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	440b      	add	r3, r1
 800ab04:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800ab06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab08:	4613      	mov	r3, r2
 800ab0a:	005b      	lsls	r3, r3, #1
 800ab0c:	4413      	add	r3, r2
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	3302      	adds	r3, #2
 800ab12:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ab16:	4413      	add	r3, r2
 800ab18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ab1c:	021b      	lsls	r3, r3, #8
 800ab1e:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800ab22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab24:	4613      	mov	r3, r2
 800ab26:	005b      	lsls	r3, r3, #1
 800ab28:	4413      	add	r3, r2
 800ab2a:	005b      	lsls	r3, r3, #1
 800ab2c:	3303      	adds	r3, #3
 800ab2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ab32:	4413      	add	r3, r2
 800ab34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ab38:	4319      	orrs	r1, r3
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab3e:	3206      	adds	r2, #6
 800ab40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800ab44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab46:	4613      	mov	r3, r2
 800ab48:	005b      	lsls	r3, r3, #1
 800ab4a:	4413      	add	r3, r2
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ab52:	4413      	add	r3, r2
 800ab54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ab58:	099b      	lsrs	r3, r3, #6
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab62:	3210      	adds	r2, #16
 800ab64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800ab68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	005b      	lsls	r3, r3, #1
 800ab6e:	4413      	add	r3, r2
 800ab70:	005b      	lsls	r3, r3, #1
 800ab72:	3304      	adds	r3, #4
 800ab74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ab78:	4413      	add	r3, r2
 800ab7a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab84:	330a      	adds	r3, #10
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800ab8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab8e:	4613      	mov	r3, r2
 800ab90:	005b      	lsls	r3, r3, #1
 800ab92:	4413      	add	r3, r2
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	3305      	adds	r3, #5
 800ab98:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800aba2:	091b      	lsrs	r3, r3, #4
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	4619      	mov	r1, r3
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abac:	3314      	adds	r3, #20
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4413      	add	r3, r2
 800abb2:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800abb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb6:	3301      	adds	r3, #1
 800abb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800abba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbc:	2b04      	cmp	r3, #4
 800abbe:	d983      	bls.n	800aac8 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800abc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3730      	adds	r7, #48	; 0x30
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b082      	sub	sp, #8
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3318      	adds	r3, #24
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 f8bb 	bl	800ad56 <ft5336_gest_id>
 800abe0:	4603      	mov	r3, r0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b082      	sub	sp, #8
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3318      	adds	r3, #24
 800abf6:	2101      	movs	r1, #1
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 f941 	bl	800ae80 <ft5336_g_mode>
 800abfe:	4603      	mov	r3, r0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3318      	adds	r3, #24
 800ac14:	2100      	movs	r1, #0
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 f932 	bl	800ae80 <ft5336_g_mode>
 800ac1c:	4603      	mov	r3, r0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b083      	sub	sp, #12
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	3318      	adds	r3, #24
 800ac5e:	f107 020b 	add.w	r2, r7, #11
 800ac62:	4611      	mov	r1, r2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 f886 	bl	800ad76 <ft5336_td_status>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800ac70:	f04f 33ff 	mov.w	r3, #4294967295
 800ac74:	60fb      	str	r3, [r7, #12]
 800ac76:	e007      	b.n	800ac88 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800ac78:	7afb      	ldrb	r3, [r7, #11]
 800ac7a:	2b05      	cmp	r3, #5
 800ac7c:	d902      	bls.n	800ac84 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60fb      	str	r3, [r7, #12]
 800ac82:	e001      	b.n	800ac88 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800ac84:	7afb      	ldrb	r3, [r7, #11]
 800ac86:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800ac88:	68fb      	ldr	r3, [r7, #12]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800ac92:	b590      	push	{r4, r7, lr}
 800ac94:	b087      	sub	sp, #28
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	60f8      	str	r0, [r7, #12]
 800ac9a:	607a      	str	r2, [r7, #4]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	460b      	mov	r3, r1
 800aca0:	72fb      	strb	r3, [r7, #11]
 800aca2:	4613      	mov	r3, r2
 800aca4:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	691c      	ldr	r4, [r3, #16]
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	8918      	ldrh	r0, [r3, #8]
 800acb2:	7afb      	ldrb	r3, [r7, #11]
 800acb4:	b299      	uxth	r1, r3
 800acb6:	893b      	ldrh	r3, [r7, #8]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	47a0      	blx	r4
 800acbc:	4603      	mov	r3, r0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	371c      	adds	r7, #28
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd90      	pop	{r4, r7, pc}

0800acc6 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800acc6:	b590      	push	{r4, r7, lr}
 800acc8:	b087      	sub	sp, #28
 800acca:	af00      	add	r7, sp, #0
 800accc:	60f8      	str	r0, [r7, #12]
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	461a      	mov	r2, r3
 800acd2:	460b      	mov	r3, r1
 800acd4:	72fb      	strb	r3, [r7, #11]
 800acd6:	4613      	mov	r3, r2
 800acd8:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	68dc      	ldr	r4, [r3, #12]
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	8918      	ldrh	r0, [r3, #8]
 800ace6:	7afb      	ldrb	r3, [r7, #11]
 800ace8:	b299      	uxth	r1, r3
 800acea:	893b      	ldrh	r3, [r7, #8]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	47a0      	blx	r4
 800acf0:	4603      	mov	r3, r0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	371c      	adds	r7, #28
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd90      	pop	{r4, r7, pc}

0800acfa <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800acfa:	b590      	push	{r4, r7, lr}
 800acfc:	b085      	sub	sp, #20
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	60f8      	str	r0, [r7, #12]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	461a      	mov	r2, r3
 800ad06:	460b      	mov	r3, r1
 800ad08:	72fb      	strb	r3, [r7, #11]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	685c      	ldr	r4, [r3, #4]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6898      	ldr	r0, [r3, #8]
 800ad16:	893b      	ldrh	r3, [r7, #8]
 800ad18:	7af9      	ldrb	r1, [r7, #11]
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	47a0      	blx	r4
 800ad1e:	4603      	mov	r3, r0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3714      	adds	r7, #20
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd90      	pop	{r4, r7, pc}

0800ad28 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800ad28:	b590      	push	{r4, r7, lr}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	607a      	str	r2, [r7, #4]
 800ad32:	461a      	mov	r2, r3
 800ad34:	460b      	mov	r3, r1
 800ad36:	72fb      	strb	r3, [r7, #11]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681c      	ldr	r4, [r3, #0]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6898      	ldr	r0, [r3, #8]
 800ad44:	893b      	ldrh	r3, [r7, #8]
 800ad46:	7af9      	ldrb	r1, [r7, #11]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	47a0      	blx	r4
 800ad4c:	4603      	mov	r3, r0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd90      	pop	{r4, r7, pc}

0800ad56 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b082      	sub	sp, #8
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
 800ad5e:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800ad60:	2301      	movs	r3, #1
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	2101      	movs	r1, #1
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7ff ffc7 	bl	800acfa <ft5336_read_reg>
 800ad6c:	4603      	mov	r3, r0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3708      	adds	r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b084      	sub	sp, #16
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
 800ad7e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800ad80:	2301      	movs	r3, #1
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	2102      	movs	r1, #2
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7ff ffb7 	bl	800acfa <ft5336_read_reg>
 800ad8c:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10a      	bne.n	800adaa <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	f003 030f 	and.w	r3, r3, #15
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781a      	ldrb	r2, [r3, #0]
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800adaa:	68fb      	ldr	r3, [r7, #12]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800adc0:	1cfa      	adds	r2, r7, #3
 800adc2:	2301      	movs	r3, #1
 800adc4:	2191      	movs	r1, #145	; 0x91
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7ff ffae 	bl	800ad28 <ft5336_write_reg>
 800adcc:	4603      	mov	r3, r0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b082      	sub	sp, #8
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	460b      	mov	r3, r1
 800ade0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800ade2:	1cfa      	adds	r2, r7, #3
 800ade4:	2301      	movs	r3, #1
 800ade6:	2192      	movs	r1, #146	; 0x92
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff ff9d 	bl	800ad28 <ft5336_write_reg>
 800adee:	4603      	mov	r3, r0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	460b      	mov	r3, r1
 800ae02:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800ae04:	1cfa      	adds	r2, r7, #3
 800ae06:	2301      	movs	r3, #1
 800ae08:	2193      	movs	r1, #147	; 0x93
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7ff ff8c 	bl	800ad28 <ft5336_write_reg>
 800ae10:	4603      	mov	r3, r0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	460b      	mov	r3, r1
 800ae24:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800ae26:	1cfa      	adds	r2, r7, #3
 800ae28:	2301      	movs	r3, #1
 800ae2a:	2194      	movs	r1, #148	; 0x94
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff ff7b 	bl	800ad28 <ft5336_write_reg>
 800ae32:	4603      	mov	r3, r0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	460b      	mov	r3, r1
 800ae46:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800ae48:	1cfa      	adds	r2, r7, #3
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	2195      	movs	r1, #149	; 0x95
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7ff ff6a 	bl	800ad28 <ft5336_write_reg>
 800ae54:	4603      	mov	r3, r0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b082      	sub	sp, #8
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	460b      	mov	r3, r1
 800ae68:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800ae6a:	1cfa      	adds	r2, r7, #3
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	2196      	movs	r1, #150	; 0x96
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7ff ff59 	bl	800ad28 <ft5336_write_reg>
 800ae76:	4603      	mov	r3, r0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800ae8c:	1cfa      	adds	r2, r7, #3
 800ae8e:	2301      	movs	r3, #1
 800ae90:	21a4      	movs	r1, #164	; 0xa4
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff ff48 	bl	800ad28 <ft5336_write_reg>
 800ae98:	4603      	mov	r3, r0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800aeac:	2301      	movs	r3, #1
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	21a8      	movs	r1, #168	; 0xa8
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff ff21 	bl	800acfa <ft5336_read_reg>
 800aeb8:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d107      	bne.n	800aed0 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	781a      	ldrb	r2, [r3, #0]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	781a      	ldrb	r2, [r3, #0]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800aed0:	68fb      	ldr	r3, [r7, #12]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b083      	sub	sp, #12
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aee8:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800aef0:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aef8:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800af02:	fbb2 f2f3 	udiv	r2, r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800af12:	fbb2 f2f3 	udiv	r2, r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b090      	sub	sp, #64	; 0x40
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800af34:	78fb      	ldrb	r3, [r7, #3]
 800af36:	2b03      	cmp	r3, #3
 800af38:	d102      	bne.n	800af40 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800af3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800af3e:	e001      	b.n	800af44 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800af40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af44:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800af46:	23b7      	movs	r3, #183	; 0xb7
 800af48:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800af4e:	2300      	movs	r3, #0
 800af50:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800af52:	2300      	movs	r3, #0
 800af54:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800af5a:	2300      	movs	r3, #0
 800af5c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800af5e:	2300      	movs	r3, #0
 800af60:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800af62:	2300      	movs	r3, #0
 800af64:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800af66:	78fb      	ldrb	r3, [r7, #3]
 800af68:	4619      	mov	r1, r3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f860 	bl	800b030 <MT25TL01G_WriteEnable>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d002      	beq.n	800af7c <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800af76:	f06f 0301 	mvn.w	r3, #1
 800af7a:	e019      	b.n	800afb0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800af7c:	f107 0308 	add.w	r3, r7, #8
 800af80:	f241 3288 	movw	r2, #5000	; 0x1388
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f004 fd14 	bl	800f9b4 <HAL_QSPI_Command>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800af92:	f06f 0301 	mvn.w	r3, #1
 800af96:	e00b      	b.n	800afb0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800af98:	78fb      	ldrb	r3, [r7, #3]
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f80b 	bl	800afb8 <MT25TL01G_AutoPollingMemReady>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d002      	beq.n	800afae <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800afa8:	f06f 0301 	mvn.w	r3, #1
 800afac:	e000      	b.n	800afb0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3740      	adds	r7, #64	; 0x40
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b096      	sub	sp, #88	; 0x58
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	460b      	mov	r3, r1
 800afc2:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800afc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800afc8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800afca:	2305      	movs	r3, #5
 800afcc:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800afce:	2300      	movs	r3, #0
 800afd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800afd2:	2300      	movs	r3, #0
 800afd4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800afd6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800afda:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 800afdc:	2302      	movs	r3, #2
 800afde:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800afe0:	2300      	movs	r3, #0
 800afe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800afe4:	2300      	movs	r3, #0
 800afe6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800afe8:	2300      	movs	r3, #0
 800afea:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800aff0:	2300      	movs	r3, #0
 800aff2:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800aff4:	2310      	movs	r3, #16
 800aff6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800aff8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800affc:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800affe:	f240 1301 	movw	r3, #257	; 0x101
 800b002:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800b004:	2302      	movs	r3, #2
 800b006:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b008:	f107 0208 	add.w	r2, r7, #8
 800b00c:	f107 0120 	add.w	r1, r7, #32
 800b010:	f241 3388 	movw	r3, #5000	; 0x1388
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f004 fe5a 	bl	800fcce <HAL_QSPI_AutoPolling>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800b020:	f06f 0304 	mvn.w	r3, #4
 800b024:	e000      	b.n	800b028 <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800b026:	2300      	movs	r3, #0

}
 800b028:	4618      	mov	r0, r3
 800b02a:	3758      	adds	r7, #88	; 0x58
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b096      	sub	sp, #88	; 0x58
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b03c:	78fb      	ldrb	r3, [r7, #3]
 800b03e:	2b03      	cmp	r3, #3
 800b040:	d102      	bne.n	800b048 <MT25TL01G_WriteEnable+0x18>
 800b042:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b046:	e001      	b.n	800b04c <MT25TL01G_WriteEnable+0x1c>
 800b048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b04c:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800b04e:	2306      	movs	r3, #6
 800b050:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b052:	2300      	movs	r3, #0
 800b054:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b056:	2300      	movs	r3, #0
 800b058:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800b05a:	2300      	movs	r3, #0
 800b05c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b062:	2300      	movs	r3, #0
 800b064:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b066:	2300      	movs	r3, #0
 800b068:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b06a:	2300      	movs	r3, #0
 800b06c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b06e:	f107 0320 	add.w	r3, r7, #32
 800b072:	f241 3288 	movw	r2, #5000	; 0x1388
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f004 fc9b 	bl	800f9b4 <HAL_QSPI_Command>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b084:	f06f 0301 	mvn.w	r3, #1
 800b088:	e029      	b.n	800b0de <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800b08a:	f240 2302 	movw	r3, #514	; 0x202
 800b08e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800b090:	f240 2302 	movw	r3, #514	; 0x202
 800b094:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800b096:	2300      	movs	r3, #0
 800b098:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800b09a:	2302      	movs	r3, #2
 800b09c:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800b09e:	2310      	movs	r3, #16
 800b0a0:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800b0a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0a6:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800b0a8:	2305      	movs	r3, #5
 800b0aa:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800b0ac:	78fb      	ldrb	r3, [r7, #3]
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	d102      	bne.n	800b0b8 <MT25TL01G_WriteEnable+0x88>
 800b0b2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b0b6:	e001      	b.n	800b0bc <MT25TL01G_WriteEnable+0x8c>
 800b0b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0bc:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b0be:	f107 0208 	add.w	r2, r7, #8
 800b0c2:	f107 0120 	add.w	r1, r7, #32
 800b0c6:	f241 3388 	movw	r3, #5000	; 0x1388
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f004 fdff 	bl	800fcce <HAL_QSPI_AutoPolling>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800b0d6:	f06f 0304 	mvn.w	r3, #4
 800b0da:	e000      	b.n	800b0de <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3758      	adds	r7, #88	; 0x58
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b090      	sub	sp, #64	; 0x40
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b0ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0f2:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800b0f4:	2335      	movs	r3, #53	; 0x35
 800b0f6:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b100:	2300      	movs	r3, #0
 800b102:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b108:	2300      	movs	r3, #0
 800b10a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b10c:	2300      	movs	r3, #0
 800b10e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b110:	2300      	movs	r3, #0
 800b112:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b114:	f107 0308 	add.w	r3, r7, #8
 800b118:	f241 3288 	movw	r2, #5000	; 0x1388
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f004 fc48 	bl	800f9b4 <HAL_QSPI_Command>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b12a:	f06f 0301 	mvn.w	r3, #1
 800b12e:	e000      	b.n	800b132 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3740      	adds	r7, #64	; 0x40
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b090      	sub	sp, #64	; 0x40
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b142:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b146:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800b148:	23f5      	movs	r3, #245	; 0xf5
 800b14a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b14c:	2300      	movs	r3, #0
 800b14e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b150:	2300      	movs	r3, #0
 800b152:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b154:	2300      	movs	r3, #0
 800b156:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b15c:	2300      	movs	r3, #0
 800b15e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b160:	2300      	movs	r3, #0
 800b162:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b164:	2300      	movs	r3, #0
 800b166:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b168:	f107 0308 	add.w	r3, r7, #8
 800b16c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f004 fc1e 	bl	800f9b4 <HAL_QSPI_Command>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b17e:	f06f 0301 	mvn.w	r3, #1
 800b182:	e000      	b.n	800b186 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3740      	adds	r7, #64	; 0x40
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b092      	sub	sp, #72	; 0x48
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	460b      	mov	r3, r1
 800b19a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800b19c:	78fb      	ldrb	r3, [r7, #3]
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	d83a      	bhi.n	800b218 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800b1a2:	a201      	add	r2, pc, #4	; (adr r2, 800b1a8 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800b1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a8:	0800b1b9 	.word	0x0800b1b9
 800b1ac:	0800b1d1 	.word	0x0800b1d1
 800b1b0:	0800b1e9 	.word	0x0800b1e9
 800b1b4:	0800b201 	.word	0x0800b201
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b1b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1bc:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800b1be:	230e      	movs	r3, #14
 800b1c0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800b1c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800b1c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1cc:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b1ce:	e023      	b.n	800b218 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b1d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1d4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800b1d6:	233d      	movs	r3, #61	; 0x3d
 800b1d8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800b1da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1de:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800b1e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1e4:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b1e6:	e017      	b.n	800b218 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b1e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1ec:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800b1ee:	23ee      	movs	r3, #238	; 0xee
 800b1f0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b1f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b1f8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b1fc:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b1fe:	e00b      	b.n	800b218 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b200:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b204:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800b206:	23ed      	movs	r3, #237	; 0xed
 800b208:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b20a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b20e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b210:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b214:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b216:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800b218:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b21c:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b21e:	2300      	movs	r3, #0
 800b220:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800b222:	2308      	movs	r3, #8
 800b224:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800b226:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b22a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800b22c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b230:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b232:	2300      	movs	r3, #0
 800b234:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800b236:	2300      	movs	r3, #0
 800b238:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800b23e:	f107 0208 	add.w	r2, r7, #8
 800b242:	f107 0310 	add.w	r3, r7, #16
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f004 fdb7 	bl	800fdbc <HAL_QSPI_MemoryMapped>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d002      	beq.n	800b25a <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800b254:	f06f 0305 	mvn.w	r3, #5
 800b258:	e000      	b.n	800b25c <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3748      	adds	r7, #72	; 0x48
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b092      	sub	sp, #72	; 0x48
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	460b      	mov	r3, r1
 800b26e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800b270:	78fb      	ldrb	r3, [r7, #3]
 800b272:	2b03      	cmp	r3, #3
 800b274:	d83a      	bhi.n	800b2ec <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800b276:	a201      	add	r2, pc, #4	; (adr r2, 800b27c <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800b278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27c:	0800b28d 	.word	0x0800b28d
 800b280:	0800b2a5 	.word	0x0800b2a5
 800b284:	0800b2bd 	.word	0x0800b2bd
 800b288:	0800b2d5 	.word	0x0800b2d5
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b28c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b290:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800b292:	230c      	movs	r3, #12
 800b294:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800b296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b29a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800b29c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2a0:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800b2a2:	e023      	b.n	800b2ec <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b2a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2a8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800b2aa:	23bc      	movs	r3, #188	; 0xbc
 800b2ac:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800b2ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800b2b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2b8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b2ba:	e017      	b.n	800b2ec <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b2bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2c0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800b2c2:	23ec      	movs	r3, #236	; 0xec
 800b2c4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b2c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b2cc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b2d0:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b2d2:	e00b      	b.n	800b2ec <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b2d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b2d8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800b2da:	23eb      	movs	r3, #235	; 0xeb
 800b2dc:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b2de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b2e4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b2e8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b2ea:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800b2ec:	2308      	movs	r3, #8
 800b2ee:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800b2f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b2f4:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b2fe:	2300      	movs	r3, #0
 800b300:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b302:	2300      	movs	r3, #0
 800b304:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800b306:	2300      	movs	r3, #0
 800b308:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800b30a:	2300      	movs	r3, #0
 800b30c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800b30e:	f107 0208 	add.w	r2, r7, #8
 800b312:	f107 0310 	add.w	r3, r7, #16
 800b316:	4619      	mov	r1, r3
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f004 fd4f 	bl	800fdbc <HAL_QSPI_MemoryMapped>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800b324:	f06f 0305 	mvn.w	r3, #5
 800b328:	e000      	b.n	800b32c <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3748      	adds	r7, #72	; 0x48
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b090      	sub	sp, #64	; 0x40
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	460b      	mov	r3, r1
 800b33e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b340:	78fb      	ldrb	r3, [r7, #3]
 800b342:	2b03      	cmp	r3, #3
 800b344:	d102      	bne.n	800b34c <MT25TL01G_ResetEnable+0x18>
 800b346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b34a:	e001      	b.n	800b350 <MT25TL01G_ResetEnable+0x1c>
 800b34c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b350:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800b352:	2366      	movs	r3, #102	; 0x66
 800b354:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b356:	2300      	movs	r3, #0
 800b358:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b35a:	2300      	movs	r3, #0
 800b35c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b35e:	2300      	movs	r3, #0
 800b360:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b366:	2300      	movs	r3, #0
 800b368:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b36a:	2300      	movs	r3, #0
 800b36c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b36e:	2300      	movs	r3, #0
 800b370:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b372:	f107 0308 	add.w	r3, r7, #8
 800b376:	f241 3288 	movw	r2, #5000	; 0x1388
 800b37a:	4619      	mov	r1, r3
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f004 fb19 	bl	800f9b4 <HAL_QSPI_Command>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b388:	f06f 0301 	mvn.w	r3, #1
 800b38c:	e000      	b.n	800b390 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3740      	adds	r7, #64	; 0x40
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b090      	sub	sp, #64	; 0x40
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b3a4:	78fb      	ldrb	r3, [r7, #3]
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d102      	bne.n	800b3b0 <MT25TL01G_ResetMemory+0x18>
 800b3aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b3ae:	e001      	b.n	800b3b4 <MT25TL01G_ResetMemory+0x1c>
 800b3b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3b4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800b3b6:	2399      	movs	r3, #153	; 0x99
 800b3b8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b3d6:	f107 0308 	add.w	r3, r7, #8
 800b3da:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3de:	4619      	mov	r1, r3
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f004 fae7 	bl	800f9b4 <HAL_QSPI_Command>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b3ec:	f06f 0301 	mvn.w	r3, #1
 800b3f0:	e000      	b.n	800b3f4 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3740      	adds	r7, #64	; 0x40
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800b406:	f04f 33ff 	mov.w	r3, #4294967295
 800b40a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f832 	bl	800b47c <MT48LC4M32B2_ClockEnable>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d128      	bne.n	800b470 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800b41e:	2001      	movs	r0, #1
 800b420:	f000 f8e2 	bl	800b5e8 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f84a 	bl	800b4c4 <MT48LC4M32B2_Precharge>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d11c      	bne.n	800b470 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	6819      	ldr	r1, [r3, #0]
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	461a      	mov	r2, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 f897 	bl	800b574 <MT48LC4M32B2_RefreshMode>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d111      	bne.n	800b470 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800b44c:	6839      	ldr	r1, [r7, #0]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f85c 	bl	800b50c <MT48LC4M32B2_ModeRegConfig>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10a      	bne.n	800b470 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 f8ad 	bl	800b5c0 <MT48LC4M32B2_RefreshRate>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d101      	bne.n	800b470 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800b470:	68fb      	ldr	r3, [r7, #12]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
	...

0800b47c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800b486:	4b0e      	ldr	r3, [pc, #56]	; (800b4c0 <MT48LC4M32B2_ClockEnable+0x44>)
 800b488:	2201      	movs	r2, #1
 800b48a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800b48c:	4a0c      	ldr	r2, [pc, #48]	; (800b4c0 <MT48LC4M32B2_ClockEnable+0x44>)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800b492:	4b0b      	ldr	r3, [pc, #44]	; (800b4c0 <MT48LC4M32B2_ClockEnable+0x44>)
 800b494:	2201      	movs	r2, #1
 800b496:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800b498:	4b09      	ldr	r3, [pc, #36]	; (800b4c0 <MT48LC4M32B2_ClockEnable+0x44>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800b49e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4a2:	4907      	ldr	r1, [pc, #28]	; (800b4c0 <MT48LC4M32B2_ClockEnable+0x44>)
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f007 f899 	bl	80125dc <HAL_SDRAM_SendCommand>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800b4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b4:	e000      	b.n	800b4b8 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b4b6:	2300      	movs	r3, #0
  }
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	2400a378 	.word	0x2400a378

0800b4c4 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800b4ce:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <MT48LC4M32B2_Precharge+0x44>)
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800b4d4:	4a0c      	ldr	r2, [pc, #48]	; (800b508 <MT48LC4M32B2_Precharge+0x44>)
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800b4da:	4b0b      	ldr	r3, [pc, #44]	; (800b508 <MT48LC4M32B2_Precharge+0x44>)
 800b4dc:	2201      	movs	r2, #1
 800b4de:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800b4e0:	4b09      	ldr	r3, [pc, #36]	; (800b508 <MT48LC4M32B2_Precharge+0x44>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800b4e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4ea:	4907      	ldr	r1, [pc, #28]	; (800b508 <MT48LC4M32B2_Precharge+0x44>)
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f007 f875 	bl	80125dc <HAL_SDRAM_SendCommand>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d002      	beq.n	800b4fe <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800b4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4fc:	e000      	b.n	800b500 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b4fe:	2300      	movs	r3, #0
  }
}
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	2400a378 	.word	0x2400a378

0800b50c <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800b51e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800b524:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800b52a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800b530:	4313      	orrs	r3, r2
 800b532:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800b534:	4b0e      	ldr	r3, [pc, #56]	; (800b570 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b536:	2204      	movs	r2, #4
 800b538:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a0c      	ldr	r2, [pc, #48]	; (800b570 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b540:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800b542:	4b0b      	ldr	r3, [pc, #44]	; (800b570 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b544:	2201      	movs	r2, #1
 800b546:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800b548:	4a09      	ldr	r2, [pc, #36]	; (800b570 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800b54e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b552:	4907      	ldr	r1, [pc, #28]	; (800b570 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f007 f841 	bl	80125dc <HAL_SDRAM_SendCommand>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d002      	beq.n	800b566 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800b560:	f04f 33ff 	mov.w	r3, #4294967295
 800b564:	e000      	b.n	800b568 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b566:	2300      	movs	r3, #0
  }
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	2400a378 	.word	0x2400a378

0800b574 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800b580:	4a0e      	ldr	r2, [pc, #56]	; (800b5bc <MT48LC4M32B2_RefreshMode+0x48>)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800b586:	4a0d      	ldr	r2, [pc, #52]	; (800b5bc <MT48LC4M32B2_RefreshMode+0x48>)
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800b58c:	4b0b      	ldr	r3, [pc, #44]	; (800b5bc <MT48LC4M32B2_RefreshMode+0x48>)
 800b58e:	2208      	movs	r2, #8
 800b590:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800b592:	4b0a      	ldr	r3, [pc, #40]	; (800b5bc <MT48LC4M32B2_RefreshMode+0x48>)
 800b594:	2200      	movs	r2, #0
 800b596:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800b598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b59c:	4907      	ldr	r1, [pc, #28]	; (800b5bc <MT48LC4M32B2_RefreshMode+0x48>)
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f007 f81c 	bl	80125dc <HAL_SDRAM_SendCommand>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d002      	beq.n	800b5b0 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800b5aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ae:	e000      	b.n	800b5b2 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b5b0:	2300      	movs	r3, #0
  }
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	2400a378 	.word	0x2400a378

0800b5c0 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f007 f83a 	bl	8012646 <HAL_SDRAM_ProgramRefreshRate>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800b5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5dc:	e000      	b.n	800b5e0 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b5de:	2300      	movs	r3, #0
  }
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800b5f0:	f001 fcfc 	bl	800cfec <HAL_GetTick>
 800b5f4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800b5f6:	bf00      	nop
 800b5f8:	f001 fcf8 	bl	800cfec <HAL_GetTick>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	429a      	cmp	r2, r3
 800b606:	d8f7      	bhi.n	800b5f8 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
	...

0800b614 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b61a:	2300      	movs	r3, #0
 800b61c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800b61e:	4b16      	ldr	r3, [pc, #88]	; (800b678 <BSP_I2C4_Init+0x64>)
 800b620:	4a16      	ldr	r2, [pc, #88]	; (800b67c <BSP_I2C4_Init+0x68>)
 800b622:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800b624:	4b16      	ldr	r3, [pc, #88]	; (800b680 <BSP_I2C4_Init+0x6c>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d11f      	bne.n	800b66c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800b62c:	4b14      	ldr	r3, [pc, #80]	; (800b680 <BSP_I2C4_Init+0x6c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3301      	adds	r3, #1
 800b632:	4a13      	ldr	r2, [pc, #76]	; (800b680 <BSP_I2C4_Init+0x6c>)
 800b634:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800b636:	4810      	ldr	r0, [pc, #64]	; (800b678 <BSP_I2C4_Init+0x64>)
 800b638:	f002 fee0 	bl	800e3fc <HAL_I2C_GetState>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d114      	bne.n	800b66c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800b642:	480d      	ldr	r0, [pc, #52]	; (800b678 <BSP_I2C4_Init+0x64>)
 800b644:	f000 fb60 	bl	800bd08 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800b648:	f005 fe74 	bl	8011334 <HAL_RCC_GetPCLK2Freq>
 800b64c:	4603      	mov	r3, r0
 800b64e:	490d      	ldr	r1, [pc, #52]	; (800b684 <BSP_I2C4_Init+0x70>)
 800b650:	4618      	mov	r0, r3
 800b652:	f000 f8e3 	bl	800b81c <I2C_GetTiming>
 800b656:	4603      	mov	r3, r0
 800b658:	4619      	mov	r1, r3
 800b65a:	4807      	ldr	r0, [pc, #28]	; (800b678 <BSP_I2C4_Init+0x64>)
 800b65c:	f000 f838 	bl	800b6d0 <MX_I2C4_Init>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d002      	beq.n	800b66c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800b666:	f06f 0307 	mvn.w	r3, #7
 800b66a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800b66c:	687b      	ldr	r3, [r7, #4]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	2400b3d0 	.word	0x2400b3d0
 800b67c:	58001c00 	.word	0x58001c00
 800b680:	2400a388 	.word	0x2400a388
 800b684:	000186a0 	.word	0x000186a0

0800b688 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800b68e:	2300      	movs	r3, #0
 800b690:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800b692:	4b0d      	ldr	r3, [pc, #52]	; (800b6c8 <BSP_I2C4_DeInit+0x40>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3b01      	subs	r3, #1
 800b698:	4a0b      	ldr	r2, [pc, #44]	; (800b6c8 <BSP_I2C4_DeInit+0x40>)
 800b69a:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800b69c:	4b0a      	ldr	r3, [pc, #40]	; (800b6c8 <BSP_I2C4_DeInit+0x40>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10b      	bne.n	800b6bc <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800b6a4:	4809      	ldr	r0, [pc, #36]	; (800b6cc <BSP_I2C4_DeInit+0x44>)
 800b6a6:	f000 fb9b 	bl	800bde0 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b6aa:	4808      	ldr	r0, [pc, #32]	; (800b6cc <BSP_I2C4_DeInit+0x44>)
 800b6ac:	f002 fc34 	bl	800df18 <HAL_I2C_DeInit>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d002      	beq.n	800b6bc <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800b6b6:	f06f 0307 	mvn.w	r3, #7
 800b6ba:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800b6bc:	687b      	ldr	r3, [r7, #4]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	2400a388 	.word	0x2400a388
 800b6cc:	2400b3d0 	.word	0x2400b3d0

0800b6d0 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f002 fb72 	bl	800ddf8 <HAL_I2C_Init>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d002      	beq.n	800b720 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	73fb      	strb	r3, [r7, #15]
 800b71e:	e014      	b.n	800b74a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800b720:	2300      	movs	r3, #0
 800b722:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800b724:	68b9      	ldr	r1, [r7, #8]
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f003 f928 	bl	800e97c <HAL_I2CEx_ConfigAnalogFilter>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d002      	beq.n	800b738 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	73fb      	strb	r3, [r7, #15]
 800b736:	e008      	b.n	800b74a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800b738:	2100      	movs	r1, #0
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f003 f969 	bl	800ea12 <HAL_I2CEx_ConfigDigitalFilter>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af02      	add	r7, sp, #8
 800b75a:	60ba      	str	r2, [r7, #8]
 800b75c:	461a      	mov	r2, r3
 800b75e:	4603      	mov	r3, r0
 800b760:	81fb      	strh	r3, [r7, #14]
 800b762:	460b      	mov	r3, r1
 800b764:	81bb      	strh	r3, [r7, #12]
 800b766:	4613      	mov	r3, r2
 800b768:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b76a:	89b9      	ldrh	r1, [r7, #12]
 800b76c:	89f8      	ldrh	r0, [r7, #14]
 800b76e:	88fb      	ldrh	r3, [r7, #6]
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2201      	movs	r2, #1
 800b776:	f000 fb57 	bl	800be28 <I2C4_WriteReg>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d102      	bne.n	800b786 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b780:	2300      	movs	r3, #0
 800b782:	617b      	str	r3, [r7, #20]
 800b784:	e00c      	b.n	800b7a0 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b786:	4809      	ldr	r0, [pc, #36]	; (800b7ac <BSP_I2C4_WriteReg+0x58>)
 800b788:	f002 fe46 	bl	800e418 <HAL_I2C_GetError>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b04      	cmp	r3, #4
 800b790:	d103      	bne.n	800b79a <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b792:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b796:	617b      	str	r3, [r7, #20]
 800b798:	e002      	b.n	800b7a0 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b79a:	f06f 0303 	mvn.w	r3, #3
 800b79e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800b7a0:	697b      	ldr	r3, [r7, #20]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3718      	adds	r7, #24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	2400b3d0 	.word	0x2400b3d0

0800b7b0 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af02      	add	r7, sp, #8
 800b7b6:	60ba      	str	r2, [r7, #8]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	81fb      	strh	r3, [r7, #14]
 800b7be:	460b      	mov	r3, r1
 800b7c0:	81bb      	strh	r3, [r7, #12]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b7c6:	89b9      	ldrh	r1, [r7, #12]
 800b7c8:	89f8      	ldrh	r0, [r7, #14]
 800b7ca:	88fb      	ldrh	r3, [r7, #6]
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f000 fb4f 	bl	800be74 <I2C4_ReadReg>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d102      	bne.n	800b7e2 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	617b      	str	r3, [r7, #20]
 800b7e0:	e00c      	b.n	800b7fc <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b7e2:	4809      	ldr	r0, [pc, #36]	; (800b808 <BSP_I2C4_ReadReg+0x58>)
 800b7e4:	f002 fe18 	bl	800e418 <HAL_I2C_GetError>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	d103      	bne.n	800b7f6 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b7ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b7f2:	617b      	str	r3, [r7, #20]
 800b7f4:	e002      	b.n	800b7fc <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b7f6:	f06f 0303 	mvn.w	r3, #3
 800b7fa:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800b7fc:	697b      	ldr	r3, [r7, #20]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	2400b3d0 	.word	0x2400b3d0

0800b80c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800b810:	f001 fbec 	bl	800cfec <HAL_GetTick>
 800b814:	4603      	mov	r3, r0
}
 800b816:	4618      	mov	r0, r3
 800b818:	bd80      	pop	{r7, pc}
	...

0800b81c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800b826:	2300      	movs	r3, #0
 800b828:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d06b      	beq.n	800b908 <I2C_GetTiming+0xec>
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d068      	beq.n	800b908 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b836:	2300      	movs	r3, #0
 800b838:	613b      	str	r3, [r7, #16]
 800b83a:	e060      	b.n	800b8fe <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b83c:	4a35      	ldr	r2, [pc, #212]	; (800b914 <I2C_GetTiming+0xf8>)
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	212c      	movs	r1, #44	; 0x2c
 800b842:	fb01 f303 	mul.w	r3, r1, r3
 800b846:	4413      	add	r3, r2
 800b848:	3304      	adds	r3, #4
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d352      	bcc.n	800b8f8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800b852:	4a30      	ldr	r2, [pc, #192]	; (800b914 <I2C_GetTiming+0xf8>)
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	212c      	movs	r1, #44	; 0x2c
 800b858:	fb01 f303 	mul.w	r3, r1, r3
 800b85c:	4413      	add	r3, r2
 800b85e:	3308      	adds	r3, #8
 800b860:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	429a      	cmp	r2, r3
 800b866:	d847      	bhi.n	800b8f8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800b868:	6939      	ldr	r1, [r7, #16]
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 f856 	bl	800b91c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800b870:	6939      	ldr	r1, [r7, #16]
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 f940 	bl	800baf8 <I2C_Compute_SCLL_SCLH>
 800b878:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2b7f      	cmp	r3, #127	; 0x7f
 800b87e:	d842      	bhi.n	800b906 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b880:	4925      	ldr	r1, [pc, #148]	; (800b918 <I2C_GetTiming+0xfc>)
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	4613      	mov	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4413      	add	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	440b      	add	r3, r1
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b892:	4821      	ldr	r0, [pc, #132]	; (800b918 <I2C_GetTiming+0xfc>)
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	4613      	mov	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4413      	add	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4403      	add	r3, r0
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	051b      	lsls	r3, r3, #20
 800b8a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b8aa:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b8ac:	481a      	ldr	r0, [pc, #104]	; (800b918 <I2C_GetTiming+0xfc>)
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4413      	add	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4403      	add	r3, r0
 800b8ba:	3308      	adds	r3, #8
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	041b      	lsls	r3, r3, #16
 800b8c0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b8c4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800b8c6:	4814      	ldr	r0, [pc, #80]	; (800b918 <I2C_GetTiming+0xfc>)
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4413      	add	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4403      	add	r3, r0
 800b8d4:	330c      	adds	r3, #12
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	021b      	lsls	r3, r3, #8
 800b8da:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b8dc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800b8de:	480e      	ldr	r0, [pc, #56]	; (800b918 <I2C_GetTiming+0xfc>)
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4403      	add	r3, r0
 800b8ec:	3310      	adds	r3, #16
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b8f2:	430b      	orrs	r3, r1
 800b8f4:	617b      	str	r3, [r7, #20]
        }
        break;
 800b8f6:	e006      	b.n	800b906 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	613b      	str	r3, [r7, #16]
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	2b02      	cmp	r3, #2
 800b902:	d99b      	bls.n	800b83c <I2C_GetTiming+0x20>
 800b904:	e000      	b.n	800b908 <I2C_GetTiming+0xec>
        break;
 800b906:	bf00      	nop
      }
    }
  }

  return ret;
 800b908:	697b      	ldr	r3, [r7, #20]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	08028080 	.word	0x08028080
 800b918:	2400a38c 	.word	0x2400a38c

0800b91c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b08f      	sub	sp, #60	; 0x3c
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800b926:	2310      	movs	r3, #16
 800b928:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	085a      	lsrs	r2, r3, #1
 800b92e:	4b6e      	ldr	r3, [pc, #440]	; (800bae8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800b930:	4413      	add	r3, r2
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	fbb3 f3f2 	udiv	r3, r3, r2
 800b938:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b93a:	2332      	movs	r3, #50	; 0x32
 800b93c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800b93e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b942:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b944:	4a69      	ldr	r2, [pc, #420]	; (800baec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	212c      	movs	r1, #44	; 0x2c
 800b94a:	fb01 f303 	mul.w	r3, r1, r3
 800b94e:	4413      	add	r3, r2
 800b950:	3324      	adds	r3, #36	; 0x24
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4618      	mov	r0, r3
 800b956:	4a65      	ldr	r2, [pc, #404]	; (800baec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	212c      	movs	r1, #44	; 0x2c
 800b95c:	fb01 f303 	mul.w	r3, r1, r3
 800b960:	4413      	add	r3, r2
 800b962:	330c      	adds	r3, #12
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b968:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b96a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b96c:	495f      	ldr	r1, [pc, #380]	; (800baec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	202c      	movs	r0, #44	; 0x2c
 800b972:	fb00 f303 	mul.w	r3, r0, r3
 800b976:	440b      	add	r3, r1
 800b978:	3328      	adds	r3, #40	; 0x28
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3303      	adds	r3, #3
 800b97e:	69f9      	ldr	r1, [r7, #28]
 800b980:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b988:	4a58      	ldr	r2, [pc, #352]	; (800baec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	212c      	movs	r1, #44	; 0x2c
 800b98e:	fb01 f303 	mul.w	r3, r1, r3
 800b992:	4413      	add	r3, r2
 800b994:	3310      	adds	r3, #16
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4618      	mov	r0, r3
 800b99a:	4a54      	ldr	r2, [pc, #336]	; (800baec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	212c      	movs	r1, #44	; 0x2c
 800b9a0:	fb01 f303 	mul.w	r3, r1, r3
 800b9a4:	4413      	add	r3, r2
 800b9a6:	3320      	adds	r3, #32
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b9ac:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b9ae:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b9b0:	494e      	ldr	r1, [pc, #312]	; (800baec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	202c      	movs	r0, #44	; 0x2c
 800b9b6:	fb00 f303 	mul.w	r3, r0, r3
 800b9ba:	440b      	add	r3, r1
 800b9bc:	3328      	adds	r3, #40	; 0x28
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	69f9      	ldr	r1, [r7, #28]
 800b9c4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800b9cc:	4a47      	ldr	r2, [pc, #284]	; (800baec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	212c      	movs	r1, #44	; 0x2c
 800b9d2:	fb01 f303 	mul.w	r3, r1, r3
 800b9d6:	4413      	add	r3, r2
 800b9d8:	3320      	adds	r3, #32
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	4a43      	ldr	r2, [pc, #268]	; (800baec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	212c      	movs	r1, #44	; 0x2c
 800b9e4:	fb01 f303 	mul.w	r3, r1, r3
 800b9e8:	4413      	add	r3, r2
 800b9ea:	3314      	adds	r3, #20
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4403      	add	r3, r0
 800b9f0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	dc01      	bgt.n	800b9fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800b9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	dc01      	bgt.n	800ba06 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800ba06:	2300      	movs	r3, #0
 800ba08:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba0a:	e062      	b.n	800bad2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ba10:	e059      	b.n	800bac6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	3301      	adds	r3, #1
 800ba16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba18:	3201      	adds	r2, #1
 800ba1a:	fb02 f203 	mul.w	r2, r2, r3
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	fb02 f303 	mul.w	r3, r2, r3
 800ba24:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d348      	bcc.n	800bac0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800ba2e:	2300      	movs	r3, #0
 800ba30:	623b      	str	r3, [r7, #32]
 800ba32:	e042      	b.n	800baba <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba36:	3301      	adds	r3, #1
 800ba38:	6a3a      	ldr	r2, [r7, #32]
 800ba3a:	fb02 f203 	mul.w	r2, r2, r3
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	fb02 f303 	mul.w	r3, r2, r3
 800ba44:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800ba46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d332      	bcc.n	800bab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800ba4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d82e      	bhi.n	800bab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800ba56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d02a      	beq.n	800bab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800ba5e:	4b24      	ldr	r3, [pc, #144]	; (800baf0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	4924      	ldr	r1, [pc, #144]	; (800baf4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800ba64:	4613      	mov	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	440b      	add	r3, r1
 800ba6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba70:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800ba72:	4b1f      	ldr	r3, [pc, #124]	; (800baf0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	491f      	ldr	r1, [pc, #124]	; (800baf4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800ba78:	4613      	mov	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	440b      	add	r3, r1
 800ba82:	3304      	adds	r3, #4
 800ba84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba86:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800ba88:	4b19      	ldr	r3, [pc, #100]	; (800baf0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	4919      	ldr	r1, [pc, #100]	; (800baf4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800ba8e:	4613      	mov	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4413      	add	r3, r2
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	440b      	add	r3, r1
 800ba98:	3308      	adds	r3, #8
 800ba9a:	6a3a      	ldr	r2, [r7, #32]
 800ba9c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800ba9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa0:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800baa2:	4b13      	ldr	r3, [pc, #76]	; (800baf0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3301      	adds	r3, #1
 800baa8:	4a11      	ldr	r2, [pc, #68]	; (800baf0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800baaa:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800baac:	4b10      	ldr	r3, [pc, #64]	; (800baf0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b7f      	cmp	r3, #127	; 0x7f
 800bab2:	d812      	bhi.n	800bada <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	3301      	adds	r3, #1
 800bab8:	623b      	str	r3, [r7, #32]
 800baba:	6a3b      	ldr	r3, [r7, #32]
 800babc:	2b0f      	cmp	r3, #15
 800babe:	d9b9      	bls.n	800ba34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800bac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac2:	3301      	adds	r3, #1
 800bac4:	627b      	str	r3, [r7, #36]	; 0x24
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	2b0f      	cmp	r3, #15
 800baca:	d9a2      	bls.n	800ba12 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	3301      	adds	r3, #1
 800bad0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	2b0f      	cmp	r3, #15
 800bad6:	d999      	bls.n	800ba0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800bad8:	e000      	b.n	800badc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800bada:	bf00      	nop
          }
        }
      }
    }
  }
}
 800badc:	373c      	adds	r7, #60	; 0x3c
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	3b9aca00 	.word	0x3b9aca00
 800baec:	08028080 	.word	0x08028080
 800baf0:	2400ad8c 	.word	0x2400ad8c
 800baf4:	2400a38c 	.word	0x2400a38c

0800baf8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b093      	sub	sp, #76	; 0x4c
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800bb02:	f04f 33ff 	mov.w	r3, #4294967295
 800bb06:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	085a      	lsrs	r2, r3, #1
 800bb0c:	4b7a      	ldr	r3, [pc, #488]	; (800bcf8 <I2C_Compute_SCLL_SCLH+0x200>)
 800bb0e:	4413      	add	r3, r2
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb16:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800bb18:	4a78      	ldr	r2, [pc, #480]	; (800bcfc <I2C_Compute_SCLL_SCLH+0x204>)
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	212c      	movs	r1, #44	; 0x2c
 800bb1e:	fb01 f303 	mul.w	r3, r1, r3
 800bb22:	4413      	add	r3, r2
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	085a      	lsrs	r2, r3, #1
 800bb28:	4b73      	ldr	r3, [pc, #460]	; (800bcf8 <I2C_Compute_SCLL_SCLH+0x200>)
 800bb2a:	4413      	add	r3, r2
 800bb2c:	4973      	ldr	r1, [pc, #460]	; (800bcfc <I2C_Compute_SCLL_SCLH+0x204>)
 800bb2e:	683a      	ldr	r2, [r7, #0]
 800bb30:	202c      	movs	r0, #44	; 0x2c
 800bb32:	fb00 f202 	mul.w	r2, r0, r2
 800bb36:	440a      	add	r2, r1
 800bb38:	6812      	ldr	r2, [r2, #0]
 800bb3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb3e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800bb40:	2332      	movs	r3, #50	; 0x32
 800bb42:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800bb44:	4a6d      	ldr	r2, [pc, #436]	; (800bcfc <I2C_Compute_SCLL_SCLH+0x204>)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	212c      	movs	r1, #44	; 0x2c
 800bb4a:	fb01 f303 	mul.w	r3, r1, r3
 800bb4e:	4413      	add	r3, r2
 800bb50:	3328      	adds	r3, #40	; 0x28
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb56:	fb02 f303 	mul.w	r3, r2, r3
 800bb5a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800bb5c:	4a67      	ldr	r2, [pc, #412]	; (800bcfc <I2C_Compute_SCLL_SCLH+0x204>)
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	212c      	movs	r1, #44	; 0x2c
 800bb62:	fb01 f303 	mul.w	r3, r1, r3
 800bb66:	4413      	add	r3, r2
 800bb68:	3304      	adds	r3, #4
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a62      	ldr	r2, [pc, #392]	; (800bcf8 <I2C_Compute_SCLL_SCLH+0x200>)
 800bb6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb72:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800bb74:	4a61      	ldr	r2, [pc, #388]	; (800bcfc <I2C_Compute_SCLL_SCLH+0x204>)
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	212c      	movs	r1, #44	; 0x2c
 800bb7a:	fb01 f303 	mul.w	r3, r1, r3
 800bb7e:	4413      	add	r3, r2
 800bb80:	3308      	adds	r3, #8
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a5c      	ldr	r2, [pc, #368]	; (800bcf8 <I2C_Compute_SCLL_SCLH+0x200>)
 800bb86:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb8a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800bb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800bb90:	2300      	movs	r3, #0
 800bb92:	637b      	str	r3, [r7, #52]	; 0x34
 800bb94:	e0a3      	b.n	800bcde <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800bb96:	495a      	ldr	r1, [pc, #360]	; (800bd00 <I2C_Compute_SCLL_SCLH+0x208>)
 800bb98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4413      	add	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	440b      	add	r3, r1
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	1c5a      	adds	r2, r3, #1
 800bba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbaa:	fb02 f303 	mul.w	r3, r2, r3
 800bbae:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbb4:	e08c      	b.n	800bcd0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800bbb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbb8:	6a3b      	ldr	r3, [r7, #32]
 800bbba:	441a      	add	r2, r3
 800bbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	6979      	ldr	r1, [r7, #20]
 800bbc2:	fb01 f103 	mul.w	r1, r1, r3
 800bbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc8:	005b      	lsls	r3, r3, #1
 800bbca:	440b      	add	r3, r1
 800bbcc:	4413      	add	r3, r2
 800bbce:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800bbd0:	4a4a      	ldr	r2, [pc, #296]	; (800bcfc <I2C_Compute_SCLL_SCLH+0x204>)
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	212c      	movs	r1, #44	; 0x2c
 800bbd6:	fb01 f303 	mul.w	r3, r1, r3
 800bbda:	4413      	add	r3, r2
 800bbdc:	3318      	adds	r3, #24
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d971      	bls.n	800bcca <I2C_Compute_SCLL_SCLH+0x1d2>
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	1ad2      	subs	r2, r2, r3
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	1ad3      	subs	r3, r2, r3
 800bbf0:	089b      	lsrs	r3, r3, #2
 800bbf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d268      	bcs.n	800bcca <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbfc:	e062      	b.n	800bcc4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800bbfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc00:	6a3b      	ldr	r3, [r7, #32]
 800bc02:	441a      	add	r2, r3
 800bc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc06:	3301      	adds	r3, #1
 800bc08:	6979      	ldr	r1, [r7, #20]
 800bc0a:	fb01 f103 	mul.w	r1, r1, r3
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	005b      	lsls	r3, r3, #1
 800bc12:	440b      	add	r3, r1
 800bc14:	4413      	add	r3, r2
 800bc16:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	441a      	add	r2, r3
 800bc1e:	4937      	ldr	r1, [pc, #220]	; (800bcfc <I2C_Compute_SCLL_SCLH+0x204>)
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	202c      	movs	r0, #44	; 0x2c
 800bc24:	fb00 f303 	mul.w	r3, r0, r3
 800bc28:	440b      	add	r3, r1
 800bc2a:	3320      	adds	r3, #32
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	441a      	add	r2, r3
 800bc30:	4932      	ldr	r1, [pc, #200]	; (800bcfc <I2C_Compute_SCLL_SCLH+0x204>)
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	202c      	movs	r0, #44	; 0x2c
 800bc36:	fb00 f303 	mul.w	r3, r0, r3
 800bc3a:	440b      	add	r3, r1
 800bc3c:	3324      	adds	r3, #36	; 0x24
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4413      	add	r3, r2
 800bc42:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d338      	bcc.n	800bcbe <I2C_Compute_SCLL_SCLH+0x1c6>
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d834      	bhi.n	800bcbe <I2C_Compute_SCLL_SCLH+0x1c6>
 800bc54:	4a29      	ldr	r2, [pc, #164]	; (800bcfc <I2C_Compute_SCLL_SCLH+0x204>)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	212c      	movs	r1, #44	; 0x2c
 800bc5a:	fb01 f303 	mul.w	r3, r1, r3
 800bc5e:	4413      	add	r3, r2
 800bc60:	331c      	adds	r3, #28
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d329      	bcc.n	800bcbe <I2C_Compute_SCLL_SCLH+0x1c6>
 800bc6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d225      	bcs.n	800bcbe <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	da02      	bge.n	800bc86 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	425b      	negs	r3, r3
 800bc84:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d917      	bls.n	800bcbe <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800bc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc90:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800bc92:	491b      	ldr	r1, [pc, #108]	; (800bd00 <I2C_Compute_SCLL_SCLH+0x208>)
 800bc94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc96:	4613      	mov	r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	4413      	add	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	440b      	add	r3, r1
 800bca0:	3310      	adds	r3, #16
 800bca2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bca4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800bca6:	4916      	ldr	r1, [pc, #88]	; (800bd00 <I2C_Compute_SCLL_SCLH+0x208>)
 800bca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcaa:	4613      	mov	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	440b      	add	r3, r1
 800bcb4:	330c      	adds	r3, #12
 800bcb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcb8:	601a      	str	r2, [r3, #0]
              ret = count;
 800bcba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcbc:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800bcbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc6:	2bff      	cmp	r3, #255	; 0xff
 800bcc8:	d999      	bls.n	800bbfe <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800bcca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bccc:	3301      	adds	r3, #1
 800bcce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd2:	2bff      	cmp	r3, #255	; 0xff
 800bcd4:	f67f af6f 	bls.w	800bbb6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800bcd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcda:	3301      	adds	r3, #1
 800bcdc:	637b      	str	r3, [r7, #52]	; 0x34
 800bcde:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <I2C_Compute_SCLL_SCLH+0x20c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bce4:	429a      	cmp	r2, r3
 800bce6:	f4ff af56 	bcc.w	800bb96 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800bcea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	374c      	adds	r7, #76	; 0x4c
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr
 800bcf8:	3b9aca00 	.word	0x3b9aca00
 800bcfc:	08028080 	.word	0x08028080
 800bd00:	2400a38c 	.word	0x2400a38c
 800bd04:	2400ad8c 	.word	0x2400ad8c

0800bd08 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b08a      	sub	sp, #40	; 0x28
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800bd10:	4b31      	ldr	r3, [pc, #196]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bd12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd16:	4a30      	ldr	r2, [pc, #192]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bd18:	f043 0308 	orr.w	r3, r3, #8
 800bd1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd20:	4b2d      	ldr	r3, [pc, #180]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bd22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd26:	f003 0308 	and.w	r3, r3, #8
 800bd2a:	613b      	str	r3, [r7, #16]
 800bd2c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800bd2e:	4b2a      	ldr	r3, [pc, #168]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bd30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd34:	4a28      	ldr	r2, [pc, #160]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bd36:	f043 0308 	orr.w	r3, r3, #8
 800bd3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd3e:	4b26      	ldr	r3, [pc, #152]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bd40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd44:	f003 0308 	and.w	r3, r3, #8
 800bd48:	60fb      	str	r3, [r7, #12]
 800bd4a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800bd4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd50:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800bd52:	2312      	movs	r3, #18
 800bd54:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800bd5e:	2304      	movs	r3, #4
 800bd60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800bd62:	f107 0314 	add.w	r3, r7, #20
 800bd66:	4619      	mov	r1, r3
 800bd68:	481c      	ldr	r0, [pc, #112]	; (800bddc <I2C4_MspInit+0xd4>)
 800bd6a:	f001 fd43 	bl	800d7f4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800bd6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd72:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800bd74:	2312      	movs	r3, #18
 800bd76:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800bd80:	2304      	movs	r3, #4
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800bd84:	f107 0314 	add.w	r3, r7, #20
 800bd88:	4619      	mov	r1, r3
 800bd8a:	4814      	ldr	r0, [pc, #80]	; (800bddc <I2C4_MspInit+0xd4>)
 800bd8c:	f001 fd32 	bl	800d7f4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800bd90:	4b11      	ldr	r3, [pc, #68]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bd92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bd96:	4a10      	ldr	r2, [pc, #64]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bd98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800bda0:	4b0d      	ldr	r3, [pc, #52]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bda2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bda6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdaa:	60bb      	str	r3, [r7, #8]
 800bdac:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800bdae:	4b0a      	ldr	r3, [pc, #40]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bdb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdb4:	4a08      	ldr	r2, [pc, #32]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bdb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800bdbe:	4b06      	ldr	r3, [pc, #24]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bdc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdc4:	4a04      	ldr	r2, [pc, #16]	; (800bdd8 <I2C4_MspInit+0xd0>)
 800bdc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800bdce:	bf00      	nop
 800bdd0:	3728      	adds	r7, #40	; 0x28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	58024400 	.word	0x58024400
 800bddc:	58020c00 	.word	0x58020c00

0800bde0 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b088      	sub	sp, #32
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800bde8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	480b      	ldr	r0, [pc, #44]	; (800be20 <I2C4_MspDeInit+0x40>)
 800bdf4:	f001 feae 	bl	800db54 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800bdf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bdfc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	4619      	mov	r1, r3
 800be02:	4807      	ldr	r0, [pc, #28]	; (800be20 <I2C4_MspDeInit+0x40>)
 800be04:	f001 fea6 	bl	800db54 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800be08:	4b06      	ldr	r3, [pc, #24]	; (800be24 <I2C4_MspDeInit+0x44>)
 800be0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be0e:	4a05      	ldr	r2, [pc, #20]	; (800be24 <I2C4_MspDeInit+0x44>)
 800be10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be14:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800be18:	bf00      	nop
 800be1a:	3720      	adds	r7, #32
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	58020c00 	.word	0x58020c00
 800be24:	58024400 	.word	0x58024400

0800be28 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b088      	sub	sp, #32
 800be2c:	af04      	add	r7, sp, #16
 800be2e:	607b      	str	r3, [r7, #4]
 800be30:	4603      	mov	r3, r0
 800be32:	81fb      	strh	r3, [r7, #14]
 800be34:	460b      	mov	r3, r1
 800be36:	81bb      	strh	r3, [r7, #12]
 800be38:	4613      	mov	r3, r2
 800be3a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800be3c:	8978      	ldrh	r0, [r7, #10]
 800be3e:	89ba      	ldrh	r2, [r7, #12]
 800be40:	89f9      	ldrh	r1, [r7, #14]
 800be42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be46:	9302      	str	r3, [sp, #8]
 800be48:	8b3b      	ldrh	r3, [r7, #24]
 800be4a:	9301      	str	r3, [sp, #4]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	4603      	mov	r3, r0
 800be52:	4807      	ldr	r0, [pc, #28]	; (800be70 <I2C4_WriteReg+0x48>)
 800be54:	f002 f8a4 	bl	800dfa0 <HAL_I2C_Mem_Write>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d101      	bne.n	800be62 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800be5e:	2300      	movs	r3, #0
 800be60:	e001      	b.n	800be66 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800be62:	f06f 0307 	mvn.w	r3, #7
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	2400b3d0 	.word	0x2400b3d0

0800be74 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b088      	sub	sp, #32
 800be78:	af04      	add	r7, sp, #16
 800be7a:	607b      	str	r3, [r7, #4]
 800be7c:	4603      	mov	r3, r0
 800be7e:	81fb      	strh	r3, [r7, #14]
 800be80:	460b      	mov	r3, r1
 800be82:	81bb      	strh	r3, [r7, #12]
 800be84:	4613      	mov	r3, r2
 800be86:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800be88:	8978      	ldrh	r0, [r7, #10]
 800be8a:	89ba      	ldrh	r2, [r7, #12]
 800be8c:	89f9      	ldrh	r1, [r7, #14]
 800be8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be92:	9302      	str	r3, [sp, #8]
 800be94:	8b3b      	ldrh	r3, [r7, #24]
 800be96:	9301      	str	r3, [sp, #4]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	4603      	mov	r3, r0
 800be9e:	4807      	ldr	r0, [pc, #28]	; (800bebc <I2C4_ReadReg+0x48>)
 800bea0:	f002 f992 	bl	800e1c8 <HAL_I2C_Mem_Read>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d101      	bne.n	800beae <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800beaa:	2300      	movs	r3, #0
 800beac:	e001      	b.n	800beb2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800beae:	f06f 0307 	mvn.w	r3, #7
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	2400b3d0 	.word	0x2400b3d0

0800bec0 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b090      	sub	sp, #64	; 0x40
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800beca:	2300      	movs	r3, #0
 800becc:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d003      	beq.n	800bedc <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bed4:	f06f 0301 	mvn.w	r3, #1
 800bed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beda:	e090      	b.n	800bffe <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800bedc:	494a      	ldr	r1, [pc, #296]	; (800c008 <BSP_QSPI_Init+0x148>)
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	4613      	mov	r3, r2
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	4413      	add	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	440b      	add	r3, r1
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	f040 8086 	bne.w	800bffe <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800bef2:	4846      	ldr	r0, [pc, #280]	; (800c00c <BSP_QSPI_Init+0x14c>)
 800bef4:	f000 f99c 	bl	800c230 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800bef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800befa:	2b00      	cmp	r3, #0
 800befc:	d17f      	bne.n	800bffe <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800befe:	f107 031c 	add.w	r3, r7, #28
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fe ffe9 	bl	800aeda <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	785b      	ldrb	r3, [r3, #1]
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	4b40      	ldr	r3, [pc, #256]	; (800c010 <BSP_QSPI_Init+0x150>)
 800bf10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf14:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800bf16:	2340      	movs	r3, #64	; 0x40
 800bf18:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf20:	fa93 f3a3 	rbit	r3, r3
 800bf24:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf28:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800bf30:	2320      	movs	r3, #32
 800bf32:	e003      	b.n	800bf3c <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800bf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf36:	fab3 f383 	clz	r3, r3
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	785b      	ldrb	r3, [r3, #1]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <BSP_QSPI_Init+0x8c>
 800bf48:	2310      	movs	r3, #16
 800bf4a:	e000      	b.n	800bf4e <BSP_QSPI_Init+0x8e>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800bf50:	f107 030c 	add.w	r3, r7, #12
 800bf54:	4619      	mov	r1, r3
 800bf56:	482d      	ldr	r0, [pc, #180]	; (800c00c <BSP_QSPI_Init+0x14c>)
 800bf58:	f000 f85c 	bl	800c014 <MX_QSPI_Init>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d003      	beq.n	800bf6a <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800bf62:	f06f 0303 	mvn.w	r3, #3
 800bf66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf68:	e049      	b.n	800bffe <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 faa8 	bl	800c4c0 <QSPI_ResetMemory>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf76:	f06f 0304 	mvn.w	r3, #4
 800bf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf7c:	e03f      	b.n	800bffe <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bf7e:	4922      	ldr	r1, [pc, #136]	; (800c008 <BSP_QSPI_Init+0x148>)
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	4613      	mov	r3, r2
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	4413      	add	r3, r2
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	440b      	add	r3, r1
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	4619      	mov	r1, r3
 800bf92:	481e      	ldr	r0, [pc, #120]	; (800c00c <BSP_QSPI_Init+0x14c>)
 800bf94:	f7ff f810 	bl	800afb8 <MT25TL01G_AutoPollingMemReady>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d003      	beq.n	800bfa6 <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf9e:	f06f 0304 	mvn.w	r3, #4
 800bfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfa4:	e02b      	b.n	800bffe <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bfa6:	4918      	ldr	r1, [pc, #96]	; (800c008 <BSP_QSPI_Init+0x148>)
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	005b      	lsls	r3, r3, #1
 800bfae:	4413      	add	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	440b      	add	r3, r1
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	4814      	ldr	r0, [pc, #80]	; (800c00c <BSP_QSPI_Init+0x14c>)
 800bfbc:	f7fe ffb4 	bl	800af28 <MT25TL01G_Enter4BytesAddressMode>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d003      	beq.n	800bfce <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bfc6:	f06f 0304 	mvn.w	r3, #4
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfcc:	e017      	b.n	800bffe <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 fae2 	bl	800c598 <QSPI_DummyCyclesCfg>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d003      	beq.n	800bfe2 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bfda:	f06f 0304 	mvn.w	r3, #4
 800bfde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe0:	e00d      	b.n	800bffe <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	7819      	ldrb	r1, [r3, #0]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	785b      	ldrb	r3, [r3, #1]
 800bfea:	461a      	mov	r2, r3
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f89d 	bl	800c12c <BSP_QSPI_ConfigFlash>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d002      	beq.n	800bffe <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800bff8:	f06f 0304 	mvn.w	r3, #4
 800bffc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800bffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c000:	4618      	mov	r0, r3
 800c002:	3740      	adds	r7, #64	; 0x40
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	2400b41c 	.word	0x2400b41c
 800c00c:	2400b2f8 	.word	0x2400b2f8
 800c010:	08028104 	.word	0x08028104

0800c014 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4a13      	ldr	r2, [pc, #76]	; (800c070 <MX_QSPI_Init+0x5c>)
 800c022:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	685a      	ldr	r2, [r3, #4]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	689a      	ldr	r2, [r3, #8]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c048:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	68da      	ldr	r2, [r3, #12]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f003 fa7a 	bl	800f558 <HAL_QSPI_Init>
 800c064:	4603      	mov	r3, r0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	52005000 	.word	0x52005000

0800c074 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c07c:	2300      	movs	r3, #0
 800c07e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c086:	f06f 0301 	mvn.w	r3, #1
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	e045      	b.n	800c11a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800c08e:	4925      	ldr	r1, [pc, #148]	; (800c124 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	4613      	mov	r3, r2
 800c094:	005b      	lsls	r3, r3, #1
 800c096:	4413      	add	r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	440b      	add	r3, r1
 800c09c:	3302      	adds	r3, #2
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d11d      	bne.n	800c0e0 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c0a4:	491f      	ldr	r1, [pc, #124]	; (800c124 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	005b      	lsls	r3, r3, #1
 800c0ac:	4413      	add	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	440b      	add	r3, r1
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	481b      	ldr	r0, [pc, #108]	; (800c128 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800c0ba:	f7ff f8d3 	bl	800b264 <MT25TL01G_EnableMemoryMappedModeSTR>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d003      	beq.n	800c0cc <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0c4:	f06f 0304 	mvn.w	r3, #4
 800c0c8:	60fb      	str	r3, [r7, #12]
 800c0ca:	e026      	b.n	800c11a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800c0cc:	4915      	ldr	r1, [pc, #84]	; (800c124 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	440b      	add	r3, r1
 800c0da:	2202      	movs	r2, #2
 800c0dc:	701a      	strb	r2, [r3, #0]
 800c0de:	e01c      	b.n	800c11a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c0e0:	4910      	ldr	r1, [pc, #64]	; (800c124 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	005b      	lsls	r3, r3, #1
 800c0e8:	4413      	add	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	440b      	add	r3, r1
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	480c      	ldr	r0, [pc, #48]	; (800c128 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800c0f6:	f7ff f84b 	bl	800b190 <MT25TL01G_EnableMemoryMappedModeDTR>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d003      	beq.n	800c108 <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c100:	f06f 0304 	mvn.w	r3, #4
 800c104:	60fb      	str	r3, [r7, #12]
 800c106:	e008      	b.n	800c11a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800c108:	4906      	ldr	r1, [pc, #24]	; (800c124 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	4613      	mov	r3, r2
 800c10e:	005b      	lsls	r3, r3, #1
 800c110:	4413      	add	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	440b      	add	r3, r1
 800c116:	2202      	movs	r2, #2
 800c118:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c11a:	68fb      	ldr	r3, [r7, #12]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3710      	adds	r7, #16
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	2400b41c 	.word	0x2400b41c
 800c128:	2400b2f8 	.word	0x2400b2f8

0800c12c <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	460b      	mov	r3, r1
 800c136:	70fb      	strb	r3, [r7, #3]
 800c138:	4613      	mov	r3, r2
 800c13a:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800c13c:	2300      	movs	r3, #0
 800c13e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d003      	beq.n	800c14e <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c146:	f06f 0301 	mvn.w	r3, #1
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	e067      	b.n	800c21e <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800c14e:	4936      	ldr	r1, [pc, #216]	; (800c228 <BSP_QSPI_ConfigFlash+0xfc>)
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	4613      	mov	r3, r2
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	4413      	add	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	440b      	add	r3, r1
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d103      	bne.n	800c16a <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800c162:	f06f 0319 	mvn.w	r3, #25
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	e059      	b.n	800c21e <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800c16a:	78bb      	ldrb	r3, [r7, #2]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d101      	bne.n	800c174 <BSP_QSPI_ConfigFlash+0x48>
 800c170:	2310      	movs	r3, #16
 800c172:	e000      	b.n	800c176 <BSP_QSPI_ConfigFlash+0x4a>
 800c174:	2300      	movs	r3, #0
 800c176:	4a2d      	ldr	r2, [pc, #180]	; (800c22c <BSP_QSPI_ConfigFlash+0x100>)
 800c178:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800c17a:	482c      	ldr	r0, [pc, #176]	; (800c22c <BSP_QSPI_ConfigFlash+0x100>)
 800c17c:	f003 f9ec 	bl	800f558 <HAL_QSPI_Init>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d003      	beq.n	800c18e <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800c186:	f06f 0303 	mvn.w	r3, #3
 800c18a:	60fb      	str	r3, [r7, #12]
 800c18c:	e047      	b.n	800c21e <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800c18e:	4926      	ldr	r1, [pc, #152]	; (800c228 <BSP_QSPI_ConfigFlash+0xfc>)
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	4613      	mov	r3, r2
 800c194:	005b      	lsls	r3, r3, #1
 800c196:	4413      	add	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	440b      	add	r3, r1
 800c19c:	3301      	adds	r3, #1
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2b03      	cmp	r3, #3
 800c1a2:	d10c      	bne.n	800c1be <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800c1a4:	78fb      	ldrb	r3, [r7, #3]
 800c1a6:	2b03      	cmp	r3, #3
 800c1a8:	d016      	beq.n	800c1d8 <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800c1aa:	4820      	ldr	r0, [pc, #128]	; (800c22c <BSP_QSPI_ConfigFlash+0x100>)
 800c1ac:	f7fe ffc5 	bl	800b13a <MT25TL01G_ExitQPIMode>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d010      	beq.n	800c1d8 <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1b6:	f06f 0304 	mvn.w	r3, #4
 800c1ba:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800c1bc:	e00c      	b.n	800c1d8 <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 800c1be:	78fb      	ldrb	r3, [r7, #3]
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	d10b      	bne.n	800c1dc <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800c1c4:	4819      	ldr	r0, [pc, #100]	; (800c22c <BSP_QSPI_ConfigFlash+0x100>)
 800c1c6:	f7fe ff8e 	bl	800b0e6 <MT25TL01G_EnterQPIMode>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d005      	beq.n	800c1dc <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1d0:	f06f 0304 	mvn.w	r3, #4
 800c1d4:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800c1d6:	e001      	b.n	800c1dc <BSP_QSPI_ConfigFlash+0xb0>
          break;
 800c1d8:	bf00      	nop
 800c1da:	e000      	b.n	800c1de <BSP_QSPI_ConfigFlash+0xb2>
          break;
 800c1dc:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d11c      	bne.n	800c21e <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800c1e4:	4910      	ldr	r1, [pc, #64]	; (800c228 <BSP_QSPI_ConfigFlash+0xfc>)
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	005b      	lsls	r3, r3, #1
 800c1ec:	4413      	add	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	440b      	add	r3, r1
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800c1f6:	490c      	ldr	r1, [pc, #48]	; (800c228 <BSP_QSPI_ConfigFlash+0xfc>)
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	005b      	lsls	r3, r3, #1
 800c1fe:	4413      	add	r3, r2
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	440b      	add	r3, r1
 800c204:	3301      	adds	r3, #1
 800c206:	78fa      	ldrb	r2, [r7, #3]
 800c208:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800c20a:	4907      	ldr	r1, [pc, #28]	; (800c228 <BSP_QSPI_ConfigFlash+0xfc>)
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	4613      	mov	r3, r2
 800c210:	005b      	lsls	r3, r3, #1
 800c212:	4413      	add	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	440b      	add	r3, r1
 800c218:	3302      	adds	r3, #2
 800c21a:	78ba      	ldrb	r2, [r7, #2]
 800c21c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c21e:	68fb      	ldr	r3, [r7, #12]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	2400b41c 	.word	0x2400b41c
 800c22c:	2400b2f8 	.word	0x2400b2f8

0800c230 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b094      	sub	sp, #80	; 0x50
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800c238:	4b9c      	ldr	r3, [pc, #624]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c23a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c23e:	4a9b      	ldr	r2, [pc, #620]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c244:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c248:	4b98      	ldr	r3, [pc, #608]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c24a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c24e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c252:	63bb      	str	r3, [r7, #56]	; 0x38
 800c254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800c256:	4b95      	ldr	r3, [pc, #596]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c25a:	4a94      	ldr	r2, [pc, #592]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c25c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c260:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800c262:	4b92      	ldr	r3, [pc, #584]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c266:	4a91      	ldr	r2, [pc, #580]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c268:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c26c:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800c26e:	4b8f      	ldr	r3, [pc, #572]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c274:	4a8d      	ldr	r2, [pc, #564]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c276:	f043 0320 	orr.w	r3, r3, #32
 800c27a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c27e:	4b8b      	ldr	r3, [pc, #556]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c284:	f003 0320 	and.w	r3, r3, #32
 800c288:	637b      	str	r3, [r7, #52]	; 0x34
 800c28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800c28c:	4b87      	ldr	r3, [pc, #540]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c28e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c292:	4a86      	ldr	r2, [pc, #536]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c29c:	4b83      	ldr	r3, [pc, #524]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c29e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2a6:	633b      	str	r3, [r7, #48]	; 0x30
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800c2aa:	4b80      	ldr	r3, [pc, #512]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c2ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2b0:	4a7e      	ldr	r2, [pc, #504]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c2b2:	f043 0308 	orr.w	r3, r3, #8
 800c2b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2ba:	4b7c      	ldr	r3, [pc, #496]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c2bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2c0:	f003 0308 	and.w	r3, r3, #8
 800c2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800c2c8:	4b78      	ldr	r3, [pc, #480]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c2ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2ce:	4a77      	ldr	r2, [pc, #476]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c2d0:	f043 0320 	orr.w	r3, r3, #32
 800c2d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2d8:	4b74      	ldr	r3, [pc, #464]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c2da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2de:	f003 0320 	and.w	r3, r3, #32
 800c2e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800c2e6:	4b71      	ldr	r3, [pc, #452]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c2e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2ec:	4a6f      	ldr	r2, [pc, #444]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c2ee:	f043 0320 	orr.w	r3, r3, #32
 800c2f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2f6:	4b6d      	ldr	r3, [pc, #436]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c2f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2fc:	f003 0320 	and.w	r3, r3, #32
 800c300:	627b      	str	r3, [r7, #36]	; 0x24
 800c302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800c304:	4b69      	ldr	r3, [pc, #420]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c30a:	4a68      	ldr	r2, [pc, #416]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c30c:	f043 0320 	orr.w	r3, r3, #32
 800c310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c314:	4b65      	ldr	r3, [pc, #404]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c31a:	f003 0320 	and.w	r3, r3, #32
 800c31e:	623b      	str	r3, [r7, #32]
 800c320:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800c322:	4b62      	ldr	r3, [pc, #392]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c328:	4a60      	ldr	r2, [pc, #384]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c32e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c332:	4b5e      	ldr	r3, [pc, #376]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c33c:	61fb      	str	r3, [r7, #28]
 800c33e:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800c340:	4b5a      	ldr	r3, [pc, #360]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c346:	4a59      	ldr	r2, [pc, #356]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c34c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c350:	4b56      	ldr	r3, [pc, #344]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c35a:	61bb      	str	r3, [r7, #24]
 800c35c:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800c35e:	4b53      	ldr	r3, [pc, #332]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c364:	4a51      	ldr	r2, [pc, #324]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c36a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c36e:	4b4f      	ldr	r3, [pc, #316]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c378:	617b      	str	r3, [r7, #20]
 800c37a:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800c37c:	4b4b      	ldr	r3, [pc, #300]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c37e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c382:	4a4a      	ldr	r2, [pc, #296]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c38c:	4b47      	ldr	r3, [pc, #284]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c38e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c396:	613b      	str	r3, [r7, #16]
 800c398:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800c39a:	4b44      	ldr	r3, [pc, #272]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c39c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3a0:	4a42      	ldr	r2, [pc, #264]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c3aa:	4b40      	ldr	r3, [pc, #256]	; (800c4ac <QSPI_MspInit+0x27c>)
 800c3ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800c3b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c3be:	2302      	movs	r3, #2
 800c3c0:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c3ca:	2309      	movs	r3, #9
 800c3cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800c3ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	4836      	ldr	r0, [pc, #216]	; (800c4b0 <QSPI_MspInit+0x280>)
 800c3d6:	f001 fa0d 	bl	800d7f4 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800c3da:	2340      	movs	r3, #64	; 0x40
 800c3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800c3e2:	230a      	movs	r3, #10
 800c3e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800c3e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4831      	ldr	r0, [pc, #196]	; (800c4b4 <QSPI_MspInit+0x284>)
 800c3ee:	f001 fa01 	bl	800d7f4 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800c3f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c3fc:	2309      	movs	r3, #9
 800c3fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800c400:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c404:	4619      	mov	r1, r3
 800c406:	482c      	ldr	r0, [pc, #176]	; (800c4b8 <QSPI_MspInit+0x288>)
 800c408:	f001 f9f4 	bl	800d7f4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800c40c:	2304      	movs	r3, #4
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c410:	2309      	movs	r3, #9
 800c412:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800c414:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c418:	4619      	mov	r1, r3
 800c41a:	4828      	ldr	r0, [pc, #160]	; (800c4bc <QSPI_MspInit+0x28c>)
 800c41c:	f001 f9ea 	bl	800d7f4 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800c420:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c424:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800c426:	230a      	movs	r3, #10
 800c428:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800c42a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c42e:	4619      	mov	r1, r3
 800c430:	481f      	ldr	r0, [pc, #124]	; (800c4b0 <QSPI_MspInit+0x280>)
 800c432:	f001 f9df 	bl	800d7f4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800c436:	2308      	movs	r3, #8
 800c438:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c43a:	2309      	movs	r3, #9
 800c43c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800c43e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c442:	4619      	mov	r1, r3
 800c444:	481d      	ldr	r0, [pc, #116]	; (800c4bc <QSPI_MspInit+0x28c>)
 800c446:	f001 f9d5 	bl	800d7f4 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800c44a:	2380      	movs	r3, #128	; 0x80
 800c44c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c44e:	2309      	movs	r3, #9
 800c450:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800c452:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c456:	4619      	mov	r1, r3
 800c458:	4815      	ldr	r0, [pc, #84]	; (800c4b0 <QSPI_MspInit+0x280>)
 800c45a:	f001 f9cb 	bl	800d7f4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800c45e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800c464:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c468:	4619      	mov	r1, r3
 800c46a:	4812      	ldr	r0, [pc, #72]	; (800c4b4 <QSPI_MspInit+0x284>)
 800c46c:	f001 f9c2 	bl	800d7f4 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800c470:	2340      	movs	r3, #64	; 0x40
 800c472:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800c474:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c478:	4619      	mov	r1, r3
 800c47a:	480d      	ldr	r0, [pc, #52]	; (800c4b0 <QSPI_MspInit+0x280>)
 800c47c:	f001 f9ba 	bl	800d7f4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800c480:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c484:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800c486:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c48a:	4619      	mov	r1, r3
 800c48c:	4809      	ldr	r0, [pc, #36]	; (800c4b4 <QSPI_MspInit+0x284>)
 800c48e:	f001 f9b1 	bl	800d7f4 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800c492:	2200      	movs	r2, #0
 800c494:	210f      	movs	r1, #15
 800c496:	205c      	movs	r0, #92	; 0x5c
 800c498:	f000 fe9c 	bl	800d1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800c49c:	205c      	movs	r0, #92	; 0x5c
 800c49e:	f000 feb3 	bl	800d208 <HAL_NVIC_EnableIRQ>
}
 800c4a2:	bf00      	nop
 800c4a4:	3750      	adds	r7, #80	; 0x50
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	58024400 	.word	0x58024400
 800c4b0:	58021400 	.word	0x58021400
 800c4b4:	58021800 	.word	0x58021800
 800c4b8:	58020c00 	.word	0x58020c00
 800c4bc:	58021c00 	.word	0x58021c00

0800c4c0 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800c4cc:	2103      	movs	r1, #3
 800c4ce:	4830      	ldr	r0, [pc, #192]	; (800c590 <QSPI_ResetMemory+0xd0>)
 800c4d0:	f7fe ff30 	bl	800b334 <MT25TL01G_ResetEnable>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 800c4da:	f06f 0304 	mvn.w	r3, #4
 800c4de:	60fb      	str	r3, [r7, #12]
 800c4e0:	e051      	b.n	800c586 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800c4e2:	2103      	movs	r1, #3
 800c4e4:	482a      	ldr	r0, [pc, #168]	; (800c590 <QSPI_ResetMemory+0xd0>)
 800c4e6:	f7fe ff57 	bl	800b398 <MT25TL01G_ResetMemory>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d003      	beq.n	800c4f8 <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c4f0:	f06f 0304 	mvn.w	r3, #4
 800c4f4:	60fb      	str	r3, [r7, #12]
 800c4f6:	e046      	b.n	800c586 <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c4f8:	4926      	ldr	r1, [pc, #152]	; (800c594 <QSPI_ResetMemory+0xd4>)
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	005b      	lsls	r3, r3, #1
 800c500:	4413      	add	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	440b      	add	r3, r1
 800c506:	3301      	adds	r3, #1
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	4619      	mov	r1, r3
 800c50c:	4820      	ldr	r0, [pc, #128]	; (800c590 <QSPI_ResetMemory+0xd0>)
 800c50e:	f7fe fd53 	bl	800afb8 <MT25TL01G_AutoPollingMemReady>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d003      	beq.n	800c520 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c518:	f06f 0304 	mvn.w	r3, #4
 800c51c:	60fb      	str	r3, [r7, #12]
 800c51e:	e032      	b.n	800c586 <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800c520:	2100      	movs	r1, #0
 800c522:	481b      	ldr	r0, [pc, #108]	; (800c590 <QSPI_ResetMemory+0xd0>)
 800c524:	f7fe ff06 	bl	800b334 <MT25TL01G_ResetEnable>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d003      	beq.n	800c536 <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c52e:	f06f 0304 	mvn.w	r3, #4
 800c532:	60fb      	str	r3, [r7, #12]
 800c534:	e027      	b.n	800c586 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800c536:	2100      	movs	r1, #0
 800c538:	4815      	ldr	r0, [pc, #84]	; (800c590 <QSPI_ResetMemory+0xd0>)
 800c53a:	f7fe ff2d 	bl	800b398 <MT25TL01G_ResetMemory>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d003      	beq.n	800c54c <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c544:	f06f 0304 	mvn.w	r3, #4
 800c548:	60fb      	str	r3, [r7, #12]
 800c54a:	e01c      	b.n	800c586 <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800c54c:	4911      	ldr	r1, [pc, #68]	; (800c594 <QSPI_ResetMemory+0xd4>)
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	4613      	mov	r3, r2
 800c552:	005b      	lsls	r3, r3, #1
 800c554:	4413      	add	r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	440b      	add	r3, r1
 800c55a:	2201      	movs	r2, #1
 800c55c:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800c55e:	490d      	ldr	r1, [pc, #52]	; (800c594 <QSPI_ResetMemory+0xd4>)
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	4613      	mov	r3, r2
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	4413      	add	r3, r2
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	440b      	add	r3, r1
 800c56c:	3301      	adds	r3, #1
 800c56e:	2200      	movs	r2, #0
 800c570:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800c572:	4908      	ldr	r1, [pc, #32]	; (800c594 <QSPI_ResetMemory+0xd4>)
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	4613      	mov	r3, r2
 800c578:	005b      	lsls	r3, r3, #1
 800c57a:	4413      	add	r3, r2
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	440b      	add	r3, r1
 800c580:	3302      	adds	r3, #2
 800c582:	2200      	movs	r2, #0
 800c584:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 800c586:	68fb      	ldr	r3, [r7, #12]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	2400b2f8 	.word	0x2400b2f8
 800c594:	2400b41c 	.word	0x2400b41c

0800c598 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b092      	sub	sp, #72	; 0x48
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800c5a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c5ac:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800c5ae:	2385      	movs	r3, #133	; 0x85
 800c5b0:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800c5ba:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800c5be:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c5d4:	f107 030c 	add.w	r3, r7, #12
 800c5d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5dc:	4619      	mov	r1, r3
 800c5de:	482b      	ldr	r0, [pc, #172]	; (800c68c <QSPI_DummyCyclesCfg+0xf4>)
 800c5e0:	f003 f9e8 	bl	800f9b4 <HAL_QSPI_Command>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d002      	beq.n	800c5f0 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c5ea:	f06f 0304 	mvn.w	r3, #4
 800c5ee:	e048      	b.n	800c682 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c5f0:	f107 030a 	add.w	r3, r7, #10
 800c5f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	4824      	ldr	r0, [pc, #144]	; (800c68c <QSPI_DummyCyclesCfg+0xf4>)
 800c5fc:	f003 faca 	bl	800fb94 <HAL_QSPI_Receive>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d002      	beq.n	800c60c <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c606:	f06f 0304 	mvn.w	r3, #4
 800c60a:	e03a      	b.n	800c682 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c60c:	4920      	ldr	r1, [pc, #128]	; (800c690 <QSPI_DummyCyclesCfg+0xf8>)
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	4613      	mov	r3, r2
 800c612:	005b      	lsls	r3, r3, #1
 800c614:	4413      	add	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	440b      	add	r3, r1
 800c61a:	3301      	adds	r3, #1
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	4619      	mov	r1, r3
 800c620:	481a      	ldr	r0, [pc, #104]	; (800c68c <QSPI_DummyCyclesCfg+0xf4>)
 800c622:	f7fe fd05 	bl	800b030 <MT25TL01G_WriteEnable>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c62c:	f06f 0304 	mvn.w	r3, #4
 800c630:	e027      	b.n	800c682 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800c632:	2381      	movs	r3, #129	; 0x81
 800c634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800c636:	897a      	ldrh	r2, [r7, #10]
 800c638:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c63c:	4013      	ands	r3, r2
 800c63e:	b29a      	uxth	r2, r3
 800c640:	4b14      	ldr	r3, [pc, #80]	; (800c694 <QSPI_DummyCyclesCfg+0xfc>)
 800c642:	4313      	orrs	r3, r2
 800c644:	b29b      	uxth	r3, r3
 800c646:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c648:	f107 030c 	add.w	r3, r7, #12
 800c64c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c650:	4619      	mov	r1, r3
 800c652:	480e      	ldr	r0, [pc, #56]	; (800c68c <QSPI_DummyCyclesCfg+0xf4>)
 800c654:	f003 f9ae 	bl	800f9b4 <HAL_QSPI_Command>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d002      	beq.n	800c664 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c65e:	f06f 0304 	mvn.w	r3, #4
 800c662:	e00e      	b.n	800c682 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c664:	f107 030a 	add.w	r3, r7, #10
 800c668:	f241 3288 	movw	r2, #5000	; 0x1388
 800c66c:	4619      	mov	r1, r3
 800c66e:	4807      	ldr	r0, [pc, #28]	; (800c68c <QSPI_DummyCyclesCfg+0xf4>)
 800c670:	f003 f9fe 	bl	800fa70 <HAL_QSPI_Transmit>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d002      	beq.n	800c680 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c67a:	f06f 0304 	mvn.w	r3, #4
 800c67e:	e000      	b.n	800c682 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 800c680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c682:	4618      	mov	r0, r3
 800c684:	3748      	adds	r7, #72	; 0x48
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	2400b2f8 	.word	0x2400b2f8
 800c690:	2400b41c 	.word	0x2400b41c
 800c694:	ffff8080 	.word	0xffff8080

0800c698 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d003      	beq.n	800c6b2 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800c6aa:	f06f 0301 	mvn.w	r3, #1
 800c6ae:	60fb      	str	r3, [r7, #12]
 800c6b0:	e044      	b.n	800c73c <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2234      	movs	r2, #52	; 0x34
 800c6b6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ba:	4a23      	ldr	r2, [pc, #140]	; (800c748 <BSP_SDRAM_Init+0xb0>)
 800c6bc:	4413      	add	r3, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f000 f8b8 	bl	800c834 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2234      	movs	r2, #52	; 0x34
 800c6c8:	fb02 f303 	mul.w	r3, r2, r3
 800c6cc:	4a1e      	ldr	r2, [pc, #120]	; (800c748 <BSP_SDRAM_Init+0xb0>)
 800c6ce:	4413      	add	r3, r2
 800c6d0:	2210      	movs	r2, #16
 800c6d2:	2104      	movs	r1, #4
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f000 f861 	bl	800c79c <MX_SDRAM_BANK2_Init>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d003      	beq.n	800c6e8 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 800c6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e4:	60fb      	str	r3, [r7, #12]
 800c6e6:	e029      	b.n	800c73c <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800c6e8:	4b18      	ldr	r3, [pc, #96]	; (800c74c <BSP_SDRAM_Init+0xb4>)
 800c6ea:	2208      	movs	r2, #8
 800c6ec:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800c6ee:	4b17      	ldr	r3, [pc, #92]	; (800c74c <BSP_SDRAM_Init+0xb4>)
 800c6f0:	2203      	movs	r2, #3
 800c6f2:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800c6f4:	4b15      	ldr	r3, [pc, #84]	; (800c74c <BSP_SDRAM_Init+0xb4>)
 800c6f6:	f240 6203 	movw	r2, #1539	; 0x603
 800c6fa:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 800c6fc:	4b13      	ldr	r3, [pc, #76]	; (800c74c <BSP_SDRAM_Init+0xb4>)
 800c6fe:	2200      	movs	r2, #0
 800c700:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800c702:	4b12      	ldr	r3, [pc, #72]	; (800c74c <BSP_SDRAM_Init+0xb4>)
 800c704:	2200      	movs	r2, #0
 800c706:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800c708:	4b10      	ldr	r3, [pc, #64]	; (800c74c <BSP_SDRAM_Init+0xb4>)
 800c70a:	2230      	movs	r2, #48	; 0x30
 800c70c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800c70e:	4b0f      	ldr	r3, [pc, #60]	; (800c74c <BSP_SDRAM_Init+0xb4>)
 800c710:	2200      	movs	r2, #0
 800c712:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800c714:	4b0d      	ldr	r3, [pc, #52]	; (800c74c <BSP_SDRAM_Init+0xb4>)
 800c716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c71a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2234      	movs	r2, #52	; 0x34
 800c720:	fb02 f303 	mul.w	r3, r2, r3
 800c724:	4a08      	ldr	r2, [pc, #32]	; (800c748 <BSP_SDRAM_Init+0xb0>)
 800c726:	4413      	add	r3, r2
 800c728:	4908      	ldr	r1, [pc, #32]	; (800c74c <BSP_SDRAM_Init+0xb4>)
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fe fe66 	bl	800b3fc <MT48LC4M32B2_Init>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d002      	beq.n	800c73c <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800c736:	f06f 0304 	mvn.w	r3, #4
 800c73a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800c73c:	68fb      	ldr	r3, [r7, #12]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	2400b428 	.word	0x2400b428
 800c74c:	2400ad90 	.word	0x2400ad90

0800c750 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c758:	2300      	movs	r3, #0
 800c75a:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d003      	beq.n	800c76a <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800c762:	f06f 0301 	mvn.w	r3, #1
 800c766:	60fb      	str	r3, [r7, #12]
 800c768:	e011      	b.n	800c78e <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2234      	movs	r2, #52	; 0x34
 800c76e:	fb02 f303 	mul.w	r3, r2, r3
 800c772:	4a09      	ldr	r2, [pc, #36]	; (800c798 <BSP_SDRAM_DeInit+0x48>)
 800c774:	4413      	add	r3, r2
 800c776:	4618      	mov	r0, r3
 800c778:	f005 ff14 	bl	80125a4 <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2234      	movs	r2, #52	; 0x34
 800c780:	fb02 f303 	mul.w	r3, r2, r3
 800c784:	4a04      	ldr	r2, [pc, #16]	; (800c798 <BSP_SDRAM_DeInit+0x48>)
 800c786:	4413      	add	r3, r2
 800c788:	4618      	mov	r0, r3
 800c78a:	f000 f951 	bl	800ca30 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 800c78e:	68fb      	ldr	r3, [r7, #12]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	2400b428 	.word	0x2400b428

0800c79c <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08c      	sub	sp, #48	; 0x30
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800c7a8:	4b20      	ldr	r3, [pc, #128]	; (800c82c <MX_SDRAM_BANK2_Init+0x90>)
 800c7aa:	4a21      	ldr	r2, [pc, #132]	; (800c830 <MX_SDRAM_BANK2_Init+0x94>)
 800c7ac:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800c7c6:	4b19      	ldr	r3, [pc, #100]	; (800c82c <MX_SDRAM_BANK2_Init+0x90>)
 800c7c8:	2240      	movs	r2, #64	; 0x40
 800c7ca:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c7d2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c7e0:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c7e8:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800c7f4:	2307      	movs	r3, #7
 800c7f6:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 800c7f8:	2304      	movs	r3, #4
 800c7fa:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800c7fc:	2307      	movs	r3, #7
 800c7fe:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800c800:	2302      	movs	r3, #2
 800c802:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 800c804:	2302      	movs	r3, #2
 800c806:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 800c808:	2302      	movs	r3, #2
 800c80a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800c80c:	f107 0314 	add.w	r3, r7, #20
 800c810:	4619      	mov	r1, r3
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	f005 fe8a 	bl	801252c <HAL_SDRAM_Init>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d001      	beq.n	800c822 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	e000      	b.n	800c824 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3730      	adds	r7, #48	; 0x30
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	2400b428 	.word	0x2400b428
 800c830:	52004140 	.word	0x52004140

0800c834 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b08e      	sub	sp, #56	; 0x38
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800c83c:	4b73      	ldr	r3, [pc, #460]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c83e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c842:	4a72      	ldr	r2, [pc, #456]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c848:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c84c:	4b6f      	ldr	r3, [pc, #444]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c84e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c856:	623b      	str	r3, [r7, #32]
 800c858:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800c85a:	4b6c      	ldr	r3, [pc, #432]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c85c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c860:	4a6a      	ldr	r2, [pc, #424]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c862:	f043 0301 	orr.w	r3, r3, #1
 800c866:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c86a:	4b68      	ldr	r3, [pc, #416]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c86c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c870:	f003 0301 	and.w	r3, r3, #1
 800c874:	61fb      	str	r3, [r7, #28]
 800c876:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c878:	4b64      	ldr	r3, [pc, #400]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c87a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c87e:	4a63      	ldr	r2, [pc, #396]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c880:	f043 0308 	orr.w	r3, r3, #8
 800c884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c888:	4b60      	ldr	r3, [pc, #384]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c88a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c88e:	f003 0308 	and.w	r3, r3, #8
 800c892:	61bb      	str	r3, [r7, #24]
 800c894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c896:	4b5d      	ldr	r3, [pc, #372]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c89c:	4a5b      	ldr	r2, [pc, #364]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c89e:	f043 0310 	orr.w	r3, r3, #16
 800c8a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c8a6:	4b59      	ldr	r3, [pc, #356]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c8a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8ac:	f003 0310 	and.w	r3, r3, #16
 800c8b0:	617b      	str	r3, [r7, #20]
 800c8b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c8b4:	4b55      	ldr	r3, [pc, #340]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c8b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8ba:	4a54      	ldr	r2, [pc, #336]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c8bc:	f043 0320 	orr.w	r3, r3, #32
 800c8c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c8c4:	4b51      	ldr	r3, [pc, #324]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c8c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8ca:	f003 0320 	and.w	r3, r3, #32
 800c8ce:	613b      	str	r3, [r7, #16]
 800c8d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c8d2:	4b4e      	ldr	r3, [pc, #312]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c8d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8d8:	4a4c      	ldr	r2, [pc, #304]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c8da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c8e2:	4b4a      	ldr	r3, [pc, #296]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c8e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ec:	60fb      	str	r3, [r7, #12]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c8f0:	4b46      	ldr	r3, [pc, #280]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c8f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8f6:	4a45      	ldr	r2, [pc, #276]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c8f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c900:	4b42      	ldr	r3, [pc, #264]	; (800ca0c <SDRAM_MspInit+0x1d8>)
 800c902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c90a:	60bb      	str	r3, [r7, #8]
 800c90c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c90e:	2302      	movs	r3, #2
 800c910:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c912:	2301      	movs	r3, #1
 800c914:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800c916:	2303      	movs	r3, #3
 800c918:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800c91a:	230c      	movs	r3, #12
 800c91c:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800c91e:	f24c 7303 	movw	r3, #50947	; 0xc703
 800c922:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800c924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c928:	4619      	mov	r1, r3
 800c92a:	4839      	ldr	r0, [pc, #228]	; (800ca10 <SDRAM_MspInit+0x1dc>)
 800c92c:	f000 ff62 	bl	800d7f4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800c930:	f64f 7383 	movw	r3, #65411	; 0xff83
 800c934:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800c936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c93a:	4619      	mov	r1, r3
 800c93c:	4835      	ldr	r0, [pc, #212]	; (800ca14 <SDRAM_MspInit+0x1e0>)
 800c93e:	f000 ff59 	bl	800d7f4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800c942:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800c946:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800c948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c94c:	4619      	mov	r1, r3
 800c94e:	4832      	ldr	r0, [pc, #200]	; (800ca18 <SDRAM_MspInit+0x1e4>)
 800c950:	f000 ff50 	bl	800d7f4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800c954:	f248 1333 	movw	r3, #33075	; 0x8133
 800c958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c95a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c95e:	4619      	mov	r1, r3
 800c960:	482e      	ldr	r0, [pc, #184]	; (800ca1c <SDRAM_MspInit+0x1e8>)
 800c962:	f000 ff47 	bl	800d7f4 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800c966:	23e0      	movs	r3, #224	; 0xe0
 800c968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800c96a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c96e:	4619      	mov	r1, r3
 800c970:	482b      	ldr	r0, [pc, #172]	; (800ca20 <SDRAM_MspInit+0x1ec>)
 800c972:	f000 ff3f 	bl	800d7f4 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800c976:	4b2b      	ldr	r3, [pc, #172]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c97c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800c97e:	4b29      	ldr	r3, [pc, #164]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c984:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800c986:	4b27      	ldr	r3, [pc, #156]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c988:	2280      	movs	r2, #128	; 0x80
 800c98a:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800c98c:	4b25      	ldr	r3, [pc, #148]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c98e:	2200      	movs	r2, #0
 800c990:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800c992:	4b24      	ldr	r3, [pc, #144]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c994:	f240 2202 	movw	r2, #514	; 0x202
 800c998:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800c99a:	4b22      	ldr	r3, [pc, #136]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c99c:	f640 0208 	movw	r2, #2056	; 0x808
 800c9a0:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800c9a2:	4b20      	ldr	r3, [pc, #128]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9a4:	2220      	movs	r2, #32
 800c9a6:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800c9a8:	4b1e      	ldr	r3, [pc, #120]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9aa:	2280      	movs	r2, #128	; 0x80
 800c9ac:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800c9ae:	4b1d      	ldr	r3, [pc, #116]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c9b4:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800c9b6:	4b1b      	ldr	r3, [pc, #108]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800c9bc:	4b19      	ldr	r3, [pc, #100]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800c9c2:	4b18      	ldr	r3, [pc, #96]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9c4:	2280      	movs	r2, #128	; 0x80
 800c9c6:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800c9c8:	4b16      	ldr	r3, [pc, #88]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800c9ce:	4b15      	ldr	r3, [pc, #84]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800c9d4:	4b13      	ldr	r3, [pc, #76]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9d6:	4a14      	ldr	r2, [pc, #80]	; (800ca28 <SDRAM_MspInit+0x1f4>)
 800c9d8:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800c9da:	4b14      	ldr	r3, [pc, #80]	; (800ca2c <SDRAM_MspInit+0x1f8>)
 800c9dc:	4a11      	ldr	r2, [pc, #68]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9de:	631a      	str	r2, [r3, #48]	; 0x30
 800c9e0:	4b10      	ldr	r3, [pc, #64]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9e2:	4a12      	ldr	r2, [pc, #72]	; (800ca2c <SDRAM_MspInit+0x1f8>)
 800c9e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800c9e6:	480f      	ldr	r0, [pc, #60]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9e8:	f002 fc44 	bl	800f274 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800c9ec:	480d      	ldr	r0, [pc, #52]	; (800ca24 <SDRAM_MspInit+0x1f0>)
 800c9ee:	f002 fbf5 	bl	800f1dc <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	210f      	movs	r1, #15
 800c9f6:	207a      	movs	r0, #122	; 0x7a
 800c9f8:	f000 fbec 	bl	800d1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800c9fc:	207a      	movs	r0, #122	; 0x7a
 800c9fe:	f000 fc03 	bl	800d208 <HAL_NVIC_EnableIRQ>
}
 800ca02:	bf00      	nop
 800ca04:	3738      	adds	r7, #56	; 0x38
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	58024400 	.word	0x58024400
 800ca10:	58020c00 	.word	0x58020c00
 800ca14:	58021000 	.word	0x58021000
 800ca18:	58021400 	.word	0x58021400
 800ca1c:	58021800 	.word	0x58021800
 800ca20:	58021c00 	.word	0x58021c00
 800ca24:	2400adb0 	.word	0x2400adb0
 800ca28:	52000040 	.word	0x52000040
 800ca2c:	2400b428 	.word	0x2400b428

0800ca30 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800ca38:	207a      	movs	r0, #122	; 0x7a
 800ca3a:	f000 fbf3 	bl	800d224 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800ca3e:	4b05      	ldr	r3, [pc, #20]	; (800ca54 <SDRAM_MspDeInit+0x24>)
 800ca40:	4a05      	ldr	r2, [pc, #20]	; (800ca58 <SDRAM_MspDeInit+0x28>)
 800ca42:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800ca44:	4803      	ldr	r0, [pc, #12]	; (800ca54 <SDRAM_MspDeInit+0x24>)
 800ca46:	f002 fc15 	bl	800f274 <HAL_MDMA_DeInit>
}
 800ca4a:	bf00      	nop
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	2400ae1c 	.word	0x2400ae1c
 800ca58:	52000040 	.word	0x52000040

0800ca5c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b088      	sub	sp, #32
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ca66:	2300      	movs	r3, #0
 800ca68:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d11c      	bne.n	800caaa <BSP_TS_Init+0x4e>
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d018      	beq.n	800caaa <BSP_TS_Init+0x4e>
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800ca80:	d813      	bhi.n	800caaa <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00f      	beq.n	800caaa <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800ca92:	d80a      	bhi.n	800caaa <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	68da      	ldr	r2, [r3, #12]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	6819      	ldr	r1, [r3, #0]
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	428b      	cmp	r3, r1
 800caa2:	bf28      	it	cs
 800caa4:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d903      	bls.n	800cab2 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800caaa:	f06f 0301 	mvn.w	r3, #1
 800caae:	61fb      	str	r3, [r7, #28]
 800cab0:	e085      	b.n	800cbbe <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 f9e6 	bl	800ce84 <FT5336_Probe>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800cabe:	f04f 33ff 	mov.w	r3, #4294967295
 800cac2:	61fb      	str	r3, [r7, #28]
 800cac4:	e07b      	b.n	800cbbe <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	6819      	ldr	r1, [r3, #0]
 800caca:	483f      	ldr	r0, [pc, #252]	; (800cbc8 <BSP_TS_Init+0x16c>)
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	4613      	mov	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	4403      	add	r3, r0
 800cad8:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	6859      	ldr	r1, [r3, #4]
 800cade:	483a      	ldr	r0, [pc, #232]	; (800cbc8 <BSP_TS_Init+0x16c>)
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	4613      	mov	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	4413      	add	r3, r2
 800cae8:	00db      	lsls	r3, r3, #3
 800caea:	4403      	add	r3, r0
 800caec:	3304      	adds	r3, #4
 800caee:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	6899      	ldr	r1, [r3, #8]
 800caf4:	4834      	ldr	r0, [pc, #208]	; (800cbc8 <BSP_TS_Init+0x16c>)
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	4613      	mov	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	00db      	lsls	r3, r3, #3
 800cb00:	4403      	add	r3, r0
 800cb02:	3308      	adds	r3, #8
 800cb04:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	68d9      	ldr	r1, [r3, #12]
 800cb0a:	482f      	ldr	r0, [pc, #188]	; (800cbc8 <BSP_TS_Init+0x16c>)
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	00db      	lsls	r3, r3, #3
 800cb16:	4403      	add	r3, r0
 800cb18:	330c      	adds	r3, #12
 800cb1a:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800cb1c:	4b2b      	ldr	r3, [pc, #172]	; (800cbcc <BSP_TS_Init+0x170>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	69db      	ldr	r3, [r3, #28]
 800cb22:	492b      	ldr	r1, [pc, #172]	; (800cbd0 <BSP_TS_Init+0x174>)
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cb2a:	f107 010c 	add.w	r1, r7, #12
 800cb2e:	4610      	mov	r0, r2
 800cb30:	4798      	blx	r3
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	da03      	bge.n	800cb40 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800cb38:	f06f 0304 	mvn.w	r3, #4
 800cb3c:	61fb      	str	r3, [r7, #28]
 800cb3e:	e03e      	b.n	800cbbe <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800cb40:	6939      	ldr	r1, [r7, #16]
 800cb42:	4821      	ldr	r0, [pc, #132]	; (800cbc8 <BSP_TS_Init+0x16c>)
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	4613      	mov	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	4413      	add	r3, r2
 800cb4c:	00db      	lsls	r3, r3, #3
 800cb4e:	4403      	add	r3, r0
 800cb50:	3310      	adds	r3, #16
 800cb52:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800cb54:	6979      	ldr	r1, [r7, #20]
 800cb56:	481c      	ldr	r0, [pc, #112]	; (800cbc8 <BSP_TS_Init+0x16c>)
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	4413      	add	r3, r2
 800cb60:	00db      	lsls	r3, r3, #3
 800cb62:	4403      	add	r3, r0
 800cb64:	3314      	adds	r3, #20
 800cb66:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800cb68:	2300      	movs	r3, #0
 800cb6a:	61bb      	str	r3, [r7, #24]
 800cb6c:	e024      	b.n	800cbb8 <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	4413      	add	r3, r2
 800cb78:	1c59      	adds	r1, r3, #1
 800cb7a:	4813      	ldr	r0, [pc, #76]	; (800cbc8 <BSP_TS_Init+0x16c>)
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4413      	add	r3, r2
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	69ba      	ldr	r2, [r7, #24]
 800cb88:	4413      	add	r3, r2
 800cb8a:	3306      	adds	r3, #6
 800cb8c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	4413      	add	r3, r2
 800cb9a:	1c59      	adds	r1, r3, #1
 800cb9c:	480a      	ldr	r0, [pc, #40]	; (800cbc8 <BSP_TS_Init+0x16c>)
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	4613      	mov	r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	4413      	add	r3, r2
 800cba6:	005b      	lsls	r3, r3, #1
 800cba8:	69ba      	ldr	r2, [r7, #24]
 800cbaa:	4413      	add	r3, r2
 800cbac:	3308      	adds	r3, #8
 800cbae:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	61bb      	str	r3, [r7, #24]
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d9d7      	bls.n	800cb6e <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 800cbbe:	69fb      	ldr	r3, [r7, #28]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3720      	adds	r7, #32
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	2400ae90 	.word	0x2400ae90
 800cbcc:	2400ae88 	.word	0x2400ae88
 800cbd0:	2400ae8c 	.word	0x2400ae8c

0800cbd4 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b08a      	sub	sp, #40	; 0x28
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d003      	beq.n	800cbf0 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800cbe8:	f06f 0301 	mvn.w	r3, #1
 800cbec:	627b      	str	r3, [r7, #36]	; 0x24
 800cbee:	e13e      	b.n	800ce6e <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800cbf0:	4ba1      	ldr	r3, [pc, #644]	; (800ce78 <BSP_TS_GetState+0x2a4>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	49a1      	ldr	r1, [pc, #644]	; (800ce7c <BSP_TS_GetState+0x2a8>)
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cbfe:	f107 0108 	add.w	r1, r7, #8
 800cc02:	4610      	mov	r0, r2
 800cc04:	4798      	blx	r3
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	da03      	bge.n	800cc14 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800cc0c:	f06f 0304 	mvn.w	r3, #4
 800cc10:	627b      	str	r3, [r7, #36]	; 0x24
 800cc12:	e12c      	b.n	800ce6e <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f000 8110 	beq.w	800ce3c <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800cc24:	4996      	ldr	r1, [pc, #600]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	4413      	add	r3, r2
 800cc2e:	00db      	lsls	r3, r3, #3
 800cc30:	440b      	add	r3, r1
 800cc32:	3308      	adds	r3, #8
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 0308 	and.w	r3, r3, #8
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d003      	beq.n	800cc46 <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800cc46:	498e      	ldr	r1, [pc, #568]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4413      	add	r3, r2
 800cc50:	00db      	lsls	r3, r3, #3
 800cc52:	440b      	add	r3, r1
 800cc54:	3308      	adds	r3, #8
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f003 0302 	and.w	r3, r3, #2
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00c      	beq.n	800cc7a <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800cc60:	4987      	ldr	r1, [pc, #540]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	4613      	mov	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4413      	add	r3, r2
 800cc6a:	00db      	lsls	r3, r3, #3
 800cc6c:	440b      	add	r3, r1
 800cc6e:	3310      	adds	r3, #16
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	3b01      	subs	r3, #1
 800cc78:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800cc7a:	4981      	ldr	r1, [pc, #516]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4413      	add	r3, r2
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	440b      	add	r3, r1
 800cc88:	3308      	adds	r3, #8
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 0304 	and.w	r3, r3, #4
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00b      	beq.n	800ccac <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800cc94:	497a      	ldr	r1, [pc, #488]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	4613      	mov	r3, r2
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4413      	add	r3, r2
 800cc9e:	00db      	lsls	r3, r3, #3
 800cca0:	440b      	add	r3, r1
 800cca2:	3314      	adds	r3, #20
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800ccac:	4974      	ldr	r1, [pc, #464]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4413      	add	r3, r2
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	440b      	add	r3, r1
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6a3a      	ldr	r2, [r7, #32]
 800ccbe:	fb02 f103 	mul.w	r1, r2, r3
 800ccc2:	486f      	ldr	r0, [pc, #444]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	4413      	add	r3, r2
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	4403      	add	r3, r0
 800ccd0:	3310      	adds	r3, #16
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	fbb1 f2f3 	udiv	r2, r1, r3
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800ccdc:	4968      	ldr	r1, [pc, #416]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	4613      	mov	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4413      	add	r3, r2
 800cce6:	00db      	lsls	r3, r3, #3
 800cce8:	440b      	add	r3, r1
 800ccea:	3304      	adds	r3, #4
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	69fa      	ldr	r2, [r7, #28]
 800ccf0:	fb02 f103 	mul.w	r1, r2, r3
 800ccf4:	4862      	ldr	r0, [pc, #392]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	4413      	add	r3, r2
 800ccfe:	00db      	lsls	r3, r3, #3
 800cd00:	4403      	add	r3, r0
 800cd02:	3314      	adds	r3, #20
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	fbb1 f2f3 	udiv	r2, r1, r3
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	6859      	ldr	r1, [r3, #4]
 800cd18:	4859      	ldr	r0, [pc, #356]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	4413      	add	r3, r2
 800cd22:	00db      	lsls	r3, r3, #3
 800cd24:	4403      	add	r3, r0
 800cd26:	3318      	adds	r3, #24
 800cd28:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800cd2a:	4299      	cmp	r1, r3
 800cd2c:	d90c      	bls.n	800cd48 <BSP_TS_GetState+0x174>
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	6859      	ldr	r1, [r3, #4]
 800cd32:	4853      	ldr	r0, [pc, #332]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	4613      	mov	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4413      	add	r3, r2
 800cd3c:	00db      	lsls	r3, r3, #3
 800cd3e:	4403      	add	r3, r0
 800cd40:	3318      	adds	r3, #24
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	1acb      	subs	r3, r1, r3
 800cd46:	e00b      	b.n	800cd60 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800cd48:	494d      	ldr	r1, [pc, #308]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	00db      	lsls	r3, r3, #3
 800cd54:	440b      	add	r3, r1
 800cd56:	3318      	adds	r3, #24
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800cd5e:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800cd60:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	6899      	ldr	r1, [r3, #8]
 800cd66:	4846      	ldr	r0, [pc, #280]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	00db      	lsls	r3, r3, #3
 800cd72:	4403      	add	r3, r0
 800cd74:	3320      	adds	r3, #32
 800cd76:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800cd78:	4299      	cmp	r1, r3
 800cd7a:	d90c      	bls.n	800cd96 <BSP_TS_GetState+0x1c2>
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	6899      	ldr	r1, [r3, #8]
 800cd80:	483f      	ldr	r0, [pc, #252]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	4613      	mov	r3, r2
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	4413      	add	r3, r2
 800cd8a:	00db      	lsls	r3, r3, #3
 800cd8c:	4403      	add	r3, r0
 800cd8e:	3320      	adds	r3, #32
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	1acb      	subs	r3, r1, r3
 800cd94:	e00b      	b.n	800cdae <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800cd96:	493a      	ldr	r1, [pc, #232]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	00db      	lsls	r3, r3, #3
 800cda2:	440b      	add	r3, r1
 800cda4:	3320      	adds	r3, #32
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800cdac:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800cdae:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800cdb0:	4933      	ldr	r1, [pc, #204]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4413      	add	r3, r2
 800cdba:	00db      	lsls	r3, r3, #3
 800cdbc:	440b      	add	r3, r1
 800cdbe:	330c      	adds	r3, #12
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	69ba      	ldr	r2, [r7, #24]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d80b      	bhi.n	800cde0 <BSP_TS_GetState+0x20c>
 800cdc8:	492d      	ldr	r1, [pc, #180]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	4613      	mov	r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4413      	add	r3, r2
 800cdd2:	00db      	lsls	r3, r3, #3
 800cdd4:	440b      	add	r3, r1
 800cdd6:	330c      	adds	r3, #12
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d916      	bls.n	800ce0e <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	6859      	ldr	r1, [r3, #4]
 800cde4:	4826      	ldr	r0, [pc, #152]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	4613      	mov	r3, r2
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	4413      	add	r3, r2
 800cdee:	00db      	lsls	r3, r3, #3
 800cdf0:	4403      	add	r3, r0
 800cdf2:	3318      	adds	r3, #24
 800cdf4:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	6899      	ldr	r1, [r3, #8]
 800cdfa:	4821      	ldr	r0, [pc, #132]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	4613      	mov	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4413      	add	r3, r2
 800ce04:	00db      	lsls	r3, r3, #3
 800ce06:	4403      	add	r3, r0
 800ce08:	3320      	adds	r3, #32
 800ce0a:	6019      	str	r1, [r3, #0]
 800ce0c:	e02f      	b.n	800ce6e <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800ce0e:	491c      	ldr	r1, [pc, #112]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	4613      	mov	r3, r2
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4413      	add	r3, r2
 800ce18:	00db      	lsls	r3, r3, #3
 800ce1a:	440b      	add	r3, r1
 800ce1c:	3318      	adds	r3, #24
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800ce24:	4916      	ldr	r1, [pc, #88]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	440b      	add	r3, r1
 800ce32:	3320      	adds	r3, #32
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	609a      	str	r2, [r3, #8]
 800ce3a:	e018      	b.n	800ce6e <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800ce42:	490f      	ldr	r1, [pc, #60]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	4613      	mov	r3, r2
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	4413      	add	r3, r2
 800ce4c:	00db      	lsls	r3, r3, #3
 800ce4e:	440b      	add	r3, r1
 800ce50:	3318      	adds	r3, #24
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800ce58:	4909      	ldr	r1, [pc, #36]	; (800ce80 <BSP_TS_GetState+0x2ac>)
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	440b      	add	r3, r1
 800ce66:	3320      	adds	r3, #32
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3728      	adds	r7, #40	; 0x28
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	2400ae88 	.word	0x2400ae88
 800ce7c:	2400ae8c 	.word	0x2400ae8c
 800ce80:	2400ae90 	.word	0x2400ae90

0800ce84 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b08a      	sub	sp, #40	; 0x28
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800ce90:	2300      	movs	r3, #0
 800ce92:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800ce94:	2370      	movs	r3, #112	; 0x70
 800ce96:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800ce98:	4b23      	ldr	r3, [pc, #140]	; (800cf28 <FT5336_Probe+0xa4>)
 800ce9a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800ce9c:	4b23      	ldr	r3, [pc, #140]	; (800cf2c <FT5336_Probe+0xa8>)
 800ce9e:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800cea0:	4b23      	ldr	r3, [pc, #140]	; (800cf30 <FT5336_Probe+0xac>)
 800cea2:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800cea4:	4b23      	ldr	r3, [pc, #140]	; (800cf34 <FT5336_Probe+0xb0>)
 800cea6:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800cea8:	4b23      	ldr	r3, [pc, #140]	; (800cf38 <FT5336_Probe+0xb4>)
 800ceaa:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800ceac:	f107 030c 	add.w	r3, r7, #12
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4822      	ldr	r0, [pc, #136]	; (800cf3c <FT5336_Probe+0xb8>)
 800ceb4:	f7fd fcaa 	bl	800a80c <FT5336_RegisterBusIO>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d003      	beq.n	800cec6 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800cebe:	f06f 0307 	mvn.w	r3, #7
 800cec2:	627b      	str	r3, [r7, #36]	; 0x24
 800cec4:	e02a      	b.n	800cf1c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800cec6:	f107 0308 	add.w	r3, r7, #8
 800ceca:	4619      	mov	r1, r3
 800cecc:	481b      	ldr	r0, [pc, #108]	; (800cf3c <FT5336_Probe+0xb8>)
 800cece:	f7fd fd97 	bl	800aa00 <FT5336_ReadID>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d003      	beq.n	800cee0 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ced8:	f06f 0304 	mvn.w	r3, #4
 800cedc:	627b      	str	r3, [r7, #36]	; 0x24
 800cede:	e01d      	b.n	800cf1c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	2b51      	cmp	r3, #81	; 0x51
 800cee4:	d003      	beq.n	800ceee <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800cee6:	f06f 0306 	mvn.w	r3, #6
 800ceea:	627b      	str	r3, [r7, #36]	; 0x24
 800ceec:	e016      	b.n	800cf1c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800ceee:	4a14      	ldr	r2, [pc, #80]	; (800cf40 <FT5336_Probe+0xbc>)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4912      	ldr	r1, [pc, #72]	; (800cf3c <FT5336_Probe+0xb8>)
 800cef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800cef8:	4b12      	ldr	r3, [pc, #72]	; (800cf44 <FT5336_Probe+0xc0>)
 800cefa:	4a13      	ldr	r2, [pc, #76]	; (800cf48 <FT5336_Probe+0xc4>)
 800cefc:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800cefe:	4b11      	ldr	r3, [pc, #68]	; (800cf44 <FT5336_Probe+0xc0>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	490e      	ldr	r1, [pc, #56]	; (800cf40 <FT5336_Probe+0xbc>)
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cf0c:	4610      	mov	r0, r2
 800cf0e:	4798      	blx	r3
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d002      	beq.n	800cf1c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800cf16:	f06f 0304 	mvn.w	r3, #4
 800cf1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3728      	adds	r7, #40	; 0x28
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	0800b615 	.word	0x0800b615
 800cf2c:	0800b689 	.word	0x0800b689
 800cf30:	0800b7b1 	.word	0x0800b7b1
 800cf34:	0800b755 	.word	0x0800b755
 800cf38:	0800b80d 	.word	0x0800b80d
 800cf3c:	2400aeb8 	.word	0x2400aeb8
 800cf40:	2400ae8c 	.word	0x2400ae8c
 800cf44:	2400ae88 	.word	0x2400ae88
 800cf48:	24000018 	.word	0x24000018

0800cf4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cf52:	2003      	movs	r0, #3
 800cf54:	f000 f933 	bl	800d1be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800cf58:	f004 f82c 	bl	8010fb4 <HAL_RCC_GetSysClockFreq>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	4b15      	ldr	r3, [pc, #84]	; (800cfb4 <HAL_Init+0x68>)
 800cf60:	699b      	ldr	r3, [r3, #24]
 800cf62:	0a1b      	lsrs	r3, r3, #8
 800cf64:	f003 030f 	and.w	r3, r3, #15
 800cf68:	4913      	ldr	r1, [pc, #76]	; (800cfb8 <HAL_Init+0x6c>)
 800cf6a:	5ccb      	ldrb	r3, [r1, r3]
 800cf6c:	f003 031f 	and.w	r3, r3, #31
 800cf70:	fa22 f303 	lsr.w	r3, r2, r3
 800cf74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cf76:	4b0f      	ldr	r3, [pc, #60]	; (800cfb4 <HAL_Init+0x68>)
 800cf78:	699b      	ldr	r3, [r3, #24]
 800cf7a:	f003 030f 	and.w	r3, r3, #15
 800cf7e:	4a0e      	ldr	r2, [pc, #56]	; (800cfb8 <HAL_Init+0x6c>)
 800cf80:	5cd3      	ldrb	r3, [r2, r3]
 800cf82:	f003 031f 	and.w	r3, r3, #31
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	fa22 f303 	lsr.w	r3, r2, r3
 800cf8c:	4a0b      	ldr	r2, [pc, #44]	; (800cfbc <HAL_Init+0x70>)
 800cf8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cf90:	4a0b      	ldr	r2, [pc, #44]	; (800cfc0 <HAL_Init+0x74>)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800cf96:	200f      	movs	r0, #15
 800cf98:	f7f4 f9c0 	bl	800131c <HAL_InitTick>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d001      	beq.n	800cfa6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e002      	b.n	800cfac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800cfa6:	f7f3 fe4b 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	58024400 	.word	0x58024400
 800cfb8:	08028070 	.word	0x08028070
 800cfbc:	24000014 	.word	0x24000014
 800cfc0:	24000010 	.word	0x24000010

0800cfc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800cfc8:	4b06      	ldr	r3, [pc, #24]	; (800cfe4 <HAL_IncTick+0x20>)
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	4b06      	ldr	r3, [pc, #24]	; (800cfe8 <HAL_IncTick+0x24>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	4a04      	ldr	r2, [pc, #16]	; (800cfe8 <HAL_IncTick+0x24>)
 800cfd6:	6013      	str	r3, [r2, #0]
}
 800cfd8:	bf00      	nop
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	2400004c 	.word	0x2400004c
 800cfe8:	2400b45c 	.word	0x2400b45c

0800cfec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cfec:	b480      	push	{r7}
 800cfee:	af00      	add	r7, sp, #0
  return uwTick;
 800cff0:	4b03      	ldr	r3, [pc, #12]	; (800d000 <HAL_GetTick+0x14>)
 800cff2:	681b      	ldr	r3, [r3, #0]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop
 800d000:	2400b45c 	.word	0x2400b45c

0800d004 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800d004:	b480      	push	{r7}
 800d006:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800d008:	4b03      	ldr	r3, [pc, #12]	; (800d018 <HAL_GetREVID+0x14>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	0c1b      	lsrs	r3, r3, #16
}
 800d00e:	4618      	mov	r0, r3
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	5c001000 	.word	0x5c001000

0800d01c <__NVIC_SetPriorityGrouping>:
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f003 0307 	and.w	r3, r3, #7
 800d02a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d02c:	4b0b      	ldr	r3, [pc, #44]	; (800d05c <__NVIC_SetPriorityGrouping+0x40>)
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d038:	4013      	ands	r3, r2
 800d03a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800d044:	4b06      	ldr	r3, [pc, #24]	; (800d060 <__NVIC_SetPriorityGrouping+0x44>)
 800d046:	4313      	orrs	r3, r2
 800d048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d04a:	4a04      	ldr	r2, [pc, #16]	; (800d05c <__NVIC_SetPriorityGrouping+0x40>)
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	60d3      	str	r3, [r2, #12]
}
 800d050:	bf00      	nop
 800d052:	3714      	adds	r7, #20
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	e000ed00 	.word	0xe000ed00
 800d060:	05fa0000 	.word	0x05fa0000

0800d064 <__NVIC_GetPriorityGrouping>:
{
 800d064:	b480      	push	{r7}
 800d066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d068:	4b04      	ldr	r3, [pc, #16]	; (800d07c <__NVIC_GetPriorityGrouping+0x18>)
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	0a1b      	lsrs	r3, r3, #8
 800d06e:	f003 0307 	and.w	r3, r3, #7
}
 800d072:	4618      	mov	r0, r3
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr
 800d07c:	e000ed00 	.word	0xe000ed00

0800d080 <__NVIC_EnableIRQ>:
{
 800d080:	b480      	push	{r7}
 800d082:	b083      	sub	sp, #12
 800d084:	af00      	add	r7, sp, #0
 800d086:	4603      	mov	r3, r0
 800d088:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d08a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	db0b      	blt.n	800d0aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d092:	88fb      	ldrh	r3, [r7, #6]
 800d094:	f003 021f 	and.w	r2, r3, #31
 800d098:	4907      	ldr	r1, [pc, #28]	; (800d0b8 <__NVIC_EnableIRQ+0x38>)
 800d09a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d09e:	095b      	lsrs	r3, r3, #5
 800d0a0:	2001      	movs	r0, #1
 800d0a2:	fa00 f202 	lsl.w	r2, r0, r2
 800d0a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d0aa:	bf00      	nop
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	e000e100 	.word	0xe000e100

0800d0bc <__NVIC_DisableIRQ>:
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d0c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	db12      	blt.n	800d0f4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d0ce:	88fb      	ldrh	r3, [r7, #6]
 800d0d0:	f003 021f 	and.w	r2, r3, #31
 800d0d4:	490a      	ldr	r1, [pc, #40]	; (800d100 <__NVIC_DisableIRQ+0x44>)
 800d0d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0da:	095b      	lsrs	r3, r3, #5
 800d0dc:	2001      	movs	r0, #1
 800d0de:	fa00 f202 	lsl.w	r2, r0, r2
 800d0e2:	3320      	adds	r3, #32
 800d0e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d0e8:	f3bf 8f4f 	dsb	sy
}
 800d0ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d0ee:	f3bf 8f6f 	isb	sy
}
 800d0f2:	bf00      	nop
}
 800d0f4:	bf00      	nop
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr
 800d100:	e000e100 	.word	0xe000e100

0800d104 <__NVIC_SetPriority>:
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	4603      	mov	r3, r0
 800d10c:	6039      	str	r1, [r7, #0]
 800d10e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d110:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d114:	2b00      	cmp	r3, #0
 800d116:	db0a      	blt.n	800d12e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	490c      	ldr	r1, [pc, #48]	; (800d150 <__NVIC_SetPriority+0x4c>)
 800d11e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d122:	0112      	lsls	r2, r2, #4
 800d124:	b2d2      	uxtb	r2, r2
 800d126:	440b      	add	r3, r1
 800d128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d12c:	e00a      	b.n	800d144 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	b2da      	uxtb	r2, r3
 800d132:	4908      	ldr	r1, [pc, #32]	; (800d154 <__NVIC_SetPriority+0x50>)
 800d134:	88fb      	ldrh	r3, [r7, #6]
 800d136:	f003 030f 	and.w	r3, r3, #15
 800d13a:	3b04      	subs	r3, #4
 800d13c:	0112      	lsls	r2, r2, #4
 800d13e:	b2d2      	uxtb	r2, r2
 800d140:	440b      	add	r3, r1
 800d142:	761a      	strb	r2, [r3, #24]
}
 800d144:	bf00      	nop
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr
 800d150:	e000e100 	.word	0xe000e100
 800d154:	e000ed00 	.word	0xe000ed00

0800d158 <NVIC_EncodePriority>:
{
 800d158:	b480      	push	{r7}
 800d15a:	b089      	sub	sp, #36	; 0x24
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f003 0307 	and.w	r3, r3, #7
 800d16a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	f1c3 0307 	rsb	r3, r3, #7
 800d172:	2b04      	cmp	r3, #4
 800d174:	bf28      	it	cs
 800d176:	2304      	movcs	r3, #4
 800d178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	3304      	adds	r3, #4
 800d17e:	2b06      	cmp	r3, #6
 800d180:	d902      	bls.n	800d188 <NVIC_EncodePriority+0x30>
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	3b03      	subs	r3, #3
 800d186:	e000      	b.n	800d18a <NVIC_EncodePriority+0x32>
 800d188:	2300      	movs	r3, #0
 800d18a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d18c:	f04f 32ff 	mov.w	r2, #4294967295
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	fa02 f303 	lsl.w	r3, r2, r3
 800d196:	43da      	mvns	r2, r3
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	401a      	ands	r2, r3
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d1a0:	f04f 31ff 	mov.w	r1, #4294967295
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	fa01 f303 	lsl.w	r3, r1, r3
 800d1aa:	43d9      	mvns	r1, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d1b0:	4313      	orrs	r3, r2
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3724      	adds	r7, #36	; 0x24
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr

0800d1be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b082      	sub	sp, #8
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7ff ff28 	bl	800d01c <__NVIC_SetPriorityGrouping>
}
 800d1cc:	bf00      	nop
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b086      	sub	sp, #24
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	4603      	mov	r3, r0
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d1e2:	f7ff ff3f 	bl	800d064 <__NVIC_GetPriorityGrouping>
 800d1e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	68b9      	ldr	r1, [r7, #8]
 800d1ec:	6978      	ldr	r0, [r7, #20]
 800d1ee:	f7ff ffb3 	bl	800d158 <NVIC_EncodePriority>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7ff ff82 	bl	800d104 <__NVIC_SetPriority>
}
 800d200:	bf00      	nop
 800d202:	3718      	adds	r7, #24
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	4603      	mov	r3, r0
 800d210:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d216:	4618      	mov	r0, r3
 800d218:	f7ff ff32 	bl	800d080 <__NVIC_EnableIRQ>
}
 800d21c:	bf00      	nop
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	4603      	mov	r3, r0
 800d22c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800d22e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d232:	4618      	mov	r0, r3
 800d234:	f7ff ff42 	bl	800d0bc <__NVIC_DisableIRQ>
}
 800d238:	bf00      	nop
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800d240:	b480      	push	{r7}
 800d242:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800d244:	f3bf 8f5f 	dmb	sy
}
 800d248:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800d24a:	4b07      	ldr	r3, [pc, #28]	; (800d268 <HAL_MPU_Disable+0x28>)
 800d24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24e:	4a06      	ldr	r2, [pc, #24]	; (800d268 <HAL_MPU_Disable+0x28>)
 800d250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d254:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800d256:	4b05      	ldr	r3, [pc, #20]	; (800d26c <HAL_MPU_Disable+0x2c>)
 800d258:	2200      	movs	r2, #0
 800d25a:	605a      	str	r2, [r3, #4]
}
 800d25c:	bf00      	nop
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	e000ed00 	.word	0xe000ed00
 800d26c:	e000ed90 	.word	0xe000ed90

0800d270 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800d270:	b480      	push	{r7}
 800d272:	b083      	sub	sp, #12
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800d278:	4a0b      	ldr	r2, [pc, #44]	; (800d2a8 <HAL_MPU_Enable+0x38>)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f043 0301 	orr.w	r3, r3, #1
 800d280:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800d282:	4b0a      	ldr	r3, [pc, #40]	; (800d2ac <HAL_MPU_Enable+0x3c>)
 800d284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d286:	4a09      	ldr	r2, [pc, #36]	; (800d2ac <HAL_MPU_Enable+0x3c>)
 800d288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d28c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800d28e:	f3bf 8f4f 	dsb	sy
}
 800d292:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d294:	f3bf 8f6f 	isb	sy
}
 800d298:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800d29a:	bf00      	nop
 800d29c:	370c      	adds	r7, #12
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr
 800d2a6:	bf00      	nop
 800d2a8:	e000ed90 	.word	0xe000ed90
 800d2ac:	e000ed00 	.word	0xe000ed00

0800d2b0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	785a      	ldrb	r2, [r3, #1]
 800d2bc:	4b1d      	ldr	r3, [pc, #116]	; (800d334 <HAL_MPU_ConfigRegion+0x84>)
 800d2be:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d029      	beq.n	800d31c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800d2c8:	4a1a      	ldr	r2, [pc, #104]	; (800d334 <HAL_MPU_ConfigRegion+0x84>)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	7b1b      	ldrb	r3, [r3, #12]
 800d2d4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	7adb      	ldrb	r3, [r3, #11]
 800d2da:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d2dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	7a9b      	ldrb	r3, [r3, #10]
 800d2e2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800d2e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	7b5b      	ldrb	r3, [r3, #13]
 800d2ea:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800d2ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	7b9b      	ldrb	r3, [r3, #14]
 800d2f2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800d2f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	7bdb      	ldrb	r3, [r3, #15]
 800d2fa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800d2fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	7a5b      	ldrb	r3, [r3, #9]
 800d302:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800d304:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	7a1b      	ldrb	r3, [r3, #8]
 800d30a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800d30c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	7812      	ldrb	r2, [r2, #0]
 800d312:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d314:	4a07      	ldr	r2, [pc, #28]	; (800d334 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d316:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d318:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800d31a:	e005      	b.n	800d328 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800d31c:	4b05      	ldr	r3, [pc, #20]	; (800d334 <HAL_MPU_ConfigRegion+0x84>)
 800d31e:	2200      	movs	r2, #0
 800d320:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800d322:	4b04      	ldr	r3, [pc, #16]	; (800d334 <HAL_MPU_ConfigRegion+0x84>)
 800d324:	2200      	movs	r2, #0
 800d326:	611a      	str	r2, [r3, #16]
}
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr
 800d334:	e000ed90 	.word	0xe000ed90

0800d338 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d101      	bne.n	800d34a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	e054      	b.n	800d3f4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	7f5b      	ldrb	r3, [r3, #29]
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	2b00      	cmp	r3, #0
 800d352:	d105      	bne.n	800d360 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f7f3 fc8e 	bl	8000c7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2202      	movs	r2, #2
 800d364:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	791b      	ldrb	r3, [r3, #4]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d10c      	bne.n	800d388 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a22      	ldr	r2, [pc, #136]	; (800d3fc <HAL_CRC_Init+0xc4>)
 800d374:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	689a      	ldr	r2, [r3, #8]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f022 0218 	bic.w	r2, r2, #24
 800d384:	609a      	str	r2, [r3, #8]
 800d386:	e00c      	b.n	800d3a2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6899      	ldr	r1, [r3, #8]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	461a      	mov	r2, r3
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f834 	bl	800d400 <HAL_CRCEx_Polynomial_Set>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d001      	beq.n	800d3a2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e028      	b.n	800d3f4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	795b      	ldrb	r3, [r3, #5]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d105      	bne.n	800d3b6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b2:	611a      	str	r2, [r3, #16]
 800d3b4:	e004      	b.n	800d3c0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	6912      	ldr	r2, [r2, #16]
 800d3be:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	695a      	ldr	r2, [r3, #20]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	430a      	orrs	r2, r1
 800d3d4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	699a      	ldr	r2, [r3, #24]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	430a      	orrs	r2, r1
 800d3ea:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	04c11db7 	.word	0x04c11db7

0800d400 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800d400:	b480      	push	{r7}
 800d402:	b087      	sub	sp, #28
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800d410:	231f      	movs	r3, #31
 800d412:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800d414:	bf00      	nop
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	1e5a      	subs	r2, r3, #1
 800d41a:	613a      	str	r2, [r7, #16]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d009      	beq.n	800d434 <HAL_CRCEx_Polynomial_Set+0x34>
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	f003 031f 	and.w	r3, r3, #31
 800d426:	68ba      	ldr	r2, [r7, #8]
 800d428:	fa22 f303 	lsr.w	r3, r2, r3
 800d42c:	f003 0301 	and.w	r3, r3, #1
 800d430:	2b00      	cmp	r3, #0
 800d432:	d0f0      	beq.n	800d416 <HAL_CRCEx_Polynomial_Set+0x16>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b18      	cmp	r3, #24
 800d438:	d846      	bhi.n	800d4c8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800d43a:	a201      	add	r2, pc, #4	; (adr r2, 800d440 <HAL_CRCEx_Polynomial_Set+0x40>)
 800d43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d440:	0800d4cf 	.word	0x0800d4cf
 800d444:	0800d4c9 	.word	0x0800d4c9
 800d448:	0800d4c9 	.word	0x0800d4c9
 800d44c:	0800d4c9 	.word	0x0800d4c9
 800d450:	0800d4c9 	.word	0x0800d4c9
 800d454:	0800d4c9 	.word	0x0800d4c9
 800d458:	0800d4c9 	.word	0x0800d4c9
 800d45c:	0800d4c9 	.word	0x0800d4c9
 800d460:	0800d4bd 	.word	0x0800d4bd
 800d464:	0800d4c9 	.word	0x0800d4c9
 800d468:	0800d4c9 	.word	0x0800d4c9
 800d46c:	0800d4c9 	.word	0x0800d4c9
 800d470:	0800d4c9 	.word	0x0800d4c9
 800d474:	0800d4c9 	.word	0x0800d4c9
 800d478:	0800d4c9 	.word	0x0800d4c9
 800d47c:	0800d4c9 	.word	0x0800d4c9
 800d480:	0800d4b1 	.word	0x0800d4b1
 800d484:	0800d4c9 	.word	0x0800d4c9
 800d488:	0800d4c9 	.word	0x0800d4c9
 800d48c:	0800d4c9 	.word	0x0800d4c9
 800d490:	0800d4c9 	.word	0x0800d4c9
 800d494:	0800d4c9 	.word	0x0800d4c9
 800d498:	0800d4c9 	.word	0x0800d4c9
 800d49c:	0800d4c9 	.word	0x0800d4c9
 800d4a0:	0800d4a5 	.word	0x0800d4a5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	2b06      	cmp	r3, #6
 800d4a8:	d913      	bls.n	800d4d2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d4ae:	e010      	b.n	800d4d2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	2b07      	cmp	r3, #7
 800d4b4:	d90f      	bls.n	800d4d6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d4ba:	e00c      	b.n	800d4d6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	2b0f      	cmp	r3, #15
 800d4c0:	d90b      	bls.n	800d4da <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d4c6:	e008      	b.n	800d4da <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	75fb      	strb	r3, [r7, #23]
      break;
 800d4cc:	e006      	b.n	800d4dc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d4ce:	bf00      	nop
 800d4d0:	e004      	b.n	800d4dc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d4d2:	bf00      	nop
 800d4d4:	e002      	b.n	800d4dc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d4d6:	bf00      	nop
 800d4d8:	e000      	b.n	800d4dc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d4da:	bf00      	nop
  }
  if (status == HAL_OK)
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10d      	bne.n	800d4fe <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	68ba      	ldr	r2, [r7, #8]
 800d4e8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	f023 0118 	bic.w	r1, r3, #24
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	430a      	orrs	r2, r1
 800d4fc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800d4fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d500:	4618      	mov	r0, r3
 800d502:	371c      	adds	r7, #28
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d101      	bne.n	800d51e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800d51a:	2301      	movs	r3, #1
 800d51c:	e04f      	b.n	800d5be <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d524:	b2db      	uxtb	r3, r3
 800d526:	2b00      	cmp	r3, #0
 800d528:	d106      	bne.n	800d538 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7f3 fbc4 	bl	8000cc0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2202      	movs	r2, #2
 800d53c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	4b20      	ldr	r3, [pc, #128]	; (800d5c8 <HAL_DMA2D_Init+0xbc>)
 800d548:	4013      	ands	r3, r2
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	6851      	ldr	r1, [r2, #4]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	69d2      	ldr	r2, [r2, #28]
 800d552:	4311      	orrs	r1, r2
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	6812      	ldr	r2, [r2, #0]
 800d558:	430b      	orrs	r3, r1
 800d55a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d562:	4b1a      	ldr	r3, [pc, #104]	; (800d5cc <HAL_DMA2D_Init+0xc0>)
 800d564:	4013      	ands	r3, r2
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	6891      	ldr	r1, [r2, #8]
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	6992      	ldr	r2, [r2, #24]
 800d56e:	4311      	orrs	r1, r2
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	6812      	ldr	r2, [r2, #0]
 800d574:	430b      	orrs	r3, r1
 800d576:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d57e:	4b14      	ldr	r3, [pc, #80]	; (800d5d0 <HAL_DMA2D_Init+0xc4>)
 800d580:	4013      	ands	r3, r2
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	68d1      	ldr	r1, [r2, #12]
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	6812      	ldr	r2, [r2, #0]
 800d58a:	430b      	orrs	r3, r1
 800d58c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d594:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	051a      	lsls	r2, r3, #20
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	695b      	ldr	r3, [r3, #20]
 800d5a2:	055b      	lsls	r3, r3, #21
 800d5a4:	431a      	orrs	r2, r3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	430a      	orrs	r2, r1
 800d5ac:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	fff8ffbf 	.word	0xfff8ffbf
 800d5cc:	fffffef8 	.word	0xfffffef8
 800d5d0:	ffff0000 	.word	0xffff0000

0800d5d4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f003 0301 	and.w	r3, r3, #1
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d026      	beq.n	800d644 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d021      	beq.n	800d644 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d60e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d614:	f043 0201 	orr.w	r2, r3, #1
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2201      	movs	r2, #1
 800d622:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2204      	movs	r2, #4
 800d628:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d003      	beq.n	800d644 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f003 0320 	and.w	r3, r3, #32
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d026      	beq.n	800d69c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d654:	2b00      	cmp	r3, #0
 800d656:	d021      	beq.n	800d69c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d666:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2220      	movs	r2, #32
 800d66e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d674:	f043 0202 	orr.w	r2, r3, #2
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2204      	movs	r2, #4
 800d680:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d690:	2b00      	cmp	r3, #0
 800d692:	d003      	beq.n	800d69c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f003 0308 	and.w	r3, r3, #8
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d026      	beq.n	800d6f4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d021      	beq.n	800d6f4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d6be:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2208      	movs	r2, #8
 800d6c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6cc:	f043 0204 	orr.w	r2, r3, #4
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2204      	movs	r2, #4
 800d6d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d003      	beq.n	800d6f4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f003 0304 	and.w	r3, r3, #4
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d013      	beq.n	800d726 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00e      	beq.n	800d726 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d716:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2204      	movs	r2, #4
 800d71e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 f853 	bl	800d7cc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f003 0302 	and.w	r3, r3, #2
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d024      	beq.n	800d77a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d736:	2b00      	cmp	r3, #0
 800d738:	d01f      	beq.n	800d77a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d748:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2202      	movs	r2, #2
 800d750:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6a1b      	ldr	r3, [r3, #32]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d003      	beq.n	800d77a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6a1b      	ldr	r3, [r3, #32]
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f003 0310 	and.w	r3, r3, #16
 800d780:	2b00      	cmp	r3, #0
 800d782:	d01f      	beq.n	800d7c4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d01a      	beq.n	800d7c4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d79c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2210      	movs	r2, #16
 800d7a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 f80e 	bl	800d7e0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800d7c4:	bf00      	nop
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800d7d4:	bf00      	nop
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800d7e8:	bf00      	nop
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b089      	sub	sp, #36	; 0x24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d7fe:	2300      	movs	r3, #0
 800d800:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d802:	4b89      	ldr	r3, [pc, #548]	; (800da28 <HAL_GPIO_Init+0x234>)
 800d804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d806:	e194      	b.n	800db32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	2101      	movs	r1, #1
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	fa01 f303 	lsl.w	r3, r1, r3
 800d814:	4013      	ands	r3, r2
 800d816:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	f000 8186 	beq.w	800db2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	f003 0303 	and.w	r3, r3, #3
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d005      	beq.n	800d838 <HAL_GPIO_Init+0x44>
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	f003 0303 	and.w	r3, r3, #3
 800d834:	2b02      	cmp	r3, #2
 800d836:	d130      	bne.n	800d89a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	005b      	lsls	r3, r3, #1
 800d842:	2203      	movs	r2, #3
 800d844:	fa02 f303 	lsl.w	r3, r2, r3
 800d848:	43db      	mvns	r3, r3
 800d84a:	69ba      	ldr	r2, [r7, #24]
 800d84c:	4013      	ands	r3, r2
 800d84e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	68da      	ldr	r2, [r3, #12]
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	005b      	lsls	r3, r3, #1
 800d858:	fa02 f303 	lsl.w	r3, r2, r3
 800d85c:	69ba      	ldr	r2, [r7, #24]
 800d85e:	4313      	orrs	r3, r2
 800d860:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	69ba      	ldr	r2, [r7, #24]
 800d866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d86e:	2201      	movs	r2, #1
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	fa02 f303 	lsl.w	r3, r2, r3
 800d876:	43db      	mvns	r3, r3
 800d878:	69ba      	ldr	r2, [r7, #24]
 800d87a:	4013      	ands	r3, r2
 800d87c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	091b      	lsrs	r3, r3, #4
 800d884:	f003 0201 	and.w	r2, r3, #1
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	fa02 f303 	lsl.w	r3, r2, r3
 800d88e:	69ba      	ldr	r2, [r7, #24]
 800d890:	4313      	orrs	r3, r2
 800d892:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	69ba      	ldr	r2, [r7, #24]
 800d898:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	f003 0303 	and.w	r3, r3, #3
 800d8a2:	2b03      	cmp	r3, #3
 800d8a4:	d017      	beq.n	800d8d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	005b      	lsls	r3, r3, #1
 800d8b0:	2203      	movs	r2, #3
 800d8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b6:	43db      	mvns	r3, r3
 800d8b8:	69ba      	ldr	r2, [r7, #24]
 800d8ba:	4013      	ands	r3, r2
 800d8bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	689a      	ldr	r2, [r3, #8]
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	005b      	lsls	r3, r3, #1
 800d8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d8ca:	69ba      	ldr	r2, [r7, #24]
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	69ba      	ldr	r2, [r7, #24]
 800d8d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	f003 0303 	and.w	r3, r3, #3
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	d123      	bne.n	800d92a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	08da      	lsrs	r2, r3, #3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	3208      	adds	r2, #8
 800d8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	f003 0307 	and.w	r3, r3, #7
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	220f      	movs	r2, #15
 800d8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d8fe:	43db      	mvns	r3, r3
 800d900:	69ba      	ldr	r2, [r7, #24]
 800d902:	4013      	ands	r3, r2
 800d904:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	691a      	ldr	r2, [r3, #16]
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	f003 0307 	and.w	r3, r3, #7
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	fa02 f303 	lsl.w	r3, r2, r3
 800d916:	69ba      	ldr	r2, [r7, #24]
 800d918:	4313      	orrs	r3, r2
 800d91a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	08da      	lsrs	r2, r3, #3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	3208      	adds	r2, #8
 800d924:	69b9      	ldr	r1, [r7, #24]
 800d926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	005b      	lsls	r3, r3, #1
 800d934:	2203      	movs	r2, #3
 800d936:	fa02 f303 	lsl.w	r3, r2, r3
 800d93a:	43db      	mvns	r3, r3
 800d93c:	69ba      	ldr	r2, [r7, #24]
 800d93e:	4013      	ands	r3, r2
 800d940:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	f003 0203 	and.w	r2, r3, #3
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	005b      	lsls	r3, r3, #1
 800d94e:	fa02 f303 	lsl.w	r3, r2, r3
 800d952:	69ba      	ldr	r2, [r7, #24]
 800d954:	4313      	orrs	r3, r2
 800d956:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	69ba      	ldr	r2, [r7, #24]
 800d95c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d966:	2b00      	cmp	r3, #0
 800d968:	f000 80e0 	beq.w	800db2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d96c:	4b2f      	ldr	r3, [pc, #188]	; (800da2c <HAL_GPIO_Init+0x238>)
 800d96e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d972:	4a2e      	ldr	r2, [pc, #184]	; (800da2c <HAL_GPIO_Init+0x238>)
 800d974:	f043 0302 	orr.w	r3, r3, #2
 800d978:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d97c:	4b2b      	ldr	r3, [pc, #172]	; (800da2c <HAL_GPIO_Init+0x238>)
 800d97e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d982:	f003 0302 	and.w	r3, r3, #2
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d98a:	4a29      	ldr	r2, [pc, #164]	; (800da30 <HAL_GPIO_Init+0x23c>)
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	089b      	lsrs	r3, r3, #2
 800d990:	3302      	adds	r3, #2
 800d992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	f003 0303 	and.w	r3, r3, #3
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	220f      	movs	r2, #15
 800d9a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a6:	43db      	mvns	r3, r3
 800d9a8:	69ba      	ldr	r2, [r7, #24]
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4a20      	ldr	r2, [pc, #128]	; (800da34 <HAL_GPIO_Init+0x240>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d052      	beq.n	800da5c <HAL_GPIO_Init+0x268>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4a1f      	ldr	r2, [pc, #124]	; (800da38 <HAL_GPIO_Init+0x244>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d031      	beq.n	800da22 <HAL_GPIO_Init+0x22e>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4a1e      	ldr	r2, [pc, #120]	; (800da3c <HAL_GPIO_Init+0x248>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d02b      	beq.n	800da1e <HAL_GPIO_Init+0x22a>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4a1d      	ldr	r2, [pc, #116]	; (800da40 <HAL_GPIO_Init+0x24c>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d025      	beq.n	800da1a <HAL_GPIO_Init+0x226>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4a1c      	ldr	r2, [pc, #112]	; (800da44 <HAL_GPIO_Init+0x250>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d01f      	beq.n	800da16 <HAL_GPIO_Init+0x222>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	4a1b      	ldr	r2, [pc, #108]	; (800da48 <HAL_GPIO_Init+0x254>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d019      	beq.n	800da12 <HAL_GPIO_Init+0x21e>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	4a1a      	ldr	r2, [pc, #104]	; (800da4c <HAL_GPIO_Init+0x258>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d013      	beq.n	800da0e <HAL_GPIO_Init+0x21a>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	4a19      	ldr	r2, [pc, #100]	; (800da50 <HAL_GPIO_Init+0x25c>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d00d      	beq.n	800da0a <HAL_GPIO_Init+0x216>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	4a18      	ldr	r2, [pc, #96]	; (800da54 <HAL_GPIO_Init+0x260>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d007      	beq.n	800da06 <HAL_GPIO_Init+0x212>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	4a17      	ldr	r2, [pc, #92]	; (800da58 <HAL_GPIO_Init+0x264>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d101      	bne.n	800da02 <HAL_GPIO_Init+0x20e>
 800d9fe:	2309      	movs	r3, #9
 800da00:	e02d      	b.n	800da5e <HAL_GPIO_Init+0x26a>
 800da02:	230a      	movs	r3, #10
 800da04:	e02b      	b.n	800da5e <HAL_GPIO_Init+0x26a>
 800da06:	2308      	movs	r3, #8
 800da08:	e029      	b.n	800da5e <HAL_GPIO_Init+0x26a>
 800da0a:	2307      	movs	r3, #7
 800da0c:	e027      	b.n	800da5e <HAL_GPIO_Init+0x26a>
 800da0e:	2306      	movs	r3, #6
 800da10:	e025      	b.n	800da5e <HAL_GPIO_Init+0x26a>
 800da12:	2305      	movs	r3, #5
 800da14:	e023      	b.n	800da5e <HAL_GPIO_Init+0x26a>
 800da16:	2304      	movs	r3, #4
 800da18:	e021      	b.n	800da5e <HAL_GPIO_Init+0x26a>
 800da1a:	2303      	movs	r3, #3
 800da1c:	e01f      	b.n	800da5e <HAL_GPIO_Init+0x26a>
 800da1e:	2302      	movs	r3, #2
 800da20:	e01d      	b.n	800da5e <HAL_GPIO_Init+0x26a>
 800da22:	2301      	movs	r3, #1
 800da24:	e01b      	b.n	800da5e <HAL_GPIO_Init+0x26a>
 800da26:	bf00      	nop
 800da28:	58000080 	.word	0x58000080
 800da2c:	58024400 	.word	0x58024400
 800da30:	58000400 	.word	0x58000400
 800da34:	58020000 	.word	0x58020000
 800da38:	58020400 	.word	0x58020400
 800da3c:	58020800 	.word	0x58020800
 800da40:	58020c00 	.word	0x58020c00
 800da44:	58021000 	.word	0x58021000
 800da48:	58021400 	.word	0x58021400
 800da4c:	58021800 	.word	0x58021800
 800da50:	58021c00 	.word	0x58021c00
 800da54:	58022000 	.word	0x58022000
 800da58:	58022400 	.word	0x58022400
 800da5c:	2300      	movs	r3, #0
 800da5e:	69fa      	ldr	r2, [r7, #28]
 800da60:	f002 0203 	and.w	r2, r2, #3
 800da64:	0092      	lsls	r2, r2, #2
 800da66:	4093      	lsls	r3, r2
 800da68:	69ba      	ldr	r2, [r7, #24]
 800da6a:	4313      	orrs	r3, r2
 800da6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800da6e:	4938      	ldr	r1, [pc, #224]	; (800db50 <HAL_GPIO_Init+0x35c>)
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	089b      	lsrs	r3, r3, #2
 800da74:	3302      	adds	r3, #2
 800da76:	69ba      	ldr	r2, [r7, #24]
 800da78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800da7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	43db      	mvns	r3, r3
 800da88:	69ba      	ldr	r2, [r7, #24]
 800da8a:	4013      	ands	r3, r2
 800da8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da96:	2b00      	cmp	r3, #0
 800da98:	d003      	beq.n	800daa2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800da9a:	69ba      	ldr	r2, [r7, #24]
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	4313      	orrs	r3, r2
 800daa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800daa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800daaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	43db      	mvns	r3, r3
 800dab6:	69ba      	ldr	r2, [r7, #24]
 800dab8:	4013      	ands	r3, r2
 800daba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d003      	beq.n	800dad0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800dac8:	69ba      	ldr	r2, [r7, #24]
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	4313      	orrs	r3, r2
 800dace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800dad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	43db      	mvns	r3, r3
 800dae2:	69ba      	ldr	r2, [r7, #24]
 800dae4:	4013      	ands	r3, r2
 800dae6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d003      	beq.n	800dafc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800daf4:	69ba      	ldr	r2, [r7, #24]
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	4313      	orrs	r3, r2
 800dafa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	69ba      	ldr	r2, [r7, #24]
 800db00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	43db      	mvns	r3, r3
 800db0c:	69ba      	ldr	r2, [r7, #24]
 800db0e:	4013      	ands	r3, r2
 800db10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d003      	beq.n	800db26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800db1e:	69ba      	ldr	r2, [r7, #24]
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	4313      	orrs	r3, r2
 800db24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	69ba      	ldr	r2, [r7, #24]
 800db2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	3301      	adds	r3, #1
 800db30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	fa22 f303 	lsr.w	r3, r2, r3
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	f47f ae63 	bne.w	800d808 <HAL_GPIO_Init+0x14>
  }
}
 800db42:	bf00      	nop
 800db44:	bf00      	nop
 800db46:	3724      	adds	r7, #36	; 0x24
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr
 800db50:	58000400 	.word	0x58000400

0800db54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800db54:	b480      	push	{r7}
 800db56:	b087      	sub	sp, #28
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800db5e:	2300      	movs	r3, #0
 800db60:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800db62:	4b75      	ldr	r3, [pc, #468]	; (800dd38 <HAL_GPIO_DeInit+0x1e4>)
 800db64:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800db66:	e0d9      	b.n	800dd1c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800db68:	2201      	movs	r2, #1
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	fa02 f303 	lsl.w	r3, r2, r3
 800db70:	683a      	ldr	r2, [r7, #0]
 800db72:	4013      	ands	r3, r2
 800db74:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f000 80cc 	beq.w	800dd16 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800db7e:	4a6f      	ldr	r2, [pc, #444]	; (800dd3c <HAL_GPIO_DeInit+0x1e8>)
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	089b      	lsrs	r3, r3, #2
 800db84:	3302      	adds	r3, #2
 800db86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db8a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	f003 0303 	and.w	r3, r3, #3
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	220f      	movs	r2, #15
 800db96:	fa02 f303 	lsl.w	r3, r2, r3
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	4013      	ands	r3, r2
 800db9e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	4a67      	ldr	r2, [pc, #412]	; (800dd40 <HAL_GPIO_DeInit+0x1ec>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d037      	beq.n	800dc18 <HAL_GPIO_DeInit+0xc4>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a66      	ldr	r2, [pc, #408]	; (800dd44 <HAL_GPIO_DeInit+0x1f0>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d031      	beq.n	800dc14 <HAL_GPIO_DeInit+0xc0>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a65      	ldr	r2, [pc, #404]	; (800dd48 <HAL_GPIO_DeInit+0x1f4>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d02b      	beq.n	800dc10 <HAL_GPIO_DeInit+0xbc>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a64      	ldr	r2, [pc, #400]	; (800dd4c <HAL_GPIO_DeInit+0x1f8>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d025      	beq.n	800dc0c <HAL_GPIO_DeInit+0xb8>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a63      	ldr	r2, [pc, #396]	; (800dd50 <HAL_GPIO_DeInit+0x1fc>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d01f      	beq.n	800dc08 <HAL_GPIO_DeInit+0xb4>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a62      	ldr	r2, [pc, #392]	; (800dd54 <HAL_GPIO_DeInit+0x200>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d019      	beq.n	800dc04 <HAL_GPIO_DeInit+0xb0>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4a61      	ldr	r2, [pc, #388]	; (800dd58 <HAL_GPIO_DeInit+0x204>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d013      	beq.n	800dc00 <HAL_GPIO_DeInit+0xac>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4a60      	ldr	r2, [pc, #384]	; (800dd5c <HAL_GPIO_DeInit+0x208>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d00d      	beq.n	800dbfc <HAL_GPIO_DeInit+0xa8>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4a5f      	ldr	r2, [pc, #380]	; (800dd60 <HAL_GPIO_DeInit+0x20c>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d007      	beq.n	800dbf8 <HAL_GPIO_DeInit+0xa4>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a5e      	ldr	r2, [pc, #376]	; (800dd64 <HAL_GPIO_DeInit+0x210>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d101      	bne.n	800dbf4 <HAL_GPIO_DeInit+0xa0>
 800dbf0:	2309      	movs	r3, #9
 800dbf2:	e012      	b.n	800dc1a <HAL_GPIO_DeInit+0xc6>
 800dbf4:	230a      	movs	r3, #10
 800dbf6:	e010      	b.n	800dc1a <HAL_GPIO_DeInit+0xc6>
 800dbf8:	2308      	movs	r3, #8
 800dbfa:	e00e      	b.n	800dc1a <HAL_GPIO_DeInit+0xc6>
 800dbfc:	2307      	movs	r3, #7
 800dbfe:	e00c      	b.n	800dc1a <HAL_GPIO_DeInit+0xc6>
 800dc00:	2306      	movs	r3, #6
 800dc02:	e00a      	b.n	800dc1a <HAL_GPIO_DeInit+0xc6>
 800dc04:	2305      	movs	r3, #5
 800dc06:	e008      	b.n	800dc1a <HAL_GPIO_DeInit+0xc6>
 800dc08:	2304      	movs	r3, #4
 800dc0a:	e006      	b.n	800dc1a <HAL_GPIO_DeInit+0xc6>
 800dc0c:	2303      	movs	r3, #3
 800dc0e:	e004      	b.n	800dc1a <HAL_GPIO_DeInit+0xc6>
 800dc10:	2302      	movs	r3, #2
 800dc12:	e002      	b.n	800dc1a <HAL_GPIO_DeInit+0xc6>
 800dc14:	2301      	movs	r3, #1
 800dc16:	e000      	b.n	800dc1a <HAL_GPIO_DeInit+0xc6>
 800dc18:	2300      	movs	r3, #0
 800dc1a:	697a      	ldr	r2, [r7, #20]
 800dc1c:	f002 0203 	and.w	r2, r2, #3
 800dc20:	0092      	lsls	r2, r2, #2
 800dc22:	4093      	lsls	r3, r2
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d136      	bne.n	800dc98 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	43db      	mvns	r3, r3
 800dc32:	401a      	ands	r2, r3
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	685a      	ldr	r2, [r3, #4]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	43db      	mvns	r3, r3
 800dc40:	401a      	ands	r2, r3
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800dc46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc4a:	685a      	ldr	r2, [r3, #4]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	43db      	mvns	r3, r3
 800dc50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dc54:	4013      	ands	r3, r2
 800dc56:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800dc58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	43db      	mvns	r3, r3
 800dc62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dc66:	4013      	ands	r3, r2
 800dc68:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	f003 0303 	and.w	r3, r3, #3
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	220f      	movs	r2, #15
 800dc74:	fa02 f303 	lsl.w	r3, r2, r3
 800dc78:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800dc7a:	4a30      	ldr	r2, [pc, #192]	; (800dd3c <HAL_GPIO_DeInit+0x1e8>)
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	089b      	lsrs	r3, r3, #2
 800dc80:	3302      	adds	r3, #2
 800dc82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	43da      	mvns	r2, r3
 800dc8a:	482c      	ldr	r0, [pc, #176]	; (800dd3c <HAL_GPIO_DeInit+0x1e8>)
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	089b      	lsrs	r3, r3, #2
 800dc90:	400a      	ands	r2, r1
 800dc92:	3302      	adds	r3, #2
 800dc94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	005b      	lsls	r3, r3, #1
 800dca0:	2103      	movs	r1, #3
 800dca2:	fa01 f303 	lsl.w	r3, r1, r3
 800dca6:	431a      	orrs	r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	08da      	lsrs	r2, r3, #3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	3208      	adds	r2, #8
 800dcb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	f003 0307 	and.w	r3, r3, #7
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	220f      	movs	r2, #15
 800dcc2:	fa02 f303 	lsl.w	r3, r2, r3
 800dcc6:	43db      	mvns	r3, r3
 800dcc8:	697a      	ldr	r2, [r7, #20]
 800dcca:	08d2      	lsrs	r2, r2, #3
 800dccc:	4019      	ands	r1, r3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	3208      	adds	r2, #8
 800dcd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	68da      	ldr	r2, [r3, #12]
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	005b      	lsls	r3, r3, #1
 800dcde:	2103      	movs	r1, #3
 800dce0:	fa01 f303 	lsl.w	r3, r1, r3
 800dce4:	43db      	mvns	r3, r3
 800dce6:	401a      	ands	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	685a      	ldr	r2, [r3, #4]
 800dcf0:	2101      	movs	r1, #1
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	fa01 f303 	lsl.w	r3, r1, r3
 800dcf8:	43db      	mvns	r3, r3
 800dcfa:	401a      	ands	r2, r3
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	689a      	ldr	r2, [r3, #8]
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	005b      	lsls	r3, r3, #1
 800dd08:	2103      	movs	r1, #3
 800dd0a:	fa01 f303 	lsl.w	r3, r1, r3
 800dd0e:	43db      	mvns	r3, r3
 800dd10:	401a      	ands	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	609a      	str	r2, [r3, #8]
    }

    position++;
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800dd1c:	683a      	ldr	r2, [r7, #0]
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	fa22 f303 	lsr.w	r3, r2, r3
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f47f af1f 	bne.w	800db68 <HAL_GPIO_DeInit+0x14>
  }
}
 800dd2a:	bf00      	nop
 800dd2c:	bf00      	nop
 800dd2e:	371c      	adds	r7, #28
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr
 800dd38:	58000080 	.word	0x58000080
 800dd3c:	58000400 	.word	0x58000400
 800dd40:	58020000 	.word	0x58020000
 800dd44:	58020400 	.word	0x58020400
 800dd48:	58020800 	.word	0x58020800
 800dd4c:	58020c00 	.word	0x58020c00
 800dd50:	58021000 	.word	0x58021000
 800dd54:	58021400 	.word	0x58021400
 800dd58:	58021800 	.word	0x58021800
 800dd5c:	58021c00 	.word	0x58021c00
 800dd60:	58022000 	.word	0x58022000
 800dd64:	58022400 	.word	0x58022400

0800dd68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	460b      	mov	r3, r1
 800dd72:	807b      	strh	r3, [r7, #2]
 800dd74:	4613      	mov	r3, r2
 800dd76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800dd78:	787b      	ldrb	r3, [r7, #1]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d003      	beq.n	800dd86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800dd7e:	887a      	ldrh	r2, [r7, #2]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800dd84:	e003      	b.n	800dd8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800dd86:	887b      	ldrh	r3, [r7, #2]
 800dd88:	041a      	lsls	r2, r3, #16
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	619a      	str	r2, [r3, #24]
}
 800dd8e:	bf00      	nop
 800dd90:	370c      	adds	r7, #12
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr
	...

0800dd9c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800dda4:	4a08      	ldr	r2, [pc, #32]	; (800ddc8 <HAL_HSEM_FastTake+0x2c>)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	3320      	adds	r3, #32
 800ddaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddae:	4a07      	ldr	r2, [pc, #28]	; (800ddcc <HAL_HSEM_FastTake+0x30>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d101      	bne.n	800ddb8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	e000      	b.n	800ddba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800ddb8:	2301      	movs	r3, #1
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	370c      	adds	r7, #12
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	58026400 	.word	0x58026400
 800ddcc:	80000300 	.word	0x80000300

0800ddd0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800ddda:	4906      	ldr	r1, [pc, #24]	; (800ddf4 <HAL_HSEM_Release+0x24>)
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800dde8:	bf00      	nop
 800ddea:	370c      	adds	r7, #12
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr
 800ddf4:	58026400 	.word	0x58026400

0800ddf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d101      	bne.n	800de0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	e07f      	b.n	800df0a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b00      	cmp	r3, #0
 800de14:	d106      	bne.n	800de24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 f8a9 	bl	800df76 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2224      	movs	r2, #36	; 0x24
 800de28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f022 0201 	bic.w	r2, r2, #1
 800de3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	685a      	ldr	r2, [r3, #4]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800de48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	689a      	ldr	r2, [r3, #8]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800de58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d107      	bne.n	800de72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	689a      	ldr	r2, [r3, #8]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de6e:	609a      	str	r2, [r3, #8]
 800de70:	e006      	b.n	800de80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	689a      	ldr	r2, [r3, #8]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800de7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	2b02      	cmp	r3, #2
 800de86:	d104      	bne.n	800de92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	6859      	ldr	r1, [r3, #4]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	4b1d      	ldr	r3, [pc, #116]	; (800df14 <HAL_I2C_Init+0x11c>)
 800de9e:	430b      	orrs	r3, r1
 800dea0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	68da      	ldr	r2, [r3, #12]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800deb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	691a      	ldr	r2, [r3, #16]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	695b      	ldr	r3, [r3, #20]
 800deba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	699b      	ldr	r3, [r3, #24]
 800dec2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	430a      	orrs	r2, r1
 800deca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	69d9      	ldr	r1, [r3, #28]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6a1a      	ldr	r2, [r3, #32]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	430a      	orrs	r2, r1
 800deda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f042 0201 	orr.w	r2, r2, #1
 800deea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2200      	movs	r2, #0
 800def0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2220      	movs	r2, #32
 800def6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800df08:	2300      	movs	r3, #0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3708      	adds	r7, #8
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	02008000 	.word	0x02008000

0800df18 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d101      	bne.n	800df2a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800df26:	2301      	movs	r3, #1
 800df28:	e021      	b.n	800df6e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2224      	movs	r2, #36	; 0x24
 800df2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f022 0201 	bic.w	r2, r2, #1
 800df40:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 f821 	bl	800df8a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2200      	movs	r2, #0
 800df5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800df6c:	2300      	movs	r3, #0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3708      	adds	r7, #8
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800df76:	b480      	push	{r7}
 800df78:	b083      	sub	sp, #12
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800df7e:	bf00      	nop
 800df80:	370c      	adds	r7, #12
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800df8a:	b480      	push	{r7}
 800df8c:	b083      	sub	sp, #12
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800df92:	bf00      	nop
 800df94:	370c      	adds	r7, #12
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr
	...

0800dfa0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b088      	sub	sp, #32
 800dfa4:	af02      	add	r7, sp, #8
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	4608      	mov	r0, r1
 800dfaa:	4611      	mov	r1, r2
 800dfac:	461a      	mov	r2, r3
 800dfae:	4603      	mov	r3, r0
 800dfb0:	817b      	strh	r3, [r7, #10]
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	813b      	strh	r3, [r7, #8]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	2b20      	cmp	r3, #32
 800dfc4:	f040 80f9 	bne.w	800e1ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfc8:	6a3b      	ldr	r3, [r7, #32]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d002      	beq.n	800dfd4 <HAL_I2C_Mem_Write+0x34>
 800dfce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d105      	bne.n	800dfe0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e0ed      	b.n	800e1bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d101      	bne.n	800dfee <HAL_I2C_Mem_Write+0x4e>
 800dfea:	2302      	movs	r3, #2
 800dfec:	e0e6      	b.n	800e1bc <HAL_I2C_Mem_Write+0x21c>
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2201      	movs	r2, #1
 800dff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dff6:	f7fe fff9 	bl	800cfec <HAL_GetTick>
 800dffa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	2319      	movs	r3, #25
 800e002:	2201      	movs	r2, #1
 800e004:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f000 fadd 	bl	800e5c8 <I2C_WaitOnFlagUntilTimeout>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d001      	beq.n	800e018 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e014:	2301      	movs	r3, #1
 800e016:	e0d1      	b.n	800e1bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2221      	movs	r2, #33	; 0x21
 800e01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2240      	movs	r2, #64	; 0x40
 800e024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2200      	movs	r2, #0
 800e02c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	6a3a      	ldr	r2, [r7, #32]
 800e032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e038:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2200      	movs	r2, #0
 800e03e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e040:	88f8      	ldrh	r0, [r7, #6]
 800e042:	893a      	ldrh	r2, [r7, #8]
 800e044:	8979      	ldrh	r1, [r7, #10]
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	9301      	str	r3, [sp, #4]
 800e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04c:	9300      	str	r3, [sp, #0]
 800e04e:	4603      	mov	r3, r0
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f000 f9ed 	bl	800e430 <I2C_RequestMemoryWrite>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d005      	beq.n	800e068 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2200      	movs	r2, #0
 800e060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	e0a9      	b.n	800e1bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	2bff      	cmp	r3, #255	; 0xff
 800e070:	d90e      	bls.n	800e090 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	22ff      	movs	r2, #255	; 0xff
 800e076:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e07c:	b2da      	uxtb	r2, r3
 800e07e:	8979      	ldrh	r1, [r7, #10]
 800e080:	2300      	movs	r3, #0
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	f000 fc45 	bl	800e918 <I2C_TransferConfig>
 800e08e:	e00f      	b.n	800e0b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e094:	b29a      	uxth	r2, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	8979      	ldrh	r1, [r7, #10]
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	9300      	str	r3, [sp, #0]
 800e0a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f000 fc34 	bl	800e918 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e0b0:	697a      	ldr	r2, [r7, #20]
 800e0b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f000 fac7 	bl	800e648 <I2C_WaitOnTXISFlagUntilTimeout>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d001      	beq.n	800e0c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e07b      	b.n	800e1bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c8:	781a      	ldrb	r2, [r3, #0]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	1c5a      	adds	r2, r3, #1
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0ec:	3b01      	subs	r3, #1
 800e0ee:	b29a      	uxth	r2, r3
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d034      	beq.n	800e168 <HAL_I2C_Mem_Write+0x1c8>
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e102:	2b00      	cmp	r3, #0
 800e104:	d130      	bne.n	800e168 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10c:	2200      	movs	r2, #0
 800e10e:	2180      	movs	r1, #128	; 0x80
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f000 fa59 	bl	800e5c8 <I2C_WaitOnFlagUntilTimeout>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d001      	beq.n	800e120 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e11c:	2301      	movs	r3, #1
 800e11e:	e04d      	b.n	800e1bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e124:	b29b      	uxth	r3, r3
 800e126:	2bff      	cmp	r3, #255	; 0xff
 800e128:	d90e      	bls.n	800e148 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	22ff      	movs	r2, #255	; 0xff
 800e12e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e134:	b2da      	uxtb	r2, r3
 800e136:	8979      	ldrh	r1, [r7, #10]
 800e138:	2300      	movs	r3, #0
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f000 fbe9 	bl	800e918 <I2C_TransferConfig>
 800e146:	e00f      	b.n	800e168 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e14c:	b29a      	uxth	r2, r3
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e156:	b2da      	uxtb	r2, r3
 800e158:	8979      	ldrh	r1, [r7, #10]
 800e15a:	2300      	movs	r3, #0
 800e15c:	9300      	str	r3, [sp, #0]
 800e15e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	f000 fbd8 	bl	800e918 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d19e      	bne.n	800e0b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e172:	697a      	ldr	r2, [r7, #20]
 800e174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f000 faa6 	bl	800e6c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d001      	beq.n	800e186 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e182:	2301      	movs	r3, #1
 800e184:	e01a      	b.n	800e1bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2220      	movs	r2, #32
 800e18c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	6859      	ldr	r1, [r3, #4]
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	4b0a      	ldr	r3, [pc, #40]	; (800e1c4 <HAL_I2C_Mem_Write+0x224>)
 800e19a:	400b      	ands	r3, r1
 800e19c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2220      	movs	r2, #32
 800e1a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	e000      	b.n	800e1bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e1ba:	2302      	movs	r3, #2
  }
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3718      	adds	r7, #24
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	fe00e800 	.word	0xfe00e800

0800e1c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af02      	add	r7, sp, #8
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	4608      	mov	r0, r1
 800e1d2:	4611      	mov	r1, r2
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	817b      	strh	r3, [r7, #10]
 800e1da:	460b      	mov	r3, r1
 800e1dc:	813b      	strh	r3, [r7, #8]
 800e1de:	4613      	mov	r3, r2
 800e1e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	2b20      	cmp	r3, #32
 800e1ec:	f040 80fd 	bne.w	800e3ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1f0:	6a3b      	ldr	r3, [r7, #32]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d002      	beq.n	800e1fc <HAL_I2C_Mem_Read+0x34>
 800e1f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d105      	bne.n	800e208 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e202:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e204:	2301      	movs	r3, #1
 800e206:	e0f1      	b.n	800e3ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e20e:	2b01      	cmp	r3, #1
 800e210:	d101      	bne.n	800e216 <HAL_I2C_Mem_Read+0x4e>
 800e212:	2302      	movs	r3, #2
 800e214:	e0ea      	b.n	800e3ec <HAL_I2C_Mem_Read+0x224>
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2201      	movs	r2, #1
 800e21a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e21e:	f7fe fee5 	bl	800cfec <HAL_GetTick>
 800e222:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	9300      	str	r3, [sp, #0]
 800e228:	2319      	movs	r3, #25
 800e22a:	2201      	movs	r2, #1
 800e22c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f000 f9c9 	bl	800e5c8 <I2C_WaitOnFlagUntilTimeout>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d001      	beq.n	800e240 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e23c:	2301      	movs	r3, #1
 800e23e:	e0d5      	b.n	800e3ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2222      	movs	r2, #34	; 0x22
 800e244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2240      	movs	r2, #64	; 0x40
 800e24c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2200      	movs	r2, #0
 800e254:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	6a3a      	ldr	r2, [r7, #32]
 800e25a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e260:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2200      	movs	r2, #0
 800e266:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e268:	88f8      	ldrh	r0, [r7, #6]
 800e26a:	893a      	ldrh	r2, [r7, #8]
 800e26c:	8979      	ldrh	r1, [r7, #10]
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	9301      	str	r3, [sp, #4]
 800e272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e274:	9300      	str	r3, [sp, #0]
 800e276:	4603      	mov	r3, r0
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f000 f92d 	bl	800e4d8 <I2C_RequestMemoryRead>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d005      	beq.n	800e290 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2200      	movs	r2, #0
 800e288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e28c:	2301      	movs	r3, #1
 800e28e:	e0ad      	b.n	800e3ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e294:	b29b      	uxth	r3, r3
 800e296:	2bff      	cmp	r3, #255	; 0xff
 800e298:	d90e      	bls.n	800e2b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	22ff      	movs	r2, #255	; 0xff
 800e29e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	8979      	ldrh	r1, [r7, #10]
 800e2a8:	4b52      	ldr	r3, [pc, #328]	; (800e3f4 <HAL_I2C_Mem_Read+0x22c>)
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e2b0:	68f8      	ldr	r0, [r7, #12]
 800e2b2:	f000 fb31 	bl	800e918 <I2C_TransferConfig>
 800e2b6:	e00f      	b.n	800e2d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2bc:	b29a      	uxth	r2, r3
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2c6:	b2da      	uxtb	r2, r3
 800e2c8:	8979      	ldrh	r1, [r7, #10]
 800e2ca:	4b4a      	ldr	r3, [pc, #296]	; (800e3f4 <HAL_I2C_Mem_Read+0x22c>)
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	f000 fb20 	bl	800e918 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2de:	2200      	movs	r2, #0
 800e2e0:	2104      	movs	r1, #4
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f000 f970 	bl	800e5c8 <I2C_WaitOnFlagUntilTimeout>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d001      	beq.n	800e2f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e07c      	b.n	800e3ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2fc:	b2d2      	uxtb	r2, r2
 800e2fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e304:	1c5a      	adds	r2, r3, #1
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e30e:	3b01      	subs	r3, #1
 800e310:	b29a      	uxth	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	3b01      	subs	r3, #1
 800e31e:	b29a      	uxth	r2, r3
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e328:	b29b      	uxth	r3, r3
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d034      	beq.n	800e398 <HAL_I2C_Mem_Read+0x1d0>
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e332:	2b00      	cmp	r3, #0
 800e334:	d130      	bne.n	800e398 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33c:	2200      	movs	r2, #0
 800e33e:	2180      	movs	r1, #128	; 0x80
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f000 f941 	bl	800e5c8 <I2C_WaitOnFlagUntilTimeout>
 800e346:	4603      	mov	r3, r0
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d001      	beq.n	800e350 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e34c:	2301      	movs	r3, #1
 800e34e:	e04d      	b.n	800e3ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e354:	b29b      	uxth	r3, r3
 800e356:	2bff      	cmp	r3, #255	; 0xff
 800e358:	d90e      	bls.n	800e378 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	22ff      	movs	r2, #255	; 0xff
 800e35e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e364:	b2da      	uxtb	r2, r3
 800e366:	8979      	ldrh	r1, [r7, #10]
 800e368:	2300      	movs	r3, #0
 800e36a:	9300      	str	r3, [sp, #0]
 800e36c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f000 fad1 	bl	800e918 <I2C_TransferConfig>
 800e376:	e00f      	b.n	800e398 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e37c:	b29a      	uxth	r2, r3
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e386:	b2da      	uxtb	r2, r3
 800e388:	8979      	ldrh	r1, [r7, #10]
 800e38a:	2300      	movs	r3, #0
 800e38c:	9300      	str	r3, [sp, #0]
 800e38e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	f000 fac0 	bl	800e918 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d19a      	bne.n	800e2d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e3a2:	697a      	ldr	r2, [r7, #20]
 800e3a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f000 f98e 	bl	800e6c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e01a      	b.n	800e3ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2220      	movs	r2, #32
 800e3bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	6859      	ldr	r1, [r3, #4]
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	4b0b      	ldr	r3, [pc, #44]	; (800e3f8 <HAL_I2C_Mem_Read+0x230>)
 800e3ca:	400b      	ands	r3, r1
 800e3cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2220      	movs	r2, #32
 800e3d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	e000      	b.n	800e3ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e3ea:	2302      	movs	r3, #2
  }
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3718      	adds	r7, #24
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	80002400 	.word	0x80002400
 800e3f8:	fe00e800 	.word	0xfe00e800

0800e3fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e40a:	b2db      	uxtb	r3, r3
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e418:	b480      	push	{r7}
 800e41a:	b083      	sub	sp, #12
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e424:	4618      	mov	r0, r3
 800e426:	370c      	adds	r7, #12
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b086      	sub	sp, #24
 800e434:	af02      	add	r7, sp, #8
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	4608      	mov	r0, r1
 800e43a:	4611      	mov	r1, r2
 800e43c:	461a      	mov	r2, r3
 800e43e:	4603      	mov	r3, r0
 800e440:	817b      	strh	r3, [r7, #10]
 800e442:	460b      	mov	r3, r1
 800e444:	813b      	strh	r3, [r7, #8]
 800e446:	4613      	mov	r3, r2
 800e448:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e44a:	88fb      	ldrh	r3, [r7, #6]
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	8979      	ldrh	r1, [r7, #10]
 800e450:	4b20      	ldr	r3, [pc, #128]	; (800e4d4 <I2C_RequestMemoryWrite+0xa4>)
 800e452:	9300      	str	r3, [sp, #0]
 800e454:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e458:	68f8      	ldr	r0, [r7, #12]
 800e45a:	f000 fa5d 	bl	800e918 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e45e:	69fa      	ldr	r2, [r7, #28]
 800e460:	69b9      	ldr	r1, [r7, #24]
 800e462:	68f8      	ldr	r0, [r7, #12]
 800e464:	f000 f8f0 	bl	800e648 <I2C_WaitOnTXISFlagUntilTimeout>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e46e:	2301      	movs	r3, #1
 800e470:	e02c      	b.n	800e4cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e472:	88fb      	ldrh	r3, [r7, #6]
 800e474:	2b01      	cmp	r3, #1
 800e476:	d105      	bne.n	800e484 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e478:	893b      	ldrh	r3, [r7, #8]
 800e47a:	b2da      	uxtb	r2, r3
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	629a      	str	r2, [r3, #40]	; 0x28
 800e482:	e015      	b.n	800e4b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e484:	893b      	ldrh	r3, [r7, #8]
 800e486:	0a1b      	lsrs	r3, r3, #8
 800e488:	b29b      	uxth	r3, r3
 800e48a:	b2da      	uxtb	r2, r3
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e492:	69fa      	ldr	r2, [r7, #28]
 800e494:	69b9      	ldr	r1, [r7, #24]
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	f000 f8d6 	bl	800e648 <I2C_WaitOnTXISFlagUntilTimeout>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e012      	b.n	800e4cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e4a6:	893b      	ldrh	r3, [r7, #8]
 800e4a8:	b2da      	uxtb	r2, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	9300      	str	r3, [sp, #0]
 800e4b4:	69bb      	ldr	r3, [r7, #24]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	2180      	movs	r1, #128	; 0x80
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f000 f884 	bl	800e5c8 <I2C_WaitOnFlagUntilTimeout>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d001      	beq.n	800e4ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	e000      	b.n	800e4cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3710      	adds	r7, #16
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	80002000 	.word	0x80002000

0800e4d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b086      	sub	sp, #24
 800e4dc:	af02      	add	r7, sp, #8
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	4608      	mov	r0, r1
 800e4e2:	4611      	mov	r1, r2
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	817b      	strh	r3, [r7, #10]
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	813b      	strh	r3, [r7, #8]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e4f2:	88fb      	ldrh	r3, [r7, #6]
 800e4f4:	b2da      	uxtb	r2, r3
 800e4f6:	8979      	ldrh	r1, [r7, #10]
 800e4f8:	4b20      	ldr	r3, [pc, #128]	; (800e57c <I2C_RequestMemoryRead+0xa4>)
 800e4fa:	9300      	str	r3, [sp, #0]
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f000 fa0a 	bl	800e918 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e504:	69fa      	ldr	r2, [r7, #28]
 800e506:	69b9      	ldr	r1, [r7, #24]
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f000 f89d 	bl	800e648 <I2C_WaitOnTXISFlagUntilTimeout>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d001      	beq.n	800e518 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e514:	2301      	movs	r3, #1
 800e516:	e02c      	b.n	800e572 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e518:	88fb      	ldrh	r3, [r7, #6]
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d105      	bne.n	800e52a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e51e:	893b      	ldrh	r3, [r7, #8]
 800e520:	b2da      	uxtb	r2, r3
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	629a      	str	r2, [r3, #40]	; 0x28
 800e528:	e015      	b.n	800e556 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e52a:	893b      	ldrh	r3, [r7, #8]
 800e52c:	0a1b      	lsrs	r3, r3, #8
 800e52e:	b29b      	uxth	r3, r3
 800e530:	b2da      	uxtb	r2, r3
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e538:	69fa      	ldr	r2, [r7, #28]
 800e53a:	69b9      	ldr	r1, [r7, #24]
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f000 f883 	bl	800e648 <I2C_WaitOnTXISFlagUntilTimeout>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d001      	beq.n	800e54c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e548:	2301      	movs	r3, #1
 800e54a:	e012      	b.n	800e572 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e54c:	893b      	ldrh	r3, [r7, #8]
 800e54e:	b2da      	uxtb	r2, r3
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	9300      	str	r3, [sp, #0]
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	2200      	movs	r2, #0
 800e55e:	2140      	movs	r1, #64	; 0x40
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	f000 f831 	bl	800e5c8 <I2C_WaitOnFlagUntilTimeout>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d001      	beq.n	800e570 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e56c:	2301      	movs	r3, #1
 800e56e:	e000      	b.n	800e572 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	80002000 	.word	0x80002000

0800e580 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	699b      	ldr	r3, [r3, #24]
 800e58e:	f003 0302 	and.w	r3, r3, #2
 800e592:	2b02      	cmp	r3, #2
 800e594:	d103      	bne.n	800e59e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2200      	movs	r2, #0
 800e59c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	699b      	ldr	r3, [r3, #24]
 800e5a4:	f003 0301 	and.w	r3, r3, #1
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d007      	beq.n	800e5bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	699a      	ldr	r2, [r3, #24]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f042 0201 	orr.w	r2, r2, #1
 800e5ba:	619a      	str	r2, [r3, #24]
  }
}
 800e5bc:	bf00      	nop
 800e5be:	370c      	adds	r7, #12
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr

0800e5c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	603b      	str	r3, [r7, #0]
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e5d8:	e022      	b.n	800e620 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e0:	d01e      	beq.n	800e620 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5e2:	f7fe fd03 	bl	800cfec <HAL_GetTick>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	683a      	ldr	r2, [r7, #0]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d302      	bcc.n	800e5f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d113      	bne.n	800e620 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5fc:	f043 0220 	orr.w	r2, r3, #32
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2220      	movs	r2, #32
 800e608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2200      	movs	r2, #0
 800e610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2200      	movs	r2, #0
 800e618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800e61c:	2301      	movs	r3, #1
 800e61e:	e00f      	b.n	800e640 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	699a      	ldr	r2, [r3, #24]
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	4013      	ands	r3, r2
 800e62a:	68ba      	ldr	r2, [r7, #8]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	bf0c      	ite	eq
 800e630:	2301      	moveq	r3, #1
 800e632:	2300      	movne	r3, #0
 800e634:	b2db      	uxtb	r3, r3
 800e636:	461a      	mov	r2, r3
 800e638:	79fb      	ldrb	r3, [r7, #7]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d0cd      	beq.n	800e5da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e63e:	2300      	movs	r3, #0
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e654:	e02c      	b.n	800e6b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	68b9      	ldr	r1, [r7, #8]
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f000 f870 	bl	800e740 <I2C_IsErrorOccurred>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d001      	beq.n	800e66a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e666:	2301      	movs	r3, #1
 800e668:	e02a      	b.n	800e6c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e670:	d01e      	beq.n	800e6b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e672:	f7fe fcbb 	bl	800cfec <HAL_GetTick>
 800e676:	4602      	mov	r2, r0
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	1ad3      	subs	r3, r2, r3
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d302      	bcc.n	800e688 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d113      	bne.n	800e6b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e68c:	f043 0220 	orr.w	r2, r3, #32
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2220      	movs	r2, #32
 800e698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e007      	b.n	800e6c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	699b      	ldr	r3, [r3, #24]
 800e6b6:	f003 0302 	and.w	r3, r3, #2
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d1cb      	bne.n	800e656 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e6be:	2300      	movs	r3, #0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e6d4:	e028      	b.n	800e728 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	68b9      	ldr	r1, [r7, #8]
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f000 f830 	bl	800e740 <I2C_IsErrorOccurred>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d001      	beq.n	800e6ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e026      	b.n	800e738 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6ea:	f7fe fc7f 	bl	800cfec <HAL_GetTick>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	1ad3      	subs	r3, r2, r3
 800e6f4:	68ba      	ldr	r2, [r7, #8]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d302      	bcc.n	800e700 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d113      	bne.n	800e728 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e704:	f043 0220 	orr.w	r2, r3, #32
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2220      	movs	r2, #32
 800e710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2200      	movs	r2, #0
 800e720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e724:	2301      	movs	r3, #1
 800e726:	e007      	b.n	800e738 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	699b      	ldr	r3, [r3, #24]
 800e72e:	f003 0320 	and.w	r3, r3, #32
 800e732:	2b20      	cmp	r3, #32
 800e734:	d1cf      	bne.n	800e6d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e736:	2300      	movs	r3, #0
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3710      	adds	r7, #16
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b08a      	sub	sp, #40	; 0x28
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e74c:	2300      	movs	r3, #0
 800e74e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	699b      	ldr	r3, [r3, #24]
 800e758:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e75a:	2300      	movs	r3, #0
 800e75c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	f003 0310 	and.w	r3, r3, #16
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d075      	beq.n	800e858 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2210      	movs	r2, #16
 800e772:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e774:	e056      	b.n	800e824 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e77c:	d052      	beq.n	800e824 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e77e:	f7fe fc35 	bl	800cfec <HAL_GetTick>
 800e782:	4602      	mov	r2, r0
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	1ad3      	subs	r3, r2, r3
 800e788:	68ba      	ldr	r2, [r7, #8]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d302      	bcc.n	800e794 <I2C_IsErrorOccurred+0x54>
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d147      	bne.n	800e824 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e79e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	699b      	ldr	r3, [r3, #24]
 800e7ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7b6:	d12e      	bne.n	800e816 <I2C_IsErrorOccurred+0xd6>
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e7be:	d02a      	beq.n	800e816 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800e7c0:	7cfb      	ldrb	r3, [r7, #19]
 800e7c2:	2b20      	cmp	r3, #32
 800e7c4:	d027      	beq.n	800e816 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e7d4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e7d6:	f7fe fc09 	bl	800cfec <HAL_GetTick>
 800e7da:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e7dc:	e01b      	b.n	800e816 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e7de:	f7fe fc05 	bl	800cfec <HAL_GetTick>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	1ad3      	subs	r3, r2, r3
 800e7e8:	2b19      	cmp	r3, #25
 800e7ea:	d914      	bls.n	800e816 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7f0:	f043 0220 	orr.w	r2, r3, #32
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2220      	movs	r2, #32
 800e7fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2200      	movs	r2, #0
 800e804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2200      	movs	r2, #0
 800e80c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800e810:	2301      	movs	r3, #1
 800e812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	699b      	ldr	r3, [r3, #24]
 800e81c:	f003 0320 	and.w	r3, r3, #32
 800e820:	2b20      	cmp	r3, #32
 800e822:	d1dc      	bne.n	800e7de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	699b      	ldr	r3, [r3, #24]
 800e82a:	f003 0320 	and.w	r3, r3, #32
 800e82e:	2b20      	cmp	r3, #32
 800e830:	d003      	beq.n	800e83a <I2C_IsErrorOccurred+0xfa>
 800e832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e836:	2b00      	cmp	r3, #0
 800e838:	d09d      	beq.n	800e776 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d103      	bne.n	800e84a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2220      	movs	r2, #32
 800e848:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e84a:	6a3b      	ldr	r3, [r7, #32]
 800e84c:	f043 0304 	orr.w	r3, r3, #4
 800e850:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e852:	2301      	movs	r3, #1
 800e854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	699b      	ldr	r3, [r3, #24]
 800e85e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00b      	beq.n	800e882 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e86a:	6a3b      	ldr	r3, [r7, #32]
 800e86c:	f043 0301 	orr.w	r3, r3, #1
 800e870:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e87a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e87c:	2301      	movs	r3, #1
 800e87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d00b      	beq.n	800e8a4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e88c:	6a3b      	ldr	r3, [r7, #32]
 800e88e:	f043 0308 	orr.w	r3, r3, #8
 800e892:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e89c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d00b      	beq.n	800e8c6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e8ae:	6a3b      	ldr	r3, [r7, #32]
 800e8b0:	f043 0302 	orr.w	r3, r3, #2
 800e8b4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800e8c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d01c      	beq.n	800e908 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f7ff fe56 	bl	800e580 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	6859      	ldr	r1, [r3, #4]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	4b0d      	ldr	r3, [pc, #52]	; (800e914 <I2C_IsErrorOccurred+0x1d4>)
 800e8e0:	400b      	ands	r3, r1
 800e8e2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8e8:	6a3b      	ldr	r3, [r7, #32]
 800e8ea:	431a      	orrs	r2, r3
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2220      	movs	r2, #32
 800e8f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2200      	movs	r2, #0
 800e904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800e908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3728      	adds	r7, #40	; 0x28
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	fe00e800 	.word	0xfe00e800

0800e918 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e918:	b480      	push	{r7}
 800e91a:	b087      	sub	sp, #28
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	607b      	str	r3, [r7, #4]
 800e922:	460b      	mov	r3, r1
 800e924:	817b      	strh	r3, [r7, #10]
 800e926:	4613      	mov	r3, r2
 800e928:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e92a:	897b      	ldrh	r3, [r7, #10]
 800e92c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e930:	7a7b      	ldrb	r3, [r7, #9]
 800e932:	041b      	lsls	r3, r3, #16
 800e934:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e938:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e93e:	6a3b      	ldr	r3, [r7, #32]
 800e940:	4313      	orrs	r3, r2
 800e942:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e946:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	685a      	ldr	r2, [r3, #4]
 800e94e:	6a3b      	ldr	r3, [r7, #32]
 800e950:	0d5b      	lsrs	r3, r3, #21
 800e952:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e956:	4b08      	ldr	r3, [pc, #32]	; (800e978 <I2C_TransferConfig+0x60>)
 800e958:	430b      	orrs	r3, r1
 800e95a:	43db      	mvns	r3, r3
 800e95c:	ea02 0103 	and.w	r1, r2, r3
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	697a      	ldr	r2, [r7, #20]
 800e966:	430a      	orrs	r2, r1
 800e968:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e96a:	bf00      	nop
 800e96c:	371c      	adds	r7, #28
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr
 800e976:	bf00      	nop
 800e978:	03ff63ff 	.word	0x03ff63ff

0800e97c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	2b20      	cmp	r3, #32
 800e990:	d138      	bne.n	800ea04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d101      	bne.n	800e9a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e99c:	2302      	movs	r3, #2
 800e99e:	e032      	b.n	800ea06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2224      	movs	r2, #36	; 0x24
 800e9ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f022 0201 	bic.w	r2, r2, #1
 800e9be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e9ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	6819      	ldr	r1, [r3, #0]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	683a      	ldr	r2, [r7, #0]
 800e9dc:	430a      	orrs	r2, r1
 800e9de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	681a      	ldr	r2, [r3, #0]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f042 0201 	orr.w	r2, r2, #1
 800e9ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2220      	movs	r2, #32
 800e9f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ea00:	2300      	movs	r3, #0
 800ea02:	e000      	b.n	800ea06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ea04:	2302      	movs	r3, #2
  }
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	370c      	adds	r7, #12
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ea12:	b480      	push	{r7}
 800ea14:	b085      	sub	sp, #20
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
 800ea1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	2b20      	cmp	r3, #32
 800ea26:	d139      	bne.n	800ea9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d101      	bne.n	800ea36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ea32:	2302      	movs	r3, #2
 800ea34:	e033      	b.n	800ea9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2224      	movs	r2, #36	; 0x24
 800ea42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f022 0201 	bic.w	r2, r2, #1
 800ea54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ea64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	021b      	lsls	r3, r3, #8
 800ea6a:	68fa      	ldr	r2, [r7, #12]
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	68fa      	ldr	r2, [r7, #12]
 800ea76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f042 0201 	orr.w	r2, r2, #1
 800ea86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2220      	movs	r2, #32
 800ea8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	e000      	b.n	800ea9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ea9c:	2302      	movs	r3, #2
  }
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3714      	adds	r7, #20
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
	...

0800eaac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d101      	bne.n	800eabe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800eaba:	2301      	movs	r3, #1
 800eabc:	e0bf      	b.n	800ec3e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d106      	bne.n	800ead8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2200      	movs	r2, #0
 800eace:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f7f2 f91c 	bl	8000d10 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2202      	movs	r2, #2
 800eadc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	699a      	ldr	r2, [r3, #24]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800eaee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	6999      	ldr	r1, [r3, #24]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	685a      	ldr	r2, [r3, #4]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800eb04:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	691b      	ldr	r3, [r3, #16]
 800eb0a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	430a      	orrs	r2, r1
 800eb12:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	6899      	ldr	r1, [r3, #8]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	4b4a      	ldr	r3, [pc, #296]	; (800ec48 <HAL_LTDC_Init+0x19c>)
 800eb20:	400b      	ands	r3, r1
 800eb22:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	695b      	ldr	r3, [r3, #20]
 800eb28:	041b      	lsls	r3, r3, #16
 800eb2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	6899      	ldr	r1, [r3, #8]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	699a      	ldr	r2, [r3, #24]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	431a      	orrs	r2, r3
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	430a      	orrs	r2, r1
 800eb40:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	68d9      	ldr	r1, [r3, #12]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	4b3e      	ldr	r3, [pc, #248]	; (800ec48 <HAL_LTDC_Init+0x19c>)
 800eb4e:	400b      	ands	r3, r1
 800eb50:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	69db      	ldr	r3, [r3, #28]
 800eb56:	041b      	lsls	r3, r3, #16
 800eb58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	68d9      	ldr	r1, [r3, #12]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6a1a      	ldr	r2, [r3, #32]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	431a      	orrs	r2, r3
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	430a      	orrs	r2, r1
 800eb6e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	6919      	ldr	r1, [r3, #16]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	4b33      	ldr	r3, [pc, #204]	; (800ec48 <HAL_LTDC_Init+0x19c>)
 800eb7c:	400b      	ands	r3, r1
 800eb7e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb84:	041b      	lsls	r3, r3, #16
 800eb86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	6919      	ldr	r1, [r3, #16]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	431a      	orrs	r2, r3
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	430a      	orrs	r2, r1
 800eb9c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	6959      	ldr	r1, [r3, #20]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	4b27      	ldr	r3, [pc, #156]	; (800ec48 <HAL_LTDC_Init+0x19c>)
 800ebaa:	400b      	ands	r3, r1
 800ebac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb2:	041b      	lsls	r3, r3, #16
 800ebb4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	6959      	ldr	r1, [r3, #20]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	431a      	orrs	r2, r3
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	430a      	orrs	r2, r1
 800ebca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ebd2:	021b      	lsls	r3, r3, #8
 800ebd4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ebdc:	041b      	lsls	r3, r3, #16
 800ebde:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800ebee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ebf6:	68ba      	ldr	r2, [r7, #8]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	4313      	orrs	r3, r2
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800ec02:	431a      	orrs	r2, r3
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	430a      	orrs	r2, r1
 800ec0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f042 0206 	orr.w	r2, r2, #6
 800ec1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	699a      	ldr	r2, [r3, #24]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f042 0201 	orr.w	r2, r2, #1
 800ec2a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2201      	movs	r2, #1
 800ec38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800ec3c:	2300      	movs	r3, #0
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	f000f800 	.word	0xf000f800

0800ec4c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec5a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec62:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f003 0304 	and.w	r3, r3, #4
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d023      	beq.n	800ecb6 <HAL_LTDC_IRQHandler+0x6a>
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	f003 0304 	and.w	r3, r3, #4
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d01e      	beq.n	800ecb6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f022 0204 	bic.w	r2, r2, #4
 800ec86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	2204      	movs	r2, #4
 800ec8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ec96:	f043 0201 	orr.w	r2, r3, #1
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2204      	movs	r2, #4
 800eca4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 f86f 	bl	800ed94 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f003 0302 	and.w	r3, r3, #2
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d023      	beq.n	800ed08 <HAL_LTDC_IRQHandler+0xbc>
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	f003 0302 	and.w	r3, r3, #2
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d01e      	beq.n	800ed08 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f022 0202 	bic.w	r2, r2, #2
 800ecd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2202      	movs	r2, #2
 800ece0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ece8:	f043 0202 	orr.w	r2, r3, #2
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2204      	movs	r2, #4
 800ecf6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f846 	bl	800ed94 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f003 0301 	and.w	r3, r3, #1
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d01b      	beq.n	800ed4a <HAL_LTDC_IRQHandler+0xfe>
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	f003 0301 	and.w	r3, r3, #1
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d016      	beq.n	800ed4a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f022 0201 	bic.w	r2, r2, #1
 800ed2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2201      	movs	r2, #1
 800ed32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2201      	movs	r2, #1
 800ed38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7f4 fdd7 	bl	80038f8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f003 0308 	and.w	r3, r3, #8
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d01b      	beq.n	800ed8c <HAL_LTDC_IRQHandler+0x140>
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	f003 0308 	and.w	r3, r3, #8
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d016      	beq.n	800ed8c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f022 0208 	bic.w	r2, r2, #8
 800ed6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	2208      	movs	r2, #8
 800ed74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2201      	movs	r2, #1
 800ed7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2200      	movs	r2, #0
 800ed82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 f80e 	bl	800eda8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800ed8c:	bf00      	nop
 800ed8e:	3710      	adds	r7, #16
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800ed9c:	bf00      	nop
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800edb0:	bf00      	nop
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800edbc:	b5b0      	push	{r4, r5, r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d101      	bne.n	800edd6 <HAL_LTDC_ConfigLayer+0x1a>
 800edd2:	2302      	movs	r3, #2
 800edd4:	e02c      	b.n	800ee30 <HAL_LTDC_ConfigLayer+0x74>
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2201      	movs	r2, #1
 800edda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2202      	movs	r2, #2
 800ede2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ede6:	68fa      	ldr	r2, [r7, #12]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2134      	movs	r1, #52	; 0x34
 800edec:	fb01 f303 	mul.w	r3, r1, r3
 800edf0:	4413      	add	r3, r2
 800edf2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	4614      	mov	r4, r2
 800edfa:	461d      	mov	r5, r3
 800edfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee08:	682b      	ldr	r3, [r5, #0]
 800ee0a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	68b9      	ldr	r1, [r7, #8]
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f000 f849 	bl	800eea8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2201      	movs	r2, #1
 800ee22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ee2e:	2300      	movs	r3, #0
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3710      	adds	r7, #16
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bdb0      	pop	{r4, r5, r7, pc}

0800ee38 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d101      	bne.n	800ee50 <HAL_LTDC_ProgramLineEvent+0x18>
 800ee4c:	2302      	movs	r3, #2
 800ee4e:	e023      	b.n	800ee98 <HAL_LTDC_ProgramLineEvent+0x60>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2202      	movs	r2, #2
 800ee5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f022 0201 	bic.w	r2, r2, #1
 800ee6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800ee70:	4a0c      	ldr	r2, [pc, #48]	; (800eea4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f042 0201 	orr.w	r2, r2, #1
 800ee84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2200      	movs	r2, #0
 800ee92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ee96:	2300      	movs	r3, #0
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	370c      	adds	r7, #12
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr
 800eea4:	50001000 	.word	0x50001000

0800eea8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b089      	sub	sp, #36	; 0x24
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	685a      	ldr	r2, [r3, #4]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	0c1b      	lsrs	r3, r3, #16
 800eec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eec4:	4413      	add	r3, r2
 800eec6:	041b      	lsls	r3, r3, #16
 800eec8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	461a      	mov	r2, r3
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	01db      	lsls	r3, r3, #7
 800eed4:	4413      	add	r3, r2
 800eed6:	3384      	adds	r3, #132	; 0x84
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	68fa      	ldr	r2, [r7, #12]
 800eedc:	6812      	ldr	r2, [r2, #0]
 800eede:	4611      	mov	r1, r2
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	01d2      	lsls	r2, r2, #7
 800eee4:	440a      	add	r2, r1
 800eee6:	3284      	adds	r2, #132	; 0x84
 800eee8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800eeec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	0c1b      	lsrs	r3, r3, #16
 800eefa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eefe:	4413      	add	r3, r2
 800ef00:	1c5a      	adds	r2, r3, #1
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4619      	mov	r1, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	01db      	lsls	r3, r3, #7
 800ef0c:	440b      	add	r3, r1
 800ef0e:	3384      	adds	r3, #132	; 0x84
 800ef10:	4619      	mov	r1, r3
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	4313      	orrs	r3, r2
 800ef16:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	68da      	ldr	r2, [r3, #12]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	68db      	ldr	r3, [r3, #12]
 800ef22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef26:	4413      	add	r3, r2
 800ef28:	041b      	lsls	r3, r3, #16
 800ef2a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	461a      	mov	r2, r3
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	01db      	lsls	r3, r3, #7
 800ef36:	4413      	add	r3, r2
 800ef38:	3384      	adds	r3, #132	; 0x84
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	6812      	ldr	r2, [r2, #0]
 800ef40:	4611      	mov	r1, r2
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	01d2      	lsls	r2, r2, #7
 800ef46:	440a      	add	r2, r1
 800ef48:	3284      	adds	r2, #132	; 0x84
 800ef4a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ef4e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	689a      	ldr	r2, [r3, #8]
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	68db      	ldr	r3, [r3, #12]
 800ef5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef5e:	4413      	add	r3, r2
 800ef60:	1c5a      	adds	r2, r3, #1
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4619      	mov	r1, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	01db      	lsls	r3, r3, #7
 800ef6c:	440b      	add	r3, r1
 800ef6e:	3384      	adds	r3, #132	; 0x84
 800ef70:	4619      	mov	r1, r3
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	4313      	orrs	r3, r2
 800ef76:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	01db      	lsls	r3, r3, #7
 800ef82:	4413      	add	r3, r2
 800ef84:	3384      	adds	r3, #132	; 0x84
 800ef86:	691b      	ldr	r3, [r3, #16]
 800ef88:	68fa      	ldr	r2, [r7, #12]
 800ef8a:	6812      	ldr	r2, [r2, #0]
 800ef8c:	4611      	mov	r1, r2
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	01d2      	lsls	r2, r2, #7
 800ef92:	440a      	add	r2, r1
 800ef94:	3284      	adds	r2, #132	; 0x84
 800ef96:	f023 0307 	bic.w	r3, r3, #7
 800ef9a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	461a      	mov	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	01db      	lsls	r3, r3, #7
 800efa6:	4413      	add	r3, r2
 800efa8:	3384      	adds	r3, #132	; 0x84
 800efaa:	461a      	mov	r2, r3
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	691b      	ldr	r3, [r3, #16]
 800efb0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800efb8:	021b      	lsls	r3, r3, #8
 800efba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800efc2:	041b      	lsls	r3, r3, #16
 800efc4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	699b      	ldr	r3, [r3, #24]
 800efca:	061b      	lsls	r3, r3, #24
 800efcc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	461a      	mov	r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	01db      	lsls	r3, r3, #7
 800efd8:	4413      	add	r3, r2
 800efda:	3384      	adds	r3, #132	; 0x84
 800efdc:	699b      	ldr	r3, [r3, #24]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	461a      	mov	r2, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	01db      	lsls	r3, r3, #7
 800efe8:	4413      	add	r3, r2
 800efea:	3384      	adds	r3, #132	; 0x84
 800efec:	461a      	mov	r2, r3
 800efee:	2300      	movs	r3, #0
 800eff0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eff8:	461a      	mov	r2, r3
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	431a      	orrs	r2, r3
 800effe:	69bb      	ldr	r3, [r7, #24]
 800f000:	431a      	orrs	r2, r3
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4619      	mov	r1, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	01db      	lsls	r3, r3, #7
 800f00c:	440b      	add	r3, r1
 800f00e:	3384      	adds	r3, #132	; 0x84
 800f010:	4619      	mov	r1, r3
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	4313      	orrs	r3, r2
 800f016:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	461a      	mov	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	01db      	lsls	r3, r3, #7
 800f022:	4413      	add	r3, r2
 800f024:	3384      	adds	r3, #132	; 0x84
 800f026:	695b      	ldr	r3, [r3, #20]
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	6812      	ldr	r2, [r2, #0]
 800f02c:	4611      	mov	r1, r2
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	01d2      	lsls	r2, r2, #7
 800f032:	440a      	add	r2, r1
 800f034:	3284      	adds	r2, #132	; 0x84
 800f036:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f03a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	461a      	mov	r2, r3
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	01db      	lsls	r3, r3, #7
 800f046:	4413      	add	r3, r2
 800f048:	3384      	adds	r3, #132	; 0x84
 800f04a:	461a      	mov	r2, r3
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	695b      	ldr	r3, [r3, #20]
 800f050:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	461a      	mov	r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	01db      	lsls	r3, r3, #7
 800f05c:	4413      	add	r3, r2
 800f05e:	3384      	adds	r3, #132	; 0x84
 800f060:	69da      	ldr	r2, [r3, #28]
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4619      	mov	r1, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	01db      	lsls	r3, r3, #7
 800f06c:	440b      	add	r3, r1
 800f06e:	3384      	adds	r3, #132	; 0x84
 800f070:	4619      	mov	r1, r3
 800f072:	4b58      	ldr	r3, [pc, #352]	; (800f1d4 <LTDC_SetConfig+0x32c>)
 800f074:	4013      	ands	r3, r2
 800f076:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	69da      	ldr	r2, [r3, #28]
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	6a1b      	ldr	r3, [r3, #32]
 800f080:	68f9      	ldr	r1, [r7, #12]
 800f082:	6809      	ldr	r1, [r1, #0]
 800f084:	4608      	mov	r0, r1
 800f086:	6879      	ldr	r1, [r7, #4]
 800f088:	01c9      	lsls	r1, r1, #7
 800f08a:	4401      	add	r1, r0
 800f08c:	3184      	adds	r1, #132	; 0x84
 800f08e:	4313      	orrs	r3, r2
 800f090:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	461a      	mov	r2, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	01db      	lsls	r3, r3, #7
 800f09c:	4413      	add	r3, r2
 800f09e:	3384      	adds	r3, #132	; 0x84
 800f0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	01db      	lsls	r3, r3, #7
 800f0ac:	4413      	add	r3, r2
 800f0ae:	3384      	adds	r3, #132	; 0x84
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	01db      	lsls	r3, r3, #7
 800f0c0:	4413      	add	r3, r2
 800f0c2:	3384      	adds	r3, #132	; 0x84
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ca:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	691b      	ldr	r3, [r3, #16]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d102      	bne.n	800f0da <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800f0d4:	2304      	movs	r3, #4
 800f0d6:	61fb      	str	r3, [r7, #28]
 800f0d8:	e01b      	b.n	800f112 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	691b      	ldr	r3, [r3, #16]
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d102      	bne.n	800f0e8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800f0e2:	2303      	movs	r3, #3
 800f0e4:	61fb      	str	r3, [r7, #28]
 800f0e6:	e014      	b.n	800f112 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	2b04      	cmp	r3, #4
 800f0ee:	d00b      	beq.n	800f108 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800f0f4:	2b02      	cmp	r3, #2
 800f0f6:	d007      	beq.n	800f108 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800f0fc:	2b03      	cmp	r3, #3
 800f0fe:	d003      	beq.n	800f108 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800f104:	2b07      	cmp	r3, #7
 800f106:	d102      	bne.n	800f10e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800f108:	2302      	movs	r3, #2
 800f10a:	61fb      	str	r3, [r7, #28]
 800f10c:	e001      	b.n	800f112 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800f10e:	2301      	movs	r3, #1
 800f110:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	461a      	mov	r2, r3
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	01db      	lsls	r3, r3, #7
 800f11c:	4413      	add	r3, r2
 800f11e:	3384      	adds	r3, #132	; 0x84
 800f120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	6812      	ldr	r2, [r2, #0]
 800f126:	4611      	mov	r1, r2
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	01d2      	lsls	r2, r2, #7
 800f12c:	440a      	add	r2, r1
 800f12e:	3284      	adds	r2, #132	; 0x84
 800f130:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800f134:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f13a:	69fa      	ldr	r2, [r7, #28]
 800f13c:	fb02 f303 	mul.w	r3, r2, r3
 800f140:	041a      	lsls	r2, r3, #16
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	6859      	ldr	r1, [r3, #4]
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	1acb      	subs	r3, r1, r3
 800f14c:	69f9      	ldr	r1, [r7, #28]
 800f14e:	fb01 f303 	mul.w	r3, r1, r3
 800f152:	3307      	adds	r3, #7
 800f154:	68f9      	ldr	r1, [r7, #12]
 800f156:	6809      	ldr	r1, [r1, #0]
 800f158:	4608      	mov	r0, r1
 800f15a:	6879      	ldr	r1, [r7, #4]
 800f15c:	01c9      	lsls	r1, r1, #7
 800f15e:	4401      	add	r1, r0
 800f160:	3184      	adds	r1, #132	; 0x84
 800f162:	4313      	orrs	r3, r2
 800f164:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	461a      	mov	r2, r3
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	01db      	lsls	r3, r3, #7
 800f170:	4413      	add	r3, r2
 800f172:	3384      	adds	r3, #132	; 0x84
 800f174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	4619      	mov	r1, r3
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	01db      	lsls	r3, r3, #7
 800f180:	440b      	add	r3, r1
 800f182:	3384      	adds	r3, #132	; 0x84
 800f184:	4619      	mov	r1, r3
 800f186:	4b14      	ldr	r3, [pc, #80]	; (800f1d8 <LTDC_SetConfig+0x330>)
 800f188:	4013      	ands	r3, r2
 800f18a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	461a      	mov	r2, r3
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	01db      	lsls	r3, r3, #7
 800f196:	4413      	add	r3, r2
 800f198:	3384      	adds	r3, #132	; 0x84
 800f19a:	461a      	mov	r2, r3
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	01db      	lsls	r3, r3, #7
 800f1ac:	4413      	add	r3, r2
 800f1ae:	3384      	adds	r3, #132	; 0x84
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	68fa      	ldr	r2, [r7, #12]
 800f1b4:	6812      	ldr	r2, [r2, #0]
 800f1b6:	4611      	mov	r1, r2
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	01d2      	lsls	r2, r2, #7
 800f1bc:	440a      	add	r2, r1
 800f1be:	3284      	adds	r2, #132	; 0x84
 800f1c0:	f043 0301 	orr.w	r3, r3, #1
 800f1c4:	6013      	str	r3, [r2, #0]
}
 800f1c6:	bf00      	nop
 800f1c8:	3724      	adds	r7, #36	; 0x24
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	fffff8f8 	.word	0xfffff8f8
 800f1d8:	fffff800 	.word	0xfffff800

0800f1dc <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f1e4:	f7fd ff02 	bl	800cfec <HAL_GetTick>
 800f1e8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d101      	bne.n	800f1f4 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	e03b      	b.n	800f26c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2202      	movs	r2, #2
 800f200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	68da      	ldr	r2, [r3, #12]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f022 0201 	bic.w	r2, r2, #1
 800f212:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f214:	e00f      	b.n	800f236 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800f216:	f7fd fee9 	bl	800cfec <HAL_GetTick>
 800f21a:	4602      	mov	r2, r0
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	1ad3      	subs	r3, r2, r3
 800f220:	2b05      	cmp	r3, #5
 800f222:	d908      	bls.n	800f236 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2240      	movs	r2, #64	; 0x40
 800f228:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2203      	movs	r2, #3
 800f22e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800f232:	2301      	movs	r3, #1
 800f234:	e01a      	b.n	800f26c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	f003 0301 	and.w	r3, r3, #1
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1e8      	bne.n	800f216 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 f894 	bl	800f372 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2200      	movs	r2, #0
 800f25a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2200      	movs	r2, #0
 800f260:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2201      	movs	r2, #1
 800f266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f26a:	2300      	movs	r3, #0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d101      	bne.n	800f286 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800f282:	2301      	movs	r3, #1
 800f284:	e048      	b.n	800f318 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	68da      	ldr	r2, [r3, #12]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f022 0201 	bic.w	r2, r2, #1
 800f294:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	2200      	movs	r2, #0
 800f29c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	221f      	movs	r2, #31
 800f2ec:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2200      	movs	r2, #0
 800f304:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2200      	movs	r2, #0
 800f30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2200      	movs	r2, #0
 800f312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f316:	2300      	movs	r3, #0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d101      	bne.n	800f336 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800f332:	2301      	movs	r3, #1
 800f334:	e017      	b.n	800f366 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	2b02      	cmp	r3, #2
 800f340:	d004      	beq.n	800f34c <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2280      	movs	r2, #128	; 0x80
 800f346:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800f348:	2301      	movs	r3, #1
 800f34a:	e00c      	b.n	800f366 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2204      	movs	r2, #4
 800f350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68da      	ldr	r2, [r3, #12]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f022 0201 	bic.w	r2, r2, #1
 800f362:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800f364:	2300      	movs	r3, #0
}
 800f366:	4618      	mov	r0, r3
 800f368:	370c      	adds	r7, #12
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr

0800f372 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f372:	b480      	push	{r7}
 800f374:	b085      	sub	sp, #20
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	68d9      	ldr	r1, [r3, #12]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	691a      	ldr	r2, [r3, #16]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	430a      	orrs	r2, r1
 800f388:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	695a      	ldr	r2, [r3, #20]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	699b      	ldr	r3, [r3, #24]
 800f392:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f398:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a1b      	ldr	r3, [r3, #32]
 800f39e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f3a4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3aa:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f3b0:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3b6:	3b01      	subs	r3, #1
 800f3b8:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800f3ba:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f3c6:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f3c8:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3d2:	d107      	bne.n	800f3e4 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	691a      	ldr	r2, [r3, #16]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800f3e2:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	da11      	bge.n	800f418 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	695a      	ldr	r2, [r3, #20]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f402:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f408:	425b      	negs	r3, r3
 800f40a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	b292      	uxth	r2, r2
 800f414:	621a      	str	r2, [r3, #32]
 800f416:	e006      	b.n	800f426 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f41c:	461a      	mov	r2, r3
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	b292      	uxth	r2, r2
 800f424:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	da15      	bge.n	800f45a <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	695a      	ldr	r2, [r3, #20]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800f43c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f442:	425b      	negs	r3, r3
 800f444:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	6a19      	ldr	r1, [r3, #32]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	041a      	lsls	r2, r3, #16
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	430a      	orrs	r2, r1
 800f456:	621a      	str	r2, [r3, #32]
 800f458:	e009      	b.n	800f46e <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	6a19      	ldr	r1, [r3, #32]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f464:	041a      	lsls	r2, r3, #16
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	430a      	orrs	r2, r1
 800f46c:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f476:	d006      	beq.n	800f486 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	685a      	ldr	r2, [r3, #4]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	b2d2      	uxtb	r2, r2
 800f482:	629a      	str	r2, [r3, #40]	; 0x28
 800f484:	e003      	b.n	800f48e <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2200      	movs	r2, #0
 800f48c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2200      	movs	r2, #0
 800f494:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f496:	bf00      	nop
 800f498:	3714      	adds	r7, #20
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr
	...

0800f4a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800f4ac:	4b29      	ldr	r3, [pc, #164]	; (800f554 <HAL_PWREx_ConfigSupply+0xb0>)
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	f003 0307 	and.w	r3, r3, #7
 800f4b4:	2b06      	cmp	r3, #6
 800f4b6:	d00a      	beq.n	800f4ce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f4b8:	4b26      	ldr	r3, [pc, #152]	; (800f554 <HAL_PWREx_ConfigSupply+0xb0>)
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d001      	beq.n	800f4ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	e040      	b.n	800f54c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	e03e      	b.n	800f54c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800f4ce:	4b21      	ldr	r3, [pc, #132]	; (800f554 <HAL_PWREx_ConfigSupply+0xb0>)
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800f4d6:	491f      	ldr	r1, [pc, #124]	; (800f554 <HAL_PWREx_ConfigSupply+0xb0>)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800f4de:	f7fd fd85 	bl	800cfec <HAL_GetTick>
 800f4e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f4e4:	e009      	b.n	800f4fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f4e6:	f7fd fd81 	bl	800cfec <HAL_GetTick>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f4f4:	d901      	bls.n	800f4fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	e028      	b.n	800f54c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f4fa:	4b16      	ldr	r3, [pc, #88]	; (800f554 <HAL_PWREx_ConfigSupply+0xb0>)
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f506:	d1ee      	bne.n	800f4e6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2b1e      	cmp	r3, #30
 800f50c:	d008      	beq.n	800f520 <HAL_PWREx_ConfigSupply+0x7c>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2b2e      	cmp	r3, #46	; 0x2e
 800f512:	d005      	beq.n	800f520 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2b1d      	cmp	r3, #29
 800f518:	d002      	beq.n	800f520 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2b2d      	cmp	r3, #45	; 0x2d
 800f51e:	d114      	bne.n	800f54a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800f520:	f7fd fd64 	bl	800cfec <HAL_GetTick>
 800f524:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800f526:	e009      	b.n	800f53c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f528:	f7fd fd60 	bl	800cfec <HAL_GetTick>
 800f52c:	4602      	mov	r2, r0
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f536:	d901      	bls.n	800f53c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800f538:	2301      	movs	r3, #1
 800f53a:	e007      	b.n	800f54c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800f53c:	4b05      	ldr	r3, [pc, #20]	; (800f554 <HAL_PWREx_ConfigSupply+0xb0>)
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f548:	d1ee      	bne.n	800f528 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800f54a:	2300      	movs	r3, #0
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3710      	adds	r7, #16
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	58024800 	.word	0x58024800

0800f558 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af02      	add	r7, sp, #8
 800f55e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f560:	f7fd fd44 	bl	800cfec <HAL_GetTick>
 800f564:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d101      	bne.n	800f570 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f56c:	2301      	movs	r3, #1
 800f56e:	e05f      	b.n	800f630 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f576:	b2db      	uxtb	r3, r3
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d107      	bne.n	800f58c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f7f1 fcb9 	bl	8000ef4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f582:	f241 3188 	movw	r1, #5000	; 0x1388
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 fcca 	bl	800ff20 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	689b      	ldr	r3, [r3, #8]
 800f59a:	3b01      	subs	r3, #1
 800f59c:	021a      	lsls	r2, r3, #8
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	430a      	orrs	r2, r1
 800f5a4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	2120      	movs	r1, #32
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 fcf5 	bl	800ffa2 <QSPI_WaitFlagStateUntilTimeout>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f5bc:	7afb      	ldrb	r3, [r7, #11]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d135      	bne.n	800f62e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	4b1b      	ldr	r3, [pc, #108]	; (800f638 <HAL_QSPI_Init+0xe0>)
 800f5ca:	4013      	ands	r3, r2
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	6852      	ldr	r2, [r2, #4]
 800f5d0:	0611      	lsls	r1, r2, #24
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	68d2      	ldr	r2, [r2, #12]
 800f5d6:	4311      	orrs	r1, r2
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	69d2      	ldr	r2, [r2, #28]
 800f5dc:	4311      	orrs	r1, r2
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	6a12      	ldr	r2, [r2, #32]
 800f5e2:	4311      	orrs	r1, r2
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	6812      	ldr	r2, [r2, #0]
 800f5e8:	430b      	orrs	r3, r1
 800f5ea:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	685a      	ldr	r2, [r3, #4]
 800f5f2:	4b12      	ldr	r3, [pc, #72]	; (800f63c <HAL_QSPI_Init+0xe4>)
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	6912      	ldr	r2, [r2, #16]
 800f5fa:	0411      	lsls	r1, r2, #16
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	6952      	ldr	r2, [r2, #20]
 800f600:	4311      	orrs	r1, r2
 800f602:	687a      	ldr	r2, [r7, #4]
 800f604:	6992      	ldr	r2, [r2, #24]
 800f606:	4311      	orrs	r1, r2
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	6812      	ldr	r2, [r2, #0]
 800f60c:	430b      	orrs	r3, r1
 800f60e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f042 0201 	orr.w	r2, r2, #1
 800f61e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2200      	movs	r2, #0
 800f624:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2201      	movs	r2, #1
 800f62a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800f62e:	7afb      	ldrb	r3, [r7, #11]
}
 800f630:	4618      	mov	r0, r3
 800f632:	3710      	adds	r7, #16
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	00ffff2f 	.word	0x00ffff2f
 800f63c:	ffe0f8fe 	.word	0xffe0f8fe

0800f640 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b086      	sub	sp, #24
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	f003 0304 	and.w	r3, r3, #4
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d064      	beq.n	800f72c <HAL_QSPI_IRQHandler+0xec>
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d05f      	beq.n	800f72c <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	3320      	adds	r3, #32
 800f672:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f67a:	b2db      	uxtb	r3, r3
 800f67c:	2b12      	cmp	r3, #18
 800f67e:	d125      	bne.n	800f6cc <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f680:	e01c      	b.n	800f6bc <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f686:	2b00      	cmp	r3, #0
 800f688:	d00f      	beq.n	800f6aa <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f68e:	781a      	ldrb	r2, [r3, #0]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f698:	1c5a      	adds	r2, r3, #1
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a2:	1e5a      	subs	r2, r3, #1
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	62da      	str	r2, [r3, #44]	; 0x2c
 800f6a8:	e008      	b.n	800f6bc <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f6b8:	601a      	str	r2, [r3, #0]
          break;
 800f6ba:	e033      	b.n	800f724 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	689b      	ldr	r3, [r3, #8]
 800f6c2:	f003 0304 	and.w	r3, r3, #4
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d1db      	bne.n	800f682 <HAL_QSPI_IRQHandler+0x42>
 800f6ca:	e02b      	b.n	800f724 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	2b22      	cmp	r3, #34	; 0x22
 800f6d6:	d125      	bne.n	800f724 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f6d8:	e01d      	b.n	800f716 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d010      	beq.n	800f704 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6e6:	68fa      	ldr	r2, [r7, #12]
 800f6e8:	7812      	ldrb	r2, [r2, #0]
 800f6ea:	b2d2      	uxtb	r2, r2
 800f6ec:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6f2:	1c5a      	adds	r2, r3, #1
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6fc:	1e5a      	subs	r2, r3, #1
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	639a      	str	r2, [r3, #56]	; 0x38
 800f702:	e008      	b.n	800f716 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f712:	601a      	str	r2, [r3, #0]
          break;
 800f714:	e006      	b.n	800f724 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	689b      	ldr	r3, [r3, #8]
 800f71c:	f003 0304 	and.w	r3, r3, #4
 800f720:	2b00      	cmp	r3, #0
 800f722:	d1da      	bne.n	800f6da <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 fbdd 	bl	800fee4 <HAL_QSPI_FifoThresholdCallback>
 800f72a:	e13c      	b.n	800f9a6 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f003 0302 	and.w	r3, r3, #2
 800f732:	2b00      	cmp	r3, #0
 800f734:	f000 80b0 	beq.w	800f898 <HAL_QSPI_IRQHandler+0x258>
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f73e:	2b00      	cmp	r3, #0
 800f740:	f000 80aa 	beq.w	800f898 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2202      	movs	r2, #2
 800f74a:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800f75a:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f762:	b2db      	uxtb	r3, r3
 800f764:	2b12      	cmp	r3, #18
 800f766:	d120      	bne.n	800f7aa <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	f003 0304 	and.w	r3, r3, #4
 800f772:	2b00      	cmp	r3, #0
 800f774:	d011      	beq.n	800f79a <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	681a      	ldr	r2, [r3, #0]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	f022 0204 	bic.w	r2, r2, #4
 800f784:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	68da      	ldr	r2, [r3, #12]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f022 0201 	bic.w	r2, r2, #1
 800f798:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2201      	movs	r2, #1
 800f79e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f000 fb94 	bl	800fed0 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f7a8:	e0fa      	b.n	800f9a0 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f7b0:	b2db      	uxtb	r3, r3
 800f7b2:	2b22      	cmp	r3, #34	; 0x22
 800f7b4:	d143      	bne.n	800f83e <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f003 0304 	and.w	r3, r3, #4
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d012      	beq.n	800f7ea <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	f022 0204 	bic.w	r2, r2, #4
 800f7d2:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	68da      	ldr	r2, [r3, #12]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f022 0201 	bic.w	r2, r2, #1
 800f7e6:	60da      	str	r2, [r3, #12]
 800f7e8:	e021      	b.n	800f82e <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	3320      	adds	r3, #32
 800f7f0:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800f7f2:	e013      	b.n	800f81c <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d017      	beq.n	800f82c <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f800:	68fa      	ldr	r2, [r7, #12]
 800f802:	7812      	ldrb	r2, [r2, #0]
 800f804:	b2d2      	uxtb	r2, r2
 800f806:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f80c:	1c5a      	adds	r2, r3, #1
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f816:	1e5a      	subs	r2, r3, #1
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	689b      	ldr	r3, [r3, #8]
 800f822:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800f826:	2b00      	cmp	r3, #0
 800f828:	d1e4      	bne.n	800f7f4 <HAL_QSPI_IRQHandler+0x1b4>
 800f82a:	e000      	b.n	800f82e <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800f82c:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2201      	movs	r2, #1
 800f832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 fb40 	bl	800febc <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f83c:	e0b0      	b.n	800f9a0 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f844:	b2db      	uxtb	r3, r3
 800f846:	2b02      	cmp	r3, #2
 800f848:	d107      	bne.n	800f85a <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2201      	movs	r2, #1
 800f84e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 fb28 	bl	800fea8 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f858:	e0a2      	b.n	800f9a0 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f860:	b2db      	uxtb	r3, r3
 800f862:	2b08      	cmp	r3, #8
 800f864:	f040 809c 	bne.w	800f9a0 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	695a      	ldr	r2, [r3, #20]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800f876:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2201      	movs	r2, #1
 800f87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f884:	2b00      	cmp	r3, #0
 800f886:	d103      	bne.n	800f890 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 fb03 	bl	800fe94 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f88e:	e087      	b.n	800f9a0 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 faf5 	bl	800fe80 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f896:	e083      	b.n	800f9a0 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	f003 0308 	and.w	r3, r3, #8
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d01f      	beq.n	800f8e2 <HAL_QSPI_IRQHandler+0x2a2>
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d01a      	beq.n	800f8e2 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	2208      	movs	r2, #8
 800f8b2:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d00b      	beq.n	800f8da <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800f8d0:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f000 fb0c 	bl	800fef8 <HAL_QSPI_StatusMatchCallback>
 800f8e0:	e061      	b.n	800f9a6 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	f003 0301 	and.w	r3, r3, #1
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d047      	beq.n	800f97c <HAL_QSPI_IRQHandler+0x33c>
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d042      	beq.n	800f97c <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	681a      	ldr	r2, [r3, #0]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800f90c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f912:	f043 0202 	orr.w	r2, r3, #2
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f003 0304 	and.w	r3, r3, #4
 800f924:	2b00      	cmp	r3, #0
 800f926:	d021      	beq.n	800f96c <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f022 0204 	bic.w	r2, r2, #4
 800f936:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f93c:	4a1c      	ldr	r2, [pc, #112]	; (800f9b0 <HAL_QSPI_IRQHandler+0x370>)
 800f93e:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f944:	4618      	mov	r0, r3
 800f946:	f7ff fced 	bl	800f324 <HAL_MDMA_Abort_IT>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d029      	beq.n	800f9a4 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f954:	f043 0204 	orr.w	r2, r3, #4
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2201      	movs	r2, #1
 800f960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f000 fa8b 	bl	800fe80 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f96a:	e01b      	b.n	800f9a4 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2201      	movs	r2, #1
 800f970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f000 fa83 	bl	800fe80 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f97a:	e013      	b.n	800f9a4 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	f003 0310 	and.w	r3, r3, #16
 800f982:	2b00      	cmp	r3, #0
 800f984:	d00f      	beq.n	800f9a6 <HAL_QSPI_IRQHandler+0x366>
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d00a      	beq.n	800f9a6 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	2210      	movs	r2, #16
 800f996:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 fab7 	bl	800ff0c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800f99e:	e002      	b.n	800f9a6 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f9a0:	bf00      	nop
 800f9a2:	e000      	b.n	800f9a6 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f9a4:	bf00      	nop
}
 800f9a6:	bf00      	nop
 800f9a8:	3718      	adds	r7, #24
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	0800ff3d 	.word	0x0800ff3d

0800f9b4 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b088      	sub	sp, #32
 800f9b8:	af02      	add	r7, sp, #8
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f9c0:	f7fd fb14 	bl	800cfec <HAL_GetTick>
 800f9c4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d101      	bne.n	800f9d6 <HAL_QSPI_Command+0x22>
 800f9d2:	2302      	movs	r3, #2
 800f9d4:	e048      	b.n	800fa68 <HAL_QSPI_Command+0xb4>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	d137      	bne.n	800fa5a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2202      	movs	r2, #2
 800f9f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	9300      	str	r3, [sp, #0]
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	2120      	movs	r1, #32
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f000 facd 	bl	800ffa2 <QSPI_WaitFlagStateUntilTimeout>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800fa0c:	7dfb      	ldrb	r3, [r7, #23]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d125      	bne.n	800fa5e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800fa12:	2200      	movs	r2, #0
 800fa14:	68b9      	ldr	r1, [r7, #8]
 800fa16:	68f8      	ldr	r0, [r7, #12]
 800fa18:	f000 fafa 	bl	8010010 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d115      	bne.n	800fa50 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	9300      	str	r3, [sp, #0]
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	2102      	movs	r1, #2
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f000 fab7 	bl	800ffa2 <QSPI_WaitFlagStateUntilTimeout>
 800fa34:	4603      	mov	r3, r0
 800fa36:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800fa38:	7dfb      	ldrb	r3, [r7, #23]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d10f      	bne.n	800fa5e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	2202      	movs	r2, #2
 800fa44:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2201      	movs	r2, #1
 800fa4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fa4e:	e006      	b.n	800fa5e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2201      	movs	r2, #1
 800fa54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fa58:	e001      	b.n	800fa5e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800fa5a:	2302      	movs	r3, #2
 800fa5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2200      	movs	r2, #0
 800fa62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800fa66:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3718      	adds	r7, #24
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b08a      	sub	sp, #40	; 0x28
 800fa74:	af02      	add	r7, sp, #8
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	60b9      	str	r1, [r7, #8]
 800fa7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800fa80:	f7fd fab4 	bl	800cfec <HAL_GetTick>
 800fa84:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	3320      	adds	r3, #32
 800fa8c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d101      	bne.n	800fa9e <HAL_QSPI_Transmit+0x2e>
 800fa9a:	2302      	movs	r3, #2
 800fa9c:	e076      	b.n	800fb8c <HAL_QSPI_Transmit+0x11c>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2201      	movs	r2, #1
 800faa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800faac:	b2db      	uxtb	r3, r3
 800faae:	2b01      	cmp	r3, #1
 800fab0:	d165      	bne.n	800fb7e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2200      	movs	r2, #0
 800fab6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d056      	beq.n	800fb6c <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2212      	movs	r2, #18
 800fac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	691b      	ldr	r3, [r3, #16]
 800facc:	1c5a      	adds	r2, r3, #1
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	691b      	ldr	r3, [r3, #16]
 800fad8:	1c5a      	adds	r2, r3, #1
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	68ba      	ldr	r2, [r7, #8]
 800fae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	695a      	ldr	r2, [r3, #20]
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800faf2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800faf4:	e01b      	b.n	800fb2e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	2201      	movs	r2, #1
 800fafe:	2104      	movs	r1, #4
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f000 fa4e 	bl	800ffa2 <QSPI_WaitFlagStateUntilTimeout>
 800fb06:	4603      	mov	r3, r0
 800fb08:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800fb0a:	7ffb      	ldrb	r3, [r7, #31]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d113      	bne.n	800fb38 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb14:	781a      	ldrb	r2, [r3, #0]
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb1e:	1c5a      	adds	r2, r3, #1
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb28:	1e5a      	subs	r2, r3, #1
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1df      	bne.n	800faf6 <HAL_QSPI_Transmit+0x86>
 800fb36:	e000      	b.n	800fb3a <HAL_QSPI_Transmit+0xca>
          break;
 800fb38:	bf00      	nop
      }

      if (status == HAL_OK)
 800fb3a:	7ffb      	ldrb	r3, [r7, #31]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d110      	bne.n	800fb62 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	9300      	str	r3, [sp, #0]
 800fb44:	69bb      	ldr	r3, [r7, #24]
 800fb46:	2201      	movs	r2, #1
 800fb48:	2102      	movs	r1, #2
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f000 fa29 	bl	800ffa2 <QSPI_WaitFlagStateUntilTimeout>
 800fb50:	4603      	mov	r3, r0
 800fb52:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800fb54:	7ffb      	ldrb	r3, [r7, #31]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d103      	bne.n	800fb62 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2202      	movs	r2, #2
 800fb60:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2201      	movs	r2, #1
 800fb66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fb6a:	e00a      	b.n	800fb82 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb70:	f043 0208 	orr.w	r2, r3, #8
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	77fb      	strb	r3, [r7, #31]
 800fb7c:	e001      	b.n	800fb82 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800fb7e:	2302      	movs	r3, #2
 800fb80:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2200      	movs	r2, #0
 800fb86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800fb8a:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3720      	adds	r7, #32
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b08a      	sub	sp, #40	; 0x28
 800fb98:	af02      	add	r7, sp, #8
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800fba4:	f7fd fa22 	bl	800cfec <HAL_GetTick>
 800fba8:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	699b      	ldr	r3, [r3, #24]
 800fbb0:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	3320      	adds	r3, #32
 800fbb8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d101      	bne.n	800fbca <HAL_QSPI_Receive+0x36>
 800fbc6:	2302      	movs	r3, #2
 800fbc8:	e07d      	b.n	800fcc6 <HAL_QSPI_Receive+0x132>
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	2b01      	cmp	r3, #1
 800fbdc:	d16c      	bne.n	800fcb8 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d05d      	beq.n	800fca6 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2222      	movs	r2, #34	; 0x22
 800fbee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	691b      	ldr	r3, [r3, #16]
 800fbf8:	1c5a      	adds	r2, r3, #1
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	691b      	ldr	r3, [r3, #16]
 800fc04:	1c5a      	adds	r2, r3, #1
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	68ba      	ldr	r2, [r7, #8]
 800fc0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	695b      	ldr	r3, [r3, #20]
 800fc16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800fc22:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	697a      	ldr	r2, [r7, #20]
 800fc2a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800fc2c:	e01c      	b.n	800fc68 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	9300      	str	r3, [sp, #0]
 800fc32:	69bb      	ldr	r3, [r7, #24]
 800fc34:	2201      	movs	r2, #1
 800fc36:	2106      	movs	r1, #6
 800fc38:	68f8      	ldr	r0, [r7, #12]
 800fc3a:	f000 f9b2 	bl	800ffa2 <QSPI_WaitFlagStateUntilTimeout>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800fc42:	7ffb      	ldrb	r3, [r7, #31]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d114      	bne.n	800fc72 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	7812      	ldrb	r2, [r2, #0]
 800fc50:	b2d2      	uxtb	r2, r2
 800fc52:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc58:	1c5a      	adds	r2, r3, #1
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc62:	1e5a      	subs	r2, r3, #1
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1de      	bne.n	800fc2e <HAL_QSPI_Receive+0x9a>
 800fc70:	e000      	b.n	800fc74 <HAL_QSPI_Receive+0xe0>
          break;
 800fc72:	bf00      	nop
      }

      if (status == HAL_OK)
 800fc74:	7ffb      	ldrb	r3, [r7, #31]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d110      	bne.n	800fc9c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	9300      	str	r3, [sp, #0]
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	2201      	movs	r2, #1
 800fc82:	2102      	movs	r1, #2
 800fc84:	68f8      	ldr	r0, [r7, #12]
 800fc86:	f000 f98c 	bl	800ffa2 <QSPI_WaitFlagStateUntilTimeout>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800fc8e:	7ffb      	ldrb	r3, [r7, #31]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d103      	bne.n	800fc9c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2202      	movs	r2, #2
 800fc9a:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fca4:	e00a      	b.n	800fcbc <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcaa:	f043 0208 	orr.w	r2, r3, #8
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	77fb      	strb	r3, [r7, #31]
 800fcb6:	e001      	b.n	800fcbc <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800fcb8:	2302      	movs	r3, #2
 800fcba:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800fcc4:	7ffb      	ldrb	r3, [r7, #31]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3720      	adds	r7, #32
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b088      	sub	sp, #32
 800fcd2:	af02      	add	r7, sp, #8
 800fcd4:	60f8      	str	r0, [r7, #12]
 800fcd6:	60b9      	str	r1, [r7, #8]
 800fcd8:	607a      	str	r2, [r7, #4]
 800fcda:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800fcdc:	f7fd f986 	bl	800cfec <HAL_GetTick>
 800fce0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fce8:	b2db      	uxtb	r3, r3
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d101      	bne.n	800fcf2 <HAL_QSPI_AutoPolling+0x24>
 800fcee:	2302      	movs	r3, #2
 800fcf0:	e060      	b.n	800fdb4 <HAL_QSPI_AutoPolling+0xe6>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd00:	b2db      	uxtb	r3, r3
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d14f      	bne.n	800fda6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2242      	movs	r2, #66	; 0x42
 800fd10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	693b      	ldr	r3, [r7, #16]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	2120      	movs	r1, #32
 800fd1e:	68f8      	ldr	r0, [r7, #12]
 800fd20:	f000 f93f 	bl	800ffa2 <QSPI_WaitFlagStateUntilTimeout>
 800fd24:	4603      	mov	r3, r0
 800fd26:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800fd28:	7dfb      	ldrb	r3, [r7, #23]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d13d      	bne.n	800fdaa <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	6812      	ldr	r2, [r2, #0]
 800fd36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	6852      	ldr	r2, [r2, #4]
 800fd40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	6892      	ldr	r2, [r2, #8]
 800fd4a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	691b      	ldr	r3, [r3, #16]
 800fd5a:	431a      	orrs	r2, r3
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800fd64:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	68da      	ldr	r2, [r3, #12]
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800fd6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fd72:	68b9      	ldr	r1, [r7, #8]
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	f000 f94b 	bl	8010010 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	9300      	str	r3, [sp, #0]
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	2201      	movs	r2, #1
 800fd82:	2108      	movs	r1, #8
 800fd84:	68f8      	ldr	r0, [r7, #12]
 800fd86:	f000 f90c 	bl	800ffa2 <QSPI_WaitFlagStateUntilTimeout>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800fd8e:	7dfb      	ldrb	r3, [r7, #23]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d10a      	bne.n	800fdaa <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	2208      	movs	r2, #8
 800fd9a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2201      	movs	r2, #1
 800fda0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fda4:	e001      	b.n	800fdaa <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800fda6:	2302      	movs	r3, #2
 800fda8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	2200      	movs	r2, #0
 800fdae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800fdb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3718      	adds	r7, #24
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b088      	sub	sp, #32
 800fdc0:	af02      	add	r7, sp, #8
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800fdc8:	f7fd f910 	bl	800cfec <HAL_GetTick>
 800fdcc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d101      	bne.n	800fdde <HAL_QSPI_MemoryMapped+0x22>
 800fdda:	2302      	movs	r3, #2
 800fddc:	e04c      	b.n	800fe78 <HAL_QSPI_MemoryMapped+0xbc>
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2201      	movs	r2, #1
 800fde2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fdec:	b2db      	uxtb	r3, r3
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	d13b      	bne.n	800fe6a <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	2282      	movs	r2, #130	; 0x82
 800fdfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe04:	9300      	str	r3, [sp, #0]
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	2120      	movs	r1, #32
 800fe0c:	68f8      	ldr	r0, [r7, #12]
 800fe0e:	f000 f8c8 	bl	800ffa2 <QSPI_WaitFlagStateUntilTimeout>
 800fe12:	4603      	mov	r3, r0
 800fe14:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800fe16:	7dfb      	ldrb	r3, [r7, #23]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d128      	bne.n	800fe6e <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f023 0108 	bic.w	r1, r3, #8
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	685a      	ldr	r2, [r3, #4]
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	430a      	orrs	r2, r1
 800fe30:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	2b08      	cmp	r3, #8
 800fe38:	d110      	bne.n	800fe5c <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	6812      	ldr	r2, [r2, #0]
 800fe42:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2210      	movs	r2, #16
 800fe4a:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800fe5a:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800fe5c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800fe60:	68b9      	ldr	r1, [r7, #8]
 800fe62:	68f8      	ldr	r0, [r7, #12]
 800fe64:	f000 f8d4 	bl	8010010 <QSPI_Config>
 800fe68:	e001      	b.n	800fe6e <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800fe6a:	2302      	movs	r3, #2
 800fe6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2200      	movs	r2, #0
 800fe72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800fe76:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3718      	adds	r7, #24
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800fe88:	bf00      	nop
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800fe9c:	bf00      	nop
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr

0800fea8 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800feb0:	bf00      	nop
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800fec4:	bf00      	nop
 800fec6:	370c      	adds	r7, #12
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr

0800fed0 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800fed8:	bf00      	nop
 800feda:	370c      	adds	r7, #12
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800feec:	bf00      	nop
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr

0800fef8 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800ff00:	bf00      	nop
 800ff02:	370c      	adds	r7, #12
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr

0800ff0c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800ff14:	bf00      	nop
 800ff16:	370c      	adds	r7, #12
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	683a      	ldr	r2, [r7, #0]
 800ff2e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ff30:	bf00      	nop
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff48:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2200      	movs	r2, #0
 800ff54:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff5c:	b2db      	uxtb	r3, r3
 800ff5e:	2b08      	cmp	r3, #8
 800ff60:	d114      	bne.n	800ff8c <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2202      	movs	r2, #2
 800ff68:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ff78:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	f042 0202 	orr.w	r2, r2, #2
 800ff88:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800ff8a:	e006      	b.n	800ff9a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2201      	movs	r2, #1
 800ff90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800ff94:	68f8      	ldr	r0, [r7, #12]
 800ff96:	f7ff ff73 	bl	800fe80 <HAL_QSPI_ErrorCallback>
}
 800ff9a:	bf00      	nop
 800ff9c:	3710      	adds	r7, #16
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}

0800ffa2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ffa2:	b580      	push	{r7, lr}
 800ffa4:	b084      	sub	sp, #16
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	60f8      	str	r0, [r7, #12]
 800ffaa:	60b9      	str	r1, [r7, #8]
 800ffac:	603b      	str	r3, [r7, #0]
 800ffae:	4613      	mov	r3, r2
 800ffb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ffb2:	e01a      	b.n	800ffea <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ffb4:	69bb      	ldr	r3, [r7, #24]
 800ffb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffba:	d016      	beq.n	800ffea <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ffbc:	f7fd f816 	bl	800cfec <HAL_GetTick>
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	1ad3      	subs	r3, r2, r3
 800ffc6:	69ba      	ldr	r2, [r7, #24]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d302      	bcc.n	800ffd2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d10b      	bne.n	800ffea <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2204      	movs	r2, #4
 800ffd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffde:	f043 0201 	orr.w	r2, r3, #1
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	e00e      	b.n	8010008 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	689a      	ldr	r2, [r3, #8]
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	4013      	ands	r3, r2
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	bf14      	ite	ne
 800fff8:	2301      	movne	r3, #1
 800fffa:	2300      	moveq	r3, #0
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	461a      	mov	r2, r3
 8010000:	79fb      	ldrb	r3, [r7, #7]
 8010002:	429a      	cmp	r2, r3
 8010004:	d1d6      	bne.n	800ffb4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010006:	2300      	movs	r3, #0
}
 8010008:	4618      	mov	r0, r3
 801000a:	3710      	adds	r7, #16
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010020:	2b00      	cmp	r3, #0
 8010022:	d009      	beq.n	8010038 <QSPI_Config+0x28>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801002a:	d005      	beq.n	8010038 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	3a01      	subs	r2, #1
 8010036:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	699b      	ldr	r3, [r3, #24]
 801003c:	2b00      	cmp	r3, #0
 801003e:	f000 80b9 	beq.w	80101b4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	6a1b      	ldr	r3, [r3, #32]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d05f      	beq.n	801010a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	68ba      	ldr	r2, [r7, #8]
 8010050:	6892      	ldr	r2, [r2, #8]
 8010052:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	69db      	ldr	r3, [r3, #28]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d031      	beq.n	80100c0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010064:	431a      	orrs	r2, r3
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801006a:	431a      	orrs	r2, r3
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010070:	431a      	orrs	r2, r3
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	695b      	ldr	r3, [r3, #20]
 8010076:	049b      	lsls	r3, r3, #18
 8010078:	431a      	orrs	r2, r3
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	691b      	ldr	r3, [r3, #16]
 801007e:	431a      	orrs	r2, r3
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	6a1b      	ldr	r3, [r3, #32]
 8010084:	431a      	orrs	r2, r3
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	68db      	ldr	r3, [r3, #12]
 801008a:	431a      	orrs	r2, r3
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	69db      	ldr	r3, [r3, #28]
 8010090:	431a      	orrs	r2, r3
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	699b      	ldr	r3, [r3, #24]
 8010096:	431a      	orrs	r2, r3
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	ea42 0103 	orr.w	r1, r2, r3
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	430a      	orrs	r2, r1
 80100a8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80100b0:	f000 812e 	beq.w	8010310 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	68ba      	ldr	r2, [r7, #8]
 80100ba:	6852      	ldr	r2, [r2, #4]
 80100bc:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80100be:	e127      	b.n	8010310 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100c8:	431a      	orrs	r2, r3
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100ce:	431a      	orrs	r2, r3
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d4:	431a      	orrs	r2, r3
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	695b      	ldr	r3, [r3, #20]
 80100da:	049b      	lsls	r3, r3, #18
 80100dc:	431a      	orrs	r2, r3
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	691b      	ldr	r3, [r3, #16]
 80100e2:	431a      	orrs	r2, r3
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	6a1b      	ldr	r3, [r3, #32]
 80100e8:	431a      	orrs	r2, r3
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	69db      	ldr	r3, [r3, #28]
 80100ee:	431a      	orrs	r2, r3
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	699b      	ldr	r3, [r3, #24]
 80100f4:	431a      	orrs	r2, r3
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	ea42 0103 	orr.w	r1, r2, r3
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	430a      	orrs	r2, r1
 8010106:	615a      	str	r2, [r3, #20]
}
 8010108:	e102      	b.n	8010310 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	69db      	ldr	r3, [r3, #28]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d02e      	beq.n	8010170 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801011a:	431a      	orrs	r2, r3
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010120:	431a      	orrs	r2, r3
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010126:	431a      	orrs	r2, r3
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	695b      	ldr	r3, [r3, #20]
 801012c:	049b      	lsls	r3, r3, #18
 801012e:	431a      	orrs	r2, r3
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	6a1b      	ldr	r3, [r3, #32]
 8010134:	431a      	orrs	r2, r3
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	68db      	ldr	r3, [r3, #12]
 801013a:	431a      	orrs	r2, r3
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	69db      	ldr	r3, [r3, #28]
 8010140:	431a      	orrs	r2, r3
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	699b      	ldr	r3, [r3, #24]
 8010146:	431a      	orrs	r2, r3
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	ea42 0103 	orr.w	r1, r2, r3
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	430a      	orrs	r2, r1
 8010158:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010160:	f000 80d6 	beq.w	8010310 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	68ba      	ldr	r2, [r7, #8]
 801016a:	6852      	ldr	r2, [r2, #4]
 801016c:	619a      	str	r2, [r3, #24]
}
 801016e:	e0cf      	b.n	8010310 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010178:	431a      	orrs	r2, r3
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801017e:	431a      	orrs	r2, r3
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010184:	431a      	orrs	r2, r3
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	695b      	ldr	r3, [r3, #20]
 801018a:	049b      	lsls	r3, r3, #18
 801018c:	431a      	orrs	r2, r3
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	6a1b      	ldr	r3, [r3, #32]
 8010192:	431a      	orrs	r2, r3
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	69db      	ldr	r3, [r3, #28]
 8010198:	431a      	orrs	r2, r3
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	699b      	ldr	r3, [r3, #24]
 801019e:	431a      	orrs	r2, r3
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	ea42 0103 	orr.w	r1, r2, r3
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	430a      	orrs	r2, r1
 80101b0:	615a      	str	r2, [r3, #20]
}
 80101b2:	e0ad      	b.n	8010310 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	6a1b      	ldr	r3, [r3, #32]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d058      	beq.n	801026e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	68ba      	ldr	r2, [r7, #8]
 80101c2:	6892      	ldr	r2, [r2, #8]
 80101c4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	69db      	ldr	r3, [r3, #28]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d02d      	beq.n	801022a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101d6:	431a      	orrs	r2, r3
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101dc:	431a      	orrs	r2, r3
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e2:	431a      	orrs	r2, r3
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	695b      	ldr	r3, [r3, #20]
 80101e8:	049b      	lsls	r3, r3, #18
 80101ea:	431a      	orrs	r2, r3
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	691b      	ldr	r3, [r3, #16]
 80101f0:	431a      	orrs	r2, r3
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	6a1b      	ldr	r3, [r3, #32]
 80101f6:	431a      	orrs	r2, r3
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	68db      	ldr	r3, [r3, #12]
 80101fc:	431a      	orrs	r2, r3
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	69db      	ldr	r3, [r3, #28]
 8010202:	431a      	orrs	r2, r3
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	699b      	ldr	r3, [r3, #24]
 8010208:	ea42 0103 	orr.w	r1, r2, r3
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	430a      	orrs	r2, r1
 8010214:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801021c:	d078      	beq.n	8010310 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	68ba      	ldr	r2, [r7, #8]
 8010224:	6852      	ldr	r2, [r2, #4]
 8010226:	619a      	str	r2, [r3, #24]
}
 8010228:	e072      	b.n	8010310 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010232:	431a      	orrs	r2, r3
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010238:	431a      	orrs	r2, r3
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801023e:	431a      	orrs	r2, r3
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	695b      	ldr	r3, [r3, #20]
 8010244:	049b      	lsls	r3, r3, #18
 8010246:	431a      	orrs	r2, r3
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	691b      	ldr	r3, [r3, #16]
 801024c:	431a      	orrs	r2, r3
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	6a1b      	ldr	r3, [r3, #32]
 8010252:	431a      	orrs	r2, r3
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	69db      	ldr	r3, [r3, #28]
 8010258:	431a      	orrs	r2, r3
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	699b      	ldr	r3, [r3, #24]
 801025e:	ea42 0103 	orr.w	r1, r2, r3
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	430a      	orrs	r2, r1
 801026a:	615a      	str	r2, [r3, #20]
}
 801026c:	e050      	b.n	8010310 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	69db      	ldr	r3, [r3, #28]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d02a      	beq.n	80102cc <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801027e:	431a      	orrs	r2, r3
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010284:	431a      	orrs	r2, r3
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801028a:	431a      	orrs	r2, r3
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	695b      	ldr	r3, [r3, #20]
 8010290:	049b      	lsls	r3, r3, #18
 8010292:	431a      	orrs	r2, r3
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	6a1b      	ldr	r3, [r3, #32]
 8010298:	431a      	orrs	r2, r3
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	431a      	orrs	r2, r3
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	69db      	ldr	r3, [r3, #28]
 80102a4:	431a      	orrs	r2, r3
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	699b      	ldr	r3, [r3, #24]
 80102aa:	ea42 0103 	orr.w	r1, r2, r3
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	430a      	orrs	r2, r1
 80102b6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80102be:	d027      	beq.n	8010310 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	68ba      	ldr	r2, [r7, #8]
 80102c6:	6852      	ldr	r2, [r2, #4]
 80102c8:	619a      	str	r2, [r3, #24]
}
 80102ca:	e021      	b.n	8010310 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d01d      	beq.n	8010310 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102dc:	431a      	orrs	r2, r3
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102e2:	431a      	orrs	r2, r3
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e8:	431a      	orrs	r2, r3
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	695b      	ldr	r3, [r3, #20]
 80102ee:	049b      	lsls	r3, r3, #18
 80102f0:	431a      	orrs	r2, r3
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	6a1b      	ldr	r3, [r3, #32]
 80102f6:	431a      	orrs	r2, r3
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	69db      	ldr	r3, [r3, #28]
 80102fc:	431a      	orrs	r2, r3
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	699b      	ldr	r3, [r3, #24]
 8010302:	ea42 0103 	orr.w	r1, r2, r3
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	430a      	orrs	r2, r1
 801030e:	615a      	str	r2, [r3, #20]
}
 8010310:	bf00      	nop
 8010312:	3714      	adds	r7, #20
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr

0801031c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b08c      	sub	sp, #48	; 0x30
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d102      	bne.n	8010330 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801032a:	2301      	movs	r3, #1
 801032c:	f000 bc1c 	b.w	8010b68 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f003 0301 	and.w	r3, r3, #1
 8010338:	2b00      	cmp	r3, #0
 801033a:	f000 8087 	beq.w	801044c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801033e:	4b9e      	ldr	r3, [pc, #632]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 8010340:	691b      	ldr	r3, [r3, #16]
 8010342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010346:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010348:	4b9b      	ldr	r3, [pc, #620]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801034a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801034c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801034e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010350:	2b10      	cmp	r3, #16
 8010352:	d007      	beq.n	8010364 <HAL_RCC_OscConfig+0x48>
 8010354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010356:	2b18      	cmp	r3, #24
 8010358:	d110      	bne.n	801037c <HAL_RCC_OscConfig+0x60>
 801035a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035c:	f003 0303 	and.w	r3, r3, #3
 8010360:	2b02      	cmp	r3, #2
 8010362:	d10b      	bne.n	801037c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010364:	4b94      	ldr	r3, [pc, #592]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801036c:	2b00      	cmp	r3, #0
 801036e:	d06c      	beq.n	801044a <HAL_RCC_OscConfig+0x12e>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d168      	bne.n	801044a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8010378:	2301      	movs	r3, #1
 801037a:	e3f5      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010384:	d106      	bne.n	8010394 <HAL_RCC_OscConfig+0x78>
 8010386:	4b8c      	ldr	r3, [pc, #560]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	4a8b      	ldr	r2, [pc, #556]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801038c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010390:	6013      	str	r3, [r2, #0]
 8010392:	e02e      	b.n	80103f2 <HAL_RCC_OscConfig+0xd6>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d10c      	bne.n	80103b6 <HAL_RCC_OscConfig+0x9a>
 801039c:	4b86      	ldr	r3, [pc, #536]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4a85      	ldr	r2, [pc, #532]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80103a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80103a6:	6013      	str	r3, [r2, #0]
 80103a8:	4b83      	ldr	r3, [pc, #524]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	4a82      	ldr	r2, [pc, #520]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80103ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80103b2:	6013      	str	r3, [r2, #0]
 80103b4:	e01d      	b.n	80103f2 <HAL_RCC_OscConfig+0xd6>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80103be:	d10c      	bne.n	80103da <HAL_RCC_OscConfig+0xbe>
 80103c0:	4b7d      	ldr	r3, [pc, #500]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	4a7c      	ldr	r2, [pc, #496]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80103c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80103ca:	6013      	str	r3, [r2, #0]
 80103cc:	4b7a      	ldr	r3, [pc, #488]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4a79      	ldr	r2, [pc, #484]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80103d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80103d6:	6013      	str	r3, [r2, #0]
 80103d8:	e00b      	b.n	80103f2 <HAL_RCC_OscConfig+0xd6>
 80103da:	4b77      	ldr	r3, [pc, #476]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	4a76      	ldr	r2, [pc, #472]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80103e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80103e4:	6013      	str	r3, [r2, #0]
 80103e6:	4b74      	ldr	r3, [pc, #464]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	4a73      	ldr	r2, [pc, #460]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80103ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80103f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d013      	beq.n	8010422 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80103fa:	f7fc fdf7 	bl	800cfec <HAL_GetTick>
 80103fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010400:	e008      	b.n	8010414 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010402:	f7fc fdf3 	bl	800cfec <HAL_GetTick>
 8010406:	4602      	mov	r2, r0
 8010408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040a:	1ad3      	subs	r3, r2, r3
 801040c:	2b64      	cmp	r3, #100	; 0x64
 801040e:	d901      	bls.n	8010414 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8010410:	2303      	movs	r3, #3
 8010412:	e3a9      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010414:	4b68      	ldr	r3, [pc, #416]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801041c:	2b00      	cmp	r3, #0
 801041e:	d0f0      	beq.n	8010402 <HAL_RCC_OscConfig+0xe6>
 8010420:	e014      	b.n	801044c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010422:	f7fc fde3 	bl	800cfec <HAL_GetTick>
 8010426:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010428:	e008      	b.n	801043c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801042a:	f7fc fddf 	bl	800cfec <HAL_GetTick>
 801042e:	4602      	mov	r2, r0
 8010430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010432:	1ad3      	subs	r3, r2, r3
 8010434:	2b64      	cmp	r3, #100	; 0x64
 8010436:	d901      	bls.n	801043c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8010438:	2303      	movs	r3, #3
 801043a:	e395      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801043c:	4b5e      	ldr	r3, [pc, #376]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010444:	2b00      	cmp	r3, #0
 8010446:	d1f0      	bne.n	801042a <HAL_RCC_OscConfig+0x10e>
 8010448:	e000      	b.n	801044c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801044a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	f003 0302 	and.w	r3, r3, #2
 8010454:	2b00      	cmp	r3, #0
 8010456:	f000 80ca 	beq.w	80105ee <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801045a:	4b57      	ldr	r3, [pc, #348]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801045c:	691b      	ldr	r3, [r3, #16]
 801045e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010462:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010464:	4b54      	ldr	r3, [pc, #336]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 8010466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010468:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801046a:	6a3b      	ldr	r3, [r7, #32]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d007      	beq.n	8010480 <HAL_RCC_OscConfig+0x164>
 8010470:	6a3b      	ldr	r3, [r7, #32]
 8010472:	2b18      	cmp	r3, #24
 8010474:	d156      	bne.n	8010524 <HAL_RCC_OscConfig+0x208>
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	f003 0303 	and.w	r3, r3, #3
 801047c:	2b00      	cmp	r3, #0
 801047e:	d151      	bne.n	8010524 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010480:	4b4d      	ldr	r3, [pc, #308]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	f003 0304 	and.w	r3, r3, #4
 8010488:	2b00      	cmp	r3, #0
 801048a:	d005      	beq.n	8010498 <HAL_RCC_OscConfig+0x17c>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d101      	bne.n	8010498 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8010494:	2301      	movs	r3, #1
 8010496:	e367      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010498:	4b47      	ldr	r3, [pc, #284]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	f023 0219 	bic.w	r2, r3, #25
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	4944      	ldr	r1, [pc, #272]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80104a6:	4313      	orrs	r3, r2
 80104a8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80104aa:	f7fc fd9f 	bl	800cfec <HAL_GetTick>
 80104ae:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80104b0:	e008      	b.n	80104c4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80104b2:	f7fc fd9b 	bl	800cfec <HAL_GetTick>
 80104b6:	4602      	mov	r2, r0
 80104b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	2b02      	cmp	r3, #2
 80104be:	d901      	bls.n	80104c4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80104c0:	2303      	movs	r3, #3
 80104c2:	e351      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80104c4:	4b3c      	ldr	r3, [pc, #240]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	f003 0304 	and.w	r3, r3, #4
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d0f0      	beq.n	80104b2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80104d0:	f7fc fd98 	bl	800d004 <HAL_GetREVID>
 80104d4:	4603      	mov	r3, r0
 80104d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80104da:	4293      	cmp	r3, r2
 80104dc:	d817      	bhi.n	801050e <HAL_RCC_OscConfig+0x1f2>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	691b      	ldr	r3, [r3, #16]
 80104e2:	2b40      	cmp	r3, #64	; 0x40
 80104e4:	d108      	bne.n	80104f8 <HAL_RCC_OscConfig+0x1dc>
 80104e6:	4b34      	ldr	r3, [pc, #208]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80104ee:	4a32      	ldr	r2, [pc, #200]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80104f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80104f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80104f6:	e07a      	b.n	80105ee <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80104f8:	4b2f      	ldr	r3, [pc, #188]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	691b      	ldr	r3, [r3, #16]
 8010504:	031b      	lsls	r3, r3, #12
 8010506:	492c      	ldr	r1, [pc, #176]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 8010508:	4313      	orrs	r3, r2
 801050a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801050c:	e06f      	b.n	80105ee <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801050e:	4b2a      	ldr	r3, [pc, #168]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	691b      	ldr	r3, [r3, #16]
 801051a:	061b      	lsls	r3, r3, #24
 801051c:	4926      	ldr	r1, [pc, #152]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801051e:	4313      	orrs	r3, r2
 8010520:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010522:	e064      	b.n	80105ee <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d047      	beq.n	80105bc <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801052c:	4b22      	ldr	r3, [pc, #136]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f023 0219 	bic.w	r2, r3, #25
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	68db      	ldr	r3, [r3, #12]
 8010538:	491f      	ldr	r1, [pc, #124]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801053a:	4313      	orrs	r3, r2
 801053c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801053e:	f7fc fd55 	bl	800cfec <HAL_GetTick>
 8010542:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010544:	e008      	b.n	8010558 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010546:	f7fc fd51 	bl	800cfec <HAL_GetTick>
 801054a:	4602      	mov	r2, r0
 801054c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801054e:	1ad3      	subs	r3, r2, r3
 8010550:	2b02      	cmp	r3, #2
 8010552:	d901      	bls.n	8010558 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8010554:	2303      	movs	r3, #3
 8010556:	e307      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010558:	4b17      	ldr	r3, [pc, #92]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f003 0304 	and.w	r3, r3, #4
 8010560:	2b00      	cmp	r3, #0
 8010562:	d0f0      	beq.n	8010546 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010564:	f7fc fd4e 	bl	800d004 <HAL_GetREVID>
 8010568:	4603      	mov	r3, r0
 801056a:	f241 0203 	movw	r2, #4099	; 0x1003
 801056e:	4293      	cmp	r3, r2
 8010570:	d817      	bhi.n	80105a2 <HAL_RCC_OscConfig+0x286>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	691b      	ldr	r3, [r3, #16]
 8010576:	2b40      	cmp	r3, #64	; 0x40
 8010578:	d108      	bne.n	801058c <HAL_RCC_OscConfig+0x270>
 801057a:	4b0f      	ldr	r3, [pc, #60]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8010582:	4a0d      	ldr	r2, [pc, #52]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 8010584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010588:	6053      	str	r3, [r2, #4]
 801058a:	e030      	b.n	80105ee <HAL_RCC_OscConfig+0x2d2>
 801058c:	4b0a      	ldr	r3, [pc, #40]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	691b      	ldr	r3, [r3, #16]
 8010598:	031b      	lsls	r3, r3, #12
 801059a:	4907      	ldr	r1, [pc, #28]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 801059c:	4313      	orrs	r3, r2
 801059e:	604b      	str	r3, [r1, #4]
 80105a0:	e025      	b.n	80105ee <HAL_RCC_OscConfig+0x2d2>
 80105a2:	4b05      	ldr	r3, [pc, #20]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	691b      	ldr	r3, [r3, #16]
 80105ae:	061b      	lsls	r3, r3, #24
 80105b0:	4901      	ldr	r1, [pc, #4]	; (80105b8 <HAL_RCC_OscConfig+0x29c>)
 80105b2:	4313      	orrs	r3, r2
 80105b4:	604b      	str	r3, [r1, #4]
 80105b6:	e01a      	b.n	80105ee <HAL_RCC_OscConfig+0x2d2>
 80105b8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80105bc:	4b9e      	ldr	r3, [pc, #632]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4a9d      	ldr	r2, [pc, #628]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 80105c2:	f023 0301 	bic.w	r3, r3, #1
 80105c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80105c8:	f7fc fd10 	bl	800cfec <HAL_GetTick>
 80105cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80105ce:	e008      	b.n	80105e2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80105d0:	f7fc fd0c 	bl	800cfec <HAL_GetTick>
 80105d4:	4602      	mov	r2, r0
 80105d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d8:	1ad3      	subs	r3, r2, r3
 80105da:	2b02      	cmp	r3, #2
 80105dc:	d901      	bls.n	80105e2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80105de:	2303      	movs	r3, #3
 80105e0:	e2c2      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80105e2:	4b95      	ldr	r3, [pc, #596]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	f003 0304 	and.w	r3, r3, #4
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d1f0      	bne.n	80105d0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f003 0310 	and.w	r3, r3, #16
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	f000 80a9 	beq.w	801074e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80105fc:	4b8e      	ldr	r3, [pc, #568]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 80105fe:	691b      	ldr	r3, [r3, #16]
 8010600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010604:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010606:	4b8c      	ldr	r3, [pc, #560]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801060a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	2b08      	cmp	r3, #8
 8010610:	d007      	beq.n	8010622 <HAL_RCC_OscConfig+0x306>
 8010612:	69bb      	ldr	r3, [r7, #24]
 8010614:	2b18      	cmp	r3, #24
 8010616:	d13a      	bne.n	801068e <HAL_RCC_OscConfig+0x372>
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	f003 0303 	and.w	r3, r3, #3
 801061e:	2b01      	cmp	r3, #1
 8010620:	d135      	bne.n	801068e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010622:	4b85      	ldr	r3, [pc, #532]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801062a:	2b00      	cmp	r3, #0
 801062c:	d005      	beq.n	801063a <HAL_RCC_OscConfig+0x31e>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	69db      	ldr	r3, [r3, #28]
 8010632:	2b80      	cmp	r3, #128	; 0x80
 8010634:	d001      	beq.n	801063a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8010636:	2301      	movs	r3, #1
 8010638:	e296      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801063a:	f7fc fce3 	bl	800d004 <HAL_GetREVID>
 801063e:	4603      	mov	r3, r0
 8010640:	f241 0203 	movw	r2, #4099	; 0x1003
 8010644:	4293      	cmp	r3, r2
 8010646:	d817      	bhi.n	8010678 <HAL_RCC_OscConfig+0x35c>
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6a1b      	ldr	r3, [r3, #32]
 801064c:	2b20      	cmp	r3, #32
 801064e:	d108      	bne.n	8010662 <HAL_RCC_OscConfig+0x346>
 8010650:	4b79      	ldr	r3, [pc, #484]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8010658:	4a77      	ldr	r2, [pc, #476]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 801065a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801065e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010660:	e075      	b.n	801074e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010662:	4b75      	ldr	r3, [pc, #468]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6a1b      	ldr	r3, [r3, #32]
 801066e:	069b      	lsls	r3, r3, #26
 8010670:	4971      	ldr	r1, [pc, #452]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010672:	4313      	orrs	r3, r2
 8010674:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010676:	e06a      	b.n	801074e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010678:	4b6f      	ldr	r3, [pc, #444]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6a1b      	ldr	r3, [r3, #32]
 8010684:	061b      	lsls	r3, r3, #24
 8010686:	496c      	ldr	r1, [pc, #432]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010688:	4313      	orrs	r3, r2
 801068a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801068c:	e05f      	b.n	801074e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	69db      	ldr	r3, [r3, #28]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d042      	beq.n	801071c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8010696:	4b68      	ldr	r3, [pc, #416]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	4a67      	ldr	r2, [pc, #412]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 801069c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106a2:	f7fc fca3 	bl	800cfec <HAL_GetTick>
 80106a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80106a8:	e008      	b.n	80106bc <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80106aa:	f7fc fc9f 	bl	800cfec <HAL_GetTick>
 80106ae:	4602      	mov	r2, r0
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b2:	1ad3      	subs	r3, r2, r3
 80106b4:	2b02      	cmp	r3, #2
 80106b6:	d901      	bls.n	80106bc <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80106b8:	2303      	movs	r3, #3
 80106ba:	e255      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80106bc:	4b5e      	ldr	r3, [pc, #376]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d0f0      	beq.n	80106aa <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80106c8:	f7fc fc9c 	bl	800d004 <HAL_GetREVID>
 80106cc:	4603      	mov	r3, r0
 80106ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d817      	bhi.n	8010706 <HAL_RCC_OscConfig+0x3ea>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6a1b      	ldr	r3, [r3, #32]
 80106da:	2b20      	cmp	r3, #32
 80106dc:	d108      	bne.n	80106f0 <HAL_RCC_OscConfig+0x3d4>
 80106de:	4b56      	ldr	r3, [pc, #344]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80106e6:	4a54      	ldr	r2, [pc, #336]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 80106e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106ec:	6053      	str	r3, [r2, #4]
 80106ee:	e02e      	b.n	801074e <HAL_RCC_OscConfig+0x432>
 80106f0:	4b51      	ldr	r3, [pc, #324]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 80106f2:	685b      	ldr	r3, [r3, #4]
 80106f4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6a1b      	ldr	r3, [r3, #32]
 80106fc:	069b      	lsls	r3, r3, #26
 80106fe:	494e      	ldr	r1, [pc, #312]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010700:	4313      	orrs	r3, r2
 8010702:	604b      	str	r3, [r1, #4]
 8010704:	e023      	b.n	801074e <HAL_RCC_OscConfig+0x432>
 8010706:	4b4c      	ldr	r3, [pc, #304]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010708:	68db      	ldr	r3, [r3, #12]
 801070a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6a1b      	ldr	r3, [r3, #32]
 8010712:	061b      	lsls	r3, r3, #24
 8010714:	4948      	ldr	r1, [pc, #288]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010716:	4313      	orrs	r3, r2
 8010718:	60cb      	str	r3, [r1, #12]
 801071a:	e018      	b.n	801074e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801071c:	4b46      	ldr	r3, [pc, #280]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4a45      	ldr	r2, [pc, #276]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010728:	f7fc fc60 	bl	800cfec <HAL_GetTick>
 801072c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801072e:	e008      	b.n	8010742 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8010730:	f7fc fc5c 	bl	800cfec <HAL_GetTick>
 8010734:	4602      	mov	r2, r0
 8010736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010738:	1ad3      	subs	r3, r2, r3
 801073a:	2b02      	cmp	r3, #2
 801073c:	d901      	bls.n	8010742 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 801073e:	2303      	movs	r3, #3
 8010740:	e212      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010742:	4b3d      	ldr	r3, [pc, #244]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801074a:	2b00      	cmp	r3, #0
 801074c:	d1f0      	bne.n	8010730 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f003 0308 	and.w	r3, r3, #8
 8010756:	2b00      	cmp	r3, #0
 8010758:	d036      	beq.n	80107c8 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	695b      	ldr	r3, [r3, #20]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d019      	beq.n	8010796 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010762:	4b35      	ldr	r3, [pc, #212]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010766:	4a34      	ldr	r2, [pc, #208]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010768:	f043 0301 	orr.w	r3, r3, #1
 801076c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801076e:	f7fc fc3d 	bl	800cfec <HAL_GetTick>
 8010772:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010774:	e008      	b.n	8010788 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010776:	f7fc fc39 	bl	800cfec <HAL_GetTick>
 801077a:	4602      	mov	r2, r0
 801077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077e:	1ad3      	subs	r3, r2, r3
 8010780:	2b02      	cmp	r3, #2
 8010782:	d901      	bls.n	8010788 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8010784:	2303      	movs	r3, #3
 8010786:	e1ef      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010788:	4b2b      	ldr	r3, [pc, #172]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 801078a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801078c:	f003 0302 	and.w	r3, r3, #2
 8010790:	2b00      	cmp	r3, #0
 8010792:	d0f0      	beq.n	8010776 <HAL_RCC_OscConfig+0x45a>
 8010794:	e018      	b.n	80107c8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010796:	4b28      	ldr	r3, [pc, #160]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801079a:	4a27      	ldr	r2, [pc, #156]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 801079c:	f023 0301 	bic.w	r3, r3, #1
 80107a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80107a2:	f7fc fc23 	bl	800cfec <HAL_GetTick>
 80107a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80107a8:	e008      	b.n	80107bc <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80107aa:	f7fc fc1f 	bl	800cfec <HAL_GetTick>
 80107ae:	4602      	mov	r2, r0
 80107b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b2:	1ad3      	subs	r3, r2, r3
 80107b4:	2b02      	cmp	r3, #2
 80107b6:	d901      	bls.n	80107bc <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80107b8:	2303      	movs	r3, #3
 80107ba:	e1d5      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80107bc:	4b1e      	ldr	r3, [pc, #120]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 80107be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107c0:	f003 0302 	and.w	r3, r3, #2
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d1f0      	bne.n	80107aa <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f003 0320 	and.w	r3, r3, #32
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d039      	beq.n	8010848 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	699b      	ldr	r3, [r3, #24]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d019      	beq.n	8010810 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80107dc:	4b16      	ldr	r3, [pc, #88]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	4a15      	ldr	r2, [pc, #84]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 80107e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80107e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80107e8:	f7fc fc00 	bl	800cfec <HAL_GetTick>
 80107ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80107ee:	e008      	b.n	8010802 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80107f0:	f7fc fbfc 	bl	800cfec <HAL_GetTick>
 80107f4:	4602      	mov	r2, r0
 80107f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f8:	1ad3      	subs	r3, r2, r3
 80107fa:	2b02      	cmp	r3, #2
 80107fc:	d901      	bls.n	8010802 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80107fe:	2303      	movs	r3, #3
 8010800:	e1b2      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010802:	4b0d      	ldr	r3, [pc, #52]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801080a:	2b00      	cmp	r3, #0
 801080c:	d0f0      	beq.n	80107f0 <HAL_RCC_OscConfig+0x4d4>
 801080e:	e01b      	b.n	8010848 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010810:	4b09      	ldr	r3, [pc, #36]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	4a08      	ldr	r2, [pc, #32]	; (8010838 <HAL_RCC_OscConfig+0x51c>)
 8010816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801081a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801081c:	f7fc fbe6 	bl	800cfec <HAL_GetTick>
 8010820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010822:	e00b      	b.n	801083c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010824:	f7fc fbe2 	bl	800cfec <HAL_GetTick>
 8010828:	4602      	mov	r2, r0
 801082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082c:	1ad3      	subs	r3, r2, r3
 801082e:	2b02      	cmp	r3, #2
 8010830:	d904      	bls.n	801083c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8010832:	2303      	movs	r3, #3
 8010834:	e198      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
 8010836:	bf00      	nop
 8010838:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801083c:	4ba3      	ldr	r3, [pc, #652]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010844:	2b00      	cmp	r3, #0
 8010846:	d1ed      	bne.n	8010824 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	f003 0304 	and.w	r3, r3, #4
 8010850:	2b00      	cmp	r3, #0
 8010852:	f000 8081 	beq.w	8010958 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010856:	4b9e      	ldr	r3, [pc, #632]	; (8010ad0 <HAL_RCC_OscConfig+0x7b4>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4a9d      	ldr	r2, [pc, #628]	; (8010ad0 <HAL_RCC_OscConfig+0x7b4>)
 801085c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010860:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010862:	f7fc fbc3 	bl	800cfec <HAL_GetTick>
 8010866:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010868:	e008      	b.n	801087c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801086a:	f7fc fbbf 	bl	800cfec <HAL_GetTick>
 801086e:	4602      	mov	r2, r0
 8010870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010872:	1ad3      	subs	r3, r2, r3
 8010874:	2b64      	cmp	r3, #100	; 0x64
 8010876:	d901      	bls.n	801087c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8010878:	2303      	movs	r3, #3
 801087a:	e175      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801087c:	4b94      	ldr	r3, [pc, #592]	; (8010ad0 <HAL_RCC_OscConfig+0x7b4>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010884:	2b00      	cmp	r3, #0
 8010886:	d0f0      	beq.n	801086a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	689b      	ldr	r3, [r3, #8]
 801088c:	2b01      	cmp	r3, #1
 801088e:	d106      	bne.n	801089e <HAL_RCC_OscConfig+0x582>
 8010890:	4b8e      	ldr	r3, [pc, #568]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010894:	4a8d      	ldr	r2, [pc, #564]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010896:	f043 0301 	orr.w	r3, r3, #1
 801089a:	6713      	str	r3, [r2, #112]	; 0x70
 801089c:	e02d      	b.n	80108fa <HAL_RCC_OscConfig+0x5de>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	689b      	ldr	r3, [r3, #8]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d10c      	bne.n	80108c0 <HAL_RCC_OscConfig+0x5a4>
 80108a6:	4b89      	ldr	r3, [pc, #548]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80108a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108aa:	4a88      	ldr	r2, [pc, #544]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80108ac:	f023 0301 	bic.w	r3, r3, #1
 80108b0:	6713      	str	r3, [r2, #112]	; 0x70
 80108b2:	4b86      	ldr	r3, [pc, #536]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80108b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108b6:	4a85      	ldr	r2, [pc, #532]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80108b8:	f023 0304 	bic.w	r3, r3, #4
 80108bc:	6713      	str	r3, [r2, #112]	; 0x70
 80108be:	e01c      	b.n	80108fa <HAL_RCC_OscConfig+0x5de>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	689b      	ldr	r3, [r3, #8]
 80108c4:	2b05      	cmp	r3, #5
 80108c6:	d10c      	bne.n	80108e2 <HAL_RCC_OscConfig+0x5c6>
 80108c8:	4b80      	ldr	r3, [pc, #512]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80108ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108cc:	4a7f      	ldr	r2, [pc, #508]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80108ce:	f043 0304 	orr.w	r3, r3, #4
 80108d2:	6713      	str	r3, [r2, #112]	; 0x70
 80108d4:	4b7d      	ldr	r3, [pc, #500]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80108d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108d8:	4a7c      	ldr	r2, [pc, #496]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80108da:	f043 0301 	orr.w	r3, r3, #1
 80108de:	6713      	str	r3, [r2, #112]	; 0x70
 80108e0:	e00b      	b.n	80108fa <HAL_RCC_OscConfig+0x5de>
 80108e2:	4b7a      	ldr	r3, [pc, #488]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80108e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108e6:	4a79      	ldr	r2, [pc, #484]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80108e8:	f023 0301 	bic.w	r3, r3, #1
 80108ec:	6713      	str	r3, [r2, #112]	; 0x70
 80108ee:	4b77      	ldr	r3, [pc, #476]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80108f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108f2:	4a76      	ldr	r2, [pc, #472]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80108f4:	f023 0304 	bic.w	r3, r3, #4
 80108f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	689b      	ldr	r3, [r3, #8]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d015      	beq.n	801092e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010902:	f7fc fb73 	bl	800cfec <HAL_GetTick>
 8010906:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010908:	e00a      	b.n	8010920 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801090a:	f7fc fb6f 	bl	800cfec <HAL_GetTick>
 801090e:	4602      	mov	r2, r0
 8010910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010912:	1ad3      	subs	r3, r2, r3
 8010914:	f241 3288 	movw	r2, #5000	; 0x1388
 8010918:	4293      	cmp	r3, r2
 801091a:	d901      	bls.n	8010920 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 801091c:	2303      	movs	r3, #3
 801091e:	e123      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010920:	4b6a      	ldr	r3, [pc, #424]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010924:	f003 0302 	and.w	r3, r3, #2
 8010928:	2b00      	cmp	r3, #0
 801092a:	d0ee      	beq.n	801090a <HAL_RCC_OscConfig+0x5ee>
 801092c:	e014      	b.n	8010958 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801092e:	f7fc fb5d 	bl	800cfec <HAL_GetTick>
 8010932:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010934:	e00a      	b.n	801094c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010936:	f7fc fb59 	bl	800cfec <HAL_GetTick>
 801093a:	4602      	mov	r2, r0
 801093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093e:	1ad3      	subs	r3, r2, r3
 8010940:	f241 3288 	movw	r2, #5000	; 0x1388
 8010944:	4293      	cmp	r3, r2
 8010946:	d901      	bls.n	801094c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8010948:	2303      	movs	r3, #3
 801094a:	e10d      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801094c:	4b5f      	ldr	r3, [pc, #380]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 801094e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010950:	f003 0302 	and.w	r3, r3, #2
 8010954:	2b00      	cmp	r3, #0
 8010956:	d1ee      	bne.n	8010936 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801095c:	2b00      	cmp	r3, #0
 801095e:	f000 8102 	beq.w	8010b66 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8010962:	4b5a      	ldr	r3, [pc, #360]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010964:	691b      	ldr	r3, [r3, #16]
 8010966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801096a:	2b18      	cmp	r3, #24
 801096c:	f000 80bd 	beq.w	8010aea <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010974:	2b02      	cmp	r3, #2
 8010976:	f040 8095 	bne.w	8010aa4 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801097a:	4b54      	ldr	r3, [pc, #336]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4a53      	ldr	r2, [pc, #332]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010986:	f7fc fb31 	bl	800cfec <HAL_GetTick>
 801098a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801098c:	e008      	b.n	80109a0 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801098e:	f7fc fb2d 	bl	800cfec <HAL_GetTick>
 8010992:	4602      	mov	r2, r0
 8010994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010996:	1ad3      	subs	r3, r2, r3
 8010998:	2b02      	cmp	r3, #2
 801099a:	d901      	bls.n	80109a0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 801099c:	2303      	movs	r3, #3
 801099e:	e0e3      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80109a0:	4b4a      	ldr	r3, [pc, #296]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d1f0      	bne.n	801098e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80109ac:	4b47      	ldr	r3, [pc, #284]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80109ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80109b0:	4b48      	ldr	r3, [pc, #288]	; (8010ad4 <HAL_RCC_OscConfig+0x7b8>)
 80109b2:	4013      	ands	r3, r2
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80109b8:	687a      	ldr	r2, [r7, #4]
 80109ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80109bc:	0112      	lsls	r2, r2, #4
 80109be:	430a      	orrs	r2, r1
 80109c0:	4942      	ldr	r1, [pc, #264]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80109c2:	4313      	orrs	r3, r2
 80109c4:	628b      	str	r3, [r1, #40]	; 0x28
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109ca:	3b01      	subs	r3, #1
 80109cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109d4:	3b01      	subs	r3, #1
 80109d6:	025b      	lsls	r3, r3, #9
 80109d8:	b29b      	uxth	r3, r3
 80109da:	431a      	orrs	r2, r3
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109e0:	3b01      	subs	r3, #1
 80109e2:	041b      	lsls	r3, r3, #16
 80109e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80109e8:	431a      	orrs	r2, r3
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109ee:	3b01      	subs	r3, #1
 80109f0:	061b      	lsls	r3, r3, #24
 80109f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80109f6:	4935      	ldr	r1, [pc, #212]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80109f8:	4313      	orrs	r3, r2
 80109fa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80109fc:	4b33      	ldr	r3, [pc, #204]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 80109fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a00:	4a32      	ldr	r2, [pc, #200]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a02:	f023 0301 	bic.w	r3, r3, #1
 8010a06:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010a08:	4b30      	ldr	r3, [pc, #192]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a0c:	4b32      	ldr	r3, [pc, #200]	; (8010ad8 <HAL_RCC_OscConfig+0x7bc>)
 8010a0e:	4013      	ands	r3, r2
 8010a10:	687a      	ldr	r2, [r7, #4]
 8010a12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010a14:	00d2      	lsls	r2, r2, #3
 8010a16:	492d      	ldr	r1, [pc, #180]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a18:	4313      	orrs	r3, r2
 8010a1a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010a1c:	4b2b      	ldr	r3, [pc, #172]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a20:	f023 020c 	bic.w	r2, r3, #12
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a28:	4928      	ldr	r1, [pc, #160]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a2a:	4313      	orrs	r3, r2
 8010a2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8010a2e:	4b27      	ldr	r3, [pc, #156]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a32:	f023 0202 	bic.w	r2, r3, #2
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a3a:	4924      	ldr	r1, [pc, #144]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a3c:	4313      	orrs	r3, r2
 8010a3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8010a40:	4b22      	ldr	r3, [pc, #136]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a44:	4a21      	ldr	r2, [pc, #132]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010a4c:	4b1f      	ldr	r3, [pc, #124]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a50:	4a1e      	ldr	r2, [pc, #120]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010a58:	4b1c      	ldr	r3, [pc, #112]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a5c:	4a1b      	ldr	r2, [pc, #108]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8010a64:	4b19      	ldr	r3, [pc, #100]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a68:	4a18      	ldr	r2, [pc, #96]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a6a:	f043 0301 	orr.w	r3, r3, #1
 8010a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010a70:	4b16      	ldr	r3, [pc, #88]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	4a15      	ldr	r2, [pc, #84]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a7c:	f7fc fab6 	bl	800cfec <HAL_GetTick>
 8010a80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010a82:	e008      	b.n	8010a96 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a84:	f7fc fab2 	bl	800cfec <HAL_GetTick>
 8010a88:	4602      	mov	r2, r0
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8c:	1ad3      	subs	r3, r2, r3
 8010a8e:	2b02      	cmp	r3, #2
 8010a90:	d901      	bls.n	8010a96 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8010a92:	2303      	movs	r3, #3
 8010a94:	e068      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010a96:	4b0d      	ldr	r3, [pc, #52]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d0f0      	beq.n	8010a84 <HAL_RCC_OscConfig+0x768>
 8010aa2:	e060      	b.n	8010b66 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010aa4:	4b09      	ldr	r3, [pc, #36]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	4a08      	ldr	r2, [pc, #32]	; (8010acc <HAL_RCC_OscConfig+0x7b0>)
 8010aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010ab0:	f7fc fa9c 	bl	800cfec <HAL_GetTick>
 8010ab4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010ab6:	e011      	b.n	8010adc <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010ab8:	f7fc fa98 	bl	800cfec <HAL_GetTick>
 8010abc:	4602      	mov	r2, r0
 8010abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac0:	1ad3      	subs	r3, r2, r3
 8010ac2:	2b02      	cmp	r3, #2
 8010ac4:	d90a      	bls.n	8010adc <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8010ac6:	2303      	movs	r3, #3
 8010ac8:	e04e      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
 8010aca:	bf00      	nop
 8010acc:	58024400 	.word	0x58024400
 8010ad0:	58024800 	.word	0x58024800
 8010ad4:	fffffc0c 	.word	0xfffffc0c
 8010ad8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010adc:	4b24      	ldr	r3, [pc, #144]	; (8010b70 <HAL_RCC_OscConfig+0x854>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d1e7      	bne.n	8010ab8 <HAL_RCC_OscConfig+0x79c>
 8010ae8:	e03d      	b.n	8010b66 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010aea:	4b21      	ldr	r3, [pc, #132]	; (8010b70 <HAL_RCC_OscConfig+0x854>)
 8010aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8010af0:	4b1f      	ldr	r3, [pc, #124]	; (8010b70 <HAL_RCC_OscConfig+0x854>)
 8010af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010af4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010afa:	2b01      	cmp	r3, #1
 8010afc:	d031      	beq.n	8010b62 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	f003 0203 	and.w	r2, r3, #3
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d12a      	bne.n	8010b62 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010b0c:	693b      	ldr	r3, [r7, #16]
 8010b0e:	091b      	lsrs	r3, r3, #4
 8010b10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d122      	bne.n	8010b62 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b26:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d11a      	bne.n	8010b62 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	0a5b      	lsrs	r3, r3, #9
 8010b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b38:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d111      	bne.n	8010b62 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	0c1b      	lsrs	r3, r3, #16
 8010b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d108      	bne.n	8010b62 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	0e1b      	lsrs	r3, r3, #24
 8010b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d001      	beq.n	8010b66 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8010b62:	2301      	movs	r3, #1
 8010b64:	e000      	b.n	8010b68 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8010b66:	2300      	movs	r3, #0
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3730      	adds	r7, #48	; 0x30
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	58024400 	.word	0x58024400

08010b74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d101      	bne.n	8010b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010b84:	2301      	movs	r3, #1
 8010b86:	e19c      	b.n	8010ec2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010b88:	4b8a      	ldr	r3, [pc, #552]	; (8010db4 <HAL_RCC_ClockConfig+0x240>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f003 030f 	and.w	r3, r3, #15
 8010b90:	683a      	ldr	r2, [r7, #0]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d910      	bls.n	8010bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010b96:	4b87      	ldr	r3, [pc, #540]	; (8010db4 <HAL_RCC_ClockConfig+0x240>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	f023 020f 	bic.w	r2, r3, #15
 8010b9e:	4985      	ldr	r1, [pc, #532]	; (8010db4 <HAL_RCC_ClockConfig+0x240>)
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010ba6:	4b83      	ldr	r3, [pc, #524]	; (8010db4 <HAL_RCC_ClockConfig+0x240>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f003 030f 	and.w	r3, r3, #15
 8010bae:	683a      	ldr	r2, [r7, #0]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d001      	beq.n	8010bb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e184      	b.n	8010ec2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f003 0304 	and.w	r3, r3, #4
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d010      	beq.n	8010be6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	691a      	ldr	r2, [r3, #16]
 8010bc8:	4b7b      	ldr	r3, [pc, #492]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010bca:	699b      	ldr	r3, [r3, #24]
 8010bcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d908      	bls.n	8010be6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010bd4:	4b78      	ldr	r3, [pc, #480]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010bd6:	699b      	ldr	r3, [r3, #24]
 8010bd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	691b      	ldr	r3, [r3, #16]
 8010be0:	4975      	ldr	r1, [pc, #468]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010be2:	4313      	orrs	r3, r2
 8010be4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f003 0308 	and.w	r3, r3, #8
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d010      	beq.n	8010c14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	695a      	ldr	r2, [r3, #20]
 8010bf6:	4b70      	ldr	r3, [pc, #448]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010bf8:	69db      	ldr	r3, [r3, #28]
 8010bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d908      	bls.n	8010c14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010c02:	4b6d      	ldr	r3, [pc, #436]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010c04:	69db      	ldr	r3, [r3, #28]
 8010c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	695b      	ldr	r3, [r3, #20]
 8010c0e:	496a      	ldr	r1, [pc, #424]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010c10:	4313      	orrs	r3, r2
 8010c12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f003 0310 	and.w	r3, r3, #16
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d010      	beq.n	8010c42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	699a      	ldr	r2, [r3, #24]
 8010c24:	4b64      	ldr	r3, [pc, #400]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010c26:	69db      	ldr	r3, [r3, #28]
 8010c28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d908      	bls.n	8010c42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010c30:	4b61      	ldr	r3, [pc, #388]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010c32:	69db      	ldr	r3, [r3, #28]
 8010c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	699b      	ldr	r3, [r3, #24]
 8010c3c:	495e      	ldr	r1, [pc, #376]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010c3e:	4313      	orrs	r3, r2
 8010c40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f003 0320 	and.w	r3, r3, #32
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d010      	beq.n	8010c70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	69da      	ldr	r2, [r3, #28]
 8010c52:	4b59      	ldr	r3, [pc, #356]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010c54:	6a1b      	ldr	r3, [r3, #32]
 8010c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d908      	bls.n	8010c70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8010c5e:	4b56      	ldr	r3, [pc, #344]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010c60:	6a1b      	ldr	r3, [r3, #32]
 8010c62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	69db      	ldr	r3, [r3, #28]
 8010c6a:	4953      	ldr	r1, [pc, #332]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	f003 0302 	and.w	r3, r3, #2
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d010      	beq.n	8010c9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	68da      	ldr	r2, [r3, #12]
 8010c80:	4b4d      	ldr	r3, [pc, #308]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010c82:	699b      	ldr	r3, [r3, #24]
 8010c84:	f003 030f 	and.w	r3, r3, #15
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d908      	bls.n	8010c9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010c8c:	4b4a      	ldr	r3, [pc, #296]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010c8e:	699b      	ldr	r3, [r3, #24]
 8010c90:	f023 020f 	bic.w	r2, r3, #15
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	68db      	ldr	r3, [r3, #12]
 8010c98:	4947      	ldr	r1, [pc, #284]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010c9a:	4313      	orrs	r3, r2
 8010c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	f003 0301 	and.w	r3, r3, #1
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d055      	beq.n	8010d56 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8010caa:	4b43      	ldr	r3, [pc, #268]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010cac:	699b      	ldr	r3, [r3, #24]
 8010cae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	4940      	ldr	r1, [pc, #256]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	2b02      	cmp	r3, #2
 8010cc2:	d107      	bne.n	8010cd4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010cc4:	4b3c      	ldr	r3, [pc, #240]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d121      	bne.n	8010d14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	e0f6      	b.n	8010ec2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	2b03      	cmp	r3, #3
 8010cda:	d107      	bne.n	8010cec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010cdc:	4b36      	ldr	r3, [pc, #216]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d115      	bne.n	8010d14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010ce8:	2301      	movs	r3, #1
 8010cea:	e0ea      	b.n	8010ec2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	685b      	ldr	r3, [r3, #4]
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d107      	bne.n	8010d04 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010cf4:	4b30      	ldr	r3, [pc, #192]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d109      	bne.n	8010d14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010d00:	2301      	movs	r3, #1
 8010d02:	e0de      	b.n	8010ec2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010d04:	4b2c      	ldr	r3, [pc, #176]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	f003 0304 	and.w	r3, r3, #4
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d101      	bne.n	8010d14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010d10:	2301      	movs	r3, #1
 8010d12:	e0d6      	b.n	8010ec2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010d14:	4b28      	ldr	r3, [pc, #160]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010d16:	691b      	ldr	r3, [r3, #16]
 8010d18:	f023 0207 	bic.w	r2, r3, #7
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	685b      	ldr	r3, [r3, #4]
 8010d20:	4925      	ldr	r1, [pc, #148]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010d22:	4313      	orrs	r3, r2
 8010d24:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010d26:	f7fc f961 	bl	800cfec <HAL_GetTick>
 8010d2a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010d2c:	e00a      	b.n	8010d44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010d2e:	f7fc f95d 	bl	800cfec <HAL_GetTick>
 8010d32:	4602      	mov	r2, r0
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	1ad3      	subs	r3, r2, r3
 8010d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	d901      	bls.n	8010d44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8010d40:	2303      	movs	r3, #3
 8010d42:	e0be      	b.n	8010ec2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010d44:	4b1c      	ldr	r3, [pc, #112]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010d46:	691b      	ldr	r3, [r3, #16]
 8010d48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	685b      	ldr	r3, [r3, #4]
 8010d50:	00db      	lsls	r3, r3, #3
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d1eb      	bne.n	8010d2e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f003 0302 	and.w	r3, r3, #2
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d010      	beq.n	8010d84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	68da      	ldr	r2, [r3, #12]
 8010d66:	4b14      	ldr	r3, [pc, #80]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010d68:	699b      	ldr	r3, [r3, #24]
 8010d6a:	f003 030f 	and.w	r3, r3, #15
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d208      	bcs.n	8010d84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010d72:	4b11      	ldr	r3, [pc, #68]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010d74:	699b      	ldr	r3, [r3, #24]
 8010d76:	f023 020f 	bic.w	r2, r3, #15
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	490e      	ldr	r1, [pc, #56]	; (8010db8 <HAL_RCC_ClockConfig+0x244>)
 8010d80:	4313      	orrs	r3, r2
 8010d82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010d84:	4b0b      	ldr	r3, [pc, #44]	; (8010db4 <HAL_RCC_ClockConfig+0x240>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	f003 030f 	and.w	r3, r3, #15
 8010d8c:	683a      	ldr	r2, [r7, #0]
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d214      	bcs.n	8010dbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010d92:	4b08      	ldr	r3, [pc, #32]	; (8010db4 <HAL_RCC_ClockConfig+0x240>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	f023 020f 	bic.w	r2, r3, #15
 8010d9a:	4906      	ldr	r1, [pc, #24]	; (8010db4 <HAL_RCC_ClockConfig+0x240>)
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	4313      	orrs	r3, r2
 8010da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010da2:	4b04      	ldr	r3, [pc, #16]	; (8010db4 <HAL_RCC_ClockConfig+0x240>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	f003 030f 	and.w	r3, r3, #15
 8010daa:	683a      	ldr	r2, [r7, #0]
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d005      	beq.n	8010dbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8010db0:	2301      	movs	r3, #1
 8010db2:	e086      	b.n	8010ec2 <HAL_RCC_ClockConfig+0x34e>
 8010db4:	52002000 	.word	0x52002000
 8010db8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	f003 0304 	and.w	r3, r3, #4
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d010      	beq.n	8010dea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	691a      	ldr	r2, [r3, #16]
 8010dcc:	4b3f      	ldr	r3, [pc, #252]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010dce:	699b      	ldr	r3, [r3, #24]
 8010dd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d208      	bcs.n	8010dea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010dd8:	4b3c      	ldr	r3, [pc, #240]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010dda:	699b      	ldr	r3, [r3, #24]
 8010ddc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	691b      	ldr	r3, [r3, #16]
 8010de4:	4939      	ldr	r1, [pc, #228]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010de6:	4313      	orrs	r3, r2
 8010de8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	f003 0308 	and.w	r3, r3, #8
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d010      	beq.n	8010e18 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	695a      	ldr	r2, [r3, #20]
 8010dfa:	4b34      	ldr	r3, [pc, #208]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010dfc:	69db      	ldr	r3, [r3, #28]
 8010dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d208      	bcs.n	8010e18 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010e06:	4b31      	ldr	r3, [pc, #196]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010e08:	69db      	ldr	r3, [r3, #28]
 8010e0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	695b      	ldr	r3, [r3, #20]
 8010e12:	492e      	ldr	r1, [pc, #184]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010e14:	4313      	orrs	r3, r2
 8010e16:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	f003 0310 	and.w	r3, r3, #16
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d010      	beq.n	8010e46 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	699a      	ldr	r2, [r3, #24]
 8010e28:	4b28      	ldr	r3, [pc, #160]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010e2a:	69db      	ldr	r3, [r3, #28]
 8010e2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d208      	bcs.n	8010e46 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010e34:	4b25      	ldr	r3, [pc, #148]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010e36:	69db      	ldr	r3, [r3, #28]
 8010e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	699b      	ldr	r3, [r3, #24]
 8010e40:	4922      	ldr	r1, [pc, #136]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010e42:	4313      	orrs	r3, r2
 8010e44:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	f003 0320 	and.w	r3, r3, #32
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d010      	beq.n	8010e74 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	69da      	ldr	r2, [r3, #28]
 8010e56:	4b1d      	ldr	r3, [pc, #116]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010e58:	6a1b      	ldr	r3, [r3, #32]
 8010e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d208      	bcs.n	8010e74 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8010e62:	4b1a      	ldr	r3, [pc, #104]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010e64:	6a1b      	ldr	r3, [r3, #32]
 8010e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	69db      	ldr	r3, [r3, #28]
 8010e6e:	4917      	ldr	r1, [pc, #92]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010e70:	4313      	orrs	r3, r2
 8010e72:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010e74:	f000 f89e 	bl	8010fb4 <HAL_RCC_GetSysClockFreq>
 8010e78:	4602      	mov	r2, r0
 8010e7a:	4b14      	ldr	r3, [pc, #80]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010e7c:	699b      	ldr	r3, [r3, #24]
 8010e7e:	0a1b      	lsrs	r3, r3, #8
 8010e80:	f003 030f 	and.w	r3, r3, #15
 8010e84:	4912      	ldr	r1, [pc, #72]	; (8010ed0 <HAL_RCC_ClockConfig+0x35c>)
 8010e86:	5ccb      	ldrb	r3, [r1, r3]
 8010e88:	f003 031f 	and.w	r3, r3, #31
 8010e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8010e90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010e92:	4b0e      	ldr	r3, [pc, #56]	; (8010ecc <HAL_RCC_ClockConfig+0x358>)
 8010e94:	699b      	ldr	r3, [r3, #24]
 8010e96:	f003 030f 	and.w	r3, r3, #15
 8010e9a:	4a0d      	ldr	r2, [pc, #52]	; (8010ed0 <HAL_RCC_ClockConfig+0x35c>)
 8010e9c:	5cd3      	ldrb	r3, [r2, r3]
 8010e9e:	f003 031f 	and.w	r3, r3, #31
 8010ea2:	693a      	ldr	r2, [r7, #16]
 8010ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8010ea8:	4a0a      	ldr	r2, [pc, #40]	; (8010ed4 <HAL_RCC_ClockConfig+0x360>)
 8010eaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010eac:	4a0a      	ldr	r2, [pc, #40]	; (8010ed8 <HAL_RCC_ClockConfig+0x364>)
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8010eb2:	4b0a      	ldr	r3, [pc, #40]	; (8010edc <HAL_RCC_ClockConfig+0x368>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7f0 fa30 	bl	800131c <HAL_InitTick>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8010ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3718      	adds	r7, #24
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	58024400 	.word	0x58024400
 8010ed0:	08028070 	.word	0x08028070
 8010ed4:	24000014 	.word	0x24000014
 8010ed8:	24000010 	.word	0x24000010
 8010edc:	24000048 	.word	0x24000048

08010ee0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b08c      	sub	sp, #48	; 0x30
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d12a      	bne.n	8010f48 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8010ef2:	4b2d      	ldr	r3, [pc, #180]	; (8010fa8 <HAL_RCC_MCOConfig+0xc8>)
 8010ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010ef8:	4a2b      	ldr	r2, [pc, #172]	; (8010fa8 <HAL_RCC_MCOConfig+0xc8>)
 8010efa:	f043 0301 	orr.w	r3, r3, #1
 8010efe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010f02:	4b29      	ldr	r3, [pc, #164]	; (8010fa8 <HAL_RCC_MCOConfig+0xc8>)
 8010f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010f08:	f003 0301 	and.w	r3, r3, #1
 8010f0c:	61bb      	str	r3, [r7, #24]
 8010f0e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8010f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f16:	2302      	movs	r3, #2
 8010f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f1a:	2303      	movs	r3, #3
 8010f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8010f22:	2300      	movs	r3, #0
 8010f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8010f26:	f107 031c 	add.w	r3, r7, #28
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	481f      	ldr	r0, [pc, #124]	; (8010fac <HAL_RCC_MCOConfig+0xcc>)
 8010f2e:	f7fc fc61 	bl	800d7f4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8010f32:	4b1d      	ldr	r3, [pc, #116]	; (8010fa8 <HAL_RCC_MCOConfig+0xc8>)
 8010f34:	691b      	ldr	r3, [r3, #16]
 8010f36:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8010f3a:	68b9      	ldr	r1, [r7, #8]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	430b      	orrs	r3, r1
 8010f40:	4919      	ldr	r1, [pc, #100]	; (8010fa8 <HAL_RCC_MCOConfig+0xc8>)
 8010f42:	4313      	orrs	r3, r2
 8010f44:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8010f46:	e02a      	b.n	8010f9e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8010f48:	4b17      	ldr	r3, [pc, #92]	; (8010fa8 <HAL_RCC_MCOConfig+0xc8>)
 8010f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010f4e:	4a16      	ldr	r2, [pc, #88]	; (8010fa8 <HAL_RCC_MCOConfig+0xc8>)
 8010f50:	f043 0304 	orr.w	r3, r3, #4
 8010f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010f58:	4b13      	ldr	r3, [pc, #76]	; (8010fa8 <HAL_RCC_MCOConfig+0xc8>)
 8010f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010f5e:	f003 0304 	and.w	r3, r3, #4
 8010f62:	617b      	str	r3, [r7, #20]
 8010f64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8010f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f6c:	2302      	movs	r3, #2
 8010f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f70:	2303      	movs	r3, #3
 8010f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f74:	2300      	movs	r3, #0
 8010f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8010f7c:	f107 031c 	add.w	r3, r7, #28
 8010f80:	4619      	mov	r1, r3
 8010f82:	480b      	ldr	r0, [pc, #44]	; (8010fb0 <HAL_RCC_MCOConfig+0xd0>)
 8010f84:	f7fc fc36 	bl	800d7f4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8010f88:	4b07      	ldr	r3, [pc, #28]	; (8010fa8 <HAL_RCC_MCOConfig+0xc8>)
 8010f8a:	691b      	ldr	r3, [r3, #16]
 8010f8c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	01d9      	lsls	r1, r3, #7
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	430b      	orrs	r3, r1
 8010f98:	4903      	ldr	r1, [pc, #12]	; (8010fa8 <HAL_RCC_MCOConfig+0xc8>)
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	610b      	str	r3, [r1, #16]
}
 8010f9e:	bf00      	nop
 8010fa0:	3730      	adds	r7, #48	; 0x30
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	58024400 	.word	0x58024400
 8010fac:	58020000 	.word	0x58020000
 8010fb0:	58020800 	.word	0x58020800

08010fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b089      	sub	sp, #36	; 0x24
 8010fb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010fba:	4bb3      	ldr	r3, [pc, #716]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010fbc:	691b      	ldr	r3, [r3, #16]
 8010fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010fc2:	2b18      	cmp	r3, #24
 8010fc4:	f200 8155 	bhi.w	8011272 <HAL_RCC_GetSysClockFreq+0x2be>
 8010fc8:	a201      	add	r2, pc, #4	; (adr r2, 8010fd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8010fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fce:	bf00      	nop
 8010fd0:	08011035 	.word	0x08011035
 8010fd4:	08011273 	.word	0x08011273
 8010fd8:	08011273 	.word	0x08011273
 8010fdc:	08011273 	.word	0x08011273
 8010fe0:	08011273 	.word	0x08011273
 8010fe4:	08011273 	.word	0x08011273
 8010fe8:	08011273 	.word	0x08011273
 8010fec:	08011273 	.word	0x08011273
 8010ff0:	0801105b 	.word	0x0801105b
 8010ff4:	08011273 	.word	0x08011273
 8010ff8:	08011273 	.word	0x08011273
 8010ffc:	08011273 	.word	0x08011273
 8011000:	08011273 	.word	0x08011273
 8011004:	08011273 	.word	0x08011273
 8011008:	08011273 	.word	0x08011273
 801100c:	08011273 	.word	0x08011273
 8011010:	08011061 	.word	0x08011061
 8011014:	08011273 	.word	0x08011273
 8011018:	08011273 	.word	0x08011273
 801101c:	08011273 	.word	0x08011273
 8011020:	08011273 	.word	0x08011273
 8011024:	08011273 	.word	0x08011273
 8011028:	08011273 	.word	0x08011273
 801102c:	08011273 	.word	0x08011273
 8011030:	08011067 	.word	0x08011067
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011034:	4b94      	ldr	r3, [pc, #592]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f003 0320 	and.w	r3, r3, #32
 801103c:	2b00      	cmp	r3, #0
 801103e:	d009      	beq.n	8011054 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011040:	4b91      	ldr	r3, [pc, #580]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	08db      	lsrs	r3, r3, #3
 8011046:	f003 0303 	and.w	r3, r3, #3
 801104a:	4a90      	ldr	r2, [pc, #576]	; (801128c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801104c:	fa22 f303 	lsr.w	r3, r2, r3
 8011050:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8011052:	e111      	b.n	8011278 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011054:	4b8d      	ldr	r3, [pc, #564]	; (801128c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011056:	61bb      	str	r3, [r7, #24]
    break;
 8011058:	e10e      	b.n	8011278 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 801105a:	4b8d      	ldr	r3, [pc, #564]	; (8011290 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801105c:	61bb      	str	r3, [r7, #24]
    break;
 801105e:	e10b      	b.n	8011278 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8011060:	4b8c      	ldr	r3, [pc, #560]	; (8011294 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011062:	61bb      	str	r3, [r7, #24]
    break;
 8011064:	e108      	b.n	8011278 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011066:	4b88      	ldr	r3, [pc, #544]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801106a:	f003 0303 	and.w	r3, r3, #3
 801106e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8011070:	4b85      	ldr	r3, [pc, #532]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011074:	091b      	lsrs	r3, r3, #4
 8011076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801107a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 801107c:	4b82      	ldr	r3, [pc, #520]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011080:	f003 0301 	and.w	r3, r3, #1
 8011084:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8011086:	4b80      	ldr	r3, [pc, #512]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801108a:	08db      	lsrs	r3, r3, #3
 801108c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011090:	68fa      	ldr	r2, [r7, #12]
 8011092:	fb02 f303 	mul.w	r3, r2, r3
 8011096:	ee07 3a90 	vmov	s15, r3
 801109a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801109e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f000 80e1 	beq.w	801126c <HAL_RCC_GetSysClockFreq+0x2b8>
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	2b02      	cmp	r3, #2
 80110ae:	f000 8083 	beq.w	80111b8 <HAL_RCC_GetSysClockFreq+0x204>
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	2b02      	cmp	r3, #2
 80110b6:	f200 80a1 	bhi.w	80111fc <HAL_RCC_GetSysClockFreq+0x248>
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d003      	beq.n	80110c8 <HAL_RCC_GetSysClockFreq+0x114>
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	2b01      	cmp	r3, #1
 80110c4:	d056      	beq.n	8011174 <HAL_RCC_GetSysClockFreq+0x1c0>
 80110c6:	e099      	b.n	80111fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80110c8:	4b6f      	ldr	r3, [pc, #444]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f003 0320 	and.w	r3, r3, #32
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d02d      	beq.n	8011130 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80110d4:	4b6c      	ldr	r3, [pc, #432]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	08db      	lsrs	r3, r3, #3
 80110da:	f003 0303 	and.w	r3, r3, #3
 80110de:	4a6b      	ldr	r2, [pc, #428]	; (801128c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80110e0:	fa22 f303 	lsr.w	r3, r2, r3
 80110e4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	ee07 3a90 	vmov	s15, r3
 80110ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	ee07 3a90 	vmov	s15, r3
 80110f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110fe:	4b62      	ldr	r3, [pc, #392]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011106:	ee07 3a90 	vmov	s15, r3
 801110a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801110e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011112:	eddf 5a61 	vldr	s11, [pc, #388]	; 8011298 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801111a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801111e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011126:	ee67 7a27 	vmul.f32	s15, s14, s15
 801112a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 801112e:	e087      	b.n	8011240 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	ee07 3a90 	vmov	s15, r3
 8011136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801113a:	eddf 6a58 	vldr	s13, [pc, #352]	; 801129c <HAL_RCC_GetSysClockFreq+0x2e8>
 801113e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011142:	4b51      	ldr	r3, [pc, #324]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801114a:	ee07 3a90 	vmov	s15, r3
 801114e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011152:	ed97 6a02 	vldr	s12, [r7, #8]
 8011156:	eddf 5a50 	vldr	s11, [pc, #320]	; 8011298 <HAL_RCC_GetSysClockFreq+0x2e4>
 801115a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801115e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801116a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801116e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011172:	e065      	b.n	8011240 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	ee07 3a90 	vmov	s15, r3
 801117a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801117e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80112a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011186:	4b40      	ldr	r3, [pc, #256]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801118a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801118e:	ee07 3a90 	vmov	s15, r3
 8011192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011196:	ed97 6a02 	vldr	s12, [r7, #8]
 801119a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8011298 <HAL_RCC_GetSysClockFreq+0x2e4>
 801119e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80111b6:	e043      	b.n	8011240 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	ee07 3a90 	vmov	s15, r3
 80111be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80112a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80111c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111ca:	4b2f      	ldr	r3, [pc, #188]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80111cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111d2:	ee07 3a90 	vmov	s15, r3
 80111d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111da:	ed97 6a02 	vldr	s12, [r7, #8]
 80111de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8011298 <HAL_RCC_GetSysClockFreq+0x2e4>
 80111e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80111fa:	e021      	b.n	8011240 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	ee07 3a90 	vmov	s15, r3
 8011202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011206:	eddf 6a26 	vldr	s13, [pc, #152]	; 80112a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801120a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801120e:	4b1e      	ldr	r3, [pc, #120]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011216:	ee07 3a90 	vmov	s15, r3
 801121a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801121e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011222:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8011298 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801122a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801122e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011236:	ee67 7a27 	vmul.f32	s15, s14, s15
 801123a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801123e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8011240:	4b11      	ldr	r3, [pc, #68]	; (8011288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011244:	0a5b      	lsrs	r3, r3, #9
 8011246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801124a:	3301      	adds	r3, #1
 801124c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	ee07 3a90 	vmov	s15, r3
 8011254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011258:	edd7 6a07 	vldr	s13, [r7, #28]
 801125c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011264:	ee17 3a90 	vmov	r3, s15
 8011268:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 801126a:	e005      	b.n	8011278 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 801126c:	2300      	movs	r3, #0
 801126e:	61bb      	str	r3, [r7, #24]
    break;
 8011270:	e002      	b.n	8011278 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8011272:	4b07      	ldr	r3, [pc, #28]	; (8011290 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011274:	61bb      	str	r3, [r7, #24]
    break;
 8011276:	bf00      	nop
  }

  return sysclockfreq;
 8011278:	69bb      	ldr	r3, [r7, #24]
}
 801127a:	4618      	mov	r0, r3
 801127c:	3724      	adds	r7, #36	; 0x24
 801127e:	46bd      	mov	sp, r7
 8011280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	58024400 	.word	0x58024400
 801128c:	03d09000 	.word	0x03d09000
 8011290:	003d0900 	.word	0x003d0900
 8011294:	017d7840 	.word	0x017d7840
 8011298:	46000000 	.word	0x46000000
 801129c:	4c742400 	.word	0x4c742400
 80112a0:	4a742400 	.word	0x4a742400
 80112a4:	4bbebc20 	.word	0x4bbebc20

080112a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80112ae:	f7ff fe81 	bl	8010fb4 <HAL_RCC_GetSysClockFreq>
 80112b2:	4602      	mov	r2, r0
 80112b4:	4b10      	ldr	r3, [pc, #64]	; (80112f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80112b6:	699b      	ldr	r3, [r3, #24]
 80112b8:	0a1b      	lsrs	r3, r3, #8
 80112ba:	f003 030f 	and.w	r3, r3, #15
 80112be:	490f      	ldr	r1, [pc, #60]	; (80112fc <HAL_RCC_GetHCLKFreq+0x54>)
 80112c0:	5ccb      	ldrb	r3, [r1, r3]
 80112c2:	f003 031f 	and.w	r3, r3, #31
 80112c6:	fa22 f303 	lsr.w	r3, r2, r3
 80112ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80112cc:	4b0a      	ldr	r3, [pc, #40]	; (80112f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80112ce:	699b      	ldr	r3, [r3, #24]
 80112d0:	f003 030f 	and.w	r3, r3, #15
 80112d4:	4a09      	ldr	r2, [pc, #36]	; (80112fc <HAL_RCC_GetHCLKFreq+0x54>)
 80112d6:	5cd3      	ldrb	r3, [r2, r3]
 80112d8:	f003 031f 	and.w	r3, r3, #31
 80112dc:	687a      	ldr	r2, [r7, #4]
 80112de:	fa22 f303 	lsr.w	r3, r2, r3
 80112e2:	4a07      	ldr	r2, [pc, #28]	; (8011300 <HAL_RCC_GetHCLKFreq+0x58>)
 80112e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80112e6:	4a07      	ldr	r2, [pc, #28]	; (8011304 <HAL_RCC_GetHCLKFreq+0x5c>)
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80112ec:	4b04      	ldr	r3, [pc, #16]	; (8011300 <HAL_RCC_GetHCLKFreq+0x58>)
 80112ee:	681b      	ldr	r3, [r3, #0]
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	58024400 	.word	0x58024400
 80112fc:	08028070 	.word	0x08028070
 8011300:	24000014 	.word	0x24000014
 8011304:	24000010 	.word	0x24000010

08011308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801130c:	f7ff ffcc 	bl	80112a8 <HAL_RCC_GetHCLKFreq>
 8011310:	4602      	mov	r2, r0
 8011312:	4b06      	ldr	r3, [pc, #24]	; (801132c <HAL_RCC_GetPCLK1Freq+0x24>)
 8011314:	69db      	ldr	r3, [r3, #28]
 8011316:	091b      	lsrs	r3, r3, #4
 8011318:	f003 0307 	and.w	r3, r3, #7
 801131c:	4904      	ldr	r1, [pc, #16]	; (8011330 <HAL_RCC_GetPCLK1Freq+0x28>)
 801131e:	5ccb      	ldrb	r3, [r1, r3]
 8011320:	f003 031f 	and.w	r3, r3, #31
 8011324:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011328:	4618      	mov	r0, r3
 801132a:	bd80      	pop	{r7, pc}
 801132c:	58024400 	.word	0x58024400
 8011330:	08028070 	.word	0x08028070

08011334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011338:	f7ff ffb6 	bl	80112a8 <HAL_RCC_GetHCLKFreq>
 801133c:	4602      	mov	r2, r0
 801133e:	4b06      	ldr	r3, [pc, #24]	; (8011358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011340:	69db      	ldr	r3, [r3, #28]
 8011342:	0a1b      	lsrs	r3, r3, #8
 8011344:	f003 0307 	and.w	r3, r3, #7
 8011348:	4904      	ldr	r1, [pc, #16]	; (801135c <HAL_RCC_GetPCLK2Freq+0x28>)
 801134a:	5ccb      	ldrb	r3, [r1, r3]
 801134c:	f003 031f 	and.w	r3, r3, #31
 8011350:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011354:	4618      	mov	r0, r3
 8011356:	bd80      	pop	{r7, pc}
 8011358:	58024400 	.word	0x58024400
 801135c:	08028070 	.word	0x08028070

08011360 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8011360:	b480      	push	{r7}
 8011362:	b083      	sub	sp, #12
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	223f      	movs	r2, #63	; 0x3f
 801136e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011370:	4b1a      	ldr	r3, [pc, #104]	; (80113dc <HAL_RCC_GetClockConfig+0x7c>)
 8011372:	691b      	ldr	r3, [r3, #16]
 8011374:	f003 0207 	and.w	r2, r3, #7
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 801137c:	4b17      	ldr	r3, [pc, #92]	; (80113dc <HAL_RCC_GetClockConfig+0x7c>)
 801137e:	699b      	ldr	r3, [r3, #24]
 8011380:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8011388:	4b14      	ldr	r3, [pc, #80]	; (80113dc <HAL_RCC_GetClockConfig+0x7c>)
 801138a:	699b      	ldr	r3, [r3, #24]
 801138c:	f003 020f 	and.w	r2, r3, #15
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8011394:	4b11      	ldr	r3, [pc, #68]	; (80113dc <HAL_RCC_GetClockConfig+0x7c>)
 8011396:	699b      	ldr	r3, [r3, #24]
 8011398:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80113a0:	4b0e      	ldr	r3, [pc, #56]	; (80113dc <HAL_RCC_GetClockConfig+0x7c>)
 80113a2:	69db      	ldr	r3, [r3, #28]
 80113a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80113ac:	4b0b      	ldr	r3, [pc, #44]	; (80113dc <HAL_RCC_GetClockConfig+0x7c>)
 80113ae:	69db      	ldr	r3, [r3, #28]
 80113b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80113b8:	4b08      	ldr	r3, [pc, #32]	; (80113dc <HAL_RCC_GetClockConfig+0x7c>)
 80113ba:	6a1b      	ldr	r3, [r3, #32]
 80113bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80113c4:	4b06      	ldr	r3, [pc, #24]	; (80113e0 <HAL_RCC_GetClockConfig+0x80>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	f003 020f 	and.w	r2, r3, #15
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	601a      	str	r2, [r3, #0]
}
 80113d0:	bf00      	nop
 80113d2:	370c      	adds	r7, #12
 80113d4:	46bd      	mov	sp, r7
 80113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113da:	4770      	bx	lr
 80113dc:	58024400 	.word	0x58024400
 80113e0:	52002000 	.word	0x52002000

080113e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b086      	sub	sp, #24
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80113ec:	2300      	movs	r3, #0
 80113ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80113f0:	2300      	movs	r3, #0
 80113f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d03f      	beq.n	8011480 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011404:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011408:	d02a      	beq.n	8011460 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801140a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801140e:	d824      	bhi.n	801145a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011410:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011414:	d018      	beq.n	8011448 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801141a:	d81e      	bhi.n	801145a <HAL_RCCEx_PeriphCLKConfig+0x76>
 801141c:	2b00      	cmp	r3, #0
 801141e:	d003      	beq.n	8011428 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8011420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011424:	d007      	beq.n	8011436 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8011426:	e018      	b.n	801145a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011428:	4bab      	ldr	r3, [pc, #684]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142c:	4aaa      	ldr	r2, [pc, #680]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801142e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011434:	e015      	b.n	8011462 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	3304      	adds	r3, #4
 801143a:	2102      	movs	r1, #2
 801143c:	4618      	mov	r0, r3
 801143e:	f000 ff11 	bl	8012264 <RCCEx_PLL2_Config>
 8011442:	4603      	mov	r3, r0
 8011444:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011446:	e00c      	b.n	8011462 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	3324      	adds	r3, #36	; 0x24
 801144c:	2102      	movs	r1, #2
 801144e:	4618      	mov	r0, r3
 8011450:	f000 ffba 	bl	80123c8 <RCCEx_PLL3_Config>
 8011454:	4603      	mov	r3, r0
 8011456:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011458:	e003      	b.n	8011462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801145a:	2301      	movs	r3, #1
 801145c:	75fb      	strb	r3, [r7, #23]
      break;
 801145e:	e000      	b.n	8011462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8011460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011462:	7dfb      	ldrb	r3, [r7, #23]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d109      	bne.n	801147c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8011468:	4b9b      	ldr	r3, [pc, #620]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801146a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801146c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011474:	4998      	ldr	r1, [pc, #608]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011476:	4313      	orrs	r3, r2
 8011478:	650b      	str	r3, [r1, #80]	; 0x50
 801147a:	e001      	b.n	8011480 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801147c:	7dfb      	ldrb	r3, [r7, #23]
 801147e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011488:	2b00      	cmp	r3, #0
 801148a:	d03d      	beq.n	8011508 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011490:	2b04      	cmp	r3, #4
 8011492:	d826      	bhi.n	80114e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8011494:	a201      	add	r2, pc, #4	; (adr r2, 801149c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8011496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801149a:	bf00      	nop
 801149c:	080114b1 	.word	0x080114b1
 80114a0:	080114bf 	.word	0x080114bf
 80114a4:	080114d1 	.word	0x080114d1
 80114a8:	080114e9 	.word	0x080114e9
 80114ac:	080114e9 	.word	0x080114e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80114b0:	4b89      	ldr	r3, [pc, #548]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80114b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b4:	4a88      	ldr	r2, [pc, #544]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80114b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80114ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80114bc:	e015      	b.n	80114ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	3304      	adds	r3, #4
 80114c2:	2100      	movs	r1, #0
 80114c4:	4618      	mov	r0, r3
 80114c6:	f000 fecd 	bl	8012264 <RCCEx_PLL2_Config>
 80114ca:	4603      	mov	r3, r0
 80114cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80114ce:	e00c      	b.n	80114ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	3324      	adds	r3, #36	; 0x24
 80114d4:	2100      	movs	r1, #0
 80114d6:	4618      	mov	r0, r3
 80114d8:	f000 ff76 	bl	80123c8 <RCCEx_PLL3_Config>
 80114dc:	4603      	mov	r3, r0
 80114de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80114e0:	e003      	b.n	80114ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80114e2:	2301      	movs	r3, #1
 80114e4:	75fb      	strb	r3, [r7, #23]
      break;
 80114e6:	e000      	b.n	80114ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80114e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80114ea:	7dfb      	ldrb	r3, [r7, #23]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d109      	bne.n	8011504 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80114f0:	4b79      	ldr	r3, [pc, #484]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80114f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114f4:	f023 0207 	bic.w	r2, r3, #7
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114fc:	4976      	ldr	r1, [pc, #472]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80114fe:	4313      	orrs	r3, r2
 8011500:	650b      	str	r3, [r1, #80]	; 0x50
 8011502:	e001      	b.n	8011508 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011504:	7dfb      	ldrb	r3, [r7, #23]
 8011506:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011510:	2b00      	cmp	r3, #0
 8011512:	d042      	beq.n	801159a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801151c:	d02b      	beq.n	8011576 <HAL_RCCEx_PeriphCLKConfig+0x192>
 801151e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011522:	d825      	bhi.n	8011570 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011524:	2bc0      	cmp	r3, #192	; 0xc0
 8011526:	d028      	beq.n	801157a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8011528:	2bc0      	cmp	r3, #192	; 0xc0
 801152a:	d821      	bhi.n	8011570 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 801152c:	2b80      	cmp	r3, #128	; 0x80
 801152e:	d016      	beq.n	801155e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8011530:	2b80      	cmp	r3, #128	; 0x80
 8011532:	d81d      	bhi.n	8011570 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011534:	2b00      	cmp	r3, #0
 8011536:	d002      	beq.n	801153e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8011538:	2b40      	cmp	r3, #64	; 0x40
 801153a:	d007      	beq.n	801154c <HAL_RCCEx_PeriphCLKConfig+0x168>
 801153c:	e018      	b.n	8011570 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801153e:	4b66      	ldr	r3, [pc, #408]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011542:	4a65      	ldr	r2, [pc, #404]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011548:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801154a:	e017      	b.n	801157c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	3304      	adds	r3, #4
 8011550:	2100      	movs	r1, #0
 8011552:	4618      	mov	r0, r3
 8011554:	f000 fe86 	bl	8012264 <RCCEx_PLL2_Config>
 8011558:	4603      	mov	r3, r0
 801155a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801155c:	e00e      	b.n	801157c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	3324      	adds	r3, #36	; 0x24
 8011562:	2100      	movs	r1, #0
 8011564:	4618      	mov	r0, r3
 8011566:	f000 ff2f 	bl	80123c8 <RCCEx_PLL3_Config>
 801156a:	4603      	mov	r3, r0
 801156c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801156e:	e005      	b.n	801157c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011570:	2301      	movs	r3, #1
 8011572:	75fb      	strb	r3, [r7, #23]
      break;
 8011574:	e002      	b.n	801157c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8011576:	bf00      	nop
 8011578:	e000      	b.n	801157c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 801157a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801157c:	7dfb      	ldrb	r3, [r7, #23]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d109      	bne.n	8011596 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8011582:	4b55      	ldr	r3, [pc, #340]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011586:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801158e:	4952      	ldr	r1, [pc, #328]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011590:	4313      	orrs	r3, r2
 8011592:	650b      	str	r3, [r1, #80]	; 0x50
 8011594:	e001      	b.n	801159a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011596:	7dfb      	ldrb	r3, [r7, #23]
 8011598:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d049      	beq.n	801163a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80115ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80115b0:	d030      	beq.n	8011614 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80115b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80115b6:	d82a      	bhi.n	801160e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80115b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80115bc:	d02c      	beq.n	8011618 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80115be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80115c2:	d824      	bhi.n	801160e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80115c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80115c8:	d018      	beq.n	80115fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80115ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80115ce:	d81e      	bhi.n	801160e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d003      	beq.n	80115dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80115d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80115d8:	d007      	beq.n	80115ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80115da:	e018      	b.n	801160e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80115dc:	4b3e      	ldr	r3, [pc, #248]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80115de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115e0:	4a3d      	ldr	r2, [pc, #244]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80115e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80115e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80115e8:	e017      	b.n	801161a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	3304      	adds	r3, #4
 80115ee:	2100      	movs	r1, #0
 80115f0:	4618      	mov	r0, r3
 80115f2:	f000 fe37 	bl	8012264 <RCCEx_PLL2_Config>
 80115f6:	4603      	mov	r3, r0
 80115f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80115fa:	e00e      	b.n	801161a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	3324      	adds	r3, #36	; 0x24
 8011600:	2100      	movs	r1, #0
 8011602:	4618      	mov	r0, r3
 8011604:	f000 fee0 	bl	80123c8 <RCCEx_PLL3_Config>
 8011608:	4603      	mov	r3, r0
 801160a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801160c:	e005      	b.n	801161a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801160e:	2301      	movs	r3, #1
 8011610:	75fb      	strb	r3, [r7, #23]
      break;
 8011612:	e002      	b.n	801161a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011614:	bf00      	nop
 8011616:	e000      	b.n	801161a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011618:	bf00      	nop
    }

    if(ret == HAL_OK)
 801161a:	7dfb      	ldrb	r3, [r7, #23]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d10a      	bne.n	8011636 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011620:	4b2d      	ldr	r3, [pc, #180]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011624:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801162e:	492a      	ldr	r1, [pc, #168]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011630:	4313      	orrs	r3, r2
 8011632:	658b      	str	r3, [r1, #88]	; 0x58
 8011634:	e001      	b.n	801163a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011636:	7dfb      	ldrb	r3, [r7, #23]
 8011638:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011642:	2b00      	cmp	r3, #0
 8011644:	d04c      	beq.n	80116e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801164c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011650:	d030      	beq.n	80116b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8011652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011656:	d82a      	bhi.n	80116ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011658:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801165c:	d02c      	beq.n	80116b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 801165e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011662:	d824      	bhi.n	80116ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011664:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011668:	d018      	beq.n	801169c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 801166a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801166e:	d81e      	bhi.n	80116ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011670:	2b00      	cmp	r3, #0
 8011672:	d003      	beq.n	801167c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011678:	d007      	beq.n	801168a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801167a:	e018      	b.n	80116ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801167c:	4b16      	ldr	r3, [pc, #88]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011680:	4a15      	ldr	r2, [pc, #84]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011686:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011688:	e017      	b.n	80116ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	3304      	adds	r3, #4
 801168e:	2100      	movs	r1, #0
 8011690:	4618      	mov	r0, r3
 8011692:	f000 fde7 	bl	8012264 <RCCEx_PLL2_Config>
 8011696:	4603      	mov	r3, r0
 8011698:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801169a:	e00e      	b.n	80116ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	3324      	adds	r3, #36	; 0x24
 80116a0:	2100      	movs	r1, #0
 80116a2:	4618      	mov	r0, r3
 80116a4:	f000 fe90 	bl	80123c8 <RCCEx_PLL3_Config>
 80116a8:	4603      	mov	r3, r0
 80116aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80116ac:	e005      	b.n	80116ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80116ae:	2301      	movs	r3, #1
 80116b0:	75fb      	strb	r3, [r7, #23]
      break;
 80116b2:	e002      	b.n	80116ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80116b4:	bf00      	nop
 80116b6:	e000      	b.n	80116ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80116b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80116ba:	7dfb      	ldrb	r3, [r7, #23]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d10d      	bne.n	80116dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80116c0:	4b05      	ldr	r3, [pc, #20]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80116c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80116ce:	4902      	ldr	r1, [pc, #8]	; (80116d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80116d0:	4313      	orrs	r3, r2
 80116d2:	658b      	str	r3, [r1, #88]	; 0x58
 80116d4:	e004      	b.n	80116e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80116d6:	bf00      	nop
 80116d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80116dc:	7dfb      	ldrb	r3, [r7, #23]
 80116de:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d032      	beq.n	8011752 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80116f0:	2b30      	cmp	r3, #48	; 0x30
 80116f2:	d01c      	beq.n	801172e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80116f4:	2b30      	cmp	r3, #48	; 0x30
 80116f6:	d817      	bhi.n	8011728 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80116f8:	2b20      	cmp	r3, #32
 80116fa:	d00c      	beq.n	8011716 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80116fc:	2b20      	cmp	r3, #32
 80116fe:	d813      	bhi.n	8011728 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8011700:	2b00      	cmp	r3, #0
 8011702:	d016      	beq.n	8011732 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8011704:	2b10      	cmp	r3, #16
 8011706:	d10f      	bne.n	8011728 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011708:	4baf      	ldr	r3, [pc, #700]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801170c:	4aae      	ldr	r2, [pc, #696]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801170e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8011714:	e00e      	b.n	8011734 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	3304      	adds	r3, #4
 801171a:	2102      	movs	r1, #2
 801171c:	4618      	mov	r0, r3
 801171e:	f000 fda1 	bl	8012264 <RCCEx_PLL2_Config>
 8011722:	4603      	mov	r3, r0
 8011724:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8011726:	e005      	b.n	8011734 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011728:	2301      	movs	r3, #1
 801172a:	75fb      	strb	r3, [r7, #23]
      break;
 801172c:	e002      	b.n	8011734 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 801172e:	bf00      	nop
 8011730:	e000      	b.n	8011734 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8011732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011734:	7dfb      	ldrb	r3, [r7, #23]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d109      	bne.n	801174e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801173a:	4ba3      	ldr	r3, [pc, #652]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801173e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011746:	49a0      	ldr	r1, [pc, #640]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011748:	4313      	orrs	r3, r2
 801174a:	64cb      	str	r3, [r1, #76]	; 0x4c
 801174c:	e001      	b.n	8011752 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801174e:	7dfb      	ldrb	r3, [r7, #23]
 8011750:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801175a:	2b00      	cmp	r3, #0
 801175c:	d047      	beq.n	80117ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011766:	d030      	beq.n	80117ca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8011768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801176c:	d82a      	bhi.n	80117c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 801176e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011772:	d02c      	beq.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8011774:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011778:	d824      	bhi.n	80117c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 801177a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801177e:	d018      	beq.n	80117b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8011780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011784:	d81e      	bhi.n	80117c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8011786:	2b00      	cmp	r3, #0
 8011788:	d003      	beq.n	8011792 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 801178a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801178e:	d007      	beq.n	80117a0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8011790:	e018      	b.n	80117c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011792:	4b8d      	ldr	r3, [pc, #564]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011796:	4a8c      	ldr	r2, [pc, #560]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801179c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801179e:	e017      	b.n	80117d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	3304      	adds	r3, #4
 80117a4:	2100      	movs	r1, #0
 80117a6:	4618      	mov	r0, r3
 80117a8:	f000 fd5c 	bl	8012264 <RCCEx_PLL2_Config>
 80117ac:	4603      	mov	r3, r0
 80117ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80117b0:	e00e      	b.n	80117d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	3324      	adds	r3, #36	; 0x24
 80117b6:	2100      	movs	r1, #0
 80117b8:	4618      	mov	r0, r3
 80117ba:	f000 fe05 	bl	80123c8 <RCCEx_PLL3_Config>
 80117be:	4603      	mov	r3, r0
 80117c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80117c2:	e005      	b.n	80117d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80117c4:	2301      	movs	r3, #1
 80117c6:	75fb      	strb	r3, [r7, #23]
      break;
 80117c8:	e002      	b.n	80117d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80117ca:	bf00      	nop
 80117cc:	e000      	b.n	80117d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80117ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80117d0:	7dfb      	ldrb	r3, [r7, #23]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d109      	bne.n	80117ea <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80117d6:	4b7c      	ldr	r3, [pc, #496]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80117d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117da:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117e2:	4979      	ldr	r1, [pc, #484]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80117e4:	4313      	orrs	r3, r2
 80117e6:	650b      	str	r3, [r1, #80]	; 0x50
 80117e8:	e001      	b.n	80117ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80117ea:	7dfb      	ldrb	r3, [r7, #23]
 80117ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d049      	beq.n	801188e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80117fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011802:	d02e      	beq.n	8011862 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8011804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011808:	d828      	bhi.n	801185c <HAL_RCCEx_PeriphCLKConfig+0x478>
 801180a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801180e:	d02a      	beq.n	8011866 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8011810:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011814:	d822      	bhi.n	801185c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8011816:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801181a:	d026      	beq.n	801186a <HAL_RCCEx_PeriphCLKConfig+0x486>
 801181c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011820:	d81c      	bhi.n	801185c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8011822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011826:	d010      	beq.n	801184a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8011828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801182c:	d816      	bhi.n	801185c <HAL_RCCEx_PeriphCLKConfig+0x478>
 801182e:	2b00      	cmp	r3, #0
 8011830:	d01d      	beq.n	801186e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8011832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011836:	d111      	bne.n	801185c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	3304      	adds	r3, #4
 801183c:	2101      	movs	r1, #1
 801183e:	4618      	mov	r0, r3
 8011840:	f000 fd10 	bl	8012264 <RCCEx_PLL2_Config>
 8011844:	4603      	mov	r3, r0
 8011846:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8011848:	e012      	b.n	8011870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	3324      	adds	r3, #36	; 0x24
 801184e:	2101      	movs	r1, #1
 8011850:	4618      	mov	r0, r3
 8011852:	f000 fdb9 	bl	80123c8 <RCCEx_PLL3_Config>
 8011856:	4603      	mov	r3, r0
 8011858:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801185a:	e009      	b.n	8011870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801185c:	2301      	movs	r3, #1
 801185e:	75fb      	strb	r3, [r7, #23]
      break;
 8011860:	e006      	b.n	8011870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8011862:	bf00      	nop
 8011864:	e004      	b.n	8011870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8011866:	bf00      	nop
 8011868:	e002      	b.n	8011870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 801186a:	bf00      	nop
 801186c:	e000      	b.n	8011870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 801186e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011870:	7dfb      	ldrb	r3, [r7, #23]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d109      	bne.n	801188a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011876:	4b54      	ldr	r3, [pc, #336]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801187a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011882:	4951      	ldr	r1, [pc, #324]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011884:	4313      	orrs	r3, r2
 8011886:	650b      	str	r3, [r1, #80]	; 0x50
 8011888:	e001      	b.n	801188e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801188a:	7dfb      	ldrb	r3, [r7, #23]
 801188c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011896:	2b00      	cmp	r3, #0
 8011898:	d04b      	beq.n	8011932 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80118a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80118a4:	d02e      	beq.n	8011904 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80118a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80118aa:	d828      	bhi.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80118ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80118b0:	d02a      	beq.n	8011908 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80118b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80118b6:	d822      	bhi.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80118b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80118bc:	d026      	beq.n	801190c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80118be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80118c2:	d81c      	bhi.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80118c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80118c8:	d010      	beq.n	80118ec <HAL_RCCEx_PeriphCLKConfig+0x508>
 80118ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80118ce:	d816      	bhi.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d01d      	beq.n	8011910 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80118d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80118d8:	d111      	bne.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	3304      	adds	r3, #4
 80118de:	2101      	movs	r1, #1
 80118e0:	4618      	mov	r0, r3
 80118e2:	f000 fcbf 	bl	8012264 <RCCEx_PLL2_Config>
 80118e6:	4603      	mov	r3, r0
 80118e8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80118ea:	e012      	b.n	8011912 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	3324      	adds	r3, #36	; 0x24
 80118f0:	2101      	movs	r1, #1
 80118f2:	4618      	mov	r0, r3
 80118f4:	f000 fd68 	bl	80123c8 <RCCEx_PLL3_Config>
 80118f8:	4603      	mov	r3, r0
 80118fa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80118fc:	e009      	b.n	8011912 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80118fe:	2301      	movs	r3, #1
 8011900:	75fb      	strb	r3, [r7, #23]
      break;
 8011902:	e006      	b.n	8011912 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8011904:	bf00      	nop
 8011906:	e004      	b.n	8011912 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8011908:	bf00      	nop
 801190a:	e002      	b.n	8011912 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 801190c:	bf00      	nop
 801190e:	e000      	b.n	8011912 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8011910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011912:	7dfb      	ldrb	r3, [r7, #23]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d10a      	bne.n	801192e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8011918:	4b2b      	ldr	r3, [pc, #172]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801191c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011926:	4928      	ldr	r1, [pc, #160]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011928:	4313      	orrs	r3, r2
 801192a:	658b      	str	r3, [r1, #88]	; 0x58
 801192c:	e001      	b.n	8011932 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801192e:	7dfb      	ldrb	r3, [r7, #23]
 8011930:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801193a:	2b00      	cmp	r3, #0
 801193c:	d02f      	beq.n	801199e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011946:	d00e      	beq.n	8011966 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8011948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801194c:	d814      	bhi.n	8011978 <HAL_RCCEx_PeriphCLKConfig+0x594>
 801194e:	2b00      	cmp	r3, #0
 8011950:	d015      	beq.n	801197e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8011952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011956:	d10f      	bne.n	8011978 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011958:	4b1b      	ldr	r3, [pc, #108]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801195c:	4a1a      	ldr	r2, [pc, #104]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801195e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011962:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011964:	e00c      	b.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	3304      	adds	r3, #4
 801196a:	2101      	movs	r1, #1
 801196c:	4618      	mov	r0, r3
 801196e:	f000 fc79 	bl	8012264 <RCCEx_PLL2_Config>
 8011972:	4603      	mov	r3, r0
 8011974:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011976:	e003      	b.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011978:	2301      	movs	r3, #1
 801197a:	75fb      	strb	r3, [r7, #23]
      break;
 801197c:	e000      	b.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 801197e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011980:	7dfb      	ldrb	r3, [r7, #23]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d109      	bne.n	801199a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011986:	4b10      	ldr	r3, [pc, #64]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801198a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011992:	490d      	ldr	r1, [pc, #52]	; (80119c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011994:	4313      	orrs	r3, r2
 8011996:	650b      	str	r3, [r1, #80]	; 0x50
 8011998:	e001      	b.n	801199e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801199a:	7dfb      	ldrb	r3, [r7, #23]
 801199c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d033      	beq.n	8011a12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119ae:	2b03      	cmp	r3, #3
 80119b0:	d81c      	bhi.n	80119ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80119b2:	a201      	add	r2, pc, #4	; (adr r2, 80119b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80119b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b8:	080119f3 	.word	0x080119f3
 80119bc:	080119cd 	.word	0x080119cd
 80119c0:	080119db 	.word	0x080119db
 80119c4:	080119f3 	.word	0x080119f3
 80119c8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80119cc:	4bb8      	ldr	r3, [pc, #736]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80119ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119d0:	4ab7      	ldr	r2, [pc, #732]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80119d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80119d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80119d8:	e00c      	b.n	80119f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	3304      	adds	r3, #4
 80119de:	2102      	movs	r1, #2
 80119e0:	4618      	mov	r0, r3
 80119e2:	f000 fc3f 	bl	8012264 <RCCEx_PLL2_Config>
 80119e6:	4603      	mov	r3, r0
 80119e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80119ea:	e003      	b.n	80119f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80119ec:	2301      	movs	r3, #1
 80119ee:	75fb      	strb	r3, [r7, #23]
      break;
 80119f0:	e000      	b.n	80119f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80119f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80119f4:	7dfb      	ldrb	r3, [r7, #23]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d109      	bne.n	8011a0e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80119fa:	4bad      	ldr	r3, [pc, #692]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80119fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80119fe:	f023 0203 	bic.w	r2, r3, #3
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a06:	49aa      	ldr	r1, [pc, #680]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011a08:	4313      	orrs	r3, r2
 8011a0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011a0c:	e001      	b.n	8011a12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a0e:	7dfb      	ldrb	r3, [r7, #23]
 8011a10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	f000 8086 	beq.w	8011b2c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011a20:	4ba4      	ldr	r3, [pc, #656]	; (8011cb4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	4aa3      	ldr	r2, [pc, #652]	; (8011cb4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8011a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011a2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011a2c:	f7fb fade 	bl	800cfec <HAL_GetTick>
 8011a30:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011a32:	e009      	b.n	8011a48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011a34:	f7fb fada 	bl	800cfec <HAL_GetTick>
 8011a38:	4602      	mov	r2, r0
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	1ad3      	subs	r3, r2, r3
 8011a3e:	2b64      	cmp	r3, #100	; 0x64
 8011a40:	d902      	bls.n	8011a48 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8011a42:	2303      	movs	r3, #3
 8011a44:	75fb      	strb	r3, [r7, #23]
        break;
 8011a46:	e005      	b.n	8011a54 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011a48:	4b9a      	ldr	r3, [pc, #616]	; (8011cb4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d0ef      	beq.n	8011a34 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8011a54:	7dfb      	ldrb	r3, [r7, #23]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d166      	bne.n	8011b28 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011a5a:	4b95      	ldr	r3, [pc, #596]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011a5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011a64:	4053      	eors	r3, r2
 8011a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d013      	beq.n	8011a96 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011a6e:	4b90      	ldr	r3, [pc, #576]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a76:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011a78:	4b8d      	ldr	r3, [pc, #564]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a7c:	4a8c      	ldr	r2, [pc, #560]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011a82:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011a84:	4b8a      	ldr	r3, [pc, #552]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a88:	4a89      	ldr	r2, [pc, #548]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011a8e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8011a90:	4a87      	ldr	r2, [pc, #540]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011aa0:	d115      	bne.n	8011ace <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011aa2:	f7fb faa3 	bl	800cfec <HAL_GetTick>
 8011aa6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011aa8:	e00b      	b.n	8011ac2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011aaa:	f7fb fa9f 	bl	800cfec <HAL_GetTick>
 8011aae:	4602      	mov	r2, r0
 8011ab0:	693b      	ldr	r3, [r7, #16]
 8011ab2:	1ad3      	subs	r3, r2, r3
 8011ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d902      	bls.n	8011ac2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8011abc:	2303      	movs	r3, #3
 8011abe:	75fb      	strb	r3, [r7, #23]
            break;
 8011ac0:	e005      	b.n	8011ace <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011ac2:	4b7b      	ldr	r3, [pc, #492]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ac6:	f003 0302 	and.w	r3, r3, #2
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d0ed      	beq.n	8011aaa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8011ace:	7dfb      	ldrb	r3, [r7, #23]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d126      	bne.n	8011b22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011ae2:	d10d      	bne.n	8011b00 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8011ae4:	4b72      	ldr	r3, [pc, #456]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011ae6:	691b      	ldr	r3, [r3, #16]
 8011ae8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011af2:	0919      	lsrs	r1, r3, #4
 8011af4:	4b70      	ldr	r3, [pc, #448]	; (8011cb8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8011af6:	400b      	ands	r3, r1
 8011af8:	496d      	ldr	r1, [pc, #436]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011afa:	4313      	orrs	r3, r2
 8011afc:	610b      	str	r3, [r1, #16]
 8011afe:	e005      	b.n	8011b0c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8011b00:	4b6b      	ldr	r3, [pc, #428]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011b02:	691b      	ldr	r3, [r3, #16]
 8011b04:	4a6a      	ldr	r2, [pc, #424]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011b06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011b0a:	6113      	str	r3, [r2, #16]
 8011b0c:	4b68      	ldr	r3, [pc, #416]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011b0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011b1a:	4965      	ldr	r1, [pc, #404]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011b1c:	4313      	orrs	r3, r2
 8011b1e:	670b      	str	r3, [r1, #112]	; 0x70
 8011b20:	e004      	b.n	8011b2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011b22:	7dfb      	ldrb	r3, [r7, #23]
 8011b24:	75bb      	strb	r3, [r7, #22]
 8011b26:	e001      	b.n	8011b2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b28:	7dfb      	ldrb	r3, [r7, #23]
 8011b2a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	f003 0301 	and.w	r3, r3, #1
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d07e      	beq.n	8011c36 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b3c:	2b28      	cmp	r3, #40	; 0x28
 8011b3e:	d867      	bhi.n	8011c10 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8011b40:	a201      	add	r2, pc, #4	; (adr r2, 8011b48 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8011b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b46:	bf00      	nop
 8011b48:	08011c17 	.word	0x08011c17
 8011b4c:	08011c11 	.word	0x08011c11
 8011b50:	08011c11 	.word	0x08011c11
 8011b54:	08011c11 	.word	0x08011c11
 8011b58:	08011c11 	.word	0x08011c11
 8011b5c:	08011c11 	.word	0x08011c11
 8011b60:	08011c11 	.word	0x08011c11
 8011b64:	08011c11 	.word	0x08011c11
 8011b68:	08011bed 	.word	0x08011bed
 8011b6c:	08011c11 	.word	0x08011c11
 8011b70:	08011c11 	.word	0x08011c11
 8011b74:	08011c11 	.word	0x08011c11
 8011b78:	08011c11 	.word	0x08011c11
 8011b7c:	08011c11 	.word	0x08011c11
 8011b80:	08011c11 	.word	0x08011c11
 8011b84:	08011c11 	.word	0x08011c11
 8011b88:	08011bff 	.word	0x08011bff
 8011b8c:	08011c11 	.word	0x08011c11
 8011b90:	08011c11 	.word	0x08011c11
 8011b94:	08011c11 	.word	0x08011c11
 8011b98:	08011c11 	.word	0x08011c11
 8011b9c:	08011c11 	.word	0x08011c11
 8011ba0:	08011c11 	.word	0x08011c11
 8011ba4:	08011c11 	.word	0x08011c11
 8011ba8:	08011c17 	.word	0x08011c17
 8011bac:	08011c11 	.word	0x08011c11
 8011bb0:	08011c11 	.word	0x08011c11
 8011bb4:	08011c11 	.word	0x08011c11
 8011bb8:	08011c11 	.word	0x08011c11
 8011bbc:	08011c11 	.word	0x08011c11
 8011bc0:	08011c11 	.word	0x08011c11
 8011bc4:	08011c11 	.word	0x08011c11
 8011bc8:	08011c17 	.word	0x08011c17
 8011bcc:	08011c11 	.word	0x08011c11
 8011bd0:	08011c11 	.word	0x08011c11
 8011bd4:	08011c11 	.word	0x08011c11
 8011bd8:	08011c11 	.word	0x08011c11
 8011bdc:	08011c11 	.word	0x08011c11
 8011be0:	08011c11 	.word	0x08011c11
 8011be4:	08011c11 	.word	0x08011c11
 8011be8:	08011c17 	.word	0x08011c17
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	3304      	adds	r3, #4
 8011bf0:	2101      	movs	r1, #1
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f000 fb36 	bl	8012264 <RCCEx_PLL2_Config>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8011bfc:	e00c      	b.n	8011c18 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	3324      	adds	r3, #36	; 0x24
 8011c02:	2101      	movs	r1, #1
 8011c04:	4618      	mov	r0, r3
 8011c06:	f000 fbdf 	bl	80123c8 <RCCEx_PLL3_Config>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8011c0e:	e003      	b.n	8011c18 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011c10:	2301      	movs	r3, #1
 8011c12:	75fb      	strb	r3, [r7, #23]
      break;
 8011c14:	e000      	b.n	8011c18 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8011c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011c18:	7dfb      	ldrb	r3, [r7, #23]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d109      	bne.n	8011c32 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8011c1e:	4b24      	ldr	r3, [pc, #144]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c22:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c2a:	4921      	ldr	r1, [pc, #132]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011c2c:	4313      	orrs	r3, r2
 8011c2e:	654b      	str	r3, [r1, #84]	; 0x54
 8011c30:	e001      	b.n	8011c36 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c32:	7dfb      	ldrb	r3, [r7, #23]
 8011c34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	f003 0302 	and.w	r3, r3, #2
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d03e      	beq.n	8011cc0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c46:	2b05      	cmp	r3, #5
 8011c48:	d820      	bhi.n	8011c8c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8011c4a:	a201      	add	r2, pc, #4	; (adr r2, 8011c50 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8011c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c50:	08011c93 	.word	0x08011c93
 8011c54:	08011c69 	.word	0x08011c69
 8011c58:	08011c7b 	.word	0x08011c7b
 8011c5c:	08011c93 	.word	0x08011c93
 8011c60:	08011c93 	.word	0x08011c93
 8011c64:	08011c93 	.word	0x08011c93
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	3304      	adds	r3, #4
 8011c6c:	2101      	movs	r1, #1
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f000 faf8 	bl	8012264 <RCCEx_PLL2_Config>
 8011c74:	4603      	mov	r3, r0
 8011c76:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8011c78:	e00c      	b.n	8011c94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	3324      	adds	r3, #36	; 0x24
 8011c7e:	2101      	movs	r1, #1
 8011c80:	4618      	mov	r0, r3
 8011c82:	f000 fba1 	bl	80123c8 <RCCEx_PLL3_Config>
 8011c86:	4603      	mov	r3, r0
 8011c88:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8011c8a:	e003      	b.n	8011c94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8011c90:	e000      	b.n	8011c94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8011c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011c94:	7dfb      	ldrb	r3, [r7, #23]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d110      	bne.n	8011cbc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8011c9a:	4b05      	ldr	r3, [pc, #20]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c9e:	f023 0207 	bic.w	r2, r3, #7
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ca6:	4902      	ldr	r1, [pc, #8]	; (8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011ca8:	4313      	orrs	r3, r2
 8011caa:	654b      	str	r3, [r1, #84]	; 0x54
 8011cac:	e008      	b.n	8011cc0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8011cae:	bf00      	nop
 8011cb0:	58024400 	.word	0x58024400
 8011cb4:	58024800 	.word	0x58024800
 8011cb8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011cbc:	7dfb      	ldrb	r3, [r7, #23]
 8011cbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	f003 0304 	and.w	r3, r3, #4
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d039      	beq.n	8011d40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cd2:	2b05      	cmp	r3, #5
 8011cd4:	d820      	bhi.n	8011d18 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8011cd6:	a201      	add	r2, pc, #4	; (adr r2, 8011cdc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8011cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cdc:	08011d1f 	.word	0x08011d1f
 8011ce0:	08011cf5 	.word	0x08011cf5
 8011ce4:	08011d07 	.word	0x08011d07
 8011ce8:	08011d1f 	.word	0x08011d1f
 8011cec:	08011d1f 	.word	0x08011d1f
 8011cf0:	08011d1f 	.word	0x08011d1f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	3304      	adds	r3, #4
 8011cf8:	2101      	movs	r1, #1
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f000 fab2 	bl	8012264 <RCCEx_PLL2_Config>
 8011d00:	4603      	mov	r3, r0
 8011d02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8011d04:	e00c      	b.n	8011d20 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	3324      	adds	r3, #36	; 0x24
 8011d0a:	2101      	movs	r1, #1
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f000 fb5b 	bl	80123c8 <RCCEx_PLL3_Config>
 8011d12:	4603      	mov	r3, r0
 8011d14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8011d16:	e003      	b.n	8011d20 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011d18:	2301      	movs	r3, #1
 8011d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8011d1c:	e000      	b.n	8011d20 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8011d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011d20:	7dfb      	ldrb	r3, [r7, #23]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d10a      	bne.n	8011d3c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011d26:	4bb7      	ldr	r3, [pc, #732]	; (8012004 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d2a:	f023 0207 	bic.w	r2, r3, #7
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d34:	49b3      	ldr	r1, [pc, #716]	; (8012004 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011d36:	4313      	orrs	r3, r2
 8011d38:	658b      	str	r3, [r1, #88]	; 0x58
 8011d3a:	e001      	b.n	8011d40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d3c:	7dfb      	ldrb	r3, [r7, #23]
 8011d3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f003 0320 	and.w	r3, r3, #32
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d04b      	beq.n	8011de4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011d56:	d02e      	beq.n	8011db6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8011d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011d5c:	d828      	bhi.n	8011db0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8011d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d62:	d02a      	beq.n	8011dba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8011d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d68:	d822      	bhi.n	8011db0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8011d6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011d6e:	d026      	beq.n	8011dbe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8011d70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011d74:	d81c      	bhi.n	8011db0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8011d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d7a:	d010      	beq.n	8011d9e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8011d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d80:	d816      	bhi.n	8011db0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d01d      	beq.n	8011dc2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8011d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d8a:	d111      	bne.n	8011db0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	3304      	adds	r3, #4
 8011d90:	2100      	movs	r1, #0
 8011d92:	4618      	mov	r0, r3
 8011d94:	f000 fa66 	bl	8012264 <RCCEx_PLL2_Config>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8011d9c:	e012      	b.n	8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	3324      	adds	r3, #36	; 0x24
 8011da2:	2102      	movs	r1, #2
 8011da4:	4618      	mov	r0, r3
 8011da6:	f000 fb0f 	bl	80123c8 <RCCEx_PLL3_Config>
 8011daa:	4603      	mov	r3, r0
 8011dac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8011dae:	e009      	b.n	8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011db0:	2301      	movs	r3, #1
 8011db2:	75fb      	strb	r3, [r7, #23]
      break;
 8011db4:	e006      	b.n	8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8011db6:	bf00      	nop
 8011db8:	e004      	b.n	8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8011dba:	bf00      	nop
 8011dbc:	e002      	b.n	8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8011dbe:	bf00      	nop
 8011dc0:	e000      	b.n	8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8011dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011dc4:	7dfb      	ldrb	r3, [r7, #23]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d10a      	bne.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011dca:	4b8e      	ldr	r3, [pc, #568]	; (8012004 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011dd8:	498a      	ldr	r1, [pc, #552]	; (8012004 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011dda:	4313      	orrs	r3, r2
 8011ddc:	654b      	str	r3, [r1, #84]	; 0x54
 8011dde:	e001      	b.n	8011de4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011de0:	7dfb      	ldrb	r3, [r7, #23]
 8011de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d04b      	beq.n	8011e88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011df6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8011dfa:	d02e      	beq.n	8011e5a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8011dfc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8011e00:	d828      	bhi.n	8011e54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8011e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e06:	d02a      	beq.n	8011e5e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8011e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e0c:	d822      	bhi.n	8011e54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8011e0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011e12:	d026      	beq.n	8011e62 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8011e14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011e18:	d81c      	bhi.n	8011e54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8011e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e1e:	d010      	beq.n	8011e42 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8011e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e24:	d816      	bhi.n	8011e54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d01d      	beq.n	8011e66 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8011e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011e2e:	d111      	bne.n	8011e54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	3304      	adds	r3, #4
 8011e34:	2100      	movs	r1, #0
 8011e36:	4618      	mov	r0, r3
 8011e38:	f000 fa14 	bl	8012264 <RCCEx_PLL2_Config>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8011e40:	e012      	b.n	8011e68 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	3324      	adds	r3, #36	; 0x24
 8011e46:	2102      	movs	r1, #2
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f000 fabd 	bl	80123c8 <RCCEx_PLL3_Config>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8011e52:	e009      	b.n	8011e68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011e54:	2301      	movs	r3, #1
 8011e56:	75fb      	strb	r3, [r7, #23]
      break;
 8011e58:	e006      	b.n	8011e68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8011e5a:	bf00      	nop
 8011e5c:	e004      	b.n	8011e68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8011e5e:	bf00      	nop
 8011e60:	e002      	b.n	8011e68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8011e62:	bf00      	nop
 8011e64:	e000      	b.n	8011e68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8011e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011e68:	7dfb      	ldrb	r3, [r7, #23]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d10a      	bne.n	8011e84 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011e6e:	4b65      	ldr	r3, [pc, #404]	; (8012004 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011e7c:	4961      	ldr	r1, [pc, #388]	; (8012004 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011e7e:	4313      	orrs	r3, r2
 8011e80:	658b      	str	r3, [r1, #88]	; 0x58
 8011e82:	e001      	b.n	8011e88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e84:	7dfb      	ldrb	r3, [r7, #23]
 8011e86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d04b      	beq.n	8011f2c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011e9a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011e9e:	d02e      	beq.n	8011efe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8011ea0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011ea4:	d828      	bhi.n	8011ef8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8011ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011eaa:	d02a      	beq.n	8011f02 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8011eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011eb0:	d822      	bhi.n	8011ef8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8011eb2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011eb6:	d026      	beq.n	8011f06 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8011eb8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011ebc:	d81c      	bhi.n	8011ef8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8011ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ec2:	d010      	beq.n	8011ee6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8011ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ec8:	d816      	bhi.n	8011ef8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d01d      	beq.n	8011f0a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8011ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ed2:	d111      	bne.n	8011ef8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	3304      	adds	r3, #4
 8011ed8:	2100      	movs	r1, #0
 8011eda:	4618      	mov	r0, r3
 8011edc:	f000 f9c2 	bl	8012264 <RCCEx_PLL2_Config>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8011ee4:	e012      	b.n	8011f0c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	3324      	adds	r3, #36	; 0x24
 8011eea:	2102      	movs	r1, #2
 8011eec:	4618      	mov	r0, r3
 8011eee:	f000 fa6b 	bl	80123c8 <RCCEx_PLL3_Config>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8011ef6:	e009      	b.n	8011f0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011ef8:	2301      	movs	r3, #1
 8011efa:	75fb      	strb	r3, [r7, #23]
      break;
 8011efc:	e006      	b.n	8011f0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8011efe:	bf00      	nop
 8011f00:	e004      	b.n	8011f0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8011f02:	bf00      	nop
 8011f04:	e002      	b.n	8011f0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8011f06:	bf00      	nop
 8011f08:	e000      	b.n	8011f0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8011f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011f0c:	7dfb      	ldrb	r3, [r7, #23]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d10a      	bne.n	8011f28 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8011f12:	4b3c      	ldr	r3, [pc, #240]	; (8012004 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011f20:	4938      	ldr	r1, [pc, #224]	; (8012004 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011f22:	4313      	orrs	r3, r2
 8011f24:	658b      	str	r3, [r1, #88]	; 0x58
 8011f26:	e001      	b.n	8011f2c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f28:	7dfb      	ldrb	r3, [r7, #23]
 8011f2a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	f003 0308 	and.w	r3, r3, #8
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d01a      	beq.n	8011f6e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f42:	d10a      	bne.n	8011f5a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	3324      	adds	r3, #36	; 0x24
 8011f48:	2102      	movs	r1, #2
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f000 fa3c 	bl	80123c8 <RCCEx_PLL3_Config>
 8011f50:	4603      	mov	r3, r0
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d001      	beq.n	8011f5a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8011f56:	2301      	movs	r3, #1
 8011f58:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8011f5a:	4b2a      	ldr	r3, [pc, #168]	; (8012004 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011f68:	4926      	ldr	r1, [pc, #152]	; (8012004 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011f6a:	4313      	orrs	r3, r2
 8011f6c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	f003 0310 	and.w	r3, r3, #16
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d01a      	beq.n	8011fb0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f84:	d10a      	bne.n	8011f9c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	3324      	adds	r3, #36	; 0x24
 8011f8a:	2102      	movs	r1, #2
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f000 fa1b 	bl	80123c8 <RCCEx_PLL3_Config>
 8011f92:	4603      	mov	r3, r0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d001      	beq.n	8011f9c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8011f98:	2301      	movs	r3, #1
 8011f9a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011f9c:	4b19      	ldr	r3, [pc, #100]	; (8012004 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011faa:	4916      	ldr	r1, [pc, #88]	; (8012004 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011fac:	4313      	orrs	r3, r2
 8011fae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d036      	beq.n	801202a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011fc6:	d01f      	beq.n	8012008 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8011fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011fcc:	d817      	bhi.n	8011ffe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d003      	beq.n	8011fda <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8011fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011fd6:	d009      	beq.n	8011fec <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8011fd8:	e011      	b.n	8011ffe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	3304      	adds	r3, #4
 8011fde:	2100      	movs	r1, #0
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f000 f93f 	bl	8012264 <RCCEx_PLL2_Config>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8011fea:	e00e      	b.n	801200a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	3324      	adds	r3, #36	; 0x24
 8011ff0:	2102      	movs	r1, #2
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f000 f9e8 	bl	80123c8 <RCCEx_PLL3_Config>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8011ffc:	e005      	b.n	801200a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011ffe:	2301      	movs	r3, #1
 8012000:	75fb      	strb	r3, [r7, #23]
      break;
 8012002:	e002      	b.n	801200a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8012004:	58024400 	.word	0x58024400
      break;
 8012008:	bf00      	nop
    }

    if(ret == HAL_OK)
 801200a:	7dfb      	ldrb	r3, [r7, #23]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d10a      	bne.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012010:	4b93      	ldr	r3, [pc, #588]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012014:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801201e:	4990      	ldr	r1, [pc, #576]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012020:	4313      	orrs	r3, r2
 8012022:	658b      	str	r3, [r1, #88]	; 0x58
 8012024:	e001      	b.n	801202a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012026:	7dfb      	ldrb	r3, [r7, #23]
 8012028:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012032:	2b00      	cmp	r3, #0
 8012034:	d033      	beq.n	801209e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801203c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012040:	d01c      	beq.n	801207c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8012042:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012046:	d816      	bhi.n	8012076 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8012048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801204c:	d003      	beq.n	8012056 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 801204e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012052:	d007      	beq.n	8012064 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8012054:	e00f      	b.n	8012076 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012056:	4b82      	ldr	r3, [pc, #520]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801205a:	4a81      	ldr	r2, [pc, #516]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801205c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012060:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8012062:	e00c      	b.n	801207e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	3324      	adds	r3, #36	; 0x24
 8012068:	2101      	movs	r1, #1
 801206a:	4618      	mov	r0, r3
 801206c:	f000 f9ac 	bl	80123c8 <RCCEx_PLL3_Config>
 8012070:	4603      	mov	r3, r0
 8012072:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8012074:	e003      	b.n	801207e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012076:	2301      	movs	r3, #1
 8012078:	75fb      	strb	r3, [r7, #23]
      break;
 801207a:	e000      	b.n	801207e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 801207c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801207e:	7dfb      	ldrb	r3, [r7, #23]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d10a      	bne.n	801209a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012084:	4b76      	ldr	r3, [pc, #472]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012088:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012092:	4973      	ldr	r1, [pc, #460]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012094:	4313      	orrs	r3, r2
 8012096:	654b      	str	r3, [r1, #84]	; 0x54
 8012098:	e001      	b.n	801209e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801209a:	7dfb      	ldrb	r3, [r7, #23]
 801209c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d029      	beq.n	80120fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d003      	beq.n	80120ba <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80120b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120b6:	d007      	beq.n	80120c8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80120b8:	e00f      	b.n	80120da <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80120ba:	4b69      	ldr	r3, [pc, #420]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80120bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120be:	4a68      	ldr	r2, [pc, #416]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80120c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80120c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80120c6:	e00b      	b.n	80120e0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	3304      	adds	r3, #4
 80120cc:	2102      	movs	r1, #2
 80120ce:	4618      	mov	r0, r3
 80120d0:	f000 f8c8 	bl	8012264 <RCCEx_PLL2_Config>
 80120d4:	4603      	mov	r3, r0
 80120d6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80120d8:	e002      	b.n	80120e0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80120da:	2301      	movs	r3, #1
 80120dc:	75fb      	strb	r3, [r7, #23]
      break;
 80120de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80120e0:	7dfb      	ldrb	r3, [r7, #23]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d109      	bne.n	80120fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80120e6:	4b5e      	ldr	r3, [pc, #376]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80120e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120f2:	495b      	ldr	r1, [pc, #364]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80120f4:	4313      	orrs	r3, r2
 80120f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80120f8:	e001      	b.n	80120fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80120fa:	7dfb      	ldrb	r3, [r7, #23]
 80120fc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012106:	2b00      	cmp	r3, #0
 8012108:	d00a      	beq.n	8012120 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	3324      	adds	r3, #36	; 0x24
 801210e:	2102      	movs	r1, #2
 8012110:	4618      	mov	r0, r3
 8012112:	f000 f959 	bl	80123c8 <RCCEx_PLL3_Config>
 8012116:	4603      	mov	r3, r0
 8012118:	2b00      	cmp	r3, #0
 801211a:	d001      	beq.n	8012120 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 801211c:	2301      	movs	r3, #1
 801211e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012128:	2b00      	cmp	r3, #0
 801212a:	d030      	beq.n	801218e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012134:	d017      	beq.n	8012166 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8012136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801213a:	d811      	bhi.n	8012160 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 801213c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012140:	d013      	beq.n	801216a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8012142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012146:	d80b      	bhi.n	8012160 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8012148:	2b00      	cmp	r3, #0
 801214a:	d010      	beq.n	801216e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 801214c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012150:	d106      	bne.n	8012160 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012152:	4b43      	ldr	r3, [pc, #268]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012156:	4a42      	ldr	r2, [pc, #264]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801215c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 801215e:	e007      	b.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012160:	2301      	movs	r3, #1
 8012162:	75fb      	strb	r3, [r7, #23]
      break;
 8012164:	e004      	b.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8012166:	bf00      	nop
 8012168:	e002      	b.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 801216a:	bf00      	nop
 801216c:	e000      	b.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 801216e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012170:	7dfb      	ldrb	r3, [r7, #23]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d109      	bne.n	801218a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012176:	4b3a      	ldr	r3, [pc, #232]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801217a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012182:	4937      	ldr	r1, [pc, #220]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012184:	4313      	orrs	r3, r2
 8012186:	654b      	str	r3, [r1, #84]	; 0x54
 8012188:	e001      	b.n	801218e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801218a:	7dfb      	ldrb	r3, [r7, #23]
 801218c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012196:	2b00      	cmp	r3, #0
 8012198:	d008      	beq.n	80121ac <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801219a:	4b31      	ldr	r3, [pc, #196]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801219c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801219e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121a6:	492e      	ldr	r1, [pc, #184]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80121a8:	4313      	orrs	r3, r2
 80121aa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d009      	beq.n	80121cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80121b8:	4b29      	ldr	r3, [pc, #164]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80121ba:	691b      	ldr	r3, [r3, #16]
 80121bc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80121c6:	4926      	ldr	r1, [pc, #152]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80121c8:	4313      	orrs	r3, r2
 80121ca:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d008      	beq.n	80121ea <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80121d8:	4b21      	ldr	r3, [pc, #132]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80121da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121e4:	491e      	ldr	r1, [pc, #120]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80121e6:	4313      	orrs	r3, r2
 80121e8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d00d      	beq.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80121f6:	4b1a      	ldr	r3, [pc, #104]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80121f8:	691b      	ldr	r3, [r3, #16]
 80121fa:	4a19      	ldr	r2, [pc, #100]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80121fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012200:	6113      	str	r3, [r2, #16]
 8012202:	4b17      	ldr	r3, [pc, #92]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012204:	691a      	ldr	r2, [r3, #16]
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801220c:	4914      	ldr	r1, [pc, #80]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801220e:	4313      	orrs	r3, r2
 8012210:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	2b00      	cmp	r3, #0
 8012218:	da08      	bge.n	801222c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801221a:	4b11      	ldr	r3, [pc, #68]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801221e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012226:	490e      	ldr	r1, [pc, #56]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012228:	4313      	orrs	r3, r2
 801222a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012234:	2b00      	cmp	r3, #0
 8012236:	d009      	beq.n	801224c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012238:	4b09      	ldr	r3, [pc, #36]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801223c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012246:	4906      	ldr	r1, [pc, #24]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012248:	4313      	orrs	r3, r2
 801224a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 801224c:	7dbb      	ldrb	r3, [r7, #22]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d101      	bne.n	8012256 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8012252:	2300      	movs	r3, #0
 8012254:	e000      	b.n	8012258 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8012256:	2301      	movs	r3, #1
}
 8012258:	4618      	mov	r0, r3
 801225a:	3718      	adds	r7, #24
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}
 8012260:	58024400 	.word	0x58024400

08012264 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801226e:	2300      	movs	r3, #0
 8012270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012272:	4b53      	ldr	r3, [pc, #332]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012276:	f003 0303 	and.w	r3, r3, #3
 801227a:	2b03      	cmp	r3, #3
 801227c:	d101      	bne.n	8012282 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801227e:	2301      	movs	r3, #1
 8012280:	e099      	b.n	80123b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8012282:	4b4f      	ldr	r3, [pc, #316]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	4a4e      	ldr	r2, [pc, #312]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012288:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801228c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801228e:	f7fa fead 	bl	800cfec <HAL_GetTick>
 8012292:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012294:	e008      	b.n	80122a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012296:	f7fa fea9 	bl	800cfec <HAL_GetTick>
 801229a:	4602      	mov	r2, r0
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	1ad3      	subs	r3, r2, r3
 80122a0:	2b02      	cmp	r3, #2
 80122a2:	d901      	bls.n	80122a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80122a4:	2303      	movs	r3, #3
 80122a6:	e086      	b.n	80123b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80122a8:	4b45      	ldr	r3, [pc, #276]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d1f0      	bne.n	8012296 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80122b4:	4b42      	ldr	r3, [pc, #264]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 80122b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	031b      	lsls	r3, r3, #12
 80122c2:	493f      	ldr	r1, [pc, #252]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 80122c4:	4313      	orrs	r3, r2
 80122c6:	628b      	str	r3, [r1, #40]	; 0x28
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	3b01      	subs	r3, #1
 80122ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	689b      	ldr	r3, [r3, #8]
 80122d6:	3b01      	subs	r3, #1
 80122d8:	025b      	lsls	r3, r3, #9
 80122da:	b29b      	uxth	r3, r3
 80122dc:	431a      	orrs	r2, r3
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	3b01      	subs	r3, #1
 80122e4:	041b      	lsls	r3, r3, #16
 80122e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80122ea:	431a      	orrs	r2, r3
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	691b      	ldr	r3, [r3, #16]
 80122f0:	3b01      	subs	r3, #1
 80122f2:	061b      	lsls	r3, r3, #24
 80122f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80122f8:	4931      	ldr	r1, [pc, #196]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 80122fa:	4313      	orrs	r3, r2
 80122fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80122fe:	4b30      	ldr	r3, [pc, #192]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012302:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	695b      	ldr	r3, [r3, #20]
 801230a:	492d      	ldr	r1, [pc, #180]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 801230c:	4313      	orrs	r3, r2
 801230e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012310:	4b2b      	ldr	r3, [pc, #172]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012314:	f023 0220 	bic.w	r2, r3, #32
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	699b      	ldr	r3, [r3, #24]
 801231c:	4928      	ldr	r1, [pc, #160]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 801231e:	4313      	orrs	r3, r2
 8012320:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012322:	4b27      	ldr	r3, [pc, #156]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012326:	4a26      	ldr	r2, [pc, #152]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012328:	f023 0310 	bic.w	r3, r3, #16
 801232c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801232e:	4b24      	ldr	r3, [pc, #144]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012332:	4b24      	ldr	r3, [pc, #144]	; (80123c4 <RCCEx_PLL2_Config+0x160>)
 8012334:	4013      	ands	r3, r2
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	69d2      	ldr	r2, [r2, #28]
 801233a:	00d2      	lsls	r2, r2, #3
 801233c:	4920      	ldr	r1, [pc, #128]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 801233e:	4313      	orrs	r3, r2
 8012340:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012342:	4b1f      	ldr	r3, [pc, #124]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012346:	4a1e      	ldr	r2, [pc, #120]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012348:	f043 0310 	orr.w	r3, r3, #16
 801234c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d106      	bne.n	8012362 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012354:	4b1a      	ldr	r3, [pc, #104]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012358:	4a19      	ldr	r2, [pc, #100]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 801235a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801235e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012360:	e00f      	b.n	8012382 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	2b01      	cmp	r3, #1
 8012366:	d106      	bne.n	8012376 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8012368:	4b15      	ldr	r3, [pc, #84]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 801236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801236c:	4a14      	ldr	r2, [pc, #80]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 801236e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012372:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012374:	e005      	b.n	8012382 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8012376:	4b12      	ldr	r3, [pc, #72]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801237a:	4a11      	ldr	r2, [pc, #68]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 801237c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012380:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012382:	4b0f      	ldr	r3, [pc, #60]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	4a0e      	ldr	r2, [pc, #56]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 8012388:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801238c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801238e:	f7fa fe2d 	bl	800cfec <HAL_GetTick>
 8012392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012394:	e008      	b.n	80123a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012396:	f7fa fe29 	bl	800cfec <HAL_GetTick>
 801239a:	4602      	mov	r2, r0
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	1ad3      	subs	r3, r2, r3
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d901      	bls.n	80123a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80123a4:	2303      	movs	r3, #3
 80123a6:	e006      	b.n	80123b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80123a8:	4b05      	ldr	r3, [pc, #20]	; (80123c0 <RCCEx_PLL2_Config+0x15c>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d0f0      	beq.n	8012396 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80123b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3710      	adds	r7, #16
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	58024400 	.word	0x58024400
 80123c4:	ffff0007 	.word	0xffff0007

080123c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b084      	sub	sp, #16
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
 80123d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80123d2:	2300      	movs	r3, #0
 80123d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80123d6:	4b53      	ldr	r3, [pc, #332]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80123d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123da:	f003 0303 	and.w	r3, r3, #3
 80123de:	2b03      	cmp	r3, #3
 80123e0:	d101      	bne.n	80123e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80123e2:	2301      	movs	r3, #1
 80123e4:	e099      	b.n	801251a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80123e6:	4b4f      	ldr	r3, [pc, #316]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	4a4e      	ldr	r2, [pc, #312]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80123ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80123f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80123f2:	f7fa fdfb 	bl	800cfec <HAL_GetTick>
 80123f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80123f8:	e008      	b.n	801240c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80123fa:	f7fa fdf7 	bl	800cfec <HAL_GetTick>
 80123fe:	4602      	mov	r2, r0
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	1ad3      	subs	r3, r2, r3
 8012404:	2b02      	cmp	r3, #2
 8012406:	d901      	bls.n	801240c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012408:	2303      	movs	r3, #3
 801240a:	e086      	b.n	801251a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801240c:	4b45      	ldr	r3, [pc, #276]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012414:	2b00      	cmp	r3, #0
 8012416:	d1f0      	bne.n	80123fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012418:	4b42      	ldr	r3, [pc, #264]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 801241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801241c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	051b      	lsls	r3, r3, #20
 8012426:	493f      	ldr	r1, [pc, #252]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 8012428:	4313      	orrs	r3, r2
 801242a:	628b      	str	r3, [r1, #40]	; 0x28
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	3b01      	subs	r3, #1
 8012432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	689b      	ldr	r3, [r3, #8]
 801243a:	3b01      	subs	r3, #1
 801243c:	025b      	lsls	r3, r3, #9
 801243e:	b29b      	uxth	r3, r3
 8012440:	431a      	orrs	r2, r3
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	68db      	ldr	r3, [r3, #12]
 8012446:	3b01      	subs	r3, #1
 8012448:	041b      	lsls	r3, r3, #16
 801244a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801244e:	431a      	orrs	r2, r3
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	691b      	ldr	r3, [r3, #16]
 8012454:	3b01      	subs	r3, #1
 8012456:	061b      	lsls	r3, r3, #24
 8012458:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801245c:	4931      	ldr	r1, [pc, #196]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 801245e:	4313      	orrs	r3, r2
 8012460:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012462:	4b30      	ldr	r3, [pc, #192]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 8012464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012466:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	695b      	ldr	r3, [r3, #20]
 801246e:	492d      	ldr	r1, [pc, #180]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 8012470:	4313      	orrs	r3, r2
 8012472:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012474:	4b2b      	ldr	r3, [pc, #172]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 8012476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012478:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	699b      	ldr	r3, [r3, #24]
 8012480:	4928      	ldr	r1, [pc, #160]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 8012482:	4313      	orrs	r3, r2
 8012484:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8012486:	4b27      	ldr	r3, [pc, #156]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 8012488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801248a:	4a26      	ldr	r2, [pc, #152]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 801248c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012492:	4b24      	ldr	r3, [pc, #144]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 8012494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012496:	4b24      	ldr	r3, [pc, #144]	; (8012528 <RCCEx_PLL3_Config+0x160>)
 8012498:	4013      	ands	r3, r2
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	69d2      	ldr	r2, [r2, #28]
 801249e:	00d2      	lsls	r2, r2, #3
 80124a0:	4920      	ldr	r1, [pc, #128]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80124a2:	4313      	orrs	r3, r2
 80124a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80124a6:	4b1f      	ldr	r3, [pc, #124]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80124a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124aa:	4a1e      	ldr	r2, [pc, #120]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80124ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80124b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d106      	bne.n	80124c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80124b8:	4b1a      	ldr	r3, [pc, #104]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80124ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124bc:	4a19      	ldr	r2, [pc, #100]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80124be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80124c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80124c4:	e00f      	b.n	80124e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	2b01      	cmp	r3, #1
 80124ca:	d106      	bne.n	80124da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80124cc:	4b15      	ldr	r3, [pc, #84]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80124ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d0:	4a14      	ldr	r2, [pc, #80]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80124d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80124d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80124d8:	e005      	b.n	80124e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80124da:	4b12      	ldr	r3, [pc, #72]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80124dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124de:	4a11      	ldr	r2, [pc, #68]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80124e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80124e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80124e6:	4b0f      	ldr	r3, [pc, #60]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	4a0e      	ldr	r2, [pc, #56]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 80124ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80124f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80124f2:	f7fa fd7b 	bl	800cfec <HAL_GetTick>
 80124f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80124f8:	e008      	b.n	801250c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80124fa:	f7fa fd77 	bl	800cfec <HAL_GetTick>
 80124fe:	4602      	mov	r2, r0
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	1ad3      	subs	r3, r2, r3
 8012504:	2b02      	cmp	r3, #2
 8012506:	d901      	bls.n	801250c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012508:	2303      	movs	r3, #3
 801250a:	e006      	b.n	801251a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801250c:	4b05      	ldr	r3, [pc, #20]	; (8012524 <RCCEx_PLL3_Config+0x15c>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012514:	2b00      	cmp	r3, #0
 8012516:	d0f0      	beq.n	80124fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8012518:	7bfb      	ldrb	r3, [r7, #15]
}
 801251a:	4618      	mov	r0, r3
 801251c:	3710      	adds	r7, #16
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}
 8012522:	bf00      	nop
 8012524:	58024400 	.word	0x58024400
 8012528:	ffff0007 	.word	0xffff0007

0801252c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d101      	bne.n	8012540 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 801253c:	2301      	movs	r3, #1
 801253e:	e02b      	b.n	8012598 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012546:	b2db      	uxtb	r3, r3
 8012548:	2b00      	cmp	r3, #0
 801254a:	d106      	bne.n	801255a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2200      	movs	r2, #0
 8012550:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f7ee fe93 	bl	8001280 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	2202      	movs	r2, #2
 801255e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681a      	ldr	r2, [r3, #0]
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	3304      	adds	r3, #4
 801256a:	4619      	mov	r1, r3
 801256c:	4610      	mov	r0, r2
 801256e:	f000 fb6b 	bl	8012c48 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	6818      	ldr	r0, [r3, #0]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	461a      	mov	r2, r3
 801257c:	6839      	ldr	r1, [r7, #0]
 801257e:	f000 fbbf 	bl	8012d00 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8012582:	4b07      	ldr	r3, [pc, #28]	; (80125a0 <HAL_SDRAM_Init+0x74>)
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	4a06      	ldr	r2, [pc, #24]	; (80125a0 <HAL_SDRAM_Init+0x74>)
 8012588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801258c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2201      	movs	r2, #1
 8012592:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012596:	2300      	movs	r3, #0
}
 8012598:	4618      	mov	r0, r3
 801259a:	3708      	adds	r7, #8
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}
 80125a0:	52004000 	.word	0x52004000

080125a4 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7ee feab 	bl	8001308 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681a      	ldr	r2, [r3, #0]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	4619      	mov	r1, r3
 80125bc:	4610      	mov	r0, r2
 80125be:	f000 fc09 	bl	8012dd4 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2200      	movs	r2, #0
 80125c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2200      	movs	r2, #0
 80125ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 80125d2:	2300      	movs	r3, #0
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3708      	adds	r7, #8
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}

080125dc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b086      	sub	sp, #24
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	60f8      	str	r0, [r7, #12]
 80125e4:	60b9      	str	r1, [r7, #8]
 80125e6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80125ee:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80125f0:	7dfb      	ldrb	r3, [r7, #23]
 80125f2:	2b02      	cmp	r3, #2
 80125f4:	d101      	bne.n	80125fa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80125f6:	2302      	movs	r3, #2
 80125f8:	e021      	b.n	801263e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80125fa:	7dfb      	ldrb	r3, [r7, #23]
 80125fc:	2b01      	cmp	r3, #1
 80125fe:	d002      	beq.n	8012606 <HAL_SDRAM_SendCommand+0x2a>
 8012600:	7dfb      	ldrb	r3, [r7, #23]
 8012602:	2b05      	cmp	r3, #5
 8012604:	d118      	bne.n	8012638 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2202      	movs	r2, #2
 801260a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	687a      	ldr	r2, [r7, #4]
 8012614:	68b9      	ldr	r1, [r7, #8]
 8012616:	4618      	mov	r0, r3
 8012618:	f000 fbfe 	bl	8012e18 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	2b02      	cmp	r3, #2
 8012622:	d104      	bne.n	801262e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2205      	movs	r2, #5
 8012628:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801262c:	e006      	b.n	801263c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	2201      	movs	r2, #1
 8012632:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8012636:	e001      	b.n	801263c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8012638:	2301      	movs	r3, #1
 801263a:	e000      	b.n	801263e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 801263c:	2300      	movs	r3, #0
}
 801263e:	4618      	mov	r0, r3
 8012640:	3718      	adds	r7, #24
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}

08012646 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8012646:	b580      	push	{r7, lr}
 8012648:	b082      	sub	sp, #8
 801264a:	af00      	add	r7, sp, #0
 801264c:	6078      	str	r0, [r7, #4]
 801264e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012656:	b2db      	uxtb	r3, r3
 8012658:	2b02      	cmp	r3, #2
 801265a:	d101      	bne.n	8012660 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 801265c:	2302      	movs	r3, #2
 801265e:	e016      	b.n	801268e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012666:	b2db      	uxtb	r3, r3
 8012668:	2b01      	cmp	r3, #1
 801266a:	d10f      	bne.n	801268c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2202      	movs	r2, #2
 8012670:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	6839      	ldr	r1, [r7, #0]
 801267a:	4618      	mov	r0, r3
 801267c:	f000 fbf0 	bl	8012e60 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2201      	movs	r2, #1
 8012684:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8012688:	2300      	movs	r3, #0
 801268a:	e000      	b.n	801268e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 801268c:	2301      	movs	r3, #1
}
 801268e:	4618      	mov	r0, r3
 8012690:	3708      	adds	r7, #8
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}

08012696 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012696:	b580      	push	{r7, lr}
 8012698:	b082      	sub	sp, #8
 801269a:	af00      	add	r7, sp, #0
 801269c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d101      	bne.n	80126a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80126a4:	2301      	movs	r3, #1
 80126a6:	e049      	b.n	801273c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126ae:	b2db      	uxtb	r3, r3
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d106      	bne.n	80126c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2200      	movs	r2, #0
 80126b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f000 f841 	bl	8012744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	2202      	movs	r2, #2
 80126c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	3304      	adds	r3, #4
 80126d2:	4619      	mov	r1, r3
 80126d4:	4610      	mov	r0, r2
 80126d6:	f000 f9ff 	bl	8012ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2201      	movs	r2, #1
 80126de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2201      	movs	r2, #1
 80126e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	2201      	movs	r2, #1
 80126ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2201      	movs	r2, #1
 80126f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2201      	movs	r2, #1
 80126fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2201      	movs	r2, #1
 8012706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2201      	movs	r2, #1
 801270e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2201      	movs	r2, #1
 8012716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2201      	movs	r2, #1
 801271e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2201      	movs	r2, #1
 8012726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2201      	movs	r2, #1
 801272e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2201      	movs	r2, #1
 8012736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801273a:	2300      	movs	r3, #0
}
 801273c:	4618      	mov	r0, r3
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8012744:	b480      	push	{r7}
 8012746:	b083      	sub	sp, #12
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801274c:	bf00      	nop
 801274e:	370c      	adds	r7, #12
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr

08012758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012758:	b480      	push	{r7}
 801275a:	b085      	sub	sp, #20
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012766:	b2db      	uxtb	r3, r3
 8012768:	2b01      	cmp	r3, #1
 801276a:	d001      	beq.n	8012770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801276c:	2301      	movs	r3, #1
 801276e:	e054      	b.n	801281a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2202      	movs	r2, #2
 8012774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	68da      	ldr	r2, [r3, #12]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f042 0201 	orr.w	r2, r2, #1
 8012786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	4a26      	ldr	r2, [pc, #152]	; (8012828 <HAL_TIM_Base_Start_IT+0xd0>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d022      	beq.n	80127d8 <HAL_TIM_Base_Start_IT+0x80>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801279a:	d01d      	beq.n	80127d8 <HAL_TIM_Base_Start_IT+0x80>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4a22      	ldr	r2, [pc, #136]	; (801282c <HAL_TIM_Base_Start_IT+0xd4>)
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d018      	beq.n	80127d8 <HAL_TIM_Base_Start_IT+0x80>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	4a21      	ldr	r2, [pc, #132]	; (8012830 <HAL_TIM_Base_Start_IT+0xd8>)
 80127ac:	4293      	cmp	r3, r2
 80127ae:	d013      	beq.n	80127d8 <HAL_TIM_Base_Start_IT+0x80>
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	4a1f      	ldr	r2, [pc, #124]	; (8012834 <HAL_TIM_Base_Start_IT+0xdc>)
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d00e      	beq.n	80127d8 <HAL_TIM_Base_Start_IT+0x80>
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	4a1e      	ldr	r2, [pc, #120]	; (8012838 <HAL_TIM_Base_Start_IT+0xe0>)
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d009      	beq.n	80127d8 <HAL_TIM_Base_Start_IT+0x80>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	4a1c      	ldr	r2, [pc, #112]	; (801283c <HAL_TIM_Base_Start_IT+0xe4>)
 80127ca:	4293      	cmp	r3, r2
 80127cc:	d004      	beq.n	80127d8 <HAL_TIM_Base_Start_IT+0x80>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	4a1b      	ldr	r2, [pc, #108]	; (8012840 <HAL_TIM_Base_Start_IT+0xe8>)
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d115      	bne.n	8012804 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	689a      	ldr	r2, [r3, #8]
 80127de:	4b19      	ldr	r3, [pc, #100]	; (8012844 <HAL_TIM_Base_Start_IT+0xec>)
 80127e0:	4013      	ands	r3, r2
 80127e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2b06      	cmp	r3, #6
 80127e8:	d015      	beq.n	8012816 <HAL_TIM_Base_Start_IT+0xbe>
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127f0:	d011      	beq.n	8012816 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	681a      	ldr	r2, [r3, #0]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	f042 0201 	orr.w	r2, r2, #1
 8012800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012802:	e008      	b.n	8012816 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	681a      	ldr	r2, [r3, #0]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	f042 0201 	orr.w	r2, r2, #1
 8012812:	601a      	str	r2, [r3, #0]
 8012814:	e000      	b.n	8012818 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012816:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012818:	2300      	movs	r3, #0
}
 801281a:	4618      	mov	r0, r3
 801281c:	3714      	adds	r7, #20
 801281e:	46bd      	mov	sp, r7
 8012820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012824:	4770      	bx	lr
 8012826:	bf00      	nop
 8012828:	40010000 	.word	0x40010000
 801282c:	40000400 	.word	0x40000400
 8012830:	40000800 	.word	0x40000800
 8012834:	40000c00 	.word	0x40000c00
 8012838:	40010400 	.word	0x40010400
 801283c:	40001800 	.word	0x40001800
 8012840:	40014000 	.word	0x40014000
 8012844:	00010007 	.word	0x00010007

08012848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b082      	sub	sp, #8
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	691b      	ldr	r3, [r3, #16]
 8012856:	f003 0302 	and.w	r3, r3, #2
 801285a:	2b02      	cmp	r3, #2
 801285c:	d122      	bne.n	80128a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	68db      	ldr	r3, [r3, #12]
 8012864:	f003 0302 	and.w	r3, r3, #2
 8012868:	2b02      	cmp	r3, #2
 801286a:	d11b      	bne.n	80128a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	f06f 0202 	mvn.w	r2, #2
 8012874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2201      	movs	r2, #1
 801287a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	699b      	ldr	r3, [r3, #24]
 8012882:	f003 0303 	and.w	r3, r3, #3
 8012886:	2b00      	cmp	r3, #0
 8012888:	d003      	beq.n	8012892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f000 f905 	bl	8012a9a <HAL_TIM_IC_CaptureCallback>
 8012890:	e005      	b.n	801289e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f000 f8f7 	bl	8012a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f000 f908 	bl	8012aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2200      	movs	r2, #0
 80128a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	691b      	ldr	r3, [r3, #16]
 80128aa:	f003 0304 	and.w	r3, r3, #4
 80128ae:	2b04      	cmp	r3, #4
 80128b0:	d122      	bne.n	80128f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	68db      	ldr	r3, [r3, #12]
 80128b8:	f003 0304 	and.w	r3, r3, #4
 80128bc:	2b04      	cmp	r3, #4
 80128be:	d11b      	bne.n	80128f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	f06f 0204 	mvn.w	r2, #4
 80128c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2202      	movs	r2, #2
 80128ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	699b      	ldr	r3, [r3, #24]
 80128d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d003      	beq.n	80128e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f000 f8db 	bl	8012a9a <HAL_TIM_IC_CaptureCallback>
 80128e4:	e005      	b.n	80128f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 f8cd 	bl	8012a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f000 f8de 	bl	8012aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	2200      	movs	r2, #0
 80128f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	691b      	ldr	r3, [r3, #16]
 80128fe:	f003 0308 	and.w	r3, r3, #8
 8012902:	2b08      	cmp	r3, #8
 8012904:	d122      	bne.n	801294c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	68db      	ldr	r3, [r3, #12]
 801290c:	f003 0308 	and.w	r3, r3, #8
 8012910:	2b08      	cmp	r3, #8
 8012912:	d11b      	bne.n	801294c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	f06f 0208 	mvn.w	r2, #8
 801291c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2204      	movs	r2, #4
 8012922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	69db      	ldr	r3, [r3, #28]
 801292a:	f003 0303 	and.w	r3, r3, #3
 801292e:	2b00      	cmp	r3, #0
 8012930:	d003      	beq.n	801293a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f000 f8b1 	bl	8012a9a <HAL_TIM_IC_CaptureCallback>
 8012938:	e005      	b.n	8012946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f000 f8a3 	bl	8012a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f000 f8b4 	bl	8012aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2200      	movs	r2, #0
 801294a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	691b      	ldr	r3, [r3, #16]
 8012952:	f003 0310 	and.w	r3, r3, #16
 8012956:	2b10      	cmp	r3, #16
 8012958:	d122      	bne.n	80129a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	f003 0310 	and.w	r3, r3, #16
 8012964:	2b10      	cmp	r3, #16
 8012966:	d11b      	bne.n	80129a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	f06f 0210 	mvn.w	r2, #16
 8012970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2208      	movs	r2, #8
 8012976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	69db      	ldr	r3, [r3, #28]
 801297e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012982:	2b00      	cmp	r3, #0
 8012984:	d003      	beq.n	801298e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f000 f887 	bl	8012a9a <HAL_TIM_IC_CaptureCallback>
 801298c:	e005      	b.n	801299a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f000 f879 	bl	8012a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f000 f88a 	bl	8012aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2200      	movs	r2, #0
 801299e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	691b      	ldr	r3, [r3, #16]
 80129a6:	f003 0301 	and.w	r3, r3, #1
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	d10e      	bne.n	80129cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	68db      	ldr	r3, [r3, #12]
 80129b4:	f003 0301 	and.w	r3, r3, #1
 80129b8:	2b01      	cmp	r3, #1
 80129ba:	d107      	bne.n	80129cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	f06f 0201 	mvn.w	r2, #1
 80129c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f7ee f87a 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	691b      	ldr	r3, [r3, #16]
 80129d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129d6:	2b80      	cmp	r3, #128	; 0x80
 80129d8:	d10e      	bne.n	80129f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129e4:	2b80      	cmp	r3, #128	; 0x80
 80129e6:	d107      	bne.n	80129f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80129f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80129f2:	6878      	ldr	r0, [r7, #4]
 80129f4:	f000 f914 	bl	8012c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	691b      	ldr	r3, [r3, #16]
 80129fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a06:	d10e      	bne.n	8012a26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	68db      	ldr	r3, [r3, #12]
 8012a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a12:	2b80      	cmp	r3, #128	; 0x80
 8012a14:	d107      	bne.n	8012a26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f000 f907 	bl	8012c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	691b      	ldr	r3, [r3, #16]
 8012a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a30:	2b40      	cmp	r3, #64	; 0x40
 8012a32:	d10e      	bne.n	8012a52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	68db      	ldr	r3, [r3, #12]
 8012a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a3e:	2b40      	cmp	r3, #64	; 0x40
 8012a40:	d107      	bne.n	8012a52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f000 f838 	bl	8012ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	691b      	ldr	r3, [r3, #16]
 8012a58:	f003 0320 	and.w	r3, r3, #32
 8012a5c:	2b20      	cmp	r3, #32
 8012a5e:	d10e      	bne.n	8012a7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	68db      	ldr	r3, [r3, #12]
 8012a66:	f003 0320 	and.w	r3, r3, #32
 8012a6a:	2b20      	cmp	r3, #32
 8012a6c:	d107      	bne.n	8012a7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f06f 0220 	mvn.w	r2, #32
 8012a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f000 f8c7 	bl	8012c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012a7e:	bf00      	nop
 8012a80:	3708      	adds	r7, #8
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}

08012a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012a86:	b480      	push	{r7}
 8012a88:	b083      	sub	sp, #12
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012a8e:	bf00      	nop
 8012a90:	370c      	adds	r7, #12
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr

08012a9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012a9a:	b480      	push	{r7}
 8012a9c:	b083      	sub	sp, #12
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012aa2:	bf00      	nop
 8012aa4:	370c      	adds	r7, #12
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr

08012aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012aae:	b480      	push	{r7}
 8012ab0:	b083      	sub	sp, #12
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012ab6:	bf00      	nop
 8012ab8:	370c      	adds	r7, #12
 8012aba:	46bd      	mov	sp, r7
 8012abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac0:	4770      	bx	lr

08012ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012ac2:	b480      	push	{r7}
 8012ac4:	b083      	sub	sp, #12
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012aca:	bf00      	nop
 8012acc:	370c      	adds	r7, #12
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad4:	4770      	bx	lr
	...

08012ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b085      	sub	sp, #20
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	4a40      	ldr	r2, [pc, #256]	; (8012bec <TIM_Base_SetConfig+0x114>)
 8012aec:	4293      	cmp	r3, r2
 8012aee:	d013      	beq.n	8012b18 <TIM_Base_SetConfig+0x40>
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012af6:	d00f      	beq.n	8012b18 <TIM_Base_SetConfig+0x40>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	4a3d      	ldr	r2, [pc, #244]	; (8012bf0 <TIM_Base_SetConfig+0x118>)
 8012afc:	4293      	cmp	r3, r2
 8012afe:	d00b      	beq.n	8012b18 <TIM_Base_SetConfig+0x40>
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	4a3c      	ldr	r2, [pc, #240]	; (8012bf4 <TIM_Base_SetConfig+0x11c>)
 8012b04:	4293      	cmp	r3, r2
 8012b06:	d007      	beq.n	8012b18 <TIM_Base_SetConfig+0x40>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	4a3b      	ldr	r2, [pc, #236]	; (8012bf8 <TIM_Base_SetConfig+0x120>)
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	d003      	beq.n	8012b18 <TIM_Base_SetConfig+0x40>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	4a3a      	ldr	r2, [pc, #232]	; (8012bfc <TIM_Base_SetConfig+0x124>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d108      	bne.n	8012b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	685b      	ldr	r3, [r3, #4]
 8012b24:	68fa      	ldr	r2, [r7, #12]
 8012b26:	4313      	orrs	r3, r2
 8012b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4a2f      	ldr	r2, [pc, #188]	; (8012bec <TIM_Base_SetConfig+0x114>)
 8012b2e:	4293      	cmp	r3, r2
 8012b30:	d01f      	beq.n	8012b72 <TIM_Base_SetConfig+0x9a>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b38:	d01b      	beq.n	8012b72 <TIM_Base_SetConfig+0x9a>
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	4a2c      	ldr	r2, [pc, #176]	; (8012bf0 <TIM_Base_SetConfig+0x118>)
 8012b3e:	4293      	cmp	r3, r2
 8012b40:	d017      	beq.n	8012b72 <TIM_Base_SetConfig+0x9a>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	4a2b      	ldr	r2, [pc, #172]	; (8012bf4 <TIM_Base_SetConfig+0x11c>)
 8012b46:	4293      	cmp	r3, r2
 8012b48:	d013      	beq.n	8012b72 <TIM_Base_SetConfig+0x9a>
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	4a2a      	ldr	r2, [pc, #168]	; (8012bf8 <TIM_Base_SetConfig+0x120>)
 8012b4e:	4293      	cmp	r3, r2
 8012b50:	d00f      	beq.n	8012b72 <TIM_Base_SetConfig+0x9a>
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	4a29      	ldr	r2, [pc, #164]	; (8012bfc <TIM_Base_SetConfig+0x124>)
 8012b56:	4293      	cmp	r3, r2
 8012b58:	d00b      	beq.n	8012b72 <TIM_Base_SetConfig+0x9a>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	4a28      	ldr	r2, [pc, #160]	; (8012c00 <TIM_Base_SetConfig+0x128>)
 8012b5e:	4293      	cmp	r3, r2
 8012b60:	d007      	beq.n	8012b72 <TIM_Base_SetConfig+0x9a>
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	4a27      	ldr	r2, [pc, #156]	; (8012c04 <TIM_Base_SetConfig+0x12c>)
 8012b66:	4293      	cmp	r3, r2
 8012b68:	d003      	beq.n	8012b72 <TIM_Base_SetConfig+0x9a>
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	4a26      	ldr	r2, [pc, #152]	; (8012c08 <TIM_Base_SetConfig+0x130>)
 8012b6e:	4293      	cmp	r3, r2
 8012b70:	d108      	bne.n	8012b84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	68db      	ldr	r3, [r3, #12]
 8012b7e:	68fa      	ldr	r2, [r7, #12]
 8012b80:	4313      	orrs	r3, r2
 8012b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	695b      	ldr	r3, [r3, #20]
 8012b8e:	4313      	orrs	r3, r2
 8012b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	68fa      	ldr	r2, [r7, #12]
 8012b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	689a      	ldr	r2, [r3, #8]
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	4a10      	ldr	r2, [pc, #64]	; (8012bec <TIM_Base_SetConfig+0x114>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d00f      	beq.n	8012bd0 <TIM_Base_SetConfig+0xf8>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	4a12      	ldr	r2, [pc, #72]	; (8012bfc <TIM_Base_SetConfig+0x124>)
 8012bb4:	4293      	cmp	r3, r2
 8012bb6:	d00b      	beq.n	8012bd0 <TIM_Base_SetConfig+0xf8>
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	4a11      	ldr	r2, [pc, #68]	; (8012c00 <TIM_Base_SetConfig+0x128>)
 8012bbc:	4293      	cmp	r3, r2
 8012bbe:	d007      	beq.n	8012bd0 <TIM_Base_SetConfig+0xf8>
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	4a10      	ldr	r2, [pc, #64]	; (8012c04 <TIM_Base_SetConfig+0x12c>)
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	d003      	beq.n	8012bd0 <TIM_Base_SetConfig+0xf8>
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	4a0f      	ldr	r2, [pc, #60]	; (8012c08 <TIM_Base_SetConfig+0x130>)
 8012bcc:	4293      	cmp	r3, r2
 8012bce:	d103      	bne.n	8012bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	691a      	ldr	r2, [r3, #16]
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2201      	movs	r2, #1
 8012bdc:	615a      	str	r2, [r3, #20]
}
 8012bde:	bf00      	nop
 8012be0:	3714      	adds	r7, #20
 8012be2:	46bd      	mov	sp, r7
 8012be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be8:	4770      	bx	lr
 8012bea:	bf00      	nop
 8012bec:	40010000 	.word	0x40010000
 8012bf0:	40000400 	.word	0x40000400
 8012bf4:	40000800 	.word	0x40000800
 8012bf8:	40000c00 	.word	0x40000c00
 8012bfc:	40010400 	.word	0x40010400
 8012c00:	40014000 	.word	0x40014000
 8012c04:	40014400 	.word	0x40014400
 8012c08:	40014800 	.word	0x40014800

08012c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b083      	sub	sp, #12
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012c14:	bf00      	nop
 8012c16:	370c      	adds	r7, #12
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1e:	4770      	bx	lr

08012c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012c20:	b480      	push	{r7}
 8012c22:	b083      	sub	sp, #12
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012c28:	bf00      	nop
 8012c2a:	370c      	adds	r7, #12
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c32:	4770      	bx	lr

08012c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012c3c:	bf00      	nop
 8012c3e:	370c      	adds	r7, #12
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr

08012c48 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b083      	sub	sp, #12
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d121      	bne.n	8012c9e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681a      	ldr	r2, [r3, #0]
 8012c5e:	4b27      	ldr	r3, [pc, #156]	; (8012cfc <FMC_SDRAM_Init+0xb4>)
 8012c60:	4013      	ands	r3, r2
 8012c62:	683a      	ldr	r2, [r7, #0]
 8012c64:	6851      	ldr	r1, [r2, #4]
 8012c66:	683a      	ldr	r2, [r7, #0]
 8012c68:	6892      	ldr	r2, [r2, #8]
 8012c6a:	4311      	orrs	r1, r2
 8012c6c:	683a      	ldr	r2, [r7, #0]
 8012c6e:	68d2      	ldr	r2, [r2, #12]
 8012c70:	4311      	orrs	r1, r2
 8012c72:	683a      	ldr	r2, [r7, #0]
 8012c74:	6912      	ldr	r2, [r2, #16]
 8012c76:	4311      	orrs	r1, r2
 8012c78:	683a      	ldr	r2, [r7, #0]
 8012c7a:	6952      	ldr	r2, [r2, #20]
 8012c7c:	4311      	orrs	r1, r2
 8012c7e:	683a      	ldr	r2, [r7, #0]
 8012c80:	6992      	ldr	r2, [r2, #24]
 8012c82:	4311      	orrs	r1, r2
 8012c84:	683a      	ldr	r2, [r7, #0]
 8012c86:	69d2      	ldr	r2, [r2, #28]
 8012c88:	4311      	orrs	r1, r2
 8012c8a:	683a      	ldr	r2, [r7, #0]
 8012c8c:	6a12      	ldr	r2, [r2, #32]
 8012c8e:	4311      	orrs	r1, r2
 8012c90:	683a      	ldr	r2, [r7, #0]
 8012c92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012c94:	430a      	orrs	r2, r1
 8012c96:	431a      	orrs	r2, r3
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	601a      	str	r2, [r3, #0]
 8012c9c:	e026      	b.n	8012cec <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	69d9      	ldr	r1, [r3, #28]
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	6a1b      	ldr	r3, [r3, #32]
 8012cae:	4319      	orrs	r1, r3
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cb4:	430b      	orrs	r3, r1
 8012cb6:	431a      	orrs	r2, r3
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	685a      	ldr	r2, [r3, #4]
 8012cc0:	4b0e      	ldr	r3, [pc, #56]	; (8012cfc <FMC_SDRAM_Init+0xb4>)
 8012cc2:	4013      	ands	r3, r2
 8012cc4:	683a      	ldr	r2, [r7, #0]
 8012cc6:	6851      	ldr	r1, [r2, #4]
 8012cc8:	683a      	ldr	r2, [r7, #0]
 8012cca:	6892      	ldr	r2, [r2, #8]
 8012ccc:	4311      	orrs	r1, r2
 8012cce:	683a      	ldr	r2, [r7, #0]
 8012cd0:	68d2      	ldr	r2, [r2, #12]
 8012cd2:	4311      	orrs	r1, r2
 8012cd4:	683a      	ldr	r2, [r7, #0]
 8012cd6:	6912      	ldr	r2, [r2, #16]
 8012cd8:	4311      	orrs	r1, r2
 8012cda:	683a      	ldr	r2, [r7, #0]
 8012cdc:	6952      	ldr	r2, [r2, #20]
 8012cde:	4311      	orrs	r1, r2
 8012ce0:	683a      	ldr	r2, [r7, #0]
 8012ce2:	6992      	ldr	r2, [r2, #24]
 8012ce4:	430a      	orrs	r2, r1
 8012ce6:	431a      	orrs	r2, r3
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8012cec:	2300      	movs	r3, #0
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	370c      	adds	r7, #12
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf8:	4770      	bx	lr
 8012cfa:	bf00      	nop
 8012cfc:	ffff8000 	.word	0xffff8000

08012d00 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8012d00:	b480      	push	{r7}
 8012d02:	b085      	sub	sp, #20
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	60b9      	str	r1, [r7, #8]
 8012d0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d128      	bne.n	8012d64 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	689b      	ldr	r3, [r3, #8]
 8012d16:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	1e59      	subs	r1, r3, #1
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	685b      	ldr	r3, [r3, #4]
 8012d24:	3b01      	subs	r3, #1
 8012d26:	011b      	lsls	r3, r3, #4
 8012d28:	4319      	orrs	r1, r3
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	689b      	ldr	r3, [r3, #8]
 8012d2e:	3b01      	subs	r3, #1
 8012d30:	021b      	lsls	r3, r3, #8
 8012d32:	4319      	orrs	r1, r3
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	68db      	ldr	r3, [r3, #12]
 8012d38:	3b01      	subs	r3, #1
 8012d3a:	031b      	lsls	r3, r3, #12
 8012d3c:	4319      	orrs	r1, r3
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	691b      	ldr	r3, [r3, #16]
 8012d42:	3b01      	subs	r3, #1
 8012d44:	041b      	lsls	r3, r3, #16
 8012d46:	4319      	orrs	r1, r3
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	695b      	ldr	r3, [r3, #20]
 8012d4c:	3b01      	subs	r3, #1
 8012d4e:	051b      	lsls	r3, r3, #20
 8012d50:	4319      	orrs	r1, r3
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	699b      	ldr	r3, [r3, #24]
 8012d56:	3b01      	subs	r3, #1
 8012d58:	061b      	lsls	r3, r3, #24
 8012d5a:	430b      	orrs	r3, r1
 8012d5c:	431a      	orrs	r2, r3
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	609a      	str	r2, [r3, #8]
 8012d62:	e02d      	b.n	8012dc0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	689a      	ldr	r2, [r3, #8]
 8012d68:	4b19      	ldr	r3, [pc, #100]	; (8012dd0 <FMC_SDRAM_Timing_Init+0xd0>)
 8012d6a:	4013      	ands	r3, r2
 8012d6c:	68ba      	ldr	r2, [r7, #8]
 8012d6e:	68d2      	ldr	r2, [r2, #12]
 8012d70:	3a01      	subs	r2, #1
 8012d72:	0311      	lsls	r1, r2, #12
 8012d74:	68ba      	ldr	r2, [r7, #8]
 8012d76:	6952      	ldr	r2, [r2, #20]
 8012d78:	3a01      	subs	r2, #1
 8012d7a:	0512      	lsls	r2, r2, #20
 8012d7c:	430a      	orrs	r2, r1
 8012d7e:	431a      	orrs	r2, r3
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	68db      	ldr	r3, [r3, #12]
 8012d88:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	1e59      	subs	r1, r3, #1
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	3b01      	subs	r3, #1
 8012d98:	011b      	lsls	r3, r3, #4
 8012d9a:	4319      	orrs	r1, r3
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	689b      	ldr	r3, [r3, #8]
 8012da0:	3b01      	subs	r3, #1
 8012da2:	021b      	lsls	r3, r3, #8
 8012da4:	4319      	orrs	r1, r3
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	691b      	ldr	r3, [r3, #16]
 8012daa:	3b01      	subs	r3, #1
 8012dac:	041b      	lsls	r3, r3, #16
 8012dae:	4319      	orrs	r1, r3
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	699b      	ldr	r3, [r3, #24]
 8012db4:	3b01      	subs	r3, #1
 8012db6:	061b      	lsls	r3, r3, #24
 8012db8:	430b      	orrs	r3, r1
 8012dba:	431a      	orrs	r2, r3
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8012dc0:	2300      	movs	r3, #0
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	3714      	adds	r7, #20
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dcc:	4770      	bx	lr
 8012dce:	bf00      	nop
 8012dd0:	ff0f0fff 	.word	0xff0f0fff

08012dd4 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	683a      	ldr	r2, [r7, #0]
 8012de2:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8012de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	683a      	ldr	r2, [r7, #0]
 8012dee:	3202      	adds	r2, #2
 8012df0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8012df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2200      	movs	r2, #0
 8012e02:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	2200      	movs	r2, #0
 8012e08:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8012e0a:	2300      	movs	r3, #0
}
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	370c      	adds	r7, #12
 8012e10:	46bd      	mov	sp, r7
 8012e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e16:	4770      	bx	lr

08012e18 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8012e18:	b480      	push	{r7}
 8012e1a:	b085      	sub	sp, #20
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	60f8      	str	r0, [r7, #12]
 8012e20:	60b9      	str	r1, [r7, #8]
 8012e22:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	691a      	ldr	r2, [r3, #16]
 8012e28:	4b0c      	ldr	r3, [pc, #48]	; (8012e5c <FMC_SDRAM_SendCommand+0x44>)
 8012e2a:	4013      	ands	r3, r2
 8012e2c:	68ba      	ldr	r2, [r7, #8]
 8012e2e:	6811      	ldr	r1, [r2, #0]
 8012e30:	68ba      	ldr	r2, [r7, #8]
 8012e32:	6852      	ldr	r2, [r2, #4]
 8012e34:	4311      	orrs	r1, r2
 8012e36:	68ba      	ldr	r2, [r7, #8]
 8012e38:	6892      	ldr	r2, [r2, #8]
 8012e3a:	3a01      	subs	r2, #1
 8012e3c:	0152      	lsls	r2, r2, #5
 8012e3e:	4311      	orrs	r1, r2
 8012e40:	68ba      	ldr	r2, [r7, #8]
 8012e42:	68d2      	ldr	r2, [r2, #12]
 8012e44:	0252      	lsls	r2, r2, #9
 8012e46:	430a      	orrs	r2, r1
 8012e48:	431a      	orrs	r2, r3
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8012e4e:	2300      	movs	r3, #0
}
 8012e50:	4618      	mov	r0, r3
 8012e52:	3714      	adds	r7, #20
 8012e54:	46bd      	mov	sp, r7
 8012e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5a:	4770      	bx	lr
 8012e5c:	ffc00000 	.word	0xffc00000

08012e60 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8012e60:	b480      	push	{r7}
 8012e62:	b083      	sub	sp, #12
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	695a      	ldr	r2, [r3, #20]
 8012e6e:	4b07      	ldr	r3, [pc, #28]	; (8012e8c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8012e70:	4013      	ands	r3, r2
 8012e72:	683a      	ldr	r2, [r7, #0]
 8012e74:	0052      	lsls	r2, r2, #1
 8012e76:	431a      	orrs	r2, r3
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8012e7c:	2300      	movs	r3, #0
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	370c      	adds	r7, #12
 8012e82:	46bd      	mov	sp, r7
 8012e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e88:	4770      	bx	lr
 8012e8a:	bf00      	nop
 8012e8c:	ffffc001 	.word	0xffffc001

08012e90 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012e90:	8880      	ldrh	r0, [r0, #4]
 8012e92:	4770      	bx	lr

08012e94 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012e94:	2300      	movs	r3, #0
 8012e96:	8083      	strh	r3, [r0, #4]
 8012e98:	4770      	bx	lr
	...

08012e9c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e9e:	6803      	ldr	r3, [r0, #0]
 8012ea0:	460e      	mov	r6, r1
 8012ea2:	2100      	movs	r1, #0
 8012ea4:	4605      	mov	r5, r0
 8012ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ea8:	4798      	blx	r3
 8012eaa:	4604      	mov	r4, r0
 8012eac:	682b      	ldr	r3, [r5, #0]
 8012eae:	4628      	mov	r0, r5
 8012eb0:	1b34      	subs	r4, r6, r4
 8012eb2:	6a1b      	ldr	r3, [r3, #32]
 8012eb4:	b2a4      	uxth	r4, r4
 8012eb6:	4798      	blx	r3
 8012eb8:	88ab      	ldrh	r3, [r5, #4]
 8012eba:	fbb4 f4f0 	udiv	r4, r4, r0
 8012ebe:	42a3      	cmp	r3, r4
 8012ec0:	d805      	bhi.n	8012ece <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8012ec2:	4b0e      	ldr	r3, [pc, #56]	; (8012efc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8012ec4:	211e      	movs	r1, #30
 8012ec6:	4a0e      	ldr	r2, [pc, #56]	; (8012f00 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8012ec8:	480e      	ldr	r0, [pc, #56]	; (8012f04 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8012eca:	f012 fe53 	bl	8025b74 <__assert_func>
 8012ece:	682b      	ldr	r3, [r5, #0]
 8012ed0:	2100      	movs	r1, #0
 8012ed2:	4628      	mov	r0, r5
 8012ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ed6:	4798      	blx	r3
 8012ed8:	682b      	ldr	r3, [r5, #0]
 8012eda:	4607      	mov	r7, r0
 8012edc:	4628      	mov	r0, r5
 8012ede:	6a1b      	ldr	r3, [r3, #32]
 8012ee0:	4798      	blx	r3
 8012ee2:	1bf3      	subs	r3, r6, r7
 8012ee4:	b29b      	uxth	r3, r3
 8012ee6:	fbb3 f2f0 	udiv	r2, r3, r0
 8012eea:	fb02 3010 	mls	r0, r2, r0, r3
 8012eee:	b118      	cbz	r0, 8012ef8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8012ef0:	4b05      	ldr	r3, [pc, #20]	; (8012f08 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8012ef2:	211f      	movs	r1, #31
 8012ef4:	4a02      	ldr	r2, [pc, #8]	; (8012f00 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8012ef6:	e7e7      	b.n	8012ec8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8012ef8:	4620      	mov	r0, r4
 8012efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012efc:	0802810c 	.word	0x0802810c
 8012f00:	0802827a 	.word	0x0802827a
 8012f04:	08028121 	.word	0x08028121
 8012f08:	0802814f 	.word	0x0802814f

08012f0c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012f0c:	b538      	push	{r3, r4, r5, lr}
 8012f0e:	6803      	ldr	r3, [r0, #0]
 8012f10:	460d      	mov	r5, r1
 8012f12:	4604      	mov	r4, r0
 8012f14:	6a1b      	ldr	r3, [r3, #32]
 8012f16:	4798      	blx	r3
 8012f18:	4285      	cmp	r5, r0
 8012f1a:	d905      	bls.n	8012f28 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8012f1c:	4b0c      	ldr	r3, [pc, #48]	; (8012f50 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8012f1e:	2130      	movs	r1, #48	; 0x30
 8012f20:	4a0c      	ldr	r2, [pc, #48]	; (8012f54 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8012f22:	480d      	ldr	r0, [pc, #52]	; (8012f58 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8012f24:	f012 fe26 	bl	8025b74 <__assert_func>
 8012f28:	6823      	ldr	r3, [r4, #0]
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	88a5      	ldrh	r5, [r4, #4]
 8012f2e:	69db      	ldr	r3, [r3, #28]
 8012f30:	4798      	blx	r3
 8012f32:	4285      	cmp	r5, r0
 8012f34:	d303      	bcc.n	8012f3e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8012f36:	4b09      	ldr	r3, [pc, #36]	; (8012f5c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8012f38:	2131      	movs	r1, #49	; 0x31
 8012f3a:	4a06      	ldr	r2, [pc, #24]	; (8012f54 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8012f3c:	e7f1      	b.n	8012f22 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8012f3e:	6823      	ldr	r3, [r4, #0]
 8012f40:	4620      	mov	r0, r4
 8012f42:	88a1      	ldrh	r1, [r4, #4]
 8012f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f46:	4798      	blx	r3
 8012f48:	88a3      	ldrh	r3, [r4, #4]
 8012f4a:	3301      	adds	r3, #1
 8012f4c:	80a3      	strh	r3, [r4, #4]
 8012f4e:	bd38      	pop	{r3, r4, r5, pc}
 8012f50:	080281c9 	.word	0x080281c9
 8012f54:	080282bd 	.word	0x080282bd
 8012f58:	08028121 	.word	0x08028121
 8012f5c:	080281e0 	.word	0x080281e0

08012f60 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012f60:	b570      	push	{r4, r5, r6, lr}
 8012f62:	6803      	ldr	r3, [r0, #0]
 8012f64:	4616      	mov	r6, r2
 8012f66:	4604      	mov	r4, r0
 8012f68:	460d      	mov	r5, r1
 8012f6a:	6a1b      	ldr	r3, [r3, #32]
 8012f6c:	4798      	blx	r3
 8012f6e:	4286      	cmp	r6, r0
 8012f70:	d905      	bls.n	8012f7e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8012f72:	4b06      	ldr	r3, [pc, #24]	; (8012f8c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8012f74:	213a      	movs	r1, #58	; 0x3a
 8012f76:	4a06      	ldr	r2, [pc, #24]	; (8012f90 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8012f78:	4806      	ldr	r0, [pc, #24]	; (8012f94 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8012f7a:	f012 fdfb 	bl	8025b74 <__assert_func>
 8012f7e:	6823      	ldr	r3, [r4, #0]
 8012f80:	4629      	mov	r1, r5
 8012f82:	4620      	mov	r0, r4
 8012f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f8a:	4718      	bx	r3
 8012f8c:	080281c9 	.word	0x080281c9
 8012f90:	08028230 	.word	0x08028230
 8012f94:	08028121 	.word	0x08028121

08012f98 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012f98:	4770      	bx	lr
	...

08012f9c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012f9c:	4a02      	ldr	r2, [pc, #8]	; (8012fa8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012f9e:	6002      	str	r2, [r0, #0]
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	8082      	strh	r2, [r0, #4]
 8012fa4:	4770      	bx	lr
 8012fa6:	bf00      	nop
 8012fa8:	08028204 	.word	0x08028204

08012fac <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012fac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012fae:	2000      	movs	r0, #0
 8012fb0:	b12b      	cbz	r3, 8012fbe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012fb2:	b920      	cbnz	r0, 8012fbe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012fb4:	1a5a      	subs	r2, r3, r1
 8012fb6:	699b      	ldr	r3, [r3, #24]
 8012fb8:	4250      	negs	r0, r2
 8012fba:	4150      	adcs	r0, r2
 8012fbc:	e7f8      	b.n	8012fb0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012fbe:	4770      	bx	lr

08012fc0 <_ZN8touchgfx9Container9removeAllEv>:
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012fc4:	b123      	cbz	r3, 8012fd0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012fc6:	6999      	ldr	r1, [r3, #24]
 8012fc8:	6281      	str	r1, [r0, #40]	; 0x28
 8012fca:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012fce:	e7f8      	b.n	8012fc2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012fd0:	4770      	bx	lr

08012fd2 <_ZN8touchgfx9Container6unlinkEv>:
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	6283      	str	r3, [r0, #40]	; 0x28
 8012fd6:	4770      	bx	lr

08012fd8 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012fd8:	2200      	movs	r2, #0
 8012fda:	8002      	strh	r2, [r0, #0]
 8012fdc:	8042      	strh	r2, [r0, #2]
 8012fde:	8082      	strh	r2, [r0, #4]
 8012fe0:	80c2      	strh	r2, [r0, #6]
 8012fe2:	4770      	bx	lr

08012fe4 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	460d      	mov	r5, r1
 8012fe8:	4616      	mov	r6, r2
 8012fea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012fec:	b13c      	cbz	r4, 8012ffe <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012fee:	6823      	ldr	r3, [r4, #0]
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	4632      	mov	r2, r6
 8012ff4:	4629      	mov	r1, r5
 8012ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ff8:	4798      	blx	r3
 8012ffa:	69a4      	ldr	r4, [r4, #24]
 8012ffc:	e7f6      	b.n	8012fec <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012ffe:	bd70      	pop	{r4, r5, r6, pc}

08013000 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013000:	b538      	push	{r3, r4, r5, lr}
 8013002:	460d      	mov	r5, r1
 8013004:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013006:	b134      	cbz	r4, 8013016 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013008:	682b      	ldr	r3, [r5, #0]
 801300a:	4621      	mov	r1, r4
 801300c:	4628      	mov	r0, r5
 801300e:	689b      	ldr	r3, [r3, #8]
 8013010:	4798      	blx	r3
 8013012:	69a4      	ldr	r4, [r4, #24]
 8013014:	e7f7      	b.n	8013006 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013016:	bd38      	pop	{r3, r4, r5, pc}

08013018 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013018:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801301a:	b19b      	cbz	r3, 8013044 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801301c:	428b      	cmp	r3, r1
 801301e:	d109      	bne.n	8013034 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013020:	699a      	ldr	r2, [r3, #24]
 8013022:	2100      	movs	r1, #0
 8013024:	6159      	str	r1, [r3, #20]
 8013026:	6282      	str	r2, [r0, #40]	; 0x28
 8013028:	b902      	cbnz	r2, 801302c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801302a:	4770      	bx	lr
 801302c:	6199      	str	r1, [r3, #24]
 801302e:	4770      	bx	lr
 8013030:	4613      	mov	r3, r2
 8013032:	b13a      	cbz	r2, 8013044 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013034:	699a      	ldr	r2, [r3, #24]
 8013036:	428a      	cmp	r2, r1
 8013038:	d1fa      	bne.n	8013030 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801303a:	698a      	ldr	r2, [r1, #24]
 801303c:	619a      	str	r2, [r3, #24]
 801303e:	2300      	movs	r3, #0
 8013040:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013044:	4770      	bx	lr

08013046 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013046:	b410      	push	{r4}
 8013048:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801304a:	4604      	mov	r4, r0
 801304c:	b92b      	cbnz	r3, 801305a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801304e:	6803      	ldr	r3, [r0, #0]
 8013050:	4611      	mov	r1, r2
 8013052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013058:	4718      	bx	r3
 801305a:	b941      	cbnz	r1, 801306e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801305c:	6193      	str	r3, [r2, #24]
 801305e:	6282      	str	r2, [r0, #40]	; 0x28
 8013060:	6154      	str	r4, [r2, #20]
 8013062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013066:	4770      	bx	lr
 8013068:	4603      	mov	r3, r0
 801306a:	2800      	cmp	r0, #0
 801306c:	d0f9      	beq.n	8013062 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801306e:	4299      	cmp	r1, r3
 8013070:	6998      	ldr	r0, [r3, #24]
 8013072:	d1f9      	bne.n	8013068 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8013074:	6190      	str	r0, [r2, #24]
 8013076:	618a      	str	r2, [r1, #24]
 8013078:	e7f2      	b.n	8013060 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0801307c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801307c:	4288      	cmp	r0, r1
 801307e:	b508      	push	{r3, lr}
 8013080:	d105      	bne.n	801308e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8013082:	4b11      	ldr	r3, [pc, #68]	; (80130c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8013084:	2123      	movs	r1, #35	; 0x23
 8013086:	4a11      	ldr	r2, [pc, #68]	; (80130cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013088:	4811      	ldr	r0, [pc, #68]	; (80130d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801308a:	f012 fd73 	bl	8025b74 <__assert_func>
 801308e:	694b      	ldr	r3, [r1, #20]
 8013090:	b11b      	cbz	r3, 801309a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8013092:	4b10      	ldr	r3, [pc, #64]	; (80130d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8013094:	2124      	movs	r1, #36	; 0x24
 8013096:	4a0d      	ldr	r2, [pc, #52]	; (80130cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013098:	e7f6      	b.n	8013088 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801309a:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801309e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80130a0:	b913      	cbnz	r3, 80130a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80130a2:	6281      	str	r1, [r0, #40]	; 0x28
 80130a4:	bd08      	pop	{r3, pc}
 80130a6:	4613      	mov	r3, r2
 80130a8:	699a      	ldr	r2, [r3, #24]
 80130aa:	b12a      	cbz	r2, 80130b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80130ac:	428b      	cmp	r3, r1
 80130ae:	d1fa      	bne.n	80130a6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80130b0:	4b09      	ldr	r3, [pc, #36]	; (80130d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80130b2:	2135      	movs	r1, #53	; 0x35
 80130b4:	4a05      	ldr	r2, [pc, #20]	; (80130cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80130b6:	e7e7      	b.n	8013088 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80130b8:	428b      	cmp	r3, r1
 80130ba:	d103      	bne.n	80130c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80130bc:	4b06      	ldr	r3, [pc, #24]	; (80130d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80130be:	2138      	movs	r1, #56	; 0x38
 80130c0:	4a02      	ldr	r2, [pc, #8]	; (80130cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80130c2:	e7e1      	b.n	8013088 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80130c4:	6199      	str	r1, [r3, #24]
 80130c6:	e7ed      	b.n	80130a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80130c8:	080282fb 	.word	0x080282fb
 80130cc:	08028450 	.word	0x08028450
 80130d0:	08028327 	.word	0x08028327
 80130d4:	0802835a 	.word	0x0802835a
 80130d8:	08028390 	.word	0x08028390

080130dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80130dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e0:	461f      	mov	r7, r3
 80130e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80130e6:	460d      	mov	r5, r1
 80130e8:	4616      	mov	r6, r2
 80130ea:	b103      	cbz	r3, 80130ee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80130ec:	6038      	str	r0, [r7, #0]
 80130ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80130f0:	b314      	cbz	r4, 8013138 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80130f2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80130f6:	b1eb      	cbz	r3, 8013134 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80130f8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80130fc:	428d      	cmp	r5, r1
 80130fe:	db19      	blt.n	8013134 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013100:	b289      	uxth	r1, r1
 8013102:	8923      	ldrh	r3, [r4, #8]
 8013104:	440b      	add	r3, r1
 8013106:	b21b      	sxth	r3, r3
 8013108:	429d      	cmp	r5, r3
 801310a:	da13      	bge.n	8013134 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801310c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013110:	4296      	cmp	r6, r2
 8013112:	db0f      	blt.n	8013134 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013114:	b292      	uxth	r2, r2
 8013116:	8963      	ldrh	r3, [r4, #10]
 8013118:	4413      	add	r3, r2
 801311a:	b21b      	sxth	r3, r3
 801311c:	429e      	cmp	r6, r3
 801311e:	da09      	bge.n	8013134 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013120:	6823      	ldr	r3, [r4, #0]
 8013122:	1ab2      	subs	r2, r6, r2
 8013124:	1a69      	subs	r1, r5, r1
 8013126:	4620      	mov	r0, r4
 8013128:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801312c:	b212      	sxth	r2, r2
 801312e:	463b      	mov	r3, r7
 8013130:	b209      	sxth	r1, r1
 8013132:	47c0      	blx	r8
 8013134:	69a4      	ldr	r4, [r4, #24]
 8013136:	e7db      	b.n	80130f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801313c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 801313c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013140:	4c6d      	ldr	r4, [pc, #436]	; (80132f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013142:	b0a1      	sub	sp, #132	; 0x84
 8013144:	4606      	mov	r6, r0
 8013146:	6824      	ldr	r4, [r4, #0]
 8013148:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801314a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 801314e:	2400      	movs	r4, #0
 8013150:	9303      	str	r3, [sp, #12]
 8013152:	802c      	strh	r4, [r5, #0]
 8013154:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8013156:	802c      	strh	r4, [r5, #0]
 8013158:	601c      	str	r4, [r3, #0]
 801315a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801315e:	f7ff ffbd 	bl	80130dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013162:	f1b9 0f03 	cmp.w	r9, #3
 8013166:	f340 80c1 	ble.w	80132ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801316a:	4631      	mov	r1, r6
 801316c:	a80c      	add	r0, sp, #48	; 0x30
 801316e:	f005 f83f 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013172:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013176:	9306      	str	r3, [sp, #24]
 8013178:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801317c:	9307      	str	r3, [sp, #28]
 801317e:	9b03      	ldr	r3, [sp, #12]
 8013180:	f8d3 a000 	ldr.w	sl, [r3]
 8013184:	f1ba 0f00 	cmp.w	sl, #0
 8013188:	f000 80b3 	beq.w	80132f2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 801318c:	4651      	mov	r1, sl
 801318e:	a810      	add	r0, sp, #64	; 0x40
 8013190:	f005 f82e 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013194:	2002      	movs	r0, #2
 8013196:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801319a:	9b01      	ldr	r3, [sp, #4]
 801319c:	9a06      	ldr	r2, [sp, #24]
 801319e:	fb91 f1f0 	sdiv	r1, r1, r0
 80131a2:	189d      	adds	r5, r3, r2
 80131a4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80131a8:	9a07      	ldr	r2, [sp, #28]
 80131aa:	4419      	add	r1, r3
 80131ac:	9b02      	ldr	r3, [sp, #8]
 80131ae:	4413      	add	r3, r2
 80131b0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80131b4:	1a6d      	subs	r5, r5, r1
 80131b6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80131ba:	fb92 f2f0 	sdiv	r2, r2, r0
 80131be:	440a      	add	r2, r1
 80131c0:	1a9b      	subs	r3, r3, r2
 80131c2:	435b      	muls	r3, r3
 80131c4:	fb05 3505 	mla	r5, r5, r5, r3
 80131c8:	4f4c      	ldr	r7, [pc, #304]	; (80132fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80131ca:	ac10      	add	r4, sp, #64	; 0x40
 80131cc:	f1b9 0f0c 	cmp.w	r9, #12
 80131d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80131d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80131d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80131da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131dc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80131e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80131e4:	f04f 0303 	mov.w	r3, #3
 80131e8:	bfd8      	it	le
 80131ea:	f109 32ff 	addle.w	r2, r9, #4294967295
 80131ee:	f04f 0400 	mov.w	r4, #0
 80131f2:	f8cd 9000 	str.w	r9, [sp]
 80131f6:	bfcc      	ite	gt
 80131f8:	4698      	movgt	r8, r3
 80131fa:	fb92 f8f3 	sdivle	r8, r2, r3
 80131fe:	1c63      	adds	r3, r4, #1
 8013200:	aa10      	add	r2, sp, #64	; 0x40
 8013202:	f004 0401 	and.w	r4, r4, #1
 8013206:	f04f 0b00 	mov.w	fp, #0
 801320a:	9308      	str	r3, [sp, #32]
 801320c:	9b00      	ldr	r3, [sp, #0]
 801320e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8013212:	fb93 f3f8 	sdiv	r3, r3, r8
 8013216:	3404      	adds	r4, #4
 8013218:	b29b      	uxth	r3, r3
 801321a:	9304      	str	r3, [sp, #16]
 801321c:	9a04      	ldr	r2, [sp, #16]
 801321e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013222:	fb13 f302 	smulbb	r3, r3, r2
 8013226:	9a01      	ldr	r2, [sp, #4]
 8013228:	b29b      	uxth	r3, r3
 801322a:	1899      	adds	r1, r3, r2
 801322c:	9305      	str	r3, [sp, #20]
 801322e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013232:	b209      	sxth	r1, r1
 8013234:	4299      	cmp	r1, r3
 8013236:	db4d      	blt.n	80132d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013238:	8932      	ldrh	r2, [r6, #8]
 801323a:	4413      	add	r3, r2
 801323c:	b21b      	sxth	r3, r3
 801323e:	4299      	cmp	r1, r3
 8013240:	da48      	bge.n	80132d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013242:	9b04      	ldr	r3, [sp, #16]
 8013244:	6827      	ldr	r7, [r4, #0]
 8013246:	fb17 f703 	smulbb	r7, r7, r3
 801324a:	9b02      	ldr	r3, [sp, #8]
 801324c:	b2bf      	uxth	r7, r7
 801324e:	18fa      	adds	r2, r7, r3
 8013250:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013254:	b212      	sxth	r2, r2
 8013256:	429a      	cmp	r2, r3
 8013258:	db3c      	blt.n	80132d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801325a:	8970      	ldrh	r0, [r6, #10]
 801325c:	4403      	add	r3, r0
 801325e:	b21b      	sxth	r3, r3
 8013260:	429a      	cmp	r2, r3
 8013262:	da37      	bge.n	80132d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013264:	2300      	movs	r3, #0
 8013266:	4630      	mov	r0, r6
 8013268:	930b      	str	r3, [sp, #44]	; 0x2c
 801326a:	ab0b      	add	r3, sp, #44	; 0x2c
 801326c:	f7ff ff36 	bl	80130dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013270:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013272:	b37a      	cbz	r2, 80132d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013274:	4552      	cmp	r2, sl
 8013276:	d02d      	beq.n	80132d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013278:	4611      	mov	r1, r2
 801327a:	a80e      	add	r0, sp, #56	; 0x38
 801327c:	9209      	str	r2, [sp, #36]	; 0x24
 801327e:	f004 ffb7 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013282:	f04f 0e02 	mov.w	lr, #2
 8013286:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801328a:	9a06      	ldr	r2, [sp, #24]
 801328c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8013290:	9b01      	ldr	r3, [sp, #4]
 8013292:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8013296:	4413      	add	r3, r2
 8013298:	9a07      	ldr	r2, [sp, #28]
 801329a:	fb91 f1fe 	sdiv	r1, r1, lr
 801329e:	fb9c fcfe 	sdiv	ip, ip, lr
 80132a2:	4401      	add	r1, r0
 80132a4:	1a58      	subs	r0, r3, r1
 80132a6:	9b02      	ldr	r3, [sp, #8]
 80132a8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80132ac:	4413      	add	r3, r2
 80132ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132b0:	448c      	add	ip, r1
 80132b2:	eba3 030c 	sub.w	r3, r3, ip
 80132b6:	435b      	muls	r3, r3
 80132b8:	fb00 3300 	mla	r3, r0, r0, r3
 80132bc:	42ab      	cmp	r3, r5
 80132be:	d208      	bcs.n	80132d2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80132c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80132c2:	461d      	mov	r5, r3
 80132c4:	9803      	ldr	r0, [sp, #12]
 80132c6:	6001      	str	r1, [r0, #0]
 80132c8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80132ca:	9805      	ldr	r0, [sp, #20]
 80132cc:	8008      	strh	r0, [r1, #0]
 80132ce:	992b      	ldr	r1, [sp, #172]	; 0xac
 80132d0:	800f      	strh	r7, [r1, #0]
 80132d2:	4692      	mov	sl, r2
 80132d4:	f10b 0b01 	add.w	fp, fp, #1
 80132d8:	3408      	adds	r4, #8
 80132da:	f1bb 0f04 	cmp.w	fp, #4
 80132de:	d19d      	bne.n	801321c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80132e0:	9b00      	ldr	r3, [sp, #0]
 80132e2:	9c08      	ldr	r4, [sp, #32]
 80132e4:	444b      	add	r3, r9
 80132e6:	4544      	cmp	r4, r8
 80132e8:	9300      	str	r3, [sp, #0]
 80132ea:	d188      	bne.n	80131fe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80132ec:	b021      	add	sp, #132	; 0x84
 80132ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f2:	f04f 35ff 	mov.w	r5, #4294967295
 80132f6:	e767      	b.n	80131c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80132f8:	2400aeec 	.word	0x2400aeec
 80132fc:	0802768c 	.word	0x0802768c

08013300 <_ZN8touchgfx4RectaNERKS0_>:
 8013300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013304:	f9b1 7000 	ldrsh.w	r7, [r1]
 8013308:	888c      	ldrh	r4, [r1, #4]
 801330a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801330e:	443c      	add	r4, r7
 8013310:	b2a4      	uxth	r4, r4
 8013312:	fa0f f884 	sxth.w	r8, r4
 8013316:	45c1      	cmp	r9, r8
 8013318:	da2f      	bge.n	801337a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801331a:	8882      	ldrh	r2, [r0, #4]
 801331c:	444a      	add	r2, r9
 801331e:	b292      	uxth	r2, r2
 8013320:	fa0f fe82 	sxth.w	lr, r2
 8013324:	4577      	cmp	r7, lr
 8013326:	da28      	bge.n	801337a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013328:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801332c:	88cb      	ldrh	r3, [r1, #6]
 801332e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013332:	442b      	add	r3, r5
 8013334:	b21b      	sxth	r3, r3
 8013336:	429e      	cmp	r6, r3
 8013338:	da1f      	bge.n	801337a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801333a:	88c3      	ldrh	r3, [r0, #6]
 801333c:	4433      	add	r3, r6
 801333e:	b29b      	uxth	r3, r3
 8013340:	fa0f fc83 	sxth.w	ip, r3
 8013344:	4565      	cmp	r5, ip
 8013346:	da18      	bge.n	801337a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013348:	454f      	cmp	r7, r9
 801334a:	bfb8      	it	lt
 801334c:	464f      	movlt	r7, r9
 801334e:	42b5      	cmp	r5, r6
 8013350:	bfb8      	it	lt
 8013352:	4635      	movlt	r5, r6
 8013354:	45f0      	cmp	r8, lr
 8013356:	bfd8      	it	le
 8013358:	4622      	movle	r2, r4
 801335a:	1bd2      	subs	r2, r2, r7
 801335c:	8082      	strh	r2, [r0, #4]
 801335e:	884a      	ldrh	r2, [r1, #2]
 8013360:	88c9      	ldrh	r1, [r1, #6]
 8013362:	8007      	strh	r7, [r0, #0]
 8013364:	440a      	add	r2, r1
 8013366:	8045      	strh	r5, [r0, #2]
 8013368:	b292      	uxth	r2, r2
 801336a:	b211      	sxth	r1, r2
 801336c:	458c      	cmp	ip, r1
 801336e:	bfa8      	it	ge
 8013370:	4613      	movge	r3, r2
 8013372:	1b5b      	subs	r3, r3, r5
 8013374:	80c3      	strh	r3, [r0, #6]
 8013376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801337a:	2300      	movs	r3, #0
 801337c:	8003      	strh	r3, [r0, #0]
 801337e:	8043      	strh	r3, [r0, #2]
 8013380:	8083      	strh	r3, [r0, #4]
 8013382:	80c3      	strh	r3, [r0, #6]
 8013384:	e7f7      	b.n	8013376 <_ZN8touchgfx4RectaNERKS0_+0x76>

08013386 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8013386:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801338a:	2b00      	cmp	r3, #0
 801338c:	dd06      	ble.n	801339c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801338e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8013392:	2800      	cmp	r0, #0
 8013394:	bfcc      	ite	gt
 8013396:	2000      	movgt	r0, #0
 8013398:	2001      	movle	r0, #1
 801339a:	4770      	bx	lr
 801339c:	2001      	movs	r0, #1
 801339e:	4770      	bx	lr

080133a0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80133a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133a4:	2300      	movs	r3, #0
 80133a6:	4604      	mov	r4, r0
 80133a8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80133aa:	8003      	strh	r3, [r0, #0]
 80133ac:	8043      	strh	r3, [r0, #2]
 80133ae:	8083      	strh	r3, [r0, #4]
 80133b0:	80c3      	strh	r3, [r0, #6]
 80133b2:	2d00      	cmp	r5, #0
 80133b4:	d040      	beq.n	8013438 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80133b6:	1d28      	adds	r0, r5, #4
 80133b8:	f7ff ffe5 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 80133bc:	b988      	cbnz	r0, 80133e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80133be:	4620      	mov	r0, r4
 80133c0:	f7ff ffe1 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 80133c4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80133c8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80133cc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80133d0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80133d4:	b138      	cbz	r0, 80133e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80133d6:	8022      	strh	r2, [r4, #0]
 80133d8:	8063      	strh	r3, [r4, #2]
 80133da:	f8a4 e004 	strh.w	lr, [r4, #4]
 80133de:	f8a4 c006 	strh.w	ip, [r4, #6]
 80133e2:	69ad      	ldr	r5, [r5, #24]
 80133e4:	e7e5      	b.n	80133b2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80133e6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80133ea:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80133ee:	4290      	cmp	r0, r2
 80133f0:	4607      	mov	r7, r0
 80133f2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80133f6:	460e      	mov	r6, r1
 80133f8:	bfa8      	it	ge
 80133fa:	4617      	movge	r7, r2
 80133fc:	4299      	cmp	r1, r3
 80133fe:	4472      	add	r2, lr
 8013400:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8013404:	bfa8      	it	ge
 8013406:	461e      	movge	r6, r3
 8013408:	4440      	add	r0, r8
 801340a:	4471      	add	r1, lr
 801340c:	4463      	add	r3, ip
 801340e:	b200      	sxth	r0, r0
 8013410:	8027      	strh	r7, [r4, #0]
 8013412:	b212      	sxth	r2, r2
 8013414:	8066      	strh	r6, [r4, #2]
 8013416:	b209      	sxth	r1, r1
 8013418:	b21b      	sxth	r3, r3
 801341a:	4290      	cmp	r0, r2
 801341c:	bfac      	ite	ge
 801341e:	ebc7 0200 	rsbge	r2, r7, r0
 8013422:	ebc7 0202 	rsblt	r2, r7, r2
 8013426:	4299      	cmp	r1, r3
 8013428:	bfac      	ite	ge
 801342a:	ebc6 0301 	rsbge	r3, r6, r1
 801342e:	ebc6 0303 	rsblt	r3, r6, r3
 8013432:	80a2      	strh	r2, [r4, #4]
 8013434:	80e3      	strh	r3, [r4, #6]
 8013436:	e7d4      	b.n	80133e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013438:	4620      	mov	r0, r4
 801343a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801343e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801343e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013442:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013446:	b383      	cbz	r3, 80134aa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013448:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801344a:	b374      	cbz	r4, 80134aa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801344c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8013450:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8013454:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013458:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801345c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013460:	b303      	cbz	r3, 80134a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013462:	4668      	mov	r0, sp
 8013464:	1d21      	adds	r1, r4, #4
 8013466:	f8ad 5000 	strh.w	r5, [sp]
 801346a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801346e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013472:	f8ad 8006 	strh.w	r8, [sp, #6]
 8013476:	f7ff ff43 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 801347a:	4668      	mov	r0, sp
 801347c:	f7ff ff83 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013480:	b980      	cbnz	r0, 80134a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013482:	f8bd 3000 	ldrh.w	r3, [sp]
 8013486:	4669      	mov	r1, sp
 8013488:	88a2      	ldrh	r2, [r4, #4]
 801348a:	4620      	mov	r0, r4
 801348c:	1a9b      	subs	r3, r3, r2
 801348e:	88e2      	ldrh	r2, [r4, #6]
 8013490:	f8ad 3000 	strh.w	r3, [sp]
 8013494:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013498:	1a9b      	subs	r3, r3, r2
 801349a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801349e:	6823      	ldr	r3, [r4, #0]
 80134a0:	689b      	ldr	r3, [r3, #8]
 80134a2:	4798      	blx	r3
 80134a4:	69a4      	ldr	r4, [r4, #24]
 80134a6:	2c00      	cmp	r4, #0
 80134a8:	d1d8      	bne.n	801345c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80134aa:	b002      	add	sp, #8
 80134ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134b0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80134b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80134b2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80134b6:	460d      	mov	r5, r1
 80134b8:	4616      	mov	r6, r2
 80134ba:	b323      	cbz	r3, 8013506 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80134bc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80134be:	b314      	cbz	r4, 8013506 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80134c0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80134c4:	b1eb      	cbz	r3, 8013502 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80134c6:	6828      	ldr	r0, [r5, #0]
 80134c8:	466b      	mov	r3, sp
 80134ca:	6869      	ldr	r1, [r5, #4]
 80134cc:	c303      	stmia	r3!, {r0, r1}
 80134ce:	4668      	mov	r0, sp
 80134d0:	1d21      	adds	r1, r4, #4
 80134d2:	f7ff ff15 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 80134d6:	4668      	mov	r0, sp
 80134d8:	f7ff ff55 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 80134dc:	b988      	cbnz	r0, 8013502 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80134de:	f8bd 3000 	ldrh.w	r3, [sp]
 80134e2:	4669      	mov	r1, sp
 80134e4:	88a2      	ldrh	r2, [r4, #4]
 80134e6:	4620      	mov	r0, r4
 80134e8:	1a9b      	subs	r3, r3, r2
 80134ea:	88e2      	ldrh	r2, [r4, #6]
 80134ec:	f8ad 3000 	strh.w	r3, [sp]
 80134f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80134f4:	1a9b      	subs	r3, r3, r2
 80134f6:	4632      	mov	r2, r6
 80134f8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80134fc:	6823      	ldr	r3, [r4, #0]
 80134fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013500:	4798      	blx	r3
 8013502:	69a4      	ldr	r4, [r4, #24]
 8013504:	e7db      	b.n	80134be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8013506:	b002      	add	sp, #8
 8013508:	bd70      	pop	{r4, r5, r6, pc}

0801350a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801350a:	2000      	movs	r0, #0
 801350c:	4770      	bx	lr

0801350e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801350e:	2001      	movs	r0, #1
 8013510:	4770      	bx	lr

08013512 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 8013512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013514:	6803      	ldr	r3, [r0, #0]
 8013516:	4604      	mov	r4, r0
 8013518:	460e      	mov	r6, r1
 801351a:	4601      	mov	r1, r0
 801351c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801351e:	4668      	mov	r0, sp
 8013520:	4615      	mov	r5, r2
 8013522:	4798      	blx	r3
 8013524:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8013528:	b13b      	cbz	r3, 801353a <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x28>
 801352a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801352e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013532:	4293      	cmp	r3, r2
 8013534:	bfac      	ite	ge
 8013536:	2300      	movge	r3, #0
 8013538:	2301      	movlt	r3, #1
 801353a:	7033      	strb	r3, [r6, #0]
 801353c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8013540:	b13b      	cbz	r3, 8013552 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x40>
 8013542:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013546:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801354a:	4293      	cmp	r3, r2
 801354c:	bfac      	ite	ge
 801354e:	2300      	movge	r3, #0
 8013550:	2301      	movlt	r3, #1
 8013552:	702b      	strb	r3, [r5, #0]
 8013554:	b002      	add	sp, #8
 8013556:	bd70      	pop	{r4, r5, r6, pc}

08013558 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 8013558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801355c:	4604      	mov	r4, r0
 801355e:	460f      	mov	r7, r1
 8013560:	4616      	mov	r6, r2
 8013562:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8013564:	f100 0838 	add.w	r8, r0, #56	; 0x38
 8013568:	f100 0964 	add.w	r9, r0, #100	; 0x64
 801356c:	b15d      	cbz	r5, 8013586 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 801356e:	4545      	cmp	r5, r8
 8013570:	d007      	beq.n	8013582 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 8013572:	454d      	cmp	r5, r9
 8013574:	d005      	beq.n	8013582 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 8013576:	682b      	ldr	r3, [r5, #0]
 8013578:	4632      	mov	r2, r6
 801357a:	4639      	mov	r1, r7
 801357c:	4628      	mov	r0, r5
 801357e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013580:	4798      	blx	r3
 8013582:	69ad      	ldr	r5, [r5, #24]
 8013584:	e7f2      	b.n	801356c <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 8013586:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 801358a:	441f      	add	r7, r3
 801358c:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 8013590:	441e      	add	r6, r3
 8013592:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
 8013596:	f8a4 609a 	strh.w	r6, [r4, #154]	; 0x9a
 801359a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801359e <_ZN8touchgfx9DragEventD1Ev>:
 801359e:	4770      	bx	lr

080135a0 <_ZN8touchgfx10ClickEventD1Ev>:
 80135a0:	4770      	bx	lr

080135a2 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 80135a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a4:	4605      	mov	r5, r0
 80135a6:	f100 0638 	add.w	r6, r0, #56	; 0x38
 80135aa:	4604      	mov	r4, r0
 80135ac:	460f      	mov	r7, r1
 80135ae:	f855 3b64 	ldr.w	r3, [r5], #100
 80135b2:	4631      	mov	r1, r6
 80135b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80135b6:	4798      	blx	r3
 80135b8:	6823      	ldr	r3, [r4, #0]
 80135ba:	4629      	mov	r1, r5
 80135bc:	4620      	mov	r0, r4
 80135be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80135c0:	4798      	blx	r3
 80135c2:	4639      	mov	r1, r7
 80135c4:	4620      	mov	r0, r4
 80135c6:	f7ff fd59 	bl	801307c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80135ca:	4631      	mov	r1, r6
 80135cc:	4620      	mov	r0, r4
 80135ce:	f7ff fd55 	bl	801307c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80135d2:	4629      	mov	r1, r5
 80135d4:	4620      	mov	r0, r4
 80135d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80135da:	f7ff bd4f 	b.w	801307c <_ZN8touchgfx9Container3addERNS_8DrawableE>

080135de <_ZN8touchgfx10ClickEventD0Ev>:
 80135de:	b510      	push	{r4, lr}
 80135e0:	4604      	mov	r4, r0
 80135e2:	210c      	movs	r1, #12
 80135e4:	f012 fa97 	bl	8025b16 <_ZdlPvj>
 80135e8:	4620      	mov	r0, r4
 80135ea:	bd10      	pop	{r4, pc}

080135ec <_ZN8touchgfx9DragEventD0Ev>:
 80135ec:	b510      	push	{r4, lr}
 80135ee:	4604      	mov	r4, r0
 80135f0:	2110      	movs	r1, #16
 80135f2:	f012 fa90 	bl	8025b16 <_ZdlPvj>
 80135f6:	4620      	mov	r0, r4
 80135f8:	bd10      	pop	{r4, pc}
	...

080135fc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 80135fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013600:	b08b      	sub	sp, #44	; 0x2c
 8013602:	2300      	movs	r3, #0
 8013604:	4604      	mov	r4, r0
 8013606:	f9b1 9006 	ldrsh.w	r9, [r1, #6]
 801360a:	aa0a      	add	r2, sp, #40	; 0x28
 801360c:	f88d 3006 	strb.w	r3, [sp, #6]
 8013610:	f9b1 8008 	ldrsh.w	r8, [r1, #8]
 8013614:	460d      	mov	r5, r1
 8013616:	f802 3d21 	strb.w	r3, [r2, #-33]!
 801361a:	6803      	ldr	r3, [r0, #0]
 801361c:	f9b1 700a 	ldrsh.w	r7, [r1, #10]
 8013620:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 8013624:	f10d 0106 	add.w	r1, sp, #6
 8013628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801362c:	4798      	blx	r3
 801362e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8013632:	2900      	cmp	r1, #0
 8013634:	d03d      	beq.n	80136b2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013636:	42a1      	cmp	r1, r4
 8013638:	d03b      	beq.n	80136b2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801363a:	a802      	add	r0, sp, #8
 801363c:	f004 fdd8 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013640:	4621      	mov	r1, r4
 8013642:	a804      	add	r0, sp, #16
 8013644:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 8013648:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 801364c:	f004 fdd0 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013650:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8013654:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 8013658:	eba3 030b 	sub.w	r3, r3, fp
 801365c:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8013660:	88e9      	ldrh	r1, [r5, #6]
 8013662:	4413      	add	r3, r2
 8013664:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013668:	f89d c006 	ldrb.w	ip, [sp, #6]
 801366c:	eba2 020a 	sub.w	r2, r2, sl
 8013670:	b29b      	uxth	r3, r3
 8013672:	4402      	add	r2, r0
 8013674:	8928      	ldrh	r0, [r5, #8]
 8013676:	4419      	add	r1, r3
 8013678:	b292      	uxth	r2, r2
 801367a:	b209      	sxth	r1, r1
 801367c:	4410      	add	r0, r2
 801367e:	b200      	sxth	r0, r0
 8013680:	f1bc 0f00 	cmp.w	ip, #0
 8013684:	f040 808f 	bne.w	80137a6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 8013688:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 801368c:	4473      	add	r3, lr
 801368e:	b21b      	sxth	r3, r3
 8013690:	f89d e007 	ldrb.w	lr, [sp, #7]
 8013694:	f1be 0f00 	cmp.w	lr, #0
 8013698:	f040 80b3 	bne.w	8013802 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x206>
 801369c:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 80136a0:	4472      	add	r2, lr
 80136a2:	b212      	sxth	r2, r2
 80136a4:	f1bc 0f00 	cmp.w	ip, #0
 80136a8:	f000 80ca 	beq.w	8013840 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x244>
 80136ac:	4290      	cmp	r0, r2
 80136ae:	f040 80b0 	bne.w	8013812 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x216>
 80136b2:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 80136b6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	f040 809b 	bne.w	80137f6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 80136c0:	896e      	ldrh	r6, [r5, #10]
 80136c2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80136c6:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 80136ca:	89ad      	ldrh	r5, [r5, #12]
 80136cc:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
 80136d0:	f8b4 80a0 	ldrh.w	r8, [r4, #160]	; 0xa0
 80136d4:	4419      	add	r1, r3
 80136d6:	4433      	add	r3, r6
 80136d8:	4490      	add	r8, r2
 80136da:	442a      	add	r2, r5
 80136dc:	b29b      	uxth	r3, r3
 80136de:	f89d 5006 	ldrb.w	r5, [sp, #6]
 80136e2:	b292      	uxth	r2, r2
 80136e4:	b289      	uxth	r1, r1
 80136e6:	fa1f f888 	uxth.w	r8, r8
 80136ea:	b21f      	sxth	r7, r3
 80136ec:	b216      	sxth	r6, r2
 80136ee:	b165      	cbz	r5, 801370a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10e>
 80136f0:	1a5b      	subs	r3, r3, r1
 80136f2:	b29b      	uxth	r3, r3
 80136f4:	b21d      	sxth	r5, r3
 80136f6:	2d00      	cmp	r5, #0
 80136f8:	bfbc      	itt	lt
 80136fa:	425b      	neglt	r3, r3
 80136fc:	b21d      	sxthlt	r5, r3
 80136fe:	f9b4 309c 	ldrsh.w	r3, [r4, #156]	; 0x9c
 8013702:	42ab      	cmp	r3, r5
 8013704:	bfac      	ite	ge
 8013706:	2500      	movge	r5, #0
 8013708:	2501      	movlt	r5, #1
 801370a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801370e:	b15b      	cbz	r3, 8013728 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 8013710:	eba2 0308 	sub.w	r3, r2, r8
 8013714:	b29b      	uxth	r3, r3
 8013716:	b21a      	sxth	r2, r3
 8013718:	2a00      	cmp	r2, #0
 801371a:	bfbc      	itt	lt
 801371c:	425b      	neglt	r3, r3
 801371e:	b21a      	sxthlt	r2, r3
 8013720:	f9b4 309c 	ldrsh.w	r3, [r4, #156]	; 0x9c
 8013724:	4293      	cmp	r3, r2
 8013726:	db01      	blt.n	801372c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x130>
 8013728:	2d00      	cmp	r5, #0
 801372a:	d03e      	beq.n	80137aa <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1ae>
 801372c:	2501      	movs	r5, #1
 801372e:	fa0f f981 	sxth.w	r9, r1
 8013732:	fa0f f888 	sxth.w	r8, r8
 8013736:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 801373a:	b1a0      	cbz	r0, 8013766 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x16a>
 801373c:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8013740:	b98b      	cbnz	r3, 8013766 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x16a>
 8013742:	4a41      	ldr	r2, [pc, #260]	; (8013848 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>)
 8013744:	a906      	add	r1, sp, #24
 8013746:	f8ad 301e 	strh.w	r3, [sp, #30]
 801374a:	9206      	str	r2, [sp, #24]
 801374c:	2202      	movs	r2, #2
 801374e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013752:	f88d 201c 	strb.w	r2, [sp, #28]
 8013756:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801375a:	6803      	ldr	r3, [r0, #0]
 801375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801375e:	4798      	blx	r3
 8013760:	2301      	movs	r3, #1
 8013762:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 8013766:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 801376a:	b149      	cbz	r1, 8013780 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x184>
 801376c:	eba7 0109 	sub.w	r1, r7, r9
 8013770:	b209      	sxth	r1, r1
 8013772:	b12d      	cbz	r5, 8013780 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x184>
 8013774:	2900      	cmp	r1, #0
 8013776:	dc40      	bgt.n	80137fa <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 8013778:	bf14      	ite	ne
 801377a:	f04f 31ff 	movne.w	r1, #4294967295
 801377e:	2100      	moveq	r1, #0
 8013780:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8013784:	b14a      	cbz	r2, 801379a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 8013786:	eba6 0608 	sub.w	r6, r6, r8
 801378a:	b232      	sxth	r2, r6
 801378c:	b12d      	cbz	r5, 801379a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 801378e:	2a00      	cmp	r2, #0
 8013790:	dc35      	bgt.n	80137fe <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 8013792:	bf14      	ite	ne
 8013794:	f04f 32ff 	movne.w	r2, #4294967295
 8013798:	2200      	moveq	r2, #0
 801379a:	6823      	ldr	r3, [r4, #0]
 801379c:	4620      	mov	r0, r4
 801379e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80137a2:	4798      	blx	r3
 80137a4:	e024      	b.n	80137f0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 80137a6:	460b      	mov	r3, r1
 80137a8:	e772      	b.n	8013690 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 80137aa:	b308      	cbz	r0, 80137f0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 80137ac:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 80137b0:	b9f3      	cbnz	r3, 80137f0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 80137b2:	ab0a      	add	r3, sp, #40	; 0x28
 80137b4:	4620      	mov	r0, r4
 80137b6:	4632      	mov	r2, r6
 80137b8:	4639      	mov	r1, r7
 80137ba:	f843 5d18 	str.w	r5, [r3, #-24]!
 80137be:	f7ff fc8d 	bl	80130dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80137c2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80137c6:	9b04      	ldr	r3, [sp, #16]
 80137c8:	4298      	cmp	r0, r3
 80137ca:	d011      	beq.n	80137f0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 80137cc:	4b1e      	ldr	r3, [pc, #120]	; (8013848 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>)
 80137ce:	a906      	add	r1, sp, #24
 80137d0:	f8ad 501e 	strh.w	r5, [sp, #30]
 80137d4:	9306      	str	r3, [sp, #24]
 80137d6:	2302      	movs	r3, #2
 80137d8:	f8ad 5020 	strh.w	r5, [sp, #32]
 80137dc:	f88d 301c 	strb.w	r3, [sp, #28]
 80137e0:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 80137e4:	6803      	ldr	r3, [r0, #0]
 80137e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137e8:	4798      	blx	r3
 80137ea:	2301      	movs	r3, #1
 80137ec:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 80137f0:	b00b      	add	sp, #44	; 0x2c
 80137f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137f6:	2500      	movs	r5, #0
 80137f8:	e79f      	b.n	801373a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13e>
 80137fa:	2101      	movs	r1, #1
 80137fc:	e7c0      	b.n	8013780 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x184>
 80137fe:	2201      	movs	r2, #1
 8013800:	e7cb      	b.n	801379a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 8013802:	f1bc 0f00 	cmp.w	ip, #0
 8013806:	f47f af54 	bne.w	80136b2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801380a:	428b      	cmp	r3, r1
 801380c:	f43f af51 	beq.w	80136b2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013810:	4602      	mov	r2, r0
 8013812:	f8df c038 	ldr.w	ip, [pc, #56]	; 801384c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x250>
 8013816:	f8ad 0020 	strh.w	r0, [sp, #32]
 801381a:	f8cd c018 	str.w	ip, [sp, #24]
 801381e:	f04f 0c00 	mov.w	ip, #0
 8013822:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013826:	f8ad 101e 	strh.w	r1, [sp, #30]
 801382a:	a906      	add	r1, sp, #24
 801382c:	f88d c01c 	strb.w	ip, [sp, #28]
 8013830:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013834:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8013838:	6803      	ldr	r3, [r0, #0]
 801383a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801383c:	4798      	blx	r3
 801383e:	e738      	b.n	80136b2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013840:	428b      	cmp	r3, r1
 8013842:	f43f af33 	beq.w	80136ac <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 8013846:	e7e4      	b.n	8013812 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x216>
 8013848:	08028494 	.word	0x08028494
 801384c:	080284a8 	.word	0x080284a8

08013850 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 8013850:	b570      	push	{r4, r5, r6, lr}
 8013852:	b086      	sub	sp, #24
 8013854:	2300      	movs	r3, #0
 8013856:	460c      	mov	r4, r1
 8013858:	4605      	mov	r5, r0
 801385a:	aa06      	add	r2, sp, #24
 801385c:	f88d 3002 	strb.w	r3, [sp, #2]
 8013860:	f10d 0102 	add.w	r1, sp, #2
 8013864:	f802 3d15 	strb.w	r3, [r2, #-21]!
 8013868:	6803      	ldr	r3, [r0, #0]
 801386a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801386e:	4798      	blx	r3
 8013870:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013874:	b10b      	cbz	r3, 801387a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 8013876:	7923      	ldrb	r3, [r4, #4]
 8013878:	b133      	cbz	r3, 8013888 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 801387a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d067      	beq.n	8013952 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013882:	7923      	ldrb	r3, [r4, #4]
 8013884:	2b01      	cmp	r3, #1
 8013886:	d164      	bne.n	8013952 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013888:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801388c:	2b00      	cmp	r3, #0
 801388e:	bfbc      	itt	lt
 8013890:	425a      	neglt	r2, r3
 8013892:	b213      	sxthlt	r3, r2
 8013894:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	; 0x9c
 8013898:	429a      	cmp	r2, r3
 801389a:	dc5a      	bgt.n	8013952 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 801389c:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 801389e:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	; 0xb8
 80138a2:	429a      	cmp	r2, r3
 80138a4:	bfa8      	it	ge
 80138a6:	461a      	movge	r2, r3
 80138a8:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	; 0xba
 80138ac:	b212      	sxth	r2, r2
 80138ae:	2a05      	cmp	r2, #5
 80138b0:	bfb8      	it	lt
 80138b2:	2205      	movlt	r2, #5
 80138b4:	4351      	muls	r1, r2
 80138b6:	3a04      	subs	r2, #4
 80138b8:	fb91 f1f3 	sdiv	r1, r1, r3
 80138bc:	b288      	uxth	r0, r1
 80138be:	4629      	mov	r1, r5
 80138c0:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80138c4:	f8a5 00a8 	strh.w	r0, [r5, #168]	; 0xa8
 80138c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80138d2:	bfcc      	ite	gt
 80138d4:	2601      	movgt	r6, #1
 80138d6:	461e      	movle	r6, r3
 80138d8:	00d3      	lsls	r3, r2, #3
 80138da:	fb13 f306 	smulbb	r3, r3, r6
 80138de:	b29b      	uxth	r3, r3
 80138e0:	b21a      	sxth	r2, r3
 80138e2:	2a00      	cmp	r2, #0
 80138e4:	f8a5 20ac 	strh.w	r2, [r5, #172]	; 0xac
 80138e8:	bfbc      	itt	lt
 80138ea:	425b      	neglt	r3, r3
 80138ec:	b21a      	sxthlt	r2, r3
 80138ee:	682b      	ldr	r3, [r5, #0]
 80138f0:	4282      	cmp	r2, r0
 80138f2:	bfd8      	it	le
 80138f4:	b290      	uxthle	r0, r2
 80138f6:	f8a5 00a8 	strh.w	r0, [r5, #168]	; 0xa8
 80138fa:	7922      	ldrb	r2, [r4, #4]
 80138fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138fe:	2a01      	cmp	r2, #1
 8013900:	d129      	bne.n	8013956 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x106>
 8013902:	a801      	add	r0, sp, #4
 8013904:	4798      	blx	r3
 8013906:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801390a:	2601      	movs	r6, #1
 801390c:	f8a5 30aa 	strh.w	r3, [r5, #170]	; 0xaa
 8013910:	f885 60b0 	strb.w	r6, [r5, #176]	; 0xb0
 8013914:	f003 fc0a 	bl	801712c <_ZN8touchgfx11Application11getInstanceEv>
 8013918:	4629      	mov	r1, r5
 801391a:	f003 fc0d 	bl	8017138 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801391e:	7923      	ldrb	r3, [r4, #4]
 8013920:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8013924:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8013928:	b198      	cbz	r0, 8013952 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 801392a:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 801392e:	b983      	cbnz	r3, 8013952 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013930:	4a0b      	ldr	r2, [pc, #44]	; (8013960 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x110>)
 8013932:	a903      	add	r1, sp, #12
 8013934:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013938:	9203      	str	r2, [sp, #12]
 801393a:	2202      	movs	r2, #2
 801393c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013940:	f88d 2010 	strb.w	r2, [sp, #16]
 8013944:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013948:	6803      	ldr	r3, [r0, #0]
 801394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801394c:	4798      	blx	r3
 801394e:	f885 60b6 	strb.w	r6, [r5, #182]	; 0xb6
 8013952:	b006      	add	sp, #24
 8013954:	bd70      	pop	{r4, r5, r6, pc}
 8013956:	a803      	add	r0, sp, #12
 8013958:	4798      	blx	r3
 801395a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801395e:	e7d4      	b.n	801390a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 8013960:	08028494 	.word	0x08028494

08013964 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 8013964:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013966:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 801396a:	4604      	mov	r4, r0
 801396c:	2b00      	cmp	r3, #0
 801396e:	d046      	beq.n	80139fe <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9a>
 8013970:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
 8013974:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8013978:	3001      	adds	r0, #1
 801397a:	b280      	uxth	r0, r0
 801397c:	4298      	cmp	r0, r3
 801397e:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
 8013982:	d840      	bhi.n	8013a06 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa2>
 8013984:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8013988:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801398c:	f004 ffcc 	bl	8018928 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8013990:	4605      	mov	r5, r0
 8013992:	b282      	uxth	r2, r0
 8013994:	f012 0301 	ands.w	r3, r2, #1
 8013998:	d006      	beq.n	80139a8 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 801399a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801399e:	2800      	cmp	r0, #0
 80139a0:	bfd8      	it	le
 80139a2:	460b      	movle	r3, r1
 80139a4:	18d5      	adds	r5, r2, r3
 80139a6:	b22d      	sxth	r5, r5
 80139a8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d028      	beq.n	8013a02 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 80139b0:	6823      	ldr	r3, [r4, #0]
 80139b2:	4621      	mov	r1, r4
 80139b4:	4668      	mov	r0, sp
 80139b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139b8:	4798      	blx	r3
 80139ba:	f8bd 6000 	ldrh.w	r6, [sp]
 80139be:	1bae      	subs	r6, r5, r6
 80139c0:	b236      	sxth	r6, r6
 80139c2:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80139c6:	b142      	cbz	r2, 80139da <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x76>
 80139c8:	6823      	ldr	r3, [r4, #0]
 80139ca:	4621      	mov	r1, r4
 80139cc:	4668      	mov	r0, sp
 80139ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139d0:	4798      	blx	r3
 80139d2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80139d6:	1aad      	subs	r5, r5, r2
 80139d8:	b22a      	sxth	r2, r5
 80139da:	6823      	ldr	r3, [r4, #0]
 80139dc:	4631      	mov	r1, r6
 80139de:	4620      	mov	r0, r4
 80139e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80139e4:	4798      	blx	r3
 80139e6:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
 80139ea:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
 80139ee:	b935      	cbnz	r5, 80139fe <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9a>
 80139f0:	f003 fb9c 	bl	801712c <_ZN8touchgfx11Application11getInstanceEv>
 80139f4:	4621      	mov	r1, r4
 80139f6:	f003 fbd1 	bl	801719c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 80139fa:	f8a4 50ae 	strh.w	r5, [r4, #174]	; 0xae
 80139fe:	b002      	add	sp, #8
 8013a00:	bd70      	pop	{r4, r5, r6, pc}
 8013a02:	2600      	movs	r6, #0
 8013a04:	e7dd      	b.n	80139c2 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x5e>
 8013a06:	2300      	movs	r3, #0
 8013a08:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 8013a0c:	e7ed      	b.n	80139ea <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x86>

08013a0e <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 8013a0e:	b470      	push	{r4, r5, r6}
 8013a10:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 8013a14:	461d      	mov	r5, r3
 8013a16:	b11e      	cbz	r6, 8013a20 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 8013a18:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
 8013a1c:	b116      	cbz	r6, 8013a24 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 8013a1e:	6028      	str	r0, [r5, #0]
 8013a20:	bc70      	pop	{r4, r5, r6}
 8013a22:	4770      	bx	lr
 8013a24:	bc70      	pop	{r4, r5, r6}
 8013a26:	f7ff bb59 	b.w	80130dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>

08013a2a <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8013a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a2c:	4604      	mov	r4, r0
 8013a2e:	4608      	mov	r0, r1
 8013a30:	460d      	mov	r5, r1
 8013a32:	f7ff fca8 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013a36:	b978      	cbnz	r0, 8013a58 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8013a38:	4620      	mov	r0, r4
 8013a3a:	f7ff fca4 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013a3e:	f9b5 6000 	ldrsh.w	r6, [r5]
 8013a42:	b150      	cbz	r0, 8013a5a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8013a44:	8026      	strh	r6, [r4, #0]
 8013a46:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013a4a:	8063      	strh	r3, [r4, #2]
 8013a4c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8013a50:	80a3      	strh	r3, [r4, #4]
 8013a52:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013a56:	80e3      	strh	r3, [r4, #6]
 8013a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a5a:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013a5e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013a62:	42b1      	cmp	r1, r6
 8013a64:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013a68:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8013a6c:	460f      	mov	r7, r1
 8013a6e:	88ed      	ldrh	r5, [r5, #6]
 8013a70:	bfa8      	it	ge
 8013a72:	4637      	movge	r7, r6
 8013a74:	4293      	cmp	r3, r2
 8013a76:	4618      	mov	r0, r3
 8013a78:	4466      	add	r6, ip
 8013a7a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013a7e:	bfa8      	it	ge
 8013a80:	4610      	movge	r0, r2
 8013a82:	442a      	add	r2, r5
 8013a84:	88e5      	ldrh	r5, [r4, #6]
 8013a86:	4461      	add	r1, ip
 8013a88:	b236      	sxth	r6, r6
 8013a8a:	8027      	strh	r7, [r4, #0]
 8013a8c:	442b      	add	r3, r5
 8013a8e:	b209      	sxth	r1, r1
 8013a90:	b212      	sxth	r2, r2
 8013a92:	8060      	strh	r0, [r4, #2]
 8013a94:	b21b      	sxth	r3, r3
 8013a96:	428e      	cmp	r6, r1
 8013a98:	bfac      	ite	ge
 8013a9a:	ebc7 0106 	rsbge	r1, r7, r6
 8013a9e:	ebc7 0101 	rsblt	r1, r7, r1
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	bfac      	ite	ge
 8013aa6:	ebc0 0202 	rsbge	r2, r0, r2
 8013aaa:	ebc0 0203 	rsblt	r2, r0, r3
 8013aae:	80a1      	strh	r1, [r4, #4]
 8013ab0:	80e2      	strh	r2, [r4, #6]
 8013ab2:	e7d1      	b.n	8013a58 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08013ab4 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 8013ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ab6:	4604      	mov	r4, r0
 8013ab8:	2200      	movs	r2, #0
 8013aba:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8013abe:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8013ac2:	680b      	ldr	r3, [r1, #0]
 8013ac4:	8022      	strh	r2, [r4, #0]
 8013ac6:	8062      	strh	r2, [r4, #2]
 8013ac8:	80e0      	strh	r0, [r4, #6]
 8013aca:	4668      	mov	r0, sp
 8013acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013ad0:	80a5      	strh	r5, [r4, #4]
 8013ad2:	4798      	blx	r3
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	4669      	mov	r1, sp
 8013ad8:	f7ff ffa7 	bl	8013a2a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013adc:	4620      	mov	r0, r4
 8013ade:	b003      	add	sp, #12
 8013ae0:	bd30      	pop	{r4, r5, pc}

08013ae2 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 8013ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	4605      	mov	r5, r0
 8013ae8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013aea:	f101 0738 	add.w	r7, r1, #56	; 0x38
 8013aee:	f101 0664 	add.w	r6, r1, #100	; 0x64
 8013af2:	8003      	strh	r3, [r0, #0]
 8013af4:	8043      	strh	r3, [r0, #2]
 8013af6:	8083      	strh	r3, [r0, #4]
 8013af8:	80c3      	strh	r3, [r0, #6]
 8013afa:	b164      	cbz	r4, 8013b16 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 8013afc:	42bc      	cmp	r4, r7
 8013afe:	d008      	beq.n	8013b12 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013b00:	42b4      	cmp	r4, r6
 8013b02:	d006      	beq.n	8013b12 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013b04:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013b08:	b11b      	cbz	r3, 8013b12 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013b0a:	1d21      	adds	r1, r4, #4
 8013b0c:	4628      	mov	r0, r5
 8013b0e:	f7ff ff8c 	bl	8013a2a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013b12:	69a4      	ldr	r4, [r4, #24]
 8013b14:	e7f1      	b.n	8013afa <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 8013b16:	4628      	mov	r0, r5
 8013b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b1c <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 8013b1c:	b530      	push	{r4, r5, lr}
 8013b1e:	2500      	movs	r5, #0
 8013b20:	6283      	str	r3, [r0, #40]	; 0x28
 8013b22:	8101      	strh	r1, [r0, #8]
 8013b24:	8085      	strh	r5, [r0, #4]
 8013b26:	80c5      	strh	r5, [r0, #6]
 8013b28:	8185      	strh	r5, [r0, #12]
 8013b2a:	81c5      	strh	r5, [r0, #14]
 8013b2c:	8205      	strh	r5, [r0, #16]
 8013b2e:	8245      	strh	r5, [r0, #18]
 8013b30:	61c5      	str	r5, [r0, #28]
 8013b32:	8405      	strh	r5, [r0, #32]
 8013b34:	8445      	strh	r5, [r0, #34]	; 0x22
 8013b36:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8013b3a:	8142      	strh	r2, [r0, #10]
 8013b3c:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8013b40:	2501      	movs	r5, #1
 8013b42:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 8013b46:	4d03      	ldr	r5, [pc, #12]	; (8013b54 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 8013b48:	6005      	str	r5, [r0, #0]
 8013b4a:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8013b4e:	f880 5026 	strb.w	r5, [r0, #38]	; 0x26
 8013b52:	bd30      	pop	{r4, r5, pc}
 8013b54:	08028f94 	.word	0x08028f94

08013b58 <_ZN8touchgfx19ScrollableContainerC1Ev>:
 8013b58:	4b2f      	ldr	r3, [pc, #188]	; (8013c18 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 8013b5a:	2278      	movs	r2, #120	; 0x78
 8013b5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b5e:	6003      	str	r3, [r0, #0]
 8013b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013b64:	2500      	movs	r5, #0
 8013b66:	2601      	movs	r6, #1
 8013b68:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013b6a:	2111      	movs	r1, #17
 8013b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b70:	4604      	mov	r4, r0
 8013b72:	8085      	strh	r5, [r0, #4]
 8013b74:	80c5      	strh	r5, [r0, #6]
 8013b76:	8105      	strh	r5, [r0, #8]
 8013b78:	8145      	strh	r5, [r0, #10]
 8013b7a:	8185      	strh	r5, [r0, #12]
 8013b7c:	81c5      	strh	r5, [r0, #14]
 8013b7e:	8205      	strh	r5, [r0, #16]
 8013b80:	8245      	strh	r5, [r0, #18]
 8013b82:	61c5      	str	r5, [r0, #28]
 8013b84:	8405      	strh	r5, [r0, #32]
 8013b86:	8445      	strh	r5, [r0, #34]	; 0x22
 8013b88:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8013b8c:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
 8013b90:	6285      	str	r5, [r0, #40]	; 0x28
 8013b92:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8013b96:	6303      	str	r3, [r0, #48]	; 0x30
 8013b98:	8681      	strh	r1, [r0, #52]	; 0x34
 8013b9a:	4629      	mov	r1, r5
 8013b9c:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
 8013ba0:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8013ba4:	9200      	str	r2, [sp, #0]
 8013ba6:	3038      	adds	r0, #56	; 0x38
 8013ba8:	462a      	mov	r2, r5
 8013baa:	f7ff ffb7 	bl	8013b1c <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8013bae:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8013bb2:	462a      	mov	r2, r5
 8013bb4:	4629      	mov	r1, r5
 8013bb6:	9300      	str	r3, [sp, #0]
 8013bb8:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8013bbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013bbe:	f7ff ffad 	bl	8013b1c <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8013bc2:	2305      	movs	r3, #5
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 8013bca:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8013bce:	4b13      	ldr	r3, [pc, #76]	; (8013c1c <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 8013bd0:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8013bd4:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 8013bd8:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 8013bdc:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8013be0:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
 8013be4:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8013be8:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 8013bec:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8013bf0:	f8a4 50b2 	strh.w	r5, [r4, #178]	; 0xb2
 8013bf4:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
 8013bf8:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 8013bfc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8013c00:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
 8013c04:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 8013c08:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8013c0c:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
 8013c10:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 8013c14:	b002      	add	sp, #8
 8013c16:	bd70      	pop	{r4, r5, r6, pc}
 8013c18:	080284bc 	.word	0x080284bc
 8013c1c:	00010007 	.word	0x00010007

08013c20 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 8013c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c22:	2600      	movs	r6, #0
 8013c24:	f891 30a4 	ldrb.w	r3, [r1, #164]	; 0xa4
 8013c28:	4605      	mov	r5, r0
 8013c2a:	460c      	mov	r4, r1
 8013c2c:	8006      	strh	r6, [r0, #0]
 8013c2e:	8046      	strh	r6, [r0, #2]
 8013c30:	8086      	strh	r6, [r0, #4]
 8013c32:	80c6      	strh	r6, [r0, #6]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d041      	beq.n	8013cbc <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8013c38:	680b      	ldr	r3, [r1, #0]
 8013c3a:	4668      	mov	r0, sp
 8013c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c3e:	4798      	blx	r3
 8013c40:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8013c44:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d03a      	beq.n	8013cc2 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 8013c4c:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013c50:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013c54:	429a      	cmp	r2, r3
 8013c56:	dd05      	ble.n	8013c64 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x44>
 8013c58:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013c5c:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013c60:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8013c64:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013c68:	42bb      	cmp	r3, r7
 8013c6a:	da27      	bge.n	8013cbc <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8013c6c:	f9bd 1000 	ldrsh.w	r1, [sp]
 8013c70:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013c74:	424a      	negs	r2, r1
 8013c76:	4439      	add	r1, r7
 8013c78:	eba3 0c40 	sub.w	ip, r3, r0, lsl #1
 8013c7c:	b209      	sxth	r1, r1
 8013c7e:	435a      	muls	r2, r3
 8013c80:	ebac 0606 	sub.w	r6, ip, r6
 8013c84:	1ac9      	subs	r1, r1, r3
 8013c86:	434b      	muls	r3, r1
 8013c88:	fb92 f2f7 	sdiv	r2, r2, r7
 8013c8c:	fb93 f3f7 	sdiv	r3, r3, r7
 8013c90:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8013c94:	4413      	add	r3, r2
 8013c96:	0079      	lsls	r1, r7, #1
 8013c98:	1af3      	subs	r3, r6, r3
 8013c9a:	4299      	cmp	r1, r3
 8013c9c:	dd05      	ble.n	8013caa <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 8013c9e:	1acb      	subs	r3, r1, r3
 8013ca0:	4353      	muls	r3, r2
 8013ca2:	fb93 f3f6 	sdiv	r3, r3, r6
 8013ca6:	1ad2      	subs	r2, r2, r3
 8013ca8:	460b      	mov	r3, r1
 8013caa:	8961      	ldrh	r1, [r4, #10]
 8013cac:	b280      	uxth	r0, r0
 8013cae:	80ab      	strh	r3, [r5, #4]
 8013cb0:	1bc9      	subs	r1, r1, r7
 8013cb2:	80ef      	strh	r7, [r5, #6]
 8013cb4:	1a09      	subs	r1, r1, r0
 8013cb6:	4410      	add	r0, r2
 8013cb8:	8069      	strh	r1, [r5, #2]
 8013cba:	8028      	strh	r0, [r5, #0]
 8013cbc:	4628      	mov	r0, r5
 8013cbe:	b003      	add	sp, #12
 8013cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cc2:	461e      	mov	r6, r3
 8013cc4:	e7ce      	b.n	8013c64 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x44>

08013cc6 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 8013cc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013cc8:	2600      	movs	r6, #0
 8013cca:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
 8013cce:	4605      	mov	r5, r0
 8013cd0:	460c      	mov	r4, r1
 8013cd2:	8006      	strh	r6, [r0, #0]
 8013cd4:	8046      	strh	r6, [r0, #2]
 8013cd6:	8086      	strh	r6, [r0, #4]
 8013cd8:	80c6      	strh	r6, [r0, #6]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d041      	beq.n	8013d62 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8013cde:	680b      	ldr	r3, [r1, #0]
 8013ce0:	4668      	mov	r0, sp
 8013ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ce4:	4798      	blx	r3
 8013ce6:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8013cea:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d03a      	beq.n	8013d68 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 8013cf2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013cf6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	dd05      	ble.n	8013d0a <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x44>
 8013cfe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013d02:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013d06:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8013d0a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013d0e:	42bb      	cmp	r3, r7
 8013d10:	da27      	bge.n	8013d62 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8013d12:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8013d16:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013d1a:	424a      	negs	r2, r1
 8013d1c:	4439      	add	r1, r7
 8013d1e:	eba3 0c40 	sub.w	ip, r3, r0, lsl #1
 8013d22:	b209      	sxth	r1, r1
 8013d24:	435a      	muls	r2, r3
 8013d26:	ebac 0606 	sub.w	r6, ip, r6
 8013d2a:	1ac9      	subs	r1, r1, r3
 8013d2c:	434b      	muls	r3, r1
 8013d2e:	fb92 f2f7 	sdiv	r2, r2, r7
 8013d32:	fb93 f3f7 	sdiv	r3, r3, r7
 8013d36:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8013d3a:	4413      	add	r3, r2
 8013d3c:	0079      	lsls	r1, r7, #1
 8013d3e:	1af3      	subs	r3, r6, r3
 8013d40:	4299      	cmp	r1, r3
 8013d42:	dd05      	ble.n	8013d50 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 8013d44:	1acb      	subs	r3, r1, r3
 8013d46:	4353      	muls	r3, r2
 8013d48:	fb93 f3f6 	sdiv	r3, r3, r6
 8013d4c:	1ad2      	subs	r2, r2, r3
 8013d4e:	460b      	mov	r3, r1
 8013d50:	8921      	ldrh	r1, [r4, #8]
 8013d52:	b280      	uxth	r0, r0
 8013d54:	80af      	strh	r7, [r5, #4]
 8013d56:	1bc9      	subs	r1, r1, r7
 8013d58:	80eb      	strh	r3, [r5, #6]
 8013d5a:	1a09      	subs	r1, r1, r0
 8013d5c:	4410      	add	r0, r2
 8013d5e:	8029      	strh	r1, [r5, #0]
 8013d60:	8068      	strh	r0, [r5, #2]
 8013d62:	4628      	mov	r0, r5
 8013d64:	b003      	add	sp, #12
 8013d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d68:	461e      	mov	r6, r3
 8013d6a:	e7ce      	b.n	8013d0a <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x44>

08013d6c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 8013d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d70:	4617      	mov	r7, r2
 8013d72:	2200      	movs	r2, #0
 8013d74:	4604      	mov	r4, r0
 8013d76:	460e      	mov	r6, r1
 8013d78:	8002      	strh	r2, [r0, #0]
 8013d7a:	4698      	mov	r8, r3
 8013d7c:	8042      	strh	r2, [r0, #2]
 8013d7e:	8082      	strh	r2, [r0, #4]
 8013d80:	80c2      	strh	r2, [r0, #6]
 8013d82:	4638      	mov	r0, r7
 8013d84:	f7ff faff 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013d88:	4605      	mov	r5, r0
 8013d8a:	b998      	cbnz	r0, 8013db4 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 8013d8c:	4640      	mov	r0, r8
 8013d8e:	f7ff fafa 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013d92:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8013d96:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
 8013d9a:	b908      	cbnz	r0, 8013da0 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 8013d9c:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8013da0:	8933      	ldrh	r3, [r6, #8]
 8013da2:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 8013da6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8013daa:	8022      	strh	r2, [r4, #0]
 8013dac:	8067      	strh	r7, [r4, #2]
 8013dae:	1b58      	subs	r0, r3, r5
 8013db0:	80e1      	strh	r1, [r4, #6]
 8013db2:	80a0      	strh	r0, [r4, #4]
 8013db4:	4620      	mov	r0, r4
 8013db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013dba <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 8013dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	2000      	movs	r0, #0
 8013dc2:	460f      	mov	r7, r1
 8013dc4:	4616      	mov	r6, r2
 8013dc6:	8020      	strh	r0, [r4, #0]
 8013dc8:	4698      	mov	r8, r3
 8013dca:	8060      	strh	r0, [r4, #2]
 8013dcc:	80a0      	strh	r0, [r4, #4]
 8013dce:	80e0      	strh	r0, [r4, #6]
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7ff fad8 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013dd6:	4605      	mov	r5, r0
 8013dd8:	b998      	cbnz	r0, 8013e02 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 8013dda:	4630      	mov	r0, r6
 8013ddc:	f7ff fad3 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013de0:	f897 602c 	ldrb.w	r6, [r7, #44]	; 0x2c
 8013de4:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8013de8:	b908      	cbnz	r0, 8013dee <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 8013dea:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 8013dee:	897a      	ldrh	r2, [r7, #10]
 8013df0:	f8b8 3000 	ldrh.w	r3, [r8]
 8013df4:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 8013df8:	8066      	strh	r6, [r4, #2]
 8013dfa:	8023      	strh	r3, [r4, #0]
 8013dfc:	1b50      	subs	r0, r2, r5
 8013dfe:	80a1      	strh	r1, [r4, #4]
 8013e00:	80e0      	strh	r0, [r4, #6]
 8013e02:	4620      	mov	r0, r4
 8013e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e08 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 8013e08:	b570      	push	{r4, r5, r6, lr}
 8013e0a:	b088      	sub	sp, #32
 8013e0c:	4604      	mov	r4, r0
 8013e0e:	4601      	mov	r1, r0
 8013e10:	4668      	mov	r0, sp
 8013e12:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8013e16:	f7ff ff03 	bl	8013c20 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 8013e1a:	4621      	mov	r1, r4
 8013e1c:	a802      	add	r0, sp, #8
 8013e1e:	f7ff ff52 	bl	8013cc6 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 8013e22:	ab02      	add	r3, sp, #8
 8013e24:	466a      	mov	r2, sp
 8013e26:	4621      	mov	r1, r4
 8013e28:	a804      	add	r0, sp, #16
 8013e2a:	f7ff ff9f 	bl	8013d6c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 8013e2e:	ab02      	add	r3, sp, #8
 8013e30:	466a      	mov	r2, sp
 8013e32:	4621      	mov	r1, r4
 8013e34:	a806      	add	r0, sp, #24
 8013e36:	f7ff ffc0 	bl	8013dba <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 8013e3a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8013e3e:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8013e42:	429a      	cmp	r2, r3
 8013e44:	da02      	bge.n	8013e4c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 8013e46:	4630      	mov	r0, r6
 8013e48:	f004 f93a 	bl	80180c0 <_ZNK8touchgfx8Drawable10invalidateEv>
 8013e4c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8013e50:	f104 0564 	add.w	r5, r4, #100	; 0x64
 8013e54:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	da02      	bge.n	8013e62 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	f004 f92f 	bl	80180c0 <_ZNK8touchgfx8Drawable10invalidateEv>
 8013e62:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8013e66:	f8bd 0000 	ldrh.w	r0, [sp]
 8013e6a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8013e6e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013e72:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8013e74:	4630      	mov	r0, r6
 8013e76:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8013e78:	f7f0 fc00 	bl	800467c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013e7c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8013e80:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8013e84:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8013e88:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8013e8c:	4628      	mov	r0, r5
 8013e8e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8013e92:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8013e96:	f7f0 fbf1 	bl	800467c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013e9a:	8922      	ldrh	r2, [r4, #8]
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	a804      	add	r0, sp, #16
 8013ea0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013ea4:	8962      	ldrh	r2, [r4, #10]
 8013ea6:	f8ad 3010 	strh.w	r3, [sp, #16]
 8013eaa:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013eae:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013eb2:	f7ff fa68 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013eb6:	b920      	cbnz	r0, 8013ec2 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 8013eb8:	6823      	ldr	r3, [r4, #0]
 8013eba:	a904      	add	r1, sp, #16
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	691b      	ldr	r3, [r3, #16]
 8013ec0:	4798      	blx	r3
 8013ec2:	a806      	add	r0, sp, #24
 8013ec4:	f7ff fa5f 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ec8:	b920      	cbnz	r0, 8013ed4 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 8013eca:	6823      	ldr	r3, [r4, #0]
 8013ecc:	a906      	add	r1, sp, #24
 8013ece:	4620      	mov	r0, r4
 8013ed0:	691b      	ldr	r3, [r3, #16]
 8013ed2:	4798      	blx	r3
 8013ed4:	b008      	add	sp, #32
 8013ed6:	bd70      	pop	{r4, r5, r6, pc}

08013ed8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 8013ed8:	b570      	push	{r4, r5, r6, lr}
 8013eda:	790b      	ldrb	r3, [r1, #4]
 8013edc:	b08a      	sub	sp, #40	; 0x28
 8013ede:	4604      	mov	r4, r0
 8013ee0:	460d      	mov	r5, r1
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d17e      	bne.n	8013fe4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10c>
 8013ee6:	2201      	movs	r2, #1
 8013ee8:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 8013eec:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 8013ef0:	b142      	cbz	r2, 8013f04 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2c>
 8013ef2:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8013ef6:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
 8013efa:	f003 f917 	bl	801712c <_ZN8touchgfx11Application11getInstanceEv>
 8013efe:	4621      	mov	r1, r4
 8013f00:	f003 f94c 	bl	801719c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8013f04:	4623      	mov	r3, r4
 8013f06:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013f0a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8013f0e:	f853 0bb4 	ldr.w	r0, [r3], #180
 8013f12:	9301      	str	r3, [sp, #4]
 8013f14:	f104 03b2 	add.w	r3, r4, #178	; 0xb2
 8013f18:	9300      	str	r3, [sp, #0]
 8013f1a:	f104 0390 	add.w	r3, r4, #144	; 0x90
 8013f1e:	6f46      	ldr	r6, [r0, #116]	; 0x74
 8013f20:	4620      	mov	r0, r4
 8013f22:	47b0      	blx	r6
 8013f24:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8013f28:	42a3      	cmp	r3, r4
 8013f2a:	bf04      	itt	eq
 8013f2c:	2300      	moveq	r3, #0
 8013f2e:	f8c4 3090 	streq.w	r3, [r4, #144]	; 0x90
 8013f32:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8013f36:	2900      	cmp	r1, #0
 8013f38:	d03a      	beq.n	8013fb0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 8013f3a:	2600      	movs	r6, #0
 8013f3c:	a803      	add	r0, sp, #12
 8013f3e:	f884 60b6 	strb.w	r6, [r4, #182]	; 0xb6
 8013f42:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013f46:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8013f4a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8013f4e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8013f52:	f004 f94d 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f56:	4621      	mov	r1, r4
 8013f58:	a805      	add	r0, sp, #20
 8013f5a:	f004 f949 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f5e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013f62:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013f66:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8013f6a:	1ad2      	subs	r2, r2, r3
 8013f6c:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8013f70:	7929      	ldrb	r1, [r5, #4]
 8013f72:	441a      	add	r2, r3
 8013f74:	88eb      	ldrh	r3, [r5, #6]
 8013f76:	f88d 1020 	strb.w	r1, [sp, #32]
 8013f7a:	a907      	add	r1, sp, #28
 8013f7c:	441a      	add	r2, r3
 8013f7e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013f82:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8013f86:	1a1b      	subs	r3, r3, r0
 8013f88:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8013f8c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8013f90:	4403      	add	r3, r0
 8013f92:	8928      	ldrh	r0, [r5, #8]
 8013f94:	4403      	add	r3, r0
 8013f96:	482f      	ldr	r0, [pc, #188]	; (8014054 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 8013f98:	9007      	str	r0, [sp, #28]
 8013f9a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013f9e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013fa2:	6803      	ldr	r3, [r0, #0]
 8013fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fa6:	4798      	blx	r3
 8013fa8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8013fac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 8013fb6:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8013fba:	b112      	cbz	r2, 8013fc2 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xea>
 8013fbc:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 8013fc0:	b90b      	cbnz	r3, 8013fc6 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xee>
 8013fc2:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8013fc6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8013fca:	b112      	cbz	r2, 8013fd2 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfa>
 8013fcc:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 8013fd0:	b90b      	cbnz	r3, 8013fd6 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfe>
 8013fd2:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8013fd6:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f7ff ff14 	bl	8013e08 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8013fe0:	b00a      	add	sp, #40	; 0x28
 8013fe2:	bd70      	pop	{r4, r5, r6, pc}
 8013fe4:	2b02      	cmp	r3, #2
 8013fe6:	d0fb      	beq.n	8013fe0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x108>
 8013fe8:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 8013fec:	b361      	cbz	r1, 8014048 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x170>
 8013fee:	a803      	add	r0, sp, #12
 8013ff0:	f004 f8fe 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013ff4:	4621      	mov	r1, r4
 8013ff6:	a805      	add	r0, sp, #20
 8013ff8:	f004 f8fa 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013ffc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014000:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014004:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8014008:	1ad2      	subs	r2, r2, r3
 801400a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801400e:	7929      	ldrb	r1, [r5, #4]
 8014010:	441a      	add	r2, r3
 8014012:	88eb      	ldrh	r3, [r5, #6]
 8014014:	f88d 1020 	strb.w	r1, [sp, #32]
 8014018:	a907      	add	r1, sp, #28
 801401a:	441a      	add	r2, r3
 801401c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8014020:	1a1b      	subs	r3, r3, r0
 8014022:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8014026:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 801402a:	4403      	add	r3, r0
 801402c:	8928      	ldrh	r0, [r5, #8]
 801402e:	4403      	add	r3, r0
 8014030:	4808      	ldr	r0, [pc, #32]	; (8014054 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 8014032:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014036:	2300      	movs	r3, #0
 8014038:	9007      	str	r0, [sp, #28]
 801403a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801403e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014042:	6803      	ldr	r3, [r0, #0]
 8014044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014046:	4798      	blx	r3
 8014048:	2300      	movs	r3, #0
 801404a:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
 801404e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8014052:	e7ad      	b.n	8013fb0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 8014054:	08028494 	.word	0x08028494

08014058 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 8014058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801405a:	4606      	mov	r6, r0
 801405c:	4615      	mov	r5, r2
 801405e:	460c      	mov	r4, r1
 8014060:	b919      	cbnz	r1, 801406a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8014062:	b912      	cbnz	r2, 801406a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8014064:	2000      	movs	r0, #0
 8014066:	b003      	add	sp, #12
 8014068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801406a:	6833      	ldr	r3, [r6, #0]
 801406c:	4631      	mov	r1, r6
 801406e:	4668      	mov	r0, sp
 8014070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014072:	4798      	blx	r3
 8014074:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8014078:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 801407c:	f9bd 2000 	ldrsh.w	r2, [sp]
 8014080:	4288      	cmp	r0, r1
 8014082:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8014086:	da2c      	bge.n	80140e2 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8a>
 8014088:	2c00      	cmp	r4, #0
 801408a:	dd20      	ble.n	80140ce <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x76>
 801408c:	1913      	adds	r3, r2, r4
 801408e:	2b00      	cmp	r3, #0
 8014090:	dd01      	ble.n	8014096 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 8014092:	4252      	negs	r2, r2
 8014094:	b214      	sxth	r4, r2
 8014096:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 801409a:	4297      	cmp	r7, r2
 801409c:	dd2c      	ble.n	80140f8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa0>
 801409e:	2d00      	cmp	r5, #0
 80140a0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80140a4:	dd1f      	ble.n	80140e6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8e>
 80140a6:	195a      	adds	r2, r3, r5
 80140a8:	2a00      	cmp	r2, #0
 80140aa:	dd04      	ble.n	80140b6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 80140ac:	425b      	negs	r3, r3
 80140ae:	b21d      	sxth	r5, r3
 80140b0:	b90c      	cbnz	r4, 80140b6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 80140b2:	2d00      	cmp	r5, #0
 80140b4:	d0d6      	beq.n	8014064 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 80140b6:	6833      	ldr	r3, [r6, #0]
 80140b8:	462a      	mov	r2, r5
 80140ba:	4621      	mov	r1, r4
 80140bc:	4630      	mov	r0, r6
 80140be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140c2:	4798      	blx	r3
 80140c4:	4630      	mov	r0, r6
 80140c6:	f7ff fe9f 	bl	8013e08 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 80140ca:	2001      	movs	r0, #1
 80140cc:	e7cb      	b.n	8014066 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 80140ce:	d0e2      	beq.n	8014096 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 80140d0:	440a      	add	r2, r1
 80140d2:	b292      	uxth	r2, r2
 80140d4:	fa04 f382 	sxtah	r3, r4, r2
 80140d8:	4283      	cmp	r3, r0
 80140da:	dadc      	bge.n	8014096 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 80140dc:	1a84      	subs	r4, r0, r2
 80140de:	b224      	sxth	r4, r4
 80140e0:	e7d9      	b.n	8014096 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 80140e2:	2400      	movs	r4, #0
 80140e4:	e7d7      	b.n	8014096 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 80140e6:	d007      	beq.n	80140f8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa0>
 80140e8:	443b      	add	r3, r7
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	fa05 f183 	sxtah	r1, r5, r3
 80140f0:	4291      	cmp	r1, r2
 80140f2:	dae0      	bge.n	80140b6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 80140f4:	1ad3      	subs	r3, r2, r3
 80140f6:	e7da      	b.n	80140ae <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x56>
 80140f8:	2c00      	cmp	r4, #0
 80140fa:	d0b3      	beq.n	8014064 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 80140fc:	2500      	movs	r5, #0
 80140fe:	e7da      	b.n	80140b6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>

08014100 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 8014100:	b513      	push	{r0, r1, r4, lr}
 8014102:	6803      	ldr	r3, [r0, #0]
 8014104:	4601      	mov	r1, r0
 8014106:	4604      	mov	r4, r0
 8014108:	4668      	mov	r0, sp
 801410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801410e:	4798      	blx	r3
 8014110:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8014114:	f9bd 1000 	ldrsh.w	r1, [sp]
 8014118:	2800      	cmp	r0, #0
 801411a:	dd20      	ble.n	801415e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 801411c:	4602      	mov	r2, r0
 801411e:	2900      	cmp	r1, #0
 8014120:	dc0e      	bgt.n	8014140 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8014122:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014126:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801412a:	440b      	add	r3, r1
 801412c:	b21b      	sxth	r3, r3
 801412e:	4298      	cmp	r0, r3
 8014130:	dd04      	ble.n	801413c <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 8014132:	1a1b      	subs	r3, r3, r0
 8014134:	4299      	cmp	r1, r3
 8014136:	bfb8      	it	lt
 8014138:	4619      	movlt	r1, r3
 801413a:	b909      	cbnz	r1, 8014140 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 801413c:	b1f2      	cbz	r2, 801417c <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 801413e:	2100      	movs	r1, #0
 8014140:	6823      	ldr	r3, [r4, #0]
 8014142:	4252      	negs	r2, r2
 8014144:	4249      	negs	r1, r1
 8014146:	4620      	mov	r0, r4
 8014148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801414c:	b212      	sxth	r2, r2
 801414e:	b209      	sxth	r1, r1
 8014150:	4798      	blx	r3
 8014152:	4620      	mov	r0, r4
 8014154:	b002      	add	sp, #8
 8014156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801415a:	f7ff be55 	b.w	8013e08 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 801415e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014162:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8014166:	4403      	add	r3, r0
 8014168:	b21b      	sxth	r3, r3
 801416a:	429a      	cmp	r2, r3
 801416c:	dd04      	ble.n	8014178 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 801416e:	1a9a      	subs	r2, r3, r2
 8014170:	4282      	cmp	r2, r0
 8014172:	bfb8      	it	lt
 8014174:	4602      	movlt	r2, r0
 8014176:	e7d2      	b.n	801411e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8014178:	2200      	movs	r2, #0
 801417a:	e7d0      	b.n	801411e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 801417c:	b002      	add	sp, #8
 801417e:	bd10      	pop	{r4, pc}

08014180 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 8014180:	6301      	str	r1, [r0, #48]	; 0x30
 8014182:	6601      	str	r1, [r0, #96]	; 0x60
 8014184:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8014188:	4770      	bx	lr

0801418a <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>:
 801418a:	2201      	movs	r2, #1
 801418c:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
 8014190:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
 8014194:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 8014198:	f7ff be36 	b.w	8013e08 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

0801419c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801419c:	4770      	bx	lr

0801419e <_ZN8touchgfx3HAL10FlushCacheEv>:
 801419e:	4770      	bx	lr

080141a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80141a0:	6803      	ldr	r3, [r0, #0]
 80141a2:	b513      	push	{r0, r1, r4, lr}
 80141a4:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80141a8:	2300      	movs	r3, #0
 80141aa:	e9cd 3300 	strd	r3, r3, [sp]
 80141ae:	466b      	mov	r3, sp
 80141b0:	47a0      	blx	r4
 80141b2:	b002      	add	sp, #8
 80141b4:	bd10      	pop	{r4, pc}

080141b6 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80141b6:	2301      	movs	r3, #1
 80141b8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80141bc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80141c0:	4770      	bx	lr

080141c2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80141c2:	2301      	movs	r3, #1
 80141c4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80141c8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80141cc:	4770      	bx	lr

080141ce <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80141ce:	6843      	ldr	r3, [r0, #4]
 80141d0:	2201      	movs	r2, #1
 80141d2:	725a      	strb	r2, [r3, #9]
 80141d4:	6840      	ldr	r0, [r0, #4]
 80141d6:	6803      	ldr	r3, [r0, #0]
 80141d8:	691b      	ldr	r3, [r3, #16]
 80141da:	4718      	bx	r3

080141dc <_ZN8touchgfx3HAL8flushDMAEv>:
 80141dc:	6840      	ldr	r0, [r0, #4]
 80141de:	6803      	ldr	r3, [r0, #0]
 80141e0:	689b      	ldr	r3, [r3, #8]
 80141e2:	4718      	bx	r3

080141e4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80141e4:	b530      	push	{r4, r5, lr}
 80141e6:	b08b      	sub	sp, #44	; 0x2c
 80141e8:	6804      	ldr	r4, [r0, #0]
 80141ea:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80141ee:	9509      	str	r5, [sp, #36]	; 0x24
 80141f0:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80141f4:	9508      	str	r5, [sp, #32]
 80141f6:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80141fa:	9507      	str	r5, [sp, #28]
 80141fc:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8014200:	9506      	str	r5, [sp, #24]
 8014202:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8014206:	9505      	str	r5, [sp, #20]
 8014208:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801420c:	9504      	str	r5, [sp, #16]
 801420e:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8014212:	9503      	str	r5, [sp, #12]
 8014214:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014218:	9502      	str	r5, [sp, #8]
 801421a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801421e:	e9cd 3500 	strd	r3, r5, [sp]
 8014222:	4613      	mov	r3, r2
 8014224:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8014226:	2200      	movs	r2, #0
 8014228:	47a0      	blx	r4
 801422a:	b00b      	add	sp, #44	; 0x2c
 801422c:	bd30      	pop	{r4, r5, pc}
	...

08014230 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014230:	4b04      	ldr	r3, [pc, #16]	; (8014244 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	b123      	cbz	r3, 8014240 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014236:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801423a:	f080 0001 	eor.w	r0, r0, #1
 801423e:	4770      	bx	lr
 8014240:	2001      	movs	r0, #1
 8014242:	4770      	bx	lr
 8014244:	2400aeea 	.word	0x2400aeea

08014248 <_ZN8touchgfx3HAL8endFrameEv>:
 8014248:	b510      	push	{r4, lr}
 801424a:	4604      	mov	r4, r0
 801424c:	6840      	ldr	r0, [r0, #4]
 801424e:	6803      	ldr	r3, [r0, #0]
 8014250:	689b      	ldr	r3, [r3, #8]
 8014252:	4798      	blx	r3
 8014254:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8014258:	b113      	cbz	r3, 8014260 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801425a:	2301      	movs	r3, #1
 801425c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014260:	bd10      	pop	{r4, pc}

08014262 <_ZN8touchgfx3HAL10initializeEv>:
 8014262:	b510      	push	{r4, lr}
 8014264:	4604      	mov	r4, r0
 8014266:	f7ed fd21 	bl	8001cac <_ZN8touchgfx10OSWrappers10initializeEv>
 801426a:	6860      	ldr	r0, [r4, #4]
 801426c:	6803      	ldr	r3, [r0, #0]
 801426e:	68db      	ldr	r3, [r3, #12]
 8014270:	4798      	blx	r3
 8014272:	68e0      	ldr	r0, [r4, #12]
 8014274:	6803      	ldr	r3, [r0, #0]
 8014276:	689b      	ldr	r3, [r3, #8]
 8014278:	4798      	blx	r3
 801427a:	6823      	ldr	r3, [r4, #0]
 801427c:	4620      	mov	r0, r4
 801427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014284:	4718      	bx	r3

08014286 <_ZN8touchgfx3HAL9taskEntryEv>:
 8014286:	b508      	push	{r3, lr}
 8014288:	6803      	ldr	r3, [r0, #0]
 801428a:	4604      	mov	r4, r0
 801428c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801428e:	4798      	blx	r3
 8014290:	6823      	ldr	r3, [r4, #0]
 8014292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014294:	4620      	mov	r0, r4
 8014296:	4798      	blx	r3
 8014298:	f7ed fd7e 	bl	8001d98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801429c:	6823      	ldr	r3, [r4, #0]
 801429e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142a0:	e7f8      	b.n	8014294 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080142a4 <_ZN8touchgfx3HAL4tickEv>:
 80142a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80142a6:	6803      	ldr	r3, [r0, #0]
 80142a8:	4604      	mov	r4, r0
 80142aa:	4d5c      	ldr	r5, [pc, #368]	; (801441c <_ZN8touchgfx3HAL4tickEv+0x178>)
 80142ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80142b0:	4798      	blx	r3
 80142b2:	2800      	cmp	r0, #0
 80142b4:	f000 8097 	beq.w	80143e6 <_ZN8touchgfx3HAL4tickEv+0x142>
 80142b8:	2001      	movs	r0, #1
 80142ba:	2600      	movs	r6, #0
 80142bc:	f7ed fa34 	bl	8001728 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80142c0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80142c4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80142c8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80142cc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80142d0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80142d4:	b133      	cbz	r3, 80142e4 <_ZN8touchgfx3HAL4tickEv+0x40>
 80142d6:	6823      	ldr	r3, [r4, #0]
 80142d8:	4620      	mov	r0, r4
 80142da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80142de:	4798      	blx	r3
 80142e0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80142e4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80142e8:	2601      	movs	r6, #1
 80142ea:	6862      	ldr	r2, [r4, #4]
 80142ec:	f083 0301 	eor.w	r3, r3, #1
 80142f0:	702e      	strb	r6, [r5, #0]
 80142f2:	7253      	strb	r3, [r2, #9]
 80142f4:	f002 ff1a 	bl	801712c <_ZN8touchgfx11Application11getInstanceEv>
 80142f8:	6803      	ldr	r3, [r0, #0]
 80142fa:	4631      	mov	r1, r6
 80142fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142fe:	4798      	blx	r3
 8014300:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014304:	b90b      	cbnz	r3, 801430a <_ZN8touchgfx3HAL4tickEv+0x66>
 8014306:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801430a:	f002 ff0f 	bl	801712c <_ZN8touchgfx11Application11getInstanceEv>
 801430e:	6803      	ldr	r3, [r0, #0]
 8014310:	695b      	ldr	r3, [r3, #20]
 8014312:	4798      	blx	r3
 8014314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014316:	6803      	ldr	r3, [r0, #0]
 8014318:	691b      	ldr	r3, [r3, #16]
 801431a:	4798      	blx	r3
 801431c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014320:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8014324:	3b01      	subs	r3, #1
 8014326:	b2db      	uxtb	r3, r3
 8014328:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801432c:	b10a      	cbz	r2, 8014332 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801432e:	2b00      	cmp	r3, #0
 8014330:	d1eb      	bne.n	801430a <_ZN8touchgfx3HAL4tickEv+0x66>
 8014332:	4a3b      	ldr	r2, [pc, #236]	; (8014420 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014334:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8014338:	7813      	ldrb	r3, [r2, #0]
 801433a:	3301      	adds	r3, #1
 801433c:	b25b      	sxtb	r3, r3
 801433e:	4299      	cmp	r1, r3
 8014340:	7013      	strb	r3, [r2, #0]
 8014342:	dc10      	bgt.n	8014366 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014344:	2300      	movs	r3, #0
 8014346:	68e0      	ldr	r0, [r4, #12]
 8014348:	a902      	add	r1, sp, #8
 801434a:	7013      	strb	r3, [r2, #0]
 801434c:	aa03      	add	r2, sp, #12
 801434e:	6803      	ldr	r3, [r0, #0]
 8014350:	68db      	ldr	r3, [r3, #12]
 8014352:	4798      	blx	r3
 8014354:	6823      	ldr	r3, [r4, #0]
 8014356:	2800      	cmp	r0, #0
 8014358:	d051      	beq.n	80143fe <_ZN8touchgfx3HAL4tickEv+0x15a>
 801435a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801435e:	4620      	mov	r0, r4
 8014360:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014364:	4798      	blx	r3
 8014366:	2300      	movs	r3, #0
 8014368:	6960      	ldr	r0, [r4, #20]
 801436a:	f88d 3007 	strb.w	r3, [sp, #7]
 801436e:	b158      	cbz	r0, 8014388 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014370:	6803      	ldr	r3, [r0, #0]
 8014372:	f10d 0107 	add.w	r1, sp, #7
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	4798      	blx	r3
 801437a:	b128      	cbz	r0, 8014388 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801437c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801437e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014382:	6803      	ldr	r3, [r0, #0]
 8014384:	68db      	ldr	r3, [r3, #12]
 8014386:	4798      	blx	r3
 8014388:	f104 001c 	add.w	r0, r4, #28
 801438c:	f011 fb0a 	bl	80259a4 <_ZN8touchgfx8Gestures4tickEv>
 8014390:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8014394:	b30b      	cbz	r3, 80143da <_ZN8touchgfx3HAL4tickEv+0x136>
 8014396:	6920      	ldr	r0, [r4, #16]
 8014398:	6803      	ldr	r3, [r0, #0]
 801439a:	691b      	ldr	r3, [r3, #16]
 801439c:	4798      	blx	r3
 801439e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80143a0:	4606      	mov	r6, r0
 80143a2:	b903      	cbnz	r3, 80143a6 <_ZN8touchgfx3HAL4tickEv+0x102>
 80143a4:	6720      	str	r0, [r4, #112]	; 0x70
 80143a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80143a8:	4a1e      	ldr	r2, [pc, #120]	; (8014424 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80143aa:	1af3      	subs	r3, r6, r3
 80143ac:	4293      	cmp	r3, r2
 80143ae:	d914      	bls.n	80143da <_ZN8touchgfx3HAL4tickEv+0x136>
 80143b0:	6920      	ldr	r0, [r4, #16]
 80143b2:	6803      	ldr	r3, [r0, #0]
 80143b4:	699b      	ldr	r3, [r3, #24]
 80143b6:	4798      	blx	r3
 80143b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80143ba:	2264      	movs	r2, #100	; 0x64
 80143bc:	1af3      	subs	r3, r6, r3
 80143be:	fbb3 f3f2 	udiv	r3, r3, r2
 80143c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80143c6:	2800      	cmp	r0, #0
 80143c8:	dc1e      	bgt.n	8014408 <_ZN8touchgfx3HAL4tickEv+0x164>
 80143ca:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80143ce:	6920      	ldr	r0, [r4, #16]
 80143d0:	2100      	movs	r1, #0
 80143d2:	6803      	ldr	r3, [r0, #0]
 80143d4:	69db      	ldr	r3, [r3, #28]
 80143d6:	4798      	blx	r3
 80143d8:	6726      	str	r6, [r4, #112]	; 0x70
 80143da:	f002 fea7 	bl	801712c <_ZN8touchgfx11Application11getInstanceEv>
 80143de:	6803      	ldr	r3, [r0, #0]
 80143e0:	2100      	movs	r1, #0
 80143e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143e4:	4798      	blx	r3
 80143e6:	6823      	ldr	r3, [r4, #0]
 80143e8:	4620      	mov	r0, r4
 80143ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80143ee:	4798      	blx	r3
 80143f0:	2001      	movs	r0, #1
 80143f2:	f7ed f9b5 	bl	8001760 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80143f6:	2300      	movs	r3, #0
 80143f8:	702b      	strb	r3, [r5, #0]
 80143fa:	b004      	add	sp, #16
 80143fc:	bd70      	pop	{r4, r5, r6, pc}
 80143fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014402:	4620      	mov	r0, r4
 8014404:	4798      	blx	r3
 8014406:	e7ae      	b.n	8014366 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014408:	2863      	cmp	r0, #99	; 0x63
 801440a:	bfcb      	itete	gt
 801440c:	2300      	movgt	r3, #0
 801440e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8014412:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8014416:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801441a:	e7d8      	b.n	80143ce <_ZN8touchgfx3HAL4tickEv+0x12a>
 801441c:	2400aef0 	.word	0x2400aef0
 8014420:	2400aef1 	.word	0x2400aef1
 8014424:	05f5e100 	.word	0x05f5e100

08014428 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014428:	f7ed bc82 	b.w	8001d30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801442c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801442c:	6581      	str	r1, [r0, #88]	; 0x58
 801442e:	301c      	adds	r0, #28
 8014430:	f011 bab6 	b.w	80259a0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014434 <_ZN8touchgfx3HAL5touchEll>:
 8014434:	b530      	push	{r4, r5, lr}
 8014436:	b087      	sub	sp, #28
 8014438:	4604      	mov	r4, r0
 801443a:	a804      	add	r0, sp, #16
 801443c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014440:	f002 fc7a 	bl	8016d38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014444:	9b04      	ldr	r3, [sp, #16]
 8014446:	a906      	add	r1, sp, #24
 8014448:	a803      	add	r0, sp, #12
 801444a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801444e:	9b05      	ldr	r3, [sp, #20]
 8014450:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014454:	f002 fcc2 	bl	8016ddc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014458:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801445c:	f104 001c 	add.w	r0, r4, #28
 8014460:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014464:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014468:	b189      	cbz	r1, 801448e <_ZN8touchgfx3HAL5touchEll+0x5a>
 801446a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801446e:	9300      	str	r3, [sp, #0]
 8014470:	4613      	mov	r3, r2
 8014472:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8014476:	462a      	mov	r2, r5
 8014478:	f011 faa2 	bl	80259c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801447c:	b128      	cbz	r0, 801448a <_ZN8touchgfx3HAL5touchEll+0x56>
 801447e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014482:	65e3      	str	r3, [r4, #92]	; 0x5c
 8014484:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014488:	6623      	str	r3, [r4, #96]	; 0x60
 801448a:	b007      	add	sp, #28
 801448c:	bd30      	pop	{r4, r5, pc}
 801448e:	f011 fadb 	bl	8025a48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014492:	2301      	movs	r3, #1
 8014494:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014498:	e7f1      	b.n	801447e <_ZN8touchgfx3HAL5touchEll+0x4a>

0801449a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801449a:	b510      	push	{r4, lr}
 801449c:	2b00      	cmp	r3, #0
 801449e:	d046      	beq.n	801452e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80144a0:	ea81 0002 	eor.w	r0, r1, r2
 80144a4:	07c4      	lsls	r4, r0, #31
 80144a6:	d508      	bpl.n	80144ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80144a8:	440b      	add	r3, r1
 80144aa:	3a01      	subs	r2, #1
 80144ac:	428b      	cmp	r3, r1
 80144ae:	d93e      	bls.n	801452e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80144b0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80144b4:	f801 0b01 	strb.w	r0, [r1], #1
 80144b8:	e7f8      	b.n	80144ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80144ba:	07d0      	lsls	r0, r2, #31
 80144bc:	bf42      	ittt	mi
 80144be:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80144c2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80144c6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80144ca:	2b01      	cmp	r3, #1
 80144cc:	d911      	bls.n	80144f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80144ce:	ea81 0402 	eor.w	r4, r1, r2
 80144d2:	4610      	mov	r0, r2
 80144d4:	07a4      	lsls	r4, r4, #30
 80144d6:	d022      	beq.n	801451e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80144d8:	f023 0401 	bic.w	r4, r3, #1
 80144dc:	440c      	add	r4, r1
 80144de:	428c      	cmp	r4, r1
 80144e0:	4602      	mov	r2, r0
 80144e2:	d904      	bls.n	80144ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80144e4:	8812      	ldrh	r2, [r2, #0]
 80144e6:	3002      	adds	r0, #2
 80144e8:	f821 2b02 	strh.w	r2, [r1], #2
 80144ec:	e7f7      	b.n	80144de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80144ee:	f003 0301 	and.w	r3, r3, #1
 80144f2:	f023 0003 	bic.w	r0, r3, #3
 80144f6:	4408      	add	r0, r1
 80144f8:	4288      	cmp	r0, r1
 80144fa:	4614      	mov	r4, r2
 80144fc:	d904      	bls.n	8014508 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80144fe:	6824      	ldr	r4, [r4, #0]
 8014500:	3204      	adds	r2, #4
 8014502:	f841 4b04 	str.w	r4, [r1], #4
 8014506:	e7f7      	b.n	80144f8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8014508:	f003 0303 	and.w	r3, r3, #3
 801450c:	3a01      	subs	r2, #1
 801450e:	440b      	add	r3, r1
 8014510:	428b      	cmp	r3, r1
 8014512:	d90c      	bls.n	801452e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014514:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014518:	f801 0b01 	strb.w	r0, [r1], #1
 801451c:	e7f8      	b.n	8014510 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801451e:	0790      	lsls	r0, r2, #30
 8014520:	d0e7      	beq.n	80144f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014522:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014526:	3b02      	subs	r3, #2
 8014528:	f821 0b02 	strh.w	r0, [r1], #2
 801452c:	e7e1      	b.n	80144f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801452e:	2001      	movs	r0, #1
 8014530:	bd10      	pop	{r4, pc}

08014532 <_ZN8touchgfx3HAL7noTouchEv>:
 8014532:	b510      	push	{r4, lr}
 8014534:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8014538:	4604      	mov	r4, r0
 801453a:	b153      	cbz	r3, 8014552 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801453c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8014540:	2101      	movs	r1, #1
 8014542:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8014546:	301c      	adds	r0, #28
 8014548:	f011 fa7e 	bl	8025a48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801454c:	2300      	movs	r3, #0
 801454e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014552:	bd10      	pop	{r4, pc}

08014554 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014558:	4604      	mov	r4, r0
 801455a:	6980      	ldr	r0, [r0, #24]
 801455c:	b085      	sub	sp, #20
 801455e:	460f      	mov	r7, r1
 8014560:	4690      	mov	r8, r2
 8014562:	4699      	mov	r9, r3
 8014564:	b930      	cbnz	r0, 8014574 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8014566:	4b1c      	ldr	r3, [pc, #112]	; (80145d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8014568:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801456c:	4a1b      	ldr	r2, [pc, #108]	; (80145dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801456e:	481c      	ldr	r0, [pc, #112]	; (80145e0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8014570:	f011 fb00 	bl	8025b74 <__assert_func>
 8014574:	ad04      	add	r5, sp, #16
 8014576:	2600      	movs	r6, #0
 8014578:	f845 6d04 	str.w	r6, [r5, #-4]!
 801457c:	6806      	ldr	r6, [r0, #0]
 801457e:	9501      	str	r5, [sp, #4]
 8014580:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8014584:	9500      	str	r5, [sp, #0]
 8014586:	6835      	ldr	r5, [r6, #0]
 8014588:	47a8      	blx	r5
 801458a:	4d16      	ldr	r5, [pc, #88]	; (80145e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801458c:	4606      	mov	r6, r0
 801458e:	f8a5 9000 	strh.w	r9, [r5]
 8014592:	f7ef fb35 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 8014596:	6803      	ldr	r3, [r0, #0]
 8014598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801459a:	4798      	blx	r3
 801459c:	2801      	cmp	r0, #1
 801459e:	d012      	beq.n	80145c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 80145a0:	d306      	bcc.n	80145b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 80145a2:	280d      	cmp	r0, #13
 80145a4:	d80b      	bhi.n	80145be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80145a6:	4b10      	ldr	r3, [pc, #64]	; (80145e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80145a8:	f240 1167 	movw	r1, #359	; 0x167
 80145ac:	4a0b      	ldr	r2, [pc, #44]	; (80145dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80145ae:	e7de      	b.n	801456e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80145b0:	882b      	ldrh	r3, [r5, #0]
 80145b2:	fb08 7203 	mla	r2, r8, r3, r7
 80145b6:	9b03      	ldr	r3, [sp, #12]
 80145b8:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80145bc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80145be:	4630      	mov	r0, r6
 80145c0:	b005      	add	sp, #20
 80145c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145c6:	882a      	ldrh	r2, [r5, #0]
 80145c8:	9b03      	ldr	r3, [sp, #12]
 80145ca:	fb08 7202 	mla	r2, r8, r2, r7
 80145ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80145d2:	1a9a      	subs	r2, r3, r2
 80145d4:	63e2      	str	r2, [r4, #60]	; 0x3c
 80145d6:	e7f2      	b.n	80145be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80145d8:	080286b9 	.word	0x080286b9
 80145dc:	08028a47 	.word	0x08028a47
 80145e0:	080286fe 	.word	0x080286fe
 80145e4:	2400aee6 	.word	0x2400aee6
 80145e8:	08028724 	.word	0x08028724

080145ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80145ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145ee:	b08b      	sub	sp, #44	; 0x2c
 80145f0:	4617      	mov	r7, r2
 80145f2:	4604      	mov	r4, r0
 80145f4:	460e      	mov	r6, r1
 80145f6:	461d      	mov	r5, r3
 80145f8:	f7ef fb02 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 80145fc:	6803      	ldr	r3, [r0, #0]
 80145fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014600:	4798      	blx	r3
 8014602:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8014606:	9007      	str	r0, [sp, #28]
 8014608:	4631      	mov	r1, r6
 801460a:	6822      	ldr	r2, [r4, #0]
 801460c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014610:	4b0c      	ldr	r3, [pc, #48]	; (8014644 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8014612:	4620      	mov	r0, r4
 8014614:	881b      	ldrh	r3, [r3, #0]
 8014616:	9306      	str	r3, [sp, #24]
 8014618:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801461c:	9305      	str	r3, [sp, #20]
 801461e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014622:	9304      	str	r3, [sp, #16]
 8014624:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014628:	9303      	str	r3, [sp, #12]
 801462a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801462e:	9302      	str	r3, [sp, #8]
 8014630:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014634:	e9cd 5300 	strd	r5, r3, [sp]
 8014638:	463b      	mov	r3, r7
 801463a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801463c:	2200      	movs	r2, #0
 801463e:	47a8      	blx	r5
 8014640:	b00b      	add	sp, #44	; 0x2c
 8014642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014644:	2400aee6 	.word	0x2400aee6

08014648 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801464c:	4698      	mov	r8, r3
 801464e:	6803      	ldr	r3, [r0, #0]
 8014650:	b08b      	sub	sp, #44	; 0x2c
 8014652:	4617      	mov	r7, r2
 8014654:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8014656:	460e      	mov	r6, r1
 8014658:	4b13      	ldr	r3, [pc, #76]	; (80146a8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801465a:	4604      	mov	r4, r0
 801465c:	f8b3 9000 	ldrh.w	r9, [r3]
 8014660:	f7ef face 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 8014664:	6803      	ldr	r3, [r0, #0]
 8014666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014668:	4798      	blx	r3
 801466a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801466e:	2200      	movs	r2, #0
 8014670:	4631      	mov	r1, r6
 8014672:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014676:	2302      	movs	r3, #2
 8014678:	4620      	mov	r0, r4
 801467a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801467e:	2301      	movs	r3, #1
 8014680:	9305      	str	r3, [sp, #20]
 8014682:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8014686:	9304      	str	r3, [sp, #16]
 8014688:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801468c:	9303      	str	r3, [sp, #12]
 801468e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014692:	9302      	str	r3, [sp, #8]
 8014694:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014698:	e9cd 8300 	strd	r8, r3, [sp]
 801469c:	463b      	mov	r3, r7
 801469e:	47a8      	blx	r5
 80146a0:	b00b      	add	sp, #44	; 0x2c
 80146a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146a6:	bf00      	nop
 80146a8:	2400aee6 	.word	0x2400aee6

080146ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80146ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80146b0:	4698      	mov	r8, r3
 80146b2:	6803      	ldr	r3, [r0, #0]
 80146b4:	b087      	sub	sp, #28
 80146b6:	460e      	mov	r6, r1
 80146b8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80146ba:	4617      	mov	r7, r2
 80146bc:	4b0f      	ldr	r3, [pc, #60]	; (80146fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80146be:	4604      	mov	r4, r0
 80146c0:	f8b3 9000 	ldrh.w	r9, [r3]
 80146c4:	f7ef fa9c 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 80146c8:	6803      	ldr	r3, [r0, #0]
 80146ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146cc:	4798      	blx	r3
 80146ce:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80146d2:	463a      	mov	r2, r7
 80146d4:	4631      	mov	r1, r6
 80146d6:	f8cd 900c 	str.w	r9, [sp, #12]
 80146da:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80146de:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80146e2:	4620      	mov	r0, r4
 80146e4:	9302      	str	r3, [sp, #8]
 80146e6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80146ea:	9301      	str	r3, [sp, #4]
 80146ec:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80146f0:	9300      	str	r3, [sp, #0]
 80146f2:	4643      	mov	r3, r8
 80146f4:	47a8      	blx	r5
 80146f6:	b007      	add	sp, #28
 80146f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146fc:	2400aee6 	.word	0x2400aee6

08014700 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014704:	4604      	mov	r4, r0
 8014706:	b08f      	sub	sp, #60	; 0x3c
 8014708:	4610      	mov	r0, r2
 801470a:	460d      	mov	r5, r1
 801470c:	4691      	mov	r9, r2
 801470e:	461e      	mov	r6, r3
 8014710:	f005 f904 	bl	801991c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014714:	2800      	cmp	r0, #0
 8014716:	f000 809c 	beq.w	8014852 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 801471a:	6823      	ldr	r3, [r4, #0]
 801471c:	4620      	mov	r0, r4
 801471e:	f8df b194 	ldr.w	fp, [pc, #404]	; 80148b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8014722:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8014726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014728:	4798      	blx	r3
 801472a:	6823      	ldr	r3, [r4, #0]
 801472c:	4620      	mov	r0, r4
 801472e:	f8df a188 	ldr.w	sl, [pc, #392]	; 80148b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014734:	4798      	blx	r3
 8014736:	f8bb 3000 	ldrh.w	r3, [fp]
 801473a:	4f5b      	ldr	r7, [pc, #364]	; (80148a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801473c:	9301      	str	r3, [sp, #4]
 801473e:	f8ba 3000 	ldrh.w	r3, [sl]
 8014742:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8014746:	4640      	mov	r0, r8
 8014748:	9302      	str	r3, [sp, #8]
 801474a:	883b      	ldrh	r3, [r7, #0]
 801474c:	9303      	str	r3, [sp, #12]
 801474e:	4b57      	ldr	r3, [pc, #348]	; (80148ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014750:	881a      	ldrh	r2, [r3, #0]
 8014752:	9305      	str	r3, [sp, #20]
 8014754:	9204      	str	r2, [sp, #16]
 8014756:	f005 f99b 	bl	8019a90 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801475a:	8038      	strh	r0, [r7, #0]
 801475c:	4640      	mov	r0, r8
 801475e:	f005 f9d1 	bl	8019b04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014762:	9b05      	ldr	r3, [sp, #20]
 8014764:	8018      	strh	r0, [r3, #0]
 8014766:	4b52      	ldr	r3, [pc, #328]	; (80148b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d174      	bne.n	8014858 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801476e:	883b      	ldrh	r3, [r7, #0]
 8014770:	f8aa 0000 	strh.w	r0, [sl]
 8014774:	f8ab 3000 	strh.w	r3, [fp]
 8014778:	4648      	mov	r0, r9
 801477a:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801477e:	f005 f8cd 	bl	801991c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014782:	2200      	movs	r2, #0
 8014784:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8014788:	4611      	mov	r1, r2
 801478a:	4628      	mov	r0, r5
 801478c:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014790:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014794:	f7ef ff16 	bl	80045c4 <_ZN8touchgfx8Drawable5setXYEss>
 8014798:	2301      	movs	r3, #1
 801479a:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801479e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80147a2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	dd5c      	ble.n	8014864 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 80147aa:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	dd58      	ble.n	8014864 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 80147b2:	462a      	mov	r2, r5
 80147b4:	ab0a      	add	r3, sp, #40	; 0x28
 80147b6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80147ba:	6851      	ldr	r1, [r2, #4]
 80147bc:	c303      	stmia	r3!, {r0, r1}
 80147be:	4631      	mov	r1, r6
 80147c0:	a80a      	add	r0, sp, #40	; 0x28
 80147c2:	f7fe fd9d 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 80147c6:	4b38      	ldr	r3, [pc, #224]	; (80148a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80147c8:	2100      	movs	r1, #0
 80147ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80147ce:	4b37      	ldr	r3, [pc, #220]	; (80148ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80147d0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80147d4:	aa0a      	add	r2, sp, #40	; 0x28
 80147d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147da:	910c      	str	r1, [sp, #48]	; 0x30
 80147dc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80147e0:	ab08      	add	r3, sp, #32
 80147e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80147ea:	4618      	mov	r0, r3
 80147ec:	a90c      	add	r1, sp, #48	; 0x30
 80147ee:	f7fe fd87 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 80147f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d13c      	bne.n	8014872 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 80147f8:	2000      	movs	r0, #0
 80147fa:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80147fe:	2600      	movs	r6, #0
 8014800:	696b      	ldr	r3, [r5, #20]
 8014802:	a908      	add	r1, sp, #32
 8014804:	682a      	ldr	r2, [r5, #0]
 8014806:	4628      	mov	r0, r5
 8014808:	9305      	str	r3, [sp, #20]
 801480a:	616e      	str	r6, [r5, #20]
 801480c:	6892      	ldr	r2, [r2, #8]
 801480e:	4790      	blx	r2
 8014810:	9b05      	ldr	r3, [sp, #20]
 8014812:	4652      	mov	r2, sl
 8014814:	4649      	mov	r1, r9
 8014816:	616b      	str	r3, [r5, #20]
 8014818:	4628      	mov	r0, r5
 801481a:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801481e:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014822:	f7ef fecf 	bl	80045c4 <_ZN8touchgfx8Drawable5setXYEss>
 8014826:	9a01      	ldr	r2, [sp, #4]
 8014828:	4b22      	ldr	r3, [pc, #136]	; (80148b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801482a:	4620      	mov	r0, r4
 801482c:	801a      	strh	r2, [r3, #0]
 801482e:	9a02      	ldr	r2, [sp, #8]
 8014830:	4b21      	ldr	r3, [pc, #132]	; (80148b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014832:	801a      	strh	r2, [r3, #0]
 8014834:	9a03      	ldr	r2, [sp, #12]
 8014836:	4b1c      	ldr	r3, [pc, #112]	; (80148a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8014838:	801a      	strh	r2, [r3, #0]
 801483a:	4b1c      	ldr	r3, [pc, #112]	; (80148ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801483c:	9a04      	ldr	r2, [sp, #16]
 801483e:	801a      	strh	r2, [r3, #0]
 8014840:	6823      	ldr	r3, [r4, #0]
 8014842:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8014846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014848:	4798      	blx	r3
 801484a:	6823      	ldr	r3, [r4, #0]
 801484c:	4620      	mov	r0, r4
 801484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014850:	4798      	blx	r3
 8014852:	b00f      	add	sp, #60	; 0x3c
 8014854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014858:	883b      	ldrh	r3, [r7, #0]
 801485a:	f8ab 0000 	strh.w	r0, [fp]
 801485e:	f8aa 3000 	strh.w	r3, [sl]
 8014862:	e789      	b.n	8014778 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8014864:	462a      	mov	r2, r5
 8014866:	ab0a      	add	r3, sp, #40	; 0x28
 8014868:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801486c:	6851      	ldr	r1, [r2, #4]
 801486e:	c303      	stmia	r3!, {r0, r1}
 8014870:	e7a9      	b.n	80147c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8014872:	a807      	add	r0, sp, #28
 8014874:	f005 fa9e 	bl	8019db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014878:	4606      	mov	r6, r0
 801487a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801487c:	6803      	ldr	r3, [r0, #0]
 801487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014880:	4798      	blx	r3
 8014882:	4286      	cmp	r6, r0
 8014884:	d1b8      	bne.n	80147f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8014886:	f7ef f9bb 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 801488a:	6803      	ldr	r3, [r0, #0]
 801488c:	4606      	mov	r6, r0
 801488e:	a807      	add	r0, sp, #28
 8014890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014892:	9305      	str	r3, [sp, #20]
 8014894:	f005 fa8e 	bl	8019db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014898:	9b05      	ldr	r3, [sp, #20]
 801489a:	4601      	mov	r1, r0
 801489c:	4630      	mov	r0, r6
 801489e:	4798      	blx	r3
 80148a0:	f080 0001 	eor.w	r0, r0, #1
 80148a4:	b2c0      	uxtb	r0, r0
 80148a6:	e7a8      	b.n	80147fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80148a8:	2400aee0 	.word	0x2400aee0
 80148ac:	2400aee2 	.word	0x2400aee2
 80148b0:	2400aee4 	.word	0x2400aee4
 80148b4:	2400aee6 	.word	0x2400aee6
 80148b8:	2400aee8 	.word	0x2400aee8

080148bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80148bc:	4b07      	ldr	r3, [pc, #28]	; (80148dc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80148be:	b510      	push	{r4, lr}
 80148c0:	781b      	ldrb	r3, [r3, #0]
 80148c2:	4604      	mov	r4, r0
 80148c4:	b13b      	cbz	r3, 80148d6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80148c6:	6803      	ldr	r3, [r0, #0]
 80148c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148ca:	4798      	blx	r3
 80148cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80148ce:	4283      	cmp	r3, r0
 80148d0:	d101      	bne.n	80148d6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80148d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80148d4:	bd10      	pop	{r4, pc}
 80148d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80148d8:	e7fc      	b.n	80148d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80148da:	bf00      	nop
 80148dc:	2400aeea 	.word	0x2400aeea

080148e0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80148e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148e4:	b088      	sub	sp, #32
 80148e6:	4692      	mov	sl, r2
 80148e8:	461d      	mov	r5, r3
 80148ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80148ee:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 80148f2:	2400      	movs	r4, #0
 80148f4:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 80148f8:	4606      	mov	r6, r0
 80148fa:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 80148fe:	fb09 a505 	mla	r5, r9, r5, sl
 8014902:	9403      	str	r4, [sp, #12]
 8014904:	f8ad 8014 	strh.w	r8, [sp, #20]
 8014908:	f8ad 7016 	strh.w	r7, [sp, #22]
 801490c:	f88d 401c 	strb.w	r4, [sp, #28]
 8014910:	e9cd 3100 	strd	r3, r1, [sp]
 8014914:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014918:	f8ad 3018 	strh.w	r3, [sp, #24]
 801491c:	f7ff ffce 	bl	80148bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014920:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014924:	f8ad 901a 	strh.w	r9, [sp, #26]
 8014928:	f88d 401e 	strb.w	r4, [sp, #30]
 801492c:	9504      	str	r5, [sp, #16]
 801492e:	f88d 401d 	strb.w	r4, [sp, #29]
 8014932:	f88d 401f 	strb.w	r4, [sp, #31]
 8014936:	f1b8 0f00 	cmp.w	r8, #0
 801493a:	d000      	beq.n	801493e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 801493c:	b937      	cbnz	r7, 801494c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 801493e:	4b0d      	ldr	r3, [pc, #52]	; (8014974 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8014940:	f240 210b 	movw	r1, #523	; 0x20b
 8014944:	4a0c      	ldr	r2, [pc, #48]	; (8014978 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8014946:	480d      	ldr	r0, [pc, #52]	; (801497c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8014948:	f011 f914 	bl	8025b74 <__assert_func>
 801494c:	6833      	ldr	r3, [r6, #0]
 801494e:	4630      	mov	r0, r6
 8014950:	9c00      	ldr	r4, [sp, #0]
 8014952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014954:	4798      	blx	r3
 8014956:	4220      	tst	r0, r4
 8014958:	d104      	bne.n	8014964 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 801495a:	4b09      	ldr	r3, [pc, #36]	; (8014980 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 801495c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8014960:	4a05      	ldr	r2, [pc, #20]	; (8014978 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8014962:	e7f0      	b.n	8014946 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8014964:	6870      	ldr	r0, [r6, #4]
 8014966:	4669      	mov	r1, sp
 8014968:	6803      	ldr	r3, [r0, #0]
 801496a:	685b      	ldr	r3, [r3, #4]
 801496c:	4798      	blx	r3
 801496e:	b008      	add	sp, #32
 8014970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014974:	0802854c 	.word	0x0802854c
 8014978:	0802887c 	.word	0x0802887c
 801497c:	080286fe 	.word	0x080286fe
 8014980:	08028584 	.word	0x08028584

08014984 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014988:	b089      	sub	sp, #36	; 0x24
 801498a:	4693      	mov	fp, r2
 801498c:	461d      	mov	r5, r3
 801498e:	2400      	movs	r4, #0
 8014990:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8014994:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014998:	468a      	mov	sl, r1
 801499a:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 801499e:	fb09 b505 	mla	r5, r9, r5, fp
 80149a2:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 80149a6:	4606      	mov	r6, r0
 80149a8:	9403      	str	r4, [sp, #12]
 80149aa:	e9cd 3400 	strd	r3, r4, [sp]
 80149ae:	f7ff ff85 	bl	80148bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80149b2:	f8ad 8014 	strh.w	r8, [sp, #20]
 80149b6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80149ba:	f8ad 7016 	strh.w	r7, [sp, #22]
 80149be:	f8ad 4018 	strh.w	r4, [sp, #24]
 80149c2:	9504      	str	r5, [sp, #16]
 80149c4:	f8ad 901a 	strh.w	r9, [sp, #26]
 80149c8:	f8cd a00c 	str.w	sl, [sp, #12]
 80149cc:	f8ad 401c 	strh.w	r4, [sp, #28]
 80149d0:	f88d 401e 	strb.w	r4, [sp, #30]
 80149d4:	f88d 401f 	strb.w	r4, [sp, #31]
 80149d8:	f1b8 0f00 	cmp.w	r8, #0
 80149dc:	d000      	beq.n	80149e0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 80149de:	b937      	cbnz	r7, 80149ee <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 80149e0:	4b0d      	ldr	r3, [pc, #52]	; (8014a18 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 80149e2:	f240 2121 	movw	r1, #545	; 0x221
 80149e6:	4a0d      	ldr	r2, [pc, #52]	; (8014a1c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 80149e8:	480d      	ldr	r0, [pc, #52]	; (8014a20 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 80149ea:	f011 f8c3 	bl	8025b74 <__assert_func>
 80149ee:	6833      	ldr	r3, [r6, #0]
 80149f0:	4630      	mov	r0, r6
 80149f2:	9c00      	ldr	r4, [sp, #0]
 80149f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149f6:	4798      	blx	r3
 80149f8:	4220      	tst	r0, r4
 80149fa:	d104      	bne.n	8014a06 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 80149fc:	4b09      	ldr	r3, [pc, #36]	; (8014a24 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 80149fe:	f240 2122 	movw	r1, #546	; 0x222
 8014a02:	4a06      	ldr	r2, [pc, #24]	; (8014a1c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8014a04:	e7f0      	b.n	80149e8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8014a06:	6870      	ldr	r0, [r6, #4]
 8014a08:	4669      	mov	r1, sp
 8014a0a:	6803      	ldr	r3, [r0, #0]
 8014a0c:	685b      	ldr	r3, [r3, #4]
 8014a0e:	4798      	blx	r3
 8014a10:	b009      	add	sp, #36	; 0x24
 8014a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a16:	bf00      	nop
 8014a18:	080285c9 	.word	0x080285c9
 8014a1c:	080288f2 	.word	0x080288f2
 8014a20:	080286fe 	.word	0x080286fe
 8014a24:	08028601 	.word	0x08028601

08014a28 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8014a28:	b508      	push	{r3, lr}
 8014a2a:	290d      	cmp	r1, #13
 8014a2c:	d817      	bhi.n	8014a5e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8014a2e:	e8df f001 	tbb	[pc, r1]
 8014a32:	090b      	.short	0x090b
 8014a34:	0d0d0d07 	.word	0x0d0d0d07
 8014a38:	1414140d 	.word	0x1414140d
 8014a3c:	0d0d1414 	.word	0x0d0d1414
 8014a40:	2020      	movs	r0, #32
 8014a42:	bd08      	pop	{r3, pc}
 8014a44:	2018      	movs	r0, #24
 8014a46:	e7fc      	b.n	8014a42 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014a48:	2010      	movs	r0, #16
 8014a4a:	e7fa      	b.n	8014a42 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014a4c:	4b05      	ldr	r3, [pc, #20]	; (8014a64 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8014a4e:	f240 2182 	movw	r1, #642	; 0x282
 8014a52:	4a05      	ldr	r2, [pc, #20]	; (8014a68 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8014a54:	4805      	ldr	r0, [pc, #20]	; (8014a6c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8014a56:	f011 f88d 	bl	8025b74 <__assert_func>
 8014a5a:	2008      	movs	r0, #8
 8014a5c:	e7f1      	b.n	8014a42 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014a5e:	2000      	movs	r0, #0
 8014a60:	e7ef      	b.n	8014a42 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014a62:	bf00      	nop
 8014a64:	0802877a 	.word	0x0802877a
 8014a68:	08028c1d 	.word	0x08028c1d
 8014a6c:	080286fe 	.word	0x080286fe

08014a70 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8014a70:	b570      	push	{r4, r5, r6, lr}
 8014a72:	460d      	mov	r5, r1
 8014a74:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8014a78:	4616      	mov	r6, r2
 8014a7a:	461c      	mov	r4, r3
 8014a7c:	f7ff ffd4 	bl	8014a28 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8014a80:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014a84:	10c0      	asrs	r0, r0, #3
 8014a86:	fb06 5101 	mla	r1, r6, r1, r5
 8014a8a:	fb00 4001 	mla	r0, r0, r1, r4
 8014a8e:	bd70      	pop	{r4, r5, r6, pc}

08014a90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8014a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a94:	b08a      	sub	sp, #40	; 0x28
 8014a96:	f04f 0c00 	mov.w	ip, #0
 8014a9a:	4604      	mov	r4, r0
 8014a9c:	469a      	mov	sl, r3
 8014a9e:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8014aa2:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8014aa6:	2d0b      	cmp	r5, #11
 8014aa8:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8014aac:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014ab0:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8014ab4:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8014ab8:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8014abc:	f8cd c014 	str.w	ip, [sp, #20]
 8014ac0:	d12d      	bne.n	8014b1e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8014ac2:	2080      	movs	r0, #128	; 0x80
 8014ac4:	9204      	str	r2, [sp, #16]
 8014ac6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8014aca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014ace:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014ad2:	f8ad 701c 	strh.w	r7, [sp, #28]
 8014ad6:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014ada:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ade:	4620      	mov	r0, r4
 8014ae0:	f7ff feec 	bl	80148bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ae4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8014ae8:	4603      	mov	r3, r0
 8014aea:	4651      	mov	r1, sl
 8014aec:	4620      	mov	r0, r4
 8014aee:	e9cd 9800 	strd	r9, r8, [sp]
 8014af2:	f7ff ffbd 	bl	8014a70 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014af6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8014afa:	9006      	str	r0, [sp, #24]
 8014afc:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8014b00:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8014b04:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8014b08:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8014b0c:	b107      	cbz	r7, 8014b10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8014b0e:	b9d6      	cbnz	r6, 8014b46 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8014b10:	4b17      	ldr	r3, [pc, #92]	; (8014b70 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8014b12:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8014b16:	4a17      	ldr	r2, [pc, #92]	; (8014b74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8014b18:	4817      	ldr	r0, [pc, #92]	; (8014b78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8014b1a:	f011 f82b 	bl	8025b74 <__assert_func>
 8014b1e:	2d02      	cmp	r5, #2
 8014b20:	d108      	bne.n	8014b34 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 8014b22:	2bff      	cmp	r3, #255	; 0xff
 8014b24:	d104      	bne.n	8014b30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 8014b26:	2800      	cmp	r0, #0
 8014b28:	bf14      	ite	ne
 8014b2a:	2040      	movne	r0, #64	; 0x40
 8014b2c:	2020      	moveq	r0, #32
 8014b2e:	e7c9      	b.n	8014ac4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8014b30:	2040      	movs	r0, #64	; 0x40
 8014b32:	e7c7      	b.n	8014ac4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8014b34:	2bff      	cmp	r3, #255	; 0xff
 8014b36:	d104      	bne.n	8014b42 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8014b38:	2800      	cmp	r0, #0
 8014b3a:	bf14      	ite	ne
 8014b3c:	2004      	movne	r0, #4
 8014b3e:	2001      	moveq	r0, #1
 8014b40:	e7c0      	b.n	8014ac4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8014b42:	2004      	movs	r0, #4
 8014b44:	e7be      	b.n	8014ac4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8014b46:	6823      	ldr	r3, [r4, #0]
 8014b48:	4620      	mov	r0, r4
 8014b4a:	9d02      	ldr	r5, [sp, #8]
 8014b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b4e:	4798      	blx	r3
 8014b50:	4228      	tst	r0, r5
 8014b52:	d104      	bne.n	8014b5e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8014b54:	4b09      	ldr	r3, [pc, #36]	; (8014b7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8014b56:	f240 11d5 	movw	r1, #469	; 0x1d5
 8014b5a:	4a06      	ldr	r2, [pc, #24]	; (8014b74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8014b5c:	e7dc      	b.n	8014b18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8014b5e:	6860      	ldr	r0, [r4, #4]
 8014b60:	a902      	add	r1, sp, #8
 8014b62:	6803      	ldr	r3, [r0, #0]
 8014b64:	685b      	ldr	r3, [r3, #4]
 8014b66:	4798      	blx	r3
 8014b68:	b00a      	add	sp, #40	; 0x28
 8014b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b6e:	bf00      	nop
 8014b70:	0802854c 	.word	0x0802854c
 8014b74:	08028aab 	.word	0x08028aab
 8014b78:	080286fe 	.word	0x080286fe
 8014b7c:	08028584 	.word	0x08028584

08014b80 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8014b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b84:	b08b      	sub	sp, #44	; 0x2c
 8014b86:	469b      	mov	fp, r3
 8014b88:	4604      	mov	r4, r0
 8014b8a:	4692      	mov	sl, r2
 8014b8c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8014b90:	2600      	movs	r6, #0
 8014b92:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8014b96:	4689      	mov	r9, r1
 8014b98:	2fff      	cmp	r7, #255	; 0xff
 8014b9a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8014b9e:	9605      	str	r6, [sp, #20]
 8014ba0:	bf14      	ite	ne
 8014ba2:	2308      	movne	r3, #8
 8014ba4:	2302      	moveq	r3, #2
 8014ba6:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8014baa:	f7ff fe87 	bl	80148bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014bae:	465a      	mov	r2, fp
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	4651      	mov	r1, sl
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	e9cd 8500 	strd	r8, r5, [sp]
 8014bba:	f7ff ff59 	bl	8014a70 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014bbe:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014bc2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8014bc6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014bca:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014bce:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8014bd2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014bd6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8014bda:	9d02      	ldr	r5, [sp, #8]
 8014bdc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8014be0:	6823      	ldr	r3, [r4, #0]
 8014be2:	9006      	str	r0, [sp, #24]
 8014be4:	4620      	mov	r0, r4
 8014be6:	f8ad 6020 	strh.w	r6, [sp, #32]
 8014bea:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8014bee:	f8cd 9014 	str.w	r9, [sp, #20]
 8014bf2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8014bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bf8:	4798      	blx	r3
 8014bfa:	4228      	tst	r0, r5
 8014bfc:	d106      	bne.n	8014c0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8014bfe:	4b07      	ldr	r3, [pc, #28]	; (8014c1c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8014c00:	f240 2137 	movw	r1, #567	; 0x237
 8014c04:	4a06      	ldr	r2, [pc, #24]	; (8014c20 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8014c06:	4807      	ldr	r0, [pc, #28]	; (8014c24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8014c08:	f010 ffb4 	bl	8025b74 <__assert_func>
 8014c0c:	6860      	ldr	r0, [r4, #4]
 8014c0e:	a902      	add	r1, sp, #8
 8014c10:	6803      	ldr	r3, [r0, #0]
 8014c12:	685b      	ldr	r3, [r3, #4]
 8014c14:	4798      	blx	r3
 8014c16:	b00b      	add	sp, #44	; 0x2c
 8014c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c1c:	08028584 	.word	0x08028584
 8014c20:	08028b82 	.word	0x08028b82
 8014c24:	080286fe 	.word	0x080286fe

08014c28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014c2c:	461f      	mov	r7, r3
 8014c2e:	4b0b      	ldr	r3, [pc, #44]	; (8014c5c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014c30:	460d      	mov	r5, r1
 8014c32:	4616      	mov	r6, r2
 8014c34:	f8b3 8000 	ldrh.w	r8, [r3]
 8014c38:	4604      	mov	r4, r0
 8014c3a:	f7ee ffe1 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 8014c3e:	6803      	ldr	r3, [r0, #0]
 8014c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c42:	4798      	blx	r3
 8014c44:	463b      	mov	r3, r7
 8014c46:	4632      	mov	r2, r6
 8014c48:	4629      	mov	r1, r5
 8014c4a:	e9cd 8000 	strd	r8, r0, [sp]
 8014c4e:	4620      	mov	r0, r4
 8014c50:	f7ff ff0e 	bl	8014a70 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014c54:	b002      	add	sp, #8
 8014c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c5a:	bf00      	nop
 8014c5c:	2400aee6 	.word	0x2400aee6

08014c60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c64:	4698      	mov	r8, r3
 8014c66:	b088      	sub	sp, #32
 8014c68:	2300      	movs	r3, #0
 8014c6a:	4617      	mov	r7, r2
 8014c6c:	4604      	mov	r4, r0
 8014c6e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8014c72:	9303      	str	r3, [sp, #12]
 8014c74:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014c78:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014c7c:	f8ad 6014 	strh.w	r6, [sp, #20]
 8014c80:	f8ad 5016 	strh.w	r5, [sp, #22]
 8014c84:	e9cd 3100 	strd	r3, r1, [sp]
 8014c88:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014c8c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014c90:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8014c94:	f88d 301c 	strb.w	r3, [sp, #28]
 8014c98:	f7ff fe10 	bl	80148bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014c9c:	4642      	mov	r2, r8
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	4639      	mov	r1, r7
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	f7ff ffc0 	bl	8014c28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014ca8:	4b18      	ldr	r3, [pc, #96]	; (8014d0c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8014caa:	9004      	str	r0, [sp, #16]
 8014cac:	881b      	ldrh	r3, [r3, #0]
 8014cae:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014cb2:	f7ee ffa5 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 8014cb6:	6803      	ldr	r3, [r0, #0]
 8014cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cba:	4798      	blx	r3
 8014cbc:	f88d 001e 	strb.w	r0, [sp, #30]
 8014cc0:	f88d 001d 	strb.w	r0, [sp, #29]
 8014cc4:	b106      	cbz	r6, 8014cc8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8014cc6:	b935      	cbnz	r5, 8014cd6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8014cc8:	4b11      	ldr	r3, [pc, #68]	; (8014d10 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8014cca:	f240 11f1 	movw	r1, #497	; 0x1f1
 8014cce:	4a11      	ldr	r2, [pc, #68]	; (8014d14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8014cd0:	4811      	ldr	r0, [pc, #68]	; (8014d18 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8014cd2:	f010 ff4f 	bl	8025b74 <__assert_func>
 8014cd6:	6823      	ldr	r3, [r4, #0]
 8014cd8:	4620      	mov	r0, r4
 8014cda:	9d00      	ldr	r5, [sp, #0]
 8014cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cde:	4798      	blx	r3
 8014ce0:	4228      	tst	r0, r5
 8014ce2:	d104      	bne.n	8014cee <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8014ce4:	4b0d      	ldr	r3, [pc, #52]	; (8014d1c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 8014ce6:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8014cea:	4a0a      	ldr	r2, [pc, #40]	; (8014d14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8014cec:	e7f0      	b.n	8014cd0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8014cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cf0:	4669      	mov	r1, sp
 8014cf2:	6860      	ldr	r0, [r4, #4]
 8014cf4:	9303      	str	r3, [sp, #12]
 8014cf6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014cfa:	f88d 301f 	strb.w	r3, [sp, #31]
 8014cfe:	6803      	ldr	r3, [r0, #0]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	4798      	blx	r3
 8014d04:	b008      	add	sp, #32
 8014d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d0a:	bf00      	nop
 8014d0c:	2400aee6 	.word	0x2400aee6
 8014d10:	0802854c 	.word	0x0802854c
 8014d14:	08028957 	.word	0x08028957
 8014d18:	080286fe 	.word	0x080286fe
 8014d1c:	08028584 	.word	0x08028584

08014d20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d22:	b08b      	sub	sp, #44	; 0x2c
 8014d24:	4604      	mov	r4, r0
 8014d26:	466b      	mov	r3, sp
 8014d28:	e883 0006 	stmia.w	r3, {r1, r2}
 8014d2c:	4b20      	ldr	r3, [pc, #128]	; (8014db0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8014d2e:	781b      	ldrb	r3, [r3, #0]
 8014d30:	b933      	cbnz	r3, 8014d40 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8014d32:	4b20      	ldr	r3, [pc, #128]	; (8014db4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8014d34:	f44f 7112 	mov.w	r1, #584	; 0x248
 8014d38:	4a1f      	ldr	r2, [pc, #124]	; (8014db8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8014d3a:	4820      	ldr	r0, [pc, #128]	; (8014dbc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8014d3c:	f010 ff1a 	bl	8025b74 <__assert_func>
 8014d40:	2301      	movs	r3, #1
 8014d42:	2500      	movs	r5, #0
 8014d44:	f8bd 6000 	ldrh.w	r6, [sp]
 8014d48:	9302      	str	r3, [sp, #8]
 8014d4a:	6803      	ldr	r3, [r0, #0]
 8014d4c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8014d50:	9505      	str	r5, [sp, #20]
 8014d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d54:	4798      	blx	r3
 8014d56:	463a      	mov	r2, r7
 8014d58:	4631      	mov	r1, r6
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	f7ff ff63 	bl	8014c28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014d62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014d64:	9003      	str	r0, [sp, #12]
 8014d66:	9306      	str	r3, [sp, #24]
 8014d68:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014d6c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014d70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014d74:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014d78:	4b11      	ldr	r3, [pc, #68]	; (8014dc0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8014d7a:	881b      	ldrh	r3, [r3, #0]
 8014d7c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014d80:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014d84:	f7ee ff3c 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 8014d88:	6803      	ldr	r3, [r0, #0]
 8014d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d8c:	4798      	blx	r3
 8014d8e:	23ff      	movs	r3, #255	; 0xff
 8014d90:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8014d94:	a902      	add	r1, sp, #8
 8014d96:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8014d9a:	6860      	ldr	r0, [r4, #4]
 8014d9c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014da0:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 8014da4:	6803      	ldr	r3, [r0, #0]
 8014da6:	685b      	ldr	r3, [r3, #4]
 8014da8:	4798      	blx	r3
 8014daa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014dac:	b00b      	add	sp, #44	; 0x2c
 8014dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014db0:	2400aeeb 	.word	0x2400aeeb
 8014db4:	0802864b 	.word	0x0802864b
 8014db8:	08028a01 	.word	0x08028a01
 8014dbc:	080286fe 	.word	0x080286fe
 8014dc0:	2400aee6 	.word	0x2400aee6

08014dc4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dc8:	b08a      	sub	sp, #40	; 0x28
 8014dca:	2600      	movs	r6, #0
 8014dcc:	4604      	mov	r4, r0
 8014dce:	466d      	mov	r5, sp
 8014dd0:	9605      	str	r6, [sp, #20]
 8014dd2:	e885 0006 	stmia.w	r5, {r1, r2}
 8014dd6:	461d      	mov	r5, r3
 8014dd8:	2301      	movs	r3, #1
 8014dda:	f8bd 7000 	ldrh.w	r7, [sp]
 8014dde:	9302      	str	r3, [sp, #8]
 8014de0:	6803      	ldr	r3, [r0, #0]
 8014de2:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8014de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014de8:	4798      	blx	r3
 8014dea:	4642      	mov	r2, r8
 8014dec:	4639      	mov	r1, r7
 8014dee:	4603      	mov	r3, r0
 8014df0:	4620      	mov	r0, r4
 8014df2:	f7ff ff19 	bl	8014c28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014df6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014dfa:	9003      	str	r0, [sp, #12]
 8014dfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014e00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014e04:	9506      	str	r5, [sp, #24]
 8014e06:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014e0a:	4b0f      	ldr	r3, [pc, #60]	; (8014e48 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 8014e0c:	881b      	ldrh	r3, [r3, #0]
 8014e0e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014e12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e14:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014e18:	f7ee fef2 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 8014e1c:	6803      	ldr	r3, [r0, #0]
 8014e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e20:	4798      	blx	r3
 8014e22:	23ff      	movs	r3, #255	; 0xff
 8014e24:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8014e28:	a902      	add	r1, sp, #8
 8014e2a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8014e2e:	6860      	ldr	r0, [r4, #4]
 8014e30:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014e34:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8014e38:	6803      	ldr	r3, [r0, #0]
 8014e3a:	685b      	ldr	r3, [r3, #4]
 8014e3c:	4798      	blx	r3
 8014e3e:	4628      	mov	r0, r5
 8014e40:	b00a      	add	sp, #40	; 0x28
 8014e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e46:	bf00      	nop
 8014e48:	2400aee6 	.word	0x2400aee6

08014e4c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014e4c:	b570      	push	{r4, r5, r6, lr}
 8014e4e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8014e52:	4604      	mov	r4, r0
 8014e54:	b19b      	cbz	r3, 8014e7e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014e56:	2002      	movs	r0, #2
 8014e58:	f7ec fc9e 	bl	8001798 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	4620      	mov	r0, r4
 8014e60:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014e64:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8014e68:	6823      	ldr	r3, [r4, #0]
 8014e6a:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8014e6e:	f7ff fd25 	bl	80148bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014e72:	4601      	mov	r1, r0
 8014e74:	4620      	mov	r0, r4
 8014e76:	462b      	mov	r3, r5
 8014e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e7c:	4718      	bx	r3
 8014e7e:	bd70      	pop	{r4, r5, r6, pc}

08014e80 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8014e80:	b538      	push	{r3, r4, r5, lr}
 8014e82:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8014e86:	4604      	mov	r4, r0
 8014e88:	460d      	mov	r5, r1
 8014e8a:	428a      	cmp	r2, r1
 8014e8c:	d008      	beq.n	8014ea0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8014e8e:	2a01      	cmp	r2, #1
 8014e90:	6803      	ldr	r3, [r0, #0]
 8014e92:	d106      	bne.n	8014ea2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8014e94:	b929      	cbnz	r1, 8014ea2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8014e96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8014e9a:	4798      	blx	r3
 8014e9c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8014ea0:	bd38      	pop	{r3, r4, r5, pc}
 8014ea2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	e7f7      	b.n	8014e9a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08014eac <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014eac:	4b0d      	ldr	r3, [pc, #52]	; (8014ee4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014eae:	b510      	push	{r4, lr}
 8014eb0:	781b      	ldrb	r3, [r3, #0]
 8014eb2:	4604      	mov	r4, r0
 8014eb4:	b95b      	cbnz	r3, 8014ece <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014eb6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8014eba:	2b02      	cmp	r3, #2
 8014ebc:	d007      	beq.n	8014ece <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014ebe:	6840      	ldr	r0, [r0, #4]
 8014ec0:	f000 f936 	bl	8015130 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014ec4:	b118      	cbz	r0, 8014ece <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014ec6:	6862      	ldr	r2, [r4, #4]
 8014ec8:	7a53      	ldrb	r3, [r2, #9]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d0fc      	beq.n	8014ec8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014ece:	f7ec ff21 	bl	8001d14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	2100      	movs	r1, #0
 8014ed6:	f7ff ffd3 	bl	8014e80 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014eda:	4620      	mov	r0, r4
 8014edc:	f7ff fcee 	bl	80148bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ee0:	bd10      	pop	{r4, pc}
 8014ee2:	bf00      	nop
 8014ee4:	2400aeea 	.word	0x2400aeea

08014ee8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8014ee8:	4770      	bx	lr

08014eea <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8014eea:	2000      	movs	r0, #0
 8014eec:	4770      	bx	lr

08014eee <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8014eee:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014ef2:	1a13      	subs	r3, r2, r0
 8014ef4:	4258      	negs	r0, r3
 8014ef6:	4158      	adcs	r0, r3
 8014ef8:	4770      	bx	lr

08014efa <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8014efa:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8014efe:	1a9b      	subs	r3, r3, r2
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	bfdc      	itt	le
 8014f04:	6882      	ldrle	r2, [r0, #8]
 8014f06:	189b      	addle	r3, r3, r2
 8014f08:	2b01      	cmp	r3, #1
 8014f0a:	bfcc      	ite	gt
 8014f0c:	2000      	movgt	r0, #0
 8014f0e:	2001      	movle	r0, #1
 8014f10:	4770      	bx	lr

08014f12 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8014f12:	6902      	ldr	r2, [r0, #16]
 8014f14:	6840      	ldr	r0, [r0, #4]
 8014f16:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8014f1a:	4770      	bx	lr

08014f1c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8014f1c:	6803      	ldr	r3, [r0, #0]
 8014f1e:	691b      	ldr	r3, [r3, #16]
 8014f20:	4718      	bx	r3

08014f22 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014f22:	4770      	bx	lr

08014f24 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8014f24:	4770      	bx	lr
	...

08014f28 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8014f28:	2301      	movs	r3, #1
 8014f2a:	b570      	push	{r4, r5, r6, lr}
 8014f2c:	7203      	strb	r3, [r0, #8]
 8014f2e:	4604      	mov	r4, r0
 8014f30:	6840      	ldr	r0, [r0, #4]
 8014f32:	6803      	ldr	r3, [r0, #0]
 8014f34:	699b      	ldr	r3, [r3, #24]
 8014f36:	4798      	blx	r3
 8014f38:	6803      	ldr	r3, [r0, #0]
 8014f3a:	4605      	mov	r5, r0
 8014f3c:	2b40      	cmp	r3, #64	; 0x40
 8014f3e:	d039      	beq.n	8014fb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8014f40:	d815      	bhi.n	8014f6e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8014f42:	2b04      	cmp	r3, #4
 8014f44:	d022      	beq.n	8014f8c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014f46:	d808      	bhi.n	8014f5a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014f48:	2b01      	cmp	r3, #1
 8014f4a:	d033      	beq.n	8014fb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8014f4c:	2b02      	cmp	r3, #2
 8014f4e:	d108      	bne.n	8014f62 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8014f50:	6823      	ldr	r3, [r4, #0]
 8014f52:	4620      	mov	r0, r4
 8014f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f56:	4798      	blx	r3
 8014f58:	e025      	b.n	8014fa6 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8014f5a:	2b08      	cmp	r3, #8
 8014f5c:	d01e      	beq.n	8014f9c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8014f5e:	2b20      	cmp	r3, #32
 8014f60:	d028      	beq.n	8014fb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8014f62:	4b17      	ldr	r3, [pc, #92]	; (8014fc0 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8014f64:	218b      	movs	r1, #139	; 0x8b
 8014f66:	4a17      	ldr	r2, [pc, #92]	; (8014fc4 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8014f68:	4817      	ldr	r0, [pc, #92]	; (8014fc8 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8014f6a:	f010 fe03 	bl	8025b74 <__assert_func>
 8014f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f72:	d01f      	beq.n	8014fb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8014f74:	d804      	bhi.n	8014f80 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8014f76:	2b80      	cmp	r3, #128	; 0x80
 8014f78:	d01c      	beq.n	8014fb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8014f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f7e:	e7ef      	b.n	8014f60 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8014f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014f84:	d016      	beq.n	8014fb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8014f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014f8a:	e7e0      	b.n	8014f4e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8014f8c:	6823      	ldr	r3, [r4, #0]
 8014f8e:	7f01      	ldrb	r1, [r0, #28]
 8014f90:	4620      	mov	r0, r4
 8014f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f94:	4798      	blx	r3
 8014f96:	6823      	ldr	r3, [r4, #0]
 8014f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f9a:	e006      	b.n	8014faa <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8014f9c:	6823      	ldr	r3, [r4, #0]
 8014f9e:	7f01      	ldrb	r1, [r0, #28]
 8014fa0:	4620      	mov	r0, r4
 8014fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fa4:	4798      	blx	r3
 8014fa6:	6823      	ldr	r3, [r4, #0]
 8014fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014faa:	4629      	mov	r1, r5
 8014fac:	4620      	mov	r0, r4
 8014fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fb2:	4718      	bx	r3
 8014fb4:	6823      	ldr	r3, [r4, #0]
 8014fb6:	4620      	mov	r0, r4
 8014fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014fba:	4798      	blx	r3
 8014fbc:	e7eb      	b.n	8014f96 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8014fbe:	bf00      	nop
 8014fc0:	08028c66 	.word	0x08028c66
 8014fc4:	08028d78 	.word	0x08028d78
 8014fc8:	08028c8b 	.word	0x08028c8b

08014fcc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8014fcc:	b570      	push	{r4, r5, r6, lr}
 8014fce:	4604      	mov	r4, r0
 8014fd0:	460e      	mov	r6, r1
 8014fd2:	6860      	ldr	r0, [r4, #4]
 8014fd4:	6803      	ldr	r3, [r0, #0]
 8014fd6:	685b      	ldr	r3, [r3, #4]
 8014fd8:	4798      	blx	r3
 8014fda:	2800      	cmp	r0, #0
 8014fdc:	d1f9      	bne.n	8014fd2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8014fde:	4d0d      	ldr	r5, [pc, #52]	; (8015014 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8014fe0:	6828      	ldr	r0, [r5, #0]
 8014fe2:	6803      	ldr	r3, [r0, #0]
 8014fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014fe6:	4798      	blx	r3
 8014fe8:	f7ec feae 	bl	8001d48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8014fec:	6828      	ldr	r0, [r5, #0]
 8014fee:	2101      	movs	r1, #1
 8014ff0:	f7ff ff46 	bl	8014e80 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014ff4:	6860      	ldr	r0, [r4, #4]
 8014ff6:	4631      	mov	r1, r6
 8014ff8:	6803      	ldr	r3, [r0, #0]
 8014ffa:	689b      	ldr	r3, [r3, #8]
 8014ffc:	4798      	blx	r3
 8014ffe:	6823      	ldr	r3, [r4, #0]
 8015000:	4620      	mov	r0, r4
 8015002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015004:	4798      	blx	r3
 8015006:	6828      	ldr	r0, [r5, #0]
 8015008:	6803      	ldr	r3, [r0, #0]
 801500a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801500e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015010:	4718      	bx	r3
 8015012:	bf00      	nop
 8015014:	2400aeec 	.word	0x2400aeec

08015018 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015018:	b508      	push	{r3, lr}
 801501a:	f7ec fe7b 	bl	8001d14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801501e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015022:	f7ec be85 	b.w	8001d30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015026 <_ZN8touchgfx13DMA_Interface5startEv>:
 8015026:	b510      	push	{r4, lr}
 8015028:	4604      	mov	r4, r0
 801502a:	6840      	ldr	r0, [r0, #4]
 801502c:	6803      	ldr	r3, [r0, #0]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	4798      	blx	r3
 8015032:	b948      	cbnz	r0, 8015048 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015034:	7a63      	ldrb	r3, [r4, #9]
 8015036:	b13b      	cbz	r3, 8015048 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015038:	7a23      	ldrb	r3, [r4, #8]
 801503a:	b92b      	cbnz	r3, 8015048 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801503c:	6823      	ldr	r3, [r4, #0]
 801503e:	4620      	mov	r0, r4
 8015040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015046:	4718      	bx	r3
 8015048:	bd10      	pop	{r4, pc}
	...

0801504c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801504c:	b570      	push	{r4, r5, r6, lr}
 801504e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015052:	4606      	mov	r6, r0
 8015054:	1a9b      	subs	r3, r3, r2
 8015056:	2b00      	cmp	r3, #0
 8015058:	bfdc      	itt	le
 801505a:	6880      	ldrle	r0, [r0, #8]
 801505c:	181b      	addle	r3, r3, r0
 801505e:	2b01      	cmp	r3, #1
 8015060:	dd13      	ble.n	801508a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 8015062:	6874      	ldr	r4, [r6, #4]
 8015064:	460d      	mov	r5, r1
 8015066:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 801506a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801506c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801506e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015072:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015076:	68f3      	ldr	r3, [r6, #12]
 8015078:	68b2      	ldr	r2, [r6, #8]
 801507a:	f3bf 8f5b 	dmb	ish
 801507e:	3301      	adds	r3, #1
 8015080:	429a      	cmp	r2, r3
 8015082:	bfd8      	it	le
 8015084:	1a9b      	suble	r3, r3, r2
 8015086:	60f3      	str	r3, [r6, #12]
 8015088:	bd70      	pop	{r4, r5, r6, pc}
 801508a:	4b03      	ldr	r3, [pc, #12]	; (8015098 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 801508c:	2139      	movs	r1, #57	; 0x39
 801508e:	4a03      	ldr	r2, [pc, #12]	; (801509c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 8015090:	4803      	ldr	r0, [pc, #12]	; (80150a0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8015092:	f010 fd6f 	bl	8025b74 <__assert_func>
 8015096:	bf00      	nop
 8015098:	08028cb1 	.word	0x08028cb1
 801509c:	08028da8 	.word	0x08028da8
 80150a0:	08028c8b 	.word	0x08028c8b

080150a4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80150a4:	b510      	push	{r4, lr}
 80150a6:	6803      	ldr	r3, [r0, #0]
 80150a8:	4604      	mov	r4, r0
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	4798      	blx	r3
 80150ae:	b128      	cbz	r0, 80150bc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80150b0:	4b07      	ldr	r3, [pc, #28]	; (80150d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80150b2:	213f      	movs	r1, #63	; 0x3f
 80150b4:	4a07      	ldr	r2, [pc, #28]	; (80150d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80150b6:	4808      	ldr	r0, [pc, #32]	; (80150d8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80150b8:	f010 fd5c 	bl	8025b74 <__assert_func>
 80150bc:	6923      	ldr	r3, [r4, #16]
 80150be:	68a2      	ldr	r2, [r4, #8]
 80150c0:	f3bf 8f5b 	dmb	ish
 80150c4:	3301      	adds	r3, #1
 80150c6:	429a      	cmp	r2, r3
 80150c8:	bfd8      	it	le
 80150ca:	1a9b      	suble	r3, r3, r2
 80150cc:	6123      	str	r3, [r4, #16]
 80150ce:	bd10      	pop	{r4, pc}
 80150d0:	08028cd4 	.word	0x08028cd4
 80150d4:	08028df6 	.word	0x08028df6
 80150d8:	08028c8b 	.word	0x08028c8b

080150dc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80150dc:	b570      	push	{r4, r5, r6, lr}
 80150de:	4604      	mov	r4, r0
 80150e0:	6840      	ldr	r0, [r0, #4]
 80150e2:	6803      	ldr	r3, [r0, #0]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	4798      	blx	r3
 80150e8:	4605      	mov	r5, r0
 80150ea:	b930      	cbnz	r0, 80150fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80150ec:	7a23      	ldrb	r3, [r4, #8]
 80150ee:	b123      	cbz	r3, 80150fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80150f0:	6860      	ldr	r0, [r4, #4]
 80150f2:	6803      	ldr	r3, [r0, #0]
 80150f4:	695b      	ldr	r3, [r3, #20]
 80150f6:	4798      	blx	r3
 80150f8:	7225      	strb	r5, [r4, #8]
 80150fa:	6860      	ldr	r0, [r4, #4]
 80150fc:	6803      	ldr	r3, [r0, #0]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	4798      	blx	r3
 8015102:	b928      	cbnz	r0, 8015110 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015104:	6823      	ldr	r3, [r4, #0]
 8015106:	4620      	mov	r0, r4
 8015108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801510a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801510e:	4718      	bx	r3
 8015110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015114:	f7ec be24 	b.w	8001d60 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015118 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015118:	b510      	push	{r4, lr}
 801511a:	6082      	str	r2, [r0, #8]
 801511c:	2200      	movs	r2, #0
 801511e:	4c03      	ldr	r4, [pc, #12]	; (801512c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015120:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015124:	e9c0 4100 	strd	r4, r1, [r0]
 8015128:	bd10      	pop	{r4, pc}
 801512a:	bf00      	nop
 801512c:	08028d5c 	.word	0x08028d5c

08015130 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015130:	6840      	ldr	r0, [r0, #4]
 8015132:	6803      	ldr	r3, [r0, #0]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	4718      	bx	r3

08015138 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8015138:	2200      	movs	r2, #0
 801513a:	8002      	strh	r2, [r0, #0]
 801513c:	8042      	strh	r2, [r0, #2]
 801513e:	8082      	strh	r2, [r0, #4]
 8015140:	80c2      	strh	r2, [r0, #6]
 8015142:	4770      	bx	lr

08015144 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8015144:	b570      	push	{r4, r5, r6, lr}
 8015146:	6803      	ldr	r3, [r0, #0]
 8015148:	4604      	mov	r4, r0
 801514a:	4615      	mov	r5, r2
 801514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801514e:	4798      	blx	r3
 8015150:	6823      	ldr	r3, [r4, #0]
 8015152:	4629      	mov	r1, r5
 8015154:	4620      	mov	r0, r4
 8015156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801515c:	4718      	bx	r3
	...

08015160 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015160:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015166:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015168:	4299      	cmp	r1, r3
 801516a:	d029      	beq.n	80151c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801516c:	4b15      	ldr	r3, [pc, #84]	; (80151c4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	b92b      	cbnz	r3, 801517e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8015172:	4b15      	ldr	r3, [pc, #84]	; (80151c8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8015174:	21ae      	movs	r1, #174	; 0xae
 8015176:	4a15      	ldr	r2, [pc, #84]	; (80151cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8015178:	4815      	ldr	r0, [pc, #84]	; (80151d0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801517a:	f010 fcfb 	bl	8025b74 <__assert_func>
 801517e:	4a15      	ldr	r2, [pc, #84]	; (80151d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8015180:	8812      	ldrh	r2, [r2, #0]
 8015182:	428a      	cmp	r2, r1
 8015184:	d803      	bhi.n	801518e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8015186:	4b14      	ldr	r3, [pc, #80]	; (80151d8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8015188:	21af      	movs	r1, #175	; 0xaf
 801518a:	4a10      	ldr	r2, [pc, #64]	; (80151cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801518c:	e7f4      	b.n	8015178 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801518e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8015192:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8015196:	4b11      	ldr	r3, [pc, #68]	; (80151dc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8015198:	7854      	ldrb	r4, [r2, #1]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80151a0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80151a4:	682b      	ldr	r3, [r5, #0]
 80151a6:	69de      	ldr	r6, [r3, #28]
 80151a8:	4b0d      	ldr	r3, [pc, #52]	; (80151e0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80151aa:	6818      	ldr	r0, [r3, #0]
 80151ac:	f7f1 fcda 	bl	8006b64 <_ZNK8touchgfx5Texts7getTextEt>
 80151b0:	2300      	movs	r3, #0
 80151b2:	4602      	mov	r2, r0
 80151b4:	4621      	mov	r1, r4
 80151b6:	9300      	str	r3, [sp, #0]
 80151b8:	4628      	mov	r0, r5
 80151ba:	47b0      	blx	r6
 80151bc:	b002      	add	sp, #8
 80151be:	bd70      	pop	{r4, r5, r6, pc}
 80151c0:	2000      	movs	r0, #0
 80151c2:	e7fb      	b.n	80151bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 80151c4:	2400af3c 	.word	0x2400af3c
 80151c8:	08028e26 	.word	0x08028e26
 80151cc:	08028f5c 	.word	0x08028f5c
 80151d0:	08028e68 	.word	0x08028e68
 80151d4:	2400af40 	.word	0x2400af40
 80151d8:	08028e91 	.word	0x08028e91
 80151dc:	2400af44 	.word	0x2400af44
 80151e0:	2400af48 	.word	0x2400af48

080151e4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80151e4:	b570      	push	{r4, r5, r6, lr}
 80151e6:	6803      	ldr	r3, [r0, #0]
 80151e8:	4604      	mov	r4, r0
 80151ea:	b28d      	uxth	r5, r1
 80151ec:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80151ee:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80151f0:	4b10      	ldr	r3, [pc, #64]	; (8015234 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	b92b      	cbnz	r3, 8015202 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 80151f6:	4b10      	ldr	r3, [pc, #64]	; (8015238 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80151f8:	21ae      	movs	r1, #174	; 0xae
 80151fa:	4a10      	ldr	r2, [pc, #64]	; (801523c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80151fc:	4810      	ldr	r0, [pc, #64]	; (8015240 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80151fe:	f010 fcb9 	bl	8025b74 <__assert_func>
 8015202:	4910      	ldr	r1, [pc, #64]	; (8015244 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8015204:	8809      	ldrh	r1, [r1, #0]
 8015206:	4291      	cmp	r1, r2
 8015208:	d803      	bhi.n	8015212 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801520a:	4b0f      	ldr	r3, [pc, #60]	; (8015248 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801520c:	21af      	movs	r1, #175	; 0xaf
 801520e:	4a0b      	ldr	r2, [pc, #44]	; (801523c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8015210:	e7f4      	b.n	80151fc <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8015212:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8015216:	4b0d      	ldr	r3, [pc, #52]	; (801524c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801521e:	6803      	ldr	r3, [r0, #0]
 8015220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015222:	4798      	blx	r3
 8015224:	1a29      	subs	r1, r5, r0
 8015226:	4633      	mov	r3, r6
 8015228:	4620      	mov	r0, r4
 801522a:	b209      	sxth	r1, r1
 801522c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015230:	4718      	bx	r3
 8015232:	bf00      	nop
 8015234:	2400af3c 	.word	0x2400af3c
 8015238:	08028e26 	.word	0x08028e26
 801523c:	08028f5c 	.word	0x08028f5c
 8015240:	08028e68 	.word	0x08028e68
 8015244:	2400af40 	.word	0x2400af40
 8015248:	08028e91 	.word	0x08028e91
 801524c:	2400af44 	.word	0x2400af44

08015250 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015258:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801525a:	b08c      	sub	sp, #48	; 0x30
 801525c:	4604      	mov	r4, r0
 801525e:	4293      	cmp	r3, r2
 8015260:	4688      	mov	r8, r1
 8015262:	d05f      	beq.n	8015324 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8015264:	4e31      	ldr	r6, [pc, #196]	; (801532c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8015266:	6832      	ldr	r2, [r6, #0]
 8015268:	b92a      	cbnz	r2, 8015276 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801526a:	4b31      	ldr	r3, [pc, #196]	; (8015330 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801526c:	21ae      	movs	r1, #174	; 0xae
 801526e:	4a31      	ldr	r2, [pc, #196]	; (8015334 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8015270:	4831      	ldr	r0, [pc, #196]	; (8015338 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8015272:	f010 fc7f 	bl	8025b74 <__assert_func>
 8015276:	4d31      	ldr	r5, [pc, #196]	; (801533c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8015278:	8829      	ldrh	r1, [r5, #0]
 801527a:	4299      	cmp	r1, r3
 801527c:	d803      	bhi.n	8015286 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801527e:	4b30      	ldr	r3, [pc, #192]	; (8015340 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8015280:	21af      	movs	r1, #175	; 0xaf
 8015282:	4a2c      	ldr	r2, [pc, #176]	; (8015334 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8015284:	e7f4      	b.n	8015270 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8015286:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801528a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801528e:	4b2d      	ldr	r3, [pc, #180]	; (8015344 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015296:	2a00      	cmp	r2, #0
 8015298:	d044      	beq.n	8015324 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801529a:	784b      	ldrb	r3, [r1, #1]
 801529c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80152a0:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80152a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80152a8:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80152ac:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80152b0:	4b25      	ldr	r3, [pc, #148]	; (8015348 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 80152b2:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 80152bc:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80152c0:	9207      	str	r2, [sp, #28]
 80152c2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80152c4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80152c8:	f88d a020 	strb.w	sl, [sp, #32]
 80152cc:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80152d0:	9009      	str	r0, [sp, #36]	; 0x24
 80152d2:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80152d6:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80152da:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80152de:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80152e2:	b10a      	cbz	r2, 80152e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80152e4:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80152e6:	b907      	cbnz	r7, 80152ea <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80152e8:	689f      	ldr	r7, [r3, #8]
 80152ea:	f10d 0914 	add.w	r9, sp, #20
 80152ee:	4621      	mov	r1, r4
 80152f0:	4648      	mov	r0, r9
 80152f2:	f002 ff7d 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80152f6:	6833      	ldr	r3, [r6, #0]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d0b6      	beq.n	801526a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80152fc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80152fe:	882b      	ldrh	r3, [r5, #0]
 8015300:	428b      	cmp	r3, r1
 8015302:	d9bc      	bls.n	801527e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8015304:	4b11      	ldr	r3, [pc, #68]	; (801534c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8015306:	6818      	ldr	r0, [r3, #0]
 8015308:	f7f1 fc2c 	bl	8006b64 <_ZNK8touchgfx5Texts7getTextEt>
 801530c:	2300      	movs	r3, #0
 801530e:	9001      	str	r0, [sp, #4]
 8015310:	4638      	mov	r0, r7
 8015312:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015316:	ab07      	add	r3, sp, #28
 8015318:	9300      	str	r3, [sp, #0]
 801531a:	4643      	mov	r3, r8
 801531c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8015320:	f7f1 fbb1 	bl	8006a86 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015324:	b00c      	add	sp, #48	; 0x30
 8015326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801532a:	bf00      	nop
 801532c:	2400af3c 	.word	0x2400af3c
 8015330:	08028e26 	.word	0x08028e26
 8015334:	08028f5c 	.word	0x08028f5c
 8015338:	08028e68 	.word	0x08028e68
 801533c:	2400af40 	.word	0x2400af40
 8015340:	08028e91 	.word	0x08028e91
 8015344:	2400af44 	.word	0x2400af44
 8015348:	2400aeec 	.word	0x2400aeec
 801534c:	2400af48 	.word	0x2400af48

08015350 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015350:	b40e      	push	{r1, r2, r3}
 8015352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801535a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801535c:	b09c      	sub	sp, #112	; 0x70
 801535e:	4604      	mov	r4, r0
 8015360:	4293      	cmp	r3, r2
 8015362:	d06b      	beq.n	801543c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8015364:	aa26      	add	r2, sp, #152	; 0x98
 8015366:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8015450 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 801536a:	9202      	str	r2, [sp, #8]
 801536c:	f8da 2000 	ldr.w	r2, [sl]
 8015370:	b92a      	cbnz	r2, 801537e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8015372:	4b33      	ldr	r3, [pc, #204]	; (8015440 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8015374:	21ae      	movs	r1, #174	; 0xae
 8015376:	4a33      	ldr	r2, [pc, #204]	; (8015444 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8015378:	4833      	ldr	r0, [pc, #204]	; (8015448 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 801537a:	f010 fbfb 	bl	8025b74 <__assert_func>
 801537e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8015454 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 8015382:	f8b8 1000 	ldrh.w	r1, [r8]
 8015386:	4299      	cmp	r1, r3
 8015388:	d803      	bhi.n	8015392 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801538a:	4b30      	ldr	r3, [pc, #192]	; (801544c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 801538c:	21af      	movs	r1, #175	; 0xaf
 801538e:	4a2d      	ldr	r2, [pc, #180]	; (8015444 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8015390:	e7f2      	b.n	8015378 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8015392:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8015458 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 8015396:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801539a:	f8d9 3000 	ldr.w	r3, [r9]
 801539e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80153a2:	682b      	ldr	r3, [r5, #0]
 80153a4:	4628      	mov	r0, r5
 80153a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153a8:	4798      	blx	r3
 80153aa:	4606      	mov	r6, r0
 80153ac:	b207      	sxth	r7, r0
 80153ae:	a803      	add	r0, sp, #12
 80153b0:	f003 faed 	bl	801898e <_ZN8touchgfx12TextProviderC1Ev>
 80153b4:	682b      	ldr	r3, [r5, #0]
 80153b6:	4628      	mov	r0, r5
 80153b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80153ba:	4798      	blx	r3
 80153bc:	682b      	ldr	r3, [r5, #0]
 80153be:	4683      	mov	fp, r0
 80153c0:	4628      	mov	r0, r5
 80153c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80153c4:	4798      	blx	r3
 80153c6:	465b      	mov	r3, fp
 80153c8:	9000      	str	r0, [sp, #0]
 80153ca:	a803      	add	r0, sp, #12
 80153cc:	9925      	ldr	r1, [sp, #148]	; 0x94
 80153ce:	9a02      	ldr	r2, [sp, #8]
 80153d0:	f003 fb30 	bl	8018a34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80153d4:	f8da 3000 	ldr.w	r3, [sl]
 80153d8:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d0c8      	beq.n	8015372 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 80153e0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80153e2:	f8b8 0000 	ldrh.w	r0, [r8]
 80153e6:	4290      	cmp	r0, r2
 80153e8:	d9cf      	bls.n	801538a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 80153ea:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 80153ee:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80153f2:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80153f6:	786a      	ldrb	r2, [r5, #1]
 80153f8:	8925      	ldrh	r5, [r4, #8]
 80153fa:	f8d9 3000 	ldr.w	r3, [r9]
 80153fe:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015402:	eba5 050c 	sub.w	r5, r5, ip
 8015406:	b22d      	sxth	r5, r5
 8015408:	9500      	str	r5, [sp, #0]
 801540a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801540e:	a803      	add	r0, sp, #12
 8015410:	f001 fa2d 	bl	801686e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8015414:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8015418:	b203      	sxth	r3, r0
 801541a:	18b9      	adds	r1, r7, r2
 801541c:	2900      	cmp	r1, #0
 801541e:	dd0b      	ble.n	8015438 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8015420:	3b01      	subs	r3, #1
 8015422:	fb13 f302 	smulbb	r3, r3, r2
 8015426:	fb16 3300 	smlabb	r3, r6, r0, r3
 801542a:	b21f      	sxth	r7, r3
 801542c:	4638      	mov	r0, r7
 801542e:	b01c      	add	sp, #112	; 0x70
 8015430:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015434:	b003      	add	sp, #12
 8015436:	4770      	bx	lr
 8015438:	2b00      	cmp	r3, #0
 801543a:	dcf7      	bgt.n	801542c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 801543c:	2700      	movs	r7, #0
 801543e:	e7f5      	b.n	801542c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8015440:	08028e26 	.word	0x08028e26
 8015444:	08028f5c 	.word	0x08028f5c
 8015448:	08028e68 	.word	0x08028e68
 801544c:	08028e91 	.word	0x08028e91
 8015450:	2400af3c 	.word	0x2400af3c
 8015454:	2400af40 	.word	0x2400af40
 8015458:	2400af44 	.word	0x2400af44

0801545c <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801545c:	b570      	push	{r4, r5, r6, lr}
 801545e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015462:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015464:	4604      	mov	r4, r0
 8015466:	4299      	cmp	r1, r3
 8015468:	d01e      	beq.n	80154a8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801546a:	6803      	ldr	r3, [r0, #0]
 801546c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801546e:	4b0f      	ldr	r3, [pc, #60]	; (80154ac <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	b92b      	cbnz	r3, 8015480 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8015474:	4b0e      	ldr	r3, [pc, #56]	; (80154b0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8015476:	21ae      	movs	r1, #174	; 0xae
 8015478:	4a0e      	ldr	r2, [pc, #56]	; (80154b4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801547a:	480f      	ldr	r0, [pc, #60]	; (80154b8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801547c:	f010 fb7a 	bl	8025b74 <__assert_func>
 8015480:	4b0e      	ldr	r3, [pc, #56]	; (80154bc <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8015482:	881b      	ldrh	r3, [r3, #0]
 8015484:	428b      	cmp	r3, r1
 8015486:	d803      	bhi.n	8015490 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8015488:	4b0d      	ldr	r3, [pc, #52]	; (80154c0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801548a:	21af      	movs	r1, #175	; 0xaf
 801548c:	4a09      	ldr	r2, [pc, #36]	; (80154b4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801548e:	e7f4      	b.n	801547a <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8015490:	4b0c      	ldr	r3, [pc, #48]	; (80154c4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8015492:	6818      	ldr	r0, [r3, #0]
 8015494:	f7f1 fb66 	bl	8006b64 <_ZNK8touchgfx5Texts7getTextEt>
 8015498:	2300      	movs	r3, #0
 801549a:	4601      	mov	r1, r0
 801549c:	46ac      	mov	ip, r5
 801549e:	4620      	mov	r0, r4
 80154a0:	461a      	mov	r2, r3
 80154a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154a6:	4760      	bx	ip
 80154a8:	2000      	movs	r0, #0
 80154aa:	bd70      	pop	{r4, r5, r6, pc}
 80154ac:	2400af3c 	.word	0x2400af3c
 80154b0:	08028e26 	.word	0x08028e26
 80154b4:	08028f5c 	.word	0x08028f5c
 80154b8:	08028e68 	.word	0x08028e68
 80154bc:	2400af40 	.word	0x2400af40
 80154c0:	08028e91 	.word	0x08028e91
 80154c4:	2400af48 	.word	0x2400af48

080154c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80154c8:	b538      	push	{r3, r4, r5, lr}
 80154ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154ce:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80154d0:	4604      	mov	r4, r0
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d014      	beq.n	8015500 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80154d6:	6803      	ldr	r3, [r0, #0]
 80154d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80154da:	4798      	blx	r3
 80154dc:	6823      	ldr	r3, [r4, #0]
 80154de:	4605      	mov	r5, r0
 80154e0:	4620      	mov	r0, r4
 80154e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80154e4:	4798      	blx	r3
 80154e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80154ea:	b22d      	sxth	r5, r5
 80154ec:	4601      	mov	r1, r0
 80154ee:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80154f2:	bf06      	itte	eq
 80154f4:	4602      	moveq	r2, r0
 80154f6:	4629      	moveq	r1, r5
 80154f8:	462a      	movne	r2, r5
 80154fa:	4620      	mov	r0, r4
 80154fc:	f7ef f8be 	bl	800467c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015500:	bd38      	pop	{r3, r4, r5, pc}

08015502 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8015502:	888a      	ldrh	r2, [r1, #4]
 8015504:	8582      	strh	r2, [r0, #44]	; 0x2c
 8015506:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801550a:	b922      	cbnz	r2, 8015516 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801550c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015510:	b90b      	cbnz	r3, 8015516 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8015512:	f7ff bfd9 	b.w	80154c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8015516:	4770      	bx	lr

08015518 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8015518:	2300      	movs	r3, #0
 801551a:	8083      	strh	r3, [r0, #4]
 801551c:	80c3      	strh	r3, [r0, #6]
 801551e:	8003      	strh	r3, [r0, #0]
 8015520:	8043      	strh	r3, [r0, #2]
 8015522:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8015526:	2bff      	cmp	r3, #255	; 0xff
 8015528:	bf01      	itttt	eq
 801552a:	890b      	ldrheq	r3, [r1, #8]
 801552c:	8083      	strheq	r3, [r0, #4]
 801552e:	894b      	ldrheq	r3, [r1, #10]
 8015530:	80c3      	strheq	r3, [r0, #6]
 8015532:	4770      	bx	lr

08015534 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8015534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015536:	4604      	mov	r4, r0
 8015538:	466b      	mov	r3, sp
 801553a:	6808      	ldr	r0, [r1, #0]
 801553c:	6849      	ldr	r1, [r1, #4]
 801553e:	c303      	stmia	r3!, {r0, r1}
 8015540:	6823      	ldr	r3, [r4, #0]
 8015542:	4669      	mov	r1, sp
 8015544:	4620      	mov	r0, r4
 8015546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015548:	4798      	blx	r3
 801554a:	4b08      	ldr	r3, [pc, #32]	; (801556c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015552:	b10a      	cbz	r2, 8015558 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8015554:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015556:	b900      	cbnz	r0, 801555a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8015558:	6898      	ldr	r0, [r3, #8]
 801555a:	6803      	ldr	r3, [r0, #0]
 801555c:	4669      	mov	r1, sp
 801555e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8015560:	699d      	ldr	r5, [r3, #24]
 8015562:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015566:	47a8      	blx	r5
 8015568:	b003      	add	sp, #12
 801556a:	bd30      	pop	{r4, r5, pc}
 801556c:	2400aeec 	.word	0x2400aeec

08015570 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8015570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015576:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015578:	4606      	mov	r6, r0
 801557a:	4299      	cmp	r1, r3
 801557c:	d02a      	beq.n	80155d4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 801557e:	4b16      	ldr	r3, [pc, #88]	; (80155d8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	b92b      	cbnz	r3, 8015590 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8015584:	4b15      	ldr	r3, [pc, #84]	; (80155dc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8015586:	21ae      	movs	r1, #174	; 0xae
 8015588:	4a15      	ldr	r2, [pc, #84]	; (80155e0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801558a:	4816      	ldr	r0, [pc, #88]	; (80155e4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 801558c:	f010 faf2 	bl	8025b74 <__assert_func>
 8015590:	4a15      	ldr	r2, [pc, #84]	; (80155e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8015592:	8812      	ldrh	r2, [r2, #0]
 8015594:	428a      	cmp	r2, r1
 8015596:	d803      	bhi.n	80155a0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8015598:	4b14      	ldr	r3, [pc, #80]	; (80155ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801559a:	21af      	movs	r1, #175	; 0xaf
 801559c:	4a10      	ldr	r2, [pc, #64]	; (80155e0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801559e:	e7f4      	b.n	801558a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 80155a0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80155a4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80155a8:	4b11      	ldr	r3, [pc, #68]	; (80155f0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 80155aa:	7854      	ldrb	r4, [r2, #1]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80155b2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80155b6:	682b      	ldr	r3, [r5, #0]
 80155b8:	69df      	ldr	r7, [r3, #28]
 80155ba:	4b0e      	ldr	r3, [pc, #56]	; (80155f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 80155bc:	6818      	ldr	r0, [r3, #0]
 80155be:	f7f1 fad1 	bl	8006b64 <_ZNK8touchgfx5Texts7getTextEt>
 80155c2:	2300      	movs	r3, #0
 80155c4:	4602      	mov	r2, r0
 80155c6:	4621      	mov	r1, r4
 80155c8:	9300      	str	r3, [sp, #0]
 80155ca:	4628      	mov	r0, r5
 80155cc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80155ce:	47b8      	blx	r7
 80155d0:	b003      	add	sp, #12
 80155d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155d4:	2000      	movs	r0, #0
 80155d6:	e7fb      	b.n	80155d0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 80155d8:	2400af3c 	.word	0x2400af3c
 80155dc:	08028e26 	.word	0x08028e26
 80155e0:	08029068 	.word	0x08029068
 80155e4:	08028e68 	.word	0x08028e68
 80155e8:	2400af40 	.word	0x2400af40
 80155ec:	08028e91 	.word	0x08028e91
 80155f0:	2400af44 	.word	0x2400af44
 80155f4:	2400af48 	.word	0x2400af48

080155f8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80155f8:	b570      	push	{r4, r5, r6, lr}
 80155fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155fe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015600:	4604      	mov	r4, r0
 8015602:	4299      	cmp	r1, r3
 8015604:	d01e      	beq.n	8015644 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8015606:	6803      	ldr	r3, [r0, #0]
 8015608:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801560a:	4b0f      	ldr	r3, [pc, #60]	; (8015648 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	b92b      	cbnz	r3, 801561c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8015610:	4b0e      	ldr	r3, [pc, #56]	; (801564c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8015612:	21ae      	movs	r1, #174	; 0xae
 8015614:	4a0e      	ldr	r2, [pc, #56]	; (8015650 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8015616:	480f      	ldr	r0, [pc, #60]	; (8015654 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8015618:	f010 faac 	bl	8025b74 <__assert_func>
 801561c:	4b0e      	ldr	r3, [pc, #56]	; (8015658 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801561e:	881b      	ldrh	r3, [r3, #0]
 8015620:	428b      	cmp	r3, r1
 8015622:	d803      	bhi.n	801562c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8015624:	4b0d      	ldr	r3, [pc, #52]	; (801565c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8015626:	21af      	movs	r1, #175	; 0xaf
 8015628:	4a09      	ldr	r2, [pc, #36]	; (8015650 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801562a:	e7f4      	b.n	8015616 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 801562c:	4b0c      	ldr	r3, [pc, #48]	; (8015660 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801562e:	6818      	ldr	r0, [r3, #0]
 8015630:	f7f1 fa98 	bl	8006b64 <_ZNK8touchgfx5Texts7getTextEt>
 8015634:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015636:	4601      	mov	r1, r0
 8015638:	46ac      	mov	ip, r5
 801563a:	4620      	mov	r0, r4
 801563c:	2300      	movs	r3, #0
 801563e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015642:	4760      	bx	ip
 8015644:	2000      	movs	r0, #0
 8015646:	bd70      	pop	{r4, r5, r6, pc}
 8015648:	2400af3c 	.word	0x2400af3c
 801564c:	08028e26 	.word	0x08028e26
 8015650:	08029068 	.word	0x08029068
 8015654:	08028e68 	.word	0x08028e68
 8015658:	2400af40 	.word	0x2400af40
 801565c:	08028e91 	.word	0x08028e91
 8015660:	2400af48 	.word	0x2400af48

08015664 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8015664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801566c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801566e:	b08c      	sub	sp, #48	; 0x30
 8015670:	4604      	mov	r4, r0
 8015672:	4293      	cmp	r3, r2
 8015674:	460e      	mov	r6, r1
 8015676:	d05d      	beq.n	8015734 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8015678:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8015758 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801567c:	f8d8 2000 	ldr.w	r2, [r8]
 8015680:	b92a      	cbnz	r2, 801568e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8015682:	4b2e      	ldr	r3, [pc, #184]	; (801573c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8015684:	21ae      	movs	r1, #174	; 0xae
 8015686:	4a2e      	ldr	r2, [pc, #184]	; (8015740 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8015688:	482e      	ldr	r0, [pc, #184]	; (8015744 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801568a:	f010 fa73 	bl	8025b74 <__assert_func>
 801568e:	4f2e      	ldr	r7, [pc, #184]	; (8015748 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8015690:	8839      	ldrh	r1, [r7, #0]
 8015692:	4299      	cmp	r1, r3
 8015694:	d803      	bhi.n	801569e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8015696:	4b2d      	ldr	r3, [pc, #180]	; (801574c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8015698:	21af      	movs	r1, #175	; 0xaf
 801569a:	4a29      	ldr	r2, [pc, #164]	; (8015740 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801569c:	e7f4      	b.n	8015688 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801569e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80156a2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80156a6:	4b2a      	ldr	r3, [pc, #168]	; (8015750 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80156ae:	2a00      	cmp	r2, #0
 80156b0:	d040      	beq.n	8015734 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80156b2:	784b      	ldrb	r3, [r1, #1]
 80156b4:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 80156b8:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80156bc:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80156c0:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80156c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80156c8:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80156cc:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80156d0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80156d4:	ad05      	add	r5, sp, #20
 80156d6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80156d8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80156dc:	9207      	str	r2, [sp, #28]
 80156de:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80156e2:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80156e6:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80156ea:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80156ee:	f88d a020 	strb.w	sl, [sp, #32]
 80156f2:	9009      	str	r0, [sp, #36]	; 0x24
 80156f4:	f7ee fa84 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 80156f8:	4621      	mov	r1, r4
 80156fa:	4681      	mov	r9, r0
 80156fc:	4628      	mov	r0, r5
 80156fe:	f002 fd77 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015702:	f8d8 3000 	ldr.w	r3, [r8]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d0bb      	beq.n	8015682 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801570a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801570c:	883b      	ldrh	r3, [r7, #0]
 801570e:	428b      	cmp	r3, r1
 8015710:	d9c1      	bls.n	8015696 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8015712:	4b10      	ldr	r3, [pc, #64]	; (8015754 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8015714:	6818      	ldr	r0, [r3, #0]
 8015716:	f7f1 fa25 	bl	8006b64 <_ZNK8touchgfx5Texts7getTextEt>
 801571a:	2300      	movs	r3, #0
 801571c:	9303      	str	r3, [sp, #12]
 801571e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015720:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8015724:	ab07      	add	r3, sp, #28
 8015726:	4648      	mov	r0, r9
 8015728:	9300      	str	r3, [sp, #0]
 801572a:	4633      	mov	r3, r6
 801572c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8015730:	f7f1 f9a9 	bl	8006a86 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015734:	b00c      	add	sp, #48	; 0x30
 8015736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801573a:	bf00      	nop
 801573c:	08028e26 	.word	0x08028e26
 8015740:	08029068 	.word	0x08029068
 8015744:	08028e68 	.word	0x08028e68
 8015748:	2400af40 	.word	0x2400af40
 801574c:	08028e91 	.word	0x08028e91
 8015750:	2400af44 	.word	0x2400af44
 8015754:	2400af48 	.word	0x2400af48
 8015758:	2400af3c 	.word	0x2400af3c

0801575c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801575c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015760:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8015762:	4604      	mov	r4, r0
 8015764:	460e      	mov	r6, r1
 8015766:	b08e      	sub	sp, #56	; 0x38
 8015768:	b218      	sxth	r0, r3
 801576a:	8921      	ldrh	r1, [r4, #8]
 801576c:	005b      	lsls	r3, r3, #1
 801576e:	8962      	ldrh	r2, [r4, #10]
 8015770:	f8ad 0000 	strh.w	r0, [sp]
 8015774:	b29b      	uxth	r3, r3
 8015776:	f8ad 0002 	strh.w	r0, [sp, #2]
 801577a:	1ac9      	subs	r1, r1, r3
 801577c:	1ad3      	subs	r3, r2, r3
 801577e:	b209      	sxth	r1, r1
 8015780:	b21b      	sxth	r3, r3
 8015782:	2900      	cmp	r1, #0
 8015784:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015788:	f8ad 3006 	strh.w	r3, [sp, #6]
 801578c:	dd5e      	ble.n	801584c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801578e:	2b00      	cmp	r3, #0
 8015790:	dd5c      	ble.n	801584c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8015792:	6830      	ldr	r0, [r6, #0]
 8015794:	ab02      	add	r3, sp, #8
 8015796:	6871      	ldr	r1, [r6, #4]
 8015798:	c303      	stmia	r3!, {r0, r1}
 801579a:	4669      	mov	r1, sp
 801579c:	a802      	add	r0, sp, #8
 801579e:	f7fd fdaf 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 80157a2:	4620      	mov	r0, r4
 80157a4:	a902      	add	r1, sp, #8
 80157a6:	f7ff fec5 	bl	8015534 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 80157aa:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80157ac:	2800      	cmp	r0, #0
 80157ae:	d05f      	beq.n	8015870 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80157b0:	8963      	ldrh	r3, [r4, #10]
 80157b2:	b202      	sxth	r2, r0
 80157b4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80157b8:	2500      	movs	r5, #0
 80157ba:	1a1f      	subs	r7, r3, r0
 80157bc:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80157c0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80157c4:	b21b      	sxth	r3, r3
 80157c6:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80157ca:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80157ce:	af04      	add	r7, sp, #16
 80157d0:	1a09      	subs	r1, r1, r0
 80157d2:	9506      	str	r5, [sp, #24]
 80157d4:	f8ad 201e 	strh.w	r2, [sp, #30]
 80157d8:	f8ad 5020 	strh.w	r5, [sp, #32]
 80157dc:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80157e0:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80157e4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80157e8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80157ec:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80157f0:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80157f4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80157f8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80157fc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015800:	ab06      	add	r3, sp, #24
 8015802:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015806:	e893 0003 	ldmia.w	r3, {r0, r1}
 801580a:	e887 0003 	stmia.w	r7, {r0, r1}
 801580e:	4631      	mov	r1, r6
 8015810:	4638      	mov	r0, r7
 8015812:	f7fd fd75 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 8015816:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801581a:	2b00      	cmp	r3, #0
 801581c:	dd12      	ble.n	8015844 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801581e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015822:	2b00      	cmp	r3, #0
 8015824:	dd0e      	ble.n	8015844 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8015826:	6823      	ldr	r3, [r4, #0]
 8015828:	4639      	mov	r1, r7
 801582a:	4620      	mov	r0, r4
 801582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801582e:	4798      	blx	r3
 8015830:	f7ee f9e6 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 8015834:	6803      	ldr	r3, [r0, #0]
 8015836:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015838:	4639      	mov	r1, r7
 801583a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801583e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015842:	47c0      	blx	r8
 8015844:	3501      	adds	r5, #1
 8015846:	2d04      	cmp	r5, #4
 8015848:	d1da      	bne.n	8015800 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 801584a:	e011      	b.n	8015870 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801584c:	6830      	ldr	r0, [r6, #0]
 801584e:	ab06      	add	r3, sp, #24
 8015850:	6871      	ldr	r1, [r6, #4]
 8015852:	c303      	stmia	r3!, {r0, r1}
 8015854:	6823      	ldr	r3, [r4, #0]
 8015856:	a906      	add	r1, sp, #24
 8015858:	4620      	mov	r0, r4
 801585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801585c:	4798      	blx	r3
 801585e:	f7ee f9cf 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 8015862:	6803      	ldr	r3, [r0, #0]
 8015864:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015866:	a906      	add	r1, sp, #24
 8015868:	699d      	ldr	r5, [r3, #24]
 801586a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801586e:	47a8      	blx	r5
 8015870:	b00e      	add	sp, #56	; 0x38
 8015872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015876 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8015876:	b510      	push	{r4, lr}
 8015878:	6803      	ldr	r3, [r0, #0]
 801587a:	460c      	mov	r4, r1
 801587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801587e:	4798      	blx	r3
 8015880:	1b03      	subs	r3, r0, r4
 8015882:	4258      	negs	r0, r3
 8015884:	4158      	adcs	r0, r3
 8015886:	bd10      	pop	{r4, pc}

08015888 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8015888:	4b01      	ldr	r3, [pc, #4]	; (8015890 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801588a:	6019      	str	r1, [r3, #0]
 801588c:	4770      	bx	lr
 801588e:	bf00      	nop
 8015890:	2400aef4 	.word	0x2400aef4

08015894 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015898:	4696      	mov	lr, r2
 801589a:	b097      	sub	sp, #92	; 0x5c
 801589c:	4605      	mov	r5, r0
 801589e:	4614      	mov	r4, r2
 80158a0:	460e      	mov	r6, r1
 80158a2:	461f      	mov	r7, r3
 80158a4:	f10d 0c1c 	add.w	ip, sp, #28
 80158a8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80158ac:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80158b0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80158b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158bc:	f8de 3000 	ldr.w	r3, [lr]
 80158c0:	f104 0e14 	add.w	lr, r4, #20
 80158c4:	f8cc 3000 	str.w	r3, [ip]
 80158c8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80158cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158d4:	f8de 3000 	ldr.w	r3, [lr]
 80158d8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80158dc:	f8cc 3000 	str.w	r3, [ip]
 80158e0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80158e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158ec:	f8de 3000 	ldr.w	r3, [lr]
 80158f0:	4631      	mov	r1, r6
 80158f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80158f4:	4628      	mov	r0, r5
 80158f6:	f8cc 3000 	str.w	r3, [ip]
 80158fa:	682b      	ldr	r3, [r5, #0]
 80158fc:	9201      	str	r2, [sp, #4]
 80158fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015900:	f8cd 8008 	str.w	r8, [sp, #8]
 8015904:	9200      	str	r2, [sp, #0]
 8015906:	aa07      	add	r2, sp, #28
 8015908:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801590c:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 8015910:	463b      	mov	r3, r7
 8015912:	47d8      	blx	fp
 8015914:	46a6      	mov	lr, r4
 8015916:	f10d 0c1c 	add.w	ip, sp, #28
 801591a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801591e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015922:	f8de 3000 	ldr.w	r3, [lr]
 8015926:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801592a:	343c      	adds	r4, #60	; 0x3c
 801592c:	f8cc 3000 	str.w	r3, [ip]
 8015930:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015934:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015938:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801593c:	f8de 3000 	ldr.w	r3, [lr]
 8015940:	f8cc 3000 	str.w	r3, [ip]
 8015944:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801594a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801594e:	6823      	ldr	r3, [r4, #0]
 8015950:	4631      	mov	r1, r6
 8015952:	4628      	mov	r0, r5
 8015954:	f8cc 3000 	str.w	r3, [ip]
 8015958:	682b      	ldr	r3, [r5, #0]
 801595a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801595e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015960:	f8cd 8008 	str.w	r8, [sp, #8]
 8015964:	9201      	str	r2, [sp, #4]
 8015966:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015968:	9200      	str	r2, [sp, #0]
 801596a:	aa07      	add	r2, sp, #28
 801596c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801596e:	463b      	mov	r3, r7
 8015970:	47a0      	blx	r4
 8015972:	b017      	add	sp, #92	; 0x5c
 8015974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015978 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015978:	2000      	movs	r0, #0
 801597a:	4770      	bx	lr

0801597c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015980:	b08d      	sub	sp, #52	; 0x34
 8015982:	4688      	mov	r8, r1
 8015984:	f8d3 c000 	ldr.w	ip, [r3]
 8015988:	9916      	ldr	r1, [sp, #88]	; 0x58
 801598a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801598e:	680f      	ldr	r7, [r1, #0]
 8015990:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8015994:	eba7 070c 	sub.w	r7, r7, ip
 8015998:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801599c:	edd3 6a07 	vldr	s13, [r3, #28]
 80159a0:	42bc      	cmp	r4, r7
 80159a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80159a4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80159a8:	bfa8      	it	ge
 80159aa:	463c      	movge	r4, r7
 80159ac:	f9b1 9000 	ldrsh.w	r9, [r1]
 80159b0:	f9ba 1000 	ldrsh.w	r1, [sl]
 80159b4:	ee07 4a90 	vmov	s15, r4
 80159b8:	eb09 0e0c 	add.w	lr, r9, ip
 80159bc:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80159c0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80159c4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80159c8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80159cc:	4571      	cmp	r1, lr
 80159ce:	ee25 4a04 	vmul.f32	s8, s10, s8
 80159d2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80159d6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80159da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80159de:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80159e2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80159e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80159ea:	ee36 0a84 	vadd.f32	s0, s13, s8
 80159ee:	ee61 1a87 	vmul.f32	s3, s3, s14
 80159f2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80159f6:	f340 808c 	ble.w	8015b12 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80159fa:	eba1 060e 	sub.w	r6, r1, lr
 80159fe:	fb96 f5f4 	sdiv	r5, r6, r4
 8015a02:	ee07 5a10 	vmov	s14, r5
 8015a06:	2d00      	cmp	r5, #0
 8015a08:	fb04 6615 	mls	r6, r4, r5, r6
 8015a0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a10:	eea7 0a04 	vfma.f32	s0, s14, s8
 8015a14:	eee7 0a24 	vfma.f32	s1, s14, s9
 8015a18:	eea7 1a05 	vfma.f32	s2, s14, s10
 8015a1c:	dd12      	ble.n	8015a44 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8015a1e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8015a22:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8015a26:	ee31 2a45 	vsub.f32	s4, s2, s10
 8015a2a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a32:	bf14      	ite	ne
 8015a34:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8015a38:	eeb0 7a67 	vmoveq.f32	s14, s15
 8015a3c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015a40:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015a44:	fb05 f204 	mul.w	r2, r5, r4
 8015a48:	1abf      	subs	r7, r7, r2
 8015a4a:	4494      	add	ip, r2
 8015a4c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8015a50:	4411      	add	r1, r2
 8015a52:	eb09 020c 	add.w	r2, r9, ip
 8015a56:	b209      	sxth	r1, r1
 8015a58:	443a      	add	r2, r7
 8015a5a:	428a      	cmp	r2, r1
 8015a5c:	bfc4      	itt	gt
 8015a5e:	eba1 0209 	subgt.w	r2, r1, r9
 8015a62:	eba2 070c 	subgt.w	r7, r2, ip
 8015a66:	2f00      	cmp	r7, #0
 8015a68:	dd50      	ble.n	8015b0c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8015a6a:	fb97 f1f4 	sdiv	r1, r7, r4
 8015a6e:	fb04 7211 	mls	r2, r4, r1, r7
 8015a72:	b90a      	cbnz	r2, 8015a78 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8015a74:	3901      	subs	r1, #1
 8015a76:	4622      	mov	r2, r4
 8015a78:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015a7c:	6840      	ldr	r0, [r0, #4]
 8015a7e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8015a82:	44b6      	add	lr, r6
 8015a84:	f8d0 a000 	ldr.w	sl, [r0]
 8015a88:	2900      	cmp	r1, #0
 8015a8a:	bfcc      	ite	gt
 8015a8c:	46a1      	movgt	r9, r4
 8015a8e:	4691      	movle	r9, r2
 8015a90:	900b      	str	r0, [sp, #44]	; 0x2c
 8015a92:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015a94:	fb04 e505 	mla	r5, r4, r5, lr
 8015a98:	eef0 6a42 	vmov.f32	s13, s4
 8015a9c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015aa0:	9008      	str	r0, [sp, #32]
 8015aa2:	eeb0 7a61 	vmov.f32	s14, s3
 8015aa6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015aa8:	695b      	ldr	r3, [r3, #20]
 8015aaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015aae:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8015ab2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015ab6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015ab8:	445b      	add	r3, fp
 8015aba:	9307      	str	r3, [sp, #28]
 8015abc:	ee16 3a90 	vmov	r3, s13
 8015ac0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8015ac4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015ac8:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015acc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015ad0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015ad4:	ee17 7a90 	vmov	r7, s15
 8015ad8:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015adc:	fb97 f7f4 	sdiv	r7, r7, r4
 8015ae0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015ae4:	ee17 ca90 	vmov	ip, s15
 8015ae8:	fb9c fcf4 	sdiv	ip, ip, r4
 8015aec:	fb0c 3306 	mla	r3, ip, r6, r3
 8015af0:	9302      	str	r3, [sp, #8]
 8015af2:	ee17 3a10 	vmov	r3, s14
 8015af6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015afa:	fb07 3706 	mla	r7, r7, r6, r3
 8015afe:	eba9 0306 	sub.w	r3, r9, r6
 8015b02:	e9cd 4700 	strd	r4, r7, [sp]
 8015b06:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015b0a:	47a0      	blx	r4
 8015b0c:	b00d      	add	sp, #52	; 0x34
 8015b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b12:	2500      	movs	r5, #0
 8015b14:	462e      	mov	r6, r5
 8015b16:	e799      	b.n	8015a4c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015b18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b1c:	b0db      	sub	sp, #364	; 0x16c
 8015b1e:	461d      	mov	r5, r3
 8015b20:	4614      	mov	r4, r2
 8015b22:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8015b26:	910f      	str	r1, [sp, #60]	; 0x3c
 8015b28:	4629      	mov	r1, r5
 8015b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8015b2c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8015b30:	9009      	str	r0, [sp, #36]	; 0x24
 8015b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b34:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8015b38:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8015b3c:	9310      	str	r3, [sp, #64]	; 0x40
 8015b3e:	6803      	ldr	r3, [r0, #0]
 8015b40:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8015b42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015b46:	47b8      	blx	r7
 8015b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b4a:	6058      	str	r0, [r3, #4]
 8015b4c:	2800      	cmp	r0, #0
 8015b4e:	f000 83a1 	beq.w	8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b52:	682b      	ldr	r3, [r5, #0]
 8015b54:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015b58:	ed94 7a02 	vldr	s14, [r4, #8]
 8015b5c:	9314      	str	r3, [sp, #80]	; 0x50
 8015b5e:	686b      	ldr	r3, [r5, #4]
 8015b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b64:	9315      	str	r3, [sp, #84]	; 0x54
 8015b66:	4bc1      	ldr	r3, [pc, #772]	; (8015e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015b68:	7819      	ldrb	r1, [r3, #0]
 8015b6a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015b6e:	2900      	cmp	r1, #0
 8015b70:	bf16      	itet	ne
 8015b72:	4619      	movne	r1, r3
 8015b74:	4611      	moveq	r1, r2
 8015b76:	4613      	movne	r3, r2
 8015b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b7c:	9116      	str	r1, [sp, #88]	; 0x58
 8015b7e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8015b82:	f240 8387 	bls.w	8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b86:	ed94 7a07 	vldr	s14, [r4, #28]
 8015b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b92:	f240 837f 	bls.w	8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b96:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8015b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ba2:	f240 8377 	bls.w	8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015ba6:	6822      	ldr	r2, [r4, #0]
 8015ba8:	4bb1      	ldr	r3, [pc, #708]	; (8015e70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015baa:	429a      	cmp	r2, r3
 8015bac:	f2c0 8372 	blt.w	8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015bb0:	49b0      	ldr	r1, [pc, #704]	; (8015e74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8015bb2:	6963      	ldr	r3, [r4, #20]
 8015bb4:	428a      	cmp	r2, r1
 8015bb6:	f300 836d 	bgt.w	8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015bba:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015bbe:	48ae      	ldr	r0, [pc, #696]	; (8015e78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015bc0:	33ff      	adds	r3, #255	; 0xff
 8015bc2:	4283      	cmp	r3, r0
 8015bc4:	f200 8366 	bhi.w	8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015bc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015bca:	4dac      	ldr	r5, [pc, #688]	; (8015e7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015bcc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015bd0:	33ff      	adds	r3, #255	; 0xff
 8015bd2:	42ab      	cmp	r3, r5
 8015bd4:	f200 835e 	bhi.w	8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015bd8:	6862      	ldr	r2, [r4, #4]
 8015bda:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8015bde:	33ff      	adds	r3, #255	; 0xff
 8015be0:	4283      	cmp	r3, r0
 8015be2:	f200 8357 	bhi.w	8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015be6:	69a1      	ldr	r1, [r4, #24]
 8015be8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8015bec:	33ff      	adds	r3, #255	; 0xff
 8015bee:	4283      	cmp	r3, r0
 8015bf0:	f200 8350 	bhi.w	8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015bf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015bf6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8015bfa:	30ff      	adds	r0, #255	; 0xff
 8015bfc:	42a8      	cmp	r0, r5
 8015bfe:	f200 8349 	bhi.w	8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015c02:	428a      	cmp	r2, r1
 8015c04:	f280 8110 	bge.w	8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	f300 8119 	bgt.w	8015e40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8015c0e:	4299      	cmp	r1, r3
 8015c10:	f280 811d 	bge.w	8015e4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8015c14:	2502      	movs	r5, #2
 8015c16:	2701      	movs	r7, #1
 8015c18:	46a9      	mov	r9, r5
 8015c1a:	46b8      	mov	r8, r7
 8015c1c:	f04f 0a00 	mov.w	sl, #0
 8015c20:	4621      	mov	r1, r4
 8015c22:	a849      	add	r0, sp, #292	; 0x124
 8015c24:	f003 fc82 	bl	801952c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015c28:	4622      	mov	r2, r4
 8015c2a:	4653      	mov	r3, sl
 8015c2c:	a949      	add	r1, sp, #292	; 0x124
 8015c2e:	f8cd 9000 	str.w	r9, [sp]
 8015c32:	a819      	add	r0, sp, #100	; 0x64
 8015c34:	f003 fdaa 	bl	801978c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015c38:	4622      	mov	r2, r4
 8015c3a:	4653      	mov	r3, sl
 8015c3c:	a949      	add	r1, sp, #292	; 0x124
 8015c3e:	f8cd 8000 	str.w	r8, [sp]
 8015c42:	a829      	add	r0, sp, #164	; 0xa4
 8015c44:	f003 fda2 	bl	801978c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015c48:	4643      	mov	r3, r8
 8015c4a:	4622      	mov	r2, r4
 8015c4c:	a949      	add	r1, sp, #292	; 0x124
 8015c4e:	f8cd 9000 	str.w	r9, [sp]
 8015c52:	a839      	add	r0, sp, #228	; 0xe4
 8015c54:	f003 fd9a 	bl	801978c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015c58:	42af      	cmp	r7, r5
 8015c5a:	af12      	add	r7, sp, #72	; 0x48
 8015c5c:	bfb7      	itett	lt
 8015c5e:	2300      	movlt	r3, #0
 8015c60:	2301      	movge	r3, #1
 8015c62:	ad29      	addlt	r5, sp, #164	; 0xa4
 8015c64:	ac19      	addlt	r4, sp, #100	; 0x64
 8015c66:	bfb1      	iteee	lt
 8015c68:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015c6a:	ad19      	addge	r5, sp, #100	; 0x64
 8015c6c:	930e      	strge	r3, [sp, #56]	; 0x38
 8015c6e:	ac29      	addge	r4, sp, #164	; 0xa4
 8015c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015c76:	e887 0003 	stmia.w	r7, {r0, r1}
 8015c7a:	b928      	cbnz	r0, 8015c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015c7c:	4b80      	ldr	r3, [pc, #512]	; (8015e80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015c7e:	6818      	ldr	r0, [r3, #0]
 8015c80:	6803      	ldr	r3, [r0, #0]
 8015c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c84:	4798      	blx	r3
 8015c86:	6038      	str	r0, [r7, #0]
 8015c88:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015c8a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015c8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015c92:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015c94:	930c      	str	r3, [sp, #48]	; 0x30
 8015c96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015c98:	6963      	ldr	r3, [r4, #20]
 8015c9a:	440b      	add	r3, r1
 8015c9c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015ca0:	4408      	add	r0, r1
 8015ca2:	b200      	sxth	r0, r0
 8015ca4:	4283      	cmp	r3, r0
 8015ca6:	900d      	str	r0, [sp, #52]	; 0x34
 8015ca8:	f280 80dd 	bge.w	8015e66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015cac:	428b      	cmp	r3, r1
 8015cae:	da08      	bge.n	8015cc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015cb0:	2a00      	cmp	r2, #0
 8015cb2:	dd06      	ble.n	8015cc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015cb4:	1acb      	subs	r3, r1, r3
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	f2c0 80e4 	blt.w	8015e84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	f300 80e2 	bgt.w	8015e86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8015cc2:	6967      	ldr	r7, [r4, #20]
 8015cc4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015cc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cca:	443b      	add	r3, r7
 8015ccc:	461f      	mov	r7, r3
 8015cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015cd0:	1bdf      	subs	r7, r3, r7
 8015cd2:	4297      	cmp	r7, r2
 8015cd4:	bfa8      	it	ge
 8015cd6:	4617      	movge	r7, r2
 8015cd8:	2f00      	cmp	r7, #0
 8015cda:	f340 8166 	ble.w	8015faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8015cde:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015ce0:	6829      	ldr	r1, [r5, #0]
 8015ce2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015ce6:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015cea:	4411      	add	r1, r2
 8015cec:	6820      	ldr	r0, [r4, #0]
 8015cee:	4299      	cmp	r1, r3
 8015cf0:	dd1a      	ble.n	8015d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015cf2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015cf6:	4402      	add	r2, r0
 8015cf8:	440b      	add	r3, r1
 8015cfa:	b21b      	sxth	r3, r3
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	dc13      	bgt.n	8015d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015d00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015d02:	a912      	add	r1, sp, #72	; 0x48
 8015d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	9206      	str	r2, [sp, #24]
 8015d0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d0e:	9500      	str	r5, [sp, #0]
 8015d10:	9205      	str	r2, [sp, #20]
 8015d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d14:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015d18:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015d1a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015d1e:	aa49      	add	r2, sp, #292	; 0x124
 8015d20:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8015d24:	4623      	mov	r3, r4
 8015d26:	47c8      	blx	r9
 8015d28:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8015d2c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8015d30:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8015d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015d38:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8015d3c:	68a1      	ldr	r1, [r4, #8]
 8015d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d42:	ed94 6a08 	vldr	s12, [r4, #32]
 8015d46:	edd4 6a07 	vldr	s13, [r4, #28]
 8015d4a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015d4e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015d52:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015d56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015d5a:	edc4 6a07 	vstr	s13, [r4, #28]
 8015d5e:	441a      	add	r2, r3
 8015d60:	6963      	ldr	r3, [r4, #20]
 8015d62:	3301      	adds	r3, #1
 8015d64:	6022      	str	r2, [r4, #0]
 8015d66:	6163      	str	r3, [r4, #20]
 8015d68:	69a3      	ldr	r3, [r4, #24]
 8015d6a:	3b01      	subs	r3, #1
 8015d6c:	61a3      	str	r3, [r4, #24]
 8015d6e:	6923      	ldr	r3, [r4, #16]
 8015d70:	440b      	add	r3, r1
 8015d72:	68e1      	ldr	r1, [r4, #12]
 8015d74:	428b      	cmp	r3, r1
 8015d76:	6123      	str	r3, [r4, #16]
 8015d78:	db15      	blt.n	8015da6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015d7a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8015d7e:	3201      	adds	r2, #1
 8015d80:	1a5b      	subs	r3, r3, r1
 8015d82:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015d86:	6022      	str	r2, [r4, #0]
 8015d88:	6123      	str	r3, [r4, #16]
 8015d8a:	edc4 6a07 	vstr	s13, [r4, #28]
 8015d8e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8015d92:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015d96:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015d9a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015da2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015da6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8015daa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015dae:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8015db2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015db6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8015dba:	68a9      	ldr	r1, [r5, #8]
 8015dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015dc0:	ed95 6a08 	vldr	s12, [r5, #32]
 8015dc4:	edd5 6a07 	vldr	s13, [r5, #28]
 8015dc8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015dcc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015dd0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015dd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015dd8:	edc5 6a07 	vstr	s13, [r5, #28]
 8015ddc:	441a      	add	r2, r3
 8015dde:	696b      	ldr	r3, [r5, #20]
 8015de0:	3301      	adds	r3, #1
 8015de2:	602a      	str	r2, [r5, #0]
 8015de4:	616b      	str	r3, [r5, #20]
 8015de6:	69ab      	ldr	r3, [r5, #24]
 8015de8:	3b01      	subs	r3, #1
 8015dea:	61ab      	str	r3, [r5, #24]
 8015dec:	692b      	ldr	r3, [r5, #16]
 8015dee:	440b      	add	r3, r1
 8015df0:	68e9      	ldr	r1, [r5, #12]
 8015df2:	428b      	cmp	r3, r1
 8015df4:	612b      	str	r3, [r5, #16]
 8015df6:	db15      	blt.n	8015e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015df8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8015dfc:	3201      	adds	r2, #1
 8015dfe:	1a5b      	subs	r3, r3, r1
 8015e00:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015e04:	602a      	str	r2, [r5, #0]
 8015e06:	612b      	str	r3, [r5, #16]
 8015e08:	edc5 6a07 	vstr	s13, [r5, #28]
 8015e0c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015e10:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015e14:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015e18:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8015e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e20:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015e24:	3f01      	subs	r7, #1
 8015e26:	e757      	b.n	8015cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015e28:	4299      	cmp	r1, r3
 8015e2a:	dc13      	bgt.n	8015e54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	da14      	bge.n	8015e5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8015e30:	2502      	movs	r5, #2
 8015e32:	2703      	movs	r7, #3
 8015e34:	f04f 0800 	mov.w	r8, #0
 8015e38:	46a9      	mov	r9, r5
 8015e3a:	f04f 0a01 	mov.w	sl, #1
 8015e3e:	e6ef      	b.n	8015c20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015e40:	2501      	movs	r5, #1
 8015e42:	2700      	movs	r7, #0
 8015e44:	46a9      	mov	r9, r5
 8015e46:	46b8      	mov	r8, r7
 8015e48:	f04f 0a02 	mov.w	sl, #2
 8015e4c:	e6e8      	b.n	8015c20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015e4e:	2501      	movs	r5, #1
 8015e50:	2702      	movs	r7, #2
 8015e52:	e6e1      	b.n	8015c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8015e54:	2500      	movs	r5, #0
 8015e56:	2701      	movs	r7, #1
 8015e58:	e7f4      	b.n	8015e44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015e5a:	2702      	movs	r7, #2
 8015e5c:	2503      	movs	r5, #3
 8015e5e:	f04f 0900 	mov.w	r9, #0
 8015e62:	46b8      	mov	r8, r7
 8015e64:	e7e9      	b.n	8015e3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015e66:	4613      	mov	r3, r2
 8015e68:	e728      	b.n	8015cbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015e6a:	bf00      	nop
 8015e6c:	2400aee4 	.word	0x2400aee4
 8015e70:	fffd8f01 	.word	0xfffd8f01
 8015e74:	00027100 	.word	0x00027100
 8015e78:	0004e1ff 	.word	0x0004e1ff
 8015e7c:	0004e1fe 	.word	0x0004e1fe
 8015e80:	2400aeec 	.word	0x2400aeec
 8015e84:	4613      	mov	r3, r2
 8015e86:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015e88:	469e      	mov	lr, r3
 8015e8a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8015e8c:	469c      	mov	ip, r3
 8015e8e:	9111      	str	r1, [sp, #68]	; 0x44
 8015e90:	f04f 0900 	mov.w	r9, #0
 8015e94:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8015e98:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8015e9c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8015ea0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8015ea4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8015ea8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8015eac:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8015eb0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8015eb4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8015eb8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8015ebc:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8015ec0:	f1bc 0f00 	cmp.w	ip, #0
 8015ec4:	d147      	bne.n	8015f56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015ec6:	eb03 0c07 	add.w	ip, r3, r7
 8015eca:	1ad7      	subs	r7, r2, r3
 8015ecc:	f1b9 0f00 	cmp.w	r9, #0
 8015ed0:	d009      	beq.n	8015ee6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8015ed2:	9029      	str	r0, [sp, #164]	; 0xa4
 8015ed4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8015ed8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8015edc:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8015ee0:	912d      	str	r1, [sp, #180]	; 0xb4
 8015ee2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8015ee6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015ee8:	f04f 0800 	mov.w	r8, #0
 8015eec:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015ef0:	9111      	str	r1, [sp, #68]	; 0x44
 8015ef2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8015ef6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8015efa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015efe:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8015f02:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8015f06:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8015f0a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8015f0e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8015f12:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8015f16:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8015f1a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8015f1e:	f1be 0f00 	cmp.w	lr, #0
 8015f22:	d031      	beq.n	8015f88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015f24:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015f26:	4450      	add	r0, sl
 8015f28:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015f2c:	4431      	add	r1, r6
 8015f2e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015f32:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015f36:	4549      	cmp	r1, r9
 8015f38:	db08      	blt.n	8015f4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015f3a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015f3e:	3001      	adds	r0, #1
 8015f40:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015f44:	eba1 0109 	sub.w	r1, r1, r9
 8015f48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015f4c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015f50:	f04f 0801 	mov.w	r8, #1
 8015f54:	e7e3      	b.n	8015f1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015f56:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015f58:	4450      	add	r0, sl
 8015f5a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015f5e:	4431      	add	r1, r6
 8015f60:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015f64:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015f68:	4541      	cmp	r1, r8
 8015f6a:	db08      	blt.n	8015f7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015f6c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015f70:	3001      	adds	r0, #1
 8015f72:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015f76:	eba1 0108 	sub.w	r1, r1, r8
 8015f7a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015f7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015f82:	f04f 0901 	mov.w	r9, #1
 8015f86:	e79b      	b.n	8015ec0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015f88:	449c      	add	ip, r3
 8015f8a:	1aff      	subs	r7, r7, r3
 8015f8c:	f1b8 0f00 	cmp.w	r8, #0
 8015f90:	d009      	beq.n	8015fa6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8015f92:	9019      	str	r0, [sp, #100]	; 0x64
 8015f94:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015f98:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015f9c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015fa0:	911d      	str	r1, [sp, #116]	; 0x74
 8015fa2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015fa6:	1ad2      	subs	r2, r2, r3
 8015fa8:	e68b      	b.n	8015cc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fac:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	f000 80d1 	beq.w	8016156 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015fb4:	ad19      	add	r5, sp, #100	; 0x64
 8015fb6:	ac39      	add	r4, sp, #228	; 0xe4
 8015fb8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015fba:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015fbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015fc2:	930c      	str	r3, [sp, #48]	; 0x30
 8015fc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015fc6:	6963      	ldr	r3, [r4, #20]
 8015fc8:	440b      	add	r3, r1
 8015fca:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015fce:	4408      	add	r0, r1
 8015fd0:	b200      	sxth	r0, r0
 8015fd2:	4283      	cmp	r3, r0
 8015fd4:	900d      	str	r0, [sp, #52]	; 0x34
 8015fd6:	f280 80c1 	bge.w	801615c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8015fda:	428b      	cmp	r3, r1
 8015fdc:	da08      	bge.n	8015ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015fde:	2a00      	cmp	r2, #0
 8015fe0:	dd06      	ble.n	8015ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015fe2:	1acb      	subs	r3, r1, r3
 8015fe4:	429a      	cmp	r2, r3
 8015fe6:	f2c0 80bb 	blt.w	8016160 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	f300 80b9 	bgt.w	8016162 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8015ff0:	6967      	ldr	r7, [r4, #20]
 8015ff2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ff8:	443b      	add	r3, r7
 8015ffa:	461f      	mov	r7, r3
 8015ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ffe:	1bdf      	subs	r7, r3, r7
 8016000:	4297      	cmp	r7, r2
 8016002:	bfa8      	it	ge
 8016004:	4617      	movge	r7, r2
 8016006:	2f00      	cmp	r7, #0
 8016008:	f340 813c 	ble.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801600c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801600e:	6829      	ldr	r1, [r5, #0]
 8016010:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016014:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016018:	4411      	add	r1, r2
 801601a:	6820      	ldr	r0, [r4, #0]
 801601c:	4299      	cmp	r1, r3
 801601e:	dd1a      	ble.n	8016056 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016020:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016024:	4402      	add	r2, r0
 8016026:	440b      	add	r3, r1
 8016028:	b21b      	sxth	r3, r3
 801602a:	429a      	cmp	r2, r3
 801602c:	dc13      	bgt.n	8016056 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801602e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016030:	a912      	add	r1, sp, #72	; 0x48
 8016032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	9206      	str	r2, [sp, #24]
 801603a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801603c:	9500      	str	r5, [sp, #0]
 801603e:	9205      	str	r2, [sp, #20]
 8016040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016042:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016046:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016048:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801604c:	aa49      	add	r2, sp, #292	; 0x124
 801604e:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8016052:	4623      	mov	r3, r4
 8016054:	47c8      	blx	r9
 8016056:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801605a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801605e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016062:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016066:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801606a:	68a1      	ldr	r1, [r4, #8]
 801606c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016070:	ed94 6a08 	vldr	s12, [r4, #32]
 8016074:	edd4 6a07 	vldr	s13, [r4, #28]
 8016078:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801607c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016080:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016084:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016088:	edc4 6a07 	vstr	s13, [r4, #28]
 801608c:	441a      	add	r2, r3
 801608e:	6963      	ldr	r3, [r4, #20]
 8016090:	3301      	adds	r3, #1
 8016092:	6022      	str	r2, [r4, #0]
 8016094:	6163      	str	r3, [r4, #20]
 8016096:	69a3      	ldr	r3, [r4, #24]
 8016098:	3b01      	subs	r3, #1
 801609a:	61a3      	str	r3, [r4, #24]
 801609c:	6923      	ldr	r3, [r4, #16]
 801609e:	440b      	add	r3, r1
 80160a0:	68e1      	ldr	r1, [r4, #12]
 80160a2:	428b      	cmp	r3, r1
 80160a4:	6123      	str	r3, [r4, #16]
 80160a6:	db15      	blt.n	80160d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80160a8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80160ac:	3201      	adds	r2, #1
 80160ae:	1a5b      	subs	r3, r3, r1
 80160b0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80160b4:	6022      	str	r2, [r4, #0]
 80160b6:	6123      	str	r3, [r4, #16]
 80160b8:	edc4 6a07 	vstr	s13, [r4, #28]
 80160bc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80160c0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80160c4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80160c8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80160cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160d0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80160d4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80160d8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80160dc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80160e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80160e4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80160e8:	68a9      	ldr	r1, [r5, #8]
 80160ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80160ee:	ed95 6a08 	vldr	s12, [r5, #32]
 80160f2:	edd5 6a07 	vldr	s13, [r5, #28]
 80160f6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80160fa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80160fe:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016102:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016106:	edc5 6a07 	vstr	s13, [r5, #28]
 801610a:	441a      	add	r2, r3
 801610c:	696b      	ldr	r3, [r5, #20]
 801610e:	3301      	adds	r3, #1
 8016110:	602a      	str	r2, [r5, #0]
 8016112:	616b      	str	r3, [r5, #20]
 8016114:	69ab      	ldr	r3, [r5, #24]
 8016116:	3b01      	subs	r3, #1
 8016118:	61ab      	str	r3, [r5, #24]
 801611a:	692b      	ldr	r3, [r5, #16]
 801611c:	440b      	add	r3, r1
 801611e:	68e9      	ldr	r1, [r5, #12]
 8016120:	428b      	cmp	r3, r1
 8016122:	612b      	str	r3, [r5, #16]
 8016124:	db15      	blt.n	8016152 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016126:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801612a:	3201      	adds	r2, #1
 801612c:	1a5b      	subs	r3, r3, r1
 801612e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016132:	602a      	str	r2, [r5, #0]
 8016134:	612b      	str	r3, [r5, #16]
 8016136:	edc5 6a07 	vstr	s13, [r5, #28]
 801613a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801613e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016142:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016146:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801614a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801614e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016152:	3f01      	subs	r7, #1
 8016154:	e757      	b.n	8016006 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016156:	ad39      	add	r5, sp, #228	; 0xe4
 8016158:	ac19      	add	r4, sp, #100	; 0x64
 801615a:	e72d      	b.n	8015fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801615c:	4613      	mov	r3, r2
 801615e:	e744      	b.n	8015fea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016160:	4613      	mov	r3, r2
 8016162:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016164:	469e      	mov	lr, r3
 8016166:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801616a:	461f      	mov	r7, r3
 801616c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016170:	f04f 0900 	mov.w	r9, #0
 8016174:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8016178:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801617c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8016180:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8016184:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8016188:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801618a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801618e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8016192:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8016196:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801619a:	960e      	str	r6, [sp, #56]	; 0x38
 801619c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80161a0:	2f00      	cmp	r7, #0
 80161a2:	d146      	bne.n	8016232 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80161a4:	449c      	add	ip, r3
 80161a6:	1ad7      	subs	r7, r2, r3
 80161a8:	f1b9 0f00 	cmp.w	r9, #0
 80161ac:	d009      	beq.n	80161c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80161ae:	9039      	str	r0, [sp, #228]	; 0xe4
 80161b0:	913d      	str	r1, [sp, #244]	; 0xf4
 80161b2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80161b6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80161ba:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80161be:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80161c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80161c4:	f04f 0800 	mov.w	r8, #0
 80161c8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80161cc:	910e      	str	r1, [sp, #56]	; 0x38
 80161ce:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80161d2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80161d6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80161da:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80161de:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80161e2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80161e6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80161ea:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80161ee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80161f2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80161f6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80161fa:	f1be 0f00 	cmp.w	lr, #0
 80161fe:	d030      	beq.n	8016262 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8016200:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016202:	4450      	add	r0, sl
 8016204:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016208:	4431      	add	r1, r6
 801620a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801620e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016212:	4549      	cmp	r1, r9
 8016214:	db08      	blt.n	8016228 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016216:	ee77 7a85 	vadd.f32	s15, s15, s10
 801621a:	3001      	adds	r0, #1
 801621c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016220:	eba1 0109 	sub.w	r1, r1, r9
 8016224:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016228:	f10e 3eff 	add.w	lr, lr, #4294967295
 801622c:	f04f 0801 	mov.w	r8, #1
 8016230:	e7e3      	b.n	80161fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8016232:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016234:	4450      	add	r0, sl
 8016236:	ee37 7a24 	vadd.f32	s14, s14, s9
 801623a:	4431      	add	r1, r6
 801623c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016240:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016244:	4541      	cmp	r1, r8
 8016246:	db08      	blt.n	801625a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8016248:	ee76 6a85 	vadd.f32	s13, s13, s10
 801624c:	3001      	adds	r0, #1
 801624e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016252:	eba1 0108 	sub.w	r1, r1, r8
 8016256:	ee77 7a86 	vadd.f32	s15, s15, s12
 801625a:	3f01      	subs	r7, #1
 801625c:	f04f 0901 	mov.w	r9, #1
 8016260:	e79e      	b.n	80161a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016262:	449c      	add	ip, r3
 8016264:	1aff      	subs	r7, r7, r3
 8016266:	f1b8 0f00 	cmp.w	r8, #0
 801626a:	d009      	beq.n	8016280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801626c:	9019      	str	r0, [sp, #100]	; 0x64
 801626e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016272:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016276:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801627a:	911d      	str	r1, [sp, #116]	; 0x74
 801627c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016280:	1ad2      	subs	r2, r2, r3
 8016282:	e6b5      	b.n	8015ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	b923      	cbnz	r3, 8016294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801628a:	4b04      	ldr	r3, [pc, #16]	; (801629c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801628c:	6818      	ldr	r0, [r3, #0]
 801628e:	6803      	ldr	r3, [r0, #0]
 8016290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016292:	4798      	blx	r3
 8016294:	b05b      	add	sp, #364	; 0x16c
 8016296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801629a:	bf00      	nop
 801629c:	2400aeec 	.word	0x2400aeec

080162a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80162a0:	b570      	push	{r4, r5, r6, lr}
 80162a2:	4604      	mov	r4, r0
 80162a4:	2500      	movs	r5, #0
 80162a6:	9804      	ldr	r0, [sp, #16]
 80162a8:	7223      	strb	r3, [r4, #8]
 80162aa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80162ae:	8025      	strh	r5, [r4, #0]
 80162b0:	6061      	str	r1, [r4, #4]
 80162b2:	7263      	strb	r3, [r4, #9]
 80162b4:	60e0      	str	r0, [r4, #12]
 80162b6:	8222      	strh	r2, [r4, #16]
 80162b8:	8265      	strh	r5, [r4, #18]
 80162ba:	82a5      	strh	r5, [r4, #20]
 80162bc:	82e5      	strh	r5, [r4, #22]
 80162be:	8325      	strh	r5, [r4, #24]
 80162c0:	8365      	strh	r5, [r4, #26]
 80162c2:	83a5      	strh	r5, [r4, #28]
 80162c4:	77a5      	strb	r5, [r4, #30]
 80162c6:	6803      	ldr	r3, [r0, #0]
 80162c8:	695b      	ldr	r3, [r3, #20]
 80162ca:	4798      	blx	r3
 80162cc:	4606      	mov	r6, r0
 80162ce:	b1f8      	cbz	r0, 8016310 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80162d0:	68e0      	ldr	r0, [r4, #12]
 80162d2:	4631      	mov	r1, r6
 80162d4:	6803      	ldr	r3, [r0, #0]
 80162d6:	68db      	ldr	r3, [r3, #12]
 80162d8:	4798      	blx	r3
 80162da:	7b43      	ldrb	r3, [r0, #13]
 80162dc:	7a82      	ldrb	r2, [r0, #10]
 80162de:	4605      	mov	r5, r0
 80162e0:	005b      	lsls	r3, r3, #1
 80162e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162e6:	4313      	orrs	r3, r2
 80162e8:	83a3      	strh	r3, [r4, #28]
 80162ea:	7a63      	ldrb	r3, [r4, #9]
 80162ec:	2b04      	cmp	r3, #4
 80162ee:	d10f      	bne.n	8016310 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80162f0:	68e0      	ldr	r0, [r4, #12]
 80162f2:	462a      	mov	r2, r5
 80162f4:	4631      	mov	r1, r6
 80162f6:	6803      	ldr	r3, [r0, #0]
 80162f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162fa:	4798      	blx	r3
 80162fc:	7b6b      	ldrb	r3, [r5, #13]
 80162fe:	005b      	lsls	r3, r3, #1
 8016300:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016304:	7aab      	ldrb	r3, [r5, #10]
 8016306:	4313      	orrs	r3, r2
 8016308:	4418      	add	r0, r3
 801630a:	8ba3      	ldrh	r3, [r4, #28]
 801630c:	4418      	add	r0, r3
 801630e:	83a0      	strh	r0, [r4, #28]
 8016310:	4620      	mov	r0, r4
 8016312:	bd70      	pop	{r4, r5, r6, pc}

08016314 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8016314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016318:	2400      	movs	r4, #0
 801631a:	b085      	sub	sp, #20
 801631c:	4681      	mov	r9, r0
 801631e:	4688      	mov	r8, r1
 8016320:	4692      	mov	sl, r2
 8016322:	469b      	mov	fp, r3
 8016324:	4627      	mov	r7, r4
 8016326:	4625      	mov	r5, r4
 8016328:	4626      	mov	r6, r4
 801632a:	4554      	cmp	r4, sl
 801632c:	da2a      	bge.n	8016384 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801632e:	2300      	movs	r3, #0
 8016330:	9303      	str	r3, [sp, #12]
 8016332:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016336:	429d      	cmp	r5, r3
 8016338:	d004      	beq.n	8016344 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801633a:	f242 030b 	movw	r3, #8203	; 0x200b
 801633e:	429d      	cmp	r5, r3
 8016340:	bf18      	it	ne
 8016342:	462f      	movne	r7, r5
 8016344:	ab03      	add	r3, sp, #12
 8016346:	4642      	mov	r2, r8
 8016348:	4659      	mov	r1, fp
 801634a:	4648      	mov	r0, r9
 801634c:	f002 fe72 	bl	8019034 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016350:	4605      	mov	r5, r0
 8016352:	b1b8      	cbz	r0, 8016384 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016354:	280a      	cmp	r0, #10
 8016356:	d015      	beq.n	8016384 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016358:	9a03      	ldr	r2, [sp, #12]
 801635a:	b18a      	cbz	r2, 8016380 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801635c:	7b50      	ldrb	r0, [r2, #13]
 801635e:	4639      	mov	r1, r7
 8016360:	7a93      	ldrb	r3, [r2, #10]
 8016362:	0040      	lsls	r0, r0, #1
 8016364:	8895      	ldrh	r5, [r2, #4]
 8016366:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801636a:	4303      	orrs	r3, r0
 801636c:	4640      	mov	r0, r8
 801636e:	9301      	str	r3, [sp, #4]
 8016370:	f8d8 3000 	ldr.w	r3, [r8]
 8016374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016376:	4798      	blx	r3
 8016378:	9b01      	ldr	r3, [sp, #4]
 801637a:	4418      	add	r0, r3
 801637c:	4406      	add	r6, r0
 801637e:	b2b6      	uxth	r6, r6
 8016380:	3401      	adds	r4, #1
 8016382:	e7d2      	b.n	801632a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8016384:	4630      	mov	r0, r6
 8016386:	b005      	add	sp, #20
 8016388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801638c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801638c:	2a02      	cmp	r2, #2
 801638e:	b530      	push	{r4, r5, lr}
 8016390:	d011      	beq.n	80163b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8016392:	2a03      	cmp	r2, #3
 8016394:	d01c      	beq.n	80163d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8016396:	2a01      	cmp	r2, #1
 8016398:	d10c      	bne.n	80163b4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801639a:	888b      	ldrh	r3, [r1, #4]
 801639c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80163a0:	8801      	ldrh	r1, [r0, #0]
 80163a2:	1a9b      	subs	r3, r3, r2
 80163a4:	8844      	ldrh	r4, [r0, #2]
 80163a6:	1a5b      	subs	r3, r3, r1
 80163a8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80163ac:	8004      	strh	r4, [r0, #0]
 80163ae:	8043      	strh	r3, [r0, #2]
 80163b0:	8081      	strh	r1, [r0, #4]
 80163b2:	80c2      	strh	r2, [r0, #6]
 80163b4:	bd30      	pop	{r4, r5, pc}
 80163b6:	88cb      	ldrh	r3, [r1, #6]
 80163b8:	88c2      	ldrh	r2, [r0, #6]
 80163ba:	1a9b      	subs	r3, r3, r2
 80163bc:	8842      	ldrh	r2, [r0, #2]
 80163be:	1a9b      	subs	r3, r3, r2
 80163c0:	888a      	ldrh	r2, [r1, #4]
 80163c2:	8881      	ldrh	r1, [r0, #4]
 80163c4:	8043      	strh	r3, [r0, #2]
 80163c6:	1a52      	subs	r2, r2, r1
 80163c8:	8801      	ldrh	r1, [r0, #0]
 80163ca:	1a52      	subs	r2, r2, r1
 80163cc:	8002      	strh	r2, [r0, #0]
 80163ce:	e7f1      	b.n	80163b4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80163d0:	88cb      	ldrh	r3, [r1, #6]
 80163d2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80163d6:	8841      	ldrh	r1, [r0, #2]
 80163d8:	1a9b      	subs	r3, r3, r2
 80163da:	f9b0 5000 	ldrsh.w	r5, [r0]
 80163de:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80163e2:	1a5b      	subs	r3, r3, r1
 80163e4:	8045      	strh	r5, [r0, #2]
 80163e6:	8082      	strh	r2, [r0, #4]
 80163e8:	8003      	strh	r3, [r0, #0]
 80163ea:	80c4      	strh	r4, [r0, #6]
 80163ec:	e7e2      	b.n	80163b4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080163ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80163ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f2:	b09f      	sub	sp, #124	; 0x7c
 80163f4:	9116      	str	r1, [sp, #88]	; 0x58
 80163f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80163f8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80163fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80163fc:	8809      	ldrh	r1, [r1, #0]
 80163fe:	889b      	ldrh	r3, [r3, #4]
 8016400:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8016404:	440b      	add	r3, r1
 8016406:	9212      	str	r2, [sp, #72]	; 0x48
 8016408:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801640c:	b21b      	sxth	r3, r3
 801640e:	9011      	str	r0, [sp, #68]	; 0x44
 8016410:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8016414:	9310      	str	r3, [sp, #64]	; 0x40
 8016416:	f8d8 3000 	ldr.w	r3, [r8]
 801641a:	7a59      	ldrb	r1, [r3, #9]
 801641c:	7a1b      	ldrb	r3, [r3, #8]
 801641e:	9114      	str	r1, [sp, #80]	; 0x50
 8016420:	9315      	str	r3, [sp, #84]	; 0x54
 8016422:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016424:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016428:	2a00      	cmp	r2, #0
 801642a:	d067      	beq.n	80164fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801642c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8016430:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8016432:	2b04      	cmp	r3, #4
 8016434:	bf14      	ite	ne
 8016436:	2301      	movne	r3, #1
 8016438:	2302      	moveq	r3, #2
 801643a:	4413      	add	r3, r2
 801643c:	f04f 0900 	mov.w	r9, #0
 8016440:	930f      	str	r3, [sp, #60]	; 0x3c
 8016442:	464c      	mov	r4, r9
 8016444:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016448:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801644c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8016450:	4293      	cmp	r3, r2
 8016452:	f280 808c 	bge.w	801656e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8016456:	2300      	movs	r3, #0
 8016458:	931c      	str	r3, [sp, #112]	; 0x70
 801645a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801645e:	429c      	cmp	r4, r3
 8016460:	d006      	beq.n	8016470 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8016462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016464:	f242 020b 	movw	r2, #8203	; 0x200b
 8016468:	4294      	cmp	r4, r2
 801646a:	bf18      	it	ne
 801646c:	4623      	movne	r3, r4
 801646e:	930d      	str	r3, [sp, #52]	; 0x34
 8016470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016472:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8016474:	f8d8 2000 	ldr.w	r2, [r8]
 8016478:	428b      	cmp	r3, r1
 801647a:	db41      	blt.n	8016500 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801647c:	6813      	ldr	r3, [r2, #0]
 801647e:	4610      	mov	r0, r2
 8016480:	695b      	ldr	r3, [r3, #20]
 8016482:	4798      	blx	r3
 8016484:	4604      	mov	r4, r0
 8016486:	f8d8 0000 	ldr.w	r0, [r8]
 801648a:	aa1d      	add	r2, sp, #116	; 0x74
 801648c:	4621      	mov	r1, r4
 801648e:	6803      	ldr	r3, [r0, #0]
 8016490:	689e      	ldr	r6, [r3, #8]
 8016492:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8016496:	47b0      	blx	r6
 8016498:	901c      	str	r0, [sp, #112]	; 0x70
 801649a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801649e:	429c      	cmp	r4, r3
 80164a0:	f000 80ea 	beq.w	8016678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80164a4:	f242 030b 	movw	r3, #8203	; 0x200b
 80164a8:	429c      	cmp	r4, r3
 80164aa:	f000 80e5 	beq.w	8016678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80164ae:	2c00      	cmp	r4, #0
 80164b0:	f000 80f7 	beq.w	80166a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80164b4:	2c0a      	cmp	r4, #10
 80164b6:	d060      	beq.n	801657a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80164b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80164ba:	b36a      	cbz	r2, 8016518 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80164bc:	8894      	ldrh	r4, [r2, #4]
 80164be:	f1bb 0f00 	cmp.w	fp, #0
 80164c2:	d03b      	beq.n	801653c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 80164c4:	f892 900d 	ldrb.w	r9, [r2, #13]
 80164c8:	f1bb 0f01 	cmp.w	fp, #1
 80164cc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80164d0:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80164d4:	f892 900a 	ldrb.w	r9, [r2, #10]
 80164d8:	ea49 0903 	orr.w	r9, r9, r3
 80164dc:	d134      	bne.n	8016548 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 80164de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164e0:	eba5 0509 	sub.w	r5, r5, r9
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d14f      	bne.n	8016588 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80164e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80164ea:	eb09 0305 	add.w	r3, r9, r5
 80164ee:	4413      	add	r3, r2
 80164f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80164f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80164f6:	4293      	cmp	r3, r2
 80164f8:	da51      	bge.n	801659e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80164fa:	e038      	b.n	801656e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80164fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80164fe:	e79d      	b.n	801643c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8016500:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8016504:	4659      	mov	r1, fp
 8016506:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016508:	9301      	str	r3, [sp, #4]
 801650a:	ab1d      	add	r3, sp, #116	; 0x74
 801650c:	9300      	str	r3, [sp, #0]
 801650e:	ab1c      	add	r3, sp, #112	; 0x70
 8016510:	f002 fde8 	bl	80190e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8016514:	4604      	mov	r4, r0
 8016516:	e7c0      	b.n	801649a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8016518:	f8d8 0000 	ldr.w	r0, [r8]
 801651c:	6803      	ldr	r3, [r0, #0]
 801651e:	691b      	ldr	r3, [r3, #16]
 8016520:	4798      	blx	r3
 8016522:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016526:	4298      	cmp	r0, r3
 8016528:	f000 80a6 	beq.w	8016678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801652c:	f242 030b 	movw	r3, #8203	; 0x200b
 8016530:	4298      	cmp	r0, r3
 8016532:	f000 80a1 	beq.w	8016678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8016536:	f1bb 0f00 	cmp.w	fp, #0
 801653a:	d100      	bne.n	801653e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801653c:	444d      	add	r5, r9
 801653e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016540:	2a00      	cmp	r2, #0
 8016542:	d1bf      	bne.n	80164c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8016544:	4691      	mov	r9, r2
 8016546:	e097      	b.n	8016678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8016548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801654a:	2b00      	cmp	r3, #0
 801654c:	f000 80ab 	beq.w	80166a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8016550:	f1bb 0f00 	cmp.w	fp, #0
 8016554:	d118      	bne.n	8016588 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8016556:	f8d8 0000 	ldr.w	r0, [r8]
 801655a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801655c:	6803      	ldr	r3, [r0, #0]
 801655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016560:	4798      	blx	r3
 8016562:	4405      	add	r5, r0
 8016564:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016566:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016568:	1aeb      	subs	r3, r5, r3
 801656a:	4293      	cmp	r3, r2
 801656c:	dd17      	ble.n	801659e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801656e:	2c00      	cmp	r4, #0
 8016570:	f000 8097 	beq.w	80166a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8016574:	2c0a      	cmp	r4, #10
 8016576:	f040 8085 	bne.w	8016684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801657a:	240a      	movs	r4, #10
 801657c:	fab4 f084 	clz	r0, r4
 8016580:	0940      	lsrs	r0, r0, #5
 8016582:	b01f      	add	sp, #124	; 0x7c
 8016584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016588:	f8d8 0000 	ldr.w	r0, [r8]
 801658c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801658e:	6803      	ldr	r3, [r0, #0]
 8016590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016592:	4798      	blx	r3
 8016594:	f1bb 0f01 	cmp.w	fp, #1
 8016598:	eba5 0500 	sub.w	r5, r5, r0
 801659c:	d0a4      	beq.n	80164e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801659e:	981c      	ldr	r0, [sp, #112]	; 0x70
 80165a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80165a2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80165a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80165aa:	7b43      	ldrb	r3, [r0, #13]
 80165ac:	4429      	add	r1, r5
 80165ae:	015b      	lsls	r3, r3, #5
 80165b0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80165b4:	7983      	ldrb	r3, [r0, #6]
 80165b6:	4313      	orrs	r3, r2
 80165b8:	440b      	add	r3, r1
 80165ba:	42b3      	cmp	r3, r6
 80165bc:	db5c      	blt.n	8016678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80165be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165c0:	4299      	cmp	r1, r3
 80165c2:	da59      	bge.n	8016678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80165c4:	f8d8 0000 	ldr.w	r0, [r8]
 80165c8:	42ae      	cmp	r6, r5
 80165ca:	6803      	ldr	r3, [r0, #0]
 80165cc:	bfcc      	ite	gt
 80165ce:	1b76      	subgt	r6, r6, r5
 80165d0:	2600      	movle	r6, #0
 80165d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165d4:	bfc8      	it	gt
 80165d6:	b2b6      	uxthgt	r6, r6
 80165d8:	4798      	blx	r3
 80165da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80165dc:	7b5a      	ldrb	r2, [r3, #13]
 80165de:	00d1      	lsls	r1, r2, #3
 80165e0:	f401 7780 	and.w	r7, r1, #256	; 0x100
 80165e4:	7a19      	ldrb	r1, [r3, #8]
 80165e6:	4339      	orrs	r1, r7
 80165e8:	0657      	lsls	r7, r2, #25
 80165ea:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80165ec:	bf48      	it	mi
 80165ee:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80165f2:	4407      	add	r7, r0
 80165f4:	bf48      	it	mi
 80165f6:	b209      	sxthmi	r1, r1
 80165f8:	1a7f      	subs	r7, r7, r1
 80165fa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80165fc:	b2bf      	uxth	r7, r7
 80165fe:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016602:	fa0f fa87 	sxth.w	sl, r7
 8016606:	4551      	cmp	r1, sl
 8016608:	dd3a      	ble.n	8016680 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801660a:	0112      	lsls	r2, r2, #4
 801660c:	79d8      	ldrb	r0, [r3, #7]
 801660e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016612:	4302      	orrs	r2, r0
 8016614:	4492      	add	sl, r2
 8016616:	4551      	cmp	r1, sl
 8016618:	dc2e      	bgt.n	8016678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801661a:	1bcf      	subs	r7, r1, r7
 801661c:	468a      	mov	sl, r1
 801661e:	b2bf      	uxth	r7, r7
 8016620:	9319      	str	r3, [sp, #100]	; 0x64
 8016622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016624:	f8d8 0000 	ldr.w	r0, [r8]
 8016628:	681a      	ldr	r2, [r3, #0]
 801662a:	6801      	ldr	r1, [r0, #0]
 801662c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801662e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016630:	9313      	str	r3, [sp, #76]	; 0x4c
 8016632:	9218      	str	r2, [sp, #96]	; 0x60
 8016634:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8016636:	4788      	blx	r1
 8016638:	f898 1006 	ldrb.w	r1, [r8, #6]
 801663c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801663e:	910b      	str	r1, [sp, #44]	; 0x2c
 8016640:	f898 100e 	ldrb.w	r1, [r8, #14]
 8016644:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016646:	910a      	str	r1, [sp, #40]	; 0x28
 8016648:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801664c:	9109      	str	r1, [sp, #36]	; 0x24
 801664e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8016652:	9305      	str	r3, [sp, #20]
 8016654:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016656:	9206      	str	r2, [sp, #24]
 8016658:	e9cd a601 	strd	sl, r6, [sp, #4]
 801665c:	442e      	add	r6, r5
 801665e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8016662:	b236      	sxth	r6, r6
 8016664:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016666:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801666a:	9600      	str	r6, [sp, #0]
 801666c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801666e:	681a      	ldr	r2, [r3, #0]
 8016670:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016672:	685b      	ldr	r3, [r3, #4]
 8016674:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016676:	47b0      	blx	r6
 8016678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801667a:	3301      	adds	r3, #1
 801667c:	930e      	str	r3, [sp, #56]	; 0x38
 801667e:	e6e5      	b.n	801644c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8016680:	2700      	movs	r7, #0
 8016682:	e7cd      	b.n	8016620 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8016684:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016686:	3501      	adds	r5, #1
 8016688:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801668a:	429d      	cmp	r5, r3
 801668c:	f6bf af76 	bge.w	801657c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8016690:	4659      	mov	r1, fp
 8016692:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016694:	f7f0 f946 	bl	8006924 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016698:	4604      	mov	r4, r0
 801669a:	b110      	cbz	r0, 80166a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801669c:	280a      	cmp	r0, #10
 801669e:	d1f2      	bne.n	8016686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80166a0:	e76b      	b.n	801657a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80166a2:	2400      	movs	r4, #0
 80166a4:	e76a      	b.n	801657c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80166a6:	f1bb 0f00 	cmp.w	fp, #0
 80166aa:	f43f af5b 	beq.w	8016564 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80166ae:	e776      	b.n	801659e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

080166b0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80166b0:	b530      	push	{r4, r5, lr}
 80166b2:	8a44      	ldrh	r4, [r0, #18]
 80166b4:	8ac5      	ldrh	r5, [r0, #22]
 80166b6:	82c3      	strh	r3, [r0, #22]
 80166b8:	442c      	add	r4, r5
 80166ba:	1ae4      	subs	r4, r4, r3
 80166bc:	8b03      	ldrh	r3, [r0, #24]
 80166be:	8244      	strh	r4, [r0, #18]
 80166c0:	8a84      	ldrh	r4, [r0, #20]
 80166c2:	4422      	add	r2, r4
 80166c4:	440c      	add	r4, r1
 80166c6:	1a59      	subs	r1, r3, r1
 80166c8:	8342      	strh	r2, [r0, #26]
 80166ca:	8284      	strh	r4, [r0, #20]
 80166cc:	8301      	strh	r1, [r0, #24]
 80166ce:	bd30      	pop	{r4, r5, pc}

080166d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80166d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166d4:	7a43      	ldrb	r3, [r0, #9]
 80166d6:	b087      	sub	sp, #28
 80166d8:	4604      	mov	r4, r0
 80166da:	460f      	mov	r7, r1
 80166dc:	1eda      	subs	r2, r3, #3
 80166de:	b2d2      	uxtb	r2, r2
 80166e0:	2900      	cmp	r1, #0
 80166e2:	d036      	beq.n	8016752 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 80166e4:	2a01      	cmp	r2, #1
 80166e6:	d932      	bls.n	801674e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 80166e8:	1e58      	subs	r0, r3, #1
 80166ea:	f1d0 0b00 	rsbs	fp, r0, #0
 80166ee:	eb4b 0b00 	adc.w	fp, fp, r0
 80166f2:	1e99      	subs	r1, r3, #2
 80166f4:	424b      	negs	r3, r1
 80166f6:	414b      	adcs	r3, r1
 80166f8:	9303      	str	r3, [sp, #12]
 80166fa:	2300      	movs	r3, #0
 80166fc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8016700:	2500      	movs	r5, #0
 8016702:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8016706:	46a9      	mov	r9, r5
 8016708:	8265      	strh	r5, [r4, #18]
 801670a:	82a5      	strh	r5, [r4, #20]
 801670c:	2300      	movs	r3, #0
 801670e:	9305      	str	r3, [sp, #20]
 8016710:	8823      	ldrh	r3, [r4, #0]
 8016712:	2b20      	cmp	r3, #32
 8016714:	d02b      	beq.n	801676e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8016716:	eba3 020a 	sub.w	r2, r3, sl
 801671a:	4256      	negs	r6, r2
 801671c:	4156      	adcs	r6, r2
 801671e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8016722:	4293      	cmp	r3, r2
 8016724:	d004      	beq.n	8016730 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8016726:	4553      	cmp	r3, sl
 8016728:	bf16      	itet	ne
 801672a:	4699      	movne	r9, r3
 801672c:	2601      	moveq	r6, #1
 801672e:	2600      	movne	r6, #0
 8016730:	ab05      	add	r3, sp, #20
 8016732:	68e2      	ldr	r2, [r4, #12]
 8016734:	7a21      	ldrb	r1, [r4, #8]
 8016736:	6860      	ldr	r0, [r4, #4]
 8016738:	f002 fc7c 	bl	8019034 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801673c:	8020      	strh	r0, [r4, #0]
 801673e:	b9c8      	cbnz	r0, 8016774 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8016740:	8b22      	ldrh	r2, [r4, #24]
 8016742:	2300      	movs	r3, #0
 8016744:	4611      	mov	r1, r2
 8016746:	4620      	mov	r0, r4
 8016748:	f7ff ffb2 	bl	80166b0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801674c:	e066      	b.n	801681c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801674e:	468b      	mov	fp, r1
 8016750:	e7cf      	b.n	80166f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8016752:	3b01      	subs	r3, #1
 8016754:	2a01      	cmp	r2, #1
 8016756:	9103      	str	r1, [sp, #12]
 8016758:	468b      	mov	fp, r1
 801675a:	bf8c      	ite	hi
 801675c:	2200      	movhi	r2, #0
 801675e:	2201      	movls	r2, #1
 8016760:	2b01      	cmp	r3, #1
 8016762:	9202      	str	r2, [sp, #8]
 8016764:	bf8c      	ite	hi
 8016766:	2300      	movhi	r3, #0
 8016768:	2301      	movls	r3, #1
 801676a:	9301      	str	r3, [sp, #4]
 801676c:	e7c8      	b.n	8016700 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801676e:	4699      	mov	r9, r3
 8016770:	2601      	movs	r6, #1
 8016772:	e7dd      	b.n	8016730 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8016774:	8ae3      	ldrh	r3, [r4, #22]
 8016776:	280a      	cmp	r0, #10
 8016778:	f103 0301 	add.w	r3, r3, #1
 801677c:	82e3      	strh	r3, [r4, #22]
 801677e:	d0df      	beq.n	8016740 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8016780:	9a05      	ldr	r2, [sp, #20]
 8016782:	bb42      	cbnz	r2, 80167d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8016784:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016788:	4298      	cmp	r0, r3
 801678a:	d001      	beq.n	8016790 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801678c:	4550      	cmp	r0, sl
 801678e:	d1bd      	bne.n	801670c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016790:	8823      	ldrh	r3, [r4, #0]
 8016792:	8b21      	ldrh	r1, [r4, #24]
 8016794:	2b20      	cmp	r3, #32
 8016796:	d001      	beq.n	801679c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8016798:	4553      	cmp	r3, sl
 801679a:	d131      	bne.n	8016800 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801679c:	2e00      	cmp	r6, #0
 801679e:	bf0a      	itet	eq
 80167a0:	460d      	moveq	r5, r1
 80167a2:	4630      	movne	r0, r6
 80167a4:	2001      	moveq	r0, #1
 80167a6:	440a      	add	r2, r1
 80167a8:	8aa3      	ldrh	r3, [r4, #20]
 80167aa:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80167ae:	b292      	uxth	r2, r2
 80167b0:	8322      	strh	r2, [r4, #24]
 80167b2:	4413      	add	r3, r2
 80167b4:	2f00      	cmp	r7, #0
 80167b6:	d03a      	beq.n	801682e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 80167b8:	f1bb 0f00 	cmp.w	fp, #0
 80167bc:	d102      	bne.n	80167c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80167be:	9903      	ldr	r1, [sp, #12]
 80167c0:	b301      	cbz	r1, 8016804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80167c2:	b1f8      	cbz	r0, 8016804 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80167c4:	8ba1      	ldrh	r1, [r4, #28]
 80167c6:	4419      	add	r1, r3
 80167c8:	458c      	cmp	ip, r1
 80167ca:	da2a      	bge.n	8016822 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80167cc:	8a61      	ldrh	r1, [r4, #18]
 80167ce:	b341      	cbz	r1, 8016822 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80167d0:	4563      	cmp	r3, ip
 80167d2:	dd9b      	ble.n	801670c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80167d4:	e01c      	b.n	8016810 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80167d6:	8893      	ldrh	r3, [r2, #4]
 80167d8:	4649      	mov	r1, r9
 80167da:	8023      	strh	r3, [r4, #0]
 80167dc:	f892 800d 	ldrb.w	r8, [r2, #13]
 80167e0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80167e4:	f408 7080 	and.w	r0, r8, #256	; 0x100
 80167e8:	f892 800a 	ldrb.w	r8, [r2, #10]
 80167ec:	ea48 0800 	orr.w	r8, r8, r0
 80167f0:	68e0      	ldr	r0, [r4, #12]
 80167f2:	6803      	ldr	r3, [r0, #0]
 80167f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167f6:	4798      	blx	r3
 80167f8:	eb08 0200 	add.w	r2, r8, r0
 80167fc:	b292      	uxth	r2, r2
 80167fe:	e7c7      	b.n	8016790 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8016800:	2000      	movs	r0, #0
 8016802:	e7d0      	b.n	80167a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8016804:	4563      	cmp	r3, ip
 8016806:	dd81      	ble.n	801670c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016808:	8a63      	ldrh	r3, [r4, #18]
 801680a:	2b00      	cmp	r3, #0
 801680c:	f43f af7e 	beq.w	801670c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016810:	2301      	movs	r3, #1
 8016812:	8ba2      	ldrh	r2, [r4, #28]
 8016814:	77a3      	strb	r3, [r4, #30]
 8016816:	8b63      	ldrh	r3, [r4, #26]
 8016818:	4413      	add	r3, r2
 801681a:	8363      	strh	r3, [r4, #26]
 801681c:	b007      	add	sp, #28
 801681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016822:	2300      	movs	r3, #0
 8016824:	4611      	mov	r1, r2
 8016826:	4620      	mov	r0, r4
 8016828:	f7ff ff42 	bl	80166b0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801682c:	e76e      	b.n	801670c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801682e:	4563      	cmp	r3, ip
 8016830:	dd14      	ble.n	801685c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8016832:	9b02      	ldr	r3, [sp, #8]
 8016834:	b113      	cbz	r3, 801683c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8016836:	2301      	movs	r3, #1
 8016838:	460a      	mov	r2, r1
 801683a:	e783      	b.n	8016744 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801683c:	9b01      	ldr	r3, [sp, #4]
 801683e:	2b00      	cmp	r3, #0
 8016840:	f43f af64 	beq.w	801670c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016844:	2800      	cmp	r0, #0
 8016846:	f47f af61 	bne.w	801670c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801684a:	b116      	cbz	r6, 8016852 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801684c:	2301      	movs	r3, #1
 801684e:	462a      	mov	r2, r5
 8016850:	e779      	b.n	8016746 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8016852:	8a63      	ldrh	r3, [r4, #18]
 8016854:	2b00      	cmp	r3, #0
 8016856:	f43f af59 	beq.w	801670c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801685a:	e7df      	b.n	801681c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801685c:	2800      	cmp	r0, #0
 801685e:	f47f af55 	bne.w	801670c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016862:	2e00      	cmp	r6, #0
 8016864:	f43f af52 	beq.w	801670c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016868:	2301      	movs	r3, #1
 801686a:	462a      	mov	r2, r5
 801686c:	e7db      	b.n	8016826 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801686e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801686e:	b530      	push	{r4, r5, lr}
 8016870:	4605      	mov	r5, r0
 8016872:	b08b      	sub	sp, #44	; 0x2c
 8016874:	b191      	cbz	r1, 801689c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8016876:	2401      	movs	r4, #1
 8016878:	e9cd 3100 	strd	r3, r1, [sp]
 801687c:	4613      	mov	r3, r2
 801687e:	4601      	mov	r1, r0
 8016880:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8016884:	a802      	add	r0, sp, #8
 8016886:	f7ff fd0b 	bl	80162a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801688a:	2100      	movs	r1, #0
 801688c:	a802      	add	r0, sp, #8
 801688e:	f7ff ff1f 	bl	80166d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016892:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016896:	b163      	cbz	r3, 80168b2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8016898:	3401      	adds	r4, #1
 801689a:	e7f6      	b.n	801688a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801689c:	2401      	movs	r4, #1
 801689e:	f002 fcc3 	bl	8019228 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80168a2:	280a      	cmp	r0, #10
 80168a4:	4628      	mov	r0, r5
 80168a6:	bf08      	it	eq
 80168a8:	3401      	addeq	r4, #1
 80168aa:	f002 fcbd 	bl	8019228 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80168ae:	2800      	cmp	r0, #0
 80168b0:	d1f7      	bne.n	80168a2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80168b2:	b2a0      	uxth	r0, r4
 80168b4:	b00b      	add	sp, #44	; 0x2c
 80168b6:	bd30      	pop	{r4, r5, pc}

080168b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80168b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168bc:	b0e5      	sub	sp, #404	; 0x194
 80168be:	4689      	mov	r9, r1
 80168c0:	461c      	mov	r4, r3
 80168c2:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 80168c6:	900a      	str	r0, [sp, #40]	; 0x28
 80168c8:	f1ba 0f00 	cmp.w	sl, #0
 80168cc:	f000 80b4 	beq.w	8016a38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	f000 80b0 	beq.w	8016a38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80168d8:	7ba3      	ldrb	r3, [r4, #14]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	f000 80ac 	beq.w	8016a38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80168e0:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 80168e4:	6810      	ldr	r0, [r2, #0]
 80168e6:	6851      	ldr	r1, [r2, #4]
 80168e8:	2500      	movs	r5, #0
 80168ea:	4643      	mov	r3, r8
 80168ec:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80168f0:	950f      	str	r5, [sp, #60]	; 0x3c
 80168f2:	af19      	add	r7, sp, #100	; 0x64
 80168f4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80168f8:	79a2      	ldrb	r2, [r4, #6]
 80168fa:	c303      	stmia	r3!, {r0, r1}
 80168fc:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8016900:	a90f      	add	r1, sp, #60	; 0x3c
 8016902:	4640      	mov	r0, r8
 8016904:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8016908:	f7ff fd40 	bl	801638c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801690c:	a90f      	add	r1, sp, #60	; 0x3c
 801690e:	79a2      	ldrb	r2, [r4, #6]
 8016910:	4608      	mov	r0, r1
 8016912:	f7ff fd3b 	bl	801638c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016916:	4638      	mov	r0, r7
 8016918:	f002 f839 	bl	801898e <_ZN8touchgfx12TextProviderC1Ev>
 801691c:	6820      	ldr	r0, [r4, #0]
 801691e:	6803      	ldr	r3, [r0, #0]
 8016920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016922:	4798      	blx	r3
 8016924:	4606      	mov	r6, r0
 8016926:	6820      	ldr	r0, [r4, #0]
 8016928:	6803      	ldr	r3, [r0, #0]
 801692a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801692c:	4798      	blx	r3
 801692e:	4633      	mov	r3, r6
 8016930:	9000      	str	r0, [sp, #0]
 8016932:	4651      	mov	r1, sl
 8016934:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8016936:	4638      	mov	r0, r7
 8016938:	f002 f87c 	bl	8018a34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801693c:	7923      	ldrb	r3, [r4, #4]
 801693e:	6820      	ldr	r0, [r4, #0]
 8016940:	9308      	str	r3, [sp, #32]
 8016942:	6803      	ldr	r3, [r0, #0]
 8016944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016946:	4798      	blx	r3
 8016948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801694c:	181e      	adds	r6, r3, r0
 801694e:	42ae      	cmp	r6, r5
 8016950:	dd06      	ble.n	8016960 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8016952:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8016956:	4282      	cmp	r2, r0
 8016958:	bfa4      	itt	ge
 801695a:	189d      	addge	r5, r3, r2
 801695c:	fb95 f5f6 	sdivge	r5, r5, r6
 8016960:	a832      	add	r0, sp, #200	; 0xc8
 8016962:	f002 f814 	bl	801898e <_ZN8touchgfx12TextProviderC1Ev>
 8016966:	7c23      	ldrb	r3, [r4, #16]
 8016968:	b17b      	cbz	r3, 801698a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801696a:	6820      	ldr	r0, [r4, #0]
 801696c:	6803      	ldr	r3, [r0, #0]
 801696e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016970:	4798      	blx	r3
 8016972:	4683      	mov	fp, r0
 8016974:	6820      	ldr	r0, [r4, #0]
 8016976:	6803      	ldr	r3, [r0, #0]
 8016978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801697a:	4798      	blx	r3
 801697c:	465b      	mov	r3, fp
 801697e:	9000      	str	r0, [sp, #0]
 8016980:	4651      	mov	r1, sl
 8016982:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8016984:	a832      	add	r0, sp, #200	; 0xc8
 8016986:	f002 f855 	bl	8018a34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801698a:	7be1      	ldrb	r1, [r4, #15]
 801698c:	a811      	add	r0, sp, #68	; 0x44
 801698e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8016992:	7963      	ldrb	r3, [r4, #5]
 8016994:	1a52      	subs	r2, r2, r1
 8016996:	7c21      	ldrb	r1, [r4, #16]
 8016998:	9101      	str	r1, [sp, #4]
 801699a:	b292      	uxth	r2, r2
 801699c:	6821      	ldr	r1, [r4, #0]
 801699e:	9100      	str	r1, [sp, #0]
 80169a0:	a932      	add	r1, sp, #200	; 0xc8
 80169a2:	f7ff fc7d 	bl	80162a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80169a6:	7c23      	ldrb	r3, [r4, #16]
 80169a8:	b9bb      	cbnz	r3, 80169da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 80169aa:	fa1f fa86 	uxth.w	sl, r6
 80169ae:	2d00      	cmp	r5, #0
 80169b0:	dd45      	ble.n	8016a3e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 80169b2:	4638      	mov	r0, r7
 80169b4:	f002 fc38 	bl	8019228 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80169b8:	2800      	cmp	r0, #0
 80169ba:	d03d      	beq.n	8016a38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80169bc:	280a      	cmp	r0, #10
 80169be:	d1f6      	bne.n	80169ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 80169c0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80169c4:	3d01      	subs	r5, #1
 80169c6:	4453      	add	r3, sl
 80169c8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80169cc:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80169d0:	eba3 030a 	sub.w	r3, r3, sl
 80169d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80169d8:	e7e9      	b.n	80169ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 80169da:	0073      	lsls	r3, r6, #1
 80169dc:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80169e0:	fa1f fa86 	uxth.w	sl, r6
 80169e4:	9309      	str	r3, [sp, #36]	; 0x24
 80169e6:	2d00      	cmp	r5, #0
 80169e8:	dd29      	ble.n	8016a3e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 80169ea:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80169ee:	a811      	add	r0, sp, #68	; 0x44
 80169f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169f2:	428b      	cmp	r3, r1
 80169f4:	bfd4      	ite	le
 80169f6:	2100      	movle	r1, #0
 80169f8:	2101      	movgt	r1, #1
 80169fa:	f7ff fe69 	bl	80166d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80169fe:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8016a02:	3b01      	subs	r3, #1
 8016a04:	b29b      	uxth	r3, r3
 8016a06:	455b      	cmp	r3, fp
 8016a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a0a:	d005      	beq.n	8016a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8016a0c:	7961      	ldrb	r1, [r4, #5]
 8016a0e:	4638      	mov	r0, r7
 8016a10:	f7ef ff88 	bl	8006924 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a16:	e7f4      	b.n	8016a02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8016a18:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8016a1c:	3d01      	subs	r5, #1
 8016a1e:	4453      	add	r3, sl
 8016a20:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016a24:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8016a28:	eba3 030a 	sub.w	r3, r3, sl
 8016a2c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8016a30:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d1d6      	bne.n	80169e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8016a38:	b065      	add	sp, #404	; 0x194
 8016a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a3e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8016a42:	ad4b      	add	r5, sp, #300	; 0x12c
 8016a44:	f04f 0b00 	mov.w	fp, #0
 8016a48:	7c23      	ldrb	r3, [r4, #16]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d067      	beq.n	8016b1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8016a4e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8016a52:	a811      	add	r0, sp, #68	; 0x44
 8016a54:	458a      	cmp	sl, r1
 8016a56:	bfd4      	ite	le
 8016a58:	2100      	movle	r1, #0
 8016a5a:	2101      	movgt	r1, #1
 8016a5c:	f7ff fe38 	bl	80166d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016a60:	9b08      	ldr	r3, [sp, #32]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d056      	beq.n	8016b14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8016a66:	7c23      	ldrb	r3, [r4, #16]
 8016a68:	2264      	movs	r2, #100	; 0x64
 8016a6a:	4639      	mov	r1, r7
 8016a6c:	4628      	mov	r0, r5
 8016a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8016a70:	f00f f8fe 	bl	8025c70 <memcpy>
 8016a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d059      	beq.n	8016b2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 8016a7a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8016a7e:	7922      	ldrb	r2, [r4, #4]
 8016a80:	2a01      	cmp	r2, #1
 8016a82:	d13d      	bne.n	8016b00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8016a84:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8016a88:	1ac0      	subs	r0, r0, r3
 8016a8a:	2302      	movs	r3, #2
 8016a8c:	fb90 f0f3 	sdiv	r0, r0, r3
 8016a90:	b200      	sxth	r0, r0
 8016a92:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016a96:	4418      	add	r0, r3
 8016a98:	7c23      	ldrb	r3, [r4, #16]
 8016a9a:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d03a      	beq.n	8016b18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8016aa2:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8016aa6:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8016aaa:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8016aae:	9500      	str	r5, [sp, #0]
 8016ab0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ab2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016ab6:	e9cd b703 	strd	fp, r7, [sp, #12]
 8016aba:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8016abe:	464a      	mov	r2, r9
 8016ac0:	2100      	movs	r1, #0
 8016ac2:	f7ff fc94 	bl	80163ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016ac6:	2800      	cmp	r0, #0
 8016ac8:	d1b6      	bne.n	8016a38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8016aca:	b2b2      	uxth	r2, r6
 8016acc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8016ad0:	4611      	mov	r1, r2
 8016ad2:	4413      	add	r3, r2
 8016ad4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8016ad8:	b21b      	sxth	r3, r3
 8016ada:	1a52      	subs	r2, r2, r1
 8016adc:	7c21      	ldrb	r1, [r4, #16]
 8016ade:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016ae2:	b212      	sxth	r2, r2
 8016ae4:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8016ae8:	b109      	cbz	r1, 8016aee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 8016aea:	42b2      	cmp	r2, r6
 8016aec:	dba4      	blt.n	8016a38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8016aee:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8016af2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8016af6:	440a      	add	r2, r1
 8016af8:	b212      	sxth	r2, r2
 8016afa:	4293      	cmp	r3, r2
 8016afc:	dda4      	ble.n	8016a48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 8016afe:	e79b      	b.n	8016a38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8016b00:	2a02      	cmp	r2, #2
 8016b02:	d105      	bne.n	8016b10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8016b04:	7be2      	ldrb	r2, [r4, #15]
 8016b06:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8016b0a:	1a80      	subs	r0, r0, r2
 8016b0c:	1ac0      	subs	r0, r0, r3
 8016b0e:	e7bf      	b.n	8016a90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 8016b10:	2000      	movs	r0, #0
 8016b12:	e7be      	b.n	8016a92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8016b14:	7be0      	ldrb	r0, [r4, #15]
 8016b16:	e7bc      	b.n	8016a92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8016b18:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016b1c:	e7c3      	b.n	8016aa6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8016b1e:	9b08      	ldr	r3, [sp, #32]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d0f7      	beq.n	8016b14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8016b24:	2264      	movs	r2, #100	; 0x64
 8016b26:	4639      	mov	r1, r7
 8016b28:	4628      	mov	r0, r5
 8016b2a:	f00f f8a1 	bl	8025c70 <memcpy>
 8016b2e:	2300      	movs	r3, #0
 8016b30:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016b34:	6821      	ldr	r1, [r4, #0]
 8016b36:	4628      	mov	r0, r5
 8016b38:	f7ff fbec 	bl	8016314 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8016b3c:	b203      	sxth	r3, r0
 8016b3e:	e79e      	b.n	8016a7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

08016b40 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016b40:	2b02      	cmp	r3, #2
 8016b42:	b510      	push	{r4, lr}
 8016b44:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016b48:	d00b      	beq.n	8016b62 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8016b4a:	2b03      	cmp	r3, #3
 8016b4c:	d00e      	beq.n	8016b6c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8016b4e:	2b01      	cmp	r3, #1
 8016b50:	d001      	beq.n	8016b56 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8016b52:	1860      	adds	r0, r4, r1
 8016b54:	bd10      	pop	{r4, pc}
 8016b56:	8880      	ldrh	r0, [r0, #4]
 8016b58:	4420      	add	r0, r4
 8016b5a:	b200      	sxth	r0, r0
 8016b5c:	1a80      	subs	r0, r0, r2
 8016b5e:	3801      	subs	r0, #1
 8016b60:	e7f8      	b.n	8016b54 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8016b62:	8880      	ldrh	r0, [r0, #4]
 8016b64:	4420      	add	r0, r4
 8016b66:	b200      	sxth	r0, r0
 8016b68:	1a40      	subs	r0, r0, r1
 8016b6a:	e7f8      	b.n	8016b5e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016b6c:	18a0      	adds	r0, r4, r2
 8016b6e:	e7f1      	b.n	8016b54 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08016b70 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016b70:	2b02      	cmp	r3, #2
 8016b72:	b510      	push	{r4, lr}
 8016b74:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8016b78:	d006      	beq.n	8016b88 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8016b7a:	2b03      	cmp	r3, #3
 8016b7c:	d00a      	beq.n	8016b94 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016b7e:	2b01      	cmp	r3, #1
 8016b80:	bf14      	ite	ne
 8016b82:	18a0      	addne	r0, r4, r2
 8016b84:	1860      	addeq	r0, r4, r1
 8016b86:	bd10      	pop	{r4, pc}
 8016b88:	88c0      	ldrh	r0, [r0, #6]
 8016b8a:	4420      	add	r0, r4
 8016b8c:	b200      	sxth	r0, r0
 8016b8e:	1a80      	subs	r0, r0, r2
 8016b90:	3801      	subs	r0, #1
 8016b92:	e7f8      	b.n	8016b86 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8016b94:	88c0      	ldrh	r0, [r0, #6]
 8016b96:	4420      	add	r0, r4
 8016b98:	b200      	sxth	r0, r0
 8016b9a:	1a40      	subs	r0, r0, r1
 8016b9c:	e7f8      	b.n	8016b90 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08016ba0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016ba0:	4b01      	ldr	r3, [pc, #4]	; (8016ba8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	601a      	str	r2, [r3, #0]
 8016ba6:	4770      	bx	lr
 8016ba8:	2400aef4 	.word	0x2400aef4

08016bac <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016bac:	4603      	mov	r3, r0
 8016bae:	b1c8      	cbz	r0, 8016be4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016bb0:	0c02      	lsrs	r2, r0, #16
 8016bb2:	0412      	lsls	r2, r2, #16
 8016bb4:	b9a2      	cbnz	r2, 8016be0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8016bb6:	0403      	lsls	r3, r0, #16
 8016bb8:	2010      	movs	r0, #16
 8016bba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016bbe:	bf04      	itt	eq
 8016bc0:	021b      	lsleq	r3, r3, #8
 8016bc2:	3008      	addeq	r0, #8
 8016bc4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016bc8:	bf04      	itt	eq
 8016bca:	011b      	lsleq	r3, r3, #4
 8016bcc:	3004      	addeq	r0, #4
 8016bce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016bd2:	bf04      	itt	eq
 8016bd4:	009b      	lsleq	r3, r3, #2
 8016bd6:	3002      	addeq	r0, #2
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	db04      	blt.n	8016be6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016bdc:	3001      	adds	r0, #1
 8016bde:	4770      	bx	lr
 8016be0:	2000      	movs	r0, #0
 8016be2:	e7ea      	b.n	8016bba <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016be4:	2020      	movs	r0, #32
 8016be6:	4770      	bx	lr

08016be8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8016be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bec:	b087      	sub	sp, #28
 8016bee:	4681      	mov	r9, r0
 8016bf0:	4698      	mov	r8, r3
 8016bf2:	4610      	mov	r0, r2
 8016bf4:	460d      	mov	r5, r1
 8016bf6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8016bfa:	b981      	cbnz	r1, 8016c1e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8016bfc:	b14b      	cbz	r3, 8016c12 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8016bfe:	460b      	mov	r3, r1
 8016c00:	464a      	mov	r2, r9
 8016c02:	4641      	mov	r1, r8
 8016c04:	e9cd 4700 	strd	r4, r7, [sp]
 8016c08:	f7ff ffee 	bl	8016be8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016c0c:	b007      	add	sp, #28
 8016c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c12:	f04f 33ff 	mov.w	r3, #4294967295
 8016c16:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016c1a:	603b      	str	r3, [r7, #0]
 8016c1c:	e7f6      	b.n	8016c0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016c1e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8016c22:	d107      	bne.n	8016c34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8016c24:	fb09 f602 	mul.w	r6, r9, r2
 8016c28:	fbb6 f0f4 	udiv	r0, r6, r4
 8016c2c:	fb04 6610 	mls	r6, r4, r0, r6
 8016c30:	603e      	str	r6, [r7, #0]
 8016c32:	e7eb      	b.n	8016c0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016c34:	2601      	movs	r6, #1
 8016c36:	fa09 fb01 	lsl.w	fp, r9, r1
 8016c3a:	408e      	lsls	r6, r1
 8016c3c:	fbbb f3f4 	udiv	r3, fp, r4
 8016c40:	3e01      	subs	r6, #1
 8016c42:	9302      	str	r3, [sp, #8]
 8016c44:	fb0a f303 	mul.w	r3, sl, r3
 8016c48:	4016      	ands	r6, r2
 8016c4a:	9303      	str	r3, [sp, #12]
 8016c4c:	4630      	mov	r0, r6
 8016c4e:	f7ff ffad 	bl	8016bac <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016c52:	464a      	mov	r2, r9
 8016c54:	460b      	mov	r3, r1
 8016c56:	4601      	mov	r1, r0
 8016c58:	4630      	mov	r0, r6
 8016c5a:	e9cd 4700 	strd	r4, r7, [sp]
 8016c5e:	f7ff ffc3 	bl	8016be8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016c62:	9b02      	ldr	r3, [sp, #8]
 8016c64:	4606      	mov	r6, r0
 8016c66:	eb05 0108 	add.w	r1, r5, r8
 8016c6a:	fb04 bb13 	mls	fp, r4, r3, fp
 8016c6e:	4658      	mov	r0, fp
 8016c70:	f7ff ff9c 	bl	8016bac <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016c74:	ab05      	add	r3, sp, #20
 8016c76:	465a      	mov	r2, fp
 8016c78:	e9cd 4300 	strd	r4, r3, [sp]
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	4650      	mov	r0, sl
 8016c80:	f7ff ffb2 	bl	8016be8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016c84:	6839      	ldr	r1, [r7, #0]
 8016c86:	9a05      	ldr	r2, [sp, #20]
 8016c88:	9b03      	ldr	r3, [sp, #12]
 8016c8a:	4411      	add	r1, r2
 8016c8c:	fbb1 f2f4 	udiv	r2, r1, r4
 8016c90:	18d3      	adds	r3, r2, r3
 8016c92:	fb04 1412 	mls	r4, r4, r2, r1
 8016c96:	441e      	add	r6, r3
 8016c98:	603c      	str	r4, [r7, #0]
 8016c9a:	4430      	add	r0, r6
 8016c9c:	e7b6      	b.n	8016c0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08016c9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016c9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ca2:	b085      	sub	sp, #20
 8016ca4:	f1b0 0900 	subs.w	r9, r0, #0
 8016ca8:	461d      	mov	r5, r3
 8016caa:	4617      	mov	r7, r2
 8016cac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016cae:	bfbb      	ittet	lt
 8016cb0:	f1c9 0900 	rsblt	r9, r9, #0
 8016cb4:	f04f 36ff 	movlt.w	r6, #4294967295
 8016cb8:	2601      	movge	r6, #1
 8016cba:	6823      	ldrlt	r3, [r4, #0]
 8016cbc:	bfbc      	itt	lt
 8016cbe:	425b      	neglt	r3, r3
 8016cc0:	6023      	strlt	r3, [r4, #0]
 8016cc2:	2a00      	cmp	r2, #0
 8016cc4:	da04      	bge.n	8016cd0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016cc6:	6823      	ldr	r3, [r4, #0]
 8016cc8:	4257      	negs	r7, r2
 8016cca:	4276      	negs	r6, r6
 8016ccc:	425b      	negs	r3, r3
 8016cce:	6023      	str	r3, [r4, #0]
 8016cd0:	2d00      	cmp	r5, #0
 8016cd2:	4638      	mov	r0, r7
 8016cd4:	bfba      	itte	lt
 8016cd6:	426d      	neglt	r5, r5
 8016cd8:	f04f 38ff 	movlt.w	r8, #4294967295
 8016cdc:	f04f 0801 	movge.w	r8, #1
 8016ce0:	f7ff ff64 	bl	8016bac <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016ce4:	ab03      	add	r3, sp, #12
 8016ce6:	463a      	mov	r2, r7
 8016ce8:	e9cd 5300 	strd	r5, r3, [sp]
 8016cec:	4603      	mov	r3, r0
 8016cee:	4648      	mov	r0, r9
 8016cf0:	f7ff ff7a 	bl	8016be8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016cf4:	6823      	ldr	r3, [r4, #0]
 8016cf6:	9a03      	ldr	r2, [sp, #12]
 8016cf8:	4546      	cmp	r6, r8
 8016cfa:	441a      	add	r2, r3
 8016cfc:	fb92 f3f5 	sdiv	r3, r2, r5
 8016d00:	4418      	add	r0, r3
 8016d02:	fb05 2313 	mls	r3, r5, r3, r2
 8016d06:	bf18      	it	ne
 8016d08:	4240      	negne	r0, r0
 8016d0a:	1c72      	adds	r2, r6, #1
 8016d0c:	6023      	str	r3, [r4, #0]
 8016d0e:	d105      	bne.n	8016d1c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	f1c3 0200 	rsb	r2, r3, #0
 8016d16:	db0b      	blt.n	8016d30 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8016d18:	6022      	str	r2, [r4, #0]
 8016d1a:	e006      	b.n	8016d2a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016d1c:	2e01      	cmp	r6, #1
 8016d1e:	d104      	bne.n	8016d2a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	da02      	bge.n	8016d2a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016d24:	442b      	add	r3, r5
 8016d26:	3801      	subs	r0, #1
 8016d28:	6023      	str	r3, [r4, #0]
 8016d2a:	b005      	add	sp, #20
 8016d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d30:	3801      	subs	r0, #1
 8016d32:	1b52      	subs	r2, r2, r5
 8016d34:	e7f0      	b.n	8016d18 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08016d38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016d38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016d3c:	4c1c      	ldr	r4, [pc, #112]	; (8016db0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8016d3e:	4605      	mov	r5, r0
 8016d40:	6807      	ldr	r7, [r0, #0]
 8016d42:	69a3      	ldr	r3, [r4, #24]
 8016d44:	b92b      	cbnz	r3, 8016d52 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8016d46:	6840      	ldr	r0, [r0, #4]
 8016d48:	e9c5 7000 	strd	r7, r0, [r5]
 8016d4c:	b004      	add	sp, #16
 8016d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d52:	f04f 0802 	mov.w	r8, #2
 8016d56:	68a2      	ldr	r2, [r4, #8]
 8016d58:	ae04      	add	r6, sp, #16
 8016d5a:	6820      	ldr	r0, [r4, #0]
 8016d5c:	fb93 f1f8 	sdiv	r1, r3, r8
 8016d60:	440a      	add	r2, r1
 8016d62:	69e1      	ldr	r1, [r4, #28]
 8016d64:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016d68:	463a      	mov	r2, r7
 8016d6a:	9600      	str	r6, [sp, #0]
 8016d6c:	f7ff ff97 	bl	8016c9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016d70:	69a3      	ldr	r3, [r4, #24]
 8016d72:	4607      	mov	r7, r0
 8016d74:	686a      	ldr	r2, [r5, #4]
 8016d76:	6a21      	ldr	r1, [r4, #32]
 8016d78:	9600      	str	r6, [sp, #0]
 8016d7a:	6860      	ldr	r0, [r4, #4]
 8016d7c:	f7ff ff8f 	bl	8016c9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016d80:	69a3      	ldr	r3, [r4, #24]
 8016d82:	6962      	ldr	r2, [r4, #20]
 8016d84:	4407      	add	r7, r0
 8016d86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016d88:	9600      	str	r6, [sp, #0]
 8016d8a:	68e0      	ldr	r0, [r4, #12]
 8016d8c:	fb93 f8f8 	sdiv	r8, r3, r8
 8016d90:	4442      	add	r2, r8
 8016d92:	9203      	str	r2, [sp, #12]
 8016d94:	682a      	ldr	r2, [r5, #0]
 8016d96:	f7ff ff82 	bl	8016c9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016d9a:	4680      	mov	r8, r0
 8016d9c:	9600      	str	r6, [sp, #0]
 8016d9e:	69a3      	ldr	r3, [r4, #24]
 8016da0:	686a      	ldr	r2, [r5, #4]
 8016da2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016da4:	6920      	ldr	r0, [r4, #16]
 8016da6:	f7ff ff7a 	bl	8016c9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016daa:	4440      	add	r0, r8
 8016dac:	e7cc      	b.n	8016d48 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8016dae:	bf00      	nop
 8016db0:	2400aef8 	.word	0x2400aef8

08016db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016db4:	4b07      	ldr	r3, [pc, #28]	; (8016dd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016db6:	781b      	ldrb	r3, [r3, #0]
 8016db8:	2b01      	cmp	r3, #1
 8016dba:	d109      	bne.n	8016dd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8016dbc:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016dc0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016dc4:	8003      	strh	r3, [r0, #0]
 8016dc6:	4b04      	ldr	r3, [pc, #16]	; (8016dd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016dc8:	881b      	ldrh	r3, [r3, #0]
 8016dca:	3b01      	subs	r3, #1
 8016dcc:	1a9b      	subs	r3, r3, r2
 8016dce:	800b      	strh	r3, [r1, #0]
 8016dd0:	4770      	bx	lr
 8016dd2:	bf00      	nop
 8016dd4:	2400aee4 	.word	0x2400aee4
 8016dd8:	2400aee8 	.word	0x2400aee8

08016ddc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016ddc:	4b07      	ldr	r3, [pc, #28]	; (8016dfc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016dde:	b510      	push	{r4, lr}
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	2b01      	cmp	r3, #1
 8016de4:	d108      	bne.n	8016df8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016de6:	4b06      	ldr	r3, [pc, #24]	; (8016e00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016de8:	880c      	ldrh	r4, [r1, #0]
 8016dea:	881b      	ldrh	r3, [r3, #0]
 8016dec:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016df0:	3b01      	subs	r3, #1
 8016df2:	1b1b      	subs	r3, r3, r4
 8016df4:	8003      	strh	r3, [r0, #0]
 8016df6:	800a      	strh	r2, [r1, #0]
 8016df8:	bd10      	pop	{r4, pc}
 8016dfa:	bf00      	nop
 8016dfc:	2400aee4 	.word	0x2400aee4
 8016e00:	2400aee8 	.word	0x2400aee8

08016e04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016e04:	4b0a      	ldr	r3, [pc, #40]	; (8016e30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8016e06:	b510      	push	{r4, lr}
 8016e08:	781b      	ldrb	r3, [r3, #0]
 8016e0a:	2b01      	cmp	r3, #1
 8016e0c:	d10e      	bne.n	8016e2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8016e0e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016e12:	8843      	ldrh	r3, [r0, #2]
 8016e14:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016e18:	18ca      	adds	r2, r1, r3
 8016e1a:	4b06      	ldr	r3, [pc, #24]	; (8016e34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016e1c:	8044      	strh	r4, [r0, #2]
 8016e1e:	881b      	ldrh	r3, [r3, #0]
 8016e20:	1a9b      	subs	r3, r3, r2
 8016e22:	8003      	strh	r3, [r0, #0]
 8016e24:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016e28:	8081      	strh	r1, [r0, #4]
 8016e2a:	80c3      	strh	r3, [r0, #6]
 8016e2c:	bd10      	pop	{r4, pc}
 8016e2e:	bf00      	nop
 8016e30:	2400aee4 	.word	0x2400aee4
 8016e34:	2400aee8 	.word	0x2400aee8

08016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016e38:	4b08      	ldr	r3, [pc, #32]	; (8016e5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8016e3a:	781b      	ldrb	r3, [r3, #0]
 8016e3c:	2b01      	cmp	r3, #1
 8016e3e:	d10c      	bne.n	8016e5a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016e40:	8803      	ldrh	r3, [r0, #0]
 8016e42:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016e46:	8842      	ldrh	r2, [r0, #2]
 8016e48:	8002      	strh	r2, [r0, #0]
 8016e4a:	185a      	adds	r2, r3, r1
 8016e4c:	4b04      	ldr	r3, [pc, #16]	; (8016e60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016e4e:	881b      	ldrh	r3, [r3, #0]
 8016e50:	1a9b      	subs	r3, r3, r2
 8016e52:	8043      	strh	r3, [r0, #2]
 8016e54:	88c3      	ldrh	r3, [r0, #6]
 8016e56:	80c1      	strh	r1, [r0, #6]
 8016e58:	8083      	strh	r3, [r0, #4]
 8016e5a:	4770      	bx	lr
 8016e5c:	2400aee4 	.word	0x2400aee4
 8016e60:	2400aee8 	.word	0x2400aee8

08016e64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016e64:	4b07      	ldr	r3, [pc, #28]	; (8016e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016e66:	b510      	push	{r4, lr}
 8016e68:	781b      	ldrb	r3, [r3, #0]
 8016e6a:	2b01      	cmp	r3, #1
 8016e6c:	d108      	bne.n	8016e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016e6e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016e72:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016e76:	8003      	strh	r3, [r0, #0]
 8016e78:	8893      	ldrh	r3, [r2, #4]
 8016e7a:	3b01      	subs	r3, #1
 8016e7c:	1b1b      	subs	r3, r3, r4
 8016e7e:	800b      	strh	r3, [r1, #0]
 8016e80:	bd10      	pop	{r4, pc}
 8016e82:	bf00      	nop
 8016e84:	2400aee4 	.word	0x2400aee4

08016e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016e88:	4b0a      	ldr	r3, [pc, #40]	; (8016eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016e8a:	460a      	mov	r2, r1
 8016e8c:	b510      	push	{r4, lr}
 8016e8e:	781b      	ldrb	r3, [r3, #0]
 8016e90:	2b01      	cmp	r3, #1
 8016e92:	d10d      	bne.n	8016eb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016e94:	8881      	ldrh	r1, [r0, #4]
 8016e96:	8803      	ldrh	r3, [r0, #0]
 8016e98:	440b      	add	r3, r1
 8016e9a:	4601      	mov	r1, r0
 8016e9c:	3b01      	subs	r3, #1
 8016e9e:	f821 3b02 	strh.w	r3, [r1], #2
 8016ea2:	f7ff ffdf 	bl	8016e64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016ea6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016eaa:	88c2      	ldrh	r2, [r0, #6]
 8016eac:	80c3      	strh	r3, [r0, #6]
 8016eae:	8082      	strh	r2, [r0, #4]
 8016eb0:	bd10      	pop	{r4, pc}
 8016eb2:	bf00      	nop
 8016eb4:	2400aee4 	.word	0x2400aee4

08016eb8 <_ZN8touchgfx11Application13requestRedrawEv>:
 8016eb8:	4b06      	ldr	r3, [pc, #24]	; (8016ed4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016eba:	2100      	movs	r1, #0
 8016ebc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016ec0:	4b05      	ldr	r3, [pc, #20]	; (8016ed8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8016ec2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8016ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016eca:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8016ece:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8016ed2:	4770      	bx	lr
 8016ed4:	2400aee0 	.word	0x2400aee0
 8016ed8:	2400aee2 	.word	0x2400aee2

08016edc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016edc:	4b03      	ldr	r3, [pc, #12]	; (8016eec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016ede:	6818      	ldr	r0, [r3, #0]
 8016ee0:	b110      	cbz	r0, 8016ee8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016ee2:	6803      	ldr	r3, [r0, #0]
 8016ee4:	699b      	ldr	r3, [r3, #24]
 8016ee6:	4718      	bx	r3
 8016ee8:	4770      	bx	lr
 8016eea:	bf00      	nop
 8016eec:	2400af28 	.word	0x2400af28

08016ef0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016ef0:	4770      	bx	lr
	...

08016ef4 <_ZN8touchgfx11Application4drawEv>:
 8016ef4:	4b09      	ldr	r3, [pc, #36]	; (8016f1c <_ZN8touchgfx11Application4drawEv+0x28>)
 8016ef6:	b507      	push	{r0, r1, r2, lr}
 8016ef8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016efc:	2100      	movs	r1, #0
 8016efe:	4b08      	ldr	r3, [pc, #32]	; (8016f20 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016f00:	9100      	str	r1, [sp, #0]
 8016f02:	4669      	mov	r1, sp
 8016f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f08:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016f0c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016f10:	6803      	ldr	r3, [r0, #0]
 8016f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f14:	4798      	blx	r3
 8016f16:	b003      	add	sp, #12
 8016f18:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f1c:	2400aee0 	.word	0x2400aee0
 8016f20:	2400aee2 	.word	0x2400aee2

08016f24 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016f24:	4b03      	ldr	r3, [pc, #12]	; (8016f34 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016f26:	6818      	ldr	r0, [r3, #0]
 8016f28:	b110      	cbz	r0, 8016f30 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016f2a:	6803      	ldr	r3, [r0, #0]
 8016f2c:	69db      	ldr	r3, [r3, #28]
 8016f2e:	4718      	bx	r3
 8016f30:	4770      	bx	lr
 8016f32:	bf00      	nop
 8016f34:	2400af28 	.word	0x2400af28

08016f38 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016f38:	4b03      	ldr	r3, [pc, #12]	; (8016f48 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016f3a:	6818      	ldr	r0, [r3, #0]
 8016f3c:	b110      	cbz	r0, 8016f44 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016f3e:	6803      	ldr	r3, [r0, #0]
 8016f40:	6a1b      	ldr	r3, [r3, #32]
 8016f42:	4718      	bx	r3
 8016f44:	4770      	bx	lr
 8016f46:	bf00      	nop
 8016f48:	2400af28 	.word	0x2400af28

08016f4c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016f4c:	4b03      	ldr	r3, [pc, #12]	; (8016f5c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016f4e:	6818      	ldr	r0, [r3, #0]
 8016f50:	b110      	cbz	r0, 8016f58 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016f52:	6803      	ldr	r3, [r0, #0]
 8016f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f56:	4718      	bx	r3
 8016f58:	4770      	bx	lr
 8016f5a:	bf00      	nop
 8016f5c:	2400af28 	.word	0x2400af28

08016f60 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016f60:	b570      	push	{r4, r5, r6, lr}
 8016f62:	4d38      	ldr	r5, [pc, #224]	; (8017044 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 8016f64:	4604      	mov	r4, r0
 8016f66:	6828      	ldr	r0, [r5, #0]
 8016f68:	b140      	cbz	r0, 8016f7c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016f6a:	7a03      	ldrb	r3, [r0, #8]
 8016f6c:	b933      	cbnz	r3, 8016f7c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016f6e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8016f72:	6803      	ldr	r3, [r0, #0]
 8016f74:	689b      	ldr	r3, [r3, #8]
 8016f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f7a:	4718      	bx	r3
 8016f7c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8016f80:	b97b      	cbnz	r3, 8016fa2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016f82:	b170      	cbz	r0, 8016fa2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016f84:	7a03      	ldrb	r3, [r0, #8]
 8016f86:	b163      	cbz	r3, 8016fa2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016f88:	4b2f      	ldr	r3, [pc, #188]	; (8017048 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8016f8a:	6818      	ldr	r0, [r3, #0]
 8016f8c:	b110      	cbz	r0, 8016f94 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016f8e:	6803      	ldr	r3, [r0, #0]
 8016f90:	691b      	ldr	r3, [r3, #16]
 8016f92:	4798      	blx	r3
 8016f94:	6828      	ldr	r0, [r5, #0]
 8016f96:	6803      	ldr	r3, [r0, #0]
 8016f98:	68db      	ldr	r3, [r3, #12]
 8016f9a:	4798      	blx	r3
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8016fa2:	2500      	movs	r5, #0
 8016fa4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8016fa8:	42a8      	cmp	r0, r5
 8016faa:	dd0c      	ble.n	8016fc6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8016fac:	1963      	adds	r3, r4, r5
 8016fae:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8016fb2:	b132      	cbz	r2, 8016fc2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8016fb4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8016fb8:	4413      	add	r3, r2
 8016fba:	6858      	ldr	r0, [r3, #4]
 8016fbc:	6803      	ldr	r3, [r0, #0]
 8016fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016fc0:	4798      	blx	r3
 8016fc2:	3501      	adds	r5, #1
 8016fc4:	e7ee      	b.n	8016fa4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	461a      	mov	r2, r3
 8016fca:	4298      	cmp	r0, r3
 8016fcc:	d10f      	bne.n	8016fee <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 8016fce:	1d25      	adds	r5, r4, #4
 8016fd0:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8016fd4:	4291      	cmp	r1, r2
 8016fd6:	dd2d      	ble.n	8017034 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 8016fd8:	1e48      	subs	r0, r1, #1
 8016fda:	b280      	uxth	r0, r0
 8016fdc:	4288      	cmp	r0, r1
 8016fde:	d31a      	bcc.n	8017016 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8016fe0:	4b1a      	ldr	r3, [pc, #104]	; (801704c <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 8016fe2:	f240 11a9 	movw	r1, #425	; 0x1a9
 8016fe6:	4a1a      	ldr	r2, [pc, #104]	; (8017050 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8016fe8:	481a      	ldr	r0, [pc, #104]	; (8017054 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8016fea:	f00e fdc3 	bl	8025b74 <__assert_func>
 8016fee:	18e1      	adds	r1, r4, r3
 8016ff0:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8016ff4:	b16d      	cbz	r5, 8017012 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 8016ff6:	429a      	cmp	r2, r3
 8016ff8:	d00a      	beq.n	8017010 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 8016ffa:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8016ffe:	4431      	add	r1, r6
 8017000:	684e      	ldr	r6, [r1, #4]
 8017002:	b291      	uxth	r1, r2
 8017004:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8017008:	604e      	str	r6, [r1, #4]
 801700a:	18a1      	adds	r1, r4, r2
 801700c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8017010:	3201      	adds	r2, #1
 8017012:	3301      	adds	r3, #1
 8017014:	e7d9      	b.n	8016fca <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8017016:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801701a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801701e:	3304      	adds	r3, #4
 8017020:	428b      	cmp	r3, r1
 8017022:	d004      	beq.n	801702e <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8017024:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8017028:	f843 6c04 	str.w	r6, [r3, #-4]
 801702c:	e7f8      	b.n	8017020 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801702e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8017032:	e7cd      	b.n	8016fd0 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8017034:	4b04      	ldr	r3, [pc, #16]	; (8017048 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8017036:	6818      	ldr	r0, [r3, #0]
 8017038:	b110      	cbz	r0, 8017040 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801703a:	6803      	ldr	r3, [r0, #0]
 801703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801703e:	e79a      	b.n	8016f76 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017040:	bd70      	pop	{r4, r5, r6, pc}
 8017042:	bf00      	nop
 8017044:	2400af2c 	.word	0x2400af2c
 8017048:	2400af28 	.word	0x2400af28
 801704c:	08029180 	.word	0x08029180
 8017050:	080293d9 	.word	0x080293d9
 8017054:	0802918e 	.word	0x0802918e

08017058 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017058:	b570      	push	{r4, r5, r6, lr}
 801705a:	4606      	mov	r6, r0
 801705c:	460c      	mov	r4, r1
 801705e:	b929      	cbnz	r1, 801706c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8017060:	4b0c      	ldr	r3, [pc, #48]	; (8017094 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8017062:	2167      	movs	r1, #103	; 0x67
 8017064:	4a0c      	ldr	r2, [pc, #48]	; (8017098 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8017066:	480d      	ldr	r0, [pc, #52]	; (801709c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8017068:	f00e fd84 	bl	8025b74 <__assert_func>
 801706c:	2300      	movs	r3, #0
 801706e:	4d0c      	ldr	r5, [pc, #48]	; (80170a0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8017070:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017074:	6828      	ldr	r0, [r5, #0]
 8017076:	b110      	cbz	r0, 801707e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8017078:	6803      	ldr	r3, [r0, #0]
 801707a:	695b      	ldr	r3, [r3, #20]
 801707c:	4798      	blx	r3
 801707e:	602c      	str	r4, [r5, #0]
 8017080:	4620      	mov	r0, r4
 8017082:	6823      	ldr	r3, [r4, #0]
 8017084:	68db      	ldr	r3, [r3, #12]
 8017086:	4798      	blx	r3
 8017088:	6833      	ldr	r3, [r6, #0]
 801708a:	4630      	mov	r0, r6
 801708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801708e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017092:	4718      	bx	r3
 8017094:	0802914c 	.word	0x0802914c
 8017098:	08029254 	.word	0x08029254
 801709c:	08029156 	.word	0x08029156
 80170a0:	2400af28 	.word	0x2400af28

080170a4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80170a4:	b510      	push	{r4, lr}
 80170a6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80170aa:	888a      	ldrh	r2, [r1, #4]
 80170ac:	f9b0 3000 	ldrsh.w	r3, [r0]
 80170b0:	4422      	add	r2, r4
 80170b2:	b212      	sxth	r2, r2
 80170b4:	4293      	cmp	r3, r2
 80170b6:	da15      	bge.n	80170e4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80170b8:	8882      	ldrh	r2, [r0, #4]
 80170ba:	4413      	add	r3, r2
 80170bc:	b21b      	sxth	r3, r3
 80170be:	429c      	cmp	r4, r3
 80170c0:	da10      	bge.n	80170e4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80170c2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80170c6:	88c9      	ldrh	r1, [r1, #6]
 80170c8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80170cc:	4419      	add	r1, r3
 80170ce:	b209      	sxth	r1, r1
 80170d0:	428a      	cmp	r2, r1
 80170d2:	da07      	bge.n	80170e4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80170d4:	88c0      	ldrh	r0, [r0, #6]
 80170d6:	4410      	add	r0, r2
 80170d8:	b200      	sxth	r0, r0
 80170da:	4283      	cmp	r3, r0
 80170dc:	bfac      	ite	ge
 80170de:	2000      	movge	r0, #0
 80170e0:	2001      	movlt	r0, #1
 80170e2:	bd10      	pop	{r4, pc}
 80170e4:	2000      	movs	r0, #0
 80170e6:	e7fc      	b.n	80170e2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080170e8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80170e8:	b570      	push	{r4, r5, r6, lr}
 80170ea:	f9b1 4000 	ldrsh.w	r4, [r1]
 80170ee:	f9b0 5000 	ldrsh.w	r5, [r0]
 80170f2:	42ac      	cmp	r4, r5
 80170f4:	db18      	blt.n	8017128 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80170f6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80170fa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80170fe:	429a      	cmp	r2, r3
 8017100:	db12      	blt.n	8017128 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017102:	8886      	ldrh	r6, [r0, #4]
 8017104:	4435      	add	r5, r6
 8017106:	888e      	ldrh	r6, [r1, #4]
 8017108:	4434      	add	r4, r6
 801710a:	b22d      	sxth	r5, r5
 801710c:	b224      	sxth	r4, r4
 801710e:	42a5      	cmp	r5, r4
 8017110:	db0a      	blt.n	8017128 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017112:	88c0      	ldrh	r0, [r0, #6]
 8017114:	4418      	add	r0, r3
 8017116:	88cb      	ldrh	r3, [r1, #6]
 8017118:	441a      	add	r2, r3
 801711a:	b200      	sxth	r0, r0
 801711c:	b212      	sxth	r2, r2
 801711e:	4290      	cmp	r0, r2
 8017120:	bfb4      	ite	lt
 8017122:	2000      	movlt	r0, #0
 8017124:	2001      	movge	r0, #1
 8017126:	bd70      	pop	{r4, r5, r6, pc}
 8017128:	2000      	movs	r0, #0
 801712a:	e7fc      	b.n	8017126 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801712c <_ZN8touchgfx11Application11getInstanceEv>:
 801712c:	4b01      	ldr	r3, [pc, #4]	; (8017134 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801712e:	6818      	ldr	r0, [r3, #0]
 8017130:	4770      	bx	lr
 8017132:	bf00      	nop
 8017134:	2400af38 	.word	0x2400af38

08017138 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8017138:	b570      	push	{r4, r5, r6, lr}
 801713a:	2200      	movs	r2, #0
 801713c:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8017140:	1d04      	adds	r4, r0, #4
 8017142:	b295      	uxth	r5, r2
 8017144:	42ab      	cmp	r3, r5
 8017146:	d90e      	bls.n	8017166 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 8017148:	f854 6b04 	ldr.w	r6, [r4], #4
 801714c:	4615      	mov	r5, r2
 801714e:	3201      	adds	r2, #1
 8017150:	428e      	cmp	r6, r1
 8017152:	d1f6      	bne.n	8017142 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 8017154:	4428      	add	r0, r5
 8017156:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801715a:	2bff      	cmp	r3, #255	; 0xff
 801715c:	d002      	beq.n	8017164 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801715e:	3301      	adds	r3, #1
 8017160:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 8017164:	bd70      	pop	{r4, r5, r6, pc}
 8017166:	2b20      	cmp	r3, #32
 8017168:	d106      	bne.n	8017178 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801716a:	4b09      	ldr	r3, [pc, #36]	; (8017190 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801716c:	f240 215f 	movw	r1, #607	; 0x25f
 8017170:	4a08      	ldr	r2, [pc, #32]	; (8017194 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 8017172:	4809      	ldr	r0, [pc, #36]	; (8017198 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 8017174:	f00e fcfe 	bl	8025b74 <__assert_func>
 8017178:	18c2      	adds	r2, r0, r3
 801717a:	2401      	movs	r4, #1
 801717c:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8017180:	191a      	adds	r2, r3, r4
 8017182:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 8017186:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801718a:	6041      	str	r1, [r0, #4]
 801718c:	e7ea      	b.n	8017164 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801718e:	bf00      	nop
 8017190:	080291b7 	.word	0x080291b7
 8017194:	08029298 	.word	0x08029298
 8017198:	08029156 	.word	0x08029156

0801719c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801719c:	b570      	push	{r4, r5, r6, lr}
 801719e:	2300      	movs	r3, #0
 80171a0:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 80171a4:	1d04      	adds	r4, r0, #4
 80171a6:	b29a      	uxth	r2, r3
 80171a8:	4296      	cmp	r6, r2
 80171aa:	d90a      	bls.n	80171c2 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 80171ac:	f854 2b04 	ldr.w	r2, [r4], #4
 80171b0:	428a      	cmp	r2, r1
 80171b2:	d107      	bne.n	80171c4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 80171b4:	18c5      	adds	r5, r0, r3
 80171b6:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 80171ba:	b11a      	cbz	r2, 80171c4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 80171bc:	3a01      	subs	r2, #1
 80171be:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 80171c2:	bd70      	pop	{r4, r5, r6, pc}
 80171c4:	3301      	adds	r3, #1
 80171c6:	e7ee      	b.n	80171a6 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

080171c8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80171c8:	2300      	movs	r3, #0
 80171ca:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80171ce:	30a8      	adds	r0, #168	; 0xa8
 80171d0:	f820 3c24 	strh.w	r3, [r0, #-36]
 80171d4:	f802 3b01 	strb.w	r3, [r2], #1
 80171d8:	4282      	cmp	r2, r0
 80171da:	d1fb      	bne.n	80171d4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80171dc:	4770      	bx	lr

080171de <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80171de:	4603      	mov	r3, r0
 80171e0:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80171e4:	2200      	movs	r2, #0
 80171e6:	801a      	strh	r2, [r3, #0]
 80171e8:	3308      	adds	r3, #8
 80171ea:	f823 2c06 	strh.w	r2, [r3, #-6]
 80171ee:	f823 2c04 	strh.w	r2, [r3, #-4]
 80171f2:	f823 2c02 	strh.w	r2, [r3, #-2]
 80171f6:	428b      	cmp	r3, r1
 80171f8:	d1f5      	bne.n	80171e6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80171fa:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80171fe:	4770      	bx	lr

08017200 <_ZN8touchgfx11ApplicationC1Ev>:
 8017200:	b570      	push	{r4, r5, r6, lr}
 8017202:	4b1a      	ldr	r3, [pc, #104]	; (801726c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8017204:	2500      	movs	r5, #0
 8017206:	4604      	mov	r4, r0
 8017208:	30a8      	adds	r0, #168	; 0xa8
 801720a:	f840 3ca8 	str.w	r3, [r0, #-168]
 801720e:	f820 5c24 	strh.w	r5, [r0, #-36]
 8017212:	f7ff ffe4 	bl	80171de <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017216:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801721a:	f7ff ffe0 	bl	80171de <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801721e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8017222:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8017226:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801722a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801722e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8017232:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8017236:	490e      	ldr	r1, [pc, #56]	; (8017270 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8017238:	480e      	ldr	r0, [pc, #56]	; (8017274 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801723a:	f00e fb5f 	bl	80258fc <CRC_Lock>
 801723e:	4e0e      	ldr	r6, [pc, #56]	; (8017278 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017240:	4b0e      	ldr	r3, [pc, #56]	; (801727c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017242:	b158      	cbz	r0, 801725c <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8017244:	801d      	strh	r5, [r3, #0]
 8017246:	2300      	movs	r3, #0
 8017248:	4a0d      	ldr	r2, [pc, #52]	; (8017280 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801724a:	4620      	mov	r0, r4
 801724c:	6013      	str	r3, [r2, #0]
 801724e:	4a0d      	ldr	r2, [pc, #52]	; (8017284 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8017250:	6033      	str	r3, [r6, #0]
 8017252:	6013      	str	r3, [r2, #0]
 8017254:	f7ff ffb8 	bl	80171c8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8017258:	4620      	mov	r0, r4
 801725a:	bd70      	pop	{r4, r5, r6, pc}
 801725c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017260:	2002      	movs	r0, #2
 8017262:	801a      	strh	r2, [r3, #0]
 8017264:	6030      	str	r0, [r6, #0]
 8017266:	f001 f9e5 	bl	8018634 <_ZN8touchgfx6Screen4drawEv>
 801726a:	e7ec      	b.n	8017246 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801726c:	08029218 	.word	0x08029218
 8017270:	b5e8b5cd 	.word	0xb5e8b5cd
 8017274:	f407a5c2 	.word	0xf407a5c2
 8017278:	2400af28 	.word	0x2400af28
 801727c:	2400004e 	.word	0x2400004e
 8017280:	2400af38 	.word	0x2400af38
 8017284:	2400af2c 	.word	0x2400af2c

08017288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017288:	b510      	push	{r4, lr}
 801728a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801728e:	428b      	cmp	r3, r1
 8017290:	d806      	bhi.n	80172a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 8017292:	4b0b      	ldr	r3, [pc, #44]	; (80172c0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 8017294:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8017298:	4a0a      	ldr	r2, [pc, #40]	; (80172c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801729a:	480b      	ldr	r0, [pc, #44]	; (80172c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801729c:	f00e fc6a 	bl	8025b74 <__assert_func>
 80172a0:	3b01      	subs	r3, #1
 80172a2:	b29b      	uxth	r3, r3
 80172a4:	428b      	cmp	r3, r1
 80172a6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80172aa:	d908      	bls.n	80172be <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 80172ac:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80172b0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80172b4:	681a      	ldr	r2, [r3, #0]
 80172b6:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80172ba:	685a      	ldr	r2, [r3, #4]
 80172bc:	6062      	str	r2, [r4, #4]
 80172be:	bd10      	pop	{r4, pc}
 80172c0:	08029180 	.word	0x08029180
 80172c4:	080292dd 	.word	0x080292dd
 80172c8:	0802918e 	.word	0x0802918e

080172cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80172cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80172ce:	466b      	mov	r3, sp
 80172d0:	4604      	mov	r4, r0
 80172d2:	e883 0006 	stmia.w	r3, {r1, r2}
 80172d6:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80172da:	2a07      	cmp	r2, #7
 80172dc:	d906      	bls.n	80172ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 80172de:	4b09      	ldr	r3, [pc, #36]	; (8017304 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 80172e0:	f44f 71c1 	mov.w	r1, #386	; 0x182
 80172e4:	4a08      	ldr	r2, [pc, #32]	; (8017308 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 80172e6:	4809      	ldr	r0, [pc, #36]	; (801730c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 80172e8:	f00e fc44 	bl	8025b74 <__assert_func>
 80172ec:	1c51      	adds	r1, r2, #1
 80172ee:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 80172f2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80172f6:	cb03      	ldmia	r3!, {r0, r1}
 80172f8:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80172fc:	6069      	str	r1, [r5, #4]
 80172fe:	b003      	add	sp, #12
 8017300:	bd30      	pop	{r4, r5, pc}
 8017302:	bf00      	nop
 8017304:	080291df 	.word	0x080291df
 8017308:	08029373 	.word	0x08029373
 801730c:	0802918e 	.word	0x0802918e

08017310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017314:	b08d      	sub	sp, #52	; 0x34
 8017316:	4683      	mov	fp, r0
 8017318:	ac08      	add	r4, sp, #32
 801731a:	4620      	mov	r0, r4
 801731c:	e884 0006 	stmia.w	r4, {r1, r2}
 8017320:	f7fc f831 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017324:	2800      	cmp	r0, #0
 8017326:	d16a      	bne.n	80173fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8017328:	9402      	str	r4, [sp, #8]
 801732a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801732e:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8017332:	2400      	movs	r4, #0
 8017334:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8017338:	9301      	str	r3, [sp, #4]
 801733a:	36a0      	adds	r6, #160	; 0xa0
 801733c:	42a5      	cmp	r5, r4
 801733e:	d00d      	beq.n	801735c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8017340:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8017344:	9802      	ldr	r0, [sp, #8]
 8017346:	f7ff fecf 	bl	80170e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801734a:	b128      	cbz	r0, 8017358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801734c:	1e69      	subs	r1, r5, #1
 801734e:	9801      	ldr	r0, [sp, #4]
 8017350:	1b09      	subs	r1, r1, r4
 8017352:	b289      	uxth	r1, r1
 8017354:	f7ff ff98 	bl	8017288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017358:	3401      	adds	r4, #1
 801735a:	e7ef      	b.n	801733c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801735c:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8017360:	1e7b      	subs	r3, r7, #1
 8017362:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8017366:	9703      	str	r7, [sp, #12]
 8017368:	9300      	str	r3, [sp, #0]
 801736a:	2400      	movs	r4, #0
 801736c:	4655      	mov	r5, sl
 801736e:	9704      	str	r7, [sp, #16]
 8017370:	4626      	mov	r6, r4
 8017372:	9b04      	ldr	r3, [sp, #16]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d078      	beq.n	801746a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8017378:	9902      	ldr	r1, [sp, #8]
 801737a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801737e:	f7ff fe91 	bl	80170a4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017382:	b360      	cbz	r0, 80173de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8017384:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8017388:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801738c:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8017390:	45e6      	cmp	lr, ip
 8017392:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8017396:	db35      	blt.n	8017404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8017398:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801739c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80173a0:	4472      	add	r2, lr
 80173a2:	4463      	add	r3, ip
 80173a4:	b212      	sxth	r2, r2
 80173a6:	b21b      	sxth	r3, r3
 80173a8:	429a      	cmp	r2, r3
 80173aa:	dc2b      	bgt.n	8017404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 80173ac:	fa1f f288 	uxth.w	r2, r8
 80173b0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80173b4:	45c1      	cmp	r9, r8
 80173b6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80173ba:	4413      	add	r3, r2
 80173bc:	fa1f fc89 	uxth.w	ip, r9
 80173c0:	b29b      	uxth	r3, r3
 80173c2:	fa0f fe83 	sxth.w	lr, r3
 80173c6:	db0f      	blt.n	80173e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 80173c8:	eba3 030c 	sub.w	r3, r3, ip
 80173cc:	1ac9      	subs	r1, r1, r3
 80173ce:	b209      	sxth	r1, r1
 80173d0:	2900      	cmp	r1, #0
 80173d2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80173d6:	dd12      	ble.n	80173fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80173d8:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 80173dc:	4604      	mov	r4, r0
 80173de:	9b04      	ldr	r3, [sp, #16]
 80173e0:	3d08      	subs	r5, #8
 80173e2:	3b01      	subs	r3, #1
 80173e4:	9304      	str	r3, [sp, #16]
 80173e6:	e7c4      	b.n	8017372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 80173e8:	4461      	add	r1, ip
 80173ea:	b209      	sxth	r1, r1
 80173ec:	4571      	cmp	r1, lr
 80173ee:	dc3a      	bgt.n	8017466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80173f0:	eba2 020c 	sub.w	r2, r2, ip
 80173f4:	b212      	sxth	r2, r2
 80173f6:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80173fa:	2a00      	cmp	r2, #0
 80173fc:	dcee      	bgt.n	80173dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80173fe:	b00d      	add	sp, #52	; 0x34
 8017400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017404:	45c1      	cmp	r9, r8
 8017406:	db2e      	blt.n	8017466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8017408:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801740c:	4499      	add	r9, r3
 801740e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017412:	4498      	add	r8, r3
 8017414:	fa0f f989 	sxth.w	r9, r9
 8017418:	fa0f f888 	sxth.w	r8, r8
 801741c:	45c1      	cmp	r9, r8
 801741e:	dc22      	bgt.n	8017466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8017420:	fa1f f28c 	uxth.w	r2, ip
 8017424:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8017428:	45e6      	cmp	lr, ip
 801742a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801742e:	4413      	add	r3, r2
 8017430:	fa1f f88e 	uxth.w	r8, lr
 8017434:	b29b      	uxth	r3, r3
 8017436:	fa0f f983 	sxth.w	r9, r3
 801743a:	db0a      	blt.n	8017452 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801743c:	eba3 0308 	sub.w	r3, r3, r8
 8017440:	1ac9      	subs	r1, r1, r3
 8017442:	b209      	sxth	r1, r1
 8017444:	2900      	cmp	r1, #0
 8017446:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801744a:	ddd8      	ble.n	80173fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801744c:	f8ad 9020 	strh.w	r9, [sp, #32]
 8017450:	e7c4      	b.n	80173dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8017452:	4441      	add	r1, r8
 8017454:	b209      	sxth	r1, r1
 8017456:	4549      	cmp	r1, r9
 8017458:	dc05      	bgt.n	8017466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801745a:	eba2 0208 	sub.w	r2, r2, r8
 801745e:	b212      	sxth	r2, r2
 8017460:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8017464:	e7c9      	b.n	80173fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8017466:	4606      	mov	r6, r0
 8017468:	e7b9      	b.n	80173de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801746a:	2c00      	cmp	r4, #0
 801746c:	f47f af7d 	bne.w	801736a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8017470:	2e00      	cmp	r6, #0
 8017472:	f000 81dc 	beq.w	801782e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8017476:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801747a:	4655      	mov	r5, sl
 801747c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8017480:	b2b9      	uxth	r1, r7
 8017482:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8017486:	b2b3      	uxth	r3, r6
 8017488:	9104      	str	r1, [sp, #16]
 801748a:	9804      	ldr	r0, [sp, #16]
 801748c:	441a      	add	r2, r3
 801748e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8017492:	b292      	uxth	r2, r2
 8017494:	4401      	add	r1, r0
 8017496:	fa0f f882 	sxth.w	r8, r2
 801749a:	b289      	uxth	r1, r1
 801749c:	9105      	str	r1, [sp, #20]
 801749e:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 80174a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80174a6:	9b03      	ldr	r3, [sp, #12]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d054      	beq.n	8017556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 80174ac:	9902      	ldr	r1, [sp, #8]
 80174ae:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80174b2:	f7ff fdf7 	bl	80170a4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80174b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80174ba:	b1d8      	cbz	r0, 80174f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80174bc:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 80174c0:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 80174c4:	4576      	cmp	r6, lr
 80174c6:	dc26      	bgt.n	8017516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80174c8:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80174cc:	44f4      	add	ip, lr
 80174ce:	fa0f fc8c 	sxth.w	ip, ip
 80174d2:	45e0      	cmp	r8, ip
 80174d4:	db1f      	blt.n	8017516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80174d6:	428f      	cmp	r7, r1
 80174d8:	fa1f fc81 	uxth.w	ip, r1
 80174dc:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 80174e0:	dc0f      	bgt.n	8017502 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80174e2:	9805      	ldr	r0, [sp, #20]
 80174e4:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 80174e8:	eba0 0c0c 	sub.w	ip, r0, ip
 80174ec:	eba1 010c 	sub.w	r1, r1, ip
 80174f0:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 80174f4:	4620      	mov	r0, r4
 80174f6:	9903      	ldr	r1, [sp, #12]
 80174f8:	3d08      	subs	r5, #8
 80174fa:	4604      	mov	r4, r0
 80174fc:	3901      	subs	r1, #1
 80174fe:	9103      	str	r1, [sp, #12]
 8017500:	e7cf      	b.n	80174a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8017502:	4461      	add	r1, ip
 8017504:	b209      	sxth	r1, r1
 8017506:	4549      	cmp	r1, r9
 8017508:	dcf5      	bgt.n	80174f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801750a:	9904      	ldr	r1, [sp, #16]
 801750c:	eba1 0c0c 	sub.w	ip, r1, ip
 8017510:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8017514:	e7ee      	b.n	80174f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017516:	428f      	cmp	r7, r1
 8017518:	dced      	bgt.n	80174f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801751a:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801751e:	4461      	add	r1, ip
 8017520:	b209      	sxth	r1, r1
 8017522:	4589      	cmp	r9, r1
 8017524:	dbe7      	blt.n	80174f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017526:	4576      	cmp	r6, lr
 8017528:	fa1f fc8e 	uxth.w	ip, lr
 801752c:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8017530:	dc08      	bgt.n	8017544 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8017532:	eba2 0c0c 	sub.w	ip, r2, ip
 8017536:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801753a:	eba1 010c 	sub.w	r1, r1, ip
 801753e:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8017542:	e7d7      	b.n	80174f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017544:	4461      	add	r1, ip
 8017546:	b209      	sxth	r1, r1
 8017548:	4588      	cmp	r8, r1
 801754a:	dbd4      	blt.n	80174f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801754c:	eba3 0c0c 	sub.w	ip, r3, ip
 8017550:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8017554:	e7ce      	b.n	80174f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017556:	2c00      	cmp	r4, #0
 8017558:	f000 8169 	beq.w	801782e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801755c:	9b00      	ldr	r3, [sp, #0]
 801755e:	3301      	adds	r3, #1
 8017560:	f000 8165 	beq.w	801782e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8017564:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8017568:	9802      	ldr	r0, [sp, #8]
 801756a:	4621      	mov	r1, r4
 801756c:	f7ff fdbc 	bl	80170e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017570:	b120      	cbz	r0, 801757c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8017572:	f8bd 1000 	ldrh.w	r1, [sp]
 8017576:	9801      	ldr	r0, [sp, #4]
 8017578:	f7ff fe86 	bl	8017288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801757c:	9902      	ldr	r1, [sp, #8]
 801757e:	4620      	mov	r0, r4
 8017580:	f7ff fd90 	bl	80170a4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017584:	2800      	cmp	r0, #0
 8017586:	f000 809b 	beq.w	80176c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801758a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801758e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8017592:	fa1f f288 	uxth.w	r2, r8
 8017596:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801759a:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801759e:	19d5      	adds	r5, r2, r7
 80175a0:	b2a1      	uxth	r1, r4
 80175a2:	45a0      	cmp	r8, r4
 80175a4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80175a8:	fa1f f985 	uxth.w	r9, r5
 80175ac:	440b      	add	r3, r1
 80175ae:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 80175b2:	fa0f f589 	sxth.w	r5, r9
 80175b6:	b29b      	uxth	r3, r3
 80175b8:	9503      	str	r5, [sp, #12]
 80175ba:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80175be:	9507      	str	r5, [sp, #28]
 80175c0:	f340 809d 	ble.w	80176fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80175c4:	1a52      	subs	r2, r2, r1
 80175c6:	4584      	cmp	ip, r0
 80175c8:	fa0f fe83 	sxth.w	lr, r3
 80175cc:	b292      	uxth	r2, r2
 80175ce:	b215      	sxth	r5, r2
 80175d0:	dd2f      	ble.n	8017632 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 80175d2:	9e00      	ldr	r6, [sp, #0]
 80175d4:	fa1f fc8c 	uxth.w	ip, ip
 80175d8:	b280      	uxth	r0, r0
 80175da:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80175de:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 80175e2:	9e03      	ldr	r6, [sp, #12]
 80175e4:	ebac 0300 	sub.w	r3, ip, r0
 80175e8:	448c      	add	ip, r1
 80175ea:	eba6 060e 	sub.w	r6, r6, lr
 80175ee:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	4470      	add	r0, lr
 80175f6:	fa0f fc8c 	sxth.w	ip, ip
 80175fa:	b21c      	sxth	r4, r3
 80175fc:	b200      	sxth	r0, r0
 80175fe:	4366      	muls	r6, r4
 8017600:	ebac 0000 	sub.w	r0, ip, r0
 8017604:	4368      	muls	r0, r5
 8017606:	4286      	cmp	r6, r0
 8017608:	db09      	blt.n	801761e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801760a:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801760e:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8017612:	4417      	add	r7, r2
 8017614:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017618:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801761c:	e685      	b.n	801732a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801761e:	440b      	add	r3, r1
 8017620:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8017624:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017628:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801762c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017630:	e67b      	b.n	801732a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8017632:	9e03      	ldr	r6, [sp, #12]
 8017634:	45b6      	cmp	lr, r6
 8017636:	da28      	bge.n	801768a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8017638:	9b00      	ldr	r3, [sp, #0]
 801763a:	eba6 060e 	sub.w	r6, r6, lr
 801763e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8017642:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8017646:	eb04 030c 	add.w	r3, r4, ip
 801764a:	fa1f f883 	uxth.w	r8, r3
 801764e:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8017652:	4403      	add	r3, r0
 8017654:	fa0f f988 	sxth.w	r9, r8
 8017658:	eba0 000c 	sub.w	r0, r0, ip
 801765c:	eba3 0308 	sub.w	r3, r3, r8
 8017660:	4368      	muls	r0, r5
 8017662:	b29b      	uxth	r3, r3
 8017664:	fa0f f883 	sxth.w	r8, r3
 8017668:	fb08 f606 	mul.w	r6, r8, r6
 801766c:	42b0      	cmp	r0, r6
 801766e:	dc06      	bgt.n	801767e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8017670:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8017674:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8017678:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801767c:	e7c9      	b.n	8017612 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801767e:	4423      	add	r3, r4
 8017680:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8017684:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017688:	e64f      	b.n	801732a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801768a:	eba3 0309 	sub.w	r3, r3, r9
 801768e:	9807      	ldr	r0, [sp, #28]
 8017690:	b29b      	uxth	r3, r3
 8017692:	2806      	cmp	r0, #6
 8017694:	fa0f fc83 	sxth.w	ip, r3
 8017698:	d818      	bhi.n	80176cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801769a:	4652      	mov	r2, sl
 801769c:	ab0a      	add	r3, sp, #40	; 0x28
 801769e:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 80176a2:	6851      	ldr	r1, [r2, #4]
 80176a4:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 80176a8:	c303      	stmia	r3!, {r0, r1}
 80176aa:	9b03      	ldr	r3, [sp, #12]
 80176ac:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 80176b0:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80176b4:	ab0a      	add	r3, sp, #40	; 0x28
 80176b6:	9801      	ldr	r0, [sp, #4]
 80176b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80176bc:	f7ff fe06 	bl	80172cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80176c0:	9b00      	ldr	r3, [sp, #0]
 80176c2:	f1aa 0a08 	sub.w	sl, sl, #8
 80176c6:	3b01      	subs	r3, #1
 80176c8:	9300      	str	r3, [sp, #0]
 80176ca:	e747      	b.n	801755c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80176cc:	9800      	ldr	r0, [sp, #0]
 80176ce:	45ac      	cmp	ip, r5
 80176d0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80176d4:	db0c      	blt.n	80176f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 80176d6:	4417      	add	r7, r2
 80176d8:	4458      	add	r0, fp
 80176da:	f8ad 4020 	strh.w	r4, [sp, #32]
 80176de:	b2bf      	uxth	r7, r7
 80176e0:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 80176e4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80176e8:	440f      	add	r7, r1
 80176ea:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 80176ee:	e61c      	b.n	801732a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80176f0:	4458      	add	r0, fp
 80176f2:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 80176f6:	443b      	add	r3, r7
 80176f8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80176fc:	e615      	b.n	801732a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80176fe:	fa1f f18c 	uxth.w	r1, ip
 8017702:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8017706:	b282      	uxth	r2, r0
 8017708:	4584      	cmp	ip, r0
 801770a:	eb01 0e05 	add.w	lr, r1, r5
 801770e:	9204      	str	r2, [sp, #16]
 8017710:	fa1f fe8e 	uxth.w	lr, lr
 8017714:	9e04      	ldr	r6, [sp, #16]
 8017716:	fa0f f28e 	sxth.w	r2, lr
 801771a:	9205      	str	r2, [sp, #20]
 801771c:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8017720:	4432      	add	r2, r6
 8017722:	b292      	uxth	r2, r2
 8017724:	9206      	str	r2, [sp, #24]
 8017726:	da26      	bge.n	8017776 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8017728:	eba3 0309 	sub.w	r3, r3, r9
 801772c:	eba2 020e 	sub.w	r2, r2, lr
 8017730:	eba0 000c 	sub.w	r0, r0, ip
 8017734:	eba4 0408 	sub.w	r4, r4, r8
 8017738:	b29b      	uxth	r3, r3
 801773a:	b292      	uxth	r2, r2
 801773c:	fa0f fa83 	sxth.w	sl, r3
 8017740:	b211      	sxth	r1, r2
 8017742:	fb0a f000 	mul.w	r0, sl, r0
 8017746:	434c      	muls	r4, r1
 8017748:	42a0      	cmp	r0, r4
 801774a:	9800      	ldr	r0, [sp, #0]
 801774c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8017750:	dc06      	bgt.n	8017760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8017752:	4458      	add	r0, fp
 8017754:	9a05      	ldr	r2, [sp, #20]
 8017756:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801775a:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801775e:	e7ca      	b.n	80176f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8017760:	eb0b 0300 	add.w	r3, fp, r0
 8017764:	9903      	ldr	r1, [sp, #12]
 8017766:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801776a:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801776e:	442a      	add	r2, r5
 8017770:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8017774:	e5d9      	b.n	801732a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8017776:	9e04      	ldr	r6, [sp, #16]
 8017778:	9a03      	ldr	r2, [sp, #12]
 801777a:	1b89      	subs	r1, r1, r6
 801777c:	b21e      	sxth	r6, r3
 801777e:	b289      	uxth	r1, r1
 8017780:	4296      	cmp	r6, r2
 8017782:	fa0f fc81 	sxth.w	ip, r1
 8017786:	dd25      	ble.n	80177d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8017788:	eba3 0309 	sub.w	r3, r3, r9
 801778c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8017790:	9e05      	ldr	r6, [sp, #20]
 8017792:	eba4 0408 	sub.w	r4, r4, r8
 8017796:	b29b      	uxth	r3, r3
 8017798:	eba6 0902 	sub.w	r9, r6, r2
 801779c:	fb0c f404 	mul.w	r4, ip, r4
 80177a0:	b218      	sxth	r0, r3
 80177a2:	9a00      	ldr	r2, [sp, #0]
 80177a4:	fb00 f909 	mul.w	r9, r0, r9
 80177a8:	00d2      	lsls	r2, r2, #3
 80177aa:	454c      	cmp	r4, r9
 80177ac:	db03      	blt.n	80177b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 80177ae:	445a      	add	r2, fp
 80177b0:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 80177b4:	e79f      	b.n	80176f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 80177b6:	eb0b 0302 	add.w	r3, fp, r2
 80177ba:	9a03      	ldr	r2, [sp, #12]
 80177bc:	4429      	add	r1, r5
 80177be:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80177c2:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80177c6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80177ca:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80177ce:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80177d2:	e5aa      	b.n	801732a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80177d4:	9b06      	ldr	r3, [sp, #24]
 80177d6:	9c07      	ldr	r4, [sp, #28]
 80177d8:	eba3 020e 	sub.w	r2, r3, lr
 80177dc:	2c06      	cmp	r4, #6
 80177de:	b292      	uxth	r2, r2
 80177e0:	b213      	sxth	r3, r2
 80177e2:	d80d      	bhi.n	8017800 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 80177e4:	4651      	mov	r1, sl
 80177e6:	aa0a      	add	r2, sp, #40	; 0x28
 80177e8:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 80177ec:	6849      	ldr	r1, [r1, #4]
 80177ee:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 80177f2:	9b05      	ldr	r3, [sp, #20]
 80177f4:	c203      	stmia	r2!, {r0, r1}
 80177f6:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80177fa:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 80177fe:	e759      	b.n	80176b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8017800:	9c00      	ldr	r4, [sp, #0]
 8017802:	4563      	cmp	r3, ip
 8017804:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8017808:	db0d      	blt.n	8017826 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801780a:	4429      	add	r1, r5
 801780c:	9a04      	ldr	r2, [sp, #16]
 801780e:	445c      	add	r4, fp
 8017810:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017814:	b289      	uxth	r1, r1
 8017816:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801781a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801781e:	4411      	add	r1, r2
 8017820:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8017824:	e581      	b.n	801732a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8017826:	445c      	add	r4, fp
 8017828:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801782c:	e79f      	b.n	801776e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801782e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8017832:	2f07      	cmp	r7, #7
 8017834:	d806      	bhi.n	8017844 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8017836:	ab08      	add	r3, sp, #32
 8017838:	9801      	ldr	r0, [sp, #4]
 801783a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801783e:	f7ff fd45 	bl	80172cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017842:	e5dc      	b.n	80173fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8017844:	f107 39ff 	add.w	r9, r7, #4294967295
 8017848:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801784c:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8017850:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8017854:	f04f 35ff 	mov.w	r5, #4294967295
 8017858:	2400      	movs	r4, #0
 801785a:	9304      	str	r3, [sp, #16]
 801785c:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8017860:	f109 32ff 	add.w	r2, r9, #4294967295
 8017864:	9300      	str	r3, [sp, #0]
 8017866:	4690      	mov	r8, r2
 8017868:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801786c:	9303      	str	r3, [sp, #12]
 801786e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017872:	f1b8 3fff 	cmp.w	r8, #4294967295
 8017876:	6818      	ldr	r0, [r3, #0]
 8017878:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801787c:	9206      	str	r2, [sp, #24]
 801787e:	bf16      	itet	ne
 8017880:	9904      	ldrne	r1, [sp, #16]
 8017882:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8017886:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801788a:	9305      	str	r3, [sp, #20]
 801788c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8017890:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8017894:	fb16 f601 	smulbb	r6, r6, r1
 8017898:	6859      	ldr	r1, [r3, #4]
 801789a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801789e:	4671      	mov	r1, lr
 80178a0:	a80a      	add	r0, sp, #40	; 0x28
 80178a2:	f7fc f8c2 	bl	8013a2a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80178a6:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80178aa:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80178ae:	9b03      	ldr	r3, [sp, #12]
 80178b0:	9a00      	ldr	r2, [sp, #0]
 80178b2:	fb11 f100 	smulbb	r1, r1, r0
 80178b6:	2008      	movs	r0, #8
 80178b8:	fb02 6603 	mla	r6, r2, r3, r6
 80178bc:	1b8e      	subs	r6, r1, r6
 80178be:	fb91 f1f0 	sdiv	r1, r1, r0
 80178c2:	42b1      	cmp	r1, r6
 80178c4:	dc21      	bgt.n	801790a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80178c6:	4556      	cmp	r6, sl
 80178c8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80178cc:	da03      	bge.n	80178d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 80178ce:	b1e6      	cbz	r6, 801790a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80178d0:	46b2      	mov	sl, r6
 80178d2:	4645      	mov	r5, r8
 80178d4:	464c      	mov	r4, r9
 80178d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80178da:	f118 0f02 	cmn.w	r8, #2
 80178de:	d1c8      	bne.n	8017872 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 80178e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80178e4:	f1a7 0708 	sub.w	r7, r7, #8
 80178e8:	4691      	mov	r9, r2
 80178ea:	d1b7      	bne.n	801785c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 80178ec:	9b01      	ldr	r3, [sp, #4]
 80178ee:	b2a6      	uxth	r6, r4
 80178f0:	00e4      	lsls	r4, r4, #3
 80178f2:	1918      	adds	r0, r3, r4
 80178f4:	1c6b      	adds	r3, r5, #1
 80178f6:	d10b      	bne.n	8017910 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 80178f8:	4601      	mov	r1, r0
 80178fa:	9802      	ldr	r0, [sp, #8]
 80178fc:	f7fc f895 	bl	8013a2a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017900:	4631      	mov	r1, r6
 8017902:	9801      	ldr	r0, [sp, #4]
 8017904:	f7ff fcc0 	bl	8017288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017908:	e50f      	b.n	801732a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801790a:	4645      	mov	r5, r8
 801790c:	464c      	mov	r4, r9
 801790e:	e7ed      	b.n	80178ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8017910:	9b01      	ldr	r3, [sp, #4]
 8017912:	00ed      	lsls	r5, r5, #3
 8017914:	445c      	add	r4, fp
 8017916:	1959      	adds	r1, r3, r5
 8017918:	445d      	add	r5, fp
 801791a:	f7fc f886 	bl	8013a2a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801791e:	9b02      	ldr	r3, [sp, #8]
 8017920:	cb03      	ldmia	r3!, {r0, r1}
 8017922:	9b02      	ldr	r3, [sp, #8]
 8017924:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8017928:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801792c:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8017930:	6861      	ldr	r1, [r4, #4]
 8017932:	c303      	stmia	r3!, {r0, r1}
 8017934:	e7e4      	b.n	8017900 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08017938 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8017938:	4b1d      	ldr	r3, [pc, #116]	; (80179b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801793a:	b530      	push	{r4, r5, lr}
 801793c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017940:	b085      	sub	sp, #20
 8017942:	4b1c      	ldr	r3, [pc, #112]	; (80179b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8017944:	460c      	mov	r4, r1
 8017946:	2100      	movs	r1, #0
 8017948:	4605      	mov	r5, r0
 801794a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801794e:	6820      	ldr	r0, [r4, #0]
 8017950:	9100      	str	r1, [sp, #0]
 8017952:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017956:	ab02      	add	r3, sp, #8
 8017958:	6861      	ldr	r1, [r4, #4]
 801795a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801795e:	c303      	stmia	r3!, {r0, r1}
 8017960:	4669      	mov	r1, sp
 8017962:	a802      	add	r0, sp, #8
 8017964:	f7fb fccc 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 8017968:	ab02      	add	r3, sp, #8
 801796a:	cb03      	ldmia	r3!, {r0, r1}
 801796c:	4b12      	ldr	r3, [pc, #72]	; (80179b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801796e:	6020      	str	r0, [r4, #0]
 8017970:	6818      	ldr	r0, [r3, #0]
 8017972:	6061      	str	r1, [r4, #4]
 8017974:	b138      	cbz	r0, 8017986 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8017976:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801797a:	b133      	cbz	r3, 801798a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801797c:	6821      	ldr	r1, [r4, #0]
 801797e:	4628      	mov	r0, r5
 8017980:	6862      	ldr	r2, [r4, #4]
 8017982:	f7ff fcc5 	bl	8017310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017986:	b005      	add	sp, #20
 8017988:	bd30      	pop	{r4, r5, pc}
 801798a:	6803      	ldr	r3, [r0, #0]
 801798c:	4621      	mov	r1, r4
 801798e:	689b      	ldr	r3, [r3, #8]
 8017990:	4798      	blx	r3
 8017992:	4b0a      	ldr	r3, [pc, #40]	; (80179bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8017994:	6818      	ldr	r0, [r3, #0]
 8017996:	b118      	cbz	r0, 80179a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8017998:	6803      	ldr	r3, [r0, #0]
 801799a:	4621      	mov	r1, r4
 801799c:	689b      	ldr	r3, [r3, #8]
 801799e:	4798      	blx	r3
 80179a0:	4b07      	ldr	r3, [pc, #28]	; (80179c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80179a2:	4621      	mov	r1, r4
 80179a4:	6818      	ldr	r0, [r3, #0]
 80179a6:	6803      	ldr	r3, [r0, #0]
 80179a8:	69db      	ldr	r3, [r3, #28]
 80179aa:	4798      	blx	r3
 80179ac:	e7eb      	b.n	8017986 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80179ae:	bf00      	nop
 80179b0:	2400aee0 	.word	0x2400aee0
 80179b4:	2400aee2 	.word	0x2400aee2
 80179b8:	2400af28 	.word	0x2400af28
 80179bc:	2400af24 	.word	0x2400af24
 80179c0:	2400aeec 	.word	0x2400aeec

080179c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80179c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179c8:	4604      	mov	r4, r0
 80179ca:	b09b      	sub	sp, #108	; 0x6c
 80179cc:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 80179d0:	b129      	cbz	r1, 80179de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80179d2:	2300      	movs	r3, #0
 80179d4:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80179d8:	b01b      	add	sp, #108	; 0x6c
 80179da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179de:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80179e2:	4630      	mov	r0, r6
 80179e4:	f7fb fccf 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 80179e8:	4605      	mov	r5, r0
 80179ea:	b940      	cbnz	r0, 80179fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 80179ec:	4620      	mov	r0, r4
 80179ee:	e896 0006 	ldmia.w	r6, {r1, r2}
 80179f2:	f7ff fc8d 	bl	8017310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80179f6:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80179fa:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80179fe:	4ba6      	ldr	r3, [pc, #664]	; (8017c98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	b33b      	cbz	r3, 8017a54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8017a04:	4da5      	ldr	r5, [pc, #660]	; (8017c9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8017a06:	4628      	mov	r0, r5
 8017a08:	f7fb fcbd 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a0c:	4606      	mov	r6, r0
 8017a0e:	bb08      	cbnz	r0, 8017a54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8017a10:	4628      	mov	r0, r5
 8017a12:	f7ff f9f7 	bl	8016e04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017a16:	6829      	ldr	r1, [r5, #0]
 8017a18:	686a      	ldr	r2, [r5, #4]
 8017a1a:	4620      	mov	r0, r4
 8017a1c:	f7ff fc78 	bl	8017310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017a20:	802e      	strh	r6, [r5, #0]
 8017a22:	806e      	strh	r6, [r5, #2]
 8017a24:	80ae      	strh	r6, [r5, #4]
 8017a26:	80ee      	strh	r6, [r5, #6]
 8017a28:	4f9d      	ldr	r7, [pc, #628]	; (8017ca0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8017a2a:	a809      	add	r0, sp, #36	; 0x24
 8017a2c:	f7ff fbd7 	bl	80171de <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017a30:	883d      	ldrh	r5, [r7, #0]
 8017a32:	462e      	mov	r6, r5
 8017a34:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017a38:	42b3      	cmp	r3, r6
 8017a3a:	d910      	bls.n	8017a5e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8017a3c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8017a40:	3601      	adds	r6, #1
 8017a42:	a809      	add	r0, sp, #36	; 0x24
 8017a44:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8017a48:	b2b6      	uxth	r6, r6
 8017a4a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8017a4e:	f7ff fc3d 	bl	80172cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017a52:	e7ef      	b.n	8017a34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8017a54:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d1e5      	bne.n	8017a28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8017a5c:	e7bc      	b.n	80179d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8017a5e:	462e      	mov	r6, r5
 8017a60:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8017a64:	42b3      	cmp	r3, r6
 8017a66:	d90b      	bls.n	8017a80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8017a68:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8017a6c:	3601      	adds	r6, #1
 8017a6e:	4620      	mov	r0, r4
 8017a70:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8017a74:	b2b6      	uxth	r6, r6
 8017a76:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8017a7a:	f7ff fc49 	bl	8017310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017a7e:	e7ef      	b.n	8017a60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8017a80:	4a88      	ldr	r2, [pc, #544]	; (8017ca4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8017a82:	6813      	ldr	r3, [r2, #0]
 8017a84:	4690      	mov	r8, r2
 8017a86:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017a8a:	2b01      	cmp	r3, #1
 8017a8c:	f040 8094 	bne.w	8017bb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8017a90:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8017a94:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8017a98:	f04f 0900 	mov.w	r9, #0
 8017a9c:	33aa      	adds	r3, #170	; 0xaa
 8017a9e:	42a8      	cmp	r0, r5
 8017aa0:	f103 0308 	add.w	r3, r3, #8
 8017aa4:	dd0a      	ble.n	8017abc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8017aa6:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8017aaa:	3501      	adds	r5, #1
 8017aac:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8017ab0:	440a      	add	r2, r1
 8017ab2:	b212      	sxth	r2, r2
 8017ab4:	4591      	cmp	r9, r2
 8017ab6:	bfb8      	it	lt
 8017ab8:	4691      	movlt	r9, r2
 8017aba:	e7f0      	b.n	8017a9e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8017abc:	4b7a      	ldr	r3, [pc, #488]	; (8017ca8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8017abe:	4e7b      	ldr	r6, [pc, #492]	; (8017cac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8017ac0:	881d      	ldrh	r5, [r3, #0]
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	2d0f      	cmp	r5, #15
 8017ac6:	bf8c      	ite	hi
 8017ac8:	08ed      	lsrhi	r5, r5, #3
 8017aca:	2501      	movls	r5, #1
 8017acc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017ad0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017ad4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8017ad8:	f8d8 0000 	ldr.w	r0, [r8]
 8017adc:	440b      	add	r3, r1
 8017ade:	6802      	ldr	r2, [r0, #0]
 8017ae0:	b21b      	sxth	r3, r3
 8017ae2:	4599      	cmp	r9, r3
 8017ae4:	dd4b      	ble.n	8017b7e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 8017ae6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8017aea:	4798      	blx	r3
 8017aec:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017af0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017af4:	4413      	add	r3, r2
 8017af6:	b21b      	sxth	r3, r3
 8017af8:	195a      	adds	r2, r3, r5
 8017afa:	4290      	cmp	r0, r2
 8017afc:	da07      	bge.n	8017b0e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8017afe:	4581      	cmp	r9, r0
 8017b00:	dd05      	ble.n	8017b0e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8017b02:	4298      	cmp	r0, r3
 8017b04:	da33      	bge.n	8017b6e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	dd31      	ble.n	8017b6e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8017b0a:	4648      	mov	r0, r9
 8017b0c:	e004      	b.n	8017b18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 8017b0e:	4298      	cmp	r0, r3
 8017b10:	dbfb      	blt.n	8017b0a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 8017b12:	4548      	cmp	r0, r9
 8017b14:	bfa8      	it	ge
 8017b16:	4648      	movge	r0, r9
 8017b18:	f9b6 2000 	ldrsh.w	r2, [r6]
 8017b1c:	2100      	movs	r1, #0
 8017b1e:	1ac0      	subs	r0, r0, r3
 8017b20:	f8b7 a000 	ldrh.w	sl, [r7]
 8017b24:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017b28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b2c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017b30:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017b34:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017b38:	4553      	cmp	r3, sl
 8017b3a:	d9c9      	bls.n	8017ad0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8017b3c:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8017b40:	ab07      	add	r3, sp, #28
 8017b42:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017b46:	6851      	ldr	r1, [r2, #4]
 8017b48:	c303      	stmia	r3!, {r0, r1}
 8017b4a:	a807      	add	r0, sp, #28
 8017b4c:	a905      	add	r1, sp, #20
 8017b4e:	f7fb fbd7 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 8017b52:	a807      	add	r0, sp, #28
 8017b54:	f7fb fc17 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b58:	b920      	cbnz	r0, 8017b64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 8017b5a:	6823      	ldr	r3, [r4, #0]
 8017b5c:	a907      	add	r1, sp, #28
 8017b5e:	4620      	mov	r0, r4
 8017b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b62:	4798      	blx	r3
 8017b64:	f10a 0a01 	add.w	sl, sl, #1
 8017b68:	fa1f fa8a 	uxth.w	sl, sl
 8017b6c:	e7e2      	b.n	8017b34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8017b6e:	f8d8 0000 	ldr.w	r0, [r8]
 8017b72:	2101      	movs	r1, #1
 8017b74:	6803      	ldr	r3, [r0, #0]
 8017b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b7a:	4798      	blx	r3
 8017b7c:	e7a8      	b.n	8017ad0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8017b7e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8017b80:	4798      	blx	r3
 8017b82:	4b4b      	ldr	r3, [pc, #300]	; (8017cb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8017b84:	781b      	ldrb	r3, [r3, #0]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	f43f af26 	beq.w	80179d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	883d      	ldrh	r5, [r7, #0]
 8017b90:	34ea      	adds	r4, #234	; 0xea
 8017b92:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8017b96:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8017b9a:	42ab      	cmp	r3, r5
 8017b9c:	f67f af1c 	bls.w	80179d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8017ba0:	ab1a      	add	r3, sp, #104	; 0x68
 8017ba2:	4620      	mov	r0, r4
 8017ba4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017ba8:	3501      	adds	r5, #1
 8017baa:	3b44      	subs	r3, #68	; 0x44
 8017bac:	b2ad      	uxth	r5, r5
 8017bae:	e893 0006 	ldmia.w	r3, {r1, r2}
 8017bb2:	f7ff fb8b 	bl	80172cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017bb6:	e7ee      	b.n	8017b96 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8017bb8:	2b02      	cmp	r3, #2
 8017bba:	f040 813d 	bne.w	8017e38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 8017bbe:	4b3d      	ldr	r3, [pc, #244]	; (8017cb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8017bc0:	781b      	ldrb	r3, [r3, #0]
 8017bc2:	2b01      	cmp	r3, #1
 8017bc4:	d02c      	beq.n	8017c20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 8017bc6:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8017bca:	883a      	ldrh	r2, [r7, #0]
 8017bcc:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8017bd0:	3201      	adds	r2, #1
 8017bd2:	b292      	uxth	r2, r2
 8017bd4:	2900      	cmp	r1, #0
 8017bd6:	d0d4      	beq.n	8017b82 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8017bd8:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8017bdc:	4610      	mov	r0, r2
 8017bde:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8017be2:	f04f 0a00 	mov.w	sl, #0
 8017be6:	441d      	add	r5, r3
 8017be8:	b22d      	sxth	r5, r5
 8017bea:	b283      	uxth	r3, r0
 8017bec:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8017bf0:	4299      	cmp	r1, r3
 8017bf2:	f240 80c3 	bls.w	8017d7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8017bf6:	4426      	add	r6, r4
 8017bf8:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8017bfc:	4684      	mov	ip, r0
 8017bfe:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8017c02:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8017c06:	4573      	cmp	r3, lr
 8017c08:	f340 80a5 	ble.w	8017d56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8017c0c:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8017c10:	4475      	add	r5, lr
 8017c12:	b22d      	sxth	r5, r5
 8017c14:	429d      	cmp	r5, r3
 8017c16:	bfa8      	it	ge
 8017c18:	461d      	movge	r5, r3
 8017c1a:	3001      	adds	r0, #1
 8017c1c:	46e2      	mov	sl, ip
 8017c1e:	e7e4      	b.n	8017bea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8017c20:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8017c24:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8017c28:	f1bb 0f00 	cmp.w	fp, #0
 8017c2c:	d0a9      	beq.n	8017b82 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8017c2e:	883b      	ldrh	r3, [r7, #0]
 8017c30:	2600      	movs	r6, #0
 8017c32:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8017c36:	3301      	adds	r3, #1
 8017c38:	b29b      	uxth	r3, r3
 8017c3a:	b299      	uxth	r1, r3
 8017c3c:	00f5      	lsls	r5, r6, #3
 8017c3e:	458b      	cmp	fp, r1
 8017c40:	d93a      	bls.n	8017cb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8017c42:	4425      	add	r5, r4
 8017c44:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8017c48:	469c      	mov	ip, r3
 8017c4a:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8017c4e:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8017c52:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8017c56:	4408      	add	r0, r1
 8017c58:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8017c5c:	4471      	add	r1, lr
 8017c5e:	b200      	sxth	r0, r0
 8017c60:	b209      	sxth	r1, r1
 8017c62:	4288      	cmp	r0, r1
 8017c64:	da06      	bge.n	8017c74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8017c66:	4586      	cmp	lr, r0
 8017c68:	4672      	mov	r2, lr
 8017c6a:	bfb8      	it	lt
 8017c6c:	4602      	movlt	r2, r0
 8017c6e:	3301      	adds	r3, #1
 8017c70:	4666      	mov	r6, ip
 8017c72:	e7e2      	b.n	8017c3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8017c74:	d10b      	bne.n	8017c8e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8017c76:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8017c7a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8017c7e:	458c      	cmp	ip, r1
 8017c80:	bfb4      	ite	lt
 8017c82:	469c      	movlt	ip, r3
 8017c84:	46b4      	movge	ip, r6
 8017c86:	4572      	cmp	r2, lr
 8017c88:	bfb8      	it	lt
 8017c8a:	4672      	movlt	r2, lr
 8017c8c:	e7ef      	b.n	8017c6e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8017c8e:	428a      	cmp	r2, r1
 8017c90:	46b4      	mov	ip, r6
 8017c92:	bfb8      	it	lt
 8017c94:	460a      	movlt	r2, r1
 8017c96:	e7ea      	b.n	8017c6e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8017c98:	2400af24 	.word	0x2400af24
 8017c9c:	2400af30 	.word	0x2400af30
 8017ca0:	2400004e 	.word	0x2400004e
 8017ca4:	2400aeec 	.word	0x2400aeec
 8017ca8:	2400aee2 	.word	0x2400aee2
 8017cac:	2400aee0 	.word	0x2400aee0
 8017cb0:	2400aeea 	.word	0x2400aeea
 8017cb4:	2400aee4 	.word	0x2400aee4
 8017cb8:	1961      	adds	r1, r4, r5
 8017cba:	ab07      	add	r3, sp, #28
 8017cbc:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8017cc0:	6849      	ldr	r1, [r1, #4]
 8017cc2:	c303      	stmia	r3!, {r0, r1}
 8017cc4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017cc8:	a807      	add	r0, sp, #28
 8017cca:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017cce:	2b13      	cmp	r3, #19
 8017cd0:	440b      	add	r3, r1
 8017cd2:	bfd8      	it	le
 8017cd4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8017cd8:	1a9b      	subs	r3, r3, r2
 8017cda:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017cde:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017ce2:	f7ff f8a9 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ce6:	a807      	add	r0, sp, #28
 8017ce8:	f7fb fb4d 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017cec:	2800      	cmp	r0, #0
 8017cee:	d199      	bne.n	8017c24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8017cf0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8017cf4:	4425      	add	r5, r4
 8017cf6:	f8d8 0000 	ldr.w	r0, [r8]
 8017cfa:	f1bc 0f14 	cmp.w	ip, #20
 8017cfe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017d02:	f8d0 e000 	ldr.w	lr, [r0]
 8017d06:	bfa8      	it	ge
 8017d08:	f04f 0c14 	movge.w	ip, #20
 8017d0c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017d10:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017d14:	fa1f fc8c 	uxth.w	ip, ip
 8017d18:	f8cd c000 	str.w	ip, [sp]
 8017d1c:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 8017d20:	47d0      	blx	sl
 8017d22:	4682      	mov	sl, r0
 8017d24:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017d28:	a807      	add	r0, sp, #28
 8017d2a:	f7ff f86b 	bl	8016e04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017d2e:	6823      	ldr	r3, [r4, #0]
 8017d30:	4620      	mov	r0, r4
 8017d32:	a907      	add	r1, sp, #28
 8017d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d36:	4798      	blx	r3
 8017d38:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8017d3c:	eba0 000a 	sub.w	r0, r0, sl
 8017d40:	b200      	sxth	r0, r0
 8017d42:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8017d46:	2800      	cmp	r0, #0
 8017d48:	f47f af6c 	bne.w	8017c24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8017d4c:	b2b1      	uxth	r1, r6
 8017d4e:	4648      	mov	r0, r9
 8017d50:	f7ff fa9a 	bl	8017288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017d54:	e766      	b.n	8017c24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8017d56:	d10c      	bne.n	8017d72 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8017d58:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8017d5c:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8017d60:	45b4      	cmp	ip, r6
 8017d62:	bfb4      	ite	lt
 8017d64:	4684      	movlt	ip, r0
 8017d66:	46d4      	movge	ip, sl
 8017d68:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8017d6c:	4433      	add	r3, r6
 8017d6e:	b21b      	sxth	r3, r3
 8017d70:	e750      	b.n	8017c14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8017d72:	4575      	cmp	r5, lr
 8017d74:	46d4      	mov	ip, sl
 8017d76:	bfa8      	it	ge
 8017d78:	4675      	movge	r5, lr
 8017d7a:	e74e      	b.n	8017c1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8017d7c:	eb0b 0006 	add.w	r0, fp, r6
 8017d80:	4426      	add	r6, r4
 8017d82:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8017d86:	f1b9 0f13 	cmp.w	r9, #19
 8017d8a:	bfdc      	itt	le
 8017d8c:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8017d90:	444d      	addle	r5, r9
 8017d92:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8017d96:	bfd8      	it	le
 8017d98:	b22d      	sxthle	r5, r5
 8017d9a:	f7fb faf4 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017d9e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017da2:	2800      	cmp	r0, #0
 8017da4:	f47f af16 	bne.w	8017bd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8017da8:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8017dac:	fa1f f989 	uxth.w	r9, r9
 8017db0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017db4:	eba5 050c 	sub.w	r5, r5, ip
 8017db8:	fa1f f28c 	uxth.w	r2, ip
 8017dbc:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8017dc0:	eb02 0009 	add.w	r0, r2, r9
 8017dc4:	2d14      	cmp	r5, #20
 8017dc6:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8017dca:	bfa8      	it	ge
 8017dcc:	2514      	movge	r5, #20
 8017dce:	b200      	sxth	r0, r0
 8017dd0:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017dd4:	b289      	uxth	r1, r1
 8017dd6:	fa1f fe85 	uxth.w	lr, r5
 8017dda:	eba0 000c 	sub.w	r0, r0, ip
 8017dde:	f8ad c01e 	strh.w	ip, [sp, #30]
 8017de2:	4586      	cmp	lr, r0
 8017de4:	f8d8 0000 	ldr.w	r0, [r8]
 8017de8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017dec:	b29b      	uxth	r3, r3
 8017dee:	bfb8      	it	lt
 8017df0:	46f1      	movlt	r9, lr
 8017df2:	6805      	ldr	r5, [r0, #0]
 8017df4:	f8cd 9000 	str.w	r9, [sp]
 8017df8:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 8017dfc:	47a8      	blx	r5
 8017dfe:	6823      	ldr	r3, [r4, #0]
 8017e00:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017e04:	a907      	add	r1, sp, #28
 8017e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e08:	4620      	mov	r0, r4
 8017e0a:	4798      	blx	r3
 8017e0c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017e10:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8017e14:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8017e18:	1a5b      	subs	r3, r3, r1
 8017e1a:	440a      	add	r2, r1
 8017e1c:	b21b      	sxth	r3, r3
 8017e1e:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8017e22:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	f47f aecf 	bne.w	8017bca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8017e2c:	fa1f f18a 	uxth.w	r1, sl
 8017e30:	4658      	mov	r0, fp
 8017e32:	f7ff fa29 	bl	8017288 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017e36:	e6c8      	b.n	8017bca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8017e38:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017e3c:	42ab      	cmp	r3, r5
 8017e3e:	f67f aea0 	bls.w	8017b82 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8017e42:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8017e46:	ab07      	add	r3, sp, #28
 8017e48:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017e4c:	6851      	ldr	r1, [r2, #4]
 8017e4e:	c303      	stmia	r3!, {r0, r1}
 8017e50:	a807      	add	r0, sp, #28
 8017e52:	f7fb fa98 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017e56:	b920      	cbnz	r0, 8017e62 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8017e58:	6823      	ldr	r3, [r4, #0]
 8017e5a:	a907      	add	r1, sp, #28
 8017e5c:	4620      	mov	r0, r4
 8017e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e60:	4798      	blx	r3
 8017e62:	3501      	adds	r5, #1
 8017e64:	b2ad      	uxth	r5, r5
 8017e66:	e7e7      	b.n	8017e38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08017e68 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017e68:	4b03      	ldr	r3, [pc, #12]	; (8017e78 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	801a      	strh	r2, [r3, #0]
 8017e6e:	805a      	strh	r2, [r3, #2]
 8017e70:	809a      	strh	r2, [r3, #4]
 8017e72:	80da      	strh	r2, [r3, #6]
 8017e74:	4770      	bx	lr
 8017e76:	bf00      	nop
 8017e78:	2400af30 	.word	0x2400af30

08017e7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e80:	b09d      	sub	sp, #116	; 0x74
 8017e82:	4606      	mov	r6, r0
 8017e84:	4614      	mov	r4, r2
 8017e86:	468a      	mov	sl, r1
 8017e88:	a803      	add	r0, sp, #12
 8017e8a:	461d      	mov	r5, r3
 8017e8c:	f000 fd7f 	bl	801898e <_ZN8touchgfx12TextProviderC1Ev>
 8017e90:	6833      	ldr	r3, [r6, #0]
 8017e92:	4630      	mov	r0, r6
 8017e94:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e9a:	4798      	blx	r3
 8017e9c:	6833      	ldr	r3, [r6, #0]
 8017e9e:	4607      	mov	r7, r0
 8017ea0:	4630      	mov	r0, r6
 8017ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017ea4:	4798      	blx	r3
 8017ea6:	462a      	mov	r2, r5
 8017ea8:	2500      	movs	r5, #0
 8017eaa:	4621      	mov	r1, r4
 8017eac:	9000      	str	r0, [sp, #0]
 8017eae:	463b      	mov	r3, r7
 8017eb0:	462c      	mov	r4, r5
 8017eb2:	46a9      	mov	r9, r5
 8017eb4:	46a8      	mov	r8, r5
 8017eb6:	a803      	add	r0, sp, #12
 8017eb8:	f000 fdbc 	bl	8018a34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	9302      	str	r3, [sp, #8]
 8017ec0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017ec4:	429c      	cmp	r4, r3
 8017ec6:	d002      	beq.n	8017ece <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017ec8:	455c      	cmp	r4, fp
 8017eca:	bf18      	it	ne
 8017ecc:	4625      	movne	r5, r4
 8017ece:	ab02      	add	r3, sp, #8
 8017ed0:	4632      	mov	r2, r6
 8017ed2:	4651      	mov	r1, sl
 8017ed4:	a803      	add	r0, sp, #12
 8017ed6:	f001 f8ad 	bl	8019034 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017eda:	4604      	mov	r4, r0
 8017edc:	b108      	cbz	r0, 8017ee2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017ede:	280a      	cmp	r0, #10
 8017ee0:	d10a      	bne.n	8017ef8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017ee2:	45c1      	cmp	r9, r8
 8017ee4:	bf38      	it	cc
 8017ee6:	46c1      	movcc	r9, r8
 8017ee8:	f04f 0800 	mov.w	r8, #0
 8017eec:	2c00      	cmp	r4, #0
 8017eee:	d1e5      	bne.n	8017ebc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017ef0:	4648      	mov	r0, r9
 8017ef2:	b01d      	add	sp, #116	; 0x74
 8017ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ef8:	9a02      	ldr	r2, [sp, #8]
 8017efa:	2a00      	cmp	r2, #0
 8017efc:	d0de      	beq.n	8017ebc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017efe:	7b57      	ldrb	r7, [r2, #13]
 8017f00:	4629      	mov	r1, r5
 8017f02:	6833      	ldr	r3, [r6, #0]
 8017f04:	007f      	lsls	r7, r7, #1
 8017f06:	8894      	ldrh	r4, [r2, #4]
 8017f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f0a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017f0e:	7a97      	ldrb	r7, [r2, #10]
 8017f10:	4307      	orrs	r7, r0
 8017f12:	4630      	mov	r0, r6
 8017f14:	4798      	blx	r3
 8017f16:	4438      	add	r0, r7
 8017f18:	4480      	add	r8, r0
 8017f1a:	fa1f f888 	uxth.w	r8, r8
 8017f1e:	e7e5      	b.n	8017eec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08017f20 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017f20:	b508      	push	{r3, lr}
 8017f22:	6803      	ldr	r3, [r0, #0]
 8017f24:	68db      	ldr	r3, [r3, #12]
 8017f26:	4798      	blx	r3
 8017f28:	b128      	cbz	r0, 8017f36 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017f2a:	7b43      	ldrb	r3, [r0, #13]
 8017f2c:	7a80      	ldrb	r0, [r0, #10]
 8017f2e:	005b      	lsls	r3, r3, #1
 8017f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017f34:	4318      	orrs	r0, r3
 8017f36:	bd08      	pop	{r3, pc}

08017f38 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017f38:	b40e      	push	{r1, r2, r3}
 8017f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f3c:	b09e      	sub	sp, #120	; 0x78
 8017f3e:	4605      	mov	r5, r0
 8017f40:	ab23      	add	r3, sp, #140	; 0x8c
 8017f42:	a805      	add	r0, sp, #20
 8017f44:	f853 4b04 	ldr.w	r4, [r3], #4
 8017f48:	9303      	str	r3, [sp, #12]
 8017f4a:	f000 fd20 	bl	801898e <_ZN8touchgfx12TextProviderC1Ev>
 8017f4e:	682b      	ldr	r3, [r5, #0]
 8017f50:	4628      	mov	r0, r5
 8017f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f54:	4798      	blx	r3
 8017f56:	682b      	ldr	r3, [r5, #0]
 8017f58:	4606      	mov	r6, r0
 8017f5a:	4628      	mov	r0, r5
 8017f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017f5e:	4798      	blx	r3
 8017f60:	4633      	mov	r3, r6
 8017f62:	4621      	mov	r1, r4
 8017f64:	ae1e      	add	r6, sp, #120	; 0x78
 8017f66:	2400      	movs	r4, #0
 8017f68:	9000      	str	r0, [sp, #0]
 8017f6a:	9a03      	ldr	r2, [sp, #12]
 8017f6c:	a805      	add	r0, sp, #20
 8017f6e:	f000 fd61 	bl	8018a34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017f72:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017f76:	462a      	mov	r2, r5
 8017f78:	4633      	mov	r3, r6
 8017f7a:	4621      	mov	r1, r4
 8017f7c:	a805      	add	r0, sp, #20
 8017f7e:	f001 f859 	bl	8019034 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017f82:	b300      	cbz	r0, 8017fc6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8017f84:	280a      	cmp	r0, #10
 8017f86:	d01a      	beq.n	8017fbe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017f88:	9f04      	ldr	r7, [sp, #16]
 8017f8a:	b1c7      	cbz	r7, 8017fbe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017f8c:	7b78      	ldrb	r0, [r7, #13]
 8017f8e:	7a3b      	ldrb	r3, [r7, #8]
 8017f90:	00c1      	lsls	r1, r0, #3
 8017f92:	88aa      	ldrh	r2, [r5, #4]
 8017f94:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017f98:	4319      	orrs	r1, r3
 8017f9a:	0643      	lsls	r3, r0, #25
 8017f9c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017fa0:	bf48      	it	mi
 8017fa2:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8017fa6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017faa:	bf48      	it	mi
 8017fac:	b219      	sxthmi	r1, r3
 8017fae:	79fb      	ldrb	r3, [r7, #7]
 8017fb0:	4303      	orrs	r3, r0
 8017fb2:	4413      	add	r3, r2
 8017fb4:	1a5b      	subs	r3, r3, r1
 8017fb6:	b29b      	uxth	r3, r3
 8017fb8:	42a3      	cmp	r3, r4
 8017fba:	bfc8      	it	gt
 8017fbc:	b21c      	sxthgt	r4, r3
 8017fbe:	4633      	mov	r3, r6
 8017fc0:	462a      	mov	r2, r5
 8017fc2:	2100      	movs	r1, #0
 8017fc4:	e7da      	b.n	8017f7c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017fc6:	b2a0      	uxth	r0, r4
 8017fc8:	b01e      	add	sp, #120	; 0x78
 8017fca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017fce:	b003      	add	sp, #12
 8017fd0:	4770      	bx	lr

08017fd2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017fd2:	b40e      	push	{r1, r2, r3}
 8017fd4:	b570      	push	{r4, r5, r6, lr}
 8017fd6:	b09d      	sub	sp, #116	; 0x74
 8017fd8:	4604      	mov	r4, r0
 8017fda:	ab21      	add	r3, sp, #132	; 0x84
 8017fdc:	a803      	add	r0, sp, #12
 8017fde:	f853 5b04 	ldr.w	r5, [r3], #4
 8017fe2:	9302      	str	r3, [sp, #8]
 8017fe4:	f000 fcd3 	bl	801898e <_ZN8touchgfx12TextProviderC1Ev>
 8017fe8:	6823      	ldr	r3, [r4, #0]
 8017fea:	4620      	mov	r0, r4
 8017fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fee:	4798      	blx	r3
 8017ff0:	6823      	ldr	r3, [r4, #0]
 8017ff2:	4606      	mov	r6, r0
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017ff8:	2401      	movs	r4, #1
 8017ffa:	4798      	blx	r3
 8017ffc:	4633      	mov	r3, r6
 8017ffe:	9000      	str	r0, [sp, #0]
 8018000:	4629      	mov	r1, r5
 8018002:	9a02      	ldr	r2, [sp, #8]
 8018004:	a803      	add	r0, sp, #12
 8018006:	f000 fd15 	bl	8018a34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801800a:	a803      	add	r0, sp, #12
 801800c:	f001 f90c 	bl	8019228 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018010:	b2a3      	uxth	r3, r4
 8018012:	b138      	cbz	r0, 8018024 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8018014:	280a      	cmp	r0, #10
 8018016:	a803      	add	r0, sp, #12
 8018018:	bf04      	itt	eq
 801801a:	3301      	addeq	r3, #1
 801801c:	b21c      	sxtheq	r4, r3
 801801e:	f001 f903 	bl	8019228 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018022:	e7f5      	b.n	8018010 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018024:	4618      	mov	r0, r3
 8018026:	b01d      	add	sp, #116	; 0x74
 8018028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801802c:	b003      	add	sp, #12
 801802e:	4770      	bx	lr

08018030 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018030:	b40e      	push	{r1, r2, r3}
 8018032:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018034:	b09e      	sub	sp, #120	; 0x78
 8018036:	4604      	mov	r4, r0
 8018038:	ab23      	add	r3, sp, #140	; 0x8c
 801803a:	a805      	add	r0, sp, #20
 801803c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018040:	9303      	str	r3, [sp, #12]
 8018042:	f000 fca4 	bl	801898e <_ZN8touchgfx12TextProviderC1Ev>
 8018046:	6823      	ldr	r3, [r4, #0]
 8018048:	4620      	mov	r0, r4
 801804a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801804c:	4798      	blx	r3
 801804e:	6823      	ldr	r3, [r4, #0]
 8018050:	4606      	mov	r6, r0
 8018052:	4620      	mov	r0, r4
 8018054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018056:	4798      	blx	r3
 8018058:	4633      	mov	r3, r6
 801805a:	4629      	mov	r1, r5
 801805c:	9000      	str	r0, [sp, #0]
 801805e:	9a03      	ldr	r2, [sp, #12]
 8018060:	a805      	add	r0, sp, #20
 8018062:	f000 fce7 	bl	8018a34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018066:	ad1e      	add	r5, sp, #120	; 0x78
 8018068:	2100      	movs	r1, #0
 801806a:	26ff      	movs	r6, #255	; 0xff
 801806c:	4622      	mov	r2, r4
 801806e:	a805      	add	r0, sp, #20
 8018070:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018074:	462b      	mov	r3, r5
 8018076:	f000 ffdd 	bl	8019034 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801807a:	b1d8      	cbz	r0, 80180b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801807c:	280a      	cmp	r0, #10
 801807e:	d012      	beq.n	80180a6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018080:	9804      	ldr	r0, [sp, #16]
 8018082:	b180      	cbz	r0, 80180a6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018084:	7b47      	ldrb	r7, [r0, #13]
 8018086:	7922      	ldrb	r2, [r4, #4]
 8018088:	00fb      	lsls	r3, r7, #3
 801808a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801808e:	7a03      	ldrb	r3, [r0, #8]
 8018090:	430b      	orrs	r3, r1
 8018092:	0679      	lsls	r1, r7, #25
 8018094:	bf44      	itt	mi
 8018096:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801809a:	b21b      	sxthmi	r3, r3
 801809c:	1ad3      	subs	r3, r2, r3
 801809e:	b2db      	uxtb	r3, r3
 80180a0:	429e      	cmp	r6, r3
 80180a2:	bf28      	it	cs
 80180a4:	461e      	movcs	r6, r3
 80180a6:	462b      	mov	r3, r5
 80180a8:	4622      	mov	r2, r4
 80180aa:	2100      	movs	r1, #0
 80180ac:	a805      	add	r0, sp, #20
 80180ae:	f000 ffc1 	bl	8019034 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80180b2:	e7e2      	b.n	801807a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 80180b4:	4630      	mov	r0, r6
 80180b6:	b01e      	add	sp, #120	; 0x78
 80180b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80180bc:	b003      	add	sp, #12
 80180be:	4770      	bx	lr

080180c0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80180c0:	b513      	push	{r0, r1, r4, lr}
 80180c2:	6803      	ldr	r3, [r0, #0]
 80180c4:	2400      	movs	r4, #0
 80180c6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80180ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80180ce:	f8ad 1004 	strh.w	r1, [sp, #4]
 80180d2:	4669      	mov	r1, sp
 80180d4:	691b      	ldr	r3, [r3, #16]
 80180d6:	9400      	str	r4, [sp, #0]
 80180d8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80180dc:	4798      	blx	r3
 80180de:	b002      	add	sp, #8
 80180e0:	bd10      	pop	{r4, pc}

080180e2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80180e2:	b538      	push	{r3, r4, r5, lr}
 80180e4:	680b      	ldr	r3, [r1, #0]
 80180e6:	460c      	mov	r4, r1
 80180e8:	4605      	mov	r5, r0
 80180ea:	68db      	ldr	r3, [r3, #12]
 80180ec:	4798      	blx	r3
 80180ee:	6823      	ldr	r3, [r4, #0]
 80180f0:	4620      	mov	r0, r4
 80180f2:	4629      	mov	r1, r5
 80180f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180f6:	4798      	blx	r3
 80180f8:	4628      	mov	r0, r5
 80180fa:	bd38      	pop	{r3, r4, r5, pc}

080180fc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80180fc:	b410      	push	{r4}
 80180fe:	880a      	ldrh	r2, [r1, #0]
 8018100:	8884      	ldrh	r4, [r0, #4]
 8018102:	4422      	add	r2, r4
 8018104:	800a      	strh	r2, [r1, #0]
 8018106:	884a      	ldrh	r2, [r1, #2]
 8018108:	88c4      	ldrh	r4, [r0, #6]
 801810a:	4422      	add	r2, r4
 801810c:	804a      	strh	r2, [r1, #2]
 801810e:	6940      	ldr	r0, [r0, #20]
 8018110:	b120      	cbz	r0, 801811c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018112:	6803      	ldr	r3, [r0, #0]
 8018114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801811a:	4718      	bx	r3
 801811c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018120:	4770      	bx	lr

08018122 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018122:	b570      	push	{r4, r5, r6, lr}
 8018124:	8882      	ldrh	r2, [r0, #4]
 8018126:	460c      	mov	r4, r1
 8018128:	880b      	ldrh	r3, [r1, #0]
 801812a:	4605      	mov	r5, r0
 801812c:	4413      	add	r3, r2
 801812e:	800b      	strh	r3, [r1, #0]
 8018130:	884b      	ldrh	r3, [r1, #2]
 8018132:	88c2      	ldrh	r2, [r0, #6]
 8018134:	4413      	add	r3, r2
 8018136:	804b      	strh	r3, [r1, #2]
 8018138:	1d01      	adds	r1, r0, #4
 801813a:	4620      	mov	r0, r4
 801813c:	f7fb f8e0 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 8018140:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018144:	2b00      	cmp	r3, #0
 8018146:	dd0b      	ble.n	8018160 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018148:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801814c:	2b00      	cmp	r3, #0
 801814e:	dd07      	ble.n	8018160 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018150:	6968      	ldr	r0, [r5, #20]
 8018152:	b128      	cbz	r0, 8018160 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018154:	6803      	ldr	r3, [r0, #0]
 8018156:	4621      	mov	r1, r4
 8018158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801815a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801815e:	4718      	bx	r3
 8018160:	bd70      	pop	{r4, r5, r6, pc}
	...

08018164 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018164:	b570      	push	{r4, r5, r6, lr}
 8018166:	8882      	ldrh	r2, [r0, #4]
 8018168:	460c      	mov	r4, r1
 801816a:	880b      	ldrh	r3, [r1, #0]
 801816c:	4605      	mov	r5, r0
 801816e:	4413      	add	r3, r2
 8018170:	800b      	strh	r3, [r1, #0]
 8018172:	884b      	ldrh	r3, [r1, #2]
 8018174:	88c2      	ldrh	r2, [r0, #6]
 8018176:	4413      	add	r3, r2
 8018178:	804b      	strh	r3, [r1, #2]
 801817a:	1d01      	adds	r1, r0, #4
 801817c:	4620      	mov	r0, r4
 801817e:	f7fb f8bf 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 8018182:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018186:	2b00      	cmp	r3, #0
 8018188:	dd15      	ble.n	80181b6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801818a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801818e:	2b00      	cmp	r3, #0
 8018190:	dd11      	ble.n	80181b6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8018192:	6968      	ldr	r0, [r5, #20]
 8018194:	b128      	cbz	r0, 80181a2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8018196:	6803      	ldr	r3, [r0, #0]
 8018198:	691b      	ldr	r3, [r3, #16]
 801819a:	4621      	mov	r1, r4
 801819c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181a0:	4718      	bx	r3
 80181a2:	4b05      	ldr	r3, [pc, #20]	; (80181b8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	3304      	adds	r3, #4
 80181a8:	429d      	cmp	r5, r3
 80181aa:	d104      	bne.n	80181b6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80181ac:	f7fe ffbe 	bl	801712c <_ZN8touchgfx11Application11getInstanceEv>
 80181b0:	6803      	ldr	r3, [r0, #0]
 80181b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80181b4:	e7f1      	b.n	801819a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 80181b6:	bd70      	pop	{r4, r5, r6, pc}
 80181b8:	2400af28 	.word	0x2400af28

080181bc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80181bc:	b570      	push	{r4, r5, r6, lr}
 80181be:	4604      	mov	r4, r0
 80181c0:	4616      	mov	r6, r2
 80181c2:	460d      	mov	r5, r1
 80181c4:	b901      	cbnz	r1, 80181c8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80181c6:	b192      	cbz	r2, 80181ee <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80181c8:	6823      	ldr	r3, [r4, #0]
 80181ca:	4620      	mov	r0, r4
 80181cc:	695b      	ldr	r3, [r3, #20]
 80181ce:	4798      	blx	r3
 80181d0:	88e2      	ldrh	r2, [r4, #6]
 80181d2:	88a1      	ldrh	r1, [r4, #4]
 80181d4:	4620      	mov	r0, r4
 80181d6:	4432      	add	r2, r6
 80181d8:	4429      	add	r1, r5
 80181da:	b212      	sxth	r2, r2
 80181dc:	b209      	sxth	r1, r1
 80181de:	f7ec f9f1 	bl	80045c4 <_ZN8touchgfx8Drawable5setXYEss>
 80181e2:	6823      	ldr	r3, [r4, #0]
 80181e4:	4620      	mov	r0, r4
 80181e6:	695b      	ldr	r3, [r3, #20]
 80181e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181ec:	4718      	bx	r3
 80181ee:	bd70      	pop	{r4, r5, r6, pc}

080181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80181f0:	b510      	push	{r4, lr}
 80181f2:	2300      	movs	r3, #0
 80181f4:	4604      	mov	r4, r0
 80181f6:	4608      	mov	r0, r1
 80181f8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80181fc:	8023      	strh	r3, [r4, #0]
 80181fe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018202:	8063      	strh	r3, [r4, #2]
 8018204:	6803      	ldr	r3, [r0, #0]
 8018206:	80a1      	strh	r1, [r4, #4]
 8018208:	4621      	mov	r1, r4
 801820a:	80e2      	strh	r2, [r4, #6]
 801820c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801820e:	4798      	blx	r3
 8018210:	4620      	mov	r0, r4
 8018212:	bd10      	pop	{r4, pc}

08018214 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8018214:	b530      	push	{r4, r5, lr}
 8018216:	8083      	strh	r3, [r0, #4]
 8018218:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801821c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8018220:	7183      	strb	r3, [r0, #6]
 8018222:	79c3      	ldrb	r3, [r0, #7]
 8018224:	6101      	str	r1, [r0, #16]
 8018226:	f365 0306 	bfi	r3, r5, #0, #7
 801822a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801822e:	8282      	strh	r2, [r0, #20]
 8018230:	f365 13c7 	bfi	r3, r5, #7, #1
 8018234:	71c3      	strb	r3, [r0, #7]
 8018236:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801823a:	7203      	strb	r3, [r0, #8]
 801823c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8018240:	7243      	strb	r3, [r0, #9]
 8018242:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018246:	8143      	strh	r3, [r0, #10]
 8018248:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801824c:	8183      	strh	r3, [r0, #12]
 801824e:	4b01      	ldr	r3, [pc, #4]	; (8018254 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8018250:	6003      	str	r3, [r0, #0]
 8018252:	bd30      	pop	{r4, r5, pc}
 8018254:	080294dc 	.word	0x080294dc

08018258 <_ZNK8touchgfx9ConstFont4findEt>:
 8018258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801825a:	6904      	ldr	r4, [r0, #16]
 801825c:	b3bc      	cbz	r4, 80182ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801825e:	88a3      	ldrh	r3, [r4, #4]
 8018260:	8a82      	ldrh	r2, [r0, #20]
 8018262:	1acb      	subs	r3, r1, r3
 8018264:	f102 32ff 	add.w	r2, r2, #4294967295
 8018268:	d431      	bmi.n	80182ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801826a:	4293      	cmp	r3, r2
 801826c:	dd0c      	ble.n	8018288 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801826e:	230e      	movs	r3, #14
 8018270:	fb03 4302 	mla	r3, r3, r2, r4
 8018274:	889b      	ldrh	r3, [r3, #4]
 8018276:	1a5b      	subs	r3, r3, r1
 8018278:	1ad3      	subs	r3, r2, r3
 801827a:	429a      	cmp	r2, r3
 801827c:	db27      	blt.n	80182ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801827e:	2b00      	cmp	r3, #0
 8018280:	bfbc      	itt	lt
 8018282:	2302      	movlt	r3, #2
 8018284:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018288:	2500      	movs	r5, #0
 801828a:	260e      	movs	r6, #14
 801828c:	4295      	cmp	r5, r2
 801828e:	dc1e      	bgt.n	80182ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018290:	fb06 4003 	mla	r0, r6, r3, r4
 8018294:	8887      	ldrh	r7, [r0, #4]
 8018296:	42b9      	cmp	r1, r7
 8018298:	d01a      	beq.n	80182d0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801829a:	d20d      	bcs.n	80182b8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801829c:	1e5a      	subs	r2, r3, #1
 801829e:	4295      	cmp	r5, r2
 80182a0:	dc15      	bgt.n	80182ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80182a2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80182a6:	1a5b      	subs	r3, r3, r1
 80182a8:	1ad3      	subs	r3, r2, r3
 80182aa:	429a      	cmp	r2, r3
 80182ac:	db0f      	blt.n	80182ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80182ae:	429d      	cmp	r5, r3
 80182b0:	ddec      	ble.n	801828c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80182b2:	1953      	adds	r3, r2, r5
 80182b4:	105b      	asrs	r3, r3, #1
 80182b6:	e7e9      	b.n	801828c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80182b8:	1c5d      	adds	r5, r3, #1
 80182ba:	42aa      	cmp	r2, r5
 80182bc:	db07      	blt.n	80182ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80182be:	8a43      	ldrh	r3, [r0, #18]
 80182c0:	1acb      	subs	r3, r1, r3
 80182c2:	442b      	add	r3, r5
 80182c4:	429d      	cmp	r5, r3
 80182c6:	dc02      	bgt.n	80182ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80182c8:	429a      	cmp	r2, r3
 80182ca:	dadf      	bge.n	801828c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80182cc:	e7f1      	b.n	80182b2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80182ce:	2000      	movs	r0, #0
 80182d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080182d2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80182d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182d4:	4604      	mov	r4, r0
 80182d6:	4617      	mov	r7, r2
 80182d8:	461e      	mov	r6, r3
 80182da:	b911      	cbnz	r1, 80182e2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80182dc:	2500      	movs	r5, #0
 80182de:	4628      	mov	r0, r5
 80182e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182e2:	290a      	cmp	r1, #10
 80182e4:	d0fa      	beq.n	80182dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80182e6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80182ea:	4291      	cmp	r1, r2
 80182ec:	d0f6      	beq.n	80182dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80182ee:	f242 020b 	movw	r2, #8203	; 0x200b
 80182f2:	4291      	cmp	r1, r2
 80182f4:	d0f2      	beq.n	80182dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80182f6:	f7ff ffaf 	bl	8018258 <_ZNK8touchgfx9ConstFont4findEt>
 80182fa:	4605      	mov	r5, r0
 80182fc:	b950      	cbnz	r0, 8018314 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80182fe:	6823      	ldr	r3, [r4, #0]
 8018300:	4620      	mov	r0, r4
 8018302:	691b      	ldr	r3, [r3, #16]
 8018304:	4798      	blx	r3
 8018306:	4601      	mov	r1, r0
 8018308:	4620      	mov	r0, r4
 801830a:	f7ff ffa5 	bl	8018258 <_ZNK8touchgfx9ConstFont4findEt>
 801830e:	4605      	mov	r5, r0
 8018310:	2800      	cmp	r0, #0
 8018312:	d0e3      	beq.n	80182dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018314:	6823      	ldr	r3, [r4, #0]
 8018316:	4629      	mov	r1, r5
 8018318:	4620      	mov	r0, r4
 801831a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801831c:	4798      	blx	r3
 801831e:	6038      	str	r0, [r7, #0]
 8018320:	6823      	ldr	r3, [r4, #0]
 8018322:	4620      	mov	r0, r4
 8018324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018326:	4798      	blx	r3
 8018328:	7030      	strb	r0, [r6, #0]
 801832a:	e7d8      	b.n	80182de <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801832c <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801832c:	2002      	movs	r0, #2
 801832e:	4770      	bx	lr

08018330 <_ZN8touchgfx12GestureEventD1Ev>:
 8018330:	4770      	bx	lr

08018332 <_ZN8touchgfx12GestureEventD0Ev>:
 8018332:	b510      	push	{r4, lr}
 8018334:	4604      	mov	r4, r0
 8018336:	210c      	movs	r1, #12
 8018338:	f00d fbed 	bl	8025b16 <_ZdlPvj>
 801833c:	4620      	mov	r0, r4
 801833e:	bd10      	pop	{r4, pc}

08018340 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018340:	b530      	push	{r4, r5, lr}
 8018342:	460d      	mov	r5, r1
 8018344:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018346:	b087      	sub	sp, #28
 8018348:	4604      	mov	r4, r0
 801834a:	b301      	cbz	r1, 801838e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801834c:	a801      	add	r0, sp, #4
 801834e:	f7ff ff4f 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018352:	892a      	ldrh	r2, [r5, #8]
 8018354:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018358:	7928      	ldrb	r0, [r5, #4]
 801835a:	1ad2      	subs	r2, r2, r3
 801835c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801835e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018362:	441a      	add	r2, r3
 8018364:	896b      	ldrh	r3, [r5, #10]
 8018366:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801836a:	f88d 0010 	strb.w	r0, [sp, #16]
 801836e:	1b5b      	subs	r3, r3, r5
 8018370:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018372:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018374:	442b      	add	r3, r5
 8018376:	4d07      	ldr	r5, [pc, #28]	; (8018394 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018378:	f8ad 1012 	strh.w	r1, [sp, #18]
 801837c:	a903      	add	r1, sp, #12
 801837e:	9503      	str	r5, [sp, #12]
 8018380:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018384:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018388:	6803      	ldr	r3, [r0, #0]
 801838a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801838c:	4798      	blx	r3
 801838e:	b007      	add	sp, #28
 8018390:	bd30      	pop	{r4, r5, pc}
 8018392:	bf00      	nop
 8018394:	08029534 	.word	0x08029534

08018398 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801839c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801839e:	b08a      	sub	sp, #40	; 0x28
 80183a0:	4604      	mov	r4, r0
 80183a2:	460d      	mov	r5, r1
 80183a4:	b113      	cbz	r3, 80183ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80183a6:	790b      	ldrb	r3, [r1, #4]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d044      	beq.n	8018436 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80183ac:	f104 0804 	add.w	r8, r4, #4
 80183b0:	a803      	add	r0, sp, #12
 80183b2:	4641      	mov	r1, r8
 80183b4:	f7ff ff1c 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80183b8:	792b      	ldrb	r3, [r5, #4]
 80183ba:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80183be:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80183c2:	b983      	cbnz	r3, 80183e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80183c4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80183c8:	892a      	ldrh	r2, [r5, #8]
 80183ca:	88e9      	ldrh	r1, [r5, #6]
 80183cc:	4640      	mov	r0, r8
 80183ce:	1b92      	subs	r2, r2, r6
 80183d0:	9301      	str	r3, [sp, #4]
 80183d2:	1bc9      	subs	r1, r1, r7
 80183d4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80183d8:	b212      	sxth	r2, r2
 80183da:	9300      	str	r3, [sp, #0]
 80183dc:	b209      	sxth	r1, r1
 80183de:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80183e2:	f7fa feab 	bl	801313c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80183e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80183e8:	b329      	cbz	r1, 8018436 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80183ea:	a805      	add	r0, sp, #20
 80183ec:	f7ff ff00 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80183f0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80183f4:	792b      	ldrb	r3, [r5, #4]
 80183f6:	a907      	add	r1, sp, #28
 80183f8:	1abf      	subs	r7, r7, r2
 80183fa:	88ea      	ldrh	r2, [r5, #6]
 80183fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80183fe:	4417      	add	r7, r2
 8018400:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018402:	f88d 3020 	strb.w	r3, [sp, #32]
 8018406:	4417      	add	r7, r2
 8018408:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801840c:	1ab6      	subs	r6, r6, r2
 801840e:	892a      	ldrh	r2, [r5, #8]
 8018410:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018414:	4416      	add	r6, r2
 8018416:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018418:	4416      	add	r6, r2
 801841a:	4a08      	ldr	r2, [pc, #32]	; (801843c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801841c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8018420:	2600      	movs	r6, #0
 8018422:	9207      	str	r2, [sp, #28]
 8018424:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8018428:	6803      	ldr	r3, [r0, #0]
 801842a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801842c:	4798      	blx	r3
 801842e:	792b      	ldrb	r3, [r5, #4]
 8018430:	b10b      	cbz	r3, 8018436 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018432:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8018436:	b00a      	add	sp, #40	; 0x28
 8018438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801843c:	08028494 	.word	0x08028494

08018440 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018444:	460c      	mov	r4, r1
 8018446:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018448:	b088      	sub	sp, #32
 801844a:	4605      	mov	r5, r0
 801844c:	2900      	cmp	r1, #0
 801844e:	d06d      	beq.n	801852c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018450:	4668      	mov	r0, sp
 8018452:	f7ff fecd 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018456:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8018458:	88e3      	ldrh	r3, [r4, #6]
 801845a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801845e:	440b      	add	r3, r1
 8018460:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018464:	b21b      	sxth	r3, r3
 8018466:	4543      	cmp	r3, r8
 8018468:	db31      	blt.n	80184ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801846a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801846e:	44c4      	add	ip, r8
 8018470:	fa0f fc8c 	sxth.w	ip, ip
 8018474:	4563      	cmp	r3, ip
 8018476:	da2a      	bge.n	80184ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018478:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801847a:	8926      	ldrh	r6, [r4, #8]
 801847c:	4416      	add	r6, r2
 801847e:	b236      	sxth	r6, r6
 8018480:	42be      	cmp	r6, r7
 8018482:	db24      	blt.n	80184ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018484:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018488:	4438      	add	r0, r7
 801848a:	b200      	sxth	r0, r0
 801848c:	4286      	cmp	r6, r0
 801848e:	da1e      	bge.n	80184ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018490:	8963      	ldrh	r3, [r4, #10]
 8018492:	4419      	add	r1, r3
 8018494:	b209      	sxth	r1, r1
 8018496:	4541      	cmp	r1, r8
 8018498:	db08      	blt.n	80184ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801849a:	4561      	cmp	r1, ip
 801849c:	da06      	bge.n	80184ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801849e:	89a3      	ldrh	r3, [r4, #12]
 80184a0:	441a      	add	r2, r3
 80184a2:	b212      	sxth	r2, r2
 80184a4:	42ba      	cmp	r2, r7
 80184a6:	db01      	blt.n	80184ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80184a8:	4282      	cmp	r2, r0
 80184aa:	db10      	blt.n	80184ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80184ac:	4b21      	ldr	r3, [pc, #132]	; (8018534 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80184ae:	a904      	add	r1, sp, #16
 80184b0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80184b2:	9304      	str	r3, [sp, #16]
 80184b4:	2302      	movs	r3, #2
 80184b6:	f88d 3014 	strb.w	r3, [sp, #20]
 80184ba:	2300      	movs	r3, #0
 80184bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80184c0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80184c4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80184c8:	6803      	ldr	r3, [r0, #0]
 80184ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184cc:	4798      	blx	r3
 80184ce:	1d29      	adds	r1, r5, #4
 80184d0:	a802      	add	r0, sp, #8
 80184d2:	f7ff fe8d 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80184d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80184da:	88e0      	ldrh	r0, [r4, #6]
 80184dc:	eba3 0808 	sub.w	r8, r3, r8
 80184e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80184e4:	7921      	ldrb	r1, [r4, #4]
 80184e6:	fa1f f888 	uxth.w	r8, r8
 80184ea:	1bdf      	subs	r7, r3, r7
 80184ec:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80184f0:	b2bb      	uxth	r3, r7
 80184f2:	4440      	add	r0, r8
 80184f4:	8922      	ldrh	r2, [r4, #8]
 80184f6:	8967      	ldrh	r7, [r4, #10]
 80184f8:	4460      	add	r0, ip
 80184fa:	89a4      	ldrh	r4, [r4, #12]
 80184fc:	441a      	add	r2, r3
 80184fe:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018500:	44b8      	add	r8, r7
 8018502:	4423      	add	r3, r4
 8018504:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018508:	4432      	add	r2, r6
 801850a:	44e0      	add	r8, ip
 801850c:	4433      	add	r3, r6
 801850e:	4c0a      	ldr	r4, [pc, #40]	; (8018538 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018510:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018512:	f88d 1014 	strb.w	r1, [sp, #20]
 8018516:	a904      	add	r1, sp, #16
 8018518:	9404      	str	r4, [sp, #16]
 801851a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801851e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018522:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018526:	6803      	ldr	r3, [r0, #0]
 8018528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801852a:	4798      	blx	r3
 801852c:	b008      	add	sp, #32
 801852e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018532:	bf00      	nop
 8018534:	08028494 	.word	0x08028494
 8018538:	080284a8 	.word	0x080284a8

0801853c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801853c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801853e:	4604      	mov	r4, r0
 8018540:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018544:	3201      	adds	r2, #1
 8018546:	d112      	bne.n	801856e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018548:	2500      	movs	r5, #0
 801854a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801854e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018552:	6803      	ldr	r3, [r0, #0]
 8018554:	9500      	str	r5, [sp, #0]
 8018556:	466d      	mov	r5, sp
 8018558:	f8ad 1004 	strh.w	r1, [sp, #4]
 801855c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018560:	4629      	mov	r1, r5
 8018562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018564:	4798      	blx	r3
 8018566:	e895 0003 	ldmia.w	r5, {r0, r1}
 801856a:	e884 0003 	stmia.w	r4, {r0, r1}
 801856e:	4620      	mov	r0, r4
 8018570:	b003      	add	sp, #12
 8018572:	bd30      	pop	{r4, r5, pc}

08018574 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018574:	b513      	push	{r0, r1, r4, lr}
 8018576:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801857a:	4604      	mov	r4, r0
 801857c:	3301      	adds	r3, #1
 801857e:	d109      	bne.n	8018594 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018580:	4601      	mov	r1, r0
 8018582:	4668      	mov	r0, sp
 8018584:	f7ff fe34 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018588:	f8bd 3000 	ldrh.w	r3, [sp]
 801858c:	8423      	strh	r3, [r4, #32]
 801858e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018592:	8463      	strh	r3, [r4, #34]	; 0x22
 8018594:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018598:	b002      	add	sp, #8
 801859a:	bd10      	pop	{r4, pc}

0801859c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801859c:	b513      	push	{r0, r1, r4, lr}
 801859e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80185a2:	4604      	mov	r4, r0
 80185a4:	3301      	adds	r3, #1
 80185a6:	d109      	bne.n	80185bc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80185a8:	4601      	mov	r1, r0
 80185aa:	4668      	mov	r0, sp
 80185ac:	f7ff fe20 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80185b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80185b4:	8423      	strh	r3, [r4, #32]
 80185b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80185ba:	8463      	strh	r3, [r4, #34]	; 0x22
 80185bc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80185c0:	b002      	add	sp, #8
 80185c2:	bd10      	pop	{r4, pc}

080185c4 <_ZN8touchgfx6ScreenC1Ev>:
 80185c4:	b570      	push	{r4, r5, r6, lr}
 80185c6:	4b17      	ldr	r3, [pc, #92]	; (8018624 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80185c8:	4605      	mov	r5, r0
 80185ca:	4a17      	ldr	r2, [pc, #92]	; (8018628 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80185cc:	2101      	movs	r1, #1
 80185ce:	f845 3b04 	str.w	r3, [r5], #4
 80185d2:	2300      	movs	r3, #0
 80185d4:	6042      	str	r2, [r0, #4]
 80185d6:	4604      	mov	r4, r0
 80185d8:	8103      	strh	r3, [r0, #8]
 80185da:	8143      	strh	r3, [r0, #10]
 80185dc:	8183      	strh	r3, [r0, #12]
 80185de:	81c3      	strh	r3, [r0, #14]
 80185e0:	8203      	strh	r3, [r0, #16]
 80185e2:	8243      	strh	r3, [r0, #18]
 80185e4:	8283      	strh	r3, [r0, #20]
 80185e6:	82c3      	strh	r3, [r0, #22]
 80185e8:	6203      	str	r3, [r0, #32]
 80185ea:	8483      	strh	r3, [r0, #36]	; 0x24
 80185ec:	84c3      	strh	r3, [r0, #38]	; 0x26
 80185ee:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80185f2:	6343      	str	r3, [r0, #52]	; 0x34
 80185f4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80185f8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80185fc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018600:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8018604:	4b09      	ldr	r3, [pc, #36]	; (801862c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018606:	4628      	mov	r0, r5
 8018608:	f9b3 6000 	ldrsh.w	r6, [r3]
 801860c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801860e:	4a08      	ldr	r2, [pc, #32]	; (8018630 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018610:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018614:	4798      	blx	r3
 8018616:	6863      	ldr	r3, [r4, #4]
 8018618:	4628      	mov	r0, r5
 801861a:	4631      	mov	r1, r6
 801861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801861e:	4798      	blx	r3
 8018620:	4620      	mov	r0, r4
 8018622:	bd70      	pop	{r4, r5, r6, pc}
 8018624:	08029548 	.word	0x08029548
 8018628:	080283cc 	.word	0x080283cc
 801862c:	2400aee2 	.word	0x2400aee2
 8018630:	2400aee0 	.word	0x2400aee0

08018634 <_ZN8touchgfx6Screen4drawEv>:
 8018634:	4b09      	ldr	r3, [pc, #36]	; (801865c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018636:	b507      	push	{r0, r1, r2, lr}
 8018638:	f9b3 2000 	ldrsh.w	r2, [r3]
 801863c:	2100      	movs	r1, #0
 801863e:	4b08      	ldr	r3, [pc, #32]	; (8018660 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018640:	9100      	str	r1, [sp, #0]
 8018642:	4669      	mov	r1, sp
 8018644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018648:	f8ad 2004 	strh.w	r2, [sp, #4]
 801864c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018650:	6803      	ldr	r3, [r0, #0]
 8018652:	689b      	ldr	r3, [r3, #8]
 8018654:	4798      	blx	r3
 8018656:	b003      	add	sp, #12
 8018658:	f85d fb04 	ldr.w	pc, [sp], #4
 801865c:	2400aee0 	.word	0x2400aee0
 8018660:	2400aee2 	.word	0x2400aee2

08018664 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018668:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801866c:	b089      	sub	sp, #36	; 0x24
 801866e:	4680      	mov	r8, r0
 8018670:	460c      	mov	r4, r1
 8018672:	2b00      	cmp	r3, #0
 8018674:	4615      	mov	r5, r2
 8018676:	dd0e      	ble.n	8018696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018678:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801867c:	2b00      	cmp	r3, #0
 801867e:	dd0a      	ble.n	8018696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018680:	4628      	mov	r0, r5
 8018682:	f7ff ff5b 	bl	801853c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018686:	4621      	mov	r1, r4
 8018688:	f7fe fd0c 	bl	80170a4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801868c:	69eb      	ldr	r3, [r5, #28]
 801868e:	b928      	cbnz	r0, 801869c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018690:	461d      	mov	r5, r3
 8018692:	2b00      	cmp	r3, #0
 8018694:	d1f4      	bne.n	8018680 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8018696:	b009      	add	sp, #36	; 0x24
 8018698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801869c:	ae04      	add	r6, sp, #16
 801869e:	2b00      	cmp	r3, #0
 80186a0:	f000 80b5 	beq.w	801880e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80186a4:	682b      	ldr	r3, [r5, #0]
 80186a6:	4629      	mov	r1, r5
 80186a8:	a802      	add	r0, sp, #8
 80186aa:	68db      	ldr	r3, [r3, #12]
 80186ac:	4798      	blx	r3
 80186ae:	4628      	mov	r0, r5
 80186b0:	f7ff ff60 	bl	8018574 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80186b4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80186b8:	4407      	add	r7, r0
 80186ba:	4628      	mov	r0, r5
 80186bc:	f7ff ff6e 	bl	801859c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80186c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80186c4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80186c8:	b23f      	sxth	r7, r7
 80186ca:	4418      	add	r0, r3
 80186cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80186d0:	4621      	mov	r1, r4
 80186d2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80186d6:	f8ad 0012 	strh.w	r0, [sp, #18]
 80186da:	4630      	mov	r0, r6
 80186dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80186e0:	f8ad 7010 	strh.w	r7, [sp, #16]
 80186e4:	f7fa fe0c 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 80186e8:	4628      	mov	r0, r5
 80186ea:	f7ff ff27 	bl	801853c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80186ee:	ab06      	add	r3, sp, #24
 80186f0:	4602      	mov	r2, r0
 80186f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80186f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80186fa:	4611      	mov	r1, r2
 80186fc:	4618      	mov	r0, r3
 80186fe:	f7fa fdff 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 8018702:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018706:	f9b4 1000 	ldrsh.w	r1, [r4]
 801870a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801870e:	4299      	cmp	r1, r3
 8018710:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018714:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8018718:	d10b      	bne.n	8018732 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801871a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801871e:	4552      	cmp	r2, sl
 8018720:	d107      	bne.n	8018732 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018722:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018726:	455a      	cmp	r2, fp
 8018728:	d103      	bne.n	8018732 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801872a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801872e:	454a      	cmp	r2, r9
 8018730:	d06d      	beq.n	801880e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018732:	f1bb 0f00 	cmp.w	fp, #0
 8018736:	dd65      	ble.n	8018804 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018738:	f1b9 0f00 	cmp.w	r9, #0
 801873c:	dd62      	ble.n	8018804 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801873e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018742:	fa1f f08a 	uxth.w	r0, sl
 8018746:	4552      	cmp	r2, sl
 8018748:	9000      	str	r0, [sp, #0]
 801874a:	da12      	bge.n	8018772 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801874c:	9301      	str	r3, [sp, #4]
 801874e:	9b00      	ldr	r3, [sp, #0]
 8018750:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018754:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018758:	1a9a      	subs	r2, r3, r2
 801875a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801875e:	4631      	mov	r1, r6
 8018760:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018764:	4640      	mov	r0, r8
 8018766:	f8ad 2016 	strh.w	r2, [sp, #22]
 801876a:	69ea      	ldr	r2, [r5, #28]
 801876c:	f7ff ff7a 	bl	8018664 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018770:	9b01      	ldr	r3, [sp, #4]
 8018772:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018776:	b29f      	uxth	r7, r3
 8018778:	429a      	cmp	r2, r3
 801877a:	da0d      	bge.n	8018798 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801877c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018780:	1aba      	subs	r2, r7, r2
 8018782:	f8ad a012 	strh.w	sl, [sp, #18]
 8018786:	4631      	mov	r1, r6
 8018788:	f8ad 2014 	strh.w	r2, [sp, #20]
 801878c:	4640      	mov	r0, r8
 801878e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018792:	69ea      	ldr	r2, [r5, #28]
 8018794:	f7ff ff66 	bl	8018664 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018798:	8822      	ldrh	r2, [r4, #0]
 801879a:	445f      	add	r7, fp
 801879c:	88a3      	ldrh	r3, [r4, #4]
 801879e:	b2bf      	uxth	r7, r7
 80187a0:	4413      	add	r3, r2
 80187a2:	b23a      	sxth	r2, r7
 80187a4:	b29b      	uxth	r3, r3
 80187a6:	b219      	sxth	r1, r3
 80187a8:	4291      	cmp	r1, r2
 80187aa:	dd0d      	ble.n	80187c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80187ac:	1bdb      	subs	r3, r3, r7
 80187ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 80187b2:	f8ad a012 	strh.w	sl, [sp, #18]
 80187b6:	4631      	mov	r1, r6
 80187b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80187bc:	4640      	mov	r0, r8
 80187be:	f8ad 9016 	strh.w	r9, [sp, #22]
 80187c2:	69ea      	ldr	r2, [r5, #28]
 80187c4:	f7ff ff4e 	bl	8018664 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80187c8:	88e2      	ldrh	r2, [r4, #6]
 80187ca:	8863      	ldrh	r3, [r4, #2]
 80187cc:	4413      	add	r3, r2
 80187ce:	9a00      	ldr	r2, [sp, #0]
 80187d0:	444a      	add	r2, r9
 80187d2:	b29b      	uxth	r3, r3
 80187d4:	fa1f f982 	uxth.w	r9, r2
 80187d8:	b219      	sxth	r1, r3
 80187da:	fa0f f289 	sxth.w	r2, r9
 80187de:	428a      	cmp	r2, r1
 80187e0:	da15      	bge.n	801880e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80187e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80187e6:	eba3 0309 	sub.w	r3, r3, r9
 80187ea:	f9b4 0000 	ldrsh.w	r0, [r4]
 80187ee:	f8ad 1014 	strh.w	r1, [sp, #20]
 80187f2:	4631      	mov	r1, r6
 80187f4:	f8ad 0010 	strh.w	r0, [sp, #16]
 80187f8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80187fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018800:	69ea      	ldr	r2, [r5, #28]
 8018802:	e001      	b.n	8018808 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018804:	69ea      	ldr	r2, [r5, #28]
 8018806:	4621      	mov	r1, r4
 8018808:	4640      	mov	r0, r8
 801880a:	f7ff ff2b 	bl	8018664 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801880e:	4628      	mov	r0, r5
 8018810:	f7ff fe94 	bl	801853c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018814:	6861      	ldr	r1, [r4, #4]
 8018816:	4602      	mov	r2, r0
 8018818:	4633      	mov	r3, r6
 801881a:	6820      	ldr	r0, [r4, #0]
 801881c:	c303      	stmia	r3!, {r0, r1}
 801881e:	4611      	mov	r1, r2
 8018820:	4630      	mov	r0, r6
 8018822:	f7fa fd6d 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 8018826:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801882a:	2b00      	cmp	r3, #0
 801882c:	f77f af33 	ble.w	8018696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018830:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018834:	2b00      	cmp	r3, #0
 8018836:	f77f af2e 	ble.w	8018696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801883a:	4628      	mov	r0, r5
 801883c:	f7ff fe9a 	bl	8018574 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018840:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018844:	1a18      	subs	r0, r3, r0
 8018846:	f8ad 0010 	strh.w	r0, [sp, #16]
 801884a:	4628      	mov	r0, r5
 801884c:	f7ff fea6 	bl	801859c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018850:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018854:	4631      	mov	r1, r6
 8018856:	1a18      	subs	r0, r3, r0
 8018858:	f8ad 0012 	strh.w	r0, [sp, #18]
 801885c:	4628      	mov	r0, r5
 801885e:	682b      	ldr	r3, [r5, #0]
 8018860:	689b      	ldr	r3, [r3, #8]
 8018862:	4798      	blx	r3
 8018864:	e717      	b.n	8018696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08018866 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018866:	b570      	push	{r4, r5, r6, lr}
 8018868:	1d06      	adds	r6, r0, #4
 801886a:	b086      	sub	sp, #24
 801886c:	460c      	mov	r4, r1
 801886e:	2300      	movs	r3, #0
 8018870:	4631      	mov	r1, r6
 8018872:	4605      	mov	r5, r0
 8018874:	a802      	add	r0, sp, #8
 8018876:	9301      	str	r3, [sp, #4]
 8018878:	f7ff fcba 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801887c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018880:	8822      	ldrh	r2, [r4, #0]
 8018882:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8018886:	1ad2      	subs	r2, r2, r3
 8018888:	8863      	ldrh	r3, [r4, #2]
 801888a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801888e:	1a5b      	subs	r3, r3, r1
 8018890:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018894:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018898:	aa01      	add	r2, sp, #4
 801889a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801889e:	4630      	mov	r0, r6
 80188a0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80188a4:	a904      	add	r1, sp, #16
 80188a6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80188aa:	f7fa fe01 	bl	80134b0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80188ae:	9a01      	ldr	r2, [sp, #4]
 80188b0:	b11a      	cbz	r2, 80188ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80188b2:	4621      	mov	r1, r4
 80188b4:	4628      	mov	r0, r5
 80188b6:	f7ff fed5 	bl	8018664 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80188ba:	b006      	add	sp, #24
 80188bc:	bd70      	pop	{r4, r5, r6, pc}

080188be <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80188be:	4602      	mov	r2, r0
 80188c0:	b530      	push	{r4, r5, lr}
 80188c2:	4604      	mov	r4, r0
 80188c4:	b085      	sub	sp, #20
 80188c6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80188ca:	460d      	mov	r5, r1
 80188cc:	466b      	mov	r3, sp
 80188ce:	6851      	ldr	r1, [r2, #4]
 80188d0:	c303      	stmia	r3!, {r0, r1}
 80188d2:	4629      	mov	r1, r5
 80188d4:	4668      	mov	r0, sp
 80188d6:	f7fa fd13 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 80188da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80188de:	b12b      	cbz	r3, 80188ec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80188e0:	4669      	mov	r1, sp
 80188e2:	4620      	mov	r0, r4
 80188e4:	f7ff ffbf 	bl	8018866 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80188e8:	b005      	add	sp, #20
 80188ea:	bd30      	pop	{r4, r5, pc}
 80188ec:	3404      	adds	r4, #4
 80188ee:	a802      	add	r0, sp, #8
 80188f0:	4621      	mov	r1, r4
 80188f2:	f7ff fc7d 	bl	80181f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80188f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80188fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80188fe:	4669      	mov	r1, sp
 8018900:	4620      	mov	r0, r4
 8018902:	1a9b      	subs	r3, r3, r2
 8018904:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018908:	f8ad 3000 	strh.w	r3, [sp]
 801890c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018910:	1a9b      	subs	r3, r3, r2
 8018912:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018916:	f7fa fd92 	bl	801343e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801891a:	e7e5      	b.n	80188e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801891c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801891c:	460b      	mov	r3, r1
 801891e:	680a      	ldr	r2, [r1, #0]
 8018920:	1d01      	adds	r1, r0, #4
 8018922:	6992      	ldr	r2, [r2, #24]
 8018924:	4618      	mov	r0, r3
 8018926:	4710      	bx	r2

08018928 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8018928:	4298      	cmp	r0, r3
 801892a:	d200      	bcs.n	801892e <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801892c:	b913      	cbnz	r3, 8018934 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801892e:	440a      	add	r2, r1
 8018930:	b210      	sxth	r0, r2
 8018932:	4770      	bx	lr
 8018934:	ee07 0a90 	vmov	s15, r0
 8018938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801893c:	ee07 3a90 	vmov	s15, r3
 8018940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018948:	ee07 2a90 	vmov	s15, r2
 801894c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018950:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8018954:	ee07 1a90 	vmov	s15, r1
 8018958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801895c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018960:	ee67 5a07 	vmul.f32	s11, s14, s14
 8018964:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018968:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801896c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8018970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018978:	bfcc      	ite	gt
 801897a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801897e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8018982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018986:	ee17 3a90 	vmov	r3, s15
 801898a:	b218      	sxth	r0, r3
 801898c:	4770      	bx	lr

0801898e <_ZN8touchgfx12TextProviderC1Ev>:
 801898e:	b538      	push	{r3, r4, r5, lr}
 8018990:	2500      	movs	r5, #0
 8018992:	2302      	movs	r3, #2
 8018994:	4604      	mov	r4, r0
 8018996:	220e      	movs	r2, #14
 8018998:	7403      	strb	r3, [r0, #16]
 801899a:	4629      	mov	r1, r5
 801899c:	6145      	str	r5, [r0, #20]
 801899e:	7605      	strb	r5, [r0, #24]
 80189a0:	83c5      	strh	r5, [r0, #30]
 80189a2:	8405      	strh	r5, [r0, #32]
 80189a4:	86c5      	strh	r5, [r0, #54]	; 0x36
 80189a6:	8705      	strh	r5, [r0, #56]	; 0x38
 80189a8:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80189aa:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80189ae:	e9c0 5500 	strd	r5, r5, [r0]
 80189b2:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80189b6:	304c      	adds	r0, #76	; 0x4c
 80189b8:	f00d f968 	bl	8025c8c <memset>
 80189bc:	2301      	movs	r3, #1
 80189be:	4620      	mov	r0, r4
 80189c0:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80189c4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80189c8:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80189cc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80189d0:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80189d4:	f7ee f84c 	bl	8006a70 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80189d8:	4620      	mov	r0, r4
 80189da:	bd38      	pop	{r3, r4, r5, pc}

080189dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80189dc:	b530      	push	{r4, r5, lr}
 80189de:	2500      	movs	r5, #0
 80189e0:	2401      	movs	r4, #1
 80189e2:	6843      	ldr	r3, [r0, #4]
 80189e4:	b913      	cbnz	r3, 80189ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80189e6:	6803      	ldr	r3, [r0, #0]
 80189e8:	b313      	cbz	r3, 8018a30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80189ea:	6043      	str	r3, [r0, #4]
 80189ec:	7e03      	ldrb	r3, [r0, #24]
 80189ee:	b143      	cbz	r3, 8018a02 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80189f0:	6943      	ldr	r3, [r0, #20]
 80189f2:	b12b      	cbz	r3, 8018a00 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80189f4:	881a      	ldrh	r2, [r3, #0]
 80189f6:	b11a      	cbz	r2, 8018a00 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80189f8:	1c9a      	adds	r2, r3, #2
 80189fa:	6142      	str	r2, [r0, #20]
 80189fc:	8818      	ldrh	r0, [r3, #0]
 80189fe:	bd30      	pop	{r4, r5, pc}
 8018a00:	7605      	strb	r5, [r0, #24]
 8018a02:	6843      	ldr	r3, [r0, #4]
 8018a04:	8819      	ldrh	r1, [r3, #0]
 8018a06:	b199      	cbz	r1, 8018a30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018a08:	1c9a      	adds	r2, r3, #2
 8018a0a:	2902      	cmp	r1, #2
 8018a0c:	6042      	str	r2, [r0, #4]
 8018a0e:	d1f5      	bne.n	80189fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8018a10:	7c03      	ldrb	r3, [r0, #16]
 8018a12:	2b01      	cmp	r3, #1
 8018a14:	d8e5      	bhi.n	80189e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018a16:	1c5a      	adds	r2, r3, #1
 8018a18:	3302      	adds	r3, #2
 8018a1a:	7402      	strb	r2, [r0, #16]
 8018a1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8018a20:	6143      	str	r3, [r0, #20]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d0dd      	beq.n	80189e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018a26:	881b      	ldrh	r3, [r3, #0]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d0da      	beq.n	80189e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018a2c:	7604      	strb	r4, [r0, #24]
 8018a2e:	e7d8      	b.n	80189e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018a30:	2000      	movs	r0, #0
 8018a32:	e7e4      	b.n	80189fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08018a34 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8018a34:	b430      	push	{r4, r5}
 8018a36:	6815      	ldr	r5, [r2, #0]
 8018a38:	6085      	str	r5, [r0, #8]
 8018a3a:	6852      	ldr	r2, [r2, #4]
 8018a3c:	6443      	str	r3, [r0, #68]	; 0x44
 8018a3e:	60c2      	str	r2, [r0, #12]
 8018a40:	2200      	movs	r2, #0
 8018a42:	9b02      	ldr	r3, [sp, #8]
 8018a44:	7402      	strb	r2, [r0, #16]
 8018a46:	6001      	str	r1, [r0, #0]
 8018a48:	6483      	str	r3, [r0, #72]	; 0x48
 8018a4a:	6042      	str	r2, [r0, #4]
 8018a4c:	6142      	str	r2, [r0, #20]
 8018a4e:	7602      	strb	r2, [r0, #24]
 8018a50:	8702      	strh	r2, [r0, #56]	; 0x38
 8018a52:	8402      	strh	r2, [r0, #32]
 8018a54:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018a58:	bc30      	pop	{r4, r5}
 8018a5a:	f7ee b809 	b.w	8006a70 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08018a5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8018a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a60:	4605      	mov	r5, r0
 8018a62:	4608      	mov	r0, r1
 8018a64:	b1f1      	cbz	r1, 8018aa4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8018a66:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8018a6a:	460b      	mov	r3, r1
 8018a6c:	f101 0708 	add.w	r7, r1, #8
 8018a70:	4622      	mov	r2, r4
 8018a72:	6818      	ldr	r0, [r3, #0]
 8018a74:	3308      	adds	r3, #8
 8018a76:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018a7a:	4626      	mov	r6, r4
 8018a7c:	42bb      	cmp	r3, r7
 8018a7e:	c603      	stmia	r6!, {r0, r1}
 8018a80:	4634      	mov	r4, r6
 8018a82:	d1f6      	bne.n	8018a72 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8018a84:	6818      	ldr	r0, [r3, #0]
 8018a86:	6030      	str	r0, [r6, #0]
 8018a88:	4610      	mov	r0, r2
 8018a8a:	889b      	ldrh	r3, [r3, #4]
 8018a8c:	80b3      	strh	r3, [r6, #4]
 8018a8e:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8018a92:	015b      	lsls	r3, r3, #5
 8018a94:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018a98:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8018a9c:	430b      	orrs	r3, r1
 8018a9e:	425b      	negs	r3, r3
 8018aa0:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8018aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018aa6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8018aa6:	b538      	push	{r3, r4, r5, lr}
 8018aa8:	460c      	mov	r4, r1
 8018aaa:	6811      	ldr	r1, [r2, #0]
 8018aac:	4610      	mov	r0, r2
 8018aae:	68cd      	ldr	r5, [r1, #12]
 8018ab0:	4619      	mov	r1, r3
 8018ab2:	47a8      	blx	r5
 8018ab4:	2800      	cmp	r0, #0
 8018ab6:	bf08      	it	eq
 8018ab8:	4620      	moveq	r0, r4
 8018aba:	bd38      	pop	{r3, r4, r5, pc}

08018abc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018abe:	4604      	mov	r4, r0
 8018ac0:	4615      	mov	r5, r2
 8018ac2:	4608      	mov	r0, r1
 8018ac4:	b93a      	cbnz	r2, 8018ad6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8018ac6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018aca:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8018ace:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8018ad2:	4628      	mov	r0, r5
 8018ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ad6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8018ada:	8893      	ldrh	r3, [r2, #4]
 8018adc:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8018ae0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018ae4:	79ee      	ldrb	r6, [r5, #7]
 8018ae6:	4316      	orrs	r6, r2
 8018ae8:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8018aec:	189a      	adds	r2, r3, r2
 8018aee:	b2b7      	uxth	r7, r6
 8018af0:	b291      	uxth	r1, r2
 8018af2:	291d      	cmp	r1, #29
 8018af4:	f200 8084 	bhi.w	8018c00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8018af8:	2201      	movs	r2, #1
 8018afa:	10f6      	asrs	r6, r6, #3
 8018afc:	408a      	lsls	r2, r1
 8018afe:	4978      	ldr	r1, [pc, #480]	; (8018ce0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8018b00:	420a      	tst	r2, r1
 8018b02:	d12e      	bne.n	8018b62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8018b04:	f412 7f60 	tst.w	r2, #896	; 0x380
 8018b08:	d07a      	beq.n	8018c00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8018b0a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8018b0e:	462b      	mov	r3, r5
 8018b10:	f105 0e08 	add.w	lr, r5, #8
 8018b14:	4615      	mov	r5, r2
 8018b16:	6818      	ldr	r0, [r3, #0]
 8018b18:	3308      	adds	r3, #8
 8018b1a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018b1e:	4694      	mov	ip, r2
 8018b20:	4573      	cmp	r3, lr
 8018b22:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018b26:	4662      	mov	r2, ip
 8018b28:	d1f5      	bne.n	8018b16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8018b2a:	6818      	ldr	r0, [r3, #0]
 8018b2c:	f8cc 0000 	str.w	r0, [ip]
 8018b30:	889b      	ldrh	r3, [r3, #4]
 8018b32:	f8ac 3004 	strh.w	r3, [ip, #4]
 8018b36:	b2b3      	uxth	r3, r6
 8018b38:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018b3c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8018b40:	1aca      	subs	r2, r1, r3
 8018b42:	1bcf      	subs	r7, r1, r7
 8018b44:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8018b48:	b292      	uxth	r2, r2
 8018b4a:	1afb      	subs	r3, r7, r3
 8018b4c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8018b50:	10d2      	asrs	r2, r2, #3
 8018b52:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8018b56:	4302      	orrs	r2, r0
 8018b58:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8018b5c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8018b60:	e7b7      	b.n	8018ad2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018b62:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018b64:	b92b      	cbnz	r3, 8018b72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8018b66:	4b5f      	ldr	r3, [pc, #380]	; (8018ce4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8018b68:	21c0      	movs	r1, #192	; 0xc0
 8018b6a:	4a5f      	ldr	r2, [pc, #380]	; (8018ce8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8018b6c:	485f      	ldr	r0, [pc, #380]	; (8018cec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8018b6e:	f00d f801 	bl	8025b74 <__assert_func>
 8018b72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018b74:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018b78:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8018b7a:	f640 6333 	movw	r3, #3635	; 0xe33
 8018b7e:	4299      	cmp	r1, r3
 8018b80:	d110      	bne.n	8018ba4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8018b82:	6803      	ldr	r3, [r0, #0]
 8018b84:	68db      	ldr	r3, [r3, #12]
 8018b86:	4798      	blx	r3
 8018b88:	7b41      	ldrb	r1, [r0, #13]
 8018b8a:	00cb      	lsls	r3, r1, #3
 8018b8c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018b90:	7a03      	ldrb	r3, [r0, #8]
 8018b92:	0648      	lsls	r0, r1, #25
 8018b94:	ea43 0302 	orr.w	r3, r3, r2
 8018b98:	bf44      	itt	mi
 8018b9a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018b9e:	b21b      	sxthmi	r3, r3
 8018ba0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018ba4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8018ba8:	462a      	mov	r2, r5
 8018baa:	f105 0c08 	add.w	ip, r5, #8
 8018bae:	443b      	add	r3, r7
 8018bb0:	4433      	add	r3, r6
 8018bb2:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8018bb6:	b29b      	uxth	r3, r3
 8018bb8:	4635      	mov	r5, r6
 8018bba:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018bbe:	6810      	ldr	r0, [r2, #0]
 8018bc0:	3208      	adds	r2, #8
 8018bc2:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8018bc6:	4637      	mov	r7, r6
 8018bc8:	4562      	cmp	r2, ip
 8018bca:	c703      	stmia	r7!, {r0, r1}
 8018bcc:	463e      	mov	r6, r7
 8018bce:	d1f6      	bne.n	8018bbe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8018bd0:	6810      	ldr	r0, [r2, #0]
 8018bd2:	6038      	str	r0, [r7, #0]
 8018bd4:	8892      	ldrh	r2, [r2, #4]
 8018bd6:	80ba      	strh	r2, [r7, #4]
 8018bd8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018bdc:	10db      	asrs	r3, r3, #3
 8018bde:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018be2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018be6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018bea:	4313      	orrs	r3, r2
 8018bec:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8018bf0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018bf4:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8018bf8:	1a9b      	subs	r3, r3, r2
 8018bfa:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018bfe:	e768      	b.n	8018ad2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018c00:	f023 0204 	bic.w	r2, r3, #4
 8018c04:	f640 611b 	movw	r1, #3611	; 0xe1b
 8018c08:	428a      	cmp	r2, r1
 8018c0a:	d003      	beq.n	8018c14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8018c0c:	f640 621d 	movw	r2, #3613	; 0xe1d
 8018c10:	4293      	cmp	r3, r2
 8018c12:	d120      	bne.n	8018c56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8018c14:	3b01      	subs	r3, #1
 8018c16:	4602      	mov	r2, r0
 8018c18:	4629      	mov	r1, r5
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	b29b      	uxth	r3, r3
 8018c1e:	f7ff ff42 	bl	8018aa6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018c22:	7b41      	ldrb	r1, [r0, #13]
 8018c24:	00cb      	lsls	r3, r1, #3
 8018c26:	0649      	lsls	r1, r1, #25
 8018c28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018c2c:	7a03      	ldrb	r3, [r0, #8]
 8018c2e:	ea43 0302 	orr.w	r3, r3, r2
 8018c32:	bf44      	itt	mi
 8018c34:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018c38:	b21b      	sxthmi	r3, r3
 8018c3a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018c3e:	7b6b      	ldrb	r3, [r5, #13]
 8018c40:	7aaa      	ldrb	r2, [r5, #10]
 8018c42:	005b      	lsls	r3, r3, #1
 8018c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c48:	4313      	orrs	r3, r2
 8018c4a:	115a      	asrs	r2, r3, #5
 8018c4c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018c50:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018c54:	e035      	b.n	8018cc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8018c56:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8018c5a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8018c5e:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8018c62:	7a2a      	ldrb	r2, [r5, #8]
 8018c64:	ea42 0201 	orr.w	r2, r2, r1
 8018c68:	f640 6109 	movw	r1, #3593	; 0xe09
 8018c6c:	bf1c      	itt	ne
 8018c6e:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8018c72:	b212      	sxthne	r2, r2
 8018c74:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018c78:	f023 0210 	bic.w	r2, r3, #16
 8018c7c:	428a      	cmp	r2, r1
 8018c7e:	d003      	beq.n	8018c88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8018c80:	f640 6213 	movw	r2, #3603	; 0xe13
 8018c84:	4293      	cmp	r3, r2
 8018c86:	d129      	bne.n	8018cdc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8018c88:	7b6e      	ldrb	r6, [r5, #13]
 8018c8a:	4629      	mov	r1, r5
 8018c8c:	0076      	lsls	r6, r6, #1
 8018c8e:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018c92:	7aae      	ldrb	r6, [r5, #10]
 8018c94:	4316      	orrs	r6, r2
 8018c96:	f640 6213 	movw	r2, #3603	; 0xe13
 8018c9a:	4293      	cmp	r3, r2
 8018c9c:	4602      	mov	r2, r0
 8018c9e:	4620      	mov	r0, r4
 8018ca0:	bf16      	itet	ne
 8018ca2:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018ca6:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8018caa:	b29b      	uxthne	r3, r3
 8018cac:	f7ff fefb 	bl	8018aa6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018cb0:	7b43      	ldrb	r3, [r0, #13]
 8018cb2:	7a82      	ldrb	r2, [r0, #10]
 8018cb4:	005b      	lsls	r3, r3, #1
 8018cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018cba:	4313      	orrs	r3, r2
 8018cbc:	1af6      	subs	r6, r6, r3
 8018cbe:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8018cc2:	7b69      	ldrb	r1, [r5, #13]
 8018cc4:	00cb      	lsls	r3, r1, #3
 8018cc6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018cca:	7a2b      	ldrb	r3, [r5, #8]
 8018ccc:	4313      	orrs	r3, r2
 8018cce:	064a      	lsls	r2, r1, #25
 8018cd0:	bf44      	itt	mi
 8018cd2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018cd6:	b21b      	sxthmi	r3, r3
 8018cd8:	1bdb      	subs	r3, r3, r7
 8018cda:	e73f      	b.n	8018b5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8018cdc:	2300      	movs	r3, #0
 8018cde:	e7b7      	b.n	8018c50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8018ce0:	3fc00079 	.word	0x3fc00079
 8018ce4:	08029574 	.word	0x08029574
 8018ce8:	080297e6 	.word	0x080297e6
 8018cec:	0802957d 	.word	0x0802957d

08018cf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018cf4:	4604      	mov	r4, r0
 8018cf6:	b942      	cbnz	r2, 8018d0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018cfc:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8018d00:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8018d04:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018d08:	e046      	b.n	8018d98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8018d0a:	7b51      	ldrb	r1, [r2, #13]
 8018d0c:	8893      	ldrh	r3, [r2, #4]
 8018d0e:	010f      	lsls	r7, r1, #4
 8018d10:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018d14:	79d7      	ldrb	r7, [r2, #7]
 8018d16:	4307      	orrs	r7, r0
 8018d18:	2f04      	cmp	r7, #4
 8018d1a:	b2bd      	uxth	r5, r7
 8018d1c:	bfcc      	ite	gt
 8018d1e:	08bf      	lsrgt	r7, r7, #2
 8018d20:	2701      	movle	r7, #1
 8018d22:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018d26:	f200 80ab 	bhi.w	8018e80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8018d2a:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018d2e:	4283      	cmp	r3, r0
 8018d30:	d216      	bcs.n	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018d32:	f240 605b 	movw	r0, #1627	; 0x65b
 8018d36:	4283      	cmp	r3, r0
 8018d38:	d859      	bhi.n	8018dee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8018d3a:	f240 6057 	movw	r0, #1623	; 0x657
 8018d3e:	4283      	cmp	r3, r0
 8018d40:	d20e      	bcs.n	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018d42:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018d46:	d24a      	bcs.n	8018dde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8018d48:	f240 604e 	movw	r0, #1614	; 0x64e
 8018d4c:	4283      	cmp	r3, r0
 8018d4e:	d207      	bcs.n	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018d50:	f240 601a 	movw	r0, #1562	; 0x61a
 8018d54:	4283      	cmp	r3, r0
 8018d56:	d02a      	beq.n	8018dae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018d58:	d821      	bhi.n	8018d9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8018d5a:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018d5e:	d35b      	bcc.n	8018e18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018d60:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8018d64:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018d68:	f040 80d0 	bne.w	8018f0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8018d6c:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8018d70:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018d74:	f040 80ca 	bne.w	8018f0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8018d78:	00cb      	lsls	r3, r1, #3
 8018d7a:	0649      	lsls	r1, r1, #25
 8018d7c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018d80:	7a13      	ldrb	r3, [r2, #8]
 8018d82:	ea43 0300 	orr.w	r3, r3, r0
 8018d86:	bf44      	itt	mi
 8018d88:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018d8c:	b21b      	sxthmi	r3, r3
 8018d8e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018d92:	1b5d      	subs	r5, r3, r5
 8018d94:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018d98:	4610      	mov	r0, r2
 8018d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d9e:	f240 604b 	movw	r0, #1611	; 0x64b
 8018da2:	4283      	cmp	r3, r0
 8018da4:	d338      	bcc.n	8018e18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018da6:	f240 604c 	movw	r0, #1612	; 0x64c
 8018daa:	4283      	cmp	r3, r0
 8018dac:	d9d8      	bls.n	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018dae:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8018db2:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8018db6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018dba:	f040 80f2 	bne.w	8018fa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8018dbe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018dc2:	f040 80ee 	bne.w	8018fa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8018dc6:	00cb      	lsls	r3, r1, #3
 8018dc8:	064e      	lsls	r6, r1, #25
 8018dca:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018dce:	7a13      	ldrb	r3, [r2, #8]
 8018dd0:	ea43 0300 	orr.w	r3, r3, r0
 8018dd4:	bf44      	itt	mi
 8018dd6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018dda:	b21b      	sxthmi	r3, r3
 8018ddc:	e7d9      	b.n	8018d92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8018dde:	f240 6054 	movw	r0, #1620	; 0x654
 8018de2:	4283      	cmp	r3, r0
 8018de4:	d8e3      	bhi.n	8018dae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018de6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018dea:	d9e0      	bls.n	8018dae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018dec:	e7b8      	b.n	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018dee:	f240 6074 	movw	r0, #1652	; 0x674
 8018df2:	4283      	cmp	r3, r0
 8018df4:	d0b4      	beq.n	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018df6:	d82d      	bhi.n	8018e54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8018df8:	f240 605e 	movw	r0, #1630	; 0x65e
 8018dfc:	4283      	cmp	r3, r0
 8018dfe:	d804      	bhi.n	8018e0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8018e00:	f240 605d 	movw	r0, #1629	; 0x65d
 8018e04:	4283      	cmp	r3, r0
 8018e06:	d3d2      	bcc.n	8018dae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018e08:	e7aa      	b.n	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018e0a:	f240 605f 	movw	r0, #1631	; 0x65f
 8018e0e:	4283      	cmp	r3, r0
 8018e10:	d0cd      	beq.n	8018dae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018e12:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018e16:	d0a3      	beq.n	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018e18:	00cb      	lsls	r3, r1, #3
 8018e1a:	0649      	lsls	r1, r1, #25
 8018e1c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018e20:	7a13      	ldrb	r3, [r2, #8]
 8018e22:	ea43 0300 	orr.w	r3, r3, r0
 8018e26:	bf44      	itt	mi
 8018e28:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018e2c:	b21b      	sxthmi	r3, r3
 8018e2e:	1b5d      	subs	r5, r3, r5
 8018e30:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018e34:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018e38:	7b53      	ldrb	r3, [r2, #13]
 8018e3a:	015b      	lsls	r3, r3, #5
 8018e3c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018e40:	7993      	ldrb	r3, [r2, #6]
 8018e42:	430b      	orrs	r3, r1
 8018e44:	2105      	movs	r1, #5
 8018e46:	005b      	lsls	r3, r3, #1
 8018e48:	fb93 f3f1 	sdiv	r3, r3, r1
 8018e4c:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018e50:	440b      	add	r3, r1
 8018e52:	e757      	b.n	8018d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018e54:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8018e58:	4283      	cmp	r3, r0
 8018e5a:	d809      	bhi.n	8018e70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8018e5c:	f240 60df 	movw	r0, #1759	; 0x6df
 8018e60:	4283      	cmp	r3, r0
 8018e62:	f4bf af7d 	bcs.w	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018e66:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8018e6a:	2b05      	cmp	r3, #5
 8018e6c:	d8d4      	bhi.n	8018e18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018e6e:	e777      	b.n	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018e70:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8018e74:	4283      	cmp	r3, r0
 8018e76:	d09a      	beq.n	8018dae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018e78:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8018e7c:	4283      	cmp	r3, r0
 8018e7e:	e7ca      	b.n	8018e16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8018e80:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8018e84:	d22b      	bcs.n	8018ede <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8018e86:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8018e8a:	4283      	cmp	r3, r0
 8018e8c:	d28f      	bcs.n	8018dae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018e8e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018e92:	4283      	cmp	r3, r0
 8018e94:	d816      	bhi.n	8018ec4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8018e96:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8018e9a:	4283      	cmp	r3, r0
 8018e9c:	f4bf af60 	bcs.w	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018ea0:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8018ea4:	4283      	cmp	r3, r0
 8018ea6:	d80a      	bhi.n	8018ebe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8018ea8:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8018eac:	4283      	cmp	r3, r0
 8018eae:	f4bf af57 	bcs.w	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018eb2:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8018eb6:	4283      	cmp	r3, r0
 8018eb8:	f43f af79 	beq.w	8018dae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018ebc:	e7ac      	b.n	8018e18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018ebe:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8018ec2:	e7f8      	b.n	8018eb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8018ec4:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8018ec8:	4283      	cmp	r3, r0
 8018eca:	d802      	bhi.n	8018ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8018ecc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018ed0:	e798      	b.n	8018e04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8018ed2:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018ed6:	4283      	cmp	r3, r0
 8018ed8:	f47f af42 	bne.w	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018edc:	e767      	b.n	8018dae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018ede:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8018ee2:	4283      	cmp	r3, r0
 8018ee4:	f43f af63 	beq.w	8018dae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018ee8:	d802      	bhi.n	8018ef0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8018eea:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8018eee:	e7f2      	b.n	8018ed6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8018ef0:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8018ef4:	4283      	cmp	r3, r0
 8018ef6:	d805      	bhi.n	8018f04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8018ef8:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8018efc:	4283      	cmp	r3, r0
 8018efe:	f4ff af2f 	bcc.w	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018f02:	e754      	b.n	8018dae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018f04:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018f08:	4283      	cmp	r3, r0
 8018f0a:	e7af      	b.n	8018e6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8018f0c:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018f10:	4617      	mov	r7, r2
 8018f12:	f102 0808 	add.w	r8, r2, #8
 8018f16:	4666      	mov	r6, ip
 8018f18:	6838      	ldr	r0, [r7, #0]
 8018f1a:	3708      	adds	r7, #8
 8018f1c:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8018f20:	46e6      	mov	lr, ip
 8018f22:	4547      	cmp	r7, r8
 8018f24:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018f28:	46f4      	mov	ip, lr
 8018f2a:	d1f5      	bne.n	8018f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8018f2c:	6838      	ldr	r0, [r7, #0]
 8018f2e:	f8ce 0000 	str.w	r0, [lr]
 8018f32:	88b9      	ldrh	r1, [r7, #4]
 8018f34:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018f38:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018f3c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018f40:	d009      	beq.n	8018f56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8018f42:	7b51      	ldrb	r1, [r2, #13]
 8018f44:	7992      	ldrb	r2, [r2, #6]
 8018f46:	0149      	lsls	r1, r1, #5
 8018f48:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018f4c:	4311      	orrs	r1, r2
 8018f4e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018f52:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018f56:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018f5a:	d00d      	beq.n	8018f78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8018f5c:	442b      	add	r3, r5
 8018f5e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018f62:	b29b      	uxth	r3, r3
 8018f64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018f68:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018f6c:	10db      	asrs	r3, r3, #3
 8018f6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018f72:	4313      	orrs	r3, r2
 8018f74:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018f78:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018f7c:	00cb      	lsls	r3, r1, #3
 8018f7e:	064f      	lsls	r7, r1, #25
 8018f80:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018f84:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018f88:	ea43 0302 	orr.w	r3, r3, r2
 8018f8c:	bf44      	itt	mi
 8018f8e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018f92:	b21b      	sxthmi	r3, r3
 8018f94:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018f98:	1b5d      	subs	r5, r3, r5
 8018f9a:	4632      	mov	r2, r6
 8018f9c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018fa0:	e6fa      	b.n	8018d98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8018fa2:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8018fa6:	4694      	mov	ip, r2
 8018fa8:	f102 0908 	add.w	r9, r2, #8
 8018fac:	4676      	mov	r6, lr
 8018fae:	f8dc 0000 	ldr.w	r0, [ip]
 8018fb2:	f10c 0c08 	add.w	ip, ip, #8
 8018fb6:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8018fba:	46f0      	mov	r8, lr
 8018fbc:	45cc      	cmp	ip, r9
 8018fbe:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018fc2:	46c6      	mov	lr, r8
 8018fc4:	d1f3      	bne.n	8018fae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8018fc6:	f8dc 0000 	ldr.w	r0, [ip]
 8018fca:	f8c8 0000 	str.w	r0, [r8]
 8018fce:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8018fd2:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018fd6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018fda:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018fde:	d009      	beq.n	8018ff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8018fe0:	7b51      	ldrb	r1, [r2, #13]
 8018fe2:	7992      	ldrb	r2, [r2, #6]
 8018fe4:	0149      	lsls	r1, r1, #5
 8018fe6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018fea:	4311      	orrs	r1, r2
 8018fec:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018ff0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018ff4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018ff8:	d00d      	beq.n	8019016 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8018ffa:	1bdb      	subs	r3, r3, r7
 8018ffc:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019000:	b29b      	uxth	r3, r3
 8019002:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019006:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801900a:	10db      	asrs	r3, r3, #3
 801900c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019010:	4313      	orrs	r3, r2
 8019012:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019016:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801901a:	00cb      	lsls	r3, r1, #3
 801901c:	0648      	lsls	r0, r1, #25
 801901e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019022:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8019026:	ea43 0302 	orr.w	r3, r3, r2
 801902a:	bf44      	itt	mi
 801902c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019030:	b21b      	sxthmi	r3, r3
 8019032:	e7b1      	b.n	8018f98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08019034 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019038:	461e      	mov	r6, r3
 801903a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801903c:	4604      	mov	r4, r0
 801903e:	4617      	mov	r7, r2
 8019040:	b92b      	cbnz	r3, 801904e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8019042:	4b25      	ldr	r3, [pc, #148]	; (80190d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8019044:	21c0      	movs	r1, #192	; 0xc0
 8019046:	4a25      	ldr	r2, [pc, #148]	; (80190dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8019048:	4825      	ldr	r0, [pc, #148]	; (80190e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801904a:	f00c fd93 	bl	8025b74 <__assert_func>
 801904e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019050:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019054:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019058:	f7ed fc64 	bl	8006924 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801905c:	4605      	mov	r5, r0
 801905e:	b918      	cbnz	r0, 8019068 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8019060:	6030      	str	r0, [r6, #0]
 8019062:	4628      	mov	r0, r5
 8019064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019068:	683b      	ldr	r3, [r7, #0]
 801906a:	4601      	mov	r1, r0
 801906c:	4638      	mov	r0, r7
 801906e:	68db      	ldr	r3, [r3, #12]
 8019070:	4798      	blx	r3
 8019072:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019076:	4602      	mov	r2, r0
 8019078:	6030      	str	r0, [r6, #0]
 801907a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801907e:	d213      	bcs.n	80190a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8019080:	4643      	mov	r3, r8
 8019082:	4639      	mov	r1, r7
 8019084:	4620      	mov	r0, r4
 8019086:	f7ff fe33 	bl	8018cf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801908a:	6030      	str	r0, [r6, #0]
 801908c:	6833      	ldr	r3, [r6, #0]
 801908e:	b143      	cbz	r3, 80190a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8019090:	7b5a      	ldrb	r2, [r3, #13]
 8019092:	7a9b      	ldrb	r3, [r3, #10]
 8019094:	0052      	lsls	r2, r2, #1
 8019096:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801909a:	4313      	orrs	r3, r2
 801909c:	bf0c      	ite	eq
 801909e:	2301      	moveq	r3, #1
 80190a0:	2300      	movne	r3, #0
 80190a2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80190a6:	e7dc      	b.n	8019062 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 80190a8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80190ac:	b29b      	uxth	r3, r3
 80190ae:	2b7f      	cmp	r3, #127	; 0x7f
 80190b0:	d804      	bhi.n	80190bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 80190b2:	4639      	mov	r1, r7
 80190b4:	4620      	mov	r0, r4
 80190b6:	f7ff fd01 	bl	8018abc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80190ba:	e7e6      	b.n	801908a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 80190bc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d0e3      	beq.n	801908c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 80190c4:	f640 1302 	movw	r3, #2306	; 0x902
 80190c8:	429d      	cmp	r5, r3
 80190ca:	d1df      	bne.n	801908c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 80190cc:	4601      	mov	r1, r0
 80190ce:	4620      	mov	r0, r4
 80190d0:	f7ff fcc5 	bl	8018a5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80190d4:	e7d9      	b.n	801908a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 80190d6:	bf00      	nop
 80190d8:	08029574 	.word	0x08029574
 80190dc:	080297e6 	.word	0x080297e6
 80190e0:	0802957d 	.word	0x0802957d

080190e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80190e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190e8:	461e      	mov	r6, r3
 80190ea:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80190ec:	4604      	mov	r4, r0
 80190ee:	4617      	mov	r7, r2
 80190f0:	b92b      	cbnz	r3, 80190fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 80190f2:	4b26      	ldr	r3, [pc, #152]	; (801918c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 80190f4:	21c0      	movs	r1, #192	; 0xc0
 80190f6:	4a26      	ldr	r2, [pc, #152]	; (8019190 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 80190f8:	4826      	ldr	r0, [pc, #152]	; (8019194 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 80190fa:	f00c fd3b 	bl	8025b74 <__assert_func>
 80190fe:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019100:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019104:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019108:	f7ed fc0c 	bl	8006924 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801910c:	4605      	mov	r5, r0
 801910e:	b918      	cbnz	r0, 8019118 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8019110:	6030      	str	r0, [r6, #0]
 8019112:	4628      	mov	r0, r5
 8019114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019118:	683b      	ldr	r3, [r7, #0]
 801911a:	4601      	mov	r1, r0
 801911c:	4638      	mov	r0, r7
 801911e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8019122:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019126:	47c8      	blx	r9
 8019128:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801912c:	4602      	mov	r2, r0
 801912e:	6030      	str	r0, [r6, #0]
 8019130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019134:	d213      	bcs.n	801915e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8019136:	4643      	mov	r3, r8
 8019138:	4639      	mov	r1, r7
 801913a:	4620      	mov	r0, r4
 801913c:	f7ff fdd8 	bl	8018cf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019140:	6030      	str	r0, [r6, #0]
 8019142:	6833      	ldr	r3, [r6, #0]
 8019144:	b143      	cbz	r3, 8019158 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8019146:	7b5a      	ldrb	r2, [r3, #13]
 8019148:	7a9b      	ldrb	r3, [r3, #10]
 801914a:	0052      	lsls	r2, r2, #1
 801914c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019150:	4313      	orrs	r3, r2
 8019152:	bf0c      	ite	eq
 8019154:	2301      	moveq	r3, #1
 8019156:	2300      	movne	r3, #0
 8019158:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801915c:	e7d9      	b.n	8019112 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801915e:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019162:	b29b      	uxth	r3, r3
 8019164:	2b7f      	cmp	r3, #127	; 0x7f
 8019166:	d804      	bhi.n	8019172 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8019168:	4639      	mov	r1, r7
 801916a:	4620      	mov	r0, r4
 801916c:	f7ff fca6 	bl	8018abc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019170:	e7e6      	b.n	8019140 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8019172:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8019176:	2b00      	cmp	r3, #0
 8019178:	d0e3      	beq.n	8019142 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801917a:	f640 1302 	movw	r3, #2306	; 0x902
 801917e:	429d      	cmp	r5, r3
 8019180:	d1df      	bne.n	8019142 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8019182:	4601      	mov	r1, r0
 8019184:	4620      	mov	r0, r4
 8019186:	f7ff fc6a 	bl	8018a5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801918a:	e7d9      	b.n	8019140 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801918c:	08029574 	.word	0x08029574
 8019190:	080297e6 	.word	0x080297e6
 8019194:	0802957d 	.word	0x0802957d

08019198 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8019198:	b510      	push	{r4, lr}
 801919a:	4604      	mov	r4, r0
 801919c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80191a0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80191a2:	b9d9      	cbnz	r1, 80191dc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 80191a4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80191a6:	2b0a      	cmp	r3, #10
 80191a8:	d037      	beq.n	801921a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80191aa:	4620      	mov	r0, r4
 80191ac:	f7ff fc16 	bl	80189dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80191b0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80191b2:	2b09      	cmp	r3, #9
 80191b4:	d906      	bls.n	80191c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 80191b6:	4b19      	ldr	r3, [pc, #100]	; (801921c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 80191b8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80191bc:	4a18      	ldr	r2, [pc, #96]	; (8019220 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 80191be:	4819      	ldr	r0, [pc, #100]	; (8019224 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 80191c0:	f00c fcd8 	bl	8025b74 <__assert_func>
 80191c4:	1c5a      	adds	r2, r3, #1
 80191c6:	8722      	strh	r2, [r4, #56]	; 0x38
 80191c8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80191ca:	4413      	add	r3, r2
 80191cc:	b29b      	uxth	r3, r3
 80191ce:	2b09      	cmp	r3, #9
 80191d0:	bf88      	it	hi
 80191d2:	3b0a      	subhi	r3, #10
 80191d4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80191d8:	8458      	strh	r0, [r3, #34]	; 0x22
 80191da:	e7e3      	b.n	80191a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 80191dc:	2b0a      	cmp	r3, #10
 80191de:	d01c      	beq.n	801921a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80191e0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80191e2:	3901      	subs	r1, #1
 80191e4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80191e8:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80191ea:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80191ee:	1c51      	adds	r1, r2, #1
 80191f0:	b289      	uxth	r1, r1
 80191f2:	2901      	cmp	r1, #1
 80191f4:	bf8a      	itet	hi
 80191f6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80191fa:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80191fc:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80191fe:	2b09      	cmp	r3, #9
 8019200:	d8d9      	bhi.n	80191b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8019202:	1c5a      	adds	r2, r3, #1
 8019204:	8722      	strh	r2, [r4, #56]	; 0x38
 8019206:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019208:	4413      	add	r3, r2
 801920a:	b29b      	uxth	r3, r3
 801920c:	2b09      	cmp	r3, #9
 801920e:	bf88      	it	hi
 8019210:	3b0a      	subhi	r3, #10
 8019212:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019216:	8458      	strh	r0, [r3, #34]	; 0x22
 8019218:	e7c0      	b.n	801919c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801921a:	bd10      	pop	{r4, pc}
 801921c:	080295a9 	.word	0x080295a9
 8019220:	0802993c 	.word	0x0802993c
 8019224:	0802957d 	.word	0x0802957d

08019228 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019228:	b538      	push	{r3, r4, r5, lr}
 801922a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801922c:	4604      	mov	r4, r0
 801922e:	b92a      	cbnz	r2, 801923c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8019230:	4b13      	ldr	r3, [pc, #76]	; (8019280 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8019232:	21d5      	movs	r1, #213	; 0xd5
 8019234:	4a13      	ldr	r2, [pc, #76]	; (8019284 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8019236:	4814      	ldr	r0, [pc, #80]	; (8019288 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8019238:	f00c fc9c 	bl	8025b74 <__assert_func>
 801923c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801923e:	3a01      	subs	r2, #1
 8019240:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8019244:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 8019246:	8702      	strh	r2, [r0, #56]	; 0x38
 8019248:	1c5a      	adds	r2, r3, #1
 801924a:	b292      	uxth	r2, r2
 801924c:	2a09      	cmp	r2, #9
 801924e:	bf8a      	itet	hi
 8019250:	3b09      	subhi	r3, #9
 8019252:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8019254:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8019256:	f7ff ff9f 	bl	8019198 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801925a:	8c23      	ldrh	r3, [r4, #32]
 801925c:	2b01      	cmp	r3, #1
 801925e:	bf9c      	itt	ls
 8019260:	3301      	addls	r3, #1
 8019262:	8423      	strhls	r3, [r4, #32]
 8019264:	8be3      	ldrh	r3, [r4, #30]
 8019266:	b90b      	cbnz	r3, 801926c <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8019268:	2302      	movs	r3, #2
 801926a:	83e3      	strh	r3, [r4, #30]
 801926c:	8be3      	ldrh	r3, [r4, #30]
 801926e:	4628      	mov	r0, r5
 8019270:	3b01      	subs	r3, #1
 8019272:	b29b      	uxth	r3, r3
 8019274:	83e3      	strh	r3, [r4, #30]
 8019276:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801927a:	8365      	strh	r5, [r4, #26]
 801927c:	bd38      	pop	{r3, r4, r5, pc}
 801927e:	bf00      	nop
 8019280:	08029574 	.word	0x08029574
 8019284:	08029891 	.word	0x08029891
 8019288:	0802957d 	.word	0x0802957d

0801928c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801928c:	428a      	cmp	r2, r1
 801928e:	b538      	push	{r3, r4, r5, lr}
 8019290:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8019292:	d90c      	bls.n	80192ae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8019294:	b92c      	cbnz	r4, 80192a2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8019296:	4b1c      	ldr	r3, [pc, #112]	; (8019308 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8019298:	21e1      	movs	r1, #225	; 0xe1
 801929a:	4a1c      	ldr	r2, [pc, #112]	; (801930c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801929c:	481c      	ldr	r0, [pc, #112]	; (8019310 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801929e:	f00c fc69 	bl	8025b74 <__assert_func>
 80192a2:	3c01      	subs	r4, #1
 80192a4:	4b1b      	ldr	r3, [pc, #108]	; (8019314 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 80192a6:	4a1c      	ldr	r2, [pc, #112]	; (8019318 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 80192a8:	21c5      	movs	r1, #197	; 0xc5
 80192aa:	8704      	strh	r4, [r0, #56]	; 0x38
 80192ac:	e7f6      	b.n	801929c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80192ae:	428c      	cmp	r4, r1
 80192b0:	d203      	bcs.n	80192ba <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 80192b2:	4b1a      	ldr	r3, [pc, #104]	; (801931c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 80192b4:	21cb      	movs	r1, #203	; 0xcb
 80192b6:	4a1a      	ldr	r2, [pc, #104]	; (8019320 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 80192b8:	e7f0      	b.n	801929c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80192ba:	1a64      	subs	r4, r4, r1
 80192bc:	250a      	movs	r5, #10
 80192be:	8704      	strh	r4, [r0, #56]	; 0x38
 80192c0:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 80192c2:	4421      	add	r1, r4
 80192c4:	b289      	uxth	r1, r1
 80192c6:	2909      	cmp	r1, #9
 80192c8:	bf88      	it	hi
 80192ca:	390a      	subhi	r1, #10
 80192cc:	86c1      	strh	r1, [r0, #54]	; 0x36
 80192ce:	b1ba      	cbz	r2, 8019300 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 80192d0:	3a01      	subs	r2, #1
 80192d2:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80192d4:	b292      	uxth	r2, r2
 80192d6:	2909      	cmp	r1, #9
 80192d8:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80192dc:	d903      	bls.n	80192e6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 80192de:	4b11      	ldr	r3, [pc, #68]	; (8019324 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 80192e0:	21e6      	movs	r1, #230	; 0xe6
 80192e2:	4a11      	ldr	r2, [pc, #68]	; (8019328 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 80192e4:	e7da      	b.n	801929c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80192e6:	3101      	adds	r1, #1
 80192e8:	8701      	strh	r1, [r0, #56]	; 0x38
 80192ea:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80192ec:	b901      	cbnz	r1, 80192f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 80192ee:	86c5      	strh	r5, [r0, #54]	; 0x36
 80192f0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80192f2:	3901      	subs	r1, #1
 80192f4:	b289      	uxth	r1, r1
 80192f6:	86c1      	strh	r1, [r0, #54]	; 0x36
 80192f8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80192fc:	844c      	strh	r4, [r1, #34]	; 0x22
 80192fe:	e7e6      	b.n	80192ce <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8019300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019304:	f7ff bf48 	b.w	8019198 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019308:	08029574 	.word	0x08029574
 801930c:	0802966a 	.word	0x0802966a
 8019310:	0802957d 	.word	0x0802957d
 8019314:	080295b5 	.word	0x080295b5
 8019318:	08029714 	.word	0x08029714
 801931c:	080295c3 	.word	0x080295c3
 8019320:	080299eb 	.word	0x080299eb
 8019324:	080295cf 	.word	0x080295cf
 8019328:	080295e2 	.word	0x080295e2

0801932c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801932c:	3a01      	subs	r2, #1
 801932e:	b570      	push	{r4, r5, r6, lr}
 8019330:	b292      	uxth	r2, r2
 8019332:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019336:	42b2      	cmp	r2, r6
 8019338:	d019      	beq.n	801936e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801933a:	8c04      	ldrh	r4, [r0, #32]
 801933c:	f831 5b02 	ldrh.w	r5, [r1], #2
 8019340:	4294      	cmp	r4, r2
 8019342:	d805      	bhi.n	8019350 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8019344:	4b19      	ldr	r3, [pc, #100]	; (80193ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8019346:	4a1a      	ldr	r2, [pc, #104]	; (80193b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8019348:	21c5      	movs	r1, #197	; 0xc5
 801934a:	481a      	ldr	r0, [pc, #104]	; (80193b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801934c:	f00c fc12 	bl	8025b74 <__assert_func>
 8019350:	8bc4      	ldrh	r4, [r0, #30]
 8019352:	4414      	add	r4, r2
 8019354:	3a01      	subs	r2, #1
 8019356:	b2a4      	uxth	r4, r4
 8019358:	b292      	uxth	r2, r2
 801935a:	2c01      	cmp	r4, #1
 801935c:	bf88      	it	hi
 801935e:	3c02      	subhi	r4, #2
 8019360:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019364:	8b64      	ldrh	r4, [r4, #26]
 8019366:	42ac      	cmp	r4, r5
 8019368:	d0e5      	beq.n	8019336 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801936a:	2000      	movs	r0, #0
 801936c:	bd70      	pop	{r4, r5, r6, pc}
 801936e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019372:	2400      	movs	r4, #0
 8019374:	4413      	add	r3, r2
 8019376:	b2a2      	uxth	r2, r4
 8019378:	429a      	cmp	r2, r3
 801937a:	da14      	bge.n	80193a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801937c:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801937e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019382:	4296      	cmp	r6, r2
 8019384:	d802      	bhi.n	801938c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8019386:	4b09      	ldr	r3, [pc, #36]	; (80193ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8019388:	4a0b      	ldr	r2, [pc, #44]	; (80193b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801938a:	e7dd      	b.n	8019348 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801938c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801938e:	3401      	adds	r4, #1
 8019390:	4432      	add	r2, r6
 8019392:	b292      	uxth	r2, r2
 8019394:	2a09      	cmp	r2, #9
 8019396:	bf88      	it	hi
 8019398:	3a0a      	subhi	r2, #10
 801939a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801939e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80193a0:	42aa      	cmp	r2, r5
 80193a2:	d0e8      	beq.n	8019376 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 80193a4:	e7e1      	b.n	801936a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80193a6:	2001      	movs	r0, #1
 80193a8:	e7e0      	b.n	801936c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80193aa:	bf00      	nop
 80193ac:	080295b5 	.word	0x080295b5
 80193b0:	08029a6f 	.word	0x08029a6f
 80193b4:	0802957d 	.word	0x0802957d
 80193b8:	08029714 	.word	0x08029714

080193bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80193bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193c0:	4605      	mov	r5, r0
 80193c2:	4616      	mov	r6, r2
 80193c4:	1c8c      	adds	r4, r1, #2
 80193c6:	8809      	ldrh	r1, [r1, #0]
 80193c8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80193cc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80193d0:	42b3      	cmp	r3, r6
 80193d2:	d124      	bne.n	801941e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80193d4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80193d8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80193dc:	f001 070f 	and.w	r7, r1, #15
 80193e0:	4652      	mov	r2, sl
 80193e2:	f8cd 8000 	str.w	r8, [sp]
 80193e6:	464b      	mov	r3, r9
 80193e8:	4621      	mov	r1, r4
 80193ea:	4628      	mov	r0, r5
 80193ec:	f7ff ff9e 	bl	801932c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80193f0:	4683      	mov	fp, r0
 80193f2:	b168      	cbz	r0, 8019410 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80193f4:	eb0a 0109 	add.w	r1, sl, r9
 80193f8:	463a      	mov	r2, r7
 80193fa:	4628      	mov	r0, r5
 80193fc:	4441      	add	r1, r8
 80193fe:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019402:	4649      	mov	r1, r9
 8019404:	f7ff ff42 	bl	801928c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019408:	4658      	mov	r0, fp
 801940a:	b003      	add	sp, #12
 801940c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019410:	eb07 010a 	add.w	r1, r7, sl
 8019414:	4449      	add	r1, r9
 8019416:	4441      	add	r1, r8
 8019418:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801941c:	e7d2      	b.n	80193c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801941e:	f04f 0b00 	mov.w	fp, #0
 8019422:	e7f1      	b.n	8019408 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019424 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019424:	b570      	push	{r4, r5, r6, lr}
 8019426:	8810      	ldrh	r0, [r2, #0]
 8019428:	4298      	cmp	r0, r3
 801942a:	d817      	bhi.n	801945c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801942c:	1e48      	subs	r0, r1, #1
 801942e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019432:	4298      	cmp	r0, r3
 8019434:	d312      	bcc.n	801945c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019436:	2400      	movs	r4, #0
 8019438:	428c      	cmp	r4, r1
 801943a:	d20f      	bcs.n	801945c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801943c:	1860      	adds	r0, r4, r1
 801943e:	1040      	asrs	r0, r0, #1
 8019440:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019444:	0085      	lsls	r5, r0, #2
 8019446:	42b3      	cmp	r3, r6
 8019448:	d902      	bls.n	8019450 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801944a:	3001      	adds	r0, #1
 801944c:	b284      	uxth	r4, r0
 801944e:	e7f3      	b.n	8019438 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019450:	d201      	bcs.n	8019456 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8019452:	b281      	uxth	r1, r0
 8019454:	e7f0      	b.n	8019438 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019456:	442a      	add	r2, r5
 8019458:	8850      	ldrh	r0, [r2, #2]
 801945a:	bd70      	pop	{r4, r5, r6, pc}
 801945c:	2000      	movs	r0, #0
 801945e:	e7fc      	b.n	801945a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08019460 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019464:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8019466:	4604      	mov	r4, r0
 8019468:	260b      	movs	r6, #11
 801946a:	886f      	ldrh	r7, [r5, #2]
 801946c:	087f      	lsrs	r7, r7, #1
 801946e:	3e01      	subs	r6, #1
 8019470:	d01b      	beq.n	80194aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8019472:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019474:	b92b      	cbnz	r3, 8019482 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8019476:	4b0e      	ldr	r3, [pc, #56]	; (80194b0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8019478:	21c0      	movs	r1, #192	; 0xc0
 801947a:	4a0e      	ldr	r2, [pc, #56]	; (80194b4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801947c:	480e      	ldr	r0, [pc, #56]	; (80194b8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801947e:	f00c fb79 	bl	8025b74 <__assert_func>
 8019482:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019484:	462a      	mov	r2, r5
 8019486:	4639      	mov	r1, r7
 8019488:	4620      	mov	r0, r4
 801948a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801948e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019492:	4643      	mov	r3, r8
 8019494:	f7ff ffc6 	bl	8019424 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019498:	b138      	cbz	r0, 80194aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801949a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801949e:	4642      	mov	r2, r8
 80194a0:	4620      	mov	r0, r4
 80194a2:	f7ff ff8b 	bl	80193bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80194a6:	2800      	cmp	r0, #0
 80194a8:	d1e1      	bne.n	801946e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80194aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194ae:	bf00      	nop
 80194b0:	08029574 	.word	0x08029574
 80194b4:	080297e6 	.word	0x080297e6
 80194b8:	0802957d 	.word	0x0802957d

080194bc <_ZN8touchgfx8ceil28_4El>:
 80194bc:	f110 030f 	adds.w	r3, r0, #15
 80194c0:	d401      	bmi.n	80194c6 <_ZN8touchgfx8ceil28_4El+0xa>
 80194c2:	1118      	asrs	r0, r3, #4
 80194c4:	4770      	bx	lr
 80194c6:	2210      	movs	r2, #16
 80194c8:	f1c0 0001 	rsb	r0, r0, #1
 80194cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80194d0:	f010 000f 	ands.w	r0, r0, #15
 80194d4:	bf18      	it	ne
 80194d6:	2001      	movne	r0, #1
 80194d8:	1a18      	subs	r0, r3, r0
 80194da:	4770      	bx	lr

080194dc <_ZN8touchgfx11floorDivModEllRlS0_>:
 80194dc:	2900      	cmp	r1, #0
 80194de:	b538      	push	{r3, r4, r5, lr}
 80194e0:	dc05      	bgt.n	80194ee <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 80194e2:	4b0f      	ldr	r3, [pc, #60]	; (8019520 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 80194e4:	21f7      	movs	r1, #247	; 0xf7
 80194e6:	4a0f      	ldr	r2, [pc, #60]	; (8019524 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 80194e8:	480f      	ldr	r0, [pc, #60]	; (8019528 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 80194ea:	f00c fb43 	bl	8025b74 <__assert_func>
 80194ee:	2800      	cmp	r0, #0
 80194f0:	db06      	blt.n	8019500 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 80194f2:	fb90 f4f1 	sdiv	r4, r0, r1
 80194f6:	fb01 0114 	mls	r1, r1, r4, r0
 80194fa:	6014      	str	r4, [r2, #0]
 80194fc:	6019      	str	r1, [r3, #0]
 80194fe:	bd38      	pop	{r3, r4, r5, pc}
 8019500:	4240      	negs	r0, r0
 8019502:	fb90 f4f1 	sdiv	r4, r0, r1
 8019506:	4265      	negs	r5, r4
 8019508:	fb01 0014 	mls	r0, r1, r4, r0
 801950c:	6015      	str	r5, [r2, #0]
 801950e:	6018      	str	r0, [r3, #0]
 8019510:	2800      	cmp	r0, #0
 8019512:	d0f4      	beq.n	80194fe <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8019514:	6810      	ldr	r0, [r2, #0]
 8019516:	3801      	subs	r0, #1
 8019518:	6010      	str	r0, [r2, #0]
 801951a:	6818      	ldr	r0, [r3, #0]
 801951c:	1a09      	subs	r1, r1, r0
 801951e:	e7ed      	b.n	80194fc <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8019520:	08029b40 	.word	0x08029b40
 8019524:	08029b7f 	.word	0x08029b7f
 8019528:	08029b50 	.word	0x08029b50

0801952c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801952c:	b570      	push	{r4, r5, r6, lr}
 801952e:	694a      	ldr	r2, [r1, #20]
 8019530:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019532:	684b      	ldr	r3, [r1, #4]
 8019534:	1b54      	subs	r4, r2, r5
 8019536:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8019538:	f000 8106 	beq.w	8019748 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801953c:	1b9b      	subs	r3, r3, r6
 801953e:	d003      	beq.n	8019548 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019540:	4363      	muls	r3, r4
 8019542:	2210      	movs	r2, #16
 8019544:	fb93 f3f2 	sdiv	r3, r3, r2
 8019548:	680c      	ldr	r4, [r1, #0]
 801954a:	698a      	ldr	r2, [r1, #24]
 801954c:	1b65      	subs	r5, r4, r5
 801954e:	f000 80fd 	beq.w	801974c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8019552:	1b92      	subs	r2, r2, r6
 8019554:	d003      	beq.n	801955e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019556:	436a      	muls	r2, r5
 8019558:	2410      	movs	r4, #16
 801955a:	fb92 f2f4 	sdiv	r2, r2, r4
 801955e:	1a9b      	subs	r3, r3, r2
 8019560:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8019788 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8019564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019568:	460a      	mov	r2, r1
 801956a:	ee07 3a90 	vmov	s15, r3
 801956e:	f100 040c 	add.w	r4, r0, #12
 8019572:	4603      	mov	r3, r0
 8019574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019578:	ee67 7a84 	vmul.f32	s15, s15, s8
 801957c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019580:	eeb1 6a43 	vneg.f32	s12, s6
 8019584:	edd2 7a02 	vldr	s15, [r2, #8]
 8019588:	3214      	adds	r2, #20
 801958a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801958e:	ece3 6a01 	vstmia	r3!, {s13}
 8019592:	429c      	cmp	r4, r3
 8019594:	ed52 7a02 	vldr	s15, [r2, #-8]
 8019598:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801959c:	edc3 7a02 	vstr	s15, [r3, #8]
 80195a0:	ed52 7a01 	vldr	s15, [r2, #-4]
 80195a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80195a8:	edc3 7a05 	vstr	s15, [r3, #20]
 80195ac:	d1ea      	bne.n	8019584 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80195ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80195b0:	698b      	ldr	r3, [r1, #24]
 80195b2:	edd0 4a02 	vldr	s9, [r0, #8]
 80195b6:	1a9b      	subs	r3, r3, r2
 80195b8:	edd0 3a00 	vldr	s7, [r0]
 80195bc:	edd0 6a01 	vldr	s13, [r0, #4]
 80195c0:	ee07 3a90 	vmov	s15, r3
 80195c4:	684b      	ldr	r3, [r1, #4]
 80195c6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80195ca:	ed90 5a05 	vldr	s10, [r0, #20]
 80195ce:	1a9b      	subs	r3, r3, r2
 80195d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195d4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80195d8:	ed90 2a03 	vldr	s4, [r0, #12]
 80195dc:	ee07 3a10 	vmov	s14, r3
 80195e0:	edd0 5a04 	vldr	s11, [r0, #16]
 80195e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80195e8:	ed90 1a07 	vldr	s2, [r0, #28]
 80195ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80195f0:	edd0 2a06 	vldr	s5, [r0, #24]
 80195f4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80195f8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80195fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019600:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019604:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019608:	ee67 7a83 	vmul.f32	s15, s15, s6
 801960c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8019610:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019612:	694a      	ldr	r2, [r1, #20]
 8019614:	1b13      	subs	r3, r2, r4
 8019616:	ee07 3a10 	vmov	s14, r3
 801961a:	680b      	ldr	r3, [r1, #0]
 801961c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019620:	1b1b      	subs	r3, r3, r4
 8019622:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019626:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801962a:	ee07 3a10 	vmov	s14, r3
 801962e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019632:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019636:	eee6 4a87 	vfma.f32	s9, s13, s14
 801963a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801963e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8019642:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019644:	698b      	ldr	r3, [r1, #24]
 8019646:	1a9b      	subs	r3, r3, r2
 8019648:	ee06 3a90 	vmov	s13, r3
 801964c:	684b      	ldr	r3, [r1, #4]
 801964e:	1a9b      	subs	r3, r3, r2
 8019650:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019654:	ee07 3a10 	vmov	s14, r3
 8019658:	ee66 6a84 	vmul.f32	s13, s13, s8
 801965c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019660:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019664:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019668:	eee5 6a87 	vfma.f32	s13, s11, s14
 801966c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019670:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8019674:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019676:	694a      	ldr	r2, [r1, #20]
 8019678:	1b13      	subs	r3, r2, r4
 801967a:	ee07 3a10 	vmov	s14, r3
 801967e:	680b      	ldr	r3, [r1, #0]
 8019680:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019684:	1b1b      	subs	r3, r3, r4
 8019686:	ee27 7a04 	vmul.f32	s14, s14, s8
 801968a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801968e:	ee07 3a10 	vmov	s14, r3
 8019692:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019696:	ee27 7a04 	vmul.f32	s14, s14, s8
 801969a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801969e:	edd0 5a08 	vldr	s11, [r0, #32]
 80196a2:	ee31 1a65 	vsub.f32	s2, s2, s11
 80196a6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80196aa:	ee25 5a06 	vmul.f32	s10, s10, s12
 80196ae:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80196b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80196b4:	698b      	ldr	r3, [r1, #24]
 80196b6:	1a9b      	subs	r3, r3, r2
 80196b8:	ee07 3a10 	vmov	s14, r3
 80196bc:	684b      	ldr	r3, [r1, #4]
 80196be:	1a9b      	subs	r3, r3, r2
 80196c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80196c4:	ee01 3a90 	vmov	s3, r3
 80196c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80196cc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80196d0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80196d4:	ee61 1a84 	vmul.f32	s3, s3, s8
 80196d8:	eea1 7a21 	vfma.f32	s14, s2, s3
 80196dc:	ee27 7a03 	vmul.f32	s14, s14, s6
 80196e0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80196e4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80196e6:	694a      	ldr	r2, [r1, #20]
 80196e8:	1b13      	subs	r3, r2, r4
 80196ea:	ee03 3a10 	vmov	s6, r3
 80196ee:	680b      	ldr	r3, [r1, #0]
 80196f0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80196f4:	1b1b      	subs	r3, r3, r4
 80196f6:	ee23 3a04 	vmul.f32	s6, s6, s8
 80196fa:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80196fe:	ee03 3a10 	vmov	s6, r3
 8019702:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019706:	ee23 4a04 	vmul.f32	s8, s6, s8
 801970a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801970e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019712:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019716:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801971a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801971e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019726:	dd13      	ble.n	8019750 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8019728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801972c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019730:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019732:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801973a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801973e:	dd15      	ble.n	801976c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8019740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019744:	6403      	str	r3, [r0, #64]	; 0x40
 8019746:	bd70      	pop	{r4, r5, r6, pc}
 8019748:	4623      	mov	r3, r4
 801974a:	e6fd      	b.n	8019548 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801974c:	462a      	mov	r2, r5
 801974e:	e706      	b.n	801955e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019750:	d502      	bpl.n	8019758 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8019752:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019756:	e7e9      	b.n	801972c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8019758:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801975c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019760:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019768:	dade      	bge.n	8019728 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801976a:	e7f2      	b.n	8019752 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801976c:	d502      	bpl.n	8019774 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801976e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019772:	e7e7      	b.n	8019744 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8019774:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019778:	eee3 4a86 	vfma.f32	s9, s7, s12
 801977c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019784:	dadc      	bge.n	8019740 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8019786:	e7f2      	b.n	801976e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019788:	3d800000 	.word	0x3d800000

0801978c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801978c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019790:	f04f 0814 	mov.w	r8, #20
 8019794:	4604      	mov	r4, r0
 8019796:	4617      	mov	r7, r2
 8019798:	460d      	mov	r5, r1
 801979a:	fb08 f903 	mul.w	r9, r8, r3
 801979e:	461e      	mov	r6, r3
 80197a0:	eb02 0a09 	add.w	sl, r2, r9
 80197a4:	f8da 0004 	ldr.w	r0, [sl, #4]
 80197a8:	f7ff fe88 	bl	80194bc <_ZN8touchgfx8ceil28_4El>
 80197ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197ae:	6160      	str	r0, [r4, #20]
 80197b0:	fb08 f803 	mul.w	r8, r8, r3
 80197b4:	9001      	str	r0, [sp, #4]
 80197b6:	eb07 0b08 	add.w	fp, r7, r8
 80197ba:	f8db 0004 	ldr.w	r0, [fp, #4]
 80197be:	f7ff fe7d 	bl	80194bc <_ZN8touchgfx8ceil28_4El>
 80197c2:	9a01      	ldr	r2, [sp, #4]
 80197c4:	1a80      	subs	r0, r0, r2
 80197c6:	61a0      	str	r0, [r4, #24]
 80197c8:	2800      	cmp	r0, #0
 80197ca:	f000 8088 	beq.w	80198de <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 80197ce:	f857 3009 	ldr.w	r3, [r7, r9]
 80197d2:	f857 c008 	ldr.w	ip, [r7, r8]
 80197d6:	f8db 0004 	ldr.w	r0, [fp, #4]
 80197da:	ebac 0c03 	sub.w	ip, ip, r3
 80197de:	f8da 1004 	ldr.w	r1, [sl, #4]
 80197e2:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 80197e6:	1a40      	subs	r0, r0, r1
 80197e8:	fb0b f202 	mul.w	r2, fp, r2
 80197ec:	ea4f 1800 	mov.w	r8, r0, lsl #4
 80197f0:	fb0c 2211 	mls	r2, ip, r1, r2
 80197f4:	4641      	mov	r1, r8
 80197f6:	fb00 2003 	mla	r0, r0, r3, r2
 80197fa:	f104 0310 	add.w	r3, r4, #16
 80197fe:	4622      	mov	r2, r4
 8019800:	3801      	subs	r0, #1
 8019802:	4440      	add	r0, r8
 8019804:	f7ff fe6a 	bl	80194dc <_ZN8touchgfx11floorDivModEllRlS0_>
 8019808:	f104 0308 	add.w	r3, r4, #8
 801980c:	1d22      	adds	r2, r4, #4
 801980e:	4641      	mov	r1, r8
 8019810:	4658      	mov	r0, fp
 8019812:	f7ff fe63 	bl	80194dc <_ZN8touchgfx11floorDivModEllRlS0_>
 8019816:	f8c4 800c 	str.w	r8, [r4, #12]
 801981a:	6962      	ldr	r2, [r4, #20]
 801981c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8019820:	eddf 6a31 	vldr	s13, [pc, #196]	; 80198e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019824:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8019828:	6822      	ldr	r2, [r4, #0]
 801982a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801982e:	ee07 3a10 	vmov	s14, r3
 8019832:	f857 3009 	ldr.w	r3, [r7, r9]
 8019836:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801983a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801983e:	ee07 3a90 	vmov	s15, r3
 8019842:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8019846:	ee27 7a26 	vmul.f32	s14, s14, s13
 801984a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801984e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019852:	edd3 6a00 	vldr	s13, [r3]
 8019856:	eee6 6a07 	vfma.f32	s13, s12, s14
 801985a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801985e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019862:	edc4 6a07 	vstr	s13, [r4, #28]
 8019866:	edd4 6a01 	vldr	s13, [r4, #4]
 801986a:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801986e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019872:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8019876:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801987a:	ed84 6a08 	vstr	s12, [r4, #32]
 801987e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8019880:	6262      	str	r2, [r4, #36]	; 0x24
 8019882:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8019886:	ed93 6a03 	vldr	s12, [r3, #12]
 801988a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801988e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8019892:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8019896:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801989a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801989e:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 80198a2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80198a6:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 80198aa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80198ac:	6322      	str	r2, [r4, #48]	; 0x30
 80198ae:	ed93 6a06 	vldr	s12, [r3, #24]
 80198b2:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 80198b6:	eea5 6a87 	vfma.f32	s12, s11, s14
 80198ba:	eeb0 7a46 	vmov.f32	s14, s12
 80198be:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 80198c2:	eea6 7a27 	vfma.f32	s14, s12, s15
 80198c6:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 80198ca:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 80198ce:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 80198d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80198d6:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 80198da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80198dc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80198de:	4620      	mov	r0, r4
 80198e0:	b003      	add	sp, #12
 80198e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198e6:	bf00      	nop
 80198e8:	3d800000 	.word	0x3d800000

080198ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80198ec:	4b01      	ldr	r3, [pc, #4]	; (80198f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80198ee:	6018      	str	r0, [r3, #0]
 80198f0:	4770      	bx	lr
 80198f2:	bf00      	nop
 80198f4:	2400af4c 	.word	0x2400af4c

080198f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80198f8:	4b06      	ldr	r3, [pc, #24]	; (8019914 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80198fa:	881a      	ldrh	r2, [r3, #0]
 80198fc:	4282      	cmp	r2, r0
 80198fe:	d807      	bhi.n	8019910 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019900:	4b05      	ldr	r3, [pc, #20]	; (8019918 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8019902:	881b      	ldrh	r3, [r3, #0]
 8019904:	4413      	add	r3, r2
 8019906:	4298      	cmp	r0, r3
 8019908:	bfac      	ite	ge
 801990a:	2000      	movge	r0, #0
 801990c:	2001      	movlt	r0, #1
 801990e:	4770      	bx	lr
 8019910:	2000      	movs	r0, #0
 8019912:	4770      	bx	lr
 8019914:	2400af6c 	.word	0x2400af6c
 8019918:	2400af70 	.word	0x2400af70

0801991c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801991c:	b508      	push	{r3, lr}
 801991e:	4601      	mov	r1, r0
 8019920:	f7ff ffea 	bl	80198f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019924:	b118      	cbz	r0, 801992e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8019926:	4b02      	ldr	r3, [pc, #8]	; (8019930 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801992e:	bd08      	pop	{r3, pc}
 8019930:	2400af50 	.word	0x2400af50

08019934 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019938:	4d28      	ldr	r5, [pc, #160]	; (80199dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801993a:	682b      	ldr	r3, [r5, #0]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d04a      	beq.n	80199d6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8019940:	4a27      	ldr	r2, [pc, #156]	; (80199e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8019942:	4e28      	ldr	r6, [pc, #160]	; (80199e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8019944:	8810      	ldrh	r0, [r2, #0]
 8019946:	f8b6 8000 	ldrh.w	r8, [r6]
 801994a:	4c27      	ldr	r4, [pc, #156]	; (80199e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801994c:	4440      	add	r0, r8
 801994e:	4f27      	ldr	r7, [pc, #156]	; (80199ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8019950:	1c41      	adds	r1, r0, #1
 8019952:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8019956:	f021 0101 	bic.w	r1, r1, #1
 801995a:	eb03 020e 	add.w	r2, r3, lr
 801995e:	0409      	lsls	r1, r1, #16
 8019960:	6022      	str	r2, [r4, #0]
 8019962:	0c09      	lsrs	r1, r1, #16
 8019964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019968:	eb0e 010c 	add.w	r1, lr, ip
 801996c:	185a      	adds	r2, r3, r1
 801996e:	603a      	str	r2, [r7, #0]
 8019970:	220e      	movs	r2, #14
 8019972:	fb02 f208 	mul.w	r2, r2, r8
 8019976:	3203      	adds	r2, #3
 8019978:	f022 0203 	bic.w	r2, r2, #3
 801997c:	4411      	add	r1, r2
 801997e:	440b      	add	r3, r1
 8019980:	491b      	ldr	r1, [pc, #108]	; (80199f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8019982:	600b      	str	r3, [r1, #0]
 8019984:	2300      	movs	r3, #0
 8019986:	491b      	ldr	r1, [pc, #108]	; (80199f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8019988:	800b      	strh	r3, [r1, #0]
 801998a:	491b      	ldr	r1, [pc, #108]	; (80199f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801998c:	6809      	ldr	r1, [r1, #0]
 801998e:	eba1 010e 	sub.w	r1, r1, lr
 8019992:	eba1 010c 	sub.w	r1, r1, ip
 8019996:	469c      	mov	ip, r3
 8019998:	1a8a      	subs	r2, r1, r2
 801999a:	4918      	ldr	r1, [pc, #96]	; (80199fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801999c:	600a      	str	r2, [r1, #0]
 801999e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80199a2:	4a17      	ldr	r2, [pc, #92]	; (8019a00 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 80199a4:	8013      	strh	r3, [r2, #0]
 80199a6:	4283      	cmp	r3, r0
 80199a8:	d10d      	bne.n	80199c6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80199aa:	8835      	ldrh	r5, [r6, #0]
 80199ac:	2300      	movs	r3, #0
 80199ae:	6838      	ldr	r0, [r7, #0]
 80199b0:	240e      	movs	r4, #14
 80199b2:	429d      	cmp	r5, r3
 80199b4:	d90f      	bls.n	80199d6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80199b6:	fb04 0203 	mla	r2, r4, r3, r0
 80199ba:	3301      	adds	r3, #1
 80199bc:	7b11      	ldrb	r1, [r2, #12]
 80199be:	f36f 1145 	bfc	r1, #5, #1
 80199c2:	7311      	strb	r1, [r2, #12]
 80199c4:	e7f5      	b.n	80199b2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 80199c6:	682a      	ldr	r2, [r5, #0]
 80199c8:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80199cc:	6822      	ldr	r2, [r4, #0]
 80199ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80199d2:	3301      	adds	r3, #1
 80199d4:	e7e7      	b.n	80199a6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 80199d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199da:	bf00      	nop
 80199dc:	2400af50 	.word	0x2400af50
 80199e0:	2400af6c 	.word	0x2400af6c
 80199e4:	2400af70 	.word	0x2400af70
 80199e8:	2400af64 	.word	0x2400af64
 80199ec:	2400af54 	.word	0x2400af54
 80199f0:	2400af5c 	.word	0x2400af5c
 80199f4:	2400af6e 	.word	0x2400af6e
 80199f8:	2400af58 	.word	0x2400af58
 80199fc:	2400af68 	.word	0x2400af68
 8019a00:	2400af60 	.word	0x2400af60

08019a04 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019a04:	4b10      	ldr	r3, [pc, #64]	; (8019a48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8019a06:	b510      	push	{r4, lr}
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	b9db      	cbnz	r3, 8019a44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8019a0c:	b1d1      	cbz	r1, 8019a44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8019a0e:	4b0f      	ldr	r3, [pc, #60]	; (8019a4c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8019a10:	240e      	movs	r4, #14
 8019a12:	801a      	strh	r2, [r3, #0]
 8019a14:	b292      	uxth	r2, r2
 8019a16:	4b0e      	ldr	r3, [pc, #56]	; (8019a50 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8019a18:	881b      	ldrh	r3, [r3, #0]
 8019a1a:	4413      	add	r3, r2
 8019a1c:	4362      	muls	r2, r4
 8019a1e:	2406      	movs	r4, #6
 8019a20:	fb04 2203 	mla	r2, r4, r3, r2
 8019a24:	428a      	cmp	r2, r1
 8019a26:	d305      	bcc.n	8019a34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8019a28:	4b0a      	ldr	r3, [pc, #40]	; (8019a54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8019a2a:	2135      	movs	r1, #53	; 0x35
 8019a2c:	4a0a      	ldr	r2, [pc, #40]	; (8019a58 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8019a2e:	480b      	ldr	r0, [pc, #44]	; (8019a5c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8019a30:	f00c f8a0 	bl	8025b74 <__assert_func>
 8019a34:	4b0a      	ldr	r3, [pc, #40]	; (8019a60 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8019a36:	6019      	str	r1, [r3, #0]
 8019a38:	4b0a      	ldr	r3, [pc, #40]	; (8019a64 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8019a3a:	6018      	str	r0, [r3, #0]
 8019a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a40:	f7ff bf78 	b.w	8019934 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019a44:	bd10      	pop	{r4, pc}
 8019a46:	bf00      	nop
 8019a48:	2400af5c 	.word	0x2400af5c
 8019a4c:	2400af70 	.word	0x2400af70
 8019a50:	2400af6c 	.word	0x2400af6c
 8019a54:	08029c1d 	.word	0x08029c1d
 8019a58:	08029cb2 	.word	0x08029cb2
 8019a5c:	08029bf8 	.word	0x08029bf8
 8019a60:	2400af58 	.word	0x2400af58
 8019a64:	2400af50 	.word	0x2400af50

08019a68 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019a68:	b470      	push	{r4, r5, r6}
 8019a6a:	4c07      	ldr	r4, [pc, #28]	; (8019a88 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019a6c:	4605      	mov	r5, r0
 8019a6e:	4610      	mov	r0, r2
 8019a70:	9a03      	ldr	r2, [sp, #12]
 8019a72:	6826      	ldr	r6, [r4, #0]
 8019a74:	b936      	cbnz	r6, 8019a84 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019a76:	6025      	str	r5, [r4, #0]
 8019a78:	4c04      	ldr	r4, [pc, #16]	; (8019a8c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019a7a:	8021      	strh	r1, [r4, #0]
 8019a7c:	4619      	mov	r1, r3
 8019a7e:	bc70      	pop	{r4, r5, r6}
 8019a80:	f7ff bfc0 	b.w	8019a04 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019a84:	bc70      	pop	{r4, r5, r6}
 8019a86:	4770      	bx	lr
 8019a88:	2400af74 	.word	0x2400af74
 8019a8c:	2400af6c 	.word	0x2400af6c

08019a90 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019a90:	b508      	push	{r3, lr}
 8019a92:	4b14      	ldr	r3, [pc, #80]	; (8019ae4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019a94:	6819      	ldr	r1, [r3, #0]
 8019a96:	b931      	cbnz	r1, 8019aa6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8019a98:	4b13      	ldr	r3, [pc, #76]	; (8019ae8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8019a9a:	f240 4185 	movw	r1, #1157	; 0x485
 8019a9e:	4a13      	ldr	r2, [pc, #76]	; (8019aec <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8019aa0:	4813      	ldr	r0, [pc, #76]	; (8019af0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8019aa2:	f00c f867 	bl	8025b74 <__assert_func>
 8019aa6:	4a13      	ldr	r2, [pc, #76]	; (8019af4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8019aa8:	8803      	ldrh	r3, [r0, #0]
 8019aaa:	8812      	ldrh	r2, [r2, #0]
 8019aac:	4293      	cmp	r3, r2
 8019aae:	d204      	bcs.n	8019aba <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8019ab0:	2214      	movs	r2, #20
 8019ab2:	fb02 1303 	mla	r3, r2, r3, r1
 8019ab6:	8918      	ldrh	r0, [r3, #8]
 8019ab8:	bd08      	pop	{r3, pc}
 8019aba:	490f      	ldr	r1, [pc, #60]	; (8019af8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8019abc:	8809      	ldrh	r1, [r1, #0]
 8019abe:	4411      	add	r1, r2
 8019ac0:	428b      	cmp	r3, r1
 8019ac2:	da06      	bge.n	8019ad2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8019ac4:	1a9b      	subs	r3, r3, r2
 8019ac6:	4a0d      	ldr	r2, [pc, #52]	; (8019afc <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8019ac8:	210e      	movs	r1, #14
 8019aca:	6812      	ldr	r2, [r2, #0]
 8019acc:	fb01 2303 	mla	r3, r1, r3, r2
 8019ad0:	e7f1      	b.n	8019ab6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8019ad2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	bf0a      	itet	eq
 8019ada:	4b09      	ldreq	r3, [pc, #36]	; (8019b00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8019adc:	2000      	movne	r0, #0
 8019ade:	8818      	ldrheq	r0, [r3, #0]
 8019ae0:	e7ea      	b.n	8019ab8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8019ae2:	bf00      	nop
 8019ae4:	2400af74 	.word	0x2400af74
 8019ae8:	08029c76 	.word	0x08029c76
 8019aec:	08029d5f 	.word	0x08029d5f
 8019af0:	08029bf8 	.word	0x08029bf8
 8019af4:	2400af6c 	.word	0x2400af6c
 8019af8:	2400af70 	.word	0x2400af70
 8019afc:	2400af54 	.word	0x2400af54
 8019b00:	2400aee0 	.word	0x2400aee0

08019b04 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019b04:	b508      	push	{r3, lr}
 8019b06:	4b14      	ldr	r3, [pc, #80]	; (8019b58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019b08:	6819      	ldr	r1, [r3, #0]
 8019b0a:	b931      	cbnz	r1, 8019b1a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8019b0c:	4b13      	ldr	r3, [pc, #76]	; (8019b5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019b0e:	f240 4199 	movw	r1, #1177	; 0x499
 8019b12:	4a13      	ldr	r2, [pc, #76]	; (8019b60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019b14:	4813      	ldr	r0, [pc, #76]	; (8019b64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019b16:	f00c f82d 	bl	8025b74 <__assert_func>
 8019b1a:	4a13      	ldr	r2, [pc, #76]	; (8019b68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8019b1c:	8803      	ldrh	r3, [r0, #0]
 8019b1e:	8812      	ldrh	r2, [r2, #0]
 8019b20:	4293      	cmp	r3, r2
 8019b22:	d204      	bcs.n	8019b2e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8019b24:	2214      	movs	r2, #20
 8019b26:	fb02 1303 	mla	r3, r2, r3, r1
 8019b2a:	8958      	ldrh	r0, [r3, #10]
 8019b2c:	bd08      	pop	{r3, pc}
 8019b2e:	490f      	ldr	r1, [pc, #60]	; (8019b6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8019b30:	8809      	ldrh	r1, [r1, #0]
 8019b32:	4411      	add	r1, r2
 8019b34:	428b      	cmp	r3, r1
 8019b36:	da06      	bge.n	8019b46 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8019b38:	1a9b      	subs	r3, r3, r2
 8019b3a:	4a0d      	ldr	r2, [pc, #52]	; (8019b70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8019b3c:	210e      	movs	r1, #14
 8019b3e:	6812      	ldr	r2, [r2, #0]
 8019b40:	fb01 2303 	mla	r3, r1, r3, r2
 8019b44:	e7f1      	b.n	8019b2a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8019b46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019b4a:	4293      	cmp	r3, r2
 8019b4c:	bf0a      	itet	eq
 8019b4e:	4b09      	ldreq	r3, [pc, #36]	; (8019b74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8019b50:	2000      	movne	r0, #0
 8019b52:	8818      	ldrheq	r0, [r3, #0]
 8019b54:	e7ea      	b.n	8019b2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8019b56:	bf00      	nop
 8019b58:	2400af74 	.word	0x2400af74
 8019b5c:	08029c76 	.word	0x08029c76
 8019b60:	08029d8b 	.word	0x08029d8b
 8019b64:	08029bf8 	.word	0x08029bf8
 8019b68:	2400af6c 	.word	0x2400af6c
 8019b6c:	2400af70 	.word	0x2400af70
 8019b70:	2400af54 	.word	0x2400af54
 8019b74:	2400aee2 	.word	0x2400aee2

08019b78 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019b78:	4b23      	ldr	r3, [pc, #140]	; (8019c08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8019b7a:	b510      	push	{r4, lr}
 8019b7c:	681c      	ldr	r4, [r3, #0]
 8019b7e:	b934      	cbnz	r4, 8019b8e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8019b80:	4b22      	ldr	r3, [pc, #136]	; (8019c0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019b82:	f240 41ad 	movw	r1, #1197	; 0x4ad
 8019b86:	4a22      	ldr	r2, [pc, #136]	; (8019c10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8019b88:	4822      	ldr	r0, [pc, #136]	; (8019c14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8019b8a:	f00b fff3 	bl	8025b74 <__assert_func>
 8019b8e:	4a22      	ldr	r2, [pc, #136]	; (8019c18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8019b90:	880b      	ldrh	r3, [r1, #0]
 8019b92:	8812      	ldrh	r2, [r2, #0]
 8019b94:	4293      	cmp	r3, r2
 8019b96:	d211      	bcs.n	8019bbc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8019b98:	2214      	movs	r2, #20
 8019b9a:	fb02 4303 	mla	r3, r2, r3, r4
 8019b9e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8019ba2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019ba6:	8a1a      	ldrh	r2, [r3, #16]
 8019ba8:	8a5b      	ldrh	r3, [r3, #18]
 8019baa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019bae:	8004      	strh	r4, [r0, #0]
 8019bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019bb4:	8041      	strh	r1, [r0, #2]
 8019bb6:	8082      	strh	r2, [r0, #4]
 8019bb8:	80c3      	strh	r3, [r0, #6]
 8019bba:	e00e      	b.n	8019bda <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8019bbc:	4917      	ldr	r1, [pc, #92]	; (8019c1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8019bbe:	8809      	ldrh	r1, [r1, #0]
 8019bc0:	4411      	add	r1, r2
 8019bc2:	428b      	cmp	r3, r1
 8019bc4:	da0a      	bge.n	8019bdc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8019bc6:	1a9b      	subs	r3, r3, r2
 8019bc8:	4a15      	ldr	r2, [pc, #84]	; (8019c20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8019bca:	210e      	movs	r1, #14
 8019bcc:	6812      	ldr	r2, [r2, #0]
 8019bce:	fb01 2303 	mla	r3, r1, r3, r2
 8019bd2:	681a      	ldr	r2, [r3, #0]
 8019bd4:	6002      	str	r2, [r0, #0]
 8019bd6:	685a      	ldr	r2, [r3, #4]
 8019bd8:	6042      	str	r2, [r0, #4]
 8019bda:	bd10      	pop	{r4, pc}
 8019bdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019be0:	4293      	cmp	r3, r2
 8019be2:	d10b      	bne.n	8019bfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8019be4:	4b0f      	ldr	r3, [pc, #60]	; (8019c24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8019be6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019bea:	4b0f      	ldr	r3, [pc, #60]	; (8019c28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8019bec:	8081      	strh	r1, [r0, #4]
 8019bee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	80c2      	strh	r2, [r0, #6]
 8019bf6:	8003      	strh	r3, [r0, #0]
 8019bf8:	8043      	strh	r3, [r0, #2]
 8019bfa:	e7ee      	b.n	8019bda <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8019bfc:	2300      	movs	r3, #0
 8019bfe:	8003      	strh	r3, [r0, #0]
 8019c00:	8043      	strh	r3, [r0, #2]
 8019c02:	8083      	strh	r3, [r0, #4]
 8019c04:	e7d8      	b.n	8019bb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8019c06:	bf00      	nop
 8019c08:	2400af74 	.word	0x2400af74
 8019c0c:	08029c76 	.word	0x08029c76
 8019c10:	08029cf8 	.word	0x08029cf8
 8019c14:	08029bf8 	.word	0x08029bf8
 8019c18:	2400af6c 	.word	0x2400af6c
 8019c1c:	2400af70 	.word	0x2400af70
 8019c20:	2400af54 	.word	0x2400af54
 8019c24:	2400aee0 	.word	0x2400aee0
 8019c28:	2400aee2 	.word	0x2400aee2

08019c2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8019c2c:	4b18      	ldr	r3, [pc, #96]	; (8019c90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	b34b      	cbz	r3, 8019c86 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8019c32:	4a18      	ldr	r2, [pc, #96]	; (8019c94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8019c34:	8800      	ldrh	r0, [r0, #0]
 8019c36:	8812      	ldrh	r2, [r2, #0]
 8019c38:	4290      	cmp	r0, r2
 8019c3a:	d211      	bcs.n	8019c60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8019c3c:	2214      	movs	r2, #20
 8019c3e:	fb02 3300 	mla	r3, r2, r0, r3
 8019c42:	8a1a      	ldrh	r2, [r3, #16]
 8019c44:	8919      	ldrh	r1, [r3, #8]
 8019c46:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019c4a:	428a      	cmp	r2, r1
 8019c4c:	db1d      	blt.n	8019c8a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8019c4e:	8a58      	ldrh	r0, [r3, #18]
 8019c50:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8019c54:	895b      	ldrh	r3, [r3, #10]
 8019c56:	4298      	cmp	r0, r3
 8019c58:	bfac      	ite	ge
 8019c5a:	2000      	movge	r0, #0
 8019c5c:	2001      	movlt	r0, #1
 8019c5e:	4770      	bx	lr
 8019c60:	4b0d      	ldr	r3, [pc, #52]	; (8019c98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8019c62:	881b      	ldrh	r3, [r3, #0]
 8019c64:	4413      	add	r3, r2
 8019c66:	4298      	cmp	r0, r3
 8019c68:	da0d      	bge.n	8019c86 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8019c6a:	4b0c      	ldr	r3, [pc, #48]	; (8019c9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8019c6c:	1a80      	subs	r0, r0, r2
 8019c6e:	220e      	movs	r2, #14
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	fb02 3300 	mla	r3, r2, r0, r3
 8019c76:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8019c7a:	891a      	ldrh	r2, [r3, #8]
 8019c7c:	4291      	cmp	r1, r2
 8019c7e:	db04      	blt.n	8019c8a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8019c80:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8019c84:	e7e6      	b.n	8019c54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8019c86:	2000      	movs	r0, #0
 8019c88:	4770      	bx	lr
 8019c8a:	2001      	movs	r0, #1
 8019c8c:	4770      	bx	lr
 8019c8e:	bf00      	nop
 8019c90:	2400af74 	.word	0x2400af74
 8019c94:	2400af6c 	.word	0x2400af6c
 8019c98:	2400af70 	.word	0x2400af70
 8019c9c:	2400af54 	.word	0x2400af54

08019ca0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019ca0:	b508      	push	{r3, lr}
 8019ca2:	4b12      	ldr	r3, [pc, #72]	; (8019cec <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8019ca4:	6819      	ldr	r1, [r3, #0]
 8019ca6:	b931      	cbnz	r1, 8019cb6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019ca8:	4b11      	ldr	r3, [pc, #68]	; (8019cf0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019caa:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8019cae:	4a11      	ldr	r2, [pc, #68]	; (8019cf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019cb0:	4811      	ldr	r0, [pc, #68]	; (8019cf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019cb2:	f00b ff5f 	bl	8025b74 <__assert_func>
 8019cb6:	8803      	ldrh	r3, [r0, #0]
 8019cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019cbc:	4293      	cmp	r3, r2
 8019cbe:	d012      	beq.n	8019ce6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019cc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019cc4:	4293      	cmp	r3, r2
 8019cc6:	d103      	bne.n	8019cd0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8019cc8:	4b0c      	ldr	r3, [pc, #48]	; (8019cfc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8019cce:	bd08      	pop	{r3, pc}
 8019cd0:	4a0b      	ldr	r2, [pc, #44]	; (8019d00 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8019cd2:	6812      	ldr	r2, [r2, #0]
 8019cd4:	b11a      	cbz	r2, 8019cde <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8019cd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019cda:	2800      	cmp	r0, #0
 8019cdc:	d1f7      	bne.n	8019cce <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019cde:	2214      	movs	r2, #20
 8019ce0:	4353      	muls	r3, r2
 8019ce2:	58c8      	ldr	r0, [r1, r3]
 8019ce4:	e7f3      	b.n	8019cce <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019ce6:	2000      	movs	r0, #0
 8019ce8:	e7f1      	b.n	8019cce <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019cea:	bf00      	nop
 8019cec:	2400af74 	.word	0x2400af74
 8019cf0:	08029c76 	.word	0x08029c76
 8019cf4:	08029d2e 	.word	0x08029d2e
 8019cf8:	08029bf8 	.word	0x08029bf8
 8019cfc:	2400aeec 	.word	0x2400aeec
 8019d00:	2400af50 	.word	0x2400af50

08019d04 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019d04:	8802      	ldrh	r2, [r0, #0]
 8019d06:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8019d0a:	429a      	cmp	r2, r3
 8019d0c:	d845      	bhi.n	8019d9a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8019d0e:	4b24      	ldr	r3, [pc, #144]	; (8019da0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019d10:	8818      	ldrh	r0, [r3, #0]
 8019d12:	4282      	cmp	r2, r0
 8019d14:	d221      	bcs.n	8019d5a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8019d16:	4b23      	ldr	r3, [pc, #140]	; (8019da4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019d18:	6819      	ldr	r1, [r3, #0]
 8019d1a:	2314      	movs	r3, #20
 8019d1c:	fb03 1302 	mla	r3, r3, r2, r1
 8019d20:	6858      	ldr	r0, [r3, #4]
 8019d22:	2800      	cmp	r0, #0
 8019d24:	d03a      	beq.n	8019d9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8019d26:	4920      	ldr	r1, [pc, #128]	; (8019da8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019d28:	6809      	ldr	r1, [r1, #0]
 8019d2a:	2900      	cmp	r1, #0
 8019d2c:	d036      	beq.n	8019d9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8019d2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019d32:	2900      	cmp	r1, #0
 8019d34:	d032      	beq.n	8019d9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8019d36:	891a      	ldrh	r2, [r3, #8]
 8019d38:	8958      	ldrh	r0, [r3, #10]
 8019d3a:	4350      	muls	r0, r2
 8019d3c:	7c5a      	ldrb	r2, [r3, #17]
 8019d3e:	7cdb      	ldrb	r3, [r3, #19]
 8019d40:	0952      	lsrs	r2, r2, #5
 8019d42:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019d46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019d4a:	2b0b      	cmp	r3, #11
 8019d4c:	bf18      	it	ne
 8019d4e:	0040      	lslne	r0, r0, #1
 8019d50:	3003      	adds	r0, #3
 8019d52:	f020 0003 	bic.w	r0, r0, #3
 8019d56:	4408      	add	r0, r1
 8019d58:	4770      	bx	lr
 8019d5a:	4b14      	ldr	r3, [pc, #80]	; (8019dac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8019d5c:	881b      	ldrh	r3, [r3, #0]
 8019d5e:	4403      	add	r3, r0
 8019d60:	429a      	cmp	r2, r3
 8019d62:	da1a      	bge.n	8019d9a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8019d64:	4b12      	ldr	r3, [pc, #72]	; (8019db0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8019d66:	1a10      	subs	r0, r2, r0
 8019d68:	210e      	movs	r1, #14
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	fb01 3000 	mla	r0, r1, r0, r3
 8019d70:	7b03      	ldrb	r3, [r0, #12]
 8019d72:	f003 031f 	and.w	r3, r3, #31
 8019d76:	2b0b      	cmp	r3, #11
 8019d78:	d10b      	bne.n	8019d92 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019d7a:	8903      	ldrh	r3, [r0, #8]
 8019d7c:	8940      	ldrh	r0, [r0, #10]
 8019d7e:	4358      	muls	r0, r3
 8019d80:	4b09      	ldr	r3, [pc, #36]	; (8019da8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019d82:	3003      	adds	r0, #3
 8019d84:	6819      	ldr	r1, [r3, #0]
 8019d86:	f020 0303 	bic.w	r3, r0, #3
 8019d8a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019d8e:	4418      	add	r0, r3
 8019d90:	4770      	bx	lr
 8019d92:	2b0d      	cmp	r3, #13
 8019d94:	d101      	bne.n	8019d9a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8019d96:	300d      	adds	r0, #13
 8019d98:	4770      	bx	lr
 8019d9a:	2000      	movs	r0, #0
 8019d9c:	4770      	bx	lr
 8019d9e:	bf00      	nop
 8019da0:	2400af6c 	.word	0x2400af6c
 8019da4:	2400af74 	.word	0x2400af74
 8019da8:	2400af50 	.word	0x2400af50
 8019dac:	2400af70 	.word	0x2400af70
 8019db0:	2400af54 	.word	0x2400af54

08019db4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019db4:	4b17      	ldr	r3, [pc, #92]	; (8019e14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019db6:	b510      	push	{r4, lr}
 8019db8:	6819      	ldr	r1, [r3, #0]
 8019dba:	8803      	ldrh	r3, [r0, #0]
 8019dbc:	b1e9      	cbz	r1, 8019dfa <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8019dbe:	4a16      	ldr	r2, [pc, #88]	; (8019e18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8019dc0:	8812      	ldrh	r2, [r2, #0]
 8019dc2:	429a      	cmp	r2, r3
 8019dc4:	d90a      	bls.n	8019ddc <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8019dc6:	2214      	movs	r2, #20
 8019dc8:	fb02 1303 	mla	r3, r2, r3, r1
 8019dcc:	7c58      	ldrb	r0, [r3, #17]
 8019dce:	0942      	lsrs	r2, r0, #5
 8019dd0:	7cd8      	ldrb	r0, [r3, #19]
 8019dd2:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019dd6:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019dda:	bd10      	pop	{r4, pc}
 8019ddc:	490f      	ldr	r1, [pc, #60]	; (8019e1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8019dde:	8809      	ldrh	r1, [r1, #0]
 8019de0:	4411      	add	r1, r2
 8019de2:	428b      	cmp	r3, r1
 8019de4:	da09      	bge.n	8019dfa <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8019de6:	1a9b      	subs	r3, r3, r2
 8019de8:	4a0d      	ldr	r2, [pc, #52]	; (8019e20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019dea:	210e      	movs	r1, #14
 8019dec:	6812      	ldr	r2, [r2, #0]
 8019dee:	fb01 2303 	mla	r3, r1, r3, r2
 8019df2:	7b18      	ldrb	r0, [r3, #12]
 8019df4:	f000 001f 	and.w	r0, r0, #31
 8019df8:	e7ef      	b.n	8019dda <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019dfa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019dfe:	4293      	cmp	r3, r2
 8019e00:	d106      	bne.n	8019e10 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8019e02:	f7e9 fefd 	bl	8003c00 <_ZN8touchgfx3HAL3lcdEv>
 8019e06:	6803      	ldr	r3, [r0, #0]
 8019e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e0e:	4718      	bx	r3
 8019e10:	2000      	movs	r0, #0
 8019e12:	e7e2      	b.n	8019dda <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019e14:	2400af74 	.word	0x2400af74
 8019e18:	2400af6c 	.word	0x2400af6c
 8019e1c:	2400af70 	.word	0x2400af70
 8019e20:	2400af54 	.word	0x2400af54

08019e24 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8019e24:	2010      	movs	r0, #16
 8019e26:	4770      	bx	lr

08019e28 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8019e28:	2000      	movs	r0, #0
 8019e2a:	4770      	bx	lr

08019e2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019e2c:	2bff      	cmp	r3, #255	; 0xff
 8019e2e:	d050      	beq.n	8019ed2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8019e30:	2a0b      	cmp	r2, #11
 8019e32:	d04a      	beq.n	8019eca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019e34:	d80e      	bhi.n	8019e54 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8019e36:	2a03      	cmp	r2, #3
 8019e38:	d03f      	beq.n	8019eba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8019e3a:	d804      	bhi.n	8019e46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019e3c:	2a01      	cmp	r2, #1
 8019e3e:	d03e      	beq.n	8019ebe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019e40:	d93f      	bls.n	8019ec2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8019e42:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019e44:	4770      	bx	lr
 8019e46:	2a09      	cmp	r2, #9
 8019e48:	d03f      	beq.n	8019eca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019e4a:	d83c      	bhi.n	8019ec6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019e4c:	2a08      	cmp	r2, #8
 8019e4e:	d03a      	beq.n	8019ec6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019e50:	2000      	movs	r0, #0
 8019e52:	4770      	bx	lr
 8019e54:	2a2f      	cmp	r2, #47	; 0x2f
 8019e56:	d024      	beq.n	8019ea2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019e58:	d80d      	bhi.n	8019e76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8019e5a:	2a2d      	cmp	r2, #45	; 0x2d
 8019e5c:	d014      	beq.n	8019e88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8019e5e:	d826      	bhi.n	8019eae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019e60:	2a2c      	cmp	r2, #44	; 0x2c
 8019e62:	d1f5      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019e64:	684b      	ldr	r3, [r1, #4]
 8019e66:	781b      	ldrb	r3, [r3, #0]
 8019e68:	2b01      	cmp	r3, #1
 8019e6a:	d018      	beq.n	8019e9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019e6c:	d323      	bcc.n	8019eb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8019e6e:	2b02      	cmp	r3, #2
 8019e70:	d1ee      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019e72:	6880      	ldr	r0, [r0, #8]
 8019e74:	4770      	bx	lr
 8019e76:	2a31      	cmp	r2, #49	; 0x31
 8019e78:	d004      	beq.n	8019e84 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8019e7a:	d328      	bcc.n	8019ece <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019e7c:	2a32      	cmp	r2, #50	; 0x32
 8019e7e:	d026      	beq.n	8019ece <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019e80:	2a33      	cmp	r2, #51	; 0x33
 8019e82:	d1e5      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019e84:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8019e86:	4770      	bx	lr
 8019e88:	684b      	ldr	r3, [r1, #4]
 8019e8a:	781b      	ldrb	r3, [r3, #0]
 8019e8c:	2b01      	cmp	r3, #1
 8019e8e:	d004      	beq.n	8019e9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019e90:	d30b      	bcc.n	8019eaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019e92:	2b02      	cmp	r3, #2
 8019e94:	d1dc      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019e96:	6900      	ldr	r0, [r0, #16]
 8019e98:	4770      	bx	lr
 8019e9a:	6a00      	ldr	r0, [r0, #32]
 8019e9c:	4770      	bx	lr
 8019e9e:	6980      	ldr	r0, [r0, #24]
 8019ea0:	4770      	bx	lr
 8019ea2:	684b      	ldr	r3, [r1, #4]
 8019ea4:	781b      	ldrb	r3, [r3, #0]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d1d2      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019eaa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019eac:	4770      	bx	lr
 8019eae:	684b      	ldr	r3, [r1, #4]
 8019eb0:	781b      	ldrb	r3, [r3, #0]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d1cc      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019eb6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019eb8:	4770      	bx	lr
 8019eba:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019ebc:	4770      	bx	lr
 8019ebe:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019ec0:	4770      	bx	lr
 8019ec2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019ec4:	4770      	bx	lr
 8019ec6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8019ec8:	4770      	bx	lr
 8019eca:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8019ecc:	4770      	bx	lr
 8019ece:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8019ed0:	4770      	bx	lr
 8019ed2:	2a0b      	cmp	r2, #11
 8019ed4:	d049      	beq.n	8019f6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019ed6:	d80e      	bhi.n	8019ef6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8019ed8:	2a03      	cmp	r2, #3
 8019eda:	d040      	beq.n	8019f5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019edc:	d804      	bhi.n	8019ee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8019ede:	2a01      	cmp	r2, #1
 8019ee0:	d03f      	beq.n	8019f62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8019ee2:	d940      	bls.n	8019f66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8019ee4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8019ee6:	4770      	bx	lr
 8019ee8:	2a09      	cmp	r2, #9
 8019eea:	d03e      	beq.n	8019f6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019eec:	d801      	bhi.n	8019ef2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8019eee:	2a08      	cmp	r2, #8
 8019ef0:	d1ae      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019ef2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8019ef4:	4770      	bx	lr
 8019ef6:	2a2f      	cmp	r2, #47	; 0x2f
 8019ef8:	d024      	beq.n	8019f44 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8019efa:	d80d      	bhi.n	8019f18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019efc:	2a2d      	cmp	r2, #45	; 0x2d
 8019efe:	d014      	beq.n	8019f2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8019f00:	d826      	bhi.n	8019f50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8019f02:	2a2c      	cmp	r2, #44	; 0x2c
 8019f04:	d1a4      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019f06:	684b      	ldr	r3, [r1, #4]
 8019f08:	781b      	ldrb	r3, [r3, #0]
 8019f0a:	2b01      	cmp	r3, #1
 8019f0c:	d018      	beq.n	8019f40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8019f0e:	d324      	bcc.n	8019f5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019f10:	2b02      	cmp	r3, #2
 8019f12:	d19d      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019f14:	68c0      	ldr	r0, [r0, #12]
 8019f16:	4770      	bx	lr
 8019f18:	2a31      	cmp	r2, #49	; 0x31
 8019f1a:	d004      	beq.n	8019f26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8019f1c:	d327      	bcc.n	8019f6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019f1e:	2a32      	cmp	r2, #50	; 0x32
 8019f20:	d025      	beq.n	8019f6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019f22:	2a33      	cmp	r2, #51	; 0x33
 8019f24:	d194      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019f26:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8019f28:	4770      	bx	lr
 8019f2a:	684b      	ldr	r3, [r1, #4]
 8019f2c:	781b      	ldrb	r3, [r3, #0]
 8019f2e:	2b01      	cmp	r3, #1
 8019f30:	d004      	beq.n	8019f3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8019f32:	d30b      	bcc.n	8019f4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8019f34:	2b02      	cmp	r3, #2
 8019f36:	d18b      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019f38:	6940      	ldr	r0, [r0, #20]
 8019f3a:	4770      	bx	lr
 8019f3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019f3e:	4770      	bx	lr
 8019f40:	69c0      	ldr	r0, [r0, #28]
 8019f42:	4770      	bx	lr
 8019f44:	684b      	ldr	r3, [r1, #4]
 8019f46:	781b      	ldrb	r3, [r3, #0]
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d181      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019f4c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019f4e:	4770      	bx	lr
 8019f50:	684b      	ldr	r3, [r1, #4]
 8019f52:	781b      	ldrb	r3, [r3, #0]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	f47f af7b 	bne.w	8019e50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019f5a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019f5c:	4770      	bx	lr
 8019f5e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019f60:	4770      	bx	lr
 8019f62:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019f64:	4770      	bx	lr
 8019f66:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8019f68:	4770      	bx	lr
 8019f6a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8019f6c:	4770      	bx	lr
 8019f6e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8019f70:	4770      	bx	lr

08019f72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019f72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f76:	b087      	sub	sp, #28
 8019f78:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019f7a:	9205      	str	r2, [sp, #20]
 8019f7c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019f80:	9101      	str	r1, [sp, #4]
 8019f82:	9202      	str	r2, [sp, #8]
 8019f84:	6841      	ldr	r1, [r0, #4]
 8019f86:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8019f8a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019f8e:	fb01 2404 	mla	r4, r1, r4, r2
 8019f92:	6802      	ldr	r2, [r0, #0]
 8019f94:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019f98:	f8de 2000 	ldr.w	r2, [lr]
 8019f9c:	9203      	str	r2, [sp, #12]
 8019f9e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019fa2:	3204      	adds	r2, #4
 8019fa4:	9204      	str	r2, [sp, #16]
 8019fa6:	9a02      	ldr	r2, [sp, #8]
 8019fa8:	43d6      	mvns	r6, r2
 8019faa:	b2f6      	uxtb	r6, r6
 8019fac:	9a01      	ldr	r2, [sp, #4]
 8019fae:	2a00      	cmp	r2, #0
 8019fb0:	dc03      	bgt.n	8019fba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019fb2:	9a05      	ldr	r2, [sp, #20]
 8019fb4:	2a00      	cmp	r2, #0
 8019fb6:	f340 8129 	ble.w	801a20c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019fba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019fbc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8019fc0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019fc6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019fca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	dd0e      	ble.n	8019ff0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019fd2:	1408      	asrs	r0, r1, #16
 8019fd4:	d405      	bmi.n	8019fe2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019fd6:	4560      	cmp	r0, ip
 8019fd8:	da03      	bge.n	8019fe2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019fda:	1410      	asrs	r0, r2, #16
 8019fdc:	d401      	bmi.n	8019fe2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019fde:	42b8      	cmp	r0, r7
 8019fe0:	db07      	blt.n	8019ff2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019fe2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019fe4:	3b01      	subs	r3, #1
 8019fe6:	3402      	adds	r4, #2
 8019fe8:	4401      	add	r1, r0
 8019fea:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019fec:	4402      	add	r2, r0
 8019fee:	e7ee      	b.n	8019fce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019ff0:	d071      	beq.n	801a0d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019ff2:	1e58      	subs	r0, r3, #1
 8019ff4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019ff6:	fb05 1500 	mla	r5, r5, r0, r1
 8019ffa:	142d      	asrs	r5, r5, #16
 8019ffc:	d45f      	bmi.n	801a0be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019ffe:	4565      	cmp	r5, ip
 801a000:	da5d      	bge.n	801a0be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a002:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a004:	fb05 2000 	mla	r0, r5, r0, r2
 801a008:	1400      	asrs	r0, r0, #16
 801a00a:	d458      	bmi.n	801a0be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a00c:	42b8      	cmp	r0, r7
 801a00e:	da56      	bge.n	801a0be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a010:	4699      	mov	r9, r3
 801a012:	46a2      	mov	sl, r4
 801a014:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801a018:	f1b9 0f00 	cmp.w	r9, #0
 801a01c:	dd57      	ble.n	801a0ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801a01e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a022:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a026:	9803      	ldr	r0, [sp, #12]
 801a028:	140d      	asrs	r5, r1, #16
 801a02a:	f109 39ff 	add.w	r9, r9, #4294967295
 801a02e:	fb07 000c 	mla	r0, r7, ip, r0
 801a032:	5d40      	ldrb	r0, [r0, r5]
 801a034:	9d04      	ldr	r5, [sp, #16]
 801a036:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a03a:	f8ba 5000 	ldrh.w	r5, [sl]
 801a03e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a042:	122f      	asrs	r7, r5, #8
 801a044:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801a048:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a04c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a050:	00ed      	lsls	r5, r5, #3
 801a052:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a056:	fb17 f706 	smulbb	r7, r7, r6
 801a05a:	b2ed      	uxtb	r5, r5
 801a05c:	fb18 f806 	smulbb	r8, r8, r6
 801a060:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801a064:	10c7      	asrs	r7, r0, #3
 801a066:	fb15 f506 	smulbb	r5, r5, r6
 801a06a:	00c0      	lsls	r0, r0, #3
 801a06c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a070:	fa1f fc8c 	uxth.w	ip, ip
 801a074:	b2c0      	uxtb	r0, r0
 801a076:	fb07 870b 	mla	r7, r7, fp, r8
 801a07a:	fb00 500b 	mla	r0, r0, fp, r5
 801a07e:	f10c 0501 	add.w	r5, ip, #1
 801a082:	b2bf      	uxth	r7, r7
 801a084:	b280      	uxth	r0, r0
 801a086:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a08a:	f107 0801 	add.w	r8, r7, #1
 801a08e:	1c45      	adds	r5, r0, #1
 801a090:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801a094:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a098:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a09c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a09e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a0a2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a0a6:	4401      	add	r1, r0
 801a0a8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a0ac:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a0ae:	ea45 0c0c 	orr.w	ip, r5, ip
 801a0b2:	4402      	add	r2, r0
 801a0b4:	ea4c 0c08 	orr.w	ip, ip, r8
 801a0b8:	f82a cb02 	strh.w	ip, [sl], #2
 801a0bc:	e7ac      	b.n	801a018 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a0be:	f04f 0800 	mov.w	r8, #0
 801a0c2:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801a0c6:	eb03 0008 	add.w	r0, r3, r8
 801a0ca:	2800      	cmp	r0, #0
 801a0cc:	dc41      	bgt.n	801a152 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a0ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a0d2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a0d6:	9b01      	ldr	r3, [sp, #4]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	f340 8097 	ble.w	801a20c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a0de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a0e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a0e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a0e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a0ec:	eef0 6a62 	vmov.f32	s13, s5
 801a0f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a0f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a0f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a0fc:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a100:	eef0 6a43 	vmov.f32	s13, s6
 801a104:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a108:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a10c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a110:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a114:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a118:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a11c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a120:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a124:	ee12 2a90 	vmov	r2, s5
 801a128:	eef0 2a47 	vmov.f32	s5, s14
 801a12c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a130:	ee13 2a10 	vmov	r2, s6
 801a134:	9313      	str	r3, [sp, #76]	; 0x4c
 801a136:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a138:	eeb0 3a67 	vmov.f32	s6, s15
 801a13c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a140:	9314      	str	r3, [sp, #80]	; 0x50
 801a142:	9b01      	ldr	r3, [sp, #4]
 801a144:	9a05      	ldr	r2, [sp, #20]
 801a146:	3b01      	subs	r3, #1
 801a148:	9301      	str	r3, [sp, #4]
 801a14a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a14c:	bf08      	it	eq
 801a14e:	4613      	moveq	r3, r2
 801a150:	e72c      	b.n	8019fac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a152:	140f      	asrs	r7, r1, #16
 801a154:	d453      	bmi.n	801a1fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a156:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a15a:	42bd      	cmp	r5, r7
 801a15c:	dd4f      	ble.n	801a1fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a15e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a162:	d44c      	bmi.n	801a1fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a164:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a168:	4560      	cmp	r0, ip
 801a16a:	dd48      	ble.n	801a1fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a16c:	9803      	ldr	r0, [sp, #12]
 801a16e:	b22d      	sxth	r5, r5
 801a170:	fb0c 0505 	mla	r5, ip, r5, r0
 801a174:	5de8      	ldrb	r0, [r5, r7]
 801a176:	9d04      	ldr	r5, [sp, #16]
 801a178:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a17c:	f06f 0501 	mvn.w	r5, #1
 801a180:	fb05 fb08 	mul.w	fp, r5, r8
 801a184:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a188:	f834 500b 	ldrh.w	r5, [r4, fp]
 801a18c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a190:	122f      	asrs	r7, r5, #8
 801a192:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a196:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a19a:	00ed      	lsls	r5, r5, #3
 801a19c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a1a0:	fb17 f706 	smulbb	r7, r7, r6
 801a1a4:	b2ed      	uxtb	r5, r5
 801a1a6:	fb19 f906 	smulbb	r9, r9, r6
 801a1aa:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801a1ae:	10c7      	asrs	r7, r0, #3
 801a1b0:	fb15 f506 	smulbb	r5, r5, r6
 801a1b4:	00c0      	lsls	r0, r0, #3
 801a1b6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a1ba:	fa1f fc8c 	uxth.w	ip, ip
 801a1be:	b2c0      	uxtb	r0, r0
 801a1c0:	fb07 970a 	mla	r7, r7, sl, r9
 801a1c4:	fb00 500a 	mla	r0, r0, sl, r5
 801a1c8:	f10c 0501 	add.w	r5, ip, #1
 801a1cc:	b2bf      	uxth	r7, r7
 801a1ce:	b280      	uxth	r0, r0
 801a1d0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a1d4:	f107 0901 	add.w	r9, r7, #1
 801a1d8:	1c45      	adds	r5, r0, #1
 801a1da:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801a1de:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a1e2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a1e6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a1ea:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a1ee:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a1f2:	ea45 0c0c 	orr.w	ip, r5, ip
 801a1f6:	ea4c 0c09 	orr.w	ip, ip, r9
 801a1fa:	f824 c00b 	strh.w	ip, [r4, fp]
 801a1fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a200:	f108 38ff 	add.w	r8, r8, #4294967295
 801a204:	4401      	add	r1, r0
 801a206:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a208:	4402      	add	r2, r0
 801a20a:	e75c      	b.n	801a0c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a20c:	b007      	add	sp, #28
 801a20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a212 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a216:	b085      	sub	sp, #20
 801a218:	4693      	mov	fp, r2
 801a21a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a21e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a220:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a222:	6870      	ldr	r0, [r6, #4]
 801a224:	9100      	str	r1, [sp, #0]
 801a226:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a22a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801a22e:	fb00 2404 	mla	r4, r0, r4, r2
 801a232:	6832      	ldr	r2, [r6, #0]
 801a234:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a238:	682a      	ldr	r2, [r5, #0]
 801a23a:	9201      	str	r2, [sp, #4]
 801a23c:	686a      	ldr	r2, [r5, #4]
 801a23e:	3204      	adds	r2, #4
 801a240:	9202      	str	r2, [sp, #8]
 801a242:	9a00      	ldr	r2, [sp, #0]
 801a244:	2a00      	cmp	r2, #0
 801a246:	dc03      	bgt.n	801a250 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a248:	f1bb 0f00 	cmp.w	fp, #0
 801a24c:	f340 80a0 	ble.w	801a390 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801a250:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a252:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a256:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a25a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a25c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a260:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a264:	2b00      	cmp	r3, #0
 801a266:	dd0c      	ble.n	801a282 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a268:	1406      	asrs	r6, r0, #16
 801a26a:	d405      	bmi.n	801a278 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a26c:	454e      	cmp	r6, r9
 801a26e:	da03      	bge.n	801a278 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a270:	1416      	asrs	r6, r2, #16
 801a272:	d401      	bmi.n	801a278 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a274:	4546      	cmp	r6, r8
 801a276:	db05      	blt.n	801a284 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a278:	4470      	add	r0, lr
 801a27a:	4462      	add	r2, ip
 801a27c:	3b01      	subs	r3, #1
 801a27e:	3402      	adds	r4, #2
 801a280:	e7f0      	b.n	801a264 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a282:	d00f      	beq.n	801a2a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a284:	1e5e      	subs	r6, r3, #1
 801a286:	fb0e 0706 	mla	r7, lr, r6, r0
 801a28a:	143f      	asrs	r7, r7, #16
 801a28c:	d541      	bpl.n	801a312 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801a28e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801a292:	4698      	mov	r8, r3
 801a294:	9603      	str	r6, [sp, #12]
 801a296:	f1b8 0f00 	cmp.w	r8, #0
 801a29a:	dc59      	bgt.n	801a350 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a29c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a2a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a2a4:	9b00      	ldr	r3, [sp, #0]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	dd72      	ble.n	801a390 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801a2aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a2ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a2b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a2b4:	eeb0 6a62 	vmov.f32	s12, s5
 801a2b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a2bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a2c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2c4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a2c8:	eeb0 6a43 	vmov.f32	s12, s6
 801a2cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2d0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a2d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a2d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a2dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a2e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a2e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a2e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a2ec:	ee12 2a90 	vmov	r2, s5
 801a2f0:	eef0 2a47 	vmov.f32	s5, s14
 801a2f4:	fb92 fef3 	sdiv	lr, r2, r3
 801a2f8:	ee13 2a10 	vmov	r2, s6
 801a2fc:	eeb0 3a67 	vmov.f32	s6, s15
 801a300:	fb92 fcf3 	sdiv	ip, r2, r3
 801a304:	9b00      	ldr	r3, [sp, #0]
 801a306:	3b01      	subs	r3, #1
 801a308:	9300      	str	r3, [sp, #0]
 801a30a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a30c:	bf08      	it	eq
 801a30e:	465b      	moveq	r3, fp
 801a310:	e797      	b.n	801a242 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a312:	454f      	cmp	r7, r9
 801a314:	dabb      	bge.n	801a28e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a316:	fb0c 2606 	mla	r6, ip, r6, r2
 801a31a:	1436      	asrs	r6, r6, #16
 801a31c:	d4b7      	bmi.n	801a28e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a31e:	4546      	cmp	r6, r8
 801a320:	dab5      	bge.n	801a28e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a322:	461e      	mov	r6, r3
 801a324:	46a0      	mov	r8, r4
 801a326:	2e00      	cmp	r6, #0
 801a328:	ddb8      	ble.n	801a29c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a32a:	1417      	asrs	r7, r2, #16
 801a32c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801a330:	9901      	ldr	r1, [sp, #4]
 801a332:	ea4f 4920 	mov.w	r9, r0, asr #16
 801a336:	4462      	add	r2, ip
 801a338:	4470      	add	r0, lr
 801a33a:	fb0a 1707 	mla	r7, sl, r7, r1
 801a33e:	9902      	ldr	r1, [sp, #8]
 801a340:	3e01      	subs	r6, #1
 801a342:	f817 7009 	ldrb.w	r7, [r7, r9]
 801a346:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801a34a:	f828 7b02 	strh.w	r7, [r8], #2
 801a34e:	e7ea      	b.n	801a326 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801a350:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a354:	d417      	bmi.n	801a386 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a356:	68ae      	ldr	r6, [r5, #8]
 801a358:	454e      	cmp	r6, r9
 801a35a:	dd14      	ble.n	801a386 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a35c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a360:	d411      	bmi.n	801a386 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a362:	68ef      	ldr	r7, [r5, #12]
 801a364:	4557      	cmp	r7, sl
 801a366:	dd0e      	ble.n	801a386 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a368:	9f01      	ldr	r7, [sp, #4]
 801a36a:	b236      	sxth	r6, r6
 801a36c:	f06f 0101 	mvn.w	r1, #1
 801a370:	fb0a 7606 	mla	r6, sl, r6, r7
 801a374:	9f02      	ldr	r7, [sp, #8]
 801a376:	f816 6009 	ldrb.w	r6, [r6, r9]
 801a37a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801a37e:	fb01 f608 	mul.w	r6, r1, r8
 801a382:	9903      	ldr	r1, [sp, #12]
 801a384:	538f      	strh	r7, [r1, r6]
 801a386:	4470      	add	r0, lr
 801a388:	4462      	add	r2, ip
 801a38a:	f108 38ff 	add.w	r8, r8, #4294967295
 801a38e:	e782      	b.n	801a296 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a390:	b005      	add	sp, #20
 801a392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a396 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a396:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a39a:	b087      	sub	sp, #28
 801a39c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a39e:	9205      	str	r2, [sp, #20]
 801a3a0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a3a4:	9102      	str	r1, [sp, #8]
 801a3a6:	9203      	str	r2, [sp, #12]
 801a3a8:	6861      	ldr	r1, [r4, #4]
 801a3aa:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a3ae:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801a3b2:	fb01 2000 	mla	r0, r1, r0, r2
 801a3b6:	6822      	ldr	r2, [r4, #0]
 801a3b8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a3bc:	9200      	str	r2, [sp, #0]
 801a3be:	f8dc 2000 	ldr.w	r2, [ip]
 801a3c2:	9204      	str	r2, [sp, #16]
 801a3c4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a3c8:	3204      	adds	r2, #4
 801a3ca:	9201      	str	r2, [sp, #4]
 801a3cc:	9a03      	ldr	r2, [sp, #12]
 801a3ce:	43d5      	mvns	r5, r2
 801a3d0:	b2ed      	uxtb	r5, r5
 801a3d2:	9a02      	ldr	r2, [sp, #8]
 801a3d4:	2a00      	cmp	r2, #0
 801a3d6:	dc03      	bgt.n	801a3e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a3d8:	9a05      	ldr	r2, [sp, #20]
 801a3da:	2a00      	cmp	r2, #0
 801a3dc:	f340 812c 	ble.w	801a638 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a3e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a3e2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a3e6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a3ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a3ec:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a3f0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	dd10      	ble.n	801a41a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a3f8:	140c      	asrs	r4, r1, #16
 801a3fa:	d405      	bmi.n	801a408 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a3fc:	4574      	cmp	r4, lr
 801a3fe:	da03      	bge.n	801a408 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a400:	1414      	asrs	r4, r2, #16
 801a402:	d401      	bmi.n	801a408 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a404:	42bc      	cmp	r4, r7
 801a406:	db09      	blt.n	801a41c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a408:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a40a:	3b01      	subs	r3, #1
 801a40c:	9800      	ldr	r0, [sp, #0]
 801a40e:	4421      	add	r1, r4
 801a410:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a412:	3002      	adds	r0, #2
 801a414:	4422      	add	r2, r4
 801a416:	9000      	str	r0, [sp, #0]
 801a418:	e7ec      	b.n	801a3f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a41a:	d071      	beq.n	801a500 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a41c:	1e5c      	subs	r4, r3, #1
 801a41e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a420:	fb06 1604 	mla	r6, r6, r4, r1
 801a424:	1436      	asrs	r6, r6, #16
 801a426:	d45d      	bmi.n	801a4e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a428:	4576      	cmp	r6, lr
 801a42a:	da5b      	bge.n	801a4e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a42c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a42e:	fb06 2404 	mla	r4, r6, r4, r2
 801a432:	1424      	asrs	r4, r4, #16
 801a434:	d456      	bmi.n	801a4e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a436:	42bc      	cmp	r4, r7
 801a438:	da54      	bge.n	801a4e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a43a:	4698      	mov	r8, r3
 801a43c:	f8dd 9000 	ldr.w	r9, [sp]
 801a440:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801a444:	f1b8 0f00 	cmp.w	r8, #0
 801a448:	dd54      	ble.n	801a4f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a44a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a44e:	1414      	asrs	r4, r2, #16
 801a450:	9804      	ldr	r0, [sp, #16]
 801a452:	140e      	asrs	r6, r1, #16
 801a454:	f108 38ff 	add.w	r8, r8, #4294967295
 801a458:	fb07 0404 	mla	r4, r7, r4, r0
 801a45c:	9801      	ldr	r0, [sp, #4]
 801a45e:	f814 e006 	ldrb.w	lr, [r4, r6]
 801a462:	f8b9 4000 	ldrh.w	r4, [r9]
 801a466:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a46a:	1227      	asrs	r7, r4, #8
 801a46c:	eb00 0b0e 	add.w	fp, r0, lr
 801a470:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801a474:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a478:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a47a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a47e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a482:	4401      	add	r1, r0
 801a484:	fb16 f60a 	smulbb	r6, r6, sl
 801a488:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a48a:	fb1b fb0a 	smulbb	fp, fp, sl
 801a48e:	fb07 6705 	mla	r7, r7, r5, r6
 801a492:	10e6      	asrs	r6, r4, #3
 801a494:	00e4      	lsls	r4, r4, #3
 801a496:	4402      	add	r2, r0
 801a498:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a49c:	b2bf      	uxth	r7, r7
 801a49e:	b2e4      	uxtb	r4, r4
 801a4a0:	fb06 b605 	mla	r6, r6, r5, fp
 801a4a4:	fb14 f405 	smulbb	r4, r4, r5
 801a4a8:	b2b6      	uxth	r6, r6
 801a4aa:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801a4ae:	1c7c      	adds	r4, r7, #1
 801a4b0:	f106 0b01 	add.w	fp, r6, #1
 801a4b4:	fa1f fe8e 	uxth.w	lr, lr
 801a4b8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a4bc:	f10e 0401 	add.w	r4, lr, #1
 801a4c0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a4c4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a4c8:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801a4cc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a4d0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a4d4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a4d8:	4327      	orrs	r7, r4
 801a4da:	ea47 070b 	orr.w	r7, r7, fp
 801a4de:	f829 7b02 	strh.w	r7, [r9], #2
 801a4e2:	e7af      	b.n	801a444 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a4e4:	f04f 0e00 	mov.w	lr, #0
 801a4e8:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801a4ec:	eb03 040e 	add.w	r4, r3, lr
 801a4f0:	2c00      	cmp	r4, #0
 801a4f2:	dc43      	bgt.n	801a57c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a4f4:	9a00      	ldr	r2, [sp, #0]
 801a4f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a4fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a4fe:	9300      	str	r3, [sp, #0]
 801a500:	9b02      	ldr	r3, [sp, #8]
 801a502:	2b00      	cmp	r3, #0
 801a504:	f340 8098 	ble.w	801a638 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a50c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a50e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a512:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a516:	eef0 6a62 	vmov.f32	s13, s5
 801a51a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a51e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a522:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a526:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a52a:	eef0 6a43 	vmov.f32	s13, s6
 801a52e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a532:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a536:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a53a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a53e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a542:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a546:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a54a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a54e:	ee12 2a90 	vmov	r2, s5
 801a552:	eef0 2a47 	vmov.f32	s5, s14
 801a556:	fb92 f3f3 	sdiv	r3, r2, r3
 801a55a:	ee13 2a10 	vmov	r2, s6
 801a55e:	9313      	str	r3, [sp, #76]	; 0x4c
 801a560:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a562:	eeb0 3a67 	vmov.f32	s6, s15
 801a566:	fb92 f3f3 	sdiv	r3, r2, r3
 801a56a:	9314      	str	r3, [sp, #80]	; 0x50
 801a56c:	9b02      	ldr	r3, [sp, #8]
 801a56e:	9a05      	ldr	r2, [sp, #20]
 801a570:	3b01      	subs	r3, #1
 801a572:	9302      	str	r3, [sp, #8]
 801a574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a576:	bf08      	it	eq
 801a578:	4613      	moveq	r3, r2
 801a57a:	e72a      	b.n	801a3d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a57c:	140f      	asrs	r7, r1, #16
 801a57e:	d454      	bmi.n	801a62a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a580:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a584:	42be      	cmp	r6, r7
 801a586:	dd50      	ble.n	801a62a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a588:	ea5f 4822 	movs.w	r8, r2, asr #16
 801a58c:	d44d      	bmi.n	801a62a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a58e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801a592:	4544      	cmp	r4, r8
 801a594:	dd49      	ble.n	801a62a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a596:	9c04      	ldr	r4, [sp, #16]
 801a598:	b236      	sxth	r6, r6
 801a59a:	f06f 0001 	mvn.w	r0, #1
 801a59e:	fb08 4606 	mla	r6, r8, r6, r4
 801a5a2:	9c01      	ldr	r4, [sp, #4]
 801a5a4:	fb00 fa0e 	mul.w	sl, r0, lr
 801a5a8:	9800      	ldr	r0, [sp, #0]
 801a5aa:	f816 8007 	ldrb.w	r8, [r6, r7]
 801a5ae:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a5b2:	eb04 0b08 	add.w	fp, r4, r8
 801a5b6:	f830 400a 	ldrh.w	r4, [r0, sl]
 801a5ba:	9801      	ldr	r0, [sp, #4]
 801a5bc:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a5c0:	1227      	asrs	r7, r4, #8
 801a5c2:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a5c6:	fb16 f609 	smulbb	r6, r6, r9
 801a5ca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a5ce:	f810 8008 	ldrb.w	r8, [r0, r8]
 801a5d2:	fb1b fb09 	smulbb	fp, fp, r9
 801a5d6:	fb07 6705 	mla	r7, r7, r5, r6
 801a5da:	10e6      	asrs	r6, r4, #3
 801a5dc:	00e4      	lsls	r4, r4, #3
 801a5de:	9800      	ldr	r0, [sp, #0]
 801a5e0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a5e4:	b2bf      	uxth	r7, r7
 801a5e6:	b2e4      	uxtb	r4, r4
 801a5e8:	fb06 b605 	mla	r6, r6, r5, fp
 801a5ec:	fb14 f405 	smulbb	r4, r4, r5
 801a5f0:	b2b6      	uxth	r6, r6
 801a5f2:	fb08 4809 	mla	r8, r8, r9, r4
 801a5f6:	1c7c      	adds	r4, r7, #1
 801a5f8:	f106 0b01 	add.w	fp, r6, #1
 801a5fc:	fa1f f888 	uxth.w	r8, r8
 801a600:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a604:	f108 0401 	add.w	r4, r8, #1
 801a608:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a60c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a610:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801a614:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a618:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a61c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a620:	4327      	orrs	r7, r4
 801a622:	ea47 070b 	orr.w	r7, r7, fp
 801a626:	f820 700a 	strh.w	r7, [r0, sl]
 801a62a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a62c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a630:	4401      	add	r1, r0
 801a632:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a634:	4402      	add	r2, r0
 801a636:	e759      	b.n	801a4ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a638:	b007      	add	sp, #28
 801a63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a640 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a644:	b085      	sub	sp, #20
 801a646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a64a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a64c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a64e:	9203      	str	r2, [sp, #12]
 801a650:	6870      	ldr	r0, [r6, #4]
 801a652:	686f      	ldr	r7, [r5, #4]
 801a654:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801a658:	3704      	adds	r7, #4
 801a65a:	9101      	str	r1, [sp, #4]
 801a65c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a660:	fb00 2404 	mla	r4, r0, r4, r2
 801a664:	6832      	ldr	r2, [r6, #0]
 801a666:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a66a:	682a      	ldr	r2, [r5, #0]
 801a66c:	9202      	str	r2, [sp, #8]
 801a66e:	9a01      	ldr	r2, [sp, #4]
 801a670:	2a00      	cmp	r2, #0
 801a672:	dc03      	bgt.n	801a67c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a674:	9a03      	ldr	r2, [sp, #12]
 801a676:	2a00      	cmp	r2, #0
 801a678:	f340 80cc 	ble.w	801a814 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a67c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a67e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a682:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a686:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a688:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a68c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a690:	2b00      	cmp	r3, #0
 801a692:	dd0d      	ble.n	801a6b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a694:	1406      	asrs	r6, r0, #16
 801a696:	d405      	bmi.n	801a6a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a698:	454e      	cmp	r6, r9
 801a69a:	da03      	bge.n	801a6a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a69c:	1416      	asrs	r6, r2, #16
 801a69e:	d401      	bmi.n	801a6a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a6a0:	4546      	cmp	r6, r8
 801a6a2:	db06      	blt.n	801a6b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a6a4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a6a6:	4460      	add	r0, ip
 801a6a8:	3b01      	subs	r3, #1
 801a6aa:	3402      	adds	r4, #2
 801a6ac:	4432      	add	r2, r6
 801a6ae:	e7ef      	b.n	801a690 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a6b0:	d00f      	beq.n	801a6d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a6b2:	1e5e      	subs	r6, r3, #1
 801a6b4:	fb0c 0e06 	mla	lr, ip, r6, r0
 801a6b8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801a6bc:	d543      	bpl.n	801a746 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801a6be:	4698      	mov	r8, r3
 801a6c0:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801a6c4:	f1b8 0f00 	cmp.w	r8, #0
 801a6c8:	dc71      	bgt.n	801a7ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801a6ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a6ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a6d2:	9b01      	ldr	r3, [sp, #4]
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	f340 809d 	ble.w	801a814 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a6da:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a6de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a6e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a6e4:	eeb0 6a62 	vmov.f32	s12, s5
 801a6e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a6ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a6f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a6f4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a6f8:	eeb0 6a43 	vmov.f32	s12, s6
 801a6fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a700:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a704:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a708:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a70c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a710:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a714:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a718:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a71c:	ee12 2a90 	vmov	r2, s5
 801a720:	eef0 2a47 	vmov.f32	s5, s14
 801a724:	fb92 fcf3 	sdiv	ip, r2, r3
 801a728:	ee13 2a10 	vmov	r2, s6
 801a72c:	eeb0 3a67 	vmov.f32	s6, s15
 801a730:	fb92 f3f3 	sdiv	r3, r2, r3
 801a734:	9312      	str	r3, [sp, #72]	; 0x48
 801a736:	9b01      	ldr	r3, [sp, #4]
 801a738:	9a03      	ldr	r2, [sp, #12]
 801a73a:	3b01      	subs	r3, #1
 801a73c:	9301      	str	r3, [sp, #4]
 801a73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a740:	bf08      	it	eq
 801a742:	4613      	moveq	r3, r2
 801a744:	e793      	b.n	801a66e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a746:	45ce      	cmp	lr, r9
 801a748:	dab9      	bge.n	801a6be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a74a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a74c:	fb01 2606 	mla	r6, r1, r6, r2
 801a750:	1436      	asrs	r6, r6, #16
 801a752:	d4b4      	bmi.n	801a6be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a754:	4546      	cmp	r6, r8
 801a756:	dab2      	bge.n	801a6be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a758:	4698      	mov	r8, r3
 801a75a:	46a2      	mov	sl, r4
 801a75c:	f1b8 0f00 	cmp.w	r8, #0
 801a760:	ddb3      	ble.n	801a6ca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a762:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a766:	1416      	asrs	r6, r2, #16
 801a768:	9902      	ldr	r1, [sp, #8]
 801a76a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801a76e:	f108 38ff 	add.w	r8, r8, #4294967295
 801a772:	4460      	add	r0, ip
 801a774:	fb09 1606 	mla	r6, r9, r6, r1
 801a778:	4928      	ldr	r1, [pc, #160]	; (801a81c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801a77a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801a77e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a782:	eb07 0b0e 	add.w	fp, r7, lr
 801a786:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801a78a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a78e:	00f6      	lsls	r6, r6, #3
 801a790:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801a794:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a796:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a79a:	440a      	add	r2, r1
 801a79c:	ea49 0606 	orr.w	r6, r9, r6
 801a7a0:	f817 900e 	ldrb.w	r9, [r7, lr]
 801a7a4:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801a7a8:	f82a 6b02 	strh.w	r6, [sl], #2
 801a7ac:	e7d6      	b.n	801a75c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a7ae:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a7b2:	d429      	bmi.n	801a808 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a7b4:	68ae      	ldr	r6, [r5, #8]
 801a7b6:	454e      	cmp	r6, r9
 801a7b8:	dd26      	ble.n	801a808 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a7ba:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a7be:	d423      	bmi.n	801a808 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a7c0:	68e9      	ldr	r1, [r5, #12]
 801a7c2:	4559      	cmp	r1, fp
 801a7c4:	dd20      	ble.n	801a808 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a7c6:	fa0f fe86 	sxth.w	lr, r6
 801a7ca:	9902      	ldr	r1, [sp, #8]
 801a7cc:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801a7d0:	f06f 0101 	mvn.w	r1, #1
 801a7d4:	f81e e009 	ldrb.w	lr, [lr, r9]
 801a7d8:	fb01 f908 	mul.w	r9, r1, r8
 801a7dc:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801a7e0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a7e4:	eb07 060e 	add.w	r6, r7, lr
 801a7e8:	f896 b002 	ldrb.w	fp, [r6, #2]
 801a7ec:	7876      	ldrb	r6, [r6, #1]
 801a7ee:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801a7f2:	00f6      	lsls	r6, r6, #3
 801a7f4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a7f8:	ea4b 0606 	orr.w	r6, fp, r6
 801a7fc:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801a800:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801a804:	f82a 6009 	strh.w	r6, [sl, r9]
 801a808:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a80a:	4460      	add	r0, ip
 801a80c:	f108 38ff 	add.w	r8, r8, #4294967295
 801a810:	440a      	add	r2, r1
 801a812:	e757      	b.n	801a6c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a814:	b005      	add	sp, #20
 801a816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a81a:	bf00      	nop
 801a81c:	fffff800 	.word	0xfffff800

0801a820 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a824:	b087      	sub	sp, #28
 801a826:	468b      	mov	fp, r1
 801a828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a82c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a82e:	9204      	str	r2, [sp, #16]
 801a830:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a834:	6841      	ldr	r1, [r0, #4]
 801a836:	9205      	str	r2, [sp, #20]
 801a838:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a83c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a840:	fb01 2404 	mla	r4, r1, r4, r2
 801a844:	6802      	ldr	r2, [r0, #0]
 801a846:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a84a:	f8dc 2000 	ldr.w	r2, [ip]
 801a84e:	9201      	str	r2, [sp, #4]
 801a850:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a854:	3204      	adds	r2, #4
 801a856:	9202      	str	r2, [sp, #8]
 801a858:	f1bb 0f00 	cmp.w	fp, #0
 801a85c:	dc03      	bgt.n	801a866 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801a85e:	9a04      	ldr	r2, [sp, #16]
 801a860:	2a00      	cmp	r2, #0
 801a862:	f340 8138 	ble.w	801aad6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a866:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a868:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a86c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a870:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a872:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801a876:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	dd0e      	ble.n	801a89c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a87e:	1402      	asrs	r2, r0, #16
 801a880:	d405      	bmi.n	801a88e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a882:	42ba      	cmp	r2, r7
 801a884:	da03      	bge.n	801a88e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a886:	140a      	asrs	r2, r1, #16
 801a888:	d401      	bmi.n	801a88e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a88a:	42b2      	cmp	r2, r6
 801a88c:	db07      	blt.n	801a89e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a88e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a890:	3b01      	subs	r3, #1
 801a892:	3402      	adds	r4, #2
 801a894:	4410      	add	r0, r2
 801a896:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a898:	4411      	add	r1, r2
 801a89a:	e7ee      	b.n	801a87a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a89c:	d019      	beq.n	801a8d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a89e:	1e5a      	subs	r2, r3, #1
 801a8a0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a8a2:	fb05 0502 	mla	r5, r5, r2, r0
 801a8a6:	142d      	asrs	r5, r5, #16
 801a8a8:	d409      	bmi.n	801a8be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a8aa:	42bd      	cmp	r5, r7
 801a8ac:	da07      	bge.n	801a8be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a8ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a8b0:	fb05 1202 	mla	r2, r5, r2, r1
 801a8b4:	1412      	asrs	r2, r2, #16
 801a8b6:	d402      	bmi.n	801a8be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a8b8:	42b2      	cmp	r2, r6
 801a8ba:	f2c0 80ac 	blt.w	801aa16 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801a8be:	f04f 0e00 	mov.w	lr, #0
 801a8c2:	eb03 020e 	add.w	r2, r3, lr
 801a8c6:	2a00      	cmp	r2, #0
 801a8c8:	dc3e      	bgt.n	801a948 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a8ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a8ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a8d2:	f1bb 0f00 	cmp.w	fp, #0
 801a8d6:	f340 80fe 	ble.w	801aad6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a8da:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a8de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a8e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a8e4:	f1bb 0b01 	subs.w	fp, fp, #1
 801a8e8:	eeb0 6a62 	vmov.f32	s12, s5
 801a8ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a8f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a8f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8f8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a8fc:	eeb0 6a43 	vmov.f32	s12, s6
 801a900:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a904:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a908:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a90c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a910:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a914:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a918:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a91c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a920:	ee12 2a90 	vmov	r2, s5
 801a924:	eef0 2a47 	vmov.f32	s5, s14
 801a928:	fb92 f3f3 	sdiv	r3, r2, r3
 801a92c:	ee13 2a10 	vmov	r2, s6
 801a930:	9313      	str	r3, [sp, #76]	; 0x4c
 801a932:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a934:	eeb0 3a67 	vmov.f32	s6, s15
 801a938:	fb92 f3f3 	sdiv	r3, r2, r3
 801a93c:	9a04      	ldr	r2, [sp, #16]
 801a93e:	9314      	str	r3, [sp, #80]	; 0x50
 801a940:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a942:	bf08      	it	eq
 801a944:	4613      	moveq	r3, r2
 801a946:	e787      	b.n	801a858 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a948:	1406      	asrs	r6, r0, #16
 801a94a:	d45d      	bmi.n	801aa08 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a94c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801a950:	42b5      	cmp	r5, r6
 801a952:	dd59      	ble.n	801aa08 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a954:	140f      	asrs	r7, r1, #16
 801a956:	d457      	bmi.n	801aa08 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a958:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a95c:	42ba      	cmp	r2, r7
 801a95e:	dd53      	ble.n	801aa08 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a960:	9a01      	ldr	r2, [sp, #4]
 801a962:	b22d      	sxth	r5, r5
 801a964:	fb07 2505 	mla	r5, r7, r5, r2
 801a968:	5daa      	ldrb	r2, [r5, r6]
 801a96a:	9d02      	ldr	r5, [sp, #8]
 801a96c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a970:	0e2e      	lsrs	r6, r5, #24
 801a972:	d049      	beq.n	801aa08 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a974:	f06f 0201 	mvn.w	r2, #1
 801a978:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a97c:	fb02 f20e 	mul.w	r2, r2, lr
 801a980:	f834 8002 	ldrh.w	r8, [r4, r2]
 801a984:	9203      	str	r2, [sp, #12]
 801a986:	9a05      	ldr	r2, [sp, #20]
 801a988:	ea4f 2728 	mov.w	r7, r8, asr #8
 801a98c:	4356      	muls	r6, r2
 801a98e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a992:	1c72      	adds	r2, r6, #1
 801a994:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a998:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a99c:	b2ed      	uxtb	r5, r5
 801a99e:	1212      	asrs	r2, r2, #8
 801a9a0:	fa1f f982 	uxth.w	r9, r2
 801a9a4:	43d2      	mvns	r2, r2
 801a9a6:	fb16 f609 	smulbb	r6, r6, r9
 801a9aa:	b2d2      	uxtb	r2, r2
 801a9ac:	fb15 f509 	smulbb	r5, r5, r9
 801a9b0:	fb07 6702 	mla	r7, r7, r2, r6
 801a9b4:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a9b8:	fb1a fa09 	smulbb	sl, sl, r9
 801a9bc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a9c0:	b2bf      	uxth	r7, r7
 801a9c2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a9c6:	fa5f f888 	uxtb.w	r8, r8
 801a9ca:	fb06 a602 	mla	r6, r6, r2, sl
 801a9ce:	fb08 5502 	mla	r5, r8, r2, r5
 801a9d2:	1c7a      	adds	r2, r7, #1
 801a9d4:	b2b6      	uxth	r6, r6
 801a9d6:	b2ad      	uxth	r5, r5
 801a9d8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a9dc:	9a03      	ldr	r2, [sp, #12]
 801a9de:	f105 0a01 	add.w	sl, r5, #1
 801a9e2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a9e6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a9ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a9ee:	ea4a 0707 	orr.w	r7, sl, r7
 801a9f2:	f106 0a01 	add.w	sl, r6, #1
 801a9f6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a9fa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a9fe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801aa02:	ea47 070a 	orr.w	r7, r7, sl
 801aa06:	52a7      	strh	r7, [r4, r2]
 801aa08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aa0a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801aa0e:	4410      	add	r0, r2
 801aa10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aa12:	4411      	add	r1, r2
 801aa14:	e755      	b.n	801a8c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801aa16:	f04f 0800 	mov.w	r8, #0
 801aa1a:	eba3 0208 	sub.w	r2, r3, r8
 801aa1e:	2a00      	cmp	r2, #0
 801aa20:	f77f af53 	ble.w	801a8ca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801aa24:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801aa28:	140a      	asrs	r2, r1, #16
 801aa2a:	9f01      	ldr	r7, [sp, #4]
 801aa2c:	1405      	asrs	r5, r0, #16
 801aa2e:	fb06 7202 	mla	r2, r6, r2, r7
 801aa32:	5d52      	ldrb	r2, [r2, r5]
 801aa34:	9d02      	ldr	r5, [sp, #8]
 801aa36:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801aa3a:	0e2e      	lsrs	r6, r5, #24
 801aa3c:	d044      	beq.n	801aac8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801aa3e:	9a05      	ldr	r2, [sp, #20]
 801aa40:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801aa44:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801aa48:	4356      	muls	r6, r2
 801aa4a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801aa4e:	1c72      	adds	r2, r6, #1
 801aa50:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aa54:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801aa58:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801aa5c:	b2ed      	uxtb	r5, r5
 801aa5e:	1212      	asrs	r2, r2, #8
 801aa60:	fa1f f982 	uxth.w	r9, r2
 801aa64:	43d2      	mvns	r2, r2
 801aa66:	fb16 f609 	smulbb	r6, r6, r9
 801aa6a:	b2d2      	uxtb	r2, r2
 801aa6c:	fb15 f509 	smulbb	r5, r5, r9
 801aa70:	fb07 6702 	mla	r7, r7, r2, r6
 801aa74:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801aa78:	fb1a fa09 	smulbb	sl, sl, r9
 801aa7c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801aa80:	b2bf      	uxth	r7, r7
 801aa82:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aa86:	fa5f fe8e 	uxtb.w	lr, lr
 801aa8a:	fb06 a602 	mla	r6, r6, r2, sl
 801aa8e:	fb0e 5502 	mla	r5, lr, r2, r5
 801aa92:	1c7a      	adds	r2, r7, #1
 801aa94:	b2b6      	uxth	r6, r6
 801aa96:	b2ad      	uxth	r5, r5
 801aa98:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801aa9c:	f105 0a01 	add.w	sl, r5, #1
 801aaa0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801aaa4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801aaa8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aaac:	ea4a 0707 	orr.w	r7, sl, r7
 801aab0:	f106 0a01 	add.w	sl, r6, #1
 801aab4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801aab8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801aabc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801aac0:	ea47 070a 	orr.w	r7, r7, sl
 801aac4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801aac8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aaca:	f108 0801 	add.w	r8, r8, #1
 801aace:	4410      	add	r0, r2
 801aad0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aad2:	4411      	add	r1, r2
 801aad4:	e7a1      	b.n	801aa1a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801aad6:	b007      	add	sp, #28
 801aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aadc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aae0:	b085      	sub	sp, #20
 801aae2:	468b      	mov	fp, r1
 801aae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aae8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801aaea:	9203      	str	r2, [sp, #12]
 801aaec:	6841      	ldr	r1, [r0, #4]
 801aaee:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801aaf2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801aaf6:	fb01 2404 	mla	r4, r1, r4, r2
 801aafa:	6802      	ldr	r2, [r0, #0]
 801aafc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ab00:	f8de 2000 	ldr.w	r2, [lr]
 801ab04:	9200      	str	r2, [sp, #0]
 801ab06:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ab0a:	3204      	adds	r2, #4
 801ab0c:	9201      	str	r2, [sp, #4]
 801ab0e:	f1bb 0f00 	cmp.w	fp, #0
 801ab12:	dc03      	bgt.n	801ab1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ab14:	9a03      	ldr	r2, [sp, #12]
 801ab16:	2a00      	cmp	r2, #0
 801ab18:	f340 8153 	ble.w	801adc2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ab1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ab1e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ab22:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ab26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ab28:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ab2c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	dd0e      	ble.n	801ab52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ab34:	1408      	asrs	r0, r1, #16
 801ab36:	d405      	bmi.n	801ab44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ab38:	42b8      	cmp	r0, r7
 801ab3a:	da03      	bge.n	801ab44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ab3c:	1410      	asrs	r0, r2, #16
 801ab3e:	d401      	bmi.n	801ab44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ab40:	42b0      	cmp	r0, r6
 801ab42:	db07      	blt.n	801ab54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ab44:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ab46:	3b01      	subs	r3, #1
 801ab48:	3402      	adds	r4, #2
 801ab4a:	4401      	add	r1, r0
 801ab4c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ab4e:	4402      	add	r2, r0
 801ab50:	e7ee      	b.n	801ab30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ab52:	d017      	beq.n	801ab84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ab54:	1e58      	subs	r0, r3, #1
 801ab56:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ab58:	fb05 1500 	mla	r5, r5, r0, r1
 801ab5c:	142d      	asrs	r5, r5, #16
 801ab5e:	d409      	bmi.n	801ab74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ab60:	42bd      	cmp	r5, r7
 801ab62:	da07      	bge.n	801ab74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ab64:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ab66:	fb05 2000 	mla	r0, r5, r0, r2
 801ab6a:	1400      	asrs	r0, r0, #16
 801ab6c:	d402      	bmi.n	801ab74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ab6e:	42b0      	cmp	r0, r6
 801ab70:	f2c0 80bc 	blt.w	801acec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ab74:	2600      	movs	r6, #0
 801ab76:	1998      	adds	r0, r3, r6
 801ab78:	2800      	cmp	r0, #0
 801ab7a:	dc3e      	bgt.n	801abfa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ab7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab80:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ab84:	f1bb 0f00 	cmp.w	fp, #0
 801ab88:	f340 811b 	ble.w	801adc2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ab8c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ab90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ab96:	f1bb 0b01 	subs.w	fp, fp, #1
 801ab9a:	eeb0 6a62 	vmov.f32	s12, s5
 801ab9e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aba2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aba6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801abaa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801abae:	eeb0 6a43 	vmov.f32	s12, s6
 801abb2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801abb6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801abba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801abbe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801abc2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801abc6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801abca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801abce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801abd2:	ee12 2a90 	vmov	r2, s5
 801abd6:	eef0 2a47 	vmov.f32	s5, s14
 801abda:	fb92 f3f3 	sdiv	r3, r2, r3
 801abde:	ee13 2a10 	vmov	r2, s6
 801abe2:	9311      	str	r3, [sp, #68]	; 0x44
 801abe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abe6:	eeb0 3a67 	vmov.f32	s6, s15
 801abea:	fb92 f3f3 	sdiv	r3, r2, r3
 801abee:	9a03      	ldr	r2, [sp, #12]
 801abf0:	9312      	str	r3, [sp, #72]	; 0x48
 801abf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abf4:	bf08      	it	eq
 801abf6:	4613      	moveq	r3, r2
 801abf8:	e789      	b.n	801ab0e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801abfa:	140f      	asrs	r7, r1, #16
 801abfc:	d426      	bmi.n	801ac4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801abfe:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ac02:	42bd      	cmp	r5, r7
 801ac04:	dd22      	ble.n	801ac4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ac06:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ac0a:	d41f      	bmi.n	801ac4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ac0c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ac10:	4560      	cmp	r0, ip
 801ac12:	dd1b      	ble.n	801ac4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ac14:	9800      	ldr	r0, [sp, #0]
 801ac16:	b22d      	sxth	r5, r5
 801ac18:	fb0c 0505 	mla	r5, ip, r5, r0
 801ac1c:	5de8      	ldrb	r0, [r5, r7]
 801ac1e:	9d01      	ldr	r5, [sp, #4]
 801ac20:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ac24:	0e07      	lsrs	r7, r0, #24
 801ac26:	2fff      	cmp	r7, #255	; 0xff
 801ac28:	d116      	bne.n	801ac58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ac2a:	f06f 0501 	mvn.w	r5, #1
 801ac2e:	fb05 f706 	mul.w	r7, r5, r6
 801ac32:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ac36:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ac3a:	0945      	lsrs	r5, r0, #5
 801ac3c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ac40:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ac44:	ea4c 0505 	orr.w	r5, ip, r5
 801ac48:	4305      	orrs	r5, r0
 801ac4a:	53e5      	strh	r5, [r4, r7]
 801ac4c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ac4e:	3e01      	subs	r6, #1
 801ac50:	4401      	add	r1, r0
 801ac52:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ac54:	4402      	add	r2, r0
 801ac56:	e78e      	b.n	801ab76 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ac58:	b2fd      	uxtb	r5, r7
 801ac5a:	2f00      	cmp	r7, #0
 801ac5c:	d0f6      	beq.n	801ac4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ac5e:	f06f 0701 	mvn.w	r7, #1
 801ac62:	fa1f f985 	uxth.w	r9, r5
 801ac66:	43ed      	mvns	r5, r5
 801ac68:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ac6c:	4377      	muls	r7, r6
 801ac6e:	fb1a fa09 	smulbb	sl, sl, r9
 801ac72:	b2ed      	uxtb	r5, r5
 801ac74:	f834 8007 	ldrh.w	r8, [r4, r7]
 801ac78:	9702      	str	r7, [sp, #8]
 801ac7a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ac7e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ac82:	fb17 f709 	smulbb	r7, r7, r9
 801ac86:	b2c0      	uxtb	r0, r0
 801ac88:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ac8c:	fb10 f009 	smulbb	r0, r0, r9
 801ac90:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ac94:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801ac98:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ac9c:	fa1f fc8c 	uxth.w	ip, ip
 801aca0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801aca4:	fa5f f888 	uxtb.w	r8, r8
 801aca8:	fb07 a705 	mla	r7, r7, r5, sl
 801acac:	fb08 0005 	mla	r0, r8, r5, r0
 801acb0:	f10c 0501 	add.w	r5, ip, #1
 801acb4:	b2bf      	uxth	r7, r7
 801acb6:	b280      	uxth	r0, r0
 801acb8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801acbc:	f100 0a01 	add.w	sl, r0, #1
 801acc0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801acc4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801acc8:	9802      	ldr	r0, [sp, #8]
 801acca:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801acce:	ea4a 0c0c 	orr.w	ip, sl, ip
 801acd2:	f107 0a01 	add.w	sl, r7, #1
 801acd6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801acda:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801acde:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ace2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ace6:	f824 c000 	strh.w	ip, [r4, r0]
 801acea:	e7af      	b.n	801ac4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801acec:	f04f 0800 	mov.w	r8, #0
 801acf0:	eba3 0008 	sub.w	r0, r3, r8
 801acf4:	2800      	cmp	r0, #0
 801acf6:	f77f af41 	ble.w	801ab7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801acfa:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801acfe:	1410      	asrs	r0, r2, #16
 801ad00:	9f00      	ldr	r7, [sp, #0]
 801ad02:	140d      	asrs	r5, r1, #16
 801ad04:	fb06 7000 	mla	r0, r6, r0, r7
 801ad08:	5d40      	ldrb	r0, [r0, r5]
 801ad0a:	9d01      	ldr	r5, [sp, #4]
 801ad0c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ad10:	0e2e      	lsrs	r6, r5, #24
 801ad12:	2eff      	cmp	r6, #255	; 0xff
 801ad14:	d112      	bne.n	801ad3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801ad16:	482c      	ldr	r0, [pc, #176]	; (801adc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ad18:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ad1c:	0968      	lsrs	r0, r5, #5
 801ad1e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ad22:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ad26:	4330      	orrs	r0, r6
 801ad28:	4328      	orrs	r0, r5
 801ad2a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801ad2e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ad30:	f108 0801 	add.w	r8, r8, #1
 801ad34:	4401      	add	r1, r0
 801ad36:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ad38:	4402      	add	r2, r0
 801ad3a:	e7d9      	b.n	801acf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ad3c:	b2f0      	uxtb	r0, r6
 801ad3e:	2e00      	cmp	r6, #0
 801ad40:	d0f5      	beq.n	801ad2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ad42:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801ad46:	fa1f f980 	uxth.w	r9, r0
 801ad4a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ad4e:	43c0      	mvns	r0, r0
 801ad50:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ad54:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ad58:	fb16 f609 	smulbb	r6, r6, r9
 801ad5c:	b2c0      	uxtb	r0, r0
 801ad5e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ad62:	b2ed      	uxtb	r5, r5
 801ad64:	fb1a fa09 	smulbb	sl, sl, r9
 801ad68:	fb07 6700 	mla	r7, r7, r0, r6
 801ad6c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ad70:	fb15 f509 	smulbb	r5, r5, r9
 801ad74:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ad78:	b2bf      	uxth	r7, r7
 801ad7a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ad7e:	fa5f fc8c 	uxtb.w	ip, ip
 801ad82:	fb06 a600 	mla	r6, r6, r0, sl
 801ad86:	fb0c 5500 	mla	r5, ip, r0, r5
 801ad8a:	1c78      	adds	r0, r7, #1
 801ad8c:	b2b6      	uxth	r6, r6
 801ad8e:	b2ad      	uxth	r5, r5
 801ad90:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ad94:	f105 0a01 	add.w	sl, r5, #1
 801ad98:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ad9c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ada0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ada4:	ea4a 0707 	orr.w	r7, sl, r7
 801ada8:	f106 0a01 	add.w	sl, r6, #1
 801adac:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801adb0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801adb4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801adb8:	ea47 070a 	orr.w	r7, r7, sl
 801adbc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801adc0:	e7b5      	b.n	801ad2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801adc2:	b005      	add	sp, #20
 801adc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adc8:	fffff800 	.word	0xfffff800

0801adcc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801adcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801add0:	b087      	sub	sp, #28
 801add2:	468b      	mov	fp, r1
 801add4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801add8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801adda:	9204      	str	r2, [sp, #16]
 801addc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ade0:	6861      	ldr	r1, [r4, #4]
 801ade2:	9205      	str	r2, [sp, #20]
 801ade4:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801ade8:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801adec:	fb01 2000 	mla	r0, r1, r0, r2
 801adf0:	6822      	ldr	r2, [r4, #0]
 801adf2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801adf6:	f8de 2000 	ldr.w	r2, [lr]
 801adfa:	9201      	str	r2, [sp, #4]
 801adfc:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ae00:	9202      	str	r2, [sp, #8]
 801ae02:	f1bb 0f00 	cmp.w	fp, #0
 801ae06:	dc03      	bgt.n	801ae10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ae08:	9a04      	ldr	r2, [sp, #16]
 801ae0a:	2a00      	cmp	r2, #0
 801ae0c:	f340 8142 	ble.w	801b094 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ae10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ae12:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ae16:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ae1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae1c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ae20:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	dd0e      	ble.n	801ae46 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ae28:	140c      	asrs	r4, r1, #16
 801ae2a:	d405      	bmi.n	801ae38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ae2c:	42bc      	cmp	r4, r7
 801ae2e:	da03      	bge.n	801ae38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ae30:	1414      	asrs	r4, r2, #16
 801ae32:	d401      	bmi.n	801ae38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ae34:	42b4      	cmp	r4, r6
 801ae36:	db07      	blt.n	801ae48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ae38:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ae3a:	3b01      	subs	r3, #1
 801ae3c:	3002      	adds	r0, #2
 801ae3e:	4421      	add	r1, r4
 801ae40:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ae42:	4422      	add	r2, r4
 801ae44:	e7ee      	b.n	801ae24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ae46:	d019      	beq.n	801ae7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801ae48:	1e5c      	subs	r4, r3, #1
 801ae4a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ae4c:	fb05 1504 	mla	r5, r5, r4, r1
 801ae50:	142d      	asrs	r5, r5, #16
 801ae52:	d409      	bmi.n	801ae68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ae54:	42bd      	cmp	r5, r7
 801ae56:	da07      	bge.n	801ae68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ae58:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ae5a:	fb05 2404 	mla	r4, r5, r4, r2
 801ae5e:	1424      	asrs	r4, r4, #16
 801ae60:	d402      	bmi.n	801ae68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ae62:	42b4      	cmp	r4, r6
 801ae64:	f2c0 80b1 	blt.w	801afca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801ae68:	f04f 0800 	mov.w	r8, #0
 801ae6c:	eb03 0408 	add.w	r4, r3, r8
 801ae70:	2c00      	cmp	r4, #0
 801ae72:	dc3e      	bgt.n	801aef2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ae74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae78:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ae7c:	f1bb 0f00 	cmp.w	fp, #0
 801ae80:	f340 8108 	ble.w	801b094 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ae84:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ae88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ae8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ae8e:	f1bb 0b01 	subs.w	fp, fp, #1
 801ae92:	eeb0 6a62 	vmov.f32	s12, s5
 801ae96:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ae9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ae9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aea2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801aea6:	eeb0 6a43 	vmov.f32	s12, s6
 801aeaa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aeae:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801aeb2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aeb6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aeba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aebe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aec2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aec6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aeca:	ee12 2a90 	vmov	r2, s5
 801aece:	eef0 2a47 	vmov.f32	s5, s14
 801aed2:	fb92 f3f3 	sdiv	r3, r2, r3
 801aed6:	ee13 2a10 	vmov	r2, s6
 801aeda:	9313      	str	r3, [sp, #76]	; 0x4c
 801aedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aede:	eeb0 3a67 	vmov.f32	s6, s15
 801aee2:	fb92 f3f3 	sdiv	r3, r2, r3
 801aee6:	9a04      	ldr	r2, [sp, #16]
 801aee8:	9314      	str	r3, [sp, #80]	; 0x50
 801aeea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aeec:	bf08      	it	eq
 801aeee:	4613      	moveq	r3, r2
 801aef0:	e787      	b.n	801ae02 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801aef2:	140e      	asrs	r6, r1, #16
 801aef4:	d462      	bmi.n	801afbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aef6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801aefa:	42b5      	cmp	r5, r6
 801aefc:	dd5e      	ble.n	801afbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aefe:	1417      	asrs	r7, r2, #16
 801af00:	d45c      	bmi.n	801afbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801af02:	f8de 400c 	ldr.w	r4, [lr, #12]
 801af06:	42bc      	cmp	r4, r7
 801af08:	dd58      	ble.n	801afbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801af0a:	b22d      	sxth	r5, r5
 801af0c:	9c02      	ldr	r4, [sp, #8]
 801af0e:	fb07 6505 	mla	r5, r7, r5, r6
 801af12:	5d66      	ldrb	r6, [r4, r5]
 801af14:	2e00      	cmp	r6, #0
 801af16:	d051      	beq.n	801afbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801af18:	9c01      	ldr	r4, [sp, #4]
 801af1a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801af1e:	f06f 0401 	mvn.w	r4, #1
 801af22:	fb04 f408 	mul.w	r4, r4, r8
 801af26:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801af2a:	5b05      	ldrh	r5, [r0, r4]
 801af2c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801af30:	9403      	str	r4, [sp, #12]
 801af32:	9c05      	ldr	r4, [sp, #20]
 801af34:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801af38:	4366      	muls	r6, r4
 801af3a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801af3e:	1c74      	adds	r4, r6, #1
 801af40:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801af44:	122e      	asrs	r6, r5, #8
 801af46:	1224      	asrs	r4, r4, #8
 801af48:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801af4c:	00ed      	lsls	r5, r5, #3
 801af4e:	b2a7      	uxth	r7, r4
 801af50:	43e4      	mvns	r4, r4
 801af52:	b2ed      	uxtb	r5, r5
 801af54:	b2e4      	uxtb	r4, r4
 801af56:	fb16 f604 	smulbb	r6, r6, r4
 801af5a:	fb15 f504 	smulbb	r5, r5, r4
 801af5e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801af62:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801af66:	fb1a fa04 	smulbb	sl, sl, r4
 801af6a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801af6e:	fa1f fc8c 	uxth.w	ip, ip
 801af72:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801af76:	fa5f f989 	uxtb.w	r9, r9
 801af7a:	fb06 a607 	mla	r6, r6, r7, sl
 801af7e:	f10c 0401 	add.w	r4, ip, #1
 801af82:	fb09 5507 	mla	r5, r9, r7, r5
 801af86:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801af8a:	9c03      	ldr	r4, [sp, #12]
 801af8c:	b2ad      	uxth	r5, r5
 801af8e:	b2b6      	uxth	r6, r6
 801af90:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801af94:	f105 0a01 	add.w	sl, r5, #1
 801af98:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801af9c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801afa0:	ea4a 0c0c 	orr.w	ip, sl, ip
 801afa4:	f106 0a01 	add.w	sl, r6, #1
 801afa8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801afac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801afb0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801afb4:	ea4c 0c0a 	orr.w	ip, ip, sl
 801afb8:	f820 c004 	strh.w	ip, [r0, r4]
 801afbc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801afbe:	f108 38ff 	add.w	r8, r8, #4294967295
 801afc2:	4421      	add	r1, r4
 801afc4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801afc6:	4422      	add	r2, r4
 801afc8:	e750      	b.n	801ae6c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801afca:	f04f 0900 	mov.w	r9, #0
 801afce:	eba3 0409 	sub.w	r4, r3, r9
 801afd2:	2c00      	cmp	r4, #0
 801afd4:	f77f af4e 	ble.w	801ae74 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801afd8:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801afdc:	140d      	asrs	r5, r1, #16
 801afde:	1414      	asrs	r4, r2, #16
 801afe0:	fb06 5404 	mla	r4, r6, r4, r5
 801afe4:	9d02      	ldr	r5, [sp, #8]
 801afe6:	5d2e      	ldrb	r6, [r5, r4]
 801afe8:	2e00      	cmp	r6, #0
 801afea:	d04c      	beq.n	801b086 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801afec:	9d01      	ldr	r5, [sp, #4]
 801afee:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801aff2:	9c05      	ldr	r4, [sp, #20]
 801aff4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801aff8:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801affc:	4366      	muls	r6, r4
 801affe:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b002:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b006:	1c74      	adds	r4, r6, #1
 801b008:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b00c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801b010:	122e      	asrs	r6, r5, #8
 801b012:	1224      	asrs	r4, r4, #8
 801b014:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b018:	00ed      	lsls	r5, r5, #3
 801b01a:	b2a7      	uxth	r7, r4
 801b01c:	43e4      	mvns	r4, r4
 801b01e:	b2ed      	uxtb	r5, r5
 801b020:	b2e4      	uxtb	r4, r4
 801b022:	fb16 f604 	smulbb	r6, r6, r4
 801b026:	fb15 f504 	smulbb	r5, r5, r4
 801b02a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b02e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801b032:	fb1a fa04 	smulbb	sl, sl, r4
 801b036:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b03a:	fa1f fc8c 	uxth.w	ip, ip
 801b03e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b042:	fa5f f888 	uxtb.w	r8, r8
 801b046:	fb06 a607 	mla	r6, r6, r7, sl
 801b04a:	f10c 0401 	add.w	r4, ip, #1
 801b04e:	fb08 5507 	mla	r5, r8, r7, r5
 801b052:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b056:	b2ad      	uxth	r5, r5
 801b058:	b2b6      	uxth	r6, r6
 801b05a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b05e:	f105 0a01 	add.w	sl, r5, #1
 801b062:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b066:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b06a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b06e:	f106 0a01 	add.w	sl, r6, #1
 801b072:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b076:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b07a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b07e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b082:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801b086:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b088:	f109 0901 	add.w	r9, r9, #1
 801b08c:	4421      	add	r1, r4
 801b08e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b090:	4422      	add	r2, r4
 801b092:	e79c      	b.n	801afce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801b094:	b007      	add	sp, #28
 801b096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b09a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b09a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b09e:	b085      	sub	sp, #20
 801b0a0:	468b      	mov	fp, r1
 801b0a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b0a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b0a8:	9203      	str	r2, [sp, #12]
 801b0aa:	6861      	ldr	r1, [r4, #4]
 801b0ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b0b0:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801b0b4:	fb01 2000 	mla	r0, r1, r0, r2
 801b0b8:	6822      	ldr	r2, [r4, #0]
 801b0ba:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b0be:	f8d8 2000 	ldr.w	r2, [r8]
 801b0c2:	9200      	str	r2, [sp, #0]
 801b0c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b0c8:	9201      	str	r2, [sp, #4]
 801b0ca:	f1bb 0f00 	cmp.w	fp, #0
 801b0ce:	dc03      	bgt.n	801b0d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b0d0:	9a03      	ldr	r2, [sp, #12]
 801b0d2:	2a00      	cmp	r2, #0
 801b0d4:	f340 8146 	ble.w	801b364 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b0d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b0da:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b0de:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b0e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b0e4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b0e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	dd0e      	ble.n	801b10e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b0f0:	140c      	asrs	r4, r1, #16
 801b0f2:	d405      	bmi.n	801b100 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b0f4:	42bc      	cmp	r4, r7
 801b0f6:	da03      	bge.n	801b100 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b0f8:	1414      	asrs	r4, r2, #16
 801b0fa:	d401      	bmi.n	801b100 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b0fc:	42b4      	cmp	r4, r6
 801b0fe:	db07      	blt.n	801b110 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b100:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b102:	3b01      	subs	r3, #1
 801b104:	3002      	adds	r0, #2
 801b106:	4421      	add	r1, r4
 801b108:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b10a:	4422      	add	r2, r4
 801b10c:	e7ee      	b.n	801b0ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b10e:	d017      	beq.n	801b140 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b110:	1e5c      	subs	r4, r3, #1
 801b112:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b114:	fb05 1504 	mla	r5, r5, r4, r1
 801b118:	142d      	asrs	r5, r5, #16
 801b11a:	d409      	bmi.n	801b130 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b11c:	42bd      	cmp	r5, r7
 801b11e:	da07      	bge.n	801b130 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b120:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b122:	fb05 2404 	mla	r4, r5, r4, r2
 801b126:	1424      	asrs	r4, r4, #16
 801b128:	d402      	bmi.n	801b130 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b12a:	42b4      	cmp	r4, r6
 801b12c:	f2c0 80b3 	blt.w	801b296 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801b130:	2600      	movs	r6, #0
 801b132:	199c      	adds	r4, r3, r6
 801b134:	2c00      	cmp	r4, #0
 801b136:	dc3e      	bgt.n	801b1b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b138:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b13c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b140:	f1bb 0f00 	cmp.w	fp, #0
 801b144:	f340 810e 	ble.w	801b364 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b148:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b14c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b14e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b152:	f1bb 0b01 	subs.w	fp, fp, #1
 801b156:	eeb0 6a62 	vmov.f32	s12, s5
 801b15a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b15e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b162:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b166:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b16a:	eeb0 6a43 	vmov.f32	s12, s6
 801b16e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b172:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b176:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b17a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b17e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b182:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b186:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b18a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b18e:	ee12 2a90 	vmov	r2, s5
 801b192:	eef0 2a47 	vmov.f32	s5, s14
 801b196:	fb92 f3f3 	sdiv	r3, r2, r3
 801b19a:	ee13 2a10 	vmov	r2, s6
 801b19e:	9311      	str	r3, [sp, #68]	; 0x44
 801b1a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b1a2:	eeb0 3a67 	vmov.f32	s6, s15
 801b1a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1aa:	9a03      	ldr	r2, [sp, #12]
 801b1ac:	9312      	str	r3, [sp, #72]	; 0x48
 801b1ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b1b0:	bf08      	it	eq
 801b1b2:	4613      	moveq	r3, r2
 801b1b4:	e789      	b.n	801b0ca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b1b6:	140f      	asrs	r7, r1, #16
 801b1b8:	d418      	bmi.n	801b1ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b1ba:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b1be:	42bd      	cmp	r5, r7
 801b1c0:	dd14      	ble.n	801b1ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b1c2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b1c6:	d411      	bmi.n	801b1ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b1c8:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801b1cc:	4564      	cmp	r4, ip
 801b1ce:	dd0d      	ble.n	801b1ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b1d0:	b22d      	sxth	r5, r5
 801b1d2:	9c01      	ldr	r4, [sp, #4]
 801b1d4:	fb0c 7505 	mla	r5, ip, r5, r7
 801b1d8:	5d64      	ldrb	r4, [r4, r5]
 801b1da:	2cff      	cmp	r4, #255	; 0xff
 801b1dc:	d10c      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b1de:	9c00      	ldr	r4, [sp, #0]
 801b1e0:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801b1e4:	f06f 0401 	mvn.w	r4, #1
 801b1e8:	4374      	muls	r4, r6
 801b1ea:	5305      	strh	r5, [r0, r4]
 801b1ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b1ee:	3e01      	subs	r6, #1
 801b1f0:	4421      	add	r1, r4
 801b1f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b1f4:	4422      	add	r2, r4
 801b1f6:	e79c      	b.n	801b132 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b1f8:	2c00      	cmp	r4, #0
 801b1fa:	d0f7      	beq.n	801b1ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b1fc:	9f00      	ldr	r7, [sp, #0]
 801b1fe:	fa1f fc84 	uxth.w	ip, r4
 801b202:	43e4      	mvns	r4, r4
 801b204:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801b208:	f06f 0501 	mvn.w	r5, #1
 801b20c:	b2e4      	uxtb	r4, r4
 801b20e:	4375      	muls	r5, r6
 801b210:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801b214:	9502      	str	r5, [sp, #8]
 801b216:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b21a:	5b45      	ldrh	r5, [r0, r5]
 801b21c:	122f      	asrs	r7, r5, #8
 801b21e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b222:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b226:	00ed      	lsls	r5, r5, #3
 801b228:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b22c:	fb17 f704 	smulbb	r7, r7, r4
 801b230:	b2ed      	uxtb	r5, r5
 801b232:	fb1a fa04 	smulbb	sl, sl, r4
 801b236:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801b23a:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801b23e:	fb15 f504 	smulbb	r5, r5, r4
 801b242:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801b246:	fa1f fe8e 	uxth.w	lr, lr
 801b24a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b24e:	fa5f f989 	uxtb.w	r9, r9
 801b252:	fb07 a70c 	mla	r7, r7, ip, sl
 801b256:	f10e 0401 	add.w	r4, lr, #1
 801b25a:	fb09 550c 	mla	r5, r9, ip, r5
 801b25e:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801b262:	9c02      	ldr	r4, [sp, #8]
 801b264:	b2ad      	uxth	r5, r5
 801b266:	b2bf      	uxth	r7, r7
 801b268:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b26c:	f105 0a01 	add.w	sl, r5, #1
 801b270:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b274:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b278:	ea4a 0e0e 	orr.w	lr, sl, lr
 801b27c:	f107 0a01 	add.w	sl, r7, #1
 801b280:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b284:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b288:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b28c:	ea4e 0e0a 	orr.w	lr, lr, sl
 801b290:	f820 e004 	strh.w	lr, [r0, r4]
 801b294:	e7aa      	b.n	801b1ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b296:	f04f 0900 	mov.w	r9, #0
 801b29a:	eba3 0409 	sub.w	r4, r3, r9
 801b29e:	2c00      	cmp	r4, #0
 801b2a0:	f77f af4a 	ble.w	801b138 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b2a4:	1414      	asrs	r4, r2, #16
 801b2a6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b2aa:	140d      	asrs	r5, r1, #16
 801b2ac:	fb06 5504 	mla	r5, r6, r4, r5
 801b2b0:	9c01      	ldr	r4, [sp, #4]
 801b2b2:	5d64      	ldrb	r4, [r4, r5]
 801b2b4:	2cff      	cmp	r4, #255	; 0xff
 801b2b6:	d10b      	bne.n	801b2d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801b2b8:	9c00      	ldr	r4, [sp, #0]
 801b2ba:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801b2be:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801b2c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b2c4:	f109 0901 	add.w	r9, r9, #1
 801b2c8:	4421      	add	r1, r4
 801b2ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b2cc:	4422      	add	r2, r4
 801b2ce:	e7e4      	b.n	801b29a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801b2d0:	2c00      	cmp	r4, #0
 801b2d2:	d0f6      	beq.n	801b2c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b2d4:	9e00      	ldr	r6, [sp, #0]
 801b2d6:	b2a7      	uxth	r7, r4
 801b2d8:	43e4      	mvns	r4, r4
 801b2da:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801b2de:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801b2e2:	b2e4      	uxtb	r4, r4
 801b2e4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b2e8:	122e      	asrs	r6, r5, #8
 801b2ea:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b2ee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b2f2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b2f6:	00ed      	lsls	r5, r5, #3
 801b2f8:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b2fc:	fb16 f604 	smulbb	r6, r6, r4
 801b300:	b2ed      	uxtb	r5, r5
 801b302:	fb1a fa04 	smulbb	sl, sl, r4
 801b306:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b30a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b30e:	fb15 f504 	smulbb	r5, r5, r4
 801b312:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b316:	fa1f fc8c 	uxth.w	ip, ip
 801b31a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b31e:	fa5f fe8e 	uxtb.w	lr, lr
 801b322:	fb06 a607 	mla	r6, r6, r7, sl
 801b326:	f10c 0401 	add.w	r4, ip, #1
 801b32a:	fb0e 5507 	mla	r5, lr, r7, r5
 801b32e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b332:	b2ad      	uxth	r5, r5
 801b334:	b2b6      	uxth	r6, r6
 801b336:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b33a:	f105 0a01 	add.w	sl, r5, #1
 801b33e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b342:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b346:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b34a:	f106 0a01 	add.w	sl, r6, #1
 801b34e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b352:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b356:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b35a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b35e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801b362:	e7ae      	b.n	801b2c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b364:	b005      	add	sp, #20
 801b366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b36a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b36a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b36e:	b085      	sub	sp, #20
 801b370:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b372:	9203      	str	r2, [sp, #12]
 801b374:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801b378:	9100      	str	r1, [sp, #0]
 801b37a:	9201      	str	r2, [sp, #4]
 801b37c:	6841      	ldr	r1, [r0, #4]
 801b37e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801b382:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b386:	fb01 2404 	mla	r4, r1, r4, r2
 801b38a:	6802      	ldr	r2, [r0, #0]
 801b38c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b390:	f8de 2000 	ldr.w	r2, [lr]
 801b394:	9202      	str	r2, [sp, #8]
 801b396:	9a01      	ldr	r2, [sp, #4]
 801b398:	43d6      	mvns	r6, r2
 801b39a:	b2f6      	uxtb	r6, r6
 801b39c:	9a00      	ldr	r2, [sp, #0]
 801b39e:	2a00      	cmp	r2, #0
 801b3a0:	dc03      	bgt.n	801b3aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b3a2:	9a03      	ldr	r2, [sp, #12]
 801b3a4:	2a00      	cmp	r2, #0
 801b3a6:	f340 8124 	ble.w	801b5f2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b3aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b3ac:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801b3b0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b3b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b3b6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801b3ba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	dd0e      	ble.n	801b3e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b3c2:	1408      	asrs	r0, r1, #16
 801b3c4:	d405      	bmi.n	801b3d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b3c6:	4560      	cmp	r0, ip
 801b3c8:	da03      	bge.n	801b3d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b3ca:	1410      	asrs	r0, r2, #16
 801b3cc:	d401      	bmi.n	801b3d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b3ce:	42b8      	cmp	r0, r7
 801b3d0:	db07      	blt.n	801b3e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b3d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b3d4:	3b01      	subs	r3, #1
 801b3d6:	3402      	adds	r4, #2
 801b3d8:	4401      	add	r1, r0
 801b3da:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b3dc:	4402      	add	r2, r0
 801b3de:	e7ee      	b.n	801b3be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b3e0:	d06e      	beq.n	801b4c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b3e2:	1e58      	subs	r0, r3, #1
 801b3e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b3e6:	fb05 1500 	mla	r5, r5, r0, r1
 801b3ea:	142d      	asrs	r5, r5, #16
 801b3ec:	d45c      	bmi.n	801b4a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b3ee:	4565      	cmp	r5, ip
 801b3f0:	da5a      	bge.n	801b4a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b3f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b3f4:	fb05 2000 	mla	r0, r5, r0, r2
 801b3f8:	1400      	asrs	r0, r0, #16
 801b3fa:	d455      	bmi.n	801b4a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b3fc:	42b8      	cmp	r0, r7
 801b3fe:	da53      	bge.n	801b4a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b400:	4699      	mov	r9, r3
 801b402:	46a2      	mov	sl, r4
 801b404:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801b408:	f1b9 0f00 	cmp.w	r9, #0
 801b40c:	dd54      	ble.n	801b4b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b40e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b412:	140d      	asrs	r5, r1, #16
 801b414:	1410      	asrs	r0, r2, #16
 801b416:	f109 39ff 	add.w	r9, r9, #4294967295
 801b41a:	fb07 5000 	mla	r0, r7, r0, r5
 801b41e:	9d02      	ldr	r5, [sp, #8]
 801b420:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b424:	f8ba 5000 	ldrh.w	r5, [sl]
 801b428:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b42c:	122f      	asrs	r7, r5, #8
 801b42e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b432:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b436:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b43a:	00ed      	lsls	r5, r5, #3
 801b43c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b440:	fb17 f706 	smulbb	r7, r7, r6
 801b444:	b2ed      	uxtb	r5, r5
 801b446:	fb18 f806 	smulbb	r8, r8, r6
 801b44a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b44e:	10c7      	asrs	r7, r0, #3
 801b450:	fb15 f506 	smulbb	r5, r5, r6
 801b454:	00c0      	lsls	r0, r0, #3
 801b456:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b45a:	fa1f fc8c 	uxth.w	ip, ip
 801b45e:	b2c0      	uxtb	r0, r0
 801b460:	fb07 870b 	mla	r7, r7, fp, r8
 801b464:	fb00 500b 	mla	r0, r0, fp, r5
 801b468:	f10c 0501 	add.w	r5, ip, #1
 801b46c:	b2bf      	uxth	r7, r7
 801b46e:	b280      	uxth	r0, r0
 801b470:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b474:	f107 0801 	add.w	r8, r7, #1
 801b478:	1c45      	adds	r5, r0, #1
 801b47a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b47e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b482:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b486:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b488:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b48c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b490:	4401      	add	r1, r0
 801b492:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b496:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b498:	ea45 0c0c 	orr.w	ip, r5, ip
 801b49c:	4402      	add	r2, r0
 801b49e:	ea4c 0c08 	orr.w	ip, ip, r8
 801b4a2:	f82a cb02 	strh.w	ip, [sl], #2
 801b4a6:	e7af      	b.n	801b408 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b4a8:	f04f 0800 	mov.w	r8, #0
 801b4ac:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801b4b0:	eb03 0008 	add.w	r0, r3, r8
 801b4b4:	2800      	cmp	r0, #0
 801b4b6:	dc41      	bgt.n	801b53c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b4b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b4bc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b4c0:	9b00      	ldr	r3, [sp, #0]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	f340 8095 	ble.w	801b5f2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b4c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b4cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b4ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b4d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b4d6:	eef0 6a62 	vmov.f32	s13, s5
 801b4da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b4de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b4e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b4e6:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b4ea:	eef0 6a43 	vmov.f32	s13, s6
 801b4ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b4f2:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b4f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b4fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b4fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b502:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b506:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b50a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b50e:	ee12 2a90 	vmov	r2, s5
 801b512:	eef0 2a47 	vmov.f32	s5, s14
 801b516:	fb92 f3f3 	sdiv	r3, r2, r3
 801b51a:	ee13 2a10 	vmov	r2, s6
 801b51e:	9311      	str	r3, [sp, #68]	; 0x44
 801b520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b522:	eeb0 3a67 	vmov.f32	s6, s15
 801b526:	fb92 f3f3 	sdiv	r3, r2, r3
 801b52a:	9312      	str	r3, [sp, #72]	; 0x48
 801b52c:	9b00      	ldr	r3, [sp, #0]
 801b52e:	9a03      	ldr	r2, [sp, #12]
 801b530:	3b01      	subs	r3, #1
 801b532:	9300      	str	r3, [sp, #0]
 801b534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b536:	bf08      	it	eq
 801b538:	4613      	moveq	r3, r2
 801b53a:	e72f      	b.n	801b39c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b53c:	140f      	asrs	r7, r1, #16
 801b53e:	d451      	bmi.n	801b5e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b540:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b544:	42bd      	cmp	r5, r7
 801b546:	dd4d      	ble.n	801b5e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b548:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b54c:	d44a      	bmi.n	801b5e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b54e:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b552:	4560      	cmp	r0, ip
 801b554:	dd46      	ble.n	801b5e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b556:	b22d      	sxth	r5, r5
 801b558:	9802      	ldr	r0, [sp, #8]
 801b55a:	fb0c 7505 	mla	r5, ip, r5, r7
 801b55e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801b562:	f06f 0501 	mvn.w	r5, #1
 801b566:	fb05 fb08 	mul.w	fp, r5, r8
 801b56a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b56e:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b572:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b576:	122f      	asrs	r7, r5, #8
 801b578:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b57c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b580:	00ed      	lsls	r5, r5, #3
 801b582:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b586:	fb17 f706 	smulbb	r7, r7, r6
 801b58a:	b2ed      	uxtb	r5, r5
 801b58c:	fb19 f906 	smulbb	r9, r9, r6
 801b590:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b594:	10c7      	asrs	r7, r0, #3
 801b596:	fb15 f506 	smulbb	r5, r5, r6
 801b59a:	00c0      	lsls	r0, r0, #3
 801b59c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b5a0:	fa1f fc8c 	uxth.w	ip, ip
 801b5a4:	b2c0      	uxtb	r0, r0
 801b5a6:	fb07 970a 	mla	r7, r7, sl, r9
 801b5aa:	fb00 500a 	mla	r0, r0, sl, r5
 801b5ae:	f10c 0501 	add.w	r5, ip, #1
 801b5b2:	b2bf      	uxth	r7, r7
 801b5b4:	b280      	uxth	r0, r0
 801b5b6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b5ba:	f107 0901 	add.w	r9, r7, #1
 801b5be:	1c45      	adds	r5, r0, #1
 801b5c0:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b5c4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b5c8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b5cc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b5d0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b5d4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b5d8:	ea45 0c0c 	orr.w	ip, r5, ip
 801b5dc:	ea4c 0c09 	orr.w	ip, ip, r9
 801b5e0:	f824 c00b 	strh.w	ip, [r4, fp]
 801b5e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b5e6:	f108 38ff 	add.w	r8, r8, #4294967295
 801b5ea:	4401      	add	r1, r0
 801b5ec:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b5ee:	4402      	add	r2, r0
 801b5f0:	e75e      	b.n	801b4b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b5f2:	b005      	add	sp, #20
 801b5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b5f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5fc:	b085      	sub	sp, #20
 801b5fe:	4693      	mov	fp, r2
 801b600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b604:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b606:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b608:	6870      	ldr	r0, [r6, #4]
 801b60a:	9101      	str	r1, [sp, #4]
 801b60c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b610:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801b614:	fb00 2404 	mla	r4, r0, r4, r2
 801b618:	6832      	ldr	r2, [r6, #0]
 801b61a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b61e:	682a      	ldr	r2, [r5, #0]
 801b620:	9202      	str	r2, [sp, #8]
 801b622:	9a01      	ldr	r2, [sp, #4]
 801b624:	2a00      	cmp	r2, #0
 801b626:	dc03      	bgt.n	801b630 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b628:	f1bb 0f00 	cmp.w	fp, #0
 801b62c:	f340 809a 	ble.w	801b764 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b630:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b632:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b636:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b63a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b63c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b640:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b644:	2b00      	cmp	r3, #0
 801b646:	dd0c      	ble.n	801b662 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b648:	1406      	asrs	r6, r0, #16
 801b64a:	d405      	bmi.n	801b658 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b64c:	454e      	cmp	r6, r9
 801b64e:	da03      	bge.n	801b658 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b650:	1416      	asrs	r6, r2, #16
 801b652:	d401      	bmi.n	801b658 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b654:	4546      	cmp	r6, r8
 801b656:	db05      	blt.n	801b664 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b658:	4470      	add	r0, lr
 801b65a:	4462      	add	r2, ip
 801b65c:	3b01      	subs	r3, #1
 801b65e:	3402      	adds	r4, #2
 801b660:	e7f0      	b.n	801b644 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b662:	d00f      	beq.n	801b684 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b664:	1e5e      	subs	r6, r3, #1
 801b666:	fb0e 0706 	mla	r7, lr, r6, r0
 801b66a:	143f      	asrs	r7, r7, #16
 801b66c:	d541      	bpl.n	801b6f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801b66e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b672:	4698      	mov	r8, r3
 801b674:	9603      	str	r6, [sp, #12]
 801b676:	f1b8 0f00 	cmp.w	r8, #0
 801b67a:	dc56      	bgt.n	801b72a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801b67c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b680:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b684:	9b01      	ldr	r3, [sp, #4]
 801b686:	2b00      	cmp	r3, #0
 801b688:	dd6c      	ble.n	801b764 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b68a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b68e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b690:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b694:	eeb0 6a62 	vmov.f32	s12, s5
 801b698:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b69c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b6a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b6a4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b6a8:	eeb0 6a43 	vmov.f32	s12, s6
 801b6ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b6b0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b6b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b6b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b6bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b6c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b6c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b6c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b6cc:	ee12 2a90 	vmov	r2, s5
 801b6d0:	eef0 2a47 	vmov.f32	s5, s14
 801b6d4:	fb92 fef3 	sdiv	lr, r2, r3
 801b6d8:	ee13 2a10 	vmov	r2, s6
 801b6dc:	eeb0 3a67 	vmov.f32	s6, s15
 801b6e0:	fb92 fcf3 	sdiv	ip, r2, r3
 801b6e4:	9b01      	ldr	r3, [sp, #4]
 801b6e6:	3b01      	subs	r3, #1
 801b6e8:	9301      	str	r3, [sp, #4]
 801b6ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6ec:	bf08      	it	eq
 801b6ee:	465b      	moveq	r3, fp
 801b6f0:	e797      	b.n	801b622 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b6f2:	454f      	cmp	r7, r9
 801b6f4:	dabb      	bge.n	801b66e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b6f6:	fb0c 2606 	mla	r6, ip, r6, r2
 801b6fa:	1436      	asrs	r6, r6, #16
 801b6fc:	d4b7      	bmi.n	801b66e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b6fe:	4546      	cmp	r6, r8
 801b700:	dab5      	bge.n	801b66e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b702:	461e      	mov	r6, r3
 801b704:	46a0      	mov	r8, r4
 801b706:	2e00      	cmp	r6, #0
 801b708:	ddb8      	ble.n	801b67c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b70a:	1417      	asrs	r7, r2, #16
 801b70c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b710:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b714:	9902      	ldr	r1, [sp, #8]
 801b716:	4470      	add	r0, lr
 801b718:	4462      	add	r2, ip
 801b71a:	fb0a 9707 	mla	r7, sl, r7, r9
 801b71e:	3e01      	subs	r6, #1
 801b720:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b724:	f828 7b02 	strh.w	r7, [r8], #2
 801b728:	e7ed      	b.n	801b706 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801b72a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b72e:	d414      	bmi.n	801b75a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b730:	68ae      	ldr	r6, [r5, #8]
 801b732:	454e      	cmp	r6, r9
 801b734:	dd11      	ble.n	801b75a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b736:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b73a:	d40e      	bmi.n	801b75a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b73c:	68ef      	ldr	r7, [r5, #12]
 801b73e:	4557      	cmp	r7, sl
 801b740:	dd0b      	ble.n	801b75a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b742:	b236      	sxth	r6, r6
 801b744:	f06f 0101 	mvn.w	r1, #1
 801b748:	9f02      	ldr	r7, [sp, #8]
 801b74a:	fb0a 9606 	mla	r6, sl, r6, r9
 801b74e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b752:	fb01 f608 	mul.w	r6, r1, r8
 801b756:	9903      	ldr	r1, [sp, #12]
 801b758:	538f      	strh	r7, [r1, r6]
 801b75a:	4470      	add	r0, lr
 801b75c:	4462      	add	r2, ip
 801b75e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b762:	e788      	b.n	801b676 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b764:	b005      	add	sp, #20
 801b766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b76a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b76a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b76e:	b087      	sub	sp, #28
 801b770:	468b      	mov	fp, r1
 801b772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b776:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b778:	9203      	str	r2, [sp, #12]
 801b77a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b77e:	6841      	ldr	r1, [r0, #4]
 801b780:	9204      	str	r2, [sp, #16]
 801b782:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b786:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b78a:	fb01 2505 	mla	r5, r1, r5, r2
 801b78e:	6802      	ldr	r2, [r0, #0]
 801b790:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b794:	f8d9 2000 	ldr.w	r2, [r9]
 801b798:	9201      	str	r2, [sp, #4]
 801b79a:	f1bb 0f00 	cmp.w	fp, #0
 801b79e:	dc03      	bgt.n	801b7a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b7a0:	9a03      	ldr	r2, [sp, #12]
 801b7a2:	2a00      	cmp	r2, #0
 801b7a4:	f340 8158 	ble.w	801ba58 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801b7a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b7aa:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b7ae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b7b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b7b4:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b7b8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	dd0e      	ble.n	801b7de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b7c0:	1402      	asrs	r2, r0, #16
 801b7c2:	d405      	bmi.n	801b7d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b7c4:	42ba      	cmp	r2, r7
 801b7c6:	da03      	bge.n	801b7d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b7c8:	140a      	asrs	r2, r1, #16
 801b7ca:	d401      	bmi.n	801b7d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b7cc:	42b2      	cmp	r2, r6
 801b7ce:	db07      	blt.n	801b7e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b7d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b7d2:	3b01      	subs	r3, #1
 801b7d4:	3502      	adds	r5, #2
 801b7d6:	4410      	add	r0, r2
 801b7d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b7da:	4411      	add	r1, r2
 801b7dc:	e7ee      	b.n	801b7bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b7de:	d017      	beq.n	801b810 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b7e0:	1e5a      	subs	r2, r3, #1
 801b7e2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b7e4:	fb04 0402 	mla	r4, r4, r2, r0
 801b7e8:	1424      	asrs	r4, r4, #16
 801b7ea:	d409      	bmi.n	801b800 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b7ec:	42bc      	cmp	r4, r7
 801b7ee:	da07      	bge.n	801b800 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b7f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b7f2:	fb04 1202 	mla	r2, r4, r2, r1
 801b7f6:	1412      	asrs	r2, r2, #16
 801b7f8:	d402      	bmi.n	801b800 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b7fa:	42b2      	cmp	r2, r6
 801b7fc:	f2c0 80bf 	blt.w	801b97e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b800:	2700      	movs	r7, #0
 801b802:	19da      	adds	r2, r3, r7
 801b804:	2a00      	cmp	r2, #0
 801b806:	dc3e      	bgt.n	801b886 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b808:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b80c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b810:	f1bb 0f00 	cmp.w	fp, #0
 801b814:	f340 8120 	ble.w	801ba58 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801b818:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b81c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b81e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b822:	f1bb 0b01 	subs.w	fp, fp, #1
 801b826:	eeb0 6a62 	vmov.f32	s12, s5
 801b82a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b82e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b832:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b836:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b83a:	eeb0 6a43 	vmov.f32	s12, s6
 801b83e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b842:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b846:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b84a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b84e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b852:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b856:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b85a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b85e:	ee12 2a90 	vmov	r2, s5
 801b862:	eef0 2a47 	vmov.f32	s5, s14
 801b866:	fb92 f3f3 	sdiv	r3, r2, r3
 801b86a:	ee13 2a10 	vmov	r2, s6
 801b86e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b870:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b872:	eeb0 3a67 	vmov.f32	s6, s15
 801b876:	fb92 f3f3 	sdiv	r3, r2, r3
 801b87a:	9a03      	ldr	r2, [sp, #12]
 801b87c:	9314      	str	r3, [sp, #80]	; 0x50
 801b87e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b880:	bf08      	it	eq
 801b882:	4613      	moveq	r3, r2
 801b884:	e789      	b.n	801b79a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b886:	1406      	asrs	r6, r0, #16
 801b888:	d42d      	bmi.n	801b8e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b88a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801b88e:	42b4      	cmp	r4, r6
 801b890:	dd29      	ble.n	801b8e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b892:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801b896:	d426      	bmi.n	801b8e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b898:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801b89c:	4562      	cmp	r2, ip
 801b89e:	dd22      	ble.n	801b8e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b8a0:	b224      	sxth	r4, r4
 801b8a2:	9a01      	ldr	r2, [sp, #4]
 801b8a4:	fb0c 6404 	mla	r4, ip, r4, r6
 801b8a8:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801b8ac:	0e22      	lsrs	r2, r4, #24
 801b8ae:	d01a      	beq.n	801b8e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b8b0:	9e04      	ldr	r6, [sp, #16]
 801b8b2:	4372      	muls	r2, r6
 801b8b4:	1c56      	adds	r6, r2, #1
 801b8b6:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b8ba:	0a26      	lsrs	r6, r4, #8
 801b8bc:	1212      	asrs	r2, r2, #8
 801b8be:	9605      	str	r6, [sp, #20]
 801b8c0:	2aff      	cmp	r2, #255	; 0xff
 801b8c2:	d116      	bne.n	801b8f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b8c4:	f06f 0201 	mvn.w	r2, #1
 801b8c8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b8cc:	fb02 fc07 	mul.w	ip, r2, r7
 801b8d0:	0962      	lsrs	r2, r4, #5
 801b8d2:	f026 0607 	bic.w	r6, r6, #7
 801b8d6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b8da:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b8de:	4316      	orrs	r6, r2
 801b8e0:	4326      	orrs	r6, r4
 801b8e2:	f825 600c 	strh.w	r6, [r5, ip]
 801b8e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b8e8:	3f01      	subs	r7, #1
 801b8ea:	4410      	add	r0, r2
 801b8ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b8ee:	4411      	add	r1, r2
 801b8f0:	e787      	b.n	801b802 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b8f2:	f06f 0601 	mvn.w	r6, #1
 801b8f6:	fa1f fa82 	uxth.w	sl, r2
 801b8fa:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801b8fe:	43d2      	mvns	r2, r2
 801b900:	437e      	muls	r6, r7
 801b902:	b2e4      	uxtb	r4, r4
 801b904:	fb1c fc0a 	smulbb	ip, ip, sl
 801b908:	b2d2      	uxtb	r2, r2
 801b90a:	f835 8006 	ldrh.w	r8, [r5, r6]
 801b90e:	fb14 f40a 	smulbb	r4, r4, sl
 801b912:	9602      	str	r6, [sp, #8]
 801b914:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b918:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801b91c:	fb16 f60a 	smulbb	r6, r6, sl
 801b920:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b924:	fb0e ce02 	mla	lr, lr, r2, ip
 801b928:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801b92c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b930:	fa1f fe8e 	uxth.w	lr, lr
 801b934:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b938:	fa5f f888 	uxtb.w	r8, r8
 801b93c:	fb0c 6c02 	mla	ip, ip, r2, r6
 801b940:	fb08 4402 	mla	r4, r8, r2, r4
 801b944:	f10e 0201 	add.w	r2, lr, #1
 801b948:	fa1f fc8c 	uxth.w	ip, ip
 801b94c:	b2a4      	uxth	r4, r4
 801b94e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b952:	9a02      	ldr	r2, [sp, #8]
 801b954:	1c66      	adds	r6, r4, #1
 801b956:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b95a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b95e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b962:	ea46 0e0e 	orr.w	lr, r6, lr
 801b966:	f10c 0601 	add.w	r6, ip, #1
 801b96a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b96e:	0976      	lsrs	r6, r6, #5
 801b970:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b974:	ea4e 0e06 	orr.w	lr, lr, r6
 801b978:	f825 e002 	strh.w	lr, [r5, r2]
 801b97c:	e7b3      	b.n	801b8e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b97e:	f04f 0800 	mov.w	r8, #0
 801b982:	eba3 0208 	sub.w	r2, r3, r8
 801b986:	2a00      	cmp	r2, #0
 801b988:	f77f af3e 	ble.w	801b808 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b98c:	1404      	asrs	r4, r0, #16
 801b98e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801b992:	140a      	asrs	r2, r1, #16
 801b994:	fb06 4202 	mla	r2, r6, r2, r4
 801b998:	9c01      	ldr	r4, [sp, #4]
 801b99a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801b99e:	0e22      	lsrs	r2, r4, #24
 801b9a0:	d015      	beq.n	801b9ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801b9a2:	9e04      	ldr	r6, [sp, #16]
 801b9a4:	4372      	muls	r2, r6
 801b9a6:	1c56      	adds	r6, r2, #1
 801b9a8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b9ac:	0a26      	lsrs	r6, r4, #8
 801b9ae:	1212      	asrs	r2, r2, #8
 801b9b0:	2aff      	cmp	r2, #255	; 0xff
 801b9b2:	d113      	bne.n	801b9dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801b9b4:	0962      	lsrs	r2, r4, #5
 801b9b6:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b9ba:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b9be:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b9c2:	f026 0607 	bic.w	r6, r6, #7
 801b9c6:	4316      	orrs	r6, r2
 801b9c8:	4326      	orrs	r6, r4
 801b9ca:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801b9ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b9d0:	f108 0801 	add.w	r8, r8, #1
 801b9d4:	4410      	add	r0, r2
 801b9d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b9d8:	4411      	add	r1, r2
 801b9da:	e7d2      	b.n	801b982 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b9dc:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801b9e0:	fa1f fa82 	uxth.w	sl, r2
 801b9e4:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801b9e8:	43d2      	mvns	r2, r2
 801b9ea:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b9ee:	fb17 f70a 	smulbb	r7, r7, sl
 801b9f2:	b2d2      	uxtb	r2, r2
 801b9f4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b9f8:	b2e4      	uxtb	r4, r4
 801b9fa:	b2f6      	uxtb	r6, r6
 801b9fc:	fb0c 7c02 	mla	ip, ip, r2, r7
 801ba00:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801ba04:	fb14 f40a 	smulbb	r4, r4, sl
 801ba08:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ba0c:	fa1f fc8c 	uxth.w	ip, ip
 801ba10:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ba14:	fb16 f60a 	smulbb	r6, r6, sl
 801ba18:	fa5f fe8e 	uxtb.w	lr, lr
 801ba1c:	fb0e 4402 	mla	r4, lr, r2, r4
 801ba20:	fb07 6702 	mla	r7, r7, r2, r6
 801ba24:	f10c 0201 	add.w	r2, ip, #1
 801ba28:	b2a4      	uxth	r4, r4
 801ba2a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801ba2e:	1c66      	adds	r6, r4, #1
 801ba30:	b2bf      	uxth	r7, r7
 801ba32:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ba36:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801ba3a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ba3e:	ea46 0c0c 	orr.w	ip, r6, ip
 801ba42:	1c7e      	adds	r6, r7, #1
 801ba44:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801ba48:	0976      	lsrs	r6, r6, #5
 801ba4a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ba4e:	ea4c 0c06 	orr.w	ip, ip, r6
 801ba52:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801ba56:	e7ba      	b.n	801b9ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801ba58:	b007      	add	sp, #28
 801ba5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ba60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ba60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba64:	b085      	sub	sp, #20
 801ba66:	468b      	mov	fp, r1
 801ba68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ba6c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ba6e:	9203      	str	r2, [sp, #12]
 801ba70:	6841      	ldr	r1, [r0, #4]
 801ba72:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801ba76:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ba7a:	fb01 2404 	mla	r4, r1, r4, r2
 801ba7e:	6802      	ldr	r2, [r0, #0]
 801ba80:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ba84:	f8d8 2000 	ldr.w	r2, [r8]
 801ba88:	9201      	str	r2, [sp, #4]
 801ba8a:	f1bb 0f00 	cmp.w	fp, #0
 801ba8e:	dc03      	bgt.n	801ba98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ba90:	9a03      	ldr	r2, [sp, #12]
 801ba92:	2a00      	cmp	r2, #0
 801ba94:	f340 814f 	ble.w	801bd36 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ba98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ba9a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ba9e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801baa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801baa4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801baa8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801baac:	2b00      	cmp	r3, #0
 801baae:	dd0e      	ble.n	801bace <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bab0:	1408      	asrs	r0, r1, #16
 801bab2:	d405      	bmi.n	801bac0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bab4:	42b8      	cmp	r0, r7
 801bab6:	da03      	bge.n	801bac0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bab8:	1410      	asrs	r0, r2, #16
 801baba:	d401      	bmi.n	801bac0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801babc:	42b0      	cmp	r0, r6
 801babe:	db07      	blt.n	801bad0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bac0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bac2:	3b01      	subs	r3, #1
 801bac4:	3402      	adds	r4, #2
 801bac6:	4401      	add	r1, r0
 801bac8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801baca:	4402      	add	r2, r0
 801bacc:	e7ee      	b.n	801baac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801bace:	d017      	beq.n	801bb00 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bad0:	1e58      	subs	r0, r3, #1
 801bad2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bad4:	fb05 1500 	mla	r5, r5, r0, r1
 801bad8:	142d      	asrs	r5, r5, #16
 801bada:	d409      	bmi.n	801baf0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801badc:	42bd      	cmp	r5, r7
 801bade:	da07      	bge.n	801baf0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bae0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bae2:	fb05 2000 	mla	r0, r5, r0, r2
 801bae6:	1400      	asrs	r0, r0, #16
 801bae8:	d402      	bmi.n	801baf0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801baea:	42b0      	cmp	r0, r6
 801baec:	f2c0 80ba 	blt.w	801bc64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801baf0:	2600      	movs	r6, #0
 801baf2:	1998      	adds	r0, r3, r6
 801baf4:	2800      	cmp	r0, #0
 801baf6:	dc3e      	bgt.n	801bb76 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801baf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bafc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bb00:	f1bb 0f00 	cmp.w	fp, #0
 801bb04:	f340 8117 	ble.w	801bd36 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801bb08:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bb0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bb12:	f1bb 0b01 	subs.w	fp, fp, #1
 801bb16:	eeb0 6a62 	vmov.f32	s12, s5
 801bb1a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bb1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bb22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb26:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bb2a:	eeb0 6a43 	vmov.f32	s12, s6
 801bb2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb32:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bb36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bb4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bb4e:	ee12 2a90 	vmov	r2, s5
 801bb52:	eef0 2a47 	vmov.f32	s5, s14
 801bb56:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb5a:	ee13 2a10 	vmov	r2, s6
 801bb5e:	9311      	str	r3, [sp, #68]	; 0x44
 801bb60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb62:	eeb0 3a67 	vmov.f32	s6, s15
 801bb66:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb6a:	9a03      	ldr	r2, [sp, #12]
 801bb6c:	9312      	str	r3, [sp, #72]	; 0x48
 801bb6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb70:	bf08      	it	eq
 801bb72:	4613      	moveq	r3, r2
 801bb74:	e789      	b.n	801ba8a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801bb76:	140f      	asrs	r7, r1, #16
 801bb78:	d424      	bmi.n	801bbc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bb7a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801bb7e:	42bd      	cmp	r5, r7
 801bb80:	dd20      	ble.n	801bbc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bb82:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801bb86:	d41d      	bmi.n	801bbc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bb88:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801bb8c:	4560      	cmp	r0, ip
 801bb8e:	dd19      	ble.n	801bbc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bb90:	b22d      	sxth	r5, r5
 801bb92:	9801      	ldr	r0, [sp, #4]
 801bb94:	fb0c 7505 	mla	r5, ip, r5, r7
 801bb98:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801bb9c:	0e07      	lsrs	r7, r0, #24
 801bb9e:	2fff      	cmp	r7, #255	; 0xff
 801bba0:	d116      	bne.n	801bbd0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bba2:	f06f 0501 	mvn.w	r5, #1
 801bba6:	fb05 f706 	mul.w	r7, r5, r6
 801bbaa:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801bbae:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801bbb2:	0945      	lsrs	r5, r0, #5
 801bbb4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801bbb8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bbbc:	ea4c 0505 	orr.w	r5, ip, r5
 801bbc0:	4305      	orrs	r5, r0
 801bbc2:	53e5      	strh	r5, [r4, r7]
 801bbc4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bbc6:	3e01      	subs	r6, #1
 801bbc8:	4401      	add	r1, r0
 801bbca:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bbcc:	4402      	add	r2, r0
 801bbce:	e790      	b.n	801baf2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bbd0:	b2fd      	uxtb	r5, r7
 801bbd2:	2f00      	cmp	r7, #0
 801bbd4:	d0f6      	beq.n	801bbc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bbd6:	f06f 0701 	mvn.w	r7, #1
 801bbda:	fa1f f985 	uxth.w	r9, r5
 801bbde:	43ed      	mvns	r5, r5
 801bbe0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801bbe4:	4377      	muls	r7, r6
 801bbe6:	fb1a fa09 	smulbb	sl, sl, r9
 801bbea:	b2ed      	uxtb	r5, r5
 801bbec:	f834 e007 	ldrh.w	lr, [r4, r7]
 801bbf0:	9702      	str	r7, [sp, #8]
 801bbf2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801bbf6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bbfa:	fb17 f709 	smulbb	r7, r7, r9
 801bbfe:	b2c0      	uxtb	r0, r0
 801bc00:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bc04:	fb10 f009 	smulbb	r0, r0, r9
 801bc08:	fb0c 7c05 	mla	ip, ip, r5, r7
 801bc0c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801bc10:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bc14:	fa1f fc8c 	uxth.w	ip, ip
 801bc18:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bc1c:	fa5f fe8e 	uxtb.w	lr, lr
 801bc20:	fb07 a705 	mla	r7, r7, r5, sl
 801bc24:	fb0e 0005 	mla	r0, lr, r5, r0
 801bc28:	f10c 0501 	add.w	r5, ip, #1
 801bc2c:	b2bf      	uxth	r7, r7
 801bc2e:	b280      	uxth	r0, r0
 801bc30:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bc34:	f100 0a01 	add.w	sl, r0, #1
 801bc38:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bc3c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801bc40:	9802      	ldr	r0, [sp, #8]
 801bc42:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bc46:	ea4a 0c0c 	orr.w	ip, sl, ip
 801bc4a:	f107 0a01 	add.w	sl, r7, #1
 801bc4e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801bc52:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bc56:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bc5a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801bc5e:	f824 c000 	strh.w	ip, [r4, r0]
 801bc62:	e7af      	b.n	801bbc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bc64:	f04f 0e00 	mov.w	lr, #0
 801bc68:	eba3 000e 	sub.w	r0, r3, lr
 801bc6c:	2800      	cmp	r0, #0
 801bc6e:	f77f af43 	ble.w	801baf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bc72:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801bc76:	140d      	asrs	r5, r1, #16
 801bc78:	1410      	asrs	r0, r2, #16
 801bc7a:	fb06 5000 	mla	r0, r6, r0, r5
 801bc7e:	9d01      	ldr	r5, [sp, #4]
 801bc80:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801bc84:	0e2e      	lsrs	r6, r5, #24
 801bc86:	2eff      	cmp	r6, #255	; 0xff
 801bc88:	d112      	bne.n	801bcb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801bc8a:	482c      	ldr	r0, [pc, #176]	; (801bd3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801bc8c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801bc90:	0968      	lsrs	r0, r5, #5
 801bc92:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801bc96:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801bc9a:	4330      	orrs	r0, r6
 801bc9c:	4328      	orrs	r0, r5
 801bc9e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801bca2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bca4:	f10e 0e01 	add.w	lr, lr, #1
 801bca8:	4401      	add	r1, r0
 801bcaa:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bcac:	4402      	add	r2, r0
 801bcae:	e7db      	b.n	801bc68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bcb0:	b2f0      	uxtb	r0, r6
 801bcb2:	2e00      	cmp	r6, #0
 801bcb4:	d0f5      	beq.n	801bca2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801bcb6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801bcba:	fa1f f980 	uxth.w	r9, r0
 801bcbe:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801bcc2:	43c0      	mvns	r0, r0
 801bcc4:	ea4f 272c 	mov.w	r7, ip, asr #8
 801bcc8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801bccc:	fb16 f609 	smulbb	r6, r6, r9
 801bcd0:	b2c0      	uxtb	r0, r0
 801bcd2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bcd6:	b2ed      	uxtb	r5, r5
 801bcd8:	fb1a fa09 	smulbb	sl, sl, r9
 801bcdc:	fb07 6700 	mla	r7, r7, r0, r6
 801bce0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801bce4:	fb15 f509 	smulbb	r5, r5, r9
 801bce8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bcec:	b2bf      	uxth	r7, r7
 801bcee:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bcf2:	fa5f fc8c 	uxtb.w	ip, ip
 801bcf6:	fb06 a600 	mla	r6, r6, r0, sl
 801bcfa:	fb0c 5500 	mla	r5, ip, r0, r5
 801bcfe:	1c78      	adds	r0, r7, #1
 801bd00:	b2b6      	uxth	r6, r6
 801bd02:	b2ad      	uxth	r5, r5
 801bd04:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801bd08:	f105 0a01 	add.w	sl, r5, #1
 801bd0c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801bd10:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bd14:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bd18:	ea4a 0707 	orr.w	r7, sl, r7
 801bd1c:	f106 0a01 	add.w	sl, r6, #1
 801bd20:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bd24:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bd28:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bd2c:	ea47 070a 	orr.w	r7, r7, sl
 801bd30:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801bd34:	e7b5      	b.n	801bca2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801bd36:	b005      	add	sp, #20
 801bd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd3c:	fffff800 	.word	0xfffff800

0801bd40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd44:	b087      	sub	sp, #28
 801bd46:	468b      	mov	fp, r1
 801bd48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bd4c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bd4e:	9203      	str	r2, [sp, #12]
 801bd50:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bd54:	6841      	ldr	r1, [r0, #4]
 801bd56:	9204      	str	r2, [sp, #16]
 801bd58:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801bd5c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801bd60:	fb01 2404 	mla	r4, r1, r4, r2
 801bd64:	6802      	ldr	r2, [r0, #0]
 801bd66:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bd6a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801bd6e:	3201      	adds	r2, #1
 801bd70:	f022 0201 	bic.w	r2, r2, #1
 801bd74:	9200      	str	r2, [sp, #0]
 801bd76:	f8d9 2000 	ldr.w	r2, [r9]
 801bd7a:	9201      	str	r2, [sp, #4]
 801bd7c:	f1bb 0f00 	cmp.w	fp, #0
 801bd80:	dc03      	bgt.n	801bd8a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801bd82:	9a03      	ldr	r2, [sp, #12]
 801bd84:	2a00      	cmp	r2, #0
 801bd86:	f340 816a 	ble.w	801c05e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801bd8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bd8c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801bd90:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bd94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bd96:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801bd9a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	dd0e      	ble.n	801bdc0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801bda2:	1402      	asrs	r2, r0, #16
 801bda4:	d405      	bmi.n	801bdb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bda6:	42ba      	cmp	r2, r7
 801bda8:	da03      	bge.n	801bdb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bdaa:	140a      	asrs	r2, r1, #16
 801bdac:	d401      	bmi.n	801bdb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bdae:	42b2      	cmp	r2, r6
 801bdb0:	db07      	blt.n	801bdc2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801bdb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bdb4:	3b01      	subs	r3, #1
 801bdb6:	3402      	adds	r4, #2
 801bdb8:	4410      	add	r0, r2
 801bdba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bdbc:	4411      	add	r1, r2
 801bdbe:	e7ee      	b.n	801bd9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801bdc0:	d017      	beq.n	801bdf2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bdc2:	1e5a      	subs	r2, r3, #1
 801bdc4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bdc6:	fb05 0502 	mla	r5, r5, r2, r0
 801bdca:	142d      	asrs	r5, r5, #16
 801bdcc:	d409      	bmi.n	801bde2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bdce:	42bd      	cmp	r5, r7
 801bdd0:	da07      	bge.n	801bde2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bdd2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801bdd4:	fb05 1202 	mla	r2, r5, r2, r1
 801bdd8:	1412      	asrs	r2, r2, #16
 801bdda:	d402      	bmi.n	801bde2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bddc:	42b2      	cmp	r2, r6
 801bdde:	f2c0 80c8 	blt.w	801bf72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801bde2:	2700      	movs	r7, #0
 801bde4:	19da      	adds	r2, r3, r7
 801bde6:	2a00      	cmp	r2, #0
 801bde8:	dc3e      	bgt.n	801be68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801bdea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bdee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bdf2:	f1bb 0f00 	cmp.w	fp, #0
 801bdf6:	f340 8132 	ble.w	801c05e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801bdfa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bdfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be04:	f1bb 0b01 	subs.w	fp, fp, #1
 801be08:	eeb0 6a62 	vmov.f32	s12, s5
 801be0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801be10:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be18:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801be1c:	eeb0 6a43 	vmov.f32	s12, s6
 801be20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be24:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801be28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be30:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be40:	ee12 2a90 	vmov	r2, s5
 801be44:	eef0 2a47 	vmov.f32	s5, s14
 801be48:	fb92 f3f3 	sdiv	r3, r2, r3
 801be4c:	ee13 2a10 	vmov	r2, s6
 801be50:	9313      	str	r3, [sp, #76]	; 0x4c
 801be52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be54:	eeb0 3a67 	vmov.f32	s6, s15
 801be58:	fb92 f3f3 	sdiv	r3, r2, r3
 801be5c:	9a03      	ldr	r2, [sp, #12]
 801be5e:	9314      	str	r3, [sp, #80]	; 0x50
 801be60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be62:	bf08      	it	eq
 801be64:	4613      	moveq	r3, r2
 801be66:	e789      	b.n	801bd7c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801be68:	1405      	asrs	r5, r0, #16
 801be6a:	d436      	bmi.n	801beda <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801be6c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801be70:	42aa      	cmp	r2, r5
 801be72:	dd32      	ble.n	801beda <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801be74:	140e      	asrs	r6, r1, #16
 801be76:	d430      	bmi.n	801beda <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801be78:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801be7c:	42b2      	cmp	r2, r6
 801be7e:	dd2c      	ble.n	801beda <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801be80:	9a00      	ldr	r2, [sp, #0]
 801be82:	fb06 5502 	mla	r5, r6, r2, r5
 801be86:	9e01      	ldr	r6, [sp, #4]
 801be88:	086a      	lsrs	r2, r5, #1
 801be8a:	5cb2      	ldrb	r2, [r6, r2]
 801be8c:	07ee      	lsls	r6, r5, #31
 801be8e:	bf54      	ite	pl
 801be90:	f002 020f 	andpl.w	r2, r2, #15
 801be94:	1112      	asrmi	r2, r2, #4
 801be96:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801be9a:	b2d2      	uxtb	r2, r2
 801be9c:	b1ea      	cbz	r2, 801beda <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801be9e:	9d04      	ldr	r5, [sp, #16]
 801bea0:	436a      	muls	r2, r5
 801bea2:	1c55      	adds	r5, r2, #1
 801bea4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801bea8:	4d6e      	ldr	r5, [pc, #440]	; (801c064 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801beaa:	1212      	asrs	r2, r2, #8
 801beac:	682d      	ldr	r5, [r5, #0]
 801beae:	2aff      	cmp	r2, #255	; 0xff
 801beb0:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801beb4:	9605      	str	r6, [sp, #20]
 801beb6:	d116      	bne.n	801bee6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801beb8:	f06f 0201 	mvn.w	r2, #1
 801bebc:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801bec0:	fb02 fc07 	mul.w	ip, r2, r7
 801bec4:	096a      	lsrs	r2, r5, #5
 801bec6:	f026 0607 	bic.w	r6, r6, #7
 801beca:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801bece:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bed2:	4316      	orrs	r6, r2
 801bed4:	432e      	orrs	r6, r5
 801bed6:	f824 600c 	strh.w	r6, [r4, ip]
 801beda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bedc:	3f01      	subs	r7, #1
 801bede:	4410      	add	r0, r2
 801bee0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bee2:	4411      	add	r1, r2
 801bee4:	e77e      	b.n	801bde4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801bee6:	f06f 0601 	mvn.w	r6, #1
 801beea:	fa1f fa82 	uxth.w	sl, r2
 801beee:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801bef2:	43d2      	mvns	r2, r2
 801bef4:	437e      	muls	r6, r7
 801bef6:	b2ed      	uxtb	r5, r5
 801bef8:	fb1c fc0a 	smulbb	ip, ip, sl
 801befc:	b2d2      	uxtb	r2, r2
 801befe:	f834 8006 	ldrh.w	r8, [r4, r6]
 801bf02:	fb15 f50a 	smulbb	r5, r5, sl
 801bf06:	9602      	str	r6, [sp, #8]
 801bf08:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801bf0c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801bf10:	fb16 f60a 	smulbb	r6, r6, sl
 801bf14:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801bf18:	fb0e ce02 	mla	lr, lr, r2, ip
 801bf1c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801bf20:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bf24:	fa1f fe8e 	uxth.w	lr, lr
 801bf28:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801bf2c:	fa5f f888 	uxtb.w	r8, r8
 801bf30:	fb0c 6c02 	mla	ip, ip, r2, r6
 801bf34:	fb08 5502 	mla	r5, r8, r2, r5
 801bf38:	f10e 0201 	add.w	r2, lr, #1
 801bf3c:	fa1f fc8c 	uxth.w	ip, ip
 801bf40:	b2ad      	uxth	r5, r5
 801bf42:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801bf46:	9a02      	ldr	r2, [sp, #8]
 801bf48:	1c6e      	adds	r6, r5, #1
 801bf4a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801bf4e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801bf52:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bf56:	ea46 0e0e 	orr.w	lr, r6, lr
 801bf5a:	f10c 0601 	add.w	r6, ip, #1
 801bf5e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801bf62:	0976      	lsrs	r6, r6, #5
 801bf64:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bf68:	ea4e 0e06 	orr.w	lr, lr, r6
 801bf6c:	f824 e002 	strh.w	lr, [r4, r2]
 801bf70:	e7b3      	b.n	801beda <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bf72:	f04f 0800 	mov.w	r8, #0
 801bf76:	eba3 0208 	sub.w	r2, r3, r8
 801bf7a:	2a00      	cmp	r2, #0
 801bf7c:	f77f af35 	ble.w	801bdea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801bf80:	1402      	asrs	r2, r0, #16
 801bf82:	9e00      	ldr	r6, [sp, #0]
 801bf84:	140d      	asrs	r5, r1, #16
 801bf86:	fb06 2505 	mla	r5, r6, r5, r2
 801bf8a:	9e01      	ldr	r6, [sp, #4]
 801bf8c:	086a      	lsrs	r2, r5, #1
 801bf8e:	07ed      	lsls	r5, r5, #31
 801bf90:	5cb2      	ldrb	r2, [r6, r2]
 801bf92:	bf54      	ite	pl
 801bf94:	f002 020f 	andpl.w	r2, r2, #15
 801bf98:	1112      	asrmi	r2, r2, #4
 801bf9a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bf9e:	b2d2      	uxtb	r2, r2
 801bfa0:	b1c2      	cbz	r2, 801bfd4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bfa2:	9d04      	ldr	r5, [sp, #16]
 801bfa4:	436a      	muls	r2, r5
 801bfa6:	1c55      	adds	r5, r2, #1
 801bfa8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801bfac:	4d2d      	ldr	r5, [pc, #180]	; (801c064 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801bfae:	1212      	asrs	r2, r2, #8
 801bfb0:	682e      	ldr	r6, [r5, #0]
 801bfb2:	2aff      	cmp	r2, #255	; 0xff
 801bfb4:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801bfb8:	d113      	bne.n	801bfe2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801bfba:	0972      	lsrs	r2, r6, #5
 801bfbc:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801bfc0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801bfc4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bfc8:	f025 0507 	bic.w	r5, r5, #7
 801bfcc:	4315      	orrs	r5, r2
 801bfce:	4335      	orrs	r5, r6
 801bfd0:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801bfd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bfd6:	f108 0801 	add.w	r8, r8, #1
 801bfda:	4410      	add	r0, r2
 801bfdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bfde:	4411      	add	r1, r2
 801bfe0:	e7c9      	b.n	801bf76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801bfe2:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801bfe6:	fa1f fa82 	uxth.w	sl, r2
 801bfea:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801bfee:	43d2      	mvns	r2, r2
 801bff0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bff4:	fb17 f70a 	smulbb	r7, r7, sl
 801bff8:	b2d2      	uxtb	r2, r2
 801bffa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bffe:	b2f6      	uxtb	r6, r6
 801c000:	b2ed      	uxtb	r5, r5
 801c002:	fb0c 7c02 	mla	ip, ip, r2, r7
 801c006:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c00a:	fb16 f60a 	smulbb	r6, r6, sl
 801c00e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c012:	fa1f fc8c 	uxth.w	ip, ip
 801c016:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c01a:	fb15 f50a 	smulbb	r5, r5, sl
 801c01e:	fa5f fe8e 	uxtb.w	lr, lr
 801c022:	fb0e 6602 	mla	r6, lr, r2, r6
 801c026:	fb07 5702 	mla	r7, r7, r2, r5
 801c02a:	f10c 0201 	add.w	r2, ip, #1
 801c02e:	b2b6      	uxth	r6, r6
 801c030:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c034:	1c75      	adds	r5, r6, #1
 801c036:	b2bf      	uxth	r7, r7
 801c038:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c03c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801c040:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c044:	ea45 0c0c 	orr.w	ip, r5, ip
 801c048:	1c7d      	adds	r5, r7, #1
 801c04a:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801c04e:	096d      	lsrs	r5, r5, #5
 801c050:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c054:	ea4c 0c05 	orr.w	ip, ip, r5
 801c058:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801c05c:	e7ba      	b.n	801bfd4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c05e:	b007      	add	sp, #28
 801c060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c064:	2400aef4 	.word	0x2400aef4

0801c068 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c06c:	b087      	sub	sp, #28
 801c06e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c072:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801c37c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801c076:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c078:	9101      	str	r1, [sp, #4]
 801c07a:	9205      	str	r2, [sp, #20]
 801c07c:	6841      	ldr	r1, [r0, #4]
 801c07e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801c082:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c086:	fb01 2404 	mla	r4, r1, r4, r2
 801c08a:	6802      	ldr	r2, [r0, #0]
 801c08c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c090:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c094:	3201      	adds	r2, #1
 801c096:	f022 0201 	bic.w	r2, r2, #1
 801c09a:	9202      	str	r2, [sp, #8]
 801c09c:	f8db 2000 	ldr.w	r2, [fp]
 801c0a0:	9203      	str	r2, [sp, #12]
 801c0a2:	9a01      	ldr	r2, [sp, #4]
 801c0a4:	2a00      	cmp	r2, #0
 801c0a6:	dc03      	bgt.n	801c0b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c0a8:	9a05      	ldr	r2, [sp, #20]
 801c0aa:	2a00      	cmp	r2, #0
 801c0ac:	f340 8162 	ble.w	801c374 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801c0b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c0b2:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801c0b6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c0ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c0bc:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801c0c0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	dd0e      	ble.n	801c0e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c0c8:	1402      	asrs	r2, r0, #16
 801c0ca:	d405      	bmi.n	801c0d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c0cc:	42ba      	cmp	r2, r7
 801c0ce:	da03      	bge.n	801c0d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c0d0:	140a      	asrs	r2, r1, #16
 801c0d2:	d401      	bmi.n	801c0d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c0d4:	42b2      	cmp	r2, r6
 801c0d6:	db07      	blt.n	801c0e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c0d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c0da:	3b01      	subs	r3, #1
 801c0dc:	3402      	adds	r4, #2
 801c0de:	4410      	add	r0, r2
 801c0e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c0e2:	4411      	add	r1, r2
 801c0e4:	e7ee      	b.n	801c0c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c0e6:	d017      	beq.n	801c118 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c0e8:	1e5a      	subs	r2, r3, #1
 801c0ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c0ec:	fb05 0502 	mla	r5, r5, r2, r0
 801c0f0:	142d      	asrs	r5, r5, #16
 801c0f2:	d409      	bmi.n	801c108 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c0f4:	42bd      	cmp	r5, r7
 801c0f6:	da07      	bge.n	801c108 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c0f8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c0fa:	fb05 1202 	mla	r2, r5, r2, r1
 801c0fe:	1412      	asrs	r2, r2, #16
 801c100:	d402      	bmi.n	801c108 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c102:	42b2      	cmp	r2, r6
 801c104:	f2c0 80c3 	blt.w	801c28e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801c108:	2500      	movs	r5, #0
 801c10a:	195a      	adds	r2, r3, r5
 801c10c:	2a00      	cmp	r2, #0
 801c10e:	dc3f      	bgt.n	801c190 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c110:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c114:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c118:	9b01      	ldr	r3, [sp, #4]
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	f340 812a 	ble.w	801c374 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801c120:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c126:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c12a:	eeb0 6a62 	vmov.f32	s12, s5
 801c12e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c132:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c136:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c13a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c13e:	eeb0 6a43 	vmov.f32	s12, s6
 801c142:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c146:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c14a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c14e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c152:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c156:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c15a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c15e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c162:	ee12 2a90 	vmov	r2, s5
 801c166:	eef0 2a47 	vmov.f32	s5, s14
 801c16a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c16e:	ee13 2a10 	vmov	r2, s6
 801c172:	9313      	str	r3, [sp, #76]	; 0x4c
 801c174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c176:	eeb0 3a67 	vmov.f32	s6, s15
 801c17a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c17e:	9314      	str	r3, [sp, #80]	; 0x50
 801c180:	9b01      	ldr	r3, [sp, #4]
 801c182:	9a05      	ldr	r2, [sp, #20]
 801c184:	3b01      	subs	r3, #1
 801c186:	9301      	str	r3, [sp, #4]
 801c188:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c18a:	bf08      	it	eq
 801c18c:	4613      	moveq	r3, r2
 801c18e:	e788      	b.n	801c0a2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c190:	1406      	asrs	r6, r0, #16
 801c192:	d42c      	bmi.n	801c1ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c194:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c198:	42b2      	cmp	r2, r6
 801c19a:	dd28      	ble.n	801c1ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c19c:	140f      	asrs	r7, r1, #16
 801c19e:	d426      	bmi.n	801c1ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c1a0:	f8db 200c 	ldr.w	r2, [fp, #12]
 801c1a4:	42ba      	cmp	r2, r7
 801c1a6:	dd22      	ble.n	801c1ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c1a8:	9a02      	ldr	r2, [sp, #8]
 801c1aa:	fb07 6602 	mla	r6, r7, r2, r6
 801c1ae:	9f03      	ldr	r7, [sp, #12]
 801c1b0:	0872      	lsrs	r2, r6, #1
 801c1b2:	07f6      	lsls	r6, r6, #31
 801c1b4:	5cba      	ldrb	r2, [r7, r2]
 801c1b6:	bf54      	ite	pl
 801c1b8:	f002 020f 	andpl.w	r2, r2, #15
 801c1bc:	1112      	asrmi	r2, r2, #4
 801c1be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c1c2:	b2d2      	uxtb	r2, r2
 801c1c4:	2aff      	cmp	r2, #255	; 0xff
 801c1c6:	d118      	bne.n	801c1fa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c1c8:	f06f 0601 	mvn.w	r6, #1
 801c1cc:	f8d8 2000 	ldr.w	r2, [r8]
 801c1d0:	fb06 f705 	mul.w	r7, r6, r5
 801c1d4:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801c1d8:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801c1dc:	0956      	lsrs	r6, r2, #5
 801c1de:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c1e2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c1e6:	ea4c 0606 	orr.w	r6, ip, r6
 801c1ea:	4316      	orrs	r6, r2
 801c1ec:	53e6      	strh	r6, [r4, r7]
 801c1ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c1f0:	3d01      	subs	r5, #1
 801c1f2:	4410      	add	r0, r2
 801c1f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c1f6:	4411      	add	r1, r2
 801c1f8:	e787      	b.n	801c10a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c1fa:	2a00      	cmp	r2, #0
 801c1fc:	d0f7      	beq.n	801c1ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c1fe:	f06f 0601 	mvn.w	r6, #1
 801c202:	f8d8 c000 	ldr.w	ip, [r8]
 801c206:	fa1f f982 	uxth.w	r9, r2
 801c20a:	43d2      	mvns	r2, r2
 801c20c:	436e      	muls	r6, r5
 801c20e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801c212:	b2d2      	uxtb	r2, r2
 801c214:	f834 e006 	ldrh.w	lr, [r4, r6]
 801c218:	fb1a fa09 	smulbb	sl, sl, r9
 801c21c:	9604      	str	r6, [sp, #16]
 801c21e:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801c222:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c226:	fb16 f609 	smulbb	r6, r6, r9
 801c22a:	fa5f fc8c 	uxtb.w	ip, ip
 801c22e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c232:	fb1c fc09 	smulbb	ip, ip, r9
 801c236:	fb07 6702 	mla	r7, r7, r2, r6
 801c23a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c23e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c242:	b2bf      	uxth	r7, r7
 801c244:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c248:	fa5f fe8e 	uxtb.w	lr, lr
 801c24c:	fb06 a602 	mla	r6, r6, r2, sl
 801c250:	fb0e cc02 	mla	ip, lr, r2, ip
 801c254:	1c7a      	adds	r2, r7, #1
 801c256:	b2b6      	uxth	r6, r6
 801c258:	fa1f fc8c 	uxth.w	ip, ip
 801c25c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c260:	9a04      	ldr	r2, [sp, #16]
 801c262:	f10c 0a01 	add.w	sl, ip, #1
 801c266:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c26a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801c26e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c272:	ea4a 0707 	orr.w	r7, sl, r7
 801c276:	f106 0a01 	add.w	sl, r6, #1
 801c27a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c27e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c282:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c286:	ea47 070a 	orr.w	r7, r7, sl
 801c28a:	52a7      	strh	r7, [r4, r2]
 801c28c:	e7af      	b.n	801c1ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c28e:	f04f 0e00 	mov.w	lr, #0
 801c292:	eba3 020e 	sub.w	r2, r3, lr
 801c296:	2a00      	cmp	r2, #0
 801c298:	f77f af3a 	ble.w	801c110 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c29c:	1402      	asrs	r2, r0, #16
 801c29e:	9e02      	ldr	r6, [sp, #8]
 801c2a0:	140d      	asrs	r5, r1, #16
 801c2a2:	fb06 2505 	mla	r5, r6, r5, r2
 801c2a6:	9e03      	ldr	r6, [sp, #12]
 801c2a8:	086a      	lsrs	r2, r5, #1
 801c2aa:	07ed      	lsls	r5, r5, #31
 801c2ac:	5cb2      	ldrb	r2, [r6, r2]
 801c2ae:	bf54      	ite	pl
 801c2b0:	f002 020f 	andpl.w	r2, r2, #15
 801c2b4:	1112      	asrmi	r2, r2, #4
 801c2b6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c2ba:	b2d2      	uxtb	r2, r2
 801c2bc:	2aff      	cmp	r2, #255	; 0xff
 801c2be:	d115      	bne.n	801c2ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c2c0:	f8d8 5000 	ldr.w	r5, [r8]
 801c2c4:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801c2c8:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801c2cc:	096a      	lsrs	r2, r5, #5
 801c2ce:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c2d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c2d6:	4332      	orrs	r2, r6
 801c2d8:	432a      	orrs	r2, r5
 801c2da:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801c2de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c2e0:	f10e 0e01 	add.w	lr, lr, #1
 801c2e4:	4410      	add	r0, r2
 801c2e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c2e8:	4411      	add	r1, r2
 801c2ea:	e7d2      	b.n	801c292 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c2ec:	2a00      	cmp	r2, #0
 801c2ee:	d0f6      	beq.n	801c2de <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c2f0:	f8d8 7000 	ldr.w	r7, [r8]
 801c2f4:	fa1f f982 	uxth.w	r9, r2
 801c2f8:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801c2fc:	43d2      	mvns	r2, r2
 801c2fe:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801c302:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c306:	ea4f 262c 	mov.w	r6, ip, asr #8
 801c30a:	fb15 f509 	smulbb	r5, r5, r9
 801c30e:	b2d2      	uxtb	r2, r2
 801c310:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c314:	b2ff      	uxtb	r7, r7
 801c316:	fb1a fa09 	smulbb	sl, sl, r9
 801c31a:	fb06 5602 	mla	r6, r6, r2, r5
 801c31e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c322:	fb17 f709 	smulbb	r7, r7, r9
 801c326:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c32a:	b2b6      	uxth	r6, r6
 801c32c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c330:	fa5f fc8c 	uxtb.w	ip, ip
 801c334:	fb05 a502 	mla	r5, r5, r2, sl
 801c338:	fb0c 7702 	mla	r7, ip, r2, r7
 801c33c:	1c72      	adds	r2, r6, #1
 801c33e:	b2ad      	uxth	r5, r5
 801c340:	b2bf      	uxth	r7, r7
 801c342:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801c346:	f107 0a01 	add.w	sl, r7, #1
 801c34a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c34e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c352:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c356:	ea4a 0606 	orr.w	r6, sl, r6
 801c35a:	f105 0a01 	add.w	sl, r5, #1
 801c35e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c362:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c366:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c36a:	ea46 060a 	orr.w	r6, r6, sl
 801c36e:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801c372:	e7b4      	b.n	801c2de <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c374:	b007      	add	sp, #28
 801c376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c37a:	bf00      	nop
 801c37c:	2400aef4 	.word	0x2400aef4

0801c380 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c380:	4770      	bx	lr

0801c382 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c382:	4770      	bx	lr

0801c384 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c384:	4770      	bx	lr

0801c386 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c386:	4770      	bx	lr

0801c388 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c388:	4770      	bx	lr

0801c38a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c38a:	4770      	bx	lr

0801c38c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c38c:	4770      	bx	lr

0801c38e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c38e:	4770      	bx	lr

0801c390 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c390:	4770      	bx	lr

0801c392 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c392:	4770      	bx	lr

0801c394 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c394:	4770      	bx	lr

0801c396 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c396:	4770      	bx	lr

0801c398 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c398:	4770      	bx	lr

0801c39a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c39a:	4770      	bx	lr

0801c39c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c39c:	4770      	bx	lr

0801c39e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c39e:	4770      	bx	lr

0801c3a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c3a0:	4770      	bx	lr

0801c3a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c3a2:	4770      	bx	lr

0801c3a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c3a4:	4770      	bx	lr

0801c3a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c3a6:	4770      	bx	lr

0801c3a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c3a8:	4770      	bx	lr

0801c3aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c3aa:	4770      	bx	lr

0801c3ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c3ac:	4770      	bx	lr

0801c3ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c3ae:	4770      	bx	lr

0801c3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c3b0:	4770      	bx	lr

0801c3b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c3b2:	4770      	bx	lr

0801c3b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c3b4:	4770      	bx	lr

0801c3b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c3b6:	4770      	bx	lr

0801c3b8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801c3b8:	b508      	push	{r3, lr}
 801c3ba:	4b06      	ldr	r3, [pc, #24]	; (801c3d4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801c3bc:	8818      	ldrh	r0, [r3, #0]
 801c3be:	b928      	cbnz	r0, 801c3cc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801c3c0:	4b05      	ldr	r3, [pc, #20]	; (801c3d8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801c3c2:	2150      	movs	r1, #80	; 0x50
 801c3c4:	4a05      	ldr	r2, [pc, #20]	; (801c3dc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801c3c6:	4806      	ldr	r0, [pc, #24]	; (801c3e0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801c3c8:	f009 fbd4 	bl	8025b74 <__assert_func>
 801c3cc:	0040      	lsls	r0, r0, #1
 801c3ce:	b280      	uxth	r0, r0
 801c3d0:	bd08      	pop	{r3, pc}
 801c3d2:	bf00      	nop
 801c3d4:	2400aee6 	.word	0x2400aee6
 801c3d8:	0802a10f 	.word	0x0802a10f
 801c3dc:	0802a708 	.word	0x0802a708
 801c3e0:	0802a151 	.word	0x0802a151

0801c3e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3e8:	b08b      	sub	sp, #44	; 0x2c
 801c3ea:	460f      	mov	r7, r1
 801c3ec:	4616      	mov	r6, r2
 801c3ee:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801c3f2:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801c3f6:	f1bb 0f00 	cmp.w	fp, #0
 801c3fa:	d049      	beq.n	801c490 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c3fc:	6810      	ldr	r0, [r2, #0]
 801c3fe:	ad06      	add	r5, sp, #24
 801c400:	6851      	ldr	r1, [r2, #4]
 801c402:	c503      	stmia	r5!, {r0, r1}
 801c404:	6818      	ldr	r0, [r3, #0]
 801c406:	ad08      	add	r5, sp, #32
 801c408:	6859      	ldr	r1, [r3, #4]
 801c40a:	c503      	stmia	r5!, {r0, r1}
 801c40c:	a806      	add	r0, sp, #24
 801c40e:	f7fa fd13 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c412:	4631      	mov	r1, r6
 801c414:	a808      	add	r0, sp, #32
 801c416:	f7fa fd37 	bl	8016e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c41a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c41e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c422:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c426:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801c42a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801c42e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801c432:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801c436:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c43a:	4f5f      	ldr	r7, [pc, #380]	; (801c5b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c43c:	440a      	add	r2, r1
 801c43e:	6838      	ldr	r0, [r7, #0]
 801c440:	46b9      	mov	r9, r7
 801c442:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c446:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c44a:	4413      	add	r3, r2
 801c44c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c450:	6803      	ldr	r3, [r0, #0]
 801c452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c454:	4798      	blx	r3
 801c456:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c45a:	d01c      	beq.n	801c496 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801c45c:	f010 0f04 	tst.w	r0, #4
 801c460:	d01d      	beq.n	801c49e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c462:	f8d9 0000 	ldr.w	r0, [r9]
 801c466:	2700      	movs	r7, #0
 801c468:	b2ad      	uxth	r5, r5
 801c46a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c46e:	6801      	ldr	r1, [r0, #0]
 801c470:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c474:	f8cd b00c 	str.w	fp, [sp, #12]
 801c478:	9501      	str	r5, [sp, #4]
 801c47a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801c47e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801c482:	9402      	str	r4, [sp, #8]
 801c484:	fa1f f488 	uxth.w	r4, r8
 801c488:	9400      	str	r4, [sp, #0]
 801c48a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801c48c:	4631      	mov	r1, r6
 801c48e:	47a0      	blx	r4
 801c490:	b00b      	add	sp, #44	; 0x2c
 801c492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c496:	b914      	cbnz	r4, 801c49e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c498:	f010 0f01 	tst.w	r0, #1
 801c49c:	e7e0      	b.n	801c460 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801c49e:	f8d9 0000 	ldr.w	r0, [r9]
 801c4a2:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801c4a6:	6803      	ldr	r3, [r0, #0]
 801c4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c4aa:	4798      	blx	r3
 801c4ac:	4b43      	ldr	r3, [pc, #268]	; (801c5bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801c4ae:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801c4b2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c4b6:	881a      	ldrh	r2, [r3, #0]
 801c4b8:	469a      	mov	sl, r3
 801c4ba:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c4be:	fb05 f502 	mul.w	r5, r5, r2
 801c4c2:	fb02 1404 	mla	r4, r2, r4, r1
 801c4c6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c4ca:	d059      	beq.n	801c580 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801c4cc:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801c4d0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c4d4:	fa1f f28b 	uxth.w	r2, fp
 801c4d8:	469e      	mov	lr, r3
 801c4da:	fa1f f989 	uxth.w	r9, r9
 801c4de:	42ac      	cmp	r4, r5
 801c4e0:	d264      	bcs.n	801c5ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c4e2:	eb04 0a07 	add.w	sl, r4, r7
 801c4e6:	4554      	cmp	r4, sl
 801c4e8:	d23d      	bcs.n	801c566 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801c4ea:	8821      	ldrh	r1, [r4, #0]
 801c4ec:	f836 3b02 	ldrh.w	r3, [r6], #2
 801c4f0:	1208      	asrs	r0, r1, #8
 801c4f2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c4f6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c4fa:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801c4fe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c502:	00c9      	lsls	r1, r1, #3
 801c504:	fb10 f009 	smulbb	r0, r0, r9
 801c508:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c50c:	b2c9      	uxtb	r1, r1
 801c50e:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c512:	10d8      	asrs	r0, r3, #3
 801c514:	fb1b fb09 	smulbb	fp, fp, r9
 801c518:	00db      	lsls	r3, r3, #3
 801c51a:	fa1f fc8c 	uxth.w	ip, ip
 801c51e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c522:	fb11 f109 	smulbb	r1, r1, r9
 801c526:	b2db      	uxtb	r3, r3
 801c528:	fb00 b002 	mla	r0, r0, r2, fp
 801c52c:	f10c 0b01 	add.w	fp, ip, #1
 801c530:	fb03 1302 	mla	r3, r3, r2, r1
 801c534:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c538:	b29b      	uxth	r3, r3
 801c53a:	b280      	uxth	r0, r0
 801c53c:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801c540:	f103 0c01 	add.w	ip, r3, #1
 801c544:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c548:	1c43      	adds	r3, r0, #1
 801c54a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c54e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c552:	0940      	lsrs	r0, r0, #5
 801c554:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c558:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c55c:	ea4c 0c00 	orr.w	ip, ip, r0
 801c560:	f824 cb02 	strh.w	ip, [r4], #2
 801c564:	e7bf      	b.n	801c4e6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801c566:	f8be 3000 	ldrh.w	r3, [lr]
 801c56a:	eba3 0308 	sub.w	r3, r3, r8
 801c56e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c572:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c576:	eba3 0308 	sub.w	r3, r3, r8
 801c57a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c57e:	e7ae      	b.n	801c4de <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801c580:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c584:	f8d9 0000 	ldr.w	r0, [r9]
 801c588:	42ac      	cmp	r4, r5
 801c58a:	6803      	ldr	r3, [r0, #0]
 801c58c:	d20e      	bcs.n	801c5ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c58e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801c592:	4632      	mov	r2, r6
 801c594:	463b      	mov	r3, r7
 801c596:	4621      	mov	r1, r4
 801c598:	47c0      	blx	r8
 801c59a:	f8ba 3000 	ldrh.w	r3, [sl]
 801c59e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c5a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c5a6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c5aa:	e7eb      	b.n	801c584 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801c5ac:	4b02      	ldr	r3, [pc, #8]	; (801c5b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c5ae:	6818      	ldr	r0, [r3, #0]
 801c5b0:	6803      	ldr	r3, [r0, #0]
 801c5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c5b4:	4798      	blx	r3
 801c5b6:	e76b      	b.n	801c490 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c5b8:	2400aeec 	.word	0x2400aeec
 801c5bc:	2400aee6 	.word	0x2400aee6

0801c5c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c5c0:	b510      	push	{r4, lr}
 801c5c2:	4604      	mov	r4, r0
 801c5c4:	2104      	movs	r1, #4
 801c5c6:	f009 faa6 	bl	8025b16 <_ZdlPvj>
 801c5ca:	4620      	mov	r0, r4
 801c5cc:	bd10      	pop	{r4, pc}

0801c5ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c5ce:	b510      	push	{r4, lr}
 801c5d0:	4604      	mov	r4, r0
 801c5d2:	2104      	movs	r1, #4
 801c5d4:	f009 fa9f 	bl	8025b16 <_ZdlPvj>
 801c5d8:	4620      	mov	r0, r4
 801c5da:	bd10      	pop	{r4, pc}

0801c5dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c5dc:	b510      	push	{r4, lr}
 801c5de:	4604      	mov	r4, r0
 801c5e0:	2104      	movs	r1, #4
 801c5e2:	f009 fa98 	bl	8025b16 <_ZdlPvj>
 801c5e6:	4620      	mov	r0, r4
 801c5e8:	bd10      	pop	{r4, pc}

0801c5ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c5ea:	b510      	push	{r4, lr}
 801c5ec:	4604      	mov	r4, r0
 801c5ee:	2104      	movs	r1, #4
 801c5f0:	f009 fa91 	bl	8025b16 <_ZdlPvj>
 801c5f4:	4620      	mov	r0, r4
 801c5f6:	bd10      	pop	{r4, pc}

0801c5f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c5f8:	b510      	push	{r4, lr}
 801c5fa:	4604      	mov	r4, r0
 801c5fc:	2104      	movs	r1, #4
 801c5fe:	f009 fa8a 	bl	8025b16 <_ZdlPvj>
 801c602:	4620      	mov	r0, r4
 801c604:	bd10      	pop	{r4, pc}

0801c606 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c606:	b510      	push	{r4, lr}
 801c608:	4604      	mov	r4, r0
 801c60a:	2104      	movs	r1, #4
 801c60c:	f009 fa83 	bl	8025b16 <_ZdlPvj>
 801c610:	4620      	mov	r0, r4
 801c612:	bd10      	pop	{r4, pc}

0801c614 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c614:	b510      	push	{r4, lr}
 801c616:	4604      	mov	r4, r0
 801c618:	2104      	movs	r1, #4
 801c61a:	f009 fa7c 	bl	8025b16 <_ZdlPvj>
 801c61e:	4620      	mov	r0, r4
 801c620:	bd10      	pop	{r4, pc}

0801c622 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c622:	b510      	push	{r4, lr}
 801c624:	4604      	mov	r4, r0
 801c626:	2104      	movs	r1, #4
 801c628:	f009 fa75 	bl	8025b16 <_ZdlPvj>
 801c62c:	4620      	mov	r0, r4
 801c62e:	bd10      	pop	{r4, pc}

0801c630 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c630:	b510      	push	{r4, lr}
 801c632:	4604      	mov	r4, r0
 801c634:	2104      	movs	r1, #4
 801c636:	f009 fa6e 	bl	8025b16 <_ZdlPvj>
 801c63a:	4620      	mov	r0, r4
 801c63c:	bd10      	pop	{r4, pc}

0801c63e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c63e:	b510      	push	{r4, lr}
 801c640:	4604      	mov	r4, r0
 801c642:	2104      	movs	r1, #4
 801c644:	f009 fa67 	bl	8025b16 <_ZdlPvj>
 801c648:	4620      	mov	r0, r4
 801c64a:	bd10      	pop	{r4, pc}

0801c64c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c64c:	b510      	push	{r4, lr}
 801c64e:	4604      	mov	r4, r0
 801c650:	2104      	movs	r1, #4
 801c652:	f009 fa60 	bl	8025b16 <_ZdlPvj>
 801c656:	4620      	mov	r0, r4
 801c658:	bd10      	pop	{r4, pc}

0801c65a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c65a:	b510      	push	{r4, lr}
 801c65c:	4604      	mov	r4, r0
 801c65e:	2104      	movs	r1, #4
 801c660:	f009 fa59 	bl	8025b16 <_ZdlPvj>
 801c664:	4620      	mov	r0, r4
 801c666:	bd10      	pop	{r4, pc}

0801c668 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c668:	b510      	push	{r4, lr}
 801c66a:	4604      	mov	r4, r0
 801c66c:	2104      	movs	r1, #4
 801c66e:	f009 fa52 	bl	8025b16 <_ZdlPvj>
 801c672:	4620      	mov	r0, r4
 801c674:	bd10      	pop	{r4, pc}

0801c676 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c676:	b510      	push	{r4, lr}
 801c678:	4604      	mov	r4, r0
 801c67a:	2104      	movs	r1, #4
 801c67c:	f009 fa4b 	bl	8025b16 <_ZdlPvj>
 801c680:	4620      	mov	r0, r4
 801c682:	bd10      	pop	{r4, pc}

0801c684 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c684:	b510      	push	{r4, lr}
 801c686:	4604      	mov	r4, r0
 801c688:	2104      	movs	r1, #4
 801c68a:	f009 fa44 	bl	8025b16 <_ZdlPvj>
 801c68e:	4620      	mov	r0, r4
 801c690:	bd10      	pop	{r4, pc}

0801c692 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c692:	b510      	push	{r4, lr}
 801c694:	4604      	mov	r4, r0
 801c696:	2104      	movs	r1, #4
 801c698:	f009 fa3d 	bl	8025b16 <_ZdlPvj>
 801c69c:	4620      	mov	r0, r4
 801c69e:	bd10      	pop	{r4, pc}

0801c6a0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c6a0:	b510      	push	{r4, lr}
 801c6a2:	4604      	mov	r4, r0
 801c6a4:	2104      	movs	r1, #4
 801c6a6:	f009 fa36 	bl	8025b16 <_ZdlPvj>
 801c6aa:	4620      	mov	r0, r4
 801c6ac:	bd10      	pop	{r4, pc}

0801c6ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c6ae:	b510      	push	{r4, lr}
 801c6b0:	4604      	mov	r4, r0
 801c6b2:	2104      	movs	r1, #4
 801c6b4:	f009 fa2f 	bl	8025b16 <_ZdlPvj>
 801c6b8:	4620      	mov	r0, r4
 801c6ba:	bd10      	pop	{r4, pc}

0801c6bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c6bc:	b510      	push	{r4, lr}
 801c6be:	4604      	mov	r4, r0
 801c6c0:	2104      	movs	r1, #4
 801c6c2:	f009 fa28 	bl	8025b16 <_ZdlPvj>
 801c6c6:	4620      	mov	r0, r4
 801c6c8:	bd10      	pop	{r4, pc}

0801c6ca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c6ca:	b510      	push	{r4, lr}
 801c6cc:	4604      	mov	r4, r0
 801c6ce:	2104      	movs	r1, #4
 801c6d0:	f009 fa21 	bl	8025b16 <_ZdlPvj>
 801c6d4:	4620      	mov	r0, r4
 801c6d6:	bd10      	pop	{r4, pc}

0801c6d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c6d8:	b510      	push	{r4, lr}
 801c6da:	4604      	mov	r4, r0
 801c6dc:	2104      	movs	r1, #4
 801c6de:	f009 fa1a 	bl	8025b16 <_ZdlPvj>
 801c6e2:	4620      	mov	r0, r4
 801c6e4:	bd10      	pop	{r4, pc}

0801c6e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c6e6:	b510      	push	{r4, lr}
 801c6e8:	4604      	mov	r4, r0
 801c6ea:	2104      	movs	r1, #4
 801c6ec:	f009 fa13 	bl	8025b16 <_ZdlPvj>
 801c6f0:	4620      	mov	r0, r4
 801c6f2:	bd10      	pop	{r4, pc}

0801c6f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c6f4:	b510      	push	{r4, lr}
 801c6f6:	4604      	mov	r4, r0
 801c6f8:	2104      	movs	r1, #4
 801c6fa:	f009 fa0c 	bl	8025b16 <_ZdlPvj>
 801c6fe:	4620      	mov	r0, r4
 801c700:	bd10      	pop	{r4, pc}

0801c702 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c702:	b510      	push	{r4, lr}
 801c704:	4604      	mov	r4, r0
 801c706:	2104      	movs	r1, #4
 801c708:	f009 fa05 	bl	8025b16 <_ZdlPvj>
 801c70c:	4620      	mov	r0, r4
 801c70e:	bd10      	pop	{r4, pc}

0801c710 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c710:	b510      	push	{r4, lr}
 801c712:	4604      	mov	r4, r0
 801c714:	2104      	movs	r1, #4
 801c716:	f009 f9fe 	bl	8025b16 <_ZdlPvj>
 801c71a:	4620      	mov	r0, r4
 801c71c:	bd10      	pop	{r4, pc}

0801c71e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c71e:	b510      	push	{r4, lr}
 801c720:	4604      	mov	r4, r0
 801c722:	2104      	movs	r1, #4
 801c724:	f009 f9f7 	bl	8025b16 <_ZdlPvj>
 801c728:	4620      	mov	r0, r4
 801c72a:	bd10      	pop	{r4, pc}

0801c72c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c72c:	b510      	push	{r4, lr}
 801c72e:	4604      	mov	r4, r0
 801c730:	2104      	movs	r1, #4
 801c732:	f009 f9f0 	bl	8025b16 <_ZdlPvj>
 801c736:	4620      	mov	r0, r4
 801c738:	bd10      	pop	{r4, pc}

0801c73a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c73a:	b510      	push	{r4, lr}
 801c73c:	4604      	mov	r4, r0
 801c73e:	2104      	movs	r1, #4
 801c740:	f009 f9e9 	bl	8025b16 <_ZdlPvj>
 801c744:	4620      	mov	r0, r4
 801c746:	bd10      	pop	{r4, pc}

0801c748 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c748:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c74a:	4606      	mov	r6, r0
 801c74c:	b087      	sub	sp, #28
 801c74e:	460c      	mov	r4, r1
 801c750:	4617      	mov	r7, r2
 801c752:	461d      	mov	r5, r3
 801c754:	b333      	cbz	r3, 801c7a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c756:	4608      	mov	r0, r1
 801c758:	f7f6 fe15 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c75c:	bb10      	cbnz	r0, 801c7a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c75e:	6820      	ldr	r0, [r4, #0]
 801c760:	ab04      	add	r3, sp, #16
 801c762:	6861      	ldr	r1, [r4, #4]
 801c764:	4c1b      	ldr	r4, [pc, #108]	; (801c7d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801c766:	c303      	stmia	r3!, {r0, r1}
 801c768:	a804      	add	r0, sp, #16
 801c76a:	f7fa fb65 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c76e:	6820      	ldr	r0, [r4, #0]
 801c770:	6803      	ldr	r3, [r0, #0]
 801c772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c774:	4798      	blx	r3
 801c776:	2dff      	cmp	r5, #255	; 0xff
 801c778:	d016      	beq.n	801c7a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801c77a:	f010 0f08 	tst.w	r0, #8
 801c77e:	6820      	ldr	r0, [r4, #0]
 801c780:	d015      	beq.n	801c7ae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801c782:	2400      	movs	r4, #0
 801c784:	6801      	ldr	r1, [r0, #0]
 801c786:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c78a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c78e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801c792:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c796:	9401      	str	r4, [sp, #4]
 801c798:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c79c:	9400      	str	r4, [sp, #0]
 801c79e:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 801c7a0:	4639      	mov	r1, r7
 801c7a2:	47a0      	blx	r4
 801c7a4:	b007      	add	sp, #28
 801c7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7a8:	f010 0f02 	tst.w	r0, #2
 801c7ac:	e7e7      	b.n	801c77e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801c7ae:	6803      	ldr	r3, [r0, #0]
 801c7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7b2:	4798      	blx	r3
 801c7b4:	4b08      	ldr	r3, [pc, #32]	; (801c7d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801c7b6:	4601      	mov	r1, r0
 801c7b8:	4630      	mov	r0, r6
 801c7ba:	881a      	ldrh	r2, [r3, #0]
 801c7bc:	6833      	ldr	r3, [r6, #0]
 801c7be:	e9cd 7500 	strd	r7, r5, [sp]
 801c7c2:	69dd      	ldr	r5, [r3, #28]
 801c7c4:	ab04      	add	r3, sp, #16
 801c7c6:	47a8      	blx	r5
 801c7c8:	6820      	ldr	r0, [r4, #0]
 801c7ca:	6803      	ldr	r3, [r0, #0]
 801c7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7ce:	4798      	blx	r3
 801c7d0:	e7e8      	b.n	801c7a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c7d2:	bf00      	nop
 801c7d4:	2400aeec 	.word	0x2400aeec
 801c7d8:	2400aee6 	.word	0x2400aee6

0801c7dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7e0:	4f97      	ldr	r7, [pc, #604]	; (801ca40 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 801c7e2:	4616      	mov	r6, r2
 801c7e4:	b08f      	sub	sp, #60	; 0x3c
 801c7e6:	4604      	mov	r4, r0
 801c7e8:	683a      	ldr	r2, [r7, #0]
 801c7ea:	4689      	mov	r9, r1
 801c7ec:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801c7f0:	2a02      	cmp	r2, #2
 801c7f2:	d106      	bne.n	801c802 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801c7f4:	4b93      	ldr	r3, [pc, #588]	; (801ca44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 801c7f6:	f44f 7159 	mov.w	r1, #868	; 0x364
 801c7fa:	4a93      	ldr	r2, [pc, #588]	; (801ca48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801c7fc:	4893      	ldr	r0, [pc, #588]	; (801ca4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 801c7fe:	f009 f9b9 	bl	8025b74 <__assert_func>
 801c802:	ad0e      	add	r5, sp, #56	; 0x38
 801c804:	f825 3d24 	strh.w	r3, [r5, #-36]!
 801c808:	4628      	mov	r0, r5
 801c80a:	f7fd fad3 	bl	8019db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c80e:	6823      	ldr	r3, [r4, #0]
 801c810:	4680      	mov	r8, r0
 801c812:	4620      	mov	r0, r4
 801c814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c816:	4798      	blx	r3
 801c818:	4580      	cmp	r8, r0
 801c81a:	d004      	beq.n	801c826 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801c81c:	4b8c      	ldr	r3, [pc, #560]	; (801ca50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801c81e:	f240 3166 	movw	r1, #870	; 0x366
 801c822:	4a89      	ldr	r2, [pc, #548]	; (801ca48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801c824:	e7ea      	b.n	801c7fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c826:	4628      	mov	r0, r5
 801c828:	f7fd fa3a 	bl	8019ca0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c82c:	4680      	mov	r8, r0
 801c82e:	b920      	cbnz	r0, 801c83a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801c830:	4b88      	ldr	r3, [pc, #544]	; (801ca54 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801c832:	f44f 715a 	mov.w	r1, #872	; 0x368
 801c836:	4a84      	ldr	r2, [pc, #528]	; (801ca48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801c838:	e7e0      	b.n	801c7fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c83a:	6830      	ldr	r0, [r6, #0]
 801c83c:	ab06      	add	r3, sp, #24
 801c83e:	6871      	ldr	r1, [r6, #4]
 801c840:	f10d 0b20 	add.w	fp, sp, #32
 801c844:	f9b6 a000 	ldrsh.w	sl, [r6]
 801c848:	c303      	stmia	r3!, {r0, r1}
 801c84a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c84e:	ab08      	add	r3, sp, #32
 801c850:	f8d9 0000 	ldr.w	r0, [r9]
 801c854:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801c858:	c303      	stmia	r3!, {r0, r1}
 801c85a:	4628      	mov	r0, r5
 801c85c:	f7fd f918 	bl	8019a90 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c860:	4606      	mov	r6, r0
 801c862:	4628      	mov	r0, r5
 801c864:	4d7c      	ldr	r5, [pc, #496]	; (801ca58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801c866:	f7fd f94d 	bl	8019b04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c86a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801c86e:	a806      	add	r0, sp, #24
 801c870:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801c874:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801c878:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801c87c:	f7fa fadc 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c880:	4658      	mov	r0, fp
 801c882:	f7fa fad9 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c886:	a80a      	add	r0, sp, #40	; 0x28
 801c888:	f7fa fad6 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c88c:	4b73      	ldr	r3, [pc, #460]	; (801ca5c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801c88e:	2100      	movs	r1, #0
 801c890:	f9b5 2000 	ldrsh.w	r2, [r5]
 801c894:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c898:	4658      	mov	r0, fp
 801c89a:	910c      	str	r1, [sp, #48]	; 0x30
 801c89c:	a90c      	add	r1, sp, #48	; 0x30
 801c89e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801c8a2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c8a6:	f7f6 fd2b 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 801c8aa:	4658      	mov	r0, fp
 801c8ac:	f7f6 fd6b 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c8b0:	2800      	cmp	r0, #0
 801c8b2:	f040 809a 	bne.w	801c9ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801c8b6:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801c8ba:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801c8be:	4288      	cmp	r0, r1
 801c8c0:	db38      	blt.n	801c934 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801c8c2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801c8c6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801c8ca:	429a      	cmp	r2, r3
 801c8cc:	db32      	blt.n	801c934 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801c8ce:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801c8d2:	4430      	add	r0, r6
 801c8d4:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c8d8:	4431      	add	r1, r6
 801c8da:	b200      	sxth	r0, r0
 801c8dc:	b209      	sxth	r1, r1
 801c8de:	4288      	cmp	r0, r1
 801c8e0:	dc28      	bgt.n	801c934 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801c8e2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c8e6:	440a      	add	r2, r1
 801c8e8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801c8ec:	440b      	add	r3, r1
 801c8ee:	b212      	sxth	r2, r2
 801c8f0:	b21b      	sxth	r3, r3
 801c8f2:	429a      	cmp	r2, r3
 801c8f4:	dc1e      	bgt.n	801c934 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801c8f6:	6823      	ldr	r3, [r4, #0]
 801c8f8:	4620      	mov	r0, r4
 801c8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8fc:	4798      	blx	r3
 801c8fe:	4682      	mov	sl, r0
 801c900:	6838      	ldr	r0, [r7, #0]
 801c902:	6803      	ldr	r3, [r0, #0]
 801c904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c906:	4798      	blx	r3
 801c908:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c90c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c910:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801c914:	1a5b      	subs	r3, r3, r1
 801c916:	b29b      	uxth	r3, r3
 801c918:	b21c      	sxth	r4, r3
 801c91a:	2c00      	cmp	r4, #0
 801c91c:	dc0f      	bgt.n	801c93e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 801c91e:	bf18      	it	ne
 801c920:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801c924:	4644      	mov	r4, r8
 801c926:	bf1e      	ittt	ne
 801c928:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 801c92c:	185b      	addne	r3, r3, r1
 801c92e:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801c932:	e009      	b.n	801c948 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 801c934:	4b4a      	ldr	r3, [pc, #296]	; (801ca60 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801c936:	f240 3176 	movw	r1, #886	; 0x376
 801c93a:	4a43      	ldr	r2, [pc, #268]	; (801ca48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801c93c:	e75e      	b.n	801c7fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c93e:	1ad3      	subs	r3, r2, r3
 801c940:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801c944:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c948:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 801c94c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c950:	1b9b      	subs	r3, r3, r6
 801c952:	b29b      	uxth	r3, r3
 801c954:	b219      	sxth	r1, r3
 801c956:	2900      	cmp	r1, #0
 801c958:	dd4b      	ble.n	801c9f2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 801c95a:	4351      	muls	r1, r2
 801c95c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801c960:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801c964:	1acb      	subs	r3, r1, r3
 801c966:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c96a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801c96e:	2e00      	cmp	r6, #0
 801c970:	dd3b      	ble.n	801c9ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801c972:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801c976:	2b00      	cmp	r3, #0
 801c978:	dd37      	ble.n	801c9ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801c97a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c97e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c982:	fb0a f90c 	mul.w	r9, sl, ip
 801c986:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 801c98a:	4481      	add	r9, r0
 801c98c:	8828      	ldrh	r0, [r5, #0]
 801c98e:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801c992:	1a41      	subs	r1, r0, r1
 801c994:	42ae      	cmp	r6, r5
 801c996:	bfa8      	it	ge
 801c998:	462e      	movge	r6, r5
 801c99a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801c99e:	428e      	cmp	r6, r1
 801c9a0:	bfa8      	it	ge
 801c9a2:	460e      	movge	r6, r1
 801c9a4:	429d      	cmp	r5, r3
 801c9a6:	bfa8      	it	ge
 801c9a8:	461d      	movge	r5, r3
 801c9aa:	4b2c      	ldr	r3, [pc, #176]	; (801ca5c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801c9ac:	881b      	ldrh	r3, [r3, #0]
 801c9ae:	eba3 030c 	sub.w	r3, r3, ip
 801c9b2:	429d      	cmp	r5, r3
 801c9b4:	bfa8      	it	ge
 801c9b6:	461d      	movge	r5, r3
 801c9b8:	42b0      	cmp	r0, r6
 801c9ba:	d12c      	bne.n	801ca16 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801c9bc:	4290      	cmp	r0, r2
 801c9be:	d12a      	bne.n	801ca16 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801c9c0:	6838      	ldr	r0, [r7, #0]
 801c9c2:	9203      	str	r2, [sp, #12]
 801c9c4:	6803      	ldr	r3, [r0, #0]
 801c9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9c8:	4798      	blx	r3
 801c9ca:	07c3      	lsls	r3, r0, #31
 801c9cc:	d51a      	bpl.n	801ca04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801c9ce:	9a03      	ldr	r2, [sp, #12]
 801c9d0:	6838      	ldr	r0, [r7, #0]
 801c9d2:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 801c9d6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801c9da:	6803      	ldr	r3, [r0, #0]
 801c9dc:	9200      	str	r2, [sp, #0]
 801c9de:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 801c9e0:	4623      	mov	r3, r4
 801c9e2:	e89b 0006 	ldmia.w	fp, {r1, r2}
 801c9e6:	47a8      	blx	r5
 801c9e8:	4680      	mov	r8, r0
 801c9ea:	4640      	mov	r0, r8
 801c9ec:	b00f      	add	sp, #60	; 0x3c
 801c9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9f2:	bf1f      	itttt	ne
 801c9f4:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 801c9f8:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 801c9fc:	185b      	addne	r3, r3, r1
 801c9fe:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801ca02:	e7b2      	b.n	801c96a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 801ca04:	6838      	ldr	r0, [r7, #0]
 801ca06:	464a      	mov	r2, r9
 801ca08:	4621      	mov	r1, r4
 801ca0a:	6803      	ldr	r3, [r0, #0]
 801ca0c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801ca0e:	fb05 f30a 	mul.w	r3, r5, sl
 801ca12:	47b0      	blx	r6
 801ca14:	e7e9      	b.n	801c9ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801ca16:	4355      	muls	r5, r2
 801ca18:	0076      	lsls	r6, r6, #1
 801ca1a:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801ca1e:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801ca22:	9303      	str	r3, [sp, #12]
 801ca24:	9b03      	ldr	r3, [sp, #12]
 801ca26:	429c      	cmp	r4, r3
 801ca28:	d2df      	bcs.n	801c9ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801ca2a:	6838      	ldr	r0, [r7, #0]
 801ca2c:	464a      	mov	r2, r9
 801ca2e:	4621      	mov	r1, r4
 801ca30:	44d1      	add	r9, sl
 801ca32:	6803      	ldr	r3, [r0, #0]
 801ca34:	445c      	add	r4, fp
 801ca36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca38:	461d      	mov	r5, r3
 801ca3a:	4633      	mov	r3, r6
 801ca3c:	47a8      	blx	r5
 801ca3e:	e7f1      	b.n	801ca24 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 801ca40:	2400aeec 	.word	0x2400aeec
 801ca44:	08029f07 	.word	0x08029f07
 801ca48:	0802a7b8 	.word	0x0802a7b8
 801ca4c:	08029fb9 	.word	0x08029fb9
 801ca50:	08029feb 	.word	0x08029feb
 801ca54:	0802a040 	.word	0x0802a040
 801ca58:	2400aee6 	.word	0x2400aee6
 801ca5c:	2400aee8 	.word	0x2400aee8
 801ca60:	0802a07e 	.word	0x0802a07e

0801ca64 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801ca64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ca68:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801ca6c:	4688      	mov	r8, r1
 801ca6e:	4614      	mov	r4, r2
 801ca70:	461d      	mov	r5, r3
 801ca72:	9e08      	ldr	r6, [sp, #32]
 801ca74:	2f00      	cmp	r7, #0
 801ca76:	f000 80b4 	beq.w	801cbe2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801ca7a:	4618      	mov	r0, r3
 801ca7c:	f7f6 fc83 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ca80:	2800      	cmp	r0, #0
 801ca82:	f040 80ae 	bne.w	801cbe2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801ca86:	f9b5 1000 	ldrsh.w	r1, [r5]
 801ca8a:	2fff      	cmp	r7, #255	; 0xff
 801ca8c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801ca90:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801ca94:	fb04 1303 	mla	r3, r4, r3, r1
 801ca98:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801ca9c:	eba4 0200 	sub.w	r2, r4, r0
 801caa0:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801caa4:	fb04 f505 	mul.w	r5, r4, r5
 801caa8:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801caac:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801cab0:	d04b      	beq.n	801cb4a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 801cab2:	b2bc      	uxth	r4, r7
 801cab4:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801cab8:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801cabc:	fa5f f788 	uxtb.w	r7, r8
 801cac0:	b2f3      	uxtb	r3, r6
 801cac2:	0040      	lsls	r0, r0, #1
 801cac4:	fb0e fe04 	mul.w	lr, lr, r4
 801cac8:	4367      	muls	r7, r4
 801caca:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801cace:	4363      	muls	r3, r4
 801cad0:	fa1f fc8c 	uxth.w	ip, ip
 801cad4:	42a9      	cmp	r1, r5
 801cad6:	f080 8084 	bcs.w	801cbe2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801cada:	eb01 0900 	add.w	r9, r1, r0
 801cade:	4549      	cmp	r1, r9
 801cae0:	d231      	bcs.n	801cb46 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801cae2:	880a      	ldrh	r2, [r1, #0]
 801cae4:	1214      	asrs	r4, r2, #8
 801cae6:	10d6      	asrs	r6, r2, #3
 801cae8:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801caec:	00d2      	lsls	r2, r2, #3
 801caee:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801caf2:	b2d2      	uxtb	r2, r2
 801caf4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801caf8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cafc:	fb14 f40c 	smulbb	r4, r4, ip
 801cb00:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801cb04:	fb12 f20c 	smulbb	r2, r2, ip
 801cb08:	fb16 f60c 	smulbb	r6, r6, ip
 801cb0c:	4474      	add	r4, lr
 801cb0e:	441a      	add	r2, r3
 801cb10:	b2a4      	uxth	r4, r4
 801cb12:	443e      	add	r6, r7
 801cb14:	b292      	uxth	r2, r2
 801cb16:	f104 0a01 	add.w	sl, r4, #1
 801cb1a:	b2b6      	uxth	r6, r6
 801cb1c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801cb20:	f102 0a01 	add.w	sl, r2, #1
 801cb24:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801cb28:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801cb2c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cb30:	4322      	orrs	r2, r4
 801cb32:	1c74      	adds	r4, r6, #1
 801cb34:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801cb38:	0976      	lsrs	r6, r6, #5
 801cb3a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801cb3e:	4332      	orrs	r2, r6
 801cb40:	f821 2b02 	strh.w	r2, [r1], #2
 801cb44:	e7cb      	b.n	801cade <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 801cb46:	4441      	add	r1, r8
 801cb48:	e7c4      	b.n	801cad4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801cb4a:	0973      	lsrs	r3, r6, #5
 801cb4c:	4f26      	ldr	r7, [pc, #152]	; (801cbe8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 801cb4e:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801cb52:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cb56:	ea08 0707 	and.w	r7, r8, r7
 801cb5a:	433b      	orrs	r3, r7
 801cb5c:	4333      	orrs	r3, r6
 801cb5e:	07e6      	lsls	r6, r4, #31
 801cb60:	b29b      	uxth	r3, r3
 801cb62:	d50b      	bpl.n	801cb7c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801cb64:	0040      	lsls	r0, r0, #1
 801cb66:	0052      	lsls	r2, r2, #1
 801cb68:	42a9      	cmp	r1, r5
 801cb6a:	d23a      	bcs.n	801cbe2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801cb6c:	180c      	adds	r4, r1, r0
 801cb6e:	42a1      	cmp	r1, r4
 801cb70:	d202      	bcs.n	801cb78 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801cb72:	f821 3b02 	strh.w	r3, [r1], #2
 801cb76:	e7fa      	b.n	801cb6e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801cb78:	4411      	add	r1, r2
 801cb7a:	e7f5      	b.n	801cb68 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801cb7c:	078f      	lsls	r7, r1, #30
 801cb7e:	d008      	beq.n	801cb92 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801cb80:	0066      	lsls	r6, r4, #1
 801cb82:	460a      	mov	r2, r1
 801cb84:	42aa      	cmp	r2, r5
 801cb86:	d202      	bcs.n	801cb8e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801cb88:	8013      	strh	r3, [r2, #0]
 801cb8a:	4432      	add	r2, r6
 801cb8c:	e7fa      	b.n	801cb84 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801cb8e:	3102      	adds	r1, #2
 801cb90:	3801      	subs	r0, #1
 801cb92:	07c6      	lsls	r6, r0, #31
 801cb94:	d50b      	bpl.n	801cbae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801cb96:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801cb9a:	0066      	lsls	r6, r4, #1
 801cb9c:	3a01      	subs	r2, #1
 801cb9e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801cba2:	42aa      	cmp	r2, r5
 801cba4:	d202      	bcs.n	801cbac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801cba6:	8013      	strh	r3, [r2, #0]
 801cba8:	4432      	add	r2, r6
 801cbaa:	e7fa      	b.n	801cba2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801cbac:	3801      	subs	r0, #1
 801cbae:	b1c0      	cbz	r0, 801cbe2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801cbb0:	1040      	asrs	r0, r0, #1
 801cbb2:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801cbb6:	0080      	lsls	r0, r0, #2
 801cbb8:	0064      	lsls	r4, r4, #1
 801cbba:	42a9      	cmp	r1, r5
 801cbbc:	d211      	bcs.n	801cbe2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801cbbe:	078a      	lsls	r2, r1, #30
 801cbc0:	d006      	beq.n	801cbd0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801cbc2:	4b0a      	ldr	r3, [pc, #40]	; (801cbec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 801cbc4:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801cbc8:	4a09      	ldr	r2, [pc, #36]	; (801cbf0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 801cbca:	480a      	ldr	r0, [pc, #40]	; (801cbf4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 801cbcc:	f008 ffd2 	bl	8025b74 <__assert_func>
 801cbd0:	180e      	adds	r6, r1, r0
 801cbd2:	460a      	mov	r2, r1
 801cbd4:	42b2      	cmp	r2, r6
 801cbd6:	d202      	bcs.n	801cbde <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 801cbd8:	f842 3b04 	str.w	r3, [r2], #4
 801cbdc:	e7fa      	b.n	801cbd4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 801cbde:	4421      	add	r1, r4
 801cbe0:	e7eb      	b.n	801cbba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801cbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbe6:	bf00      	nop
 801cbe8:	00fff800 	.word	0x00fff800
 801cbec:	08029db8 	.word	0x08029db8
 801cbf0:	0802a404 	.word	0x0802a404
 801cbf4:	08029fb9 	.word	0x08029fb9

0801cbf8 <_ZN8touchgfx8LCD16bppC1Ev>:
 801cbf8:	2200      	movs	r2, #0
 801cbfa:	4910      	ldr	r1, [pc, #64]	; (801cc3c <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801cbfc:	6042      	str	r2, [r0, #4]
 801cbfe:	6001      	str	r1, [r0, #0]
 801cc00:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801cc04:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801cc08:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801cc0c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801cc10:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801cc14:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801cc18:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801cc1c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801cc20:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801cc24:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801cc28:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801cc2c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801cc30:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801cc34:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801cc38:	4770      	bx	lr
 801cc3a:	bf00      	nop
 801cc3c:	0802a3bc 	.word	0x0802a3bc

0801cc40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801cc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc44:	b08d      	sub	sp, #52	; 0x34
 801cc46:	460d      	mov	r5, r1
 801cc48:	4604      	mov	r4, r0
 801cc4a:	4699      	mov	r9, r3
 801cc4c:	6808      	ldr	r0, [r1, #0]
 801cc4e:	ab08      	add	r3, sp, #32
 801cc50:	6849      	ldr	r1, [r1, #4]
 801cc52:	c303      	stmia	r3!, {r0, r1}
 801cc54:	6810      	ldr	r0, [r2, #0]
 801cc56:	ab0a      	add	r3, sp, #40	; 0x28
 801cc58:	6851      	ldr	r1, [r2, #4]
 801cc5a:	c303      	stmia	r3!, {r0, r1}
 801cc5c:	a808      	add	r0, sp, #32
 801cc5e:	f7fa f8eb 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cc62:	4629      	mov	r1, r5
 801cc64:	a80a      	add	r0, sp, #40	; 0x28
 801cc66:	4d67      	ldr	r5, [pc, #412]	; (801ce04 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801cc68:	f7fa f90e 	bl	8016e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cc6c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801cc70:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801cc74:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801cc78:	6828      	ldr	r0, [r5, #0]
 801cc7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cc7e:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801cc82:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801cc86:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801cc8a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801cc8e:	440a      	add	r2, r1
 801cc90:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801cc94:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801cc98:	4413      	add	r3, r2
 801cc9a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801cc9e:	6803      	ldr	r3, [r0, #0]
 801cca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cca2:	4798      	blx	r3
 801cca4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801cca8:	d119      	bne.n	801ccde <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801ccaa:	f010 0f20 	tst.w	r0, #32
 801ccae:	6828      	ldr	r0, [r5, #0]
 801ccb0:	d018      	beq.n	801cce4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801ccb2:	2500      	movs	r5, #0
 801ccb4:	6801      	ldr	r1, [r0, #0]
 801ccb6:	b2b6      	uxth	r6, r6
 801ccb8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801ccbc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ccc0:	9601      	str	r6, [sp, #4]
 801ccc2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801ccc6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801ccca:	9502      	str	r5, [sp, #8]
 801cccc:	fa1f f588 	uxth.w	r5, r8
 801ccd0:	9500      	str	r5, [sp, #0]
 801ccd2:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801ccd4:	4621      	mov	r1, r4
 801ccd6:	47a8      	blx	r5
 801ccd8:	b00d      	add	sp, #52	; 0x34
 801ccda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccde:	f010 0f40 	tst.w	r0, #64	; 0x40
 801cce2:	e7e4      	b.n	801ccae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801cce4:	6803      	ldr	r3, [r0, #0]
 801cce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cce8:	4798      	blx	r3
 801ccea:	4947      	ldr	r1, [pc, #284]	; (801ce08 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801ccec:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ccf0:	880b      	ldrh	r3, [r1, #0]
 801ccf2:	468a      	mov	sl, r1
 801ccf4:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801ccf8:	fb03 5202 	mla	r2, r3, r2, r5
 801ccfc:	4373      	muls	r3, r6
 801ccfe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cd02:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cd06:	9307      	str	r3, [sp, #28]
 801cd08:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801cd0c:	9306      	str	r3, [sp, #24]
 801cd0e:	9b07      	ldr	r3, [sp, #28]
 801cd10:	4298      	cmp	r0, r3
 801cd12:	d270      	bcs.n	801cdf6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801cd14:	9b06      	ldr	r3, [sp, #24]
 801cd16:	4621      	mov	r1, r4
 801cd18:	eb00 0b03 	add.w	fp, r0, r3
 801cd1c:	4558      	cmp	r0, fp
 801cd1e:	d25d      	bcs.n	801cddc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801cd20:	f851 4b04 	ldr.w	r4, [r1], #4
 801cd24:	0e23      	lsrs	r3, r4, #24
 801cd26:	d014      	beq.n	801cd52 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801cd28:	2bff      	cmp	r3, #255	; 0xff
 801cd2a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801cd2e:	d112      	bne.n	801cd56 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801cd30:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801cd34:	d10f      	bne.n	801cd56 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801cd36:	0963      	lsrs	r3, r4, #5
 801cd38:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801cd3c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801cd40:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cd44:	f02c 0c07 	bic.w	ip, ip, #7
 801cd48:	ea43 0c0c 	orr.w	ip, r3, ip
 801cd4c:	ea4c 0404 	orr.w	r4, ip, r4
 801cd50:	8004      	strh	r4, [r0, #0]
 801cd52:	3002      	adds	r0, #2
 801cd54:	e7e2      	b.n	801cd1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801cd56:	fb09 f303 	mul.w	r3, r9, r3
 801cd5a:	8807      	ldrh	r7, [r0, #0]
 801cd5c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801cd60:	fa5f fc8c 	uxtb.w	ip, ip
 801cd64:	1c5a      	adds	r2, r3, #1
 801cd66:	123e      	asrs	r6, r7, #8
 801cd68:	10fd      	asrs	r5, r7, #3
 801cd6a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801cd6e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cd72:	00ff      	lsls	r7, r7, #3
 801cd74:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801cd78:	1212      	asrs	r2, r2, #8
 801cd7a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801cd7e:	b293      	uxth	r3, r2
 801cd80:	43d2      	mvns	r2, r2
 801cd82:	b2ff      	uxtb	r7, r7
 801cd84:	fb1e fe03 	smulbb	lr, lr, r3
 801cd88:	b2d2      	uxtb	r2, r2
 801cd8a:	fb1c fc03 	smulbb	ip, ip, r3
 801cd8e:	b2e4      	uxtb	r4, r4
 801cd90:	fb06 e602 	mla	r6, r6, r2, lr
 801cd94:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801cd98:	fb14 f403 	smulbb	r4, r4, r3
 801cd9c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801cda0:	b2b6      	uxth	r6, r6
 801cda2:	fb05 c502 	mla	r5, r5, r2, ip
 801cda6:	fb07 4702 	mla	r7, r7, r2, r4
 801cdaa:	f106 0e01 	add.w	lr, r6, #1
 801cdae:	b2ad      	uxth	r5, r5
 801cdb0:	b2bf      	uxth	r7, r7
 801cdb2:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801cdb6:	f105 0c01 	add.w	ip, r5, #1
 801cdba:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801cdbe:	1c7e      	adds	r6, r7, #1
 801cdc0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801cdc4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801cdc8:	096d      	lsrs	r5, r5, #5
 801cdca:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801cdce:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cdd2:	ea46 060e 	orr.w	r6, r6, lr
 801cdd6:	432e      	orrs	r6, r5
 801cdd8:	8006      	strh	r6, [r0, #0]
 801cdda:	e7ba      	b.n	801cd52 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801cddc:	f8ba 3000 	ldrh.w	r3, [sl]
 801cde0:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801cde4:	eba3 0308 	sub.w	r3, r3, r8
 801cde8:	eba4 0408 	sub.w	r4, r4, r8
 801cdec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cdf0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801cdf4:	e78b      	b.n	801cd0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801cdf6:	4b03      	ldr	r3, [pc, #12]	; (801ce04 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801cdf8:	6818      	ldr	r0, [r3, #0]
 801cdfa:	6803      	ldr	r3, [r0, #0]
 801cdfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cdfe:	4798      	blx	r3
 801ce00:	e76a      	b.n	801ccd8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801ce02:	bf00      	nop
 801ce04:	2400aeec 	.word	0x2400aeec
 801ce08:	2400aee6 	.word	0x2400aee6

0801ce0c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801ce0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ce10:	b085      	sub	sp, #20
 801ce12:	6810      	ldr	r0, [r2, #0]
 801ce14:	460c      	mov	r4, r1
 801ce16:	6851      	ldr	r1, [r2, #4]
 801ce18:	466d      	mov	r5, sp
 801ce1a:	4616      	mov	r6, r2
 801ce1c:	c503      	stmia	r5!, {r0, r1}
 801ce1e:	6818      	ldr	r0, [r3, #0]
 801ce20:	6859      	ldr	r1, [r3, #4]
 801ce22:	c503      	stmia	r5!, {r0, r1}
 801ce24:	4668      	mov	r0, sp
 801ce26:	4d2e      	ldr	r5, [pc, #184]	; (801cee0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801ce28:	f7fa f806 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ce2c:	4631      	mov	r1, r6
 801ce2e:	a802      	add	r0, sp, #8
 801ce30:	4e2c      	ldr	r6, [pc, #176]	; (801cee4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801ce32:	f7fa f829 	bl	8016e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ce36:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801ce3a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801ce3e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801ce42:	6828      	ldr	r0, [r5, #0]
 801ce44:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ce48:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801ce4c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801ce50:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801ce54:	f8bd 1000 	ldrh.w	r1, [sp]
 801ce58:	440a      	add	r2, r1
 801ce5a:	f8ad 2008 	strh.w	r2, [sp, #8]
 801ce5e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801ce62:	4413      	add	r3, r2
 801ce64:	f8ad 300a 	strh.w	r3, [sp, #10]
 801ce68:	6803      	ldr	r3, [r0, #0]
 801ce6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce6c:	4798      	blx	r3
 801ce6e:	8833      	ldrh	r3, [r6, #0]
 801ce70:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801ce74:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801ce78:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801ce7c:	f8df e068 	ldr.w	lr, [pc, #104]	; 801cee8 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801ce80:	fb03 1202 	mla	r2, r3, r2, r1
 801ce84:	fb08 f303 	mul.w	r3, r8, r3
 801ce88:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ce8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ce90:	4298      	cmp	r0, r3
 801ce92:	d21d      	bcs.n	801ced0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801ce94:	eb00 080c 	add.w	r8, r0, ip
 801ce98:	4540      	cmp	r0, r8
 801ce9a:	d20f      	bcs.n	801cebc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801ce9c:	f854 1b04 	ldr.w	r1, [r4], #4
 801cea0:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801cea4:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801cea8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801ceac:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ceb0:	ea42 0209 	orr.w	r2, r2, r9
 801ceb4:	430a      	orrs	r2, r1
 801ceb6:	f820 2b02 	strh.w	r2, [r0], #2
 801ceba:	e7ed      	b.n	801ce98 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801cebc:	8832      	ldrh	r2, [r6, #0]
 801cebe:	1bd2      	subs	r2, r2, r7
 801cec0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cec4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801cec8:	1bd2      	subs	r2, r2, r7
 801ceca:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801cece:	e7df      	b.n	801ce90 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801ced0:	6828      	ldr	r0, [r5, #0]
 801ced2:	6803      	ldr	r3, [r0, #0]
 801ced4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ced6:	4798      	blx	r3
 801ced8:	b005      	add	sp, #20
 801ceda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cede:	bf00      	nop
 801cee0:	2400aeec 	.word	0x2400aeec
 801cee4:	2400aee6 	.word	0x2400aee6
 801cee8:	fffff800 	.word	0xfffff800

0801ceec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801ceec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cef0:	b08e      	sub	sp, #56	; 0x38
 801cef2:	460e      	mov	r6, r1
 801cef4:	4604      	mov	r4, r0
 801cef6:	461d      	mov	r5, r3
 801cef8:	6808      	ldr	r0, [r1, #0]
 801cefa:	ab0a      	add	r3, sp, #40	; 0x28
 801cefc:	6849      	ldr	r1, [r1, #4]
 801cefe:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801d0d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801cf02:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801d0d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801cf06:	c303      	stmia	r3!, {r0, r1}
 801cf08:	6810      	ldr	r0, [r2, #0]
 801cf0a:	ab0c      	add	r3, sp, #48	; 0x30
 801cf0c:	6851      	ldr	r1, [r2, #4]
 801cf0e:	c303      	stmia	r3!, {r0, r1}
 801cf10:	a80a      	add	r0, sp, #40	; 0x28
 801cf12:	f7f9 ff91 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf16:	4631      	mov	r1, r6
 801cf18:	a80c      	add	r0, sp, #48	; 0x30
 801cf1a:	f7f9 ffb5 	bl	8016e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cf1e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801cf22:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801cf26:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cf2a:	f8d8 0000 	ldr.w	r0, [r8]
 801cf2e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cf32:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801cf36:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801cf3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cf3e:	440c      	add	r4, r1
 801cf40:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801cf44:	440a      	add	r2, r1
 801cf46:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801cf4a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801cf4e:	4413      	add	r3, r2
 801cf50:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cf54:	6803      	ldr	r3, [r0, #0]
 801cf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf58:	4798      	blx	r3
 801cf5a:	2dff      	cmp	r5, #255	; 0xff
 801cf5c:	d124      	bne.n	801cfa8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801cf5e:	f010 0f01 	tst.w	r0, #1
 801cf62:	f8d8 0000 	ldr.w	r0, [r8]
 801cf66:	d022      	beq.n	801cfae <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801cf68:	2100      	movs	r1, #0
 801cf6a:	f04f 0e01 	mov.w	lr, #1
 801cf6e:	f8d0 c000 	ldr.w	ip, [r0]
 801cf72:	b2b6      	uxth	r6, r6
 801cf74:	f8cd e018 	str.w	lr, [sp, #24]
 801cf78:	b2bf      	uxth	r7, r7
 801cf7a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801cf7e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801cf82:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801cf86:	f8b9 e000 	ldrh.w	lr, [r9]
 801cf8a:	9503      	str	r5, [sp, #12]
 801cf8c:	9601      	str	r6, [sp, #4]
 801cf8e:	9700      	str	r7, [sp, #0]
 801cf90:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801cf94:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cf98:	9102      	str	r1, [sp, #8]
 801cf9a:	4621      	mov	r1, r4
 801cf9c:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801cfa0:	47a8      	blx	r5
 801cfa2:	b00e      	add	sp, #56	; 0x38
 801cfa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfa8:	f010 0f04 	tst.w	r0, #4
 801cfac:	e7d9      	b.n	801cf62 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801cfae:	6803      	ldr	r3, [r0, #0]
 801cfb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfb2:	4798      	blx	r3
 801cfb4:	f8b9 3000 	ldrh.w	r3, [r9]
 801cfb8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801cfbc:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801cfc0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801cfc4:	435e      	muls	r6, r3
 801cfc6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801cfca:	2dff      	cmp	r5, #255	; 0xff
 801cfcc:	fb03 1202 	mla	r2, r3, r2, r1
 801cfd0:	ebac 0c07 	sub.w	ip, ip, r7
 801cfd4:	eba3 0707 	sub.w	r7, r3, r7
 801cfd8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cfdc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cfe0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801cfe4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801cfe8:	d049      	beq.n	801d07e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801cfea:	43eb      	mvns	r3, r5
 801cfec:	fa1f f985 	uxth.w	r9, r5
 801cff0:	b2db      	uxtb	r3, r3
 801cff2:	42b0      	cmp	r0, r6
 801cff4:	d266      	bcs.n	801d0c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801cff6:	eb00 0a0e 	add.w	sl, r0, lr
 801cffa:	4550      	cmp	r0, sl
 801cffc:	4621      	mov	r1, r4
 801cffe:	f104 0403 	add.w	r4, r4, #3
 801d002:	d25b      	bcs.n	801d0bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801d004:	8802      	ldrh	r2, [r0, #0]
 801d006:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d00a:	ea4f 2822 	mov.w	r8, r2, asr #8
 801d00e:	fb11 f109 	smulbb	r1, r1, r9
 801d012:	10d5      	asrs	r5, r2, #3
 801d014:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801d018:	00d2      	lsls	r2, r2, #3
 801d01a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d01e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801d022:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d026:	fb08 1803 	mla	r8, r8, r3, r1
 801d02a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801d02e:	b2d2      	uxtb	r2, r2
 801d030:	fb11 f109 	smulbb	r1, r1, r9
 801d034:	fa1f f888 	uxth.w	r8, r8
 801d038:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d03c:	fb05 1503 	mla	r5, r5, r3, r1
 801d040:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d044:	fb11 f109 	smulbb	r1, r1, r9
 801d048:	b2ad      	uxth	r5, r5
 801d04a:	fb02 1203 	mla	r2, r2, r3, r1
 801d04e:	f108 0101 	add.w	r1, r8, #1
 801d052:	b292      	uxth	r2, r2
 801d054:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801d058:	1c51      	adds	r1, r2, #1
 801d05a:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801d05e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d062:	1c69      	adds	r1, r5, #1
 801d064:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801d068:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d06c:	096d      	lsrs	r5, r5, #5
 801d06e:	ea42 0208 	orr.w	r2, r2, r8
 801d072:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d076:	432a      	orrs	r2, r5
 801d078:	f820 2b02 	strh.w	r2, [r0], #2
 801d07c:	e7bd      	b.n	801cffa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801d07e:	4a14      	ldr	r2, [pc, #80]	; (801d0d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801d080:	42b0      	cmp	r0, r6
 801d082:	d21f      	bcs.n	801d0c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d084:	eb00 050e 	add.w	r5, r0, lr
 801d088:	42a8      	cmp	r0, r5
 801d08a:	4621      	mov	r1, r4
 801d08c:	f104 0403 	add.w	r4, r4, #3
 801d090:	d210      	bcs.n	801d0b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801d092:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801d096:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d09a:	00db      	lsls	r3, r3, #3
 801d09c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801d0a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d0a4:	430b      	orrs	r3, r1
 801d0a6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d0aa:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801d0ae:	f820 3b02 	strh.w	r3, [r0], #2
 801d0b2:	e7e9      	b.n	801d088 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801d0b4:	4438      	add	r0, r7
 801d0b6:	eb01 040c 	add.w	r4, r1, ip
 801d0ba:	e7e1      	b.n	801d080 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801d0bc:	4438      	add	r0, r7
 801d0be:	eb01 040c 	add.w	r4, r1, ip
 801d0c2:	e796      	b.n	801cff2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801d0c4:	4b03      	ldr	r3, [pc, #12]	; (801d0d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801d0c6:	6818      	ldr	r0, [r3, #0]
 801d0c8:	6803      	ldr	r3, [r0, #0]
 801d0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0cc:	4798      	blx	r3
 801d0ce:	e768      	b.n	801cfa2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801d0d0:	fffff800 	.word	0xfffff800
 801d0d4:	2400aeec 	.word	0x2400aeec
 801d0d8:	2400aee6 	.word	0x2400aee6

0801d0dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d0dc:	b570      	push	{r4, r5, r6, lr}
 801d0de:	9c04      	ldr	r4, [sp, #16]
 801d0e0:	4605      	mov	r5, r0
 801d0e2:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801d0e6:	4608      	mov	r0, r1
 801d0e8:	4619      	mov	r1, r3
 801d0ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d0ee:	2a0d      	cmp	r2, #13
 801d0f0:	d825      	bhi.n	801d13e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 801d0f2:	e8df f002 	tbb	[pc, r2]
 801d0f6:	1807      	.short	0x1807
 801d0f8:	1d1d1d13 	.word	0x1d1d1d13
 801d0fc:	1d1d1d1d 	.word	0x1d1d1d1d
 801d100:	1d1d1d1d 	.word	0x1d1d1d1d
 801d104:	682a      	ldr	r2, [r5, #0]
 801d106:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801d10a:	68d6      	ldr	r6, [r2, #12]
 801d10c:	4623      	mov	r3, r4
 801d10e:	460a      	mov	r2, r1
 801d110:	4601      	mov	r1, r0
 801d112:	46b4      	mov	ip, r6
 801d114:	4628      	mov	r0, r5
 801d116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d11a:	4760      	bx	ip
 801d11c:	4622      	mov	r2, r4
 801d11e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d122:	f7ff bd8d 	b.w	801cc40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d126:	4622      	mov	r2, r4
 801d128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d12c:	f7ff bede 	b.w	801ceec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801d130:	4b03      	ldr	r3, [pc, #12]	; (801d140 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801d132:	f240 315d 	movw	r1, #861	; 0x35d
 801d136:	4a03      	ldr	r2, [pc, #12]	; (801d144 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801d138:	4803      	ldr	r0, [pc, #12]	; (801d148 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801d13a:	f008 fd1b 	bl	8025b74 <__assert_func>
 801d13e:	bd70      	pop	{r4, r5, r6, pc}
 801d140:	0802a0de 	.word	0x0802a0de
 801d144:	0802a83e 	.word	0x0802a83e
 801d148:	08029fb9 	.word	0x08029fb9

0801d14c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d150:	b093      	sub	sp, #76	; 0x4c
 801d152:	880e      	ldrh	r6, [r1, #0]
 801d154:	4681      	mov	r9, r0
 801d156:	4688      	mov	r8, r1
 801d158:	4615      	mov	r5, r2
 801d15a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801d15e:	b136      	cbz	r6, 801d16e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 801d160:	4b70      	ldr	r3, [pc, #448]	; (801d324 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801d162:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 801d166:	4a70      	ldr	r2, [pc, #448]	; (801d328 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d168:	4870      	ldr	r0, [pc, #448]	; (801d32c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801d16a:	f008 fd03 	bl	8025b74 <__assert_func>
 801d16e:	6810      	ldr	r0, [r2, #0]
 801d170:	ac0e      	add	r4, sp, #56	; 0x38
 801d172:	6851      	ldr	r1, [r2, #4]
 801d174:	4f6e      	ldr	r7, [pc, #440]	; (801d330 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801d176:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801d334 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801d17a:	c403      	stmia	r4!, {r0, r1}
 801d17c:	6818      	ldr	r0, [r3, #0]
 801d17e:	ac10      	add	r4, sp, #64	; 0x40
 801d180:	6859      	ldr	r1, [r3, #4]
 801d182:	c403      	stmia	r4!, {r0, r1}
 801d184:	a80e      	add	r0, sp, #56	; 0x38
 801d186:	f7f9 fe57 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d18a:	4629      	mov	r1, r5
 801d18c:	a810      	add	r0, sp, #64	; 0x40
 801d18e:	f7f9 fe7b 	bl	8016e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d192:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d196:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d19a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d19e:	6838      	ldr	r0, [r7, #0]
 801d1a0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d1a4:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801d1a8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801d1ac:	4489      	add	r9, r1
 801d1ae:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d1b2:	440a      	add	r2, r1
 801d1b4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d1b8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d1bc:	4413      	add	r3, r2
 801d1be:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d1c2:	6803      	ldr	r3, [r0, #0]
 801d1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d1c6:	4798      	blx	r3
 801d1c8:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d1cc:	6838      	ldr	r0, [r7, #0]
 801d1ce:	d01d      	beq.n	801d20c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801d1d0:	210b      	movs	r1, #11
 801d1d2:	6802      	ldr	r2, [r0, #0]
 801d1d4:	b2a4      	uxth	r4, r4
 801d1d6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d1da:	9107      	str	r1, [sp, #28]
 801d1dc:	b2ad      	uxth	r5, r5
 801d1de:	e9cd 6608 	strd	r6, r6, [sp, #32]
 801d1e2:	f8bb 1000 	ldrh.w	r1, [fp]
 801d1e6:	9502      	str	r5, [sp, #8]
 801d1e8:	9106      	str	r1, [sp, #24]
 801d1ea:	2101      	movs	r1, #1
 801d1ec:	9401      	str	r4, [sp, #4]
 801d1ee:	e9cd a104 	strd	sl, r1, [sp, #16]
 801d1f2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d1f6:	9103      	str	r1, [sp, #12]
 801d1f8:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 801d1fc:	9100      	str	r1, [sp, #0]
 801d1fe:	4649      	mov	r1, r9
 801d200:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 801d202:	4642      	mov	r2, r8
 801d204:	47a0      	blx	r4
 801d206:	b013      	add	sp, #76	; 0x4c
 801d208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d20c:	6803      	ldr	r3, [r0, #0]
 801d20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d210:	4798      	blx	r3
 801d212:	f8bb 3000 	ldrh.w	r3, [fp]
 801d216:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801d21a:	f04f 0e04 	mov.w	lr, #4
 801d21e:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801d222:	435d      	muls	r5, r3
 801d224:	fb03 1202 	mla	r2, r3, r2, r1
 801d228:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d22c:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801d230:	920c      	str	r2, [sp, #48]	; 0x30
 801d232:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801d236:	1b12      	subs	r2, r2, r4
 801d238:	920d      	str	r2, [sp, #52]	; 0x34
 801d23a:	0062      	lsls	r2, r4, #1
 801d23c:	1b1c      	subs	r4, r3, r4
 801d23e:	920a      	str	r2, [sp, #40]	; 0x28
 801d240:	0063      	lsls	r3, r4, #1
 801d242:	930b      	str	r3, [sp, #44]	; 0x2c
 801d244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d246:	4298      	cmp	r0, r3
 801d248:	d266      	bcs.n	801d318 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801d24a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d24c:	eb00 0b03 	add.w	fp, r0, r3
 801d250:	4558      	cmp	r0, fp
 801d252:	d25c      	bcs.n	801d30e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 801d254:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d258:	fb1e e303 	smlabb	r3, lr, r3, lr
 801d25c:	f858 2003 	ldr.w	r2, [r8, r3]
 801d260:	0e11      	lsrs	r1, r2, #24
 801d262:	d012      	beq.n	801d28a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801d264:	29ff      	cmp	r1, #255	; 0xff
 801d266:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801d26a:	d110      	bne.n	801d28e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801d26c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d270:	d10d      	bne.n	801d28e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801d272:	0953      	lsrs	r3, r2, #5
 801d274:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801d278:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d27c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d280:	f027 0707 	bic.w	r7, r7, #7
 801d284:	431f      	orrs	r7, r3
 801d286:	433a      	orrs	r2, r7
 801d288:	8002      	strh	r2, [r0, #0]
 801d28a:	3002      	adds	r0, #2
 801d28c:	e7e0      	b.n	801d250 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 801d28e:	fb0a f101 	mul.w	r1, sl, r1
 801d292:	8806      	ldrh	r6, [r0, #0]
 801d294:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801d298:	b2d2      	uxtb	r2, r2
 801d29a:	1c4b      	adds	r3, r1, #1
 801d29c:	1235      	asrs	r5, r6, #8
 801d29e:	10f4      	asrs	r4, r6, #3
 801d2a0:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801d2a4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d2a8:	00f6      	lsls	r6, r6, #3
 801d2aa:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d2ae:	121b      	asrs	r3, r3, #8
 801d2b0:	b2f6      	uxtb	r6, r6
 801d2b2:	b299      	uxth	r1, r3
 801d2b4:	43db      	mvns	r3, r3
 801d2b6:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801d2ba:	fb1c fc01 	smulbb	ip, ip, r1
 801d2be:	b2db      	uxtb	r3, r3
 801d2c0:	fb12 f201 	smulbb	r2, r2, r1
 801d2c4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d2c8:	fb05 c503 	mla	r5, r5, r3, ip
 801d2cc:	b2ff      	uxtb	r7, r7
 801d2ce:	fb06 2203 	mla	r2, r6, r3, r2
 801d2d2:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d2d6:	fb17 f701 	smulbb	r7, r7, r1
 801d2da:	b2ad      	uxth	r5, r5
 801d2dc:	b292      	uxth	r2, r2
 801d2de:	fb04 7403 	mla	r4, r4, r3, r7
 801d2e2:	f105 0c01 	add.w	ip, r5, #1
 801d2e6:	1c57      	adds	r7, r2, #1
 801d2e8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d2ec:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d2f0:	b2a4      	uxth	r4, r4
 801d2f2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d2f6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d2fa:	433d      	orrs	r5, r7
 801d2fc:	1c67      	adds	r7, r4, #1
 801d2fe:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801d302:	0964      	lsrs	r4, r4, #5
 801d304:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d308:	4325      	orrs	r5, r4
 801d30a:	8005      	strh	r5, [r0, #0]
 801d30c:	e7bd      	b.n	801d28a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801d30e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d310:	4418      	add	r0, r3
 801d312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d314:	4499      	add	r9, r3
 801d316:	e795      	b.n	801d244 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801d318:	4b05      	ldr	r3, [pc, #20]	; (801d330 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801d31a:	6818      	ldr	r0, [r3, #0]
 801d31c:	6803      	ldr	r3, [r0, #0]
 801d31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d320:	4798      	blx	r3
 801d322:	e770      	b.n	801d206 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 801d324:	08029eb7 	.word	0x08029eb7
 801d328:	0802a60f 	.word	0x0802a60f
 801d32c:	08029fb9 	.word	0x08029fb9
 801d330:	2400aeec 	.word	0x2400aeec
 801d334:	2400aee6 	.word	0x2400aee6

0801d338 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801d338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d33c:	4614      	mov	r4, r2
 801d33e:	880a      	ldrh	r2, [r1, #0]
 801d340:	b087      	sub	sp, #28
 801d342:	4680      	mov	r8, r0
 801d344:	2a02      	cmp	r2, #2
 801d346:	460d      	mov	r5, r1
 801d348:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801d34c:	d006      	beq.n	801d35c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801d34e:	4b63      	ldr	r3, [pc, #396]	; (801d4dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 801d350:	f240 11e1 	movw	r1, #481	; 0x1e1
 801d354:	4a62      	ldr	r2, [pc, #392]	; (801d4e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d356:	4863      	ldr	r0, [pc, #396]	; (801d4e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 801d358:	f008 fc0c 	bl	8025b74 <__assert_func>
 801d35c:	2e00      	cmp	r6, #0
 801d35e:	f000 80b9 	beq.w	801d4d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 801d362:	6820      	ldr	r0, [r4, #0]
 801d364:	af02      	add	r7, sp, #8
 801d366:	6861      	ldr	r1, [r4, #4]
 801d368:	c703      	stmia	r7!, {r0, r1}
 801d36a:	6818      	ldr	r0, [r3, #0]
 801d36c:	af04      	add	r7, sp, #16
 801d36e:	6859      	ldr	r1, [r3, #4]
 801d370:	c703      	stmia	r7!, {r0, r1}
 801d372:	a802      	add	r0, sp, #8
 801d374:	f7f9 fd60 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d378:	4621      	mov	r1, r4
 801d37a:	a804      	add	r0, sp, #16
 801d37c:	f7f9 fd84 	bl	8016e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d380:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d384:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d388:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801d38c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801d390:	fb14 2103 	smlabb	r1, r4, r3, r2
 801d394:	eb08 0401 	add.w	r4, r8, r1
 801d398:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d39c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d3a0:	440a      	add	r2, r1
 801d3a2:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801d3a6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d3aa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d3ae:	4413      	add	r3, r2
 801d3b0:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d3b4:	4b4c      	ldr	r3, [pc, #304]	; (801d4e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801d3b6:	6818      	ldr	r0, [r3, #0]
 801d3b8:	6803      	ldr	r3, [r0, #0]
 801d3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3bc:	4798      	blx	r3
 801d3be:	4b4b      	ldr	r3, [pc, #300]	; (801d4ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801d3c0:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801d3c4:	2eff      	cmp	r6, #255	; 0xff
 801d3c6:	881a      	ldrh	r2, [r3, #0]
 801d3c8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801d3cc:	fb02 c101 	mla	r1, r2, r1, ip
 801d3d0:	fb02 f207 	mul.w	r2, r2, r7
 801d3d4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d3d8:	f105 0104 	add.w	r1, r5, #4
 801d3dc:	461d      	mov	r5, r3
 801d3de:	d05a      	beq.n	801d496 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 801d3e0:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801d3e4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d3e8:	b2b6      	uxth	r6, r6
 801d3ea:	9301      	str	r3, [sp, #4]
 801d3ec:	fa1f fe8e 	uxth.w	lr, lr
 801d3f0:	4282      	cmp	r2, r0
 801d3f2:	d96a      	bls.n	801d4ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801d3f4:	eb00 0b0a 	add.w	fp, r0, sl
 801d3f8:	4583      	cmp	fp, r0
 801d3fa:	d940      	bls.n	801d47e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 801d3fc:	8805      	ldrh	r5, [r0, #0]
 801d3fe:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d402:	122f      	asrs	r7, r5, #8
 801d404:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d408:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d40c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d410:	00ed      	lsls	r5, r5, #3
 801d412:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d416:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d41a:	fb17 f70e 	smulbb	r7, r7, lr
 801d41e:	b2ed      	uxtb	r5, r5
 801d420:	fb19 f90e 	smulbb	r9, r9, lr
 801d424:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d428:	fb15 f50e 	smulbb	r5, r5, lr
 801d42c:	fb0c 7c06 	mla	ip, ip, r6, r7
 801d430:	10df      	asrs	r7, r3, #3
 801d432:	00db      	lsls	r3, r3, #3
 801d434:	fa1f fc8c 	uxth.w	ip, ip
 801d438:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d43c:	b2db      	uxtb	r3, r3
 801d43e:	fb07 9706 	mla	r7, r7, r6, r9
 801d442:	f10c 0901 	add.w	r9, ip, #1
 801d446:	fb03 5306 	mla	r3, r3, r6, r5
 801d44a:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d44e:	b29b      	uxth	r3, r3
 801d450:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801d454:	b2bf      	uxth	r7, r7
 801d456:	f103 0c01 	add.w	ip, r3, #1
 801d45a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d45e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d462:	ea4c 0c09 	orr.w	ip, ip, r9
 801d466:	f107 0901 	add.w	r9, r7, #1
 801d46a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d46e:	097f      	lsrs	r7, r7, #5
 801d470:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d474:	ea4c 0c07 	orr.w	ip, ip, r7
 801d478:	f820 cb02 	strh.w	ip, [r0], #2
 801d47c:	e7bc      	b.n	801d3f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801d47e:	9b01      	ldr	r3, [sp, #4]
 801d480:	881b      	ldrh	r3, [r3, #0]
 801d482:	eba3 0308 	sub.w	r3, r3, r8
 801d486:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d48a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d48e:	eba3 0308 	sub.w	r3, r3, r8
 801d492:	441c      	add	r4, r3
 801d494:	e7ac      	b.n	801d3f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 801d496:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d49a:	4282      	cmp	r2, r0
 801d49c:	d915      	bls.n	801d4ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801d49e:	eb00 060a 	add.w	r6, r0, sl
 801d4a2:	4286      	cmp	r6, r0
 801d4a4:	d906      	bls.n	801d4b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 801d4a6:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d4aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d4ae:	f820 3b02 	strh.w	r3, [r0], #2
 801d4b2:	e7f6      	b.n	801d4a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 801d4b4:	882b      	ldrh	r3, [r5, #0]
 801d4b6:	eba3 0308 	sub.w	r3, r3, r8
 801d4ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d4be:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d4c2:	eba3 0308 	sub.w	r3, r3, r8
 801d4c6:	441c      	add	r4, r3
 801d4c8:	e7e7      	b.n	801d49a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 801d4ca:	4b07      	ldr	r3, [pc, #28]	; (801d4e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801d4cc:	6818      	ldr	r0, [r3, #0]
 801d4ce:	6803      	ldr	r3, [r0, #0]
 801d4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d4d2:	4798      	blx	r3
 801d4d4:	b007      	add	sp, #28
 801d4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4da:	bf00      	nop
 801d4dc:	08029de7 	.word	0x08029de7
 801d4e0:	0802a479 	.word	0x0802a479
 801d4e4:	08029fb9 	.word	0x08029fb9
 801d4e8:	2400aeec 	.word	0x2400aeec
 801d4ec:	2400aee6 	.word	0x2400aee6

0801d4f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4f4:	f8b1 9000 	ldrh.w	r9, [r1]
 801d4f8:	b091      	sub	sp, #68	; 0x44
 801d4fa:	4604      	mov	r4, r0
 801d4fc:	460f      	mov	r7, r1
 801d4fe:	f1b9 0f01 	cmp.w	r9, #1
 801d502:	4690      	mov	r8, r2
 801d504:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801d508:	d006      	beq.n	801d518 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 801d50a:	4b84      	ldr	r3, [pc, #528]	; (801d71c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 801d50c:	f240 212f 	movw	r1, #559	; 0x22f
 801d510:	4a83      	ldr	r2, [pc, #524]	; (801d720 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 801d512:	4884      	ldr	r0, [pc, #528]	; (801d724 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 801d514:	f008 fb2e 	bl	8025b74 <__assert_func>
 801d518:	2d00      	cmp	r5, #0
 801d51a:	d04f      	beq.n	801d5bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801d51c:	6810      	ldr	r0, [r2, #0]
 801d51e:	ae0c      	add	r6, sp, #48	; 0x30
 801d520:	6851      	ldr	r1, [r2, #4]
 801d522:	f8df b208 	ldr.w	fp, [pc, #520]	; 801d72c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 801d526:	c603      	stmia	r6!, {r0, r1}
 801d528:	6818      	ldr	r0, [r3, #0]
 801d52a:	ae0e      	add	r6, sp, #56	; 0x38
 801d52c:	6859      	ldr	r1, [r3, #4]
 801d52e:	c603      	stmia	r6!, {r0, r1}
 801d530:	a80c      	add	r0, sp, #48	; 0x30
 801d532:	f7f9 fc81 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d536:	4641      	mov	r1, r8
 801d538:	a80e      	add	r0, sp, #56	; 0x38
 801d53a:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 801d730 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 801d53e:	f7f9 fca3 	bl	8016e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d542:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d546:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d54a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d54e:	f8db 0000 	ldr.w	r0, [fp]
 801d552:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d556:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801d55a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801d55e:	440c      	add	r4, r1
 801d560:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d564:	440a      	add	r2, r1
 801d566:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d56a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d56e:	4413      	add	r3, r2
 801d570:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d574:	6803      	ldr	r3, [r0, #0]
 801d576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d578:	4798      	blx	r3
 801d57a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d57e:	f8db 0000 	ldr.w	r0, [fp]
 801d582:	d01e      	beq.n	801d5c2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 801d584:	2200      	movs	r2, #0
 801d586:	6801      	ldr	r1, [r0, #0]
 801d588:	b2b6      	uxth	r6, r6
 801d58a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d58e:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d592:	220b      	movs	r2, #11
 801d594:	9207      	str	r2, [sp, #28]
 801d596:	f8b8 2000 	ldrh.w	r2, [r8]
 801d59a:	9504      	str	r5, [sp, #16]
 801d59c:	9601      	str	r6, [sp, #4]
 801d59e:	e9cd 9205 	strd	r9, r2, [sp, #20]
 801d5a2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d5a6:	9203      	str	r2, [sp, #12]
 801d5a8:	fa1f f28a 	uxth.w	r2, sl
 801d5ac:	9202      	str	r2, [sp, #8]
 801d5ae:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d5b2:	9200      	str	r2, [sp, #0]
 801d5b4:	463a      	mov	r2, r7
 801d5b6:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801d5b8:	4621      	mov	r1, r4
 801d5ba:	47a8      	blx	r5
 801d5bc:	b011      	add	sp, #68	; 0x44
 801d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5c2:	6803      	ldr	r3, [r0, #0]
 801d5c4:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801d5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d5ca:	4798      	blx	r3
 801d5cc:	f8b8 2000 	ldrh.w	r2, [r8]
 801d5d0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d5d4:	2dff      	cmp	r5, #255	; 0xff
 801d5d6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801d5da:	fb0a fa02 	mul.w	sl, sl, r2
 801d5de:	fb02 1303 	mla	r3, r2, r3, r1
 801d5e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d5e6:	d062      	beq.n	801d6ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 801d5e8:	ea6f 0c05 	mvn.w	ip, r5
 801d5ec:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801d5f0:	b2ad      	uxth	r5, r5
 801d5f2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801d5f6:	fa5f fc8c 	uxtb.w	ip, ip
 801d5fa:	930a      	str	r3, [sp, #40]	; 0x28
 801d5fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d5fe:	4298      	cmp	r0, r3
 801d600:	f080 8085 	bcs.w	801d70e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801d604:	eb00 0b09 	add.w	fp, r0, r9
 801d608:	4558      	cmp	r0, fp
 801d60a:	d246      	bcs.n	801d69a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801d60c:	f814 eb01 	ldrb.w	lr, [r4], #1
 801d610:	2303      	movs	r3, #3
 801d612:	2204      	movs	r2, #4
 801d614:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801d618:	8803      	ldrh	r3, [r0, #0]
 801d61a:	eb07 0a0e 	add.w	sl, r7, lr
 801d61e:	1219      	asrs	r1, r3, #8
 801d620:	10da      	asrs	r2, r3, #3
 801d622:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d626:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801d62a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d62e:	00db      	lsls	r3, r3, #3
 801d630:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d634:	fb18 f805 	smulbb	r8, r8, r5
 801d638:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801d63c:	fb1e fe05 	smulbb	lr, lr, r5
 801d640:	b2db      	uxtb	r3, r3
 801d642:	fb01 810c 	mla	r1, r1, ip, r8
 801d646:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801d64a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801d64e:	fb18 f805 	smulbb	r8, r8, r5
 801d652:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801d656:	b289      	uxth	r1, r1
 801d658:	fb02 820c 	mla	r2, r2, ip, r8
 801d65c:	fb03 e30c 	mla	r3, r3, ip, lr
 801d660:	f101 0801 	add.w	r8, r1, #1
 801d664:	b292      	uxth	r2, r2
 801d666:	b29b      	uxth	r3, r3
 801d668:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d66c:	f102 0801 	add.w	r8, r2, #1
 801d670:	f103 0e01 	add.w	lr, r3, #1
 801d674:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801d678:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d67c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801d680:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d684:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d688:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d68c:	ea4e 0101 	orr.w	r1, lr, r1
 801d690:	ea41 0108 	orr.w	r1, r1, r8
 801d694:	f820 1b02 	strh.w	r1, [r0], #2
 801d698:	e7b6      	b.n	801d608 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 801d69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d69c:	881b      	ldrh	r3, [r3, #0]
 801d69e:	1b9b      	subs	r3, r3, r6
 801d6a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d6a4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d6a8:	1b9b      	subs	r3, r3, r6
 801d6aa:	441c      	add	r4, r3
 801d6ac:	e7a6      	b.n	801d5fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 801d6ae:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801d6b2:	2203      	movs	r2, #3
 801d6b4:	2504      	movs	r5, #4
 801d6b6:	491c      	ldr	r1, [pc, #112]	; (801d728 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 801d6b8:	4550      	cmp	r0, sl
 801d6ba:	d228      	bcs.n	801d70e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801d6bc:	eb00 0c09 	add.w	ip, r0, r9
 801d6c0:	4560      	cmp	r0, ip
 801d6c2:	4623      	mov	r3, r4
 801d6c4:	d219      	bcs.n	801d6fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d6c6:	f893 e000 	ldrb.w	lr, [r3]
 801d6ca:	3401      	adds	r4, #1
 801d6cc:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801d6d0:	eb07 0b0e 	add.w	fp, r7, lr
 801d6d4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d6d8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801d6dc:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d6e0:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801d6e4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801d6e8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d6ec:	ea43 030b 	orr.w	r3, r3, fp
 801d6f0:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801d6f4:	f820 3b02 	strh.w	r3, [r0], #2
 801d6f8:	e7e2      	b.n	801d6c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801d6fa:	f8b8 3000 	ldrh.w	r3, [r8]
 801d6fe:	1b9b      	subs	r3, r3, r6
 801d700:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d704:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d708:	1b9b      	subs	r3, r3, r6
 801d70a:	441c      	add	r4, r3
 801d70c:	e7d4      	b.n	801d6b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801d70e:	4b07      	ldr	r3, [pc, #28]	; (801d72c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 801d710:	6818      	ldr	r0, [r3, #0]
 801d712:	6803      	ldr	r3, [r0, #0]
 801d714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d716:	4798      	blx	r3
 801d718:	e750      	b.n	801d5bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801d71a:	bf00      	nop
 801d71c:	08029e35 	.word	0x08029e35
 801d720:	0802a502 	.word	0x0802a502
 801d724:	08029fb9 	.word	0x08029fb9
 801d728:	fffff800 	.word	0xfffff800
 801d72c:	2400aeec 	.word	0x2400aeec
 801d730:	2400aee6 	.word	0x2400aee6

0801d734 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d734:	b430      	push	{r4, r5}
 801d736:	780d      	ldrb	r5, [r1, #0]
 801d738:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801d73c:	2d01      	cmp	r5, #1
 801d73e:	d00a      	beq.n	801d756 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801d740:	d305      	bcc.n	801d74e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801d742:	2d02      	cmp	r5, #2
 801d744:	d10b      	bne.n	801d75e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801d746:	9402      	str	r4, [sp, #8]
 801d748:	bc30      	pop	{r4, r5}
 801d74a:	f7ff bdf5 	b.w	801d338 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801d74e:	9402      	str	r4, [sp, #8]
 801d750:	bc30      	pop	{r4, r5}
 801d752:	f7ff bcfb 	b.w	801d14c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d756:	9402      	str	r4, [sp, #8]
 801d758:	bc30      	pop	{r4, r5}
 801d75a:	f7ff bec9 	b.w	801d4f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d75e:	bc30      	pop	{r4, r5}
 801d760:	4770      	bx	lr
	...

0801d764 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801d764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d768:	b087      	sub	sp, #28
 801d76a:	4604      	mov	r4, r0
 801d76c:	460e      	mov	r6, r1
 801d76e:	6810      	ldr	r0, [r2, #0]
 801d770:	6851      	ldr	r1, [r2, #4]
 801d772:	ad02      	add	r5, sp, #8
 801d774:	4617      	mov	r7, r2
 801d776:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801d77a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801d9ac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801d77e:	c503      	stmia	r5!, {r0, r1}
 801d780:	6818      	ldr	r0, [r3, #0]
 801d782:	ad04      	add	r5, sp, #16
 801d784:	6859      	ldr	r1, [r3, #4]
 801d786:	c503      	stmia	r5!, {r0, r1}
 801d788:	a802      	add	r0, sp, #8
 801d78a:	f7f9 fb55 	bl	8016e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d78e:	4639      	mov	r1, r7
 801d790:	a804      	add	r0, sp, #16
 801d792:	f7f9 fb79 	bl	8016e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d796:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d79a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d79e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d7a2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d7a6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d7aa:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d7ae:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801d7b2:	440e      	add	r6, r1
 801d7b4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d7b8:	440a      	add	r2, r1
 801d7ba:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d7be:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d7c2:	4413      	add	r3, r2
 801d7c4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d7c8:	4b77      	ldr	r3, [pc, #476]	; (801d9a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d7ca:	6818      	ldr	r0, [r3, #0]
 801d7cc:	6803      	ldr	r3, [r0, #0]
 801d7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d7d0:	4798      	blx	r3
 801d7d2:	f8b9 b000 	ldrh.w	fp, [r9]
 801d7d6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d7da:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d7de:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d7e2:	fb05 f50b 	mul.w	r5, r5, fp
 801d7e6:	fb0b 2303 	mla	r3, fp, r3, r2
 801d7ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d7ee:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d7f2:	9300      	str	r3, [sp, #0]
 801d7f4:	d069      	beq.n	801d8ca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801d7f6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801d7fa:	4558      	cmp	r0, fp
 801d7fc:	f080 80cc 	bcs.w	801d998 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d800:	9b00      	ldr	r3, [sp, #0]
 801d802:	4631      	mov	r1, r6
 801d804:	18c3      	adds	r3, r0, r3
 801d806:	9301      	str	r3, [sp, #4]
 801d808:	9b01      	ldr	r3, [sp, #4]
 801d80a:	4298      	cmp	r0, r3
 801d80c:	d24f      	bcs.n	801d8ae <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801d80e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d812:	2a00      	cmp	r2, #0
 801d814:	d048      	beq.n	801d8a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d816:	fb0a f202 	mul.w	r2, sl, r2
 801d81a:	1c53      	adds	r3, r2, #1
 801d81c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d820:	121b      	asrs	r3, r3, #8
 801d822:	d041      	beq.n	801d8a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d824:	8802      	ldrh	r2, [r0, #0]
 801d826:	b29e      	uxth	r6, r3
 801d828:	f8b4 c000 	ldrh.w	ip, [r4]
 801d82c:	43db      	mvns	r3, r3
 801d82e:	1215      	asrs	r5, r2, #8
 801d830:	b2db      	uxtb	r3, r3
 801d832:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d836:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d83a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801d83e:	fb15 f503 	smulbb	r5, r5, r3
 801d842:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d846:	00d2      	lsls	r2, r2, #3
 801d848:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d84c:	fb07 5706 	mla	r7, r7, r6, r5
 801d850:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801d854:	b2d2      	uxtb	r2, r2
 801d856:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d85a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d85e:	fb1e fe03 	smulbb	lr, lr, r3
 801d862:	b2bf      	uxth	r7, r7
 801d864:	fb12 f203 	smulbb	r2, r2, r3
 801d868:	fa5f fc8c 	uxtb.w	ip, ip
 801d86c:	fb05 e506 	mla	r5, r5, r6, lr
 801d870:	f107 0e01 	add.w	lr, r7, #1
 801d874:	fb0c 2c06 	mla	ip, ip, r6, r2
 801d878:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d87c:	fa1f fc8c 	uxth.w	ip, ip
 801d880:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801d884:	b2ad      	uxth	r5, r5
 801d886:	f10c 0701 	add.w	r7, ip, #1
 801d88a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d88e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d892:	ea47 070e 	orr.w	r7, r7, lr
 801d896:	f105 0e01 	add.w	lr, r5, #1
 801d89a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801d89e:	096d      	lsrs	r5, r5, #5
 801d8a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d8a4:	432f      	orrs	r7, r5
 801d8a6:	8007      	strh	r7, [r0, #0]
 801d8a8:	3002      	adds	r0, #2
 801d8aa:	3402      	adds	r4, #2
 801d8ac:	e7ac      	b.n	801d808 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801d8ae:	f8b9 3000 	ldrh.w	r3, [r9]
 801d8b2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d8b6:	eba3 0308 	sub.w	r3, r3, r8
 801d8ba:	eba6 0608 	sub.w	r6, r6, r8
 801d8be:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d8c2:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d8c6:	440e      	add	r6, r1
 801d8c8:	e797      	b.n	801d7fa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801d8ca:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801d8ce:	42a8      	cmp	r0, r5
 801d8d0:	d262      	bcs.n	801d998 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d8d2:	9b00      	ldr	r3, [sp, #0]
 801d8d4:	4631      	mov	r1, r6
 801d8d6:	eb00 0b03 	add.w	fp, r0, r3
 801d8da:	4558      	cmp	r0, fp
 801d8dc:	d24e      	bcs.n	801d97c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801d8de:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d8e2:	b12b      	cbz	r3, 801d8f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d8e4:	2bff      	cmp	r3, #255	; 0xff
 801d8e6:	f8b4 e000 	ldrh.w	lr, [r4]
 801d8ea:	d104      	bne.n	801d8f6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801d8ec:	f8a0 e000 	strh.w	lr, [r0]
 801d8f0:	3002      	adds	r0, #2
 801d8f2:	3402      	adds	r4, #2
 801d8f4:	e7f1      	b.n	801d8da <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801d8f6:	8802      	ldrh	r2, [r0, #0]
 801d8f8:	b29f      	uxth	r7, r3
 801d8fa:	43db      	mvns	r3, r3
 801d8fc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d900:	1216      	asrs	r6, r2, #8
 801d902:	b2db      	uxtb	r3, r3
 801d904:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d908:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d90c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801d910:	00d2      	lsls	r2, r2, #3
 801d912:	fb16 f603 	smulbb	r6, r6, r3
 801d916:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801d91a:	b2d2      	uxtb	r2, r2
 801d91c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d920:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d924:	fb1a fa03 	smulbb	sl, sl, r3
 801d928:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d92c:	fa1f fc8c 	uxth.w	ip, ip
 801d930:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d934:	fb12 f303 	smulbb	r3, r2, r3
 801d938:	fa5f fe8e 	uxtb.w	lr, lr
 801d93c:	fb06 a607 	mla	r6, r6, r7, sl
 801d940:	f10c 0201 	add.w	r2, ip, #1
 801d944:	fb0e 3307 	mla	r3, lr, r7, r3
 801d948:	b2b6      	uxth	r6, r6
 801d94a:	b29b      	uxth	r3, r3
 801d94c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d950:	f106 0a01 	add.w	sl, r6, #1
 801d954:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801d958:	f103 0c01 	add.w	ip, r3, #1
 801d95c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801d960:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d964:	0976      	lsrs	r6, r6, #5
 801d966:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d96a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d96e:	ea4c 0c02 	orr.w	ip, ip, r2
 801d972:	ea4c 0c06 	orr.w	ip, ip, r6
 801d976:	f8a0 c000 	strh.w	ip, [r0]
 801d97a:	e7b9      	b.n	801d8f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d97c:	f8b9 3000 	ldrh.w	r3, [r9]
 801d980:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d984:	eba3 0308 	sub.w	r3, r3, r8
 801d988:	eba6 0608 	sub.w	r6, r6, r8
 801d98c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d990:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d994:	440e      	add	r6, r1
 801d996:	e79a      	b.n	801d8ce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801d998:	4b03      	ldr	r3, [pc, #12]	; (801d9a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d99a:	6818      	ldr	r0, [r3, #0]
 801d99c:	6803      	ldr	r3, [r0, #0]
 801d99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9a0:	4798      	blx	r3
 801d9a2:	b007      	add	sp, #28
 801d9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9a8:	2400aeec 	.word	0x2400aeec
 801d9ac:	2400aee6 	.word	0x2400aee6

0801d9b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9b4:	b089      	sub	sp, #36	; 0x24
 801d9b6:	4682      	mov	sl, r0
 801d9b8:	460f      	mov	r7, r1
 801d9ba:	4691      	mov	r9, r2
 801d9bc:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801d9c0:	4698      	mov	r8, r3
 801d9c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d9c4:	2e00      	cmp	r6, #0
 801d9c6:	d03d      	beq.n	801da44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801d9c8:	4608      	mov	r0, r1
 801d9ca:	f7fc f861 	bl	8019a90 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d9ce:	4605      	mov	r5, r0
 801d9d0:	4638      	mov	r0, r7
 801d9d2:	f7fc f897 	bl	8019b04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d9d6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801d9da:	4638      	mov	r0, r7
 801d9dc:	f8ad 9008 	strh.w	r9, [sp, #8]
 801d9e0:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d9e4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d9e8:	f7fc f95a 	bl	8019ca0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d9ec:	4605      	mov	r5, r0
 801d9ee:	4638      	mov	r0, r7
 801d9f0:	f7fc f988 	bl	8019d04 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d9f4:	4681      	mov	r9, r0
 801d9f6:	4638      	mov	r0, r7
 801d9f8:	f7fc f9dc 	bl	8019db4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d9fc:	280b      	cmp	r0, #11
 801d9fe:	f200 816f 	bhi.w	801dce0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 801da02:	e8df f010 	tbh	[pc, r0, lsl #1]
 801da06:	00c3      	.short	0x00c3
 801da08:	000c00b4 	.word	0x000c00b4
 801da0c:	016d016d 	.word	0x016d016d
 801da10:	016d016d 	.word	0x016d016d
 801da14:	016d016d 	.word	0x016d016d
 801da18:	016d016d 	.word	0x016d016d
 801da1c:	00bb      	.short	0x00bb
 801da1e:	4bb3      	ldr	r3, [pc, #716]	; (801dcec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 801da20:	6818      	ldr	r0, [r3, #0]
 801da22:	6803      	ldr	r3, [r0, #0]
 801da24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da26:	4798      	blx	r3
 801da28:	2eff      	cmp	r6, #255	; 0xff
 801da2a:	d121      	bne.n	801da70 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801da2c:	0683      	lsls	r3, r0, #26
 801da2e:	d41f      	bmi.n	801da70 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801da30:	4638      	mov	r0, r7
 801da32:	f7fc f8fb 	bl	8019c2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801da36:	b940      	cbnz	r0, 801da4a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801da38:	4623      	mov	r3, r4
 801da3a:	aa02      	add	r2, sp, #8
 801da3c:	4629      	mov	r1, r5
 801da3e:	4650      	mov	r0, sl
 801da40:	f7ff f9e4 	bl	801ce0c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801da44:	b009      	add	sp, #36	; 0x24
 801da46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da4a:	f10d 0818 	add.w	r8, sp, #24
 801da4e:	4639      	mov	r1, r7
 801da50:	af04      	add	r7, sp, #16
 801da52:	4640      	mov	r0, r8
 801da54:	f7fc f890 	bl	8019b78 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801da58:	e898 0003 	ldmia.w	r8, {r0, r1}
 801da5c:	e887 0003 	stmia.w	r7, {r0, r1}
 801da60:	4638      	mov	r0, r7
 801da62:	4621      	mov	r1, r4
 801da64:	f7f5 fc4c 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 801da68:	4638      	mov	r0, r7
 801da6a:	f7f5 fc8c 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 801da6e:	b130      	cbz	r0, 801da7e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 801da70:	4633      	mov	r3, r6
 801da72:	4622      	mov	r2, r4
 801da74:	a902      	add	r1, sp, #8
 801da76:	4628      	mov	r0, r5
 801da78:	f7ff f8e2 	bl	801cc40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801da7c:	e7e2      	b.n	801da44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801da7e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801da82:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801da86:	4293      	cmp	r3, r2
 801da88:	dd12      	ble.n	801dab0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 801da8a:	1a9b      	subs	r3, r3, r2
 801da8c:	f9b4 0000 	ldrsh.w	r0, [r4]
 801da90:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801da94:	f8ad 0018 	strh.w	r0, [sp, #24]
 801da98:	4628      	mov	r0, r5
 801da9a:	f8ad 201a 	strh.w	r2, [sp, #26]
 801da9e:	4642      	mov	r2, r8
 801daa0:	f8ad 101c 	strh.w	r1, [sp, #28]
 801daa4:	a902      	add	r1, sp, #8
 801daa6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801daaa:	4633      	mov	r3, r6
 801daac:	f7ff f8c8 	bl	801cc40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dab0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801dab4:	f9b4 2000 	ldrsh.w	r2, [r4]
 801dab8:	4293      	cmp	r3, r2
 801daba:	dd12      	ble.n	801dae2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 801dabc:	1a9b      	subs	r3, r3, r2
 801dabe:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801dac2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801dac6:	f8ad 2018 	strh.w	r2, [sp, #24]
 801daca:	4642      	mov	r2, r8
 801dacc:	f8ad 001a 	strh.w	r0, [sp, #26]
 801dad0:	4628      	mov	r0, r5
 801dad2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dad6:	23ff      	movs	r3, #255	; 0xff
 801dad8:	f8ad 101e 	strh.w	r1, [sp, #30]
 801dadc:	a902      	add	r1, sp, #8
 801dade:	f7ff f8af 	bl	801cc40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dae2:	463b      	mov	r3, r7
 801dae4:	aa02      	add	r2, sp, #8
 801dae6:	4629      	mov	r1, r5
 801dae8:	4650      	mov	r0, sl
 801daea:	f7ff f98f 	bl	801ce0c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801daee:	88a2      	ldrh	r2, [r4, #4]
 801daf0:	8823      	ldrh	r3, [r4, #0]
 801daf2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801daf6:	4413      	add	r3, r2
 801daf8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dafc:	440a      	add	r2, r1
 801dafe:	b29b      	uxth	r3, r3
 801db00:	b292      	uxth	r2, r2
 801db02:	b218      	sxth	r0, r3
 801db04:	b211      	sxth	r1, r2
 801db06:	4288      	cmp	r0, r1
 801db08:	dd12      	ble.n	801db30 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 801db0a:	1a9b      	subs	r3, r3, r2
 801db0c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801db10:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801db14:	4642      	mov	r2, r8
 801db16:	f8ad 1018 	strh.w	r1, [sp, #24]
 801db1a:	a902      	add	r1, sp, #8
 801db1c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801db20:	23ff      	movs	r3, #255	; 0xff
 801db22:	f8ad 001e 	strh.w	r0, [sp, #30]
 801db26:	4628      	mov	r0, r5
 801db28:	f8ad 601a 	strh.w	r6, [sp, #26]
 801db2c:	f7ff f888 	bl	801cc40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801db30:	88e2      	ldrh	r2, [r4, #6]
 801db32:	8863      	ldrh	r3, [r4, #2]
 801db34:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801db38:	4413      	add	r3, r2
 801db3a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801db3e:	440a      	add	r2, r1
 801db40:	b29b      	uxth	r3, r3
 801db42:	b292      	uxth	r2, r2
 801db44:	b218      	sxth	r0, r3
 801db46:	b211      	sxth	r1, r2
 801db48:	4288      	cmp	r0, r1
 801db4a:	f77f af7b 	ble.w	801da44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801db4e:	1a9b      	subs	r3, r3, r2
 801db50:	f9b4 6000 	ldrsh.w	r6, [r4]
 801db54:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801db58:	4642      	mov	r2, r8
 801db5a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801db5e:	23ff      	movs	r3, #255	; 0xff
 801db60:	f8ad 6018 	strh.w	r6, [sp, #24]
 801db64:	f8ad 101a 	strh.w	r1, [sp, #26]
 801db68:	f8ad 001c 	strh.w	r0, [sp, #28]
 801db6c:	e782      	b.n	801da74 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801db6e:	4633      	mov	r3, r6
 801db70:	4622      	mov	r2, r4
 801db72:	a902      	add	r1, sp, #8
 801db74:	4628      	mov	r0, r5
 801db76:	f7ff f9b9 	bl	801ceec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801db7a:	e763      	b.n	801da44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801db7c:	9600      	str	r6, [sp, #0]
 801db7e:	4623      	mov	r3, r4
 801db80:	aa02      	add	r2, sp, #8
 801db82:	4649      	mov	r1, r9
 801db84:	4628      	mov	r0, r5
 801db86:	f7ff fdd5 	bl	801d734 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801db8a:	e75b      	b.n	801da44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801db8c:	4638      	mov	r0, r7
 801db8e:	f7fc f84d 	bl	8019c2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801db92:	b950      	cbnz	r0, 801dbaa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 801db94:	f8da 3000 	ldr.w	r3, [sl]
 801db98:	aa02      	add	r2, sp, #8
 801db9a:	4629      	mov	r1, r5
 801db9c:	e9cd 6000 	strd	r6, r0, [sp]
 801dba0:	4650      	mov	r0, sl
 801dba2:	68de      	ldr	r6, [r3, #12]
 801dba4:	4623      	mov	r3, r4
 801dba6:	47b0      	blx	r6
 801dba8:	e74c      	b.n	801da44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dbaa:	f10d 0818 	add.w	r8, sp, #24
 801dbae:	4639      	mov	r1, r7
 801dbb0:	af04      	add	r7, sp, #16
 801dbb2:	4640      	mov	r0, r8
 801dbb4:	f7fb ffe0 	bl	8019b78 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801dbb8:	e898 0003 	ldmia.w	r8, {r0, r1}
 801dbbc:	e887 0003 	stmia.w	r7, {r0, r1}
 801dbc0:	4638      	mov	r0, r7
 801dbc2:	4621      	mov	r1, r4
 801dbc4:	f7f5 fb9c 	bl	8013300 <_ZN8touchgfx4RectaNERKS0_>
 801dbc8:	4638      	mov	r0, r7
 801dbca:	f7f5 fbdc 	bl	8013386 <_ZNK8touchgfx4Rect7isEmptyEv>
 801dbce:	b138      	cbz	r0, 801dbe0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 801dbd0:	4623      	mov	r3, r4
 801dbd2:	9600      	str	r6, [sp, #0]
 801dbd4:	aa02      	add	r2, sp, #8
 801dbd6:	4649      	mov	r1, r9
 801dbd8:	4628      	mov	r0, r5
 801dbda:	f7ff fdc3 	bl	801d764 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801dbde:	e731      	b.n	801da44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dbe0:	f8da 3000 	ldr.w	r3, [sl]
 801dbe4:	aa02      	add	r2, sp, #8
 801dbe6:	4629      	mov	r1, r5
 801dbe8:	e9cd 6000 	strd	r6, r0, [sp]
 801dbec:	4650      	mov	r0, sl
 801dbee:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801dbf2:	463b      	mov	r3, r7
 801dbf4:	47d8      	blx	fp
 801dbf6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dbfa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801dbfe:	4293      	cmp	r3, r2
 801dc00:	dd13      	ble.n	801dc2a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 801dc02:	f9b4 0000 	ldrsh.w	r0, [r4]
 801dc06:	1a9b      	subs	r3, r3, r2
 801dc08:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dc0c:	f8ad 0018 	strh.w	r0, [sp, #24]
 801dc10:	4628      	mov	r0, r5
 801dc12:	f8ad 201a 	strh.w	r2, [sp, #26]
 801dc16:	aa02      	add	r2, sp, #8
 801dc18:	f8ad 101c 	strh.w	r1, [sp, #28]
 801dc1c:	4649      	mov	r1, r9
 801dc1e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dc22:	4643      	mov	r3, r8
 801dc24:	9600      	str	r6, [sp, #0]
 801dc26:	f7ff fd9d 	bl	801d764 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801dc2a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801dc2e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801dc32:	4293      	cmp	r3, r2
 801dc34:	dd13      	ble.n	801dc5e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 801dc36:	1a9b      	subs	r3, r3, r2
 801dc38:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801dc3c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801dc40:	f8ad 2018 	strh.w	r2, [sp, #24]
 801dc44:	aa02      	add	r2, sp, #8
 801dc46:	f8ad 001a 	strh.w	r0, [sp, #26]
 801dc4a:	4628      	mov	r0, r5
 801dc4c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dc50:	4643      	mov	r3, r8
 801dc52:	f8ad 101e 	strh.w	r1, [sp, #30]
 801dc56:	4649      	mov	r1, r9
 801dc58:	9600      	str	r6, [sp, #0]
 801dc5a:	f7ff fd83 	bl	801d764 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801dc5e:	88a2      	ldrh	r2, [r4, #4]
 801dc60:	8823      	ldrh	r3, [r4, #0]
 801dc62:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801dc66:	4413      	add	r3, r2
 801dc68:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dc6c:	440a      	add	r2, r1
 801dc6e:	b29b      	uxth	r3, r3
 801dc70:	b292      	uxth	r2, r2
 801dc72:	b218      	sxth	r0, r3
 801dc74:	b211      	sxth	r1, r2
 801dc76:	4288      	cmp	r0, r1
 801dc78:	dd13      	ble.n	801dca2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 801dc7a:	1a9b      	subs	r3, r3, r2
 801dc7c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801dc80:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801dc84:	aa02      	add	r2, sp, #8
 801dc86:	f8ad 1018 	strh.w	r1, [sp, #24]
 801dc8a:	4649      	mov	r1, r9
 801dc8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dc90:	4643      	mov	r3, r8
 801dc92:	f8ad 001e 	strh.w	r0, [sp, #30]
 801dc96:	4628      	mov	r0, r5
 801dc98:	9600      	str	r6, [sp, #0]
 801dc9a:	f8ad 701a 	strh.w	r7, [sp, #26]
 801dc9e:	f7ff fd61 	bl	801d764 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801dca2:	88e2      	ldrh	r2, [r4, #6]
 801dca4:	8863      	ldrh	r3, [r4, #2]
 801dca6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801dcaa:	4413      	add	r3, r2
 801dcac:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801dcb0:	440a      	add	r2, r1
 801dcb2:	b29b      	uxth	r3, r3
 801dcb4:	b292      	uxth	r2, r2
 801dcb6:	b218      	sxth	r0, r3
 801dcb8:	b211      	sxth	r1, r2
 801dcba:	4288      	cmp	r0, r1
 801dcbc:	f77f aec2 	ble.w	801da44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dcc0:	f9b4 7000 	ldrsh.w	r7, [r4]
 801dcc4:	1a9b      	subs	r3, r3, r2
 801dcc6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801dcca:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dcce:	4643      	mov	r3, r8
 801dcd0:	f8ad 7018 	strh.w	r7, [sp, #24]
 801dcd4:	f8ad 101a 	strh.w	r1, [sp, #26]
 801dcd8:	f8ad 001c 	strh.w	r0, [sp, #28]
 801dcdc:	9600      	str	r6, [sp, #0]
 801dcde:	e779      	b.n	801dbd4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801dce0:	4b03      	ldr	r3, [pc, #12]	; (801dcf0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 801dce2:	21b4      	movs	r1, #180	; 0xb4
 801dce4:	4a03      	ldr	r2, [pc, #12]	; (801dcf4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 801dce6:	4804      	ldr	r0, [pc, #16]	; (801dcf8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 801dce8:	f007 ff44 	bl	8025b74 <__assert_func>
 801dcec:	2400aeec 	.word	0x2400aeec
 801dcf0:	08029e83 	.word	0x08029e83
 801dcf4:	0802a58b 	.word	0x0802a58b
 801dcf8:	08029fb9 	.word	0x08029fb9

0801dcfc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801dcfc:	b508      	push	{r3, lr}
 801dcfe:	b180      	cbz	r0, 801dd22 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801dd00:	2902      	cmp	r1, #2
 801dd02:	d014      	beq.n	801dd2e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801dd04:	2903      	cmp	r1, #3
 801dd06:	d01d      	beq.n	801dd44 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801dd08:	2901      	cmp	r1, #1
 801dd0a:	d101      	bne.n	801dd10 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801dd0c:	2001      	movs	r0, #1
 801dd0e:	bd08      	pop	{r3, pc}
 801dd10:	4b0e      	ldr	r3, [pc, #56]	; (801dd4c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801dd12:	8818      	ldrh	r0, [r3, #0]
 801dd14:	b990      	cbnz	r0, 801dd3c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801dd16:	4b0e      	ldr	r3, [pc, #56]	; (801dd50 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801dd18:	2150      	movs	r1, #80	; 0x50
 801dd1a:	4a0e      	ldr	r2, [pc, #56]	; (801dd54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801dd1c:	480e      	ldr	r0, [pc, #56]	; (801dd58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801dd1e:	f007 ff29 	bl	8025b74 <__assert_func>
 801dd22:	2902      	cmp	r1, #2
 801dd24:	d00e      	beq.n	801dd44 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801dd26:	2903      	cmp	r1, #3
 801dd28:	d0f2      	beq.n	801dd10 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801dd2a:	2901      	cmp	r1, #1
 801dd2c:	d1ee      	bne.n	801dd0c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801dd2e:	4b07      	ldr	r3, [pc, #28]	; (801dd4c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801dd30:	8818      	ldrh	r0, [r3, #0]
 801dd32:	2800      	cmp	r0, #0
 801dd34:	d0ef      	beq.n	801dd16 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801dd36:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801dd3a:	e7e8      	b.n	801dd0e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801dd3c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801dd40:	4240      	negs	r0, r0
 801dd42:	e7e4      	b.n	801dd0e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801dd44:	f04f 30ff 	mov.w	r0, #4294967295
 801dd48:	e7e1      	b.n	801dd0e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801dd4a:	bf00      	nop
 801dd4c:	2400aee6 	.word	0x2400aee6
 801dd50:	0802a10f 	.word	0x0802a10f
 801dd54:	0802a708 	.word	0x0802a708
 801dd58:	0802a151 	.word	0x0802a151

0801dd5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801dd5c:	b508      	push	{r3, lr}
 801dd5e:	b180      	cbz	r0, 801dd82 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801dd60:	2902      	cmp	r1, #2
 801dd62:	d014      	beq.n	801dd8e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801dd64:	2903      	cmp	r1, #3
 801dd66:	d018      	beq.n	801dd9a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801dd68:	2901      	cmp	r1, #1
 801dd6a:	d001      	beq.n	801dd70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801dd6c:	2001      	movs	r0, #1
 801dd6e:	e013      	b.n	801dd98 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801dd70:	4b0e      	ldr	r3, [pc, #56]	; (801ddac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801dd72:	8818      	ldrh	r0, [r3, #0]
 801dd74:	b970      	cbnz	r0, 801dd94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801dd76:	4b0e      	ldr	r3, [pc, #56]	; (801ddb0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801dd78:	2150      	movs	r1, #80	; 0x50
 801dd7a:	4a0e      	ldr	r2, [pc, #56]	; (801ddb4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801dd7c:	480e      	ldr	r0, [pc, #56]	; (801ddb8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801dd7e:	f007 fef9 	bl	8025b74 <__assert_func>
 801dd82:	2902      	cmp	r1, #2
 801dd84:	d009      	beq.n	801dd9a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801dd86:	2903      	cmp	r1, #3
 801dd88:	d0f0      	beq.n	801dd6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801dd8a:	2901      	cmp	r1, #1
 801dd8c:	d1f0      	bne.n	801dd70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801dd8e:	f04f 30ff 	mov.w	r0, #4294967295
 801dd92:	e001      	b.n	801dd98 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801dd94:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801dd98:	bd08      	pop	{r3, pc}
 801dd9a:	4b04      	ldr	r3, [pc, #16]	; (801ddac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801dd9c:	8818      	ldrh	r0, [r3, #0]
 801dd9e:	2800      	cmp	r0, #0
 801dda0:	d0e9      	beq.n	801dd76 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801dda2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801dda6:	4240      	negs	r0, r0
 801dda8:	e7f6      	b.n	801dd98 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801ddaa:	bf00      	nop
 801ddac:	2400aee6 	.word	0x2400aee6
 801ddb0:	0802a10f 	.word	0x0802a10f
 801ddb4:	0802a708 	.word	0x0802a708
 801ddb8:	0802a151 	.word	0x0802a151

0801ddbc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ddbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddc0:	b099      	sub	sp, #100	; 0x64
 801ddc2:	910b      	str	r1, [sp, #44]	; 0x2c
 801ddc4:	a914      	add	r1, sp, #80	; 0x50
 801ddc6:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801ddca:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801ddce:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801ddd2:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801ddd6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801ddda:	e881 000c 	stmia.w	r1, {r2, r3}
 801ddde:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801dde2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801dde6:	930a      	str	r3, [sp, #40]	; 0x28
 801dde8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801ddec:	f891 900d 	ldrb.w	r9, [r1, #13]
 801ddf0:	9311      	str	r3, [sp, #68]	; 0x44
 801ddf2:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801ddf6:	7988      	ldrb	r0, [r1, #6]
 801ddf8:	930c      	str	r3, [sp, #48]	; 0x30
 801ddfa:	ea4f 1349 	mov.w	r3, r9, lsl #5
 801ddfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801de02:	4303      	orrs	r3, r0
 801de04:	9309      	str	r3, [sp, #36]	; 0x24
 801de06:	f000 81a1 	beq.w	801e14c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801de0a:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801de0e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801de12:	f891 9007 	ldrb.w	r9, [r1, #7]
 801de16:	ea59 0903 	orrs.w	r9, r9, r3
 801de1a:	f000 8197 	beq.w	801e14c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801de1e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801de22:	b29b      	uxth	r3, r3
 801de24:	2e00      	cmp	r6, #0
 801de26:	f000 813a 	beq.w	801e09e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801de2a:	1af6      	subs	r6, r6, r3
 801de2c:	b2b6      	uxth	r6, r6
 801de2e:	0433      	lsls	r3, r6, #16
 801de30:	d502      	bpl.n	801de38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801de32:	1bad      	subs	r5, r5, r6
 801de34:	2600      	movs	r6, #0
 801de36:	b22d      	sxth	r5, r5
 801de38:	f9b2 1000 	ldrsh.w	r1, [r2]
 801de3c:	a814      	add	r0, sp, #80	; 0x50
 801de3e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801de42:	428d      	cmp	r5, r1
 801de44:	b28b      	uxth	r3, r1
 801de46:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801de4a:	bfbf      	itttt	lt
 801de4c:	18f6      	addlt	r6, r6, r3
 801de4e:	1b75      	sublt	r5, r6, r5
 801de50:	b2ae      	uxthlt	r6, r5
 801de52:	460d      	movlt	r5, r1
 801de54:	8891      	ldrh	r1, [r2, #4]
 801de56:	440b      	add	r3, r1
 801de58:	4629      	mov	r1, r5
 801de5a:	b21b      	sxth	r3, r3
 801de5c:	9310      	str	r3, [sp, #64]	; 0x40
 801de5e:	88d3      	ldrh	r3, [r2, #6]
 801de60:	8852      	ldrh	r2, [r2, #2]
 801de62:	4413      	add	r3, r2
 801de64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801de66:	b21b      	sxth	r3, r3
 801de68:	930f      	str	r3, [sp, #60]	; 0x3c
 801de6a:	4bbd      	ldr	r3, [pc, #756]	; (801e160 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801de6c:	f893 b000 	ldrb.w	fp, [r3]
 801de70:	f10b 3cff 	add.w	ip, fp, #4294967295
 801de74:	f1dc 0300 	rsbs	r3, ip, #0
 801de78:	eb43 030c 	adc.w	r3, r3, ip
 801de7c:	930e      	str	r3, [sp, #56]	; 0x38
 801de7e:	4653      	mov	r3, sl
 801de80:	f7f8 fe5e 	bl	8016b40 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801de84:	4629      	mov	r1, r5
 801de86:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801de8a:	4653      	mov	r3, sl
 801de8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801de8e:	a814      	add	r0, sp, #80	; 0x50
 801de90:	f7f8 fe6e 	bl	8016b70 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801de94:	a918      	add	r1, sp, #96	; 0x60
 801de96:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801de9a:	a817      	add	r0, sp, #92	; 0x5c
 801de9c:	f7f8 ff8a 	bl	8016db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801dea0:	f1ba 0f00 	cmp.w	sl, #0
 801dea4:	f040 80fe 	bne.w	801e0a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 801dea8:	f1bb 0f01 	cmp.w	fp, #1
 801deac:	f040 8102 	bne.w	801e0b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801deb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801deb2:	b153      	cbz	r3, 801deca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801deb4:	2408      	movs	r4, #8
 801deb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801deb8:	fb94 f3f8 	sdiv	r3, r4, r8
 801debc:	1e5c      	subs	r4, r3, #1
 801debe:	4414      	add	r4, r2
 801dec0:	fb94 f4f3 	sdiv	r4, r4, r3
 801dec4:	fb14 f403 	smulbb	r4, r4, r3
 801dec8:	b2a4      	uxth	r4, r4
 801deca:	b906      	cbnz	r6, 801dece <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 801decc:	b16f      	cbz	r7, 801deea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 801dece:	fb07 6304 	mla	r3, r7, r4, r6
 801ded2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ded4:	463a      	mov	r2, r7
 801ded6:	fb08 f303 	mul.w	r3, r8, r3
 801deda:	f003 0707 	and.w	r7, r3, #7
 801dede:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801dee2:	9328      	str	r3, [sp, #160]	; 0xa0
 801dee4:	eba9 0302 	sub.w	r3, r9, r2
 801dee8:	930d      	str	r3, [sp, #52]	; 0x34
 801deea:	4651      	mov	r1, sl
 801deec:	980e      	ldr	r0, [sp, #56]	; 0x38
 801deee:	f7ff ff05 	bl	801dcfc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801def2:	4651      	mov	r1, sl
 801def4:	4681      	mov	r9, r0
 801def6:	980e      	ldr	r0, [sp, #56]	; 0x38
 801def8:	f7ff ff30 	bl	801dd5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801defc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801defe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801df00:	4683      	mov	fp, r0
 801df02:	eba3 0a02 	sub.w	sl, r3, r2
 801df06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df08:	459a      	cmp	sl, r3
 801df0a:	bfa8      	it	ge
 801df0c:	469a      	movge	sl, r3
 801df0e:	f1ba 0f00 	cmp.w	sl, #0
 801df12:	f340 811b 	ble.w	801e14c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801df16:	1bad      	subs	r5, r5, r6
 801df18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801df1a:	1b5d      	subs	r5, r3, r5
 801df1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df1e:	429d      	cmp	r5, r3
 801df20:	bfd4      	ite	le
 801df22:	ebc6 0605 	rsble	r6, r6, r5
 801df26:	ebc6 0603 	rsbgt	r6, r6, r3
 801df2a:	2e00      	cmp	r6, #0
 801df2c:	f340 810e 	ble.w	801e14c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801df30:	1ba4      	subs	r4, r4, r6
 801df32:	fb08 f304 	mul.w	r3, r8, r4
 801df36:	930f      	str	r3, [sp, #60]	; 0x3c
 801df38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	f040 810b 	bne.w	801e156 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801df40:	4b88      	ldr	r3, [pc, #544]	; (801e164 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801df42:	6818      	ldr	r0, [r3, #0]
 801df44:	6803      	ldr	r3, [r0, #0]
 801df46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df48:	4798      	blx	r3
 801df4a:	2301      	movs	r3, #1
 801df4c:	4a86      	ldr	r2, [pc, #536]	; (801e168 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801df4e:	fa03 f308 	lsl.w	r3, r3, r8
 801df52:	8811      	ldrh	r1, [r2, #0]
 801df54:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801df58:	3b01      	subs	r3, #1
 801df5a:	b2db      	uxtb	r3, r3
 801df5c:	930e      	str	r3, [sp, #56]	; 0x38
 801df5e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801df62:	fb01 2303 	mla	r3, r1, r3, r2
 801df66:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801df6a:	930a      	str	r3, [sp, #40]	; 0x28
 801df6c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801df6e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801df72:	9313      	str	r3, [sp, #76]	; 0x4c
 801df74:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801df76:	0a19      	lsrs	r1, r3, #8
 801df78:	b2cb      	uxtb	r3, r1
 801df7a:	9312      	str	r3, [sp, #72]	; 0x48
 801df7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801df7e:	b2db      	uxtb	r3, r3
 801df80:	9311      	str	r3, [sp, #68]	; 0x44
 801df82:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801df84:	095a      	lsrs	r2, r3, #5
 801df86:	4b79      	ldr	r3, [pc, #484]	; (801e16c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 801df88:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801df8c:	400b      	ands	r3, r1
 801df8e:	4313      	orrs	r3, r2
 801df90:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801df92:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801df96:	4313      	orrs	r3, r2
 801df98:	b29b      	uxth	r3, r3
 801df9a:	9310      	str	r3, [sp, #64]	; 0x40
 801df9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801df9e:	781a      	ldrb	r2, [r3, #0]
 801dfa0:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801dfa4:	fb06 b919 	mls	r9, r6, r9, fp
 801dfa8:	413a      	asrs	r2, r7
 801dfaa:	fb03 fb06 	mul.w	fp, r3, r6
 801dfae:	930d      	str	r3, [sp, #52]	; 0x34
 801dfb0:	b2d2      	uxtb	r2, r2
 801dfb2:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801dfb6:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801dfba:	f0c0 80ea 	bcc.w	801e192 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 801dfbe:	46b6      	mov	lr, r6
 801dfc0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801dfc4:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801dfc8:	f0c0 80d2 	bcc.w	801e170 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 801dfcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dfce:	4013      	ands	r3, r2
 801dfd0:	d055      	beq.n	801e07e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 801dfd2:	20ff      	movs	r0, #255	; 0xff
 801dfd4:	990e      	ldr	r1, [sp, #56]	; 0x38
 801dfd6:	fb90 f1f1 	sdiv	r1, r0, r1
 801dfda:	434b      	muls	r3, r1
 801dfdc:	2bfe      	cmp	r3, #254	; 0xfe
 801dfde:	dd03      	ble.n	801dfe8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 801dfe0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dfe2:	4281      	cmp	r1, r0
 801dfe4:	f000 80b9 	beq.w	801e15a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801dfe8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dfea:	f8bc 4000 	ldrh.w	r4, [ip]
 801dfee:	fb11 f303 	smulbb	r3, r1, r3
 801dff2:	1220      	asrs	r0, r4, #8
 801dff4:	b29b      	uxth	r3, r3
 801dff6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801dffa:	1c59      	adds	r1, r3, #1
 801dffc:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e000:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e004:	10e1      	asrs	r1, r4, #3
 801e006:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e00a:	00e4      	lsls	r4, r4, #3
 801e00c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e010:	b29d      	uxth	r5, r3
 801e012:	43db      	mvns	r3, r3
 801e014:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801e018:	b2db      	uxtb	r3, r3
 801e01a:	b2e4      	uxtb	r4, r4
 801e01c:	9309      	str	r3, [sp, #36]	; 0x24
 801e01e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e020:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e024:	fb13 f905 	smulbb	r9, r3, r5
 801e028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e02a:	fb00 9003 	mla	r0, r0, r3, r9
 801e02e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e030:	fb13 f905 	smulbb	r9, r3, r5
 801e034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e036:	b280      	uxth	r0, r0
 801e038:	fb01 9103 	mla	r1, r1, r3, r9
 801e03c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e03e:	fb13 f505 	smulbb	r5, r3, r5
 801e042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e044:	b289      	uxth	r1, r1
 801e046:	fb04 5403 	mla	r4, r4, r3, r5
 801e04a:	1c43      	adds	r3, r0, #1
 801e04c:	b2a4      	uxth	r4, r4
 801e04e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e052:	f104 0901 	add.w	r9, r4, #1
 801e056:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e05a:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801e05e:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801e062:	ea49 0000 	orr.w	r0, r9, r0
 801e066:	f101 0901 	add.w	r9, r1, #1
 801e06a:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801e06e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e072:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e076:	ea40 0009 	orr.w	r0, r0, r9
 801e07a:	f8ac 0000 	strh.w	r0, [ip]
 801e07e:	4447      	add	r7, r8
 801e080:	b2bf      	uxth	r7, r7
 801e082:	2f07      	cmp	r7, #7
 801e084:	bf89      	itett	hi
 801e086:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801e088:	fa42 f208 	asrls.w	r2, r2, r8
 801e08c:	2700      	movhi	r7, #0
 801e08e:	785a      	ldrbhi	r2, [r3, #1]
 801e090:	bf8a      	itet	hi
 801e092:	3301      	addhi	r3, #1
 801e094:	b2d2      	uxtbls	r2, r2
 801e096:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801e098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e09a:	449c      	add	ip, r3
 801e09c:	e792      	b.n	801dfc4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801e09e:	441d      	add	r5, r3
 801e0a0:	b22d      	sxth	r5, r5
 801e0a2:	e6c9      	b.n	801de38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801e0a4:	f1ba 0f01 	cmp.w	sl, #1
 801e0a8:	f47f af02 	bne.w	801deb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e0ac:	f1bb 0f01 	cmp.w	fp, #1
 801e0b0:	f47f aefe 	bne.w	801deb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e0b4:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801e164 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 801e0b8:	f8db 0000 	ldr.w	r0, [fp]
 801e0bc:	6803      	ldr	r3, [r0, #0]
 801e0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e0c0:	4798      	blx	r3
 801e0c2:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801e0c6:	465a      	mov	r2, fp
 801e0c8:	d006      	beq.n	801e0d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801e0ca:	f1b8 0f04 	cmp.w	r8, #4
 801e0ce:	d140      	bne.n	801e152 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801e0d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e0d2:	3300      	adds	r3, #0
 801e0d4:	bf18      	it	ne
 801e0d6:	2301      	movne	r3, #1
 801e0d8:	0580      	lsls	r0, r0, #22
 801e0da:	d563      	bpl.n	801e1a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801e0dc:	f1b8 0f08 	cmp.w	r8, #8
 801e0e0:	d160      	bne.n	801e1a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	bf0c      	ite	eq
 801e0e6:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801e0ea:	f44f 7180 	movne.w	r1, #256	; 0x100
 801e0ee:	2e00      	cmp	r6, #0
 801e0f0:	f47f aede 	bne.w	801deb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e0f4:	2f00      	cmp	r7, #0
 801e0f6:	f47f aedb 	bne.w	801deb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e0fe:	18eb      	adds	r3, r5, r3
 801e100:	4283      	cmp	r3, r0
 801e102:	f73f aed5 	bgt.w	801deb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e108:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e10a:	444b      	add	r3, r9
 801e10c:	4283      	cmp	r3, r0
 801e10e:	f73f aecf 	bgt.w	801deb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e112:	f1b8 0f08 	cmp.w	r8, #8
 801e116:	6810      	ldr	r0, [r2, #0]
 801e118:	f04f 0600 	mov.w	r6, #0
 801e11c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801e120:	bf18      	it	ne
 801e122:	3401      	addne	r4, #1
 801e124:	6805      	ldr	r5, [r0, #0]
 801e126:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801e12a:	bf18      	it	ne
 801e12c:	f024 0401 	bicne.w	r4, r4, #1
 801e130:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801e134:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e136:	bf18      	it	ne
 801e138:	b2a4      	uxthne	r4, r4
 801e13a:	9104      	str	r1, [sp, #16]
 801e13c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e13e:	e9cd 4900 	strd	r4, r9, [sp]
 801e142:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801e146:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e148:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 801e14a:	47a0      	blx	r4
 801e14c:	b019      	add	sp, #100	; 0x64
 801e14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e152:	2300      	movs	r3, #0
 801e154:	e7c0      	b.n	801e0d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801e156:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e158:	e6f7      	b.n	801df4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 801e15a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e15c:	e78d      	b.n	801e07a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 801e15e:	bf00      	nop
 801e160:	2400aee4 	.word	0x2400aee4
 801e164:	2400aeec 	.word	0x2400aeec
 801e168:	2400aee6 	.word	0x2400aee6
 801e16c:	00fff800 	.word	0x00fff800
 801e170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e172:	b153      	cbz	r3, 801e18a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801e174:	441f      	add	r7, r3
 801e176:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e178:	b2bf      	uxth	r7, r7
 801e17a:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801e17e:	f007 0707 	and.w	r7, r7, #7
 801e182:	781a      	ldrb	r2, [r3, #0]
 801e184:	9328      	str	r3, [sp, #160]	; 0xa0
 801e186:	413a      	asrs	r2, r7
 801e188:	b2d2      	uxtb	r2, r2
 801e18a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e18c:	445b      	add	r3, fp
 801e18e:	930a      	str	r3, [sp, #40]	; 0x28
 801e190:	e711      	b.n	801dfb6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801e192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e194:	2b00      	cmp	r3, #0
 801e196:	d1d9      	bne.n	801e14c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e198:	4b05      	ldr	r3, [pc, #20]	; (801e1b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 801e19a:	6818      	ldr	r0, [r3, #0]
 801e19c:	6803      	ldr	r3, [r0, #0]
 801e19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e1a0:	4798      	blx	r3
 801e1a2:	e7d3      	b.n	801e14c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	f43f ae83 	beq.w	801deb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e1aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e1ae:	e79e      	b.n	801e0ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e1b0:	2400aeec 	.word	0x2400aeec

0801e1b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801e1b4:	b538      	push	{r3, r4, r5, lr}
 801e1b6:	4c15      	ldr	r4, [pc, #84]	; (801e20c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801e1b8:	4605      	mov	r5, r0
 801e1ba:	7823      	ldrb	r3, [r4, #0]
 801e1bc:	f3bf 8f5b 	dmb	ish
 801e1c0:	07da      	lsls	r2, r3, #31
 801e1c2:	d40b      	bmi.n	801e1dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801e1c4:	4620      	mov	r0, r4
 801e1c6:	f007 fca8 	bl	8025b1a <__cxa_guard_acquire>
 801e1ca:	b138      	cbz	r0, 801e1dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801e1cc:	4620      	mov	r0, r4
 801e1ce:	f007 fcb0 	bl	8025b32 <__cxa_guard_release>
 801e1d2:	4a0f      	ldr	r2, [pc, #60]	; (801e210 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e1d4:	490f      	ldr	r1, [pc, #60]	; (801e214 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801e1d6:	4810      	ldr	r0, [pc, #64]	; (801e218 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e1d8:	f007 fc98 	bl	8025b0c <__aeabi_atexit>
 801e1dc:	4c0f      	ldr	r4, [pc, #60]	; (801e21c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801e1de:	7823      	ldrb	r3, [r4, #0]
 801e1e0:	f3bf 8f5b 	dmb	ish
 801e1e4:	07db      	lsls	r3, r3, #31
 801e1e6:	d40b      	bmi.n	801e200 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801e1e8:	4620      	mov	r0, r4
 801e1ea:	f007 fc96 	bl	8025b1a <__cxa_guard_acquire>
 801e1ee:	b138      	cbz	r0, 801e200 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801e1f0:	4620      	mov	r0, r4
 801e1f2:	f007 fc9e 	bl	8025b32 <__cxa_guard_release>
 801e1f6:	4a06      	ldr	r2, [pc, #24]	; (801e210 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e1f8:	4909      	ldr	r1, [pc, #36]	; (801e220 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801e1fa:	480a      	ldr	r0, [pc, #40]	; (801e224 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801e1fc:	f007 fc86 	bl	8025b0c <__aeabi_atexit>
 801e200:	4b05      	ldr	r3, [pc, #20]	; (801e218 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e202:	612b      	str	r3, [r5, #16]
 801e204:	4b07      	ldr	r3, [pc, #28]	; (801e224 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801e206:	616b      	str	r3, [r5, #20]
 801e208:	bd38      	pop	{r3, r4, r5, pc}
 801e20a:	bf00      	nop
 801e20c:	2400afb8 	.word	0x2400afb8
 801e210:	24000000 	.word	0x24000000
 801e214:	0801c3b3 	.word	0x0801c3b3
 801e218:	24000090 	.word	0x24000090
 801e21c:	2400afbc 	.word	0x2400afbc
 801e220:	0801c3b1 	.word	0x0801c3b1
 801e224:	24000094 	.word	0x24000094

0801e228 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801e228:	b538      	push	{r3, r4, r5, lr}
 801e22a:	4c15      	ldr	r4, [pc, #84]	; (801e280 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801e22c:	4605      	mov	r5, r0
 801e22e:	7823      	ldrb	r3, [r4, #0]
 801e230:	f3bf 8f5b 	dmb	ish
 801e234:	07da      	lsls	r2, r3, #31
 801e236:	d40b      	bmi.n	801e250 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801e238:	4620      	mov	r0, r4
 801e23a:	f007 fc6e 	bl	8025b1a <__cxa_guard_acquire>
 801e23e:	b138      	cbz	r0, 801e250 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801e240:	4620      	mov	r0, r4
 801e242:	f007 fc76 	bl	8025b32 <__cxa_guard_release>
 801e246:	4a0f      	ldr	r2, [pc, #60]	; (801e284 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e248:	490f      	ldr	r1, [pc, #60]	; (801e288 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801e24a:	4810      	ldr	r0, [pc, #64]	; (801e28c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e24c:	f007 fc5e 	bl	8025b0c <__aeabi_atexit>
 801e250:	4c0f      	ldr	r4, [pc, #60]	; (801e290 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801e252:	7823      	ldrb	r3, [r4, #0]
 801e254:	f3bf 8f5b 	dmb	ish
 801e258:	07db      	lsls	r3, r3, #31
 801e25a:	d40b      	bmi.n	801e274 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801e25c:	4620      	mov	r0, r4
 801e25e:	f007 fc5c 	bl	8025b1a <__cxa_guard_acquire>
 801e262:	b138      	cbz	r0, 801e274 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801e264:	4620      	mov	r0, r4
 801e266:	f007 fc64 	bl	8025b32 <__cxa_guard_release>
 801e26a:	4a06      	ldr	r2, [pc, #24]	; (801e284 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e26c:	4909      	ldr	r1, [pc, #36]	; (801e294 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801e26e:	480a      	ldr	r0, [pc, #40]	; (801e298 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801e270:	f007 fc4c 	bl	8025b0c <__aeabi_atexit>
 801e274:	4b05      	ldr	r3, [pc, #20]	; (801e28c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e276:	60ab      	str	r3, [r5, #8]
 801e278:	4b07      	ldr	r3, [pc, #28]	; (801e298 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801e27a:	60eb      	str	r3, [r5, #12]
 801e27c:	bd38      	pop	{r3, r4, r5, pc}
 801e27e:	bf00      	nop
 801e280:	2400af90 	.word	0x2400af90
 801e284:	24000000 	.word	0x24000000
 801e288:	0801c3b7 	.word	0x0801c3b7
 801e28c:	24000068 	.word	0x24000068
 801e290:	2400af94 	.word	0x2400af94
 801e294:	0801c3b5 	.word	0x0801c3b5
 801e298:	2400006c 	.word	0x2400006c

0801e29c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801e29c:	b510      	push	{r4, lr}
 801e29e:	4604      	mov	r4, r0
 801e2a0:	f7ff ff88 	bl	801e1b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801e2a4:	4620      	mov	r0, r4
 801e2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2aa:	f7ff bfbd 	b.w	801e228 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801e2b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e2b0:	b538      	push	{r3, r4, r5, lr}
 801e2b2:	4c15      	ldr	r4, [pc, #84]	; (801e308 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e2b4:	4605      	mov	r5, r0
 801e2b6:	7823      	ldrb	r3, [r4, #0]
 801e2b8:	f3bf 8f5b 	dmb	ish
 801e2bc:	07da      	lsls	r2, r3, #31
 801e2be:	d40b      	bmi.n	801e2d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e2c0:	4620      	mov	r0, r4
 801e2c2:	f007 fc2a 	bl	8025b1a <__cxa_guard_acquire>
 801e2c6:	b138      	cbz	r0, 801e2d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e2c8:	4620      	mov	r0, r4
 801e2ca:	f007 fc32 	bl	8025b32 <__cxa_guard_release>
 801e2ce:	4a0f      	ldr	r2, [pc, #60]	; (801e30c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e2d0:	490f      	ldr	r1, [pc, #60]	; (801e310 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e2d2:	4810      	ldr	r0, [pc, #64]	; (801e314 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e2d4:	f007 fc1a 	bl	8025b0c <__aeabi_atexit>
 801e2d8:	4c0f      	ldr	r4, [pc, #60]	; (801e318 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e2da:	7823      	ldrb	r3, [r4, #0]
 801e2dc:	f3bf 8f5b 	dmb	ish
 801e2e0:	07db      	lsls	r3, r3, #31
 801e2e2:	d40b      	bmi.n	801e2fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e2e4:	4620      	mov	r0, r4
 801e2e6:	f007 fc18 	bl	8025b1a <__cxa_guard_acquire>
 801e2ea:	b138      	cbz	r0, 801e2fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e2ec:	4620      	mov	r0, r4
 801e2ee:	f007 fc20 	bl	8025b32 <__cxa_guard_release>
 801e2f2:	4a06      	ldr	r2, [pc, #24]	; (801e30c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e2f4:	4909      	ldr	r1, [pc, #36]	; (801e31c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e2f6:	480a      	ldr	r0, [pc, #40]	; (801e320 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e2f8:	f007 fc08 	bl	8025b0c <__aeabi_atexit>
 801e2fc:	4b05      	ldr	r3, [pc, #20]	; (801e314 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e2fe:	622b      	str	r3, [r5, #32]
 801e300:	4b07      	ldr	r3, [pc, #28]	; (801e320 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e302:	626b      	str	r3, [r5, #36]	; 0x24
 801e304:	bd38      	pop	{r3, r4, r5, pc}
 801e306:	bf00      	nop
 801e308:	2400afc0 	.word	0x2400afc0
 801e30c:	24000000 	.word	0x24000000
 801e310:	0801c3ab 	.word	0x0801c3ab
 801e314:	24000098 	.word	0x24000098
 801e318:	2400afc4 	.word	0x2400afc4
 801e31c:	0801c3a9 	.word	0x0801c3a9
 801e320:	2400009c 	.word	0x2400009c

0801e324 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e324:	b538      	push	{r3, r4, r5, lr}
 801e326:	4c15      	ldr	r4, [pc, #84]	; (801e37c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e328:	4605      	mov	r5, r0
 801e32a:	7823      	ldrb	r3, [r4, #0]
 801e32c:	f3bf 8f5b 	dmb	ish
 801e330:	07da      	lsls	r2, r3, #31
 801e332:	d40b      	bmi.n	801e34c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e334:	4620      	mov	r0, r4
 801e336:	f007 fbf0 	bl	8025b1a <__cxa_guard_acquire>
 801e33a:	b138      	cbz	r0, 801e34c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e33c:	4620      	mov	r0, r4
 801e33e:	f007 fbf8 	bl	8025b32 <__cxa_guard_release>
 801e342:	4a0f      	ldr	r2, [pc, #60]	; (801e380 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e344:	490f      	ldr	r1, [pc, #60]	; (801e384 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e346:	4810      	ldr	r0, [pc, #64]	; (801e388 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e348:	f007 fbe0 	bl	8025b0c <__aeabi_atexit>
 801e34c:	4c0f      	ldr	r4, [pc, #60]	; (801e38c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e34e:	7823      	ldrb	r3, [r4, #0]
 801e350:	f3bf 8f5b 	dmb	ish
 801e354:	07db      	lsls	r3, r3, #31
 801e356:	d40b      	bmi.n	801e370 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e358:	4620      	mov	r0, r4
 801e35a:	f007 fbde 	bl	8025b1a <__cxa_guard_acquire>
 801e35e:	b138      	cbz	r0, 801e370 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e360:	4620      	mov	r0, r4
 801e362:	f007 fbe6 	bl	8025b32 <__cxa_guard_release>
 801e366:	4a06      	ldr	r2, [pc, #24]	; (801e380 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e368:	4909      	ldr	r1, [pc, #36]	; (801e390 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e36a:	480a      	ldr	r0, [pc, #40]	; (801e394 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e36c:	f007 fbce 	bl	8025b0c <__aeabi_atexit>
 801e370:	4b05      	ldr	r3, [pc, #20]	; (801e388 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e372:	61ab      	str	r3, [r5, #24]
 801e374:	4b07      	ldr	r3, [pc, #28]	; (801e394 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e376:	61eb      	str	r3, [r5, #28]
 801e378:	bd38      	pop	{r3, r4, r5, pc}
 801e37a:	bf00      	nop
 801e37c:	2400af98 	.word	0x2400af98
 801e380:	24000000 	.word	0x24000000
 801e384:	0801c3af 	.word	0x0801c3af
 801e388:	24000070 	.word	0x24000070
 801e38c:	2400af9c 	.word	0x2400af9c
 801e390:	0801c3ad 	.word	0x0801c3ad
 801e394:	24000074 	.word	0x24000074

0801e398 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801e398:	b510      	push	{r4, lr}
 801e39a:	4604      	mov	r4, r0
 801e39c:	f7ff ff88 	bl	801e2b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e3a0:	4620      	mov	r0, r4
 801e3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3a6:	f7ff bfbd 	b.w	801e324 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e3ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e3ac:	b538      	push	{r3, r4, r5, lr}
 801e3ae:	4c15      	ldr	r4, [pc, #84]	; (801e404 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e3b0:	4605      	mov	r5, r0
 801e3b2:	7823      	ldrb	r3, [r4, #0]
 801e3b4:	f3bf 8f5b 	dmb	ish
 801e3b8:	07da      	lsls	r2, r3, #31
 801e3ba:	d40b      	bmi.n	801e3d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e3bc:	4620      	mov	r0, r4
 801e3be:	f007 fbac 	bl	8025b1a <__cxa_guard_acquire>
 801e3c2:	b138      	cbz	r0, 801e3d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e3c4:	4620      	mov	r0, r4
 801e3c6:	f007 fbb4 	bl	8025b32 <__cxa_guard_release>
 801e3ca:	4a0f      	ldr	r2, [pc, #60]	; (801e408 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e3cc:	490f      	ldr	r1, [pc, #60]	; (801e40c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e3ce:	4810      	ldr	r0, [pc, #64]	; (801e410 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e3d0:	f007 fb9c 	bl	8025b0c <__aeabi_atexit>
 801e3d4:	4c0f      	ldr	r4, [pc, #60]	; (801e414 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e3d6:	7823      	ldrb	r3, [r4, #0]
 801e3d8:	f3bf 8f5b 	dmb	ish
 801e3dc:	07db      	lsls	r3, r3, #31
 801e3de:	d40b      	bmi.n	801e3f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e3e0:	4620      	mov	r0, r4
 801e3e2:	f007 fb9a 	bl	8025b1a <__cxa_guard_acquire>
 801e3e6:	b138      	cbz	r0, 801e3f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e3e8:	4620      	mov	r0, r4
 801e3ea:	f007 fba2 	bl	8025b32 <__cxa_guard_release>
 801e3ee:	4a06      	ldr	r2, [pc, #24]	; (801e408 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e3f0:	4909      	ldr	r1, [pc, #36]	; (801e418 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e3f2:	480a      	ldr	r0, [pc, #40]	; (801e41c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e3f4:	f007 fb8a 	bl	8025b0c <__aeabi_atexit>
 801e3f8:	4b05      	ldr	r3, [pc, #20]	; (801e410 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e3fa:	632b      	str	r3, [r5, #48]	; 0x30
 801e3fc:	4b07      	ldr	r3, [pc, #28]	; (801e41c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e3fe:	636b      	str	r3, [r5, #52]	; 0x34
 801e400:	bd38      	pop	{r3, r4, r5, pc}
 801e402:	bf00      	nop
 801e404:	2400afd0 	.word	0x2400afd0
 801e408:	24000000 	.word	0x24000000
 801e40c:	0801c3a3 	.word	0x0801c3a3
 801e410:	240000a8 	.word	0x240000a8
 801e414:	2400afd4 	.word	0x2400afd4
 801e418:	0801c3a1 	.word	0x0801c3a1
 801e41c:	240000ac 	.word	0x240000ac

0801e420 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e420:	b538      	push	{r3, r4, r5, lr}
 801e422:	4c15      	ldr	r4, [pc, #84]	; (801e478 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e424:	4605      	mov	r5, r0
 801e426:	7823      	ldrb	r3, [r4, #0]
 801e428:	f3bf 8f5b 	dmb	ish
 801e42c:	07da      	lsls	r2, r3, #31
 801e42e:	d40b      	bmi.n	801e448 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e430:	4620      	mov	r0, r4
 801e432:	f007 fb72 	bl	8025b1a <__cxa_guard_acquire>
 801e436:	b138      	cbz	r0, 801e448 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e438:	4620      	mov	r0, r4
 801e43a:	f007 fb7a 	bl	8025b32 <__cxa_guard_release>
 801e43e:	4a0f      	ldr	r2, [pc, #60]	; (801e47c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e440:	490f      	ldr	r1, [pc, #60]	; (801e480 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e442:	4810      	ldr	r0, [pc, #64]	; (801e484 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e444:	f007 fb62 	bl	8025b0c <__aeabi_atexit>
 801e448:	4c0f      	ldr	r4, [pc, #60]	; (801e488 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e44a:	7823      	ldrb	r3, [r4, #0]
 801e44c:	f3bf 8f5b 	dmb	ish
 801e450:	07db      	lsls	r3, r3, #31
 801e452:	d40b      	bmi.n	801e46c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e454:	4620      	mov	r0, r4
 801e456:	f007 fb60 	bl	8025b1a <__cxa_guard_acquire>
 801e45a:	b138      	cbz	r0, 801e46c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e45c:	4620      	mov	r0, r4
 801e45e:	f007 fb68 	bl	8025b32 <__cxa_guard_release>
 801e462:	4a06      	ldr	r2, [pc, #24]	; (801e47c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e464:	4909      	ldr	r1, [pc, #36]	; (801e48c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e466:	480a      	ldr	r0, [pc, #40]	; (801e490 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e468:	f007 fb50 	bl	8025b0c <__aeabi_atexit>
 801e46c:	4b05      	ldr	r3, [pc, #20]	; (801e484 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e46e:	62ab      	str	r3, [r5, #40]	; 0x28
 801e470:	4b07      	ldr	r3, [pc, #28]	; (801e490 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e472:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e474:	bd38      	pop	{r3, r4, r5, pc}
 801e476:	bf00      	nop
 801e478:	2400afa0 	.word	0x2400afa0
 801e47c:	24000000 	.word	0x24000000
 801e480:	0801c3a7 	.word	0x0801c3a7
 801e484:	24000078 	.word	0x24000078
 801e488:	2400afa4 	.word	0x2400afa4
 801e48c:	0801c3a5 	.word	0x0801c3a5
 801e490:	2400007c 	.word	0x2400007c

0801e494 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e494:	b510      	push	{r4, lr}
 801e496:	4604      	mov	r4, r0
 801e498:	f7ff ff88 	bl	801e3ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e49c:	4620      	mov	r0, r4
 801e49e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4a2:	f7ff bfbd 	b.w	801e420 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e4a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801e4a8:	b538      	push	{r3, r4, r5, lr}
 801e4aa:	4c15      	ldr	r4, [pc, #84]	; (801e500 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e4ac:	4605      	mov	r5, r0
 801e4ae:	7823      	ldrb	r3, [r4, #0]
 801e4b0:	f3bf 8f5b 	dmb	ish
 801e4b4:	07da      	lsls	r2, r3, #31
 801e4b6:	d40b      	bmi.n	801e4d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e4b8:	4620      	mov	r0, r4
 801e4ba:	f007 fb2e 	bl	8025b1a <__cxa_guard_acquire>
 801e4be:	b138      	cbz	r0, 801e4d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e4c0:	4620      	mov	r0, r4
 801e4c2:	f007 fb36 	bl	8025b32 <__cxa_guard_release>
 801e4c6:	4a0f      	ldr	r2, [pc, #60]	; (801e504 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e4c8:	490f      	ldr	r1, [pc, #60]	; (801e508 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e4ca:	4810      	ldr	r0, [pc, #64]	; (801e50c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e4cc:	f007 fb1e 	bl	8025b0c <__aeabi_atexit>
 801e4d0:	4c0f      	ldr	r4, [pc, #60]	; (801e510 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801e4d2:	7823      	ldrb	r3, [r4, #0]
 801e4d4:	f3bf 8f5b 	dmb	ish
 801e4d8:	07db      	lsls	r3, r3, #31
 801e4da:	d40b      	bmi.n	801e4f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e4dc:	4620      	mov	r0, r4
 801e4de:	f007 fb1c 	bl	8025b1a <__cxa_guard_acquire>
 801e4e2:	b138      	cbz	r0, 801e4f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e4e4:	4620      	mov	r0, r4
 801e4e6:	f007 fb24 	bl	8025b32 <__cxa_guard_release>
 801e4ea:	4a06      	ldr	r2, [pc, #24]	; (801e504 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e4ec:	4909      	ldr	r1, [pc, #36]	; (801e514 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e4ee:	480a      	ldr	r0, [pc, #40]	; (801e518 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e4f0:	f007 fb0c 	bl	8025b0c <__aeabi_atexit>
 801e4f4:	4b05      	ldr	r3, [pc, #20]	; (801e50c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e4f6:	652b      	str	r3, [r5, #80]	; 0x50
 801e4f8:	4b07      	ldr	r3, [pc, #28]	; (801e518 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e4fa:	656b      	str	r3, [r5, #84]	; 0x54
 801e4fc:	bd38      	pop	{r3, r4, r5, pc}
 801e4fe:	bf00      	nop
 801e500:	2400afd8 	.word	0x2400afd8
 801e504:	24000000 	.word	0x24000000
 801e508:	0801c393 	.word	0x0801c393
 801e50c:	240000b0 	.word	0x240000b0
 801e510:	2400afdc 	.word	0x2400afdc
 801e514:	0801c391 	.word	0x0801c391
 801e518:	240000b4 	.word	0x240000b4

0801e51c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801e51c:	b538      	push	{r3, r4, r5, lr}
 801e51e:	4c15      	ldr	r4, [pc, #84]	; (801e574 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e520:	4605      	mov	r5, r0
 801e522:	7823      	ldrb	r3, [r4, #0]
 801e524:	f3bf 8f5b 	dmb	ish
 801e528:	07da      	lsls	r2, r3, #31
 801e52a:	d40b      	bmi.n	801e544 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e52c:	4620      	mov	r0, r4
 801e52e:	f007 faf4 	bl	8025b1a <__cxa_guard_acquire>
 801e532:	b138      	cbz	r0, 801e544 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e534:	4620      	mov	r0, r4
 801e536:	f007 fafc 	bl	8025b32 <__cxa_guard_release>
 801e53a:	4a0f      	ldr	r2, [pc, #60]	; (801e578 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e53c:	490f      	ldr	r1, [pc, #60]	; (801e57c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e53e:	4810      	ldr	r0, [pc, #64]	; (801e580 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e540:	f007 fae4 	bl	8025b0c <__aeabi_atexit>
 801e544:	4c0f      	ldr	r4, [pc, #60]	; (801e584 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801e546:	7823      	ldrb	r3, [r4, #0]
 801e548:	f3bf 8f5b 	dmb	ish
 801e54c:	07db      	lsls	r3, r3, #31
 801e54e:	d40b      	bmi.n	801e568 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e550:	4620      	mov	r0, r4
 801e552:	f007 fae2 	bl	8025b1a <__cxa_guard_acquire>
 801e556:	b138      	cbz	r0, 801e568 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e558:	4620      	mov	r0, r4
 801e55a:	f007 faea 	bl	8025b32 <__cxa_guard_release>
 801e55e:	4a06      	ldr	r2, [pc, #24]	; (801e578 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e560:	4909      	ldr	r1, [pc, #36]	; (801e588 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801e562:	480a      	ldr	r0, [pc, #40]	; (801e58c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e564:	f007 fad2 	bl	8025b0c <__aeabi_atexit>
 801e568:	4b05      	ldr	r3, [pc, #20]	; (801e580 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e56a:	64ab      	str	r3, [r5, #72]	; 0x48
 801e56c:	4b07      	ldr	r3, [pc, #28]	; (801e58c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e56e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e570:	bd38      	pop	{r3, r4, r5, pc}
 801e572:	bf00      	nop
 801e574:	2400afe0 	.word	0x2400afe0
 801e578:	24000000 	.word	0x24000000
 801e57c:	0801c397 	.word	0x0801c397
 801e580:	240000b8 	.word	0x240000b8
 801e584:	2400afe4 	.word	0x2400afe4
 801e588:	0801c395 	.word	0x0801c395
 801e58c:	240000bc 	.word	0x240000bc

0801e590 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801e590:	b538      	push	{r3, r4, r5, lr}
 801e592:	4c15      	ldr	r4, [pc, #84]	; (801e5e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801e594:	4605      	mov	r5, r0
 801e596:	7823      	ldrb	r3, [r4, #0]
 801e598:	f3bf 8f5b 	dmb	ish
 801e59c:	07da      	lsls	r2, r3, #31
 801e59e:	d40b      	bmi.n	801e5b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801e5a0:	4620      	mov	r0, r4
 801e5a2:	f007 faba 	bl	8025b1a <__cxa_guard_acquire>
 801e5a6:	b138      	cbz	r0, 801e5b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801e5a8:	4620      	mov	r0, r4
 801e5aa:	f007 fac2 	bl	8025b32 <__cxa_guard_release>
 801e5ae:	4a0f      	ldr	r2, [pc, #60]	; (801e5ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e5b0:	490f      	ldr	r1, [pc, #60]	; (801e5f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801e5b2:	4810      	ldr	r0, [pc, #64]	; (801e5f4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e5b4:	f007 faaa 	bl	8025b0c <__aeabi_atexit>
 801e5b8:	4c0f      	ldr	r4, [pc, #60]	; (801e5f8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801e5ba:	7823      	ldrb	r3, [r4, #0]
 801e5bc:	f3bf 8f5b 	dmb	ish
 801e5c0:	07db      	lsls	r3, r3, #31
 801e5c2:	d40b      	bmi.n	801e5dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801e5c4:	4620      	mov	r0, r4
 801e5c6:	f007 faa8 	bl	8025b1a <__cxa_guard_acquire>
 801e5ca:	b138      	cbz	r0, 801e5dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801e5cc:	4620      	mov	r0, r4
 801e5ce:	f007 fab0 	bl	8025b32 <__cxa_guard_release>
 801e5d2:	4a06      	ldr	r2, [pc, #24]	; (801e5ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e5d4:	4909      	ldr	r1, [pc, #36]	; (801e5fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801e5d6:	480a      	ldr	r0, [pc, #40]	; (801e600 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801e5d8:	f007 fa98 	bl	8025b0c <__aeabi_atexit>
 801e5dc:	4b05      	ldr	r3, [pc, #20]	; (801e5f4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e5de:	642b      	str	r3, [r5, #64]	; 0x40
 801e5e0:	4b07      	ldr	r3, [pc, #28]	; (801e600 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801e5e2:	646b      	str	r3, [r5, #68]	; 0x44
 801e5e4:	bd38      	pop	{r3, r4, r5, pc}
 801e5e6:	bf00      	nop
 801e5e8:	2400afa8 	.word	0x2400afa8
 801e5ec:	24000000 	.word	0x24000000
 801e5f0:	0801c39b 	.word	0x0801c39b
 801e5f4:	24000080 	.word	0x24000080
 801e5f8:	2400afac 	.word	0x2400afac
 801e5fc:	0801c399 	.word	0x0801c399
 801e600:	24000084 	.word	0x24000084

0801e604 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801e604:	b538      	push	{r3, r4, r5, lr}
 801e606:	4c15      	ldr	r4, [pc, #84]	; (801e65c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801e608:	4605      	mov	r5, r0
 801e60a:	7823      	ldrb	r3, [r4, #0]
 801e60c:	f3bf 8f5b 	dmb	ish
 801e610:	07da      	lsls	r2, r3, #31
 801e612:	d40b      	bmi.n	801e62c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801e614:	4620      	mov	r0, r4
 801e616:	f007 fa80 	bl	8025b1a <__cxa_guard_acquire>
 801e61a:	b138      	cbz	r0, 801e62c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801e61c:	4620      	mov	r0, r4
 801e61e:	f007 fa88 	bl	8025b32 <__cxa_guard_release>
 801e622:	4a0f      	ldr	r2, [pc, #60]	; (801e660 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e624:	490f      	ldr	r1, [pc, #60]	; (801e664 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801e626:	4810      	ldr	r0, [pc, #64]	; (801e668 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e628:	f007 fa70 	bl	8025b0c <__aeabi_atexit>
 801e62c:	4c0f      	ldr	r4, [pc, #60]	; (801e66c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801e62e:	7823      	ldrb	r3, [r4, #0]
 801e630:	f3bf 8f5b 	dmb	ish
 801e634:	07db      	lsls	r3, r3, #31
 801e636:	d40b      	bmi.n	801e650 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801e638:	4620      	mov	r0, r4
 801e63a:	f007 fa6e 	bl	8025b1a <__cxa_guard_acquire>
 801e63e:	b138      	cbz	r0, 801e650 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801e640:	4620      	mov	r0, r4
 801e642:	f007 fa76 	bl	8025b32 <__cxa_guard_release>
 801e646:	4a06      	ldr	r2, [pc, #24]	; (801e660 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e648:	4909      	ldr	r1, [pc, #36]	; (801e670 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801e64a:	480a      	ldr	r0, [pc, #40]	; (801e674 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801e64c:	f007 fa5e 	bl	8025b0c <__aeabi_atexit>
 801e650:	4b05      	ldr	r3, [pc, #20]	; (801e668 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e652:	63ab      	str	r3, [r5, #56]	; 0x38
 801e654:	4b07      	ldr	r3, [pc, #28]	; (801e674 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801e656:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e658:	bd38      	pop	{r3, r4, r5, pc}
 801e65a:	bf00      	nop
 801e65c:	2400afc8 	.word	0x2400afc8
 801e660:	24000000 	.word	0x24000000
 801e664:	0801c39f 	.word	0x0801c39f
 801e668:	240000a0 	.word	0x240000a0
 801e66c:	2400afcc 	.word	0x2400afcc
 801e670:	0801c39d 	.word	0x0801c39d
 801e674:	240000a4 	.word	0x240000a4

0801e678 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801e678:	b510      	push	{r4, lr}
 801e67a:	4604      	mov	r4, r0
 801e67c:	f7ff ff14 	bl	801e4a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801e680:	4620      	mov	r0, r4
 801e682:	f7ff ff85 	bl	801e590 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801e686:	4620      	mov	r0, r4
 801e688:	f7ff ff48 	bl	801e51c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801e68c:	4620      	mov	r0, r4
 801e68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e692:	f7ff bfb7 	b.w	801e604 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801e698 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e698:	b538      	push	{r3, r4, r5, lr}
 801e69a:	4c15      	ldr	r4, [pc, #84]	; (801e6f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e69c:	4605      	mov	r5, r0
 801e69e:	7823      	ldrb	r3, [r4, #0]
 801e6a0:	f3bf 8f5b 	dmb	ish
 801e6a4:	07da      	lsls	r2, r3, #31
 801e6a6:	d40b      	bmi.n	801e6c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e6a8:	4620      	mov	r0, r4
 801e6aa:	f007 fa36 	bl	8025b1a <__cxa_guard_acquire>
 801e6ae:	b138      	cbz	r0, 801e6c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e6b0:	4620      	mov	r0, r4
 801e6b2:	f007 fa3e 	bl	8025b32 <__cxa_guard_release>
 801e6b6:	4a0f      	ldr	r2, [pc, #60]	; (801e6f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e6b8:	490f      	ldr	r1, [pc, #60]	; (801e6f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e6ba:	4810      	ldr	r0, [pc, #64]	; (801e6fc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e6bc:	f007 fa26 	bl	8025b0c <__aeabi_atexit>
 801e6c0:	4c0f      	ldr	r4, [pc, #60]	; (801e700 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e6c2:	7823      	ldrb	r3, [r4, #0]
 801e6c4:	f3bf 8f5b 	dmb	ish
 801e6c8:	07db      	lsls	r3, r3, #31
 801e6ca:	d40b      	bmi.n	801e6e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e6cc:	4620      	mov	r0, r4
 801e6ce:	f007 fa24 	bl	8025b1a <__cxa_guard_acquire>
 801e6d2:	b138      	cbz	r0, 801e6e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e6d4:	4620      	mov	r0, r4
 801e6d6:	f007 fa2c 	bl	8025b32 <__cxa_guard_release>
 801e6da:	4a06      	ldr	r2, [pc, #24]	; (801e6f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e6dc:	4909      	ldr	r1, [pc, #36]	; (801e704 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e6de:	480a      	ldr	r0, [pc, #40]	; (801e708 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e6e0:	f007 fa14 	bl	8025b0c <__aeabi_atexit>
 801e6e4:	4b05      	ldr	r3, [pc, #20]	; (801e6fc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e6e6:	662b      	str	r3, [r5, #96]	; 0x60
 801e6e8:	4b07      	ldr	r3, [pc, #28]	; (801e708 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e6ea:	666b      	str	r3, [r5, #100]	; 0x64
 801e6ec:	bd38      	pop	{r3, r4, r5, pc}
 801e6ee:	bf00      	nop
 801e6f0:	2400afb0 	.word	0x2400afb0
 801e6f4:	24000000 	.word	0x24000000
 801e6f8:	0801c38b 	.word	0x0801c38b
 801e6fc:	24000088 	.word	0x24000088
 801e700:	2400afb4 	.word	0x2400afb4
 801e704:	0801c389 	.word	0x0801c389
 801e708:	2400008c 	.word	0x2400008c

0801e70c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e70c:	b538      	push	{r3, r4, r5, lr}
 801e70e:	4c15      	ldr	r4, [pc, #84]	; (801e764 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e710:	4605      	mov	r5, r0
 801e712:	7823      	ldrb	r3, [r4, #0]
 801e714:	f3bf 8f5b 	dmb	ish
 801e718:	07da      	lsls	r2, r3, #31
 801e71a:	d40b      	bmi.n	801e734 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e71c:	4620      	mov	r0, r4
 801e71e:	f007 f9fc 	bl	8025b1a <__cxa_guard_acquire>
 801e722:	b138      	cbz	r0, 801e734 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e724:	4620      	mov	r0, r4
 801e726:	f007 fa04 	bl	8025b32 <__cxa_guard_release>
 801e72a:	4a0f      	ldr	r2, [pc, #60]	; (801e768 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e72c:	490f      	ldr	r1, [pc, #60]	; (801e76c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e72e:	4810      	ldr	r0, [pc, #64]	; (801e770 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e730:	f007 f9ec 	bl	8025b0c <__aeabi_atexit>
 801e734:	4c0f      	ldr	r4, [pc, #60]	; (801e774 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e736:	7823      	ldrb	r3, [r4, #0]
 801e738:	f3bf 8f5b 	dmb	ish
 801e73c:	07db      	lsls	r3, r3, #31
 801e73e:	d40b      	bmi.n	801e758 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e740:	4620      	mov	r0, r4
 801e742:	f007 f9ea 	bl	8025b1a <__cxa_guard_acquire>
 801e746:	b138      	cbz	r0, 801e758 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e748:	4620      	mov	r0, r4
 801e74a:	f007 f9f2 	bl	8025b32 <__cxa_guard_release>
 801e74e:	4a06      	ldr	r2, [pc, #24]	; (801e768 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e750:	4909      	ldr	r1, [pc, #36]	; (801e778 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e752:	480a      	ldr	r0, [pc, #40]	; (801e77c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e754:	f007 f9da 	bl	8025b0c <__aeabi_atexit>
 801e758:	4b05      	ldr	r3, [pc, #20]	; (801e770 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e75a:	65ab      	str	r3, [r5, #88]	; 0x58
 801e75c:	4b07      	ldr	r3, [pc, #28]	; (801e77c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e75e:	65eb      	str	r3, [r5, #92]	; 0x5c
 801e760:	bd38      	pop	{r3, r4, r5, pc}
 801e762:	bf00      	nop
 801e764:	2400af88 	.word	0x2400af88
 801e768:	24000000 	.word	0x24000000
 801e76c:	0801c38f 	.word	0x0801c38f
 801e770:	24000060 	.word	0x24000060
 801e774:	2400af8c 	.word	0x2400af8c
 801e778:	0801c38d 	.word	0x0801c38d
 801e77c:	24000064 	.word	0x24000064

0801e780 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801e780:	b510      	push	{r4, lr}
 801e782:	4604      	mov	r4, r0
 801e784:	f7ff ff88 	bl	801e698 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e788:	4620      	mov	r0, r4
 801e78a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e78e:	f7ff bfbd 	b.w	801e70c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e794 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e794:	b538      	push	{r3, r4, r5, lr}
 801e796:	4c15      	ldr	r4, [pc, #84]	; (801e7ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e798:	4605      	mov	r5, r0
 801e79a:	7823      	ldrb	r3, [r4, #0]
 801e79c:	f3bf 8f5b 	dmb	ish
 801e7a0:	07da      	lsls	r2, r3, #31
 801e7a2:	d40b      	bmi.n	801e7bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e7a4:	4620      	mov	r0, r4
 801e7a6:	f007 f9b8 	bl	8025b1a <__cxa_guard_acquire>
 801e7aa:	b138      	cbz	r0, 801e7bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e7ac:	4620      	mov	r0, r4
 801e7ae:	f007 f9c0 	bl	8025b32 <__cxa_guard_release>
 801e7b2:	4a0f      	ldr	r2, [pc, #60]	; (801e7f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e7b4:	490f      	ldr	r1, [pc, #60]	; (801e7f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e7b6:	4810      	ldr	r0, [pc, #64]	; (801e7f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e7b8:	f007 f9a8 	bl	8025b0c <__aeabi_atexit>
 801e7bc:	4c0f      	ldr	r4, [pc, #60]	; (801e7fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e7be:	7823      	ldrb	r3, [r4, #0]
 801e7c0:	f3bf 8f5b 	dmb	ish
 801e7c4:	07db      	lsls	r3, r3, #31
 801e7c6:	d40b      	bmi.n	801e7e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e7c8:	4620      	mov	r0, r4
 801e7ca:	f007 f9a6 	bl	8025b1a <__cxa_guard_acquire>
 801e7ce:	b138      	cbz	r0, 801e7e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e7d0:	4620      	mov	r0, r4
 801e7d2:	f007 f9ae 	bl	8025b32 <__cxa_guard_release>
 801e7d6:	4a06      	ldr	r2, [pc, #24]	; (801e7f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e7d8:	4909      	ldr	r1, [pc, #36]	; (801e800 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e7da:	480a      	ldr	r0, [pc, #40]	; (801e804 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e7dc:	f007 f996 	bl	8025b0c <__aeabi_atexit>
 801e7e0:	4b05      	ldr	r3, [pc, #20]	; (801e7f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e7e2:	672b      	str	r3, [r5, #112]	; 0x70
 801e7e4:	4b07      	ldr	r3, [pc, #28]	; (801e804 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e7e6:	676b      	str	r3, [r5, #116]	; 0x74
 801e7e8:	bd38      	pop	{r3, r4, r5, pc}
 801e7ea:	bf00      	nop
 801e7ec:	2400af80 	.word	0x2400af80
 801e7f0:	24000000 	.word	0x24000000
 801e7f4:	0801c383 	.word	0x0801c383
 801e7f8:	24000058 	.word	0x24000058
 801e7fc:	2400af84 	.word	0x2400af84
 801e800:	0801c381 	.word	0x0801c381
 801e804:	2400005c 	.word	0x2400005c

0801e808 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e808:	b538      	push	{r3, r4, r5, lr}
 801e80a:	4c15      	ldr	r4, [pc, #84]	; (801e860 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e80c:	4605      	mov	r5, r0
 801e80e:	7823      	ldrb	r3, [r4, #0]
 801e810:	f3bf 8f5b 	dmb	ish
 801e814:	07da      	lsls	r2, r3, #31
 801e816:	d40b      	bmi.n	801e830 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e818:	4620      	mov	r0, r4
 801e81a:	f007 f97e 	bl	8025b1a <__cxa_guard_acquire>
 801e81e:	b138      	cbz	r0, 801e830 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e820:	4620      	mov	r0, r4
 801e822:	f007 f986 	bl	8025b32 <__cxa_guard_release>
 801e826:	4a0f      	ldr	r2, [pc, #60]	; (801e864 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e828:	490f      	ldr	r1, [pc, #60]	; (801e868 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e82a:	4810      	ldr	r0, [pc, #64]	; (801e86c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e82c:	f007 f96e 	bl	8025b0c <__aeabi_atexit>
 801e830:	4c0f      	ldr	r4, [pc, #60]	; (801e870 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e832:	7823      	ldrb	r3, [r4, #0]
 801e834:	f3bf 8f5b 	dmb	ish
 801e838:	07db      	lsls	r3, r3, #31
 801e83a:	d40b      	bmi.n	801e854 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e83c:	4620      	mov	r0, r4
 801e83e:	f007 f96c 	bl	8025b1a <__cxa_guard_acquire>
 801e842:	b138      	cbz	r0, 801e854 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e844:	4620      	mov	r0, r4
 801e846:	f007 f974 	bl	8025b32 <__cxa_guard_release>
 801e84a:	4a06      	ldr	r2, [pc, #24]	; (801e864 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e84c:	4909      	ldr	r1, [pc, #36]	; (801e874 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e84e:	480a      	ldr	r0, [pc, #40]	; (801e878 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e850:	f007 f95c 	bl	8025b0c <__aeabi_atexit>
 801e854:	4b05      	ldr	r3, [pc, #20]	; (801e86c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e856:	66ab      	str	r3, [r5, #104]	; 0x68
 801e858:	4b07      	ldr	r3, [pc, #28]	; (801e878 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e85a:	66eb      	str	r3, [r5, #108]	; 0x6c
 801e85c:	bd38      	pop	{r3, r4, r5, pc}
 801e85e:	bf00      	nop
 801e860:	2400af78 	.word	0x2400af78
 801e864:	24000000 	.word	0x24000000
 801e868:	0801c387 	.word	0x0801c387
 801e86c:	24000050 	.word	0x24000050
 801e870:	2400af7c 	.word	0x2400af7c
 801e874:	0801c385 	.word	0x0801c385
 801e878:	24000054 	.word	0x24000054

0801e87c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801e87c:	b510      	push	{r4, lr}
 801e87e:	4604      	mov	r4, r0
 801e880:	f7ff ff88 	bl	801e794 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e884:	4620      	mov	r0, r4
 801e886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e88a:	f7ff bfbd 	b.w	801e808 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801e88e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801e88e:	b510      	push	{r4, lr}
 801e890:	4604      	mov	r4, r0
 801e892:	f7ff fff3 	bl	801e87c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801e896:	4620      	mov	r0, r4
 801e898:	f7ff ff72 	bl	801e780 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801e89c:	4620      	mov	r0, r4
 801e89e:	f7ff fdf9 	bl	801e494 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801e8a2:	4620      	mov	r0, r4
 801e8a4:	f7ff fcfa 	bl	801e29c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801e8a8:	4620      	mov	r0, r4
 801e8aa:	f7ff fd75 	bl	801e398 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801e8ae:	4620      	mov	r0, r4
 801e8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8b4:	f7ff bee0 	b.w	801e678 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801e8b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801e8b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8bc:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 801e8c0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801e8c4:	f1be 0f00 	cmp.w	lr, #0
 801e8c8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801e8cc:	fb0e 4708 	mla	r7, lr, r8, r4
 801e8d0:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801e8d4:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 801e8d8:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801e8dc:	eb02 0a07 	add.w	sl, r2, r7
 801e8e0:	8808      	ldrh	r0, [r1, #0]
 801e8e2:	db37      	blt.n	801e954 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801e8e4:	45f3      	cmp	fp, lr
 801e8e6:	dd35      	ble.n	801e954 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801e8e8:	2c00      	cmp	r4, #0
 801e8ea:	db31      	blt.n	801e950 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801e8ec:	45a0      	cmp	r8, r4
 801e8ee:	dd2f      	ble.n	801e950 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801e8f0:	5dd2      	ldrb	r2, [r2, r7]
 801e8f2:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801e8f6:	1c62      	adds	r2, r4, #1
 801e8f8:	d42f      	bmi.n	801e95a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801e8fa:	4590      	cmp	r8, r2
 801e8fc:	dd2d      	ble.n	801e95a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801e8fe:	b366      	cbz	r6, 801e95a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801e900:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801e904:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801e908:	f11e 0e01 	adds.w	lr, lr, #1
 801e90c:	d429      	bmi.n	801e962 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801e90e:	45f3      	cmp	fp, lr
 801e910:	dd27      	ble.n	801e962 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801e912:	f1bc 0f00 	cmp.w	ip, #0
 801e916:	f000 80a1 	beq.w	801ea5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 801e91a:	2c00      	cmp	r4, #0
 801e91c:	db1f      	blt.n	801e95e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801e91e:	45a0      	cmp	r8, r4
 801e920:	dd1d      	ble.n	801e95e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801e922:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801e926:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801e92a:	3401      	adds	r4, #1
 801e92c:	d41c      	bmi.n	801e968 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801e92e:	45a0      	cmp	r8, r4
 801e930:	dd1a      	ble.n	801e968 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801e932:	b1de      	cbz	r6, 801e96c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 801e934:	44d0      	add	r8, sl
 801e936:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e93a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e93e:	2e0f      	cmp	r6, #15
 801e940:	d915      	bls.n	801e96e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 801e942:	4b49      	ldr	r3, [pc, #292]	; (801ea68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 801e944:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801e948:	4a48      	ldr	r2, [pc, #288]	; (801ea6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801e94a:	4849      	ldr	r0, [pc, #292]	; (801ea70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801e94c:	f007 f912 	bl	8025b74 <__assert_func>
 801e950:	4681      	mov	r9, r0
 801e952:	e7d0      	b.n	801e8f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 801e954:	4607      	mov	r7, r0
 801e956:	4681      	mov	r9, r0
 801e958:	e7d6      	b.n	801e908 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801e95a:	4607      	mov	r7, r0
 801e95c:	e7d4      	b.n	801e908 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801e95e:	4686      	mov	lr, r0
 801e960:	e7e3      	b.n	801e92a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 801e962:	4603      	mov	r3, r0
 801e964:	4686      	mov	lr, r0
 801e966:	e7ea      	b.n	801e93e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801e968:	4603      	mov	r3, r0
 801e96a:	e7e8      	b.n	801e93e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801e96c:	4603      	mov	r3, r0
 801e96e:	f1bc 0f0f 	cmp.w	ip, #15
 801e972:	d8e6      	bhi.n	801e942 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801e974:	fb16 f80c 	smulbb	r8, r6, ip
 801e978:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801e97c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801e980:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e984:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e988:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801e98c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e990:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e994:	ea44 0909 	orr.w	r9, r4, r9
 801e998:	f1cc 0410 	rsb	r4, ip, #16
 801e99c:	041a      	lsls	r2, r3, #16
 801e99e:	ea4a 0707 	orr.w	r7, sl, r7
 801e9a2:	1ba4      	subs	r4, r4, r6
 801e9a4:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801e9a8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e9ac:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e9b0:	4377      	muls	r7, r6
 801e9b2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801e9b6:	4313      	orrs	r3, r2
 801e9b8:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801e9bc:	fb04 7409 	mla	r4, r4, r9, r7
 801e9c0:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801e9c4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e9c8:	b2af      	uxth	r7, r5
 801e9ca:	fb08 4303 	mla	r3, r8, r3, r4
 801e9ce:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 801e9d2:	43ed      	mvns	r5, r5
 801e9d4:	10c6      	asrs	r6, r0, #3
 801e9d6:	4322      	orrs	r2, r4
 801e9d8:	b2ed      	uxtb	r5, r5
 801e9da:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e9de:	fb0c 3202 	mla	r2, ip, r2, r3
 801e9e2:	fb16 f605 	smulbb	r6, r6, r5
 801e9e6:	0d53      	lsrs	r3, r2, #21
 801e9e8:	0952      	lsrs	r2, r2, #5
 801e9ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e9ee:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e9f2:	431a      	orrs	r2, r3
 801e9f4:	b293      	uxth	r3, r2
 801e9f6:	1202      	asrs	r2, r0, #8
 801e9f8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801e9fc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ea00:	00dc      	lsls	r4, r3, #3
 801ea02:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ea06:	fb12 f205 	smulbb	r2, r2, r5
 801ea0a:	b2e4      	uxtb	r4, r4
 801ea0c:	fb0c 2c07 	mla	ip, ip, r7, r2
 801ea10:	10da      	asrs	r2, r3, #3
 801ea12:	00c3      	lsls	r3, r0, #3
 801ea14:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ea18:	fa1f fc8c 	uxth.w	ip, ip
 801ea1c:	b2db      	uxtb	r3, r3
 801ea1e:	fb02 6207 	mla	r2, r2, r7, r6
 801ea22:	fb13 f305 	smulbb	r3, r3, r5
 801ea26:	b296      	uxth	r6, r2
 801ea28:	fb04 3307 	mla	r3, r4, r7, r3
 801ea2c:	b29a      	uxth	r2, r3
 801ea2e:	f10c 0301 	add.w	r3, ip, #1
 801ea32:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ea36:	1c53      	adds	r3, r2, #1
 801ea38:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ea3c:	1c72      	adds	r2, r6, #1
 801ea3e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ea42:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801ea46:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ea4a:	0952      	lsrs	r2, r2, #5
 801ea4c:	ea43 030c 	orr.w	r3, r3, ip
 801ea50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ea54:	4313      	orrs	r3, r2
 801ea56:	800b      	strh	r3, [r1, #0]
 801ea58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea5c:	2e0f      	cmp	r6, #15
 801ea5e:	f63f af70 	bhi.w	801e942 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801ea62:	4603      	mov	r3, r0
 801ea64:	4686      	mov	lr, r0
 801ea66:	e785      	b.n	801e974 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801ea68:	0802a0cd 	.word	0x0802a0cd
 801ea6c:	0802a743 	.word	0x0802a743
 801ea70:	0802a151 	.word	0x0802a151

0801ea74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ea74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea78:	ed2d 8b08 	vpush	{d8-d11}
 801ea7c:	b099      	sub	sp, #100	; 0x64
 801ea7e:	eeb0 aa40 	vmov.f32	s20, s0
 801ea82:	eef0 9a60 	vmov.f32	s19, s1
 801ea86:	9215      	str	r2, [sp, #84]	; 0x54
 801ea88:	eeb0 9a41 	vmov.f32	s18, s2
 801ea8c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ea8e:	eeb0 8a62 	vmov.f32	s16, s5
 801ea92:	9309      	str	r3, [sp, #36]	; 0x24
 801ea94:	eef0 8a43 	vmov.f32	s17, s6
 801ea98:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801ea9c:	eef0 ba44 	vmov.f32	s23, s8
 801eaa0:	9016      	str	r0, [sp, #88]	; 0x58
 801eaa2:	eeb0 ba64 	vmov.f32	s22, s9
 801eaa6:	930d      	str	r3, [sp, #52]	; 0x34
 801eaa8:	eef0 aa45 	vmov.f32	s21, s10
 801eaac:	6850      	ldr	r0, [r2, #4]
 801eaae:	910c      	str	r1, [sp, #48]	; 0x30
 801eab0:	6812      	ldr	r2, [r2, #0]
 801eab2:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801eab6:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 801eaba:	fb00 1303 	mla	r3, r0, r3, r1
 801eabe:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801eac2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801eac4:	681b      	ldr	r3, [r3, #0]
 801eac6:	930b      	str	r3, [sp, #44]	; 0x2c
 801eac8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801eaca:	685e      	ldr	r6, [r3, #4]
 801eacc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eace:	3604      	adds	r6, #4
 801ead0:	43db      	mvns	r3, r3
 801ead2:	b2db      	uxtb	r3, r3
 801ead4:	930a      	str	r3, [sp, #40]	; 0x28
 801ead6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ead8:	2b00      	cmp	r3, #0
 801eada:	dc03      	bgt.n	801eae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801eadc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eade:	2b00      	cmp	r3, #0
 801eae0:	f340 8225 	ble.w	801ef2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 801eae4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801eae6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eaea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eaee:	1e48      	subs	r0, r1, #1
 801eaf0:	1e57      	subs	r7, r2, #1
 801eaf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	f340 80e3 	ble.w	801ecc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 801eafa:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801eafe:	ea4f 4325 	mov.w	r3, r5, asr #16
 801eb02:	d406      	bmi.n	801eb12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eb04:	4584      	cmp	ip, r0
 801eb06:	da04      	bge.n	801eb12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	db02      	blt.n	801eb12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eb0c:	42bb      	cmp	r3, r7
 801eb0e:	f2c0 80d8 	blt.w	801ecc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801eb12:	f11c 0c01 	adds.w	ip, ip, #1
 801eb16:	f100 80c9 	bmi.w	801ecac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801eb1a:	4561      	cmp	r1, ip
 801eb1c:	f2c0 80c6 	blt.w	801ecac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801eb20:	3301      	adds	r3, #1
 801eb22:	f100 80c3 	bmi.w	801ecac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801eb26:	429a      	cmp	r2, r3
 801eb28:	f2c0 80c0 	blt.w	801ecac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801eb2c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801eb30:	4647      	mov	r7, r8
 801eb32:	f1bb 0f00 	cmp.w	fp, #0
 801eb36:	f340 80e3 	ble.w	801ed00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eb3a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801eb3c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801eb40:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801eb42:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801eb46:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801eb4a:	ea5f 422a 	movs.w	r2, sl, asr #16
 801eb4e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801eb52:	689b      	ldr	r3, [r3, #8]
 801eb54:	f100 8121 	bmi.w	801ed9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801eb58:	f103 39ff 	add.w	r9, r3, #4294967295
 801eb5c:	454a      	cmp	r2, r9
 801eb5e:	f280 811c 	bge.w	801ed9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801eb62:	f1bc 0f00 	cmp.w	ip, #0
 801eb66:	f2c0 8118 	blt.w	801ed9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801eb6a:	f10e 39ff 	add.w	r9, lr, #4294967295
 801eb6e:	45cc      	cmp	ip, r9
 801eb70:	f280 8113 	bge.w	801ed9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801eb74:	b21b      	sxth	r3, r3
 801eb76:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801eb78:	fb0c 2203 	mla	r2, ip, r3, r2
 801eb7c:	eb04 0902 	add.w	r9, r4, r2
 801eb80:	5ca2      	ldrb	r2, [r4, r2]
 801eb82:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801eb86:	2800      	cmp	r0, #0
 801eb88:	f000 80fe 	beq.w	801ed88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801eb8c:	f899 2001 	ldrb.w	r2, [r9, #1]
 801eb90:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801eb94:	9211      	str	r2, [sp, #68]	; 0x44
 801eb96:	b151      	cbz	r1, 801ebae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801eb98:	eb09 0203 	add.w	r2, r9, r3
 801eb9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 801eba0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801eba4:	930f      	str	r3, [sp, #60]	; 0x3c
 801eba6:	7853      	ldrb	r3, [r2, #1]
 801eba8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ebac:	9312      	str	r3, [sp, #72]	; 0x48
 801ebae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ebb0:	fb10 f201 	smulbb	r2, r0, r1
 801ebb4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ebb6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ebba:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ebbe:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801ebc2:	10d2      	asrs	r2, r2, #3
 801ebc4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ebc8:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801ebcc:	ea4c 0c03 	orr.w	ip, ip, r3
 801ebd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ebd2:	041b      	lsls	r3, r3, #16
 801ebd4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ebd8:	4323      	orrs	r3, r4
 801ebda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ebdc:	4353      	muls	r3, r2
 801ebde:	fb09 330c 	mla	r3, r9, ip, r3
 801ebe2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801ebe6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801ebea:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ebee:	ea4c 0e0e 	orr.w	lr, ip, lr
 801ebf2:	f1c1 0c10 	rsb	ip, r1, #16
 801ebf6:	ebac 0c00 	sub.w	ip, ip, r0
 801ebfa:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ebfe:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801ec02:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801ec06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ec08:	0418      	lsls	r0, r3, #16
 801ec0a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ec0e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ec12:	4318      	orrs	r0, r3
 801ec14:	fb02 c200 	mla	r2, r2, r0, ip
 801ec18:	8838      	ldrh	r0, [r7, #0]
 801ec1a:	0d53      	lsrs	r3, r2, #21
 801ec1c:	0952      	lsrs	r2, r2, #5
 801ec1e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ec22:	1201      	asrs	r1, r0, #8
 801ec24:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ec28:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801ec2c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ec30:	00c0      	lsls	r0, r0, #3
 801ec32:	431a      	orrs	r2, r3
 801ec34:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801ec38:	fb11 f104 	smulbb	r1, r1, r4
 801ec3c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801ec40:	b292      	uxth	r2, r2
 801ec42:	fb1e fe04 	smulbb	lr, lr, r4
 801ec46:	b2c0      	uxtb	r0, r0
 801ec48:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801ec4c:	fb10 f004 	smulbb	r0, r0, r4
 801ec50:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ec54:	fb0c 1c03 	mla	ip, ip, r3, r1
 801ec58:	10d1      	asrs	r1, r2, #3
 801ec5a:	00d2      	lsls	r2, r2, #3
 801ec5c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ec60:	fa1f fc8c 	uxth.w	ip, ip
 801ec64:	b2d2      	uxtb	r2, r2
 801ec66:	fb01 e103 	mla	r1, r1, r3, lr
 801ec6a:	fb02 0303 	mla	r3, r2, r3, r0
 801ec6e:	b289      	uxth	r1, r1
 801ec70:	b29a      	uxth	r2, r3
 801ec72:	f10c 0301 	add.w	r3, ip, #1
 801ec76:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ec7a:	1c53      	adds	r3, r2, #1
 801ec7c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ec80:	1c4a      	adds	r2, r1, #1
 801ec82:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ec86:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ec8a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ec8e:	0949      	lsrs	r1, r1, #5
 801ec90:	ea43 030c 	orr.w	r3, r3, ip
 801ec94:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ec98:	430b      	orrs	r3, r1
 801ec9a:	803b      	strh	r3, [r7, #0]
 801ec9c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ec9e:	3702      	adds	r7, #2
 801eca0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eca4:	449a      	add	sl, r3
 801eca6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801eca8:	441d      	add	r5, r3
 801ecaa:	e742      	b.n	801eb32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801ecac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ecae:	f108 0802 	add.w	r8, r8, #2
 801ecb2:	449a      	add	sl, r3
 801ecb4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ecb6:	441d      	add	r5, r3
 801ecb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecba:	3b01      	subs	r3, #1
 801ecbc:	9309      	str	r3, [sp, #36]	; 0x24
 801ecbe:	e718      	b.n	801eaf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ecc0:	d023      	beq.n	801ed0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ecc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecc4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801ecc6:	3b01      	subs	r3, #1
 801ecc8:	fb00 a003 	mla	r0, r0, r3, sl
 801eccc:	1400      	asrs	r0, r0, #16
 801ecce:	f53f af2d 	bmi.w	801eb2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ecd2:	3901      	subs	r1, #1
 801ecd4:	4288      	cmp	r0, r1
 801ecd6:	f6bf af29 	bge.w	801eb2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ecda:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801ecdc:	fb01 5303 	mla	r3, r1, r3, r5
 801ece0:	141b      	asrs	r3, r3, #16
 801ece2:	f53f af23 	bmi.w	801eb2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ece6:	3a01      	subs	r2, #1
 801ece8:	4293      	cmp	r3, r2
 801ecea:	f6bf af1f 	bge.w	801eb2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ecee:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801ecf2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801ecf6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ecfa:	f1be 0f00 	cmp.w	lr, #0
 801ecfe:	dc6c      	bgt.n	801edda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801ed00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed02:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ed06:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801ed0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	f340 810e 	ble.w	801ef2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 801ed12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ed16:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ed18:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ed1c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ed20:	eef0 6a48 	vmov.f32	s13, s16
 801ed24:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ed28:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ed2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed30:	ee16 aa90 	vmov	sl, s13
 801ed34:	eef0 6a68 	vmov.f32	s13, s17
 801ed38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed3c:	ee16 5a90 	vmov	r5, s13
 801ed40:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ed44:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ed48:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ed4c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ed50:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ed54:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ed58:	ee18 2a10 	vmov	r2, s16
 801ed5c:	eeb0 8a47 	vmov.f32	s16, s14
 801ed60:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed64:	ee18 2a90 	vmov	r2, s17
 801ed68:	932d      	str	r3, [sp, #180]	; 0xb4
 801ed6a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ed6c:	eef0 8a67 	vmov.f32	s17, s15
 801ed70:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed74:	932e      	str	r3, [sp, #184]	; 0xb8
 801ed76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ed78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ed7a:	3b01      	subs	r3, #1
 801ed7c:	930c      	str	r3, [sp, #48]	; 0x30
 801ed7e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ed80:	bf08      	it	eq
 801ed82:	4613      	moveq	r3, r2
 801ed84:	9309      	str	r3, [sp, #36]	; 0x24
 801ed86:	e6a6      	b.n	801ead6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ed88:	2900      	cmp	r1, #0
 801ed8a:	f43f af10 	beq.w	801ebae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ed8e:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ed92:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ed96:	930f      	str	r3, [sp, #60]	; 0x3c
 801ed98:	e709      	b.n	801ebae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ed9a:	f112 0901 	adds.w	r9, r2, #1
 801ed9e:	f53f af7d 	bmi.w	801ec9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801eda2:	454b      	cmp	r3, r9
 801eda4:	f6ff af7a 	blt.w	801ec9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801eda8:	f11c 0901 	adds.w	r9, ip, #1
 801edac:	f53f af76 	bmi.w	801ec9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801edb0:	45ce      	cmp	lr, r9
 801edb2:	f6ff af73 	blt.w	801ec9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801edb6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801edb8:	b21b      	sxth	r3, r3
 801edba:	9202      	str	r2, [sp, #8]
 801edbc:	fa0f f28e 	sxth.w	r2, lr
 801edc0:	9300      	str	r3, [sp, #0]
 801edc2:	4633      	mov	r3, r6
 801edc4:	9201      	str	r2, [sp, #4]
 801edc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801edc8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801edcc:	e9cd c003 	strd	ip, r0, [sp, #12]
 801edd0:	4639      	mov	r1, r7
 801edd2:	9816      	ldr	r0, [sp, #88]	; 0x58
 801edd4:	f7ff fd70 	bl	801e8b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801edd8:	e760      	b.n	801ec9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801edda:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801eddc:	ea4f 422a 	mov.w	r2, sl, asr #16
 801ede0:	1429      	asrs	r1, r5, #16
 801ede2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ede4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ede8:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801edec:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801edf0:	fb03 2101 	mla	r1, r3, r1, r2
 801edf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801edf6:	440a      	add	r2, r1
 801edf8:	5c61      	ldrb	r1, [r4, r1]
 801edfa:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801edfe:	f1bc 0f00 	cmp.w	ip, #0
 801ee02:	f000 808c 	beq.w	801ef1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 801ee06:	7857      	ldrb	r7, [r2, #1]
 801ee08:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801ee0c:	9413      	str	r4, [sp, #76]	; 0x4c
 801ee0e:	b140      	cbz	r0, 801ee22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ee10:	18d7      	adds	r7, r2, r3
 801ee12:	5cd3      	ldrb	r3, [r2, r3]
 801ee14:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ee18:	9310      	str	r3, [sp, #64]	; 0x40
 801ee1a:	787b      	ldrb	r3, [r7, #1]
 801ee1c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ee20:	9314      	str	r3, [sp, #80]	; 0x50
 801ee22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ee24:	fb1c f200 	smulbb	r2, ip, r0
 801ee28:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ee2a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ee2e:	041f      	lsls	r7, r3, #16
 801ee30:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ee34:	10d2      	asrs	r2, r2, #3
 801ee36:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801ee3a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801ee3e:	431f      	orrs	r7, r3
 801ee40:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801ee44:	9317      	str	r3, [sp, #92]	; 0x5c
 801ee46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ee48:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ee4a:	041b      	lsls	r3, r3, #16
 801ee4c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ee50:	ea43 030b 	orr.w	r3, r3, fp
 801ee54:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ee58:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ee5c:	4353      	muls	r3, r2
 801ee5e:	fb04 3707 	mla	r7, r4, r7, r3
 801ee62:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801ee66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ee68:	ea43 0b01 	orr.w	fp, r3, r1
 801ee6c:	f1c0 0110 	rsb	r1, r0, #16
 801ee70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee72:	eba1 0c0c 	sub.w	ip, r1, ip
 801ee76:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ee7a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801ee7e:	fb0c 770b 	mla	r7, ip, fp, r7
 801ee82:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ee86:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801ee8a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ee8e:	ea4c 0c0b 	orr.w	ip, ip, fp
 801ee92:	fb02 770c 	mla	r7, r2, ip, r7
 801ee96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ee98:	0d79      	lsrs	r1, r7, #21
 801ee9a:	8812      	ldrh	r2, [r2, #0]
 801ee9c:	097f      	lsrs	r7, r7, #5
 801ee9e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801eea2:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801eea6:	430f      	orrs	r7, r1
 801eea8:	1211      	asrs	r1, r2, #8
 801eeaa:	b2bb      	uxth	r3, r7
 801eeac:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801eeb0:	10d7      	asrs	r7, r2, #3
 801eeb2:	fb11 f104 	smulbb	r1, r1, r4
 801eeb6:	1218      	asrs	r0, r3, #8
 801eeb8:	00d2      	lsls	r2, r2, #3
 801eeba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801eebe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eec2:	fb17 f704 	smulbb	r7, r7, r4
 801eec6:	b2d2      	uxtb	r2, r2
 801eec8:	fb00 1009 	mla	r0, r0, r9, r1
 801eecc:	10d9      	asrs	r1, r3, #3
 801eece:	fb12 f204 	smulbb	r2, r2, r4
 801eed2:	00db      	lsls	r3, r3, #3
 801eed4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801eed8:	b280      	uxth	r0, r0
 801eeda:	b2db      	uxtb	r3, r3
 801eedc:	fb01 7109 	mla	r1, r1, r9, r7
 801eee0:	fb03 2309 	mla	r3, r3, r9, r2
 801eee4:	1c42      	adds	r2, r0, #1
 801eee6:	b289      	uxth	r1, r1
 801eee8:	b29b      	uxth	r3, r3
 801eeea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801eeee:	1c4f      	adds	r7, r1, #1
 801eef0:	1c5a      	adds	r2, r3, #1
 801eef2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801eef6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801eefa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801eefe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef00:	0949      	lsrs	r1, r1, #5
 801ef02:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ef06:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ef0a:	4310      	orrs	r0, r2
 801ef0c:	4308      	orrs	r0, r1
 801ef0e:	f823 0b02 	strh.w	r0, [r3], #2
 801ef12:	930e      	str	r3, [sp, #56]	; 0x38
 801ef14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ef16:	449a      	add	sl, r3
 801ef18:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ef1a:	441d      	add	r5, r3
 801ef1c:	e6ed      	b.n	801ecfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801ef1e:	2800      	cmp	r0, #0
 801ef20:	f43f af7f 	beq.w	801ee22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ef24:	5cd3      	ldrb	r3, [r2, r3]
 801ef26:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ef2a:	9310      	str	r3, [sp, #64]	; 0x40
 801ef2c:	e779      	b.n	801ee22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ef2e:	b019      	add	sp, #100	; 0x64
 801ef30:	ecbd 8b08 	vpop	{d8-d11}
 801ef34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801ef38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ef3c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801ef40:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801ef44:	2e00      	cmp	r6, #0
 801ef46:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ef4a:	fb06 570e 	mla	r7, r6, lr, r5
 801ef4e:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801ef52:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801ef56:	eb02 0807 	add.w	r8, r2, r7
 801ef5a:	8808      	ldrh	r0, [r1, #0]
 801ef5c:	db38      	blt.n	801efd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801ef5e:	45b1      	cmp	r9, r6
 801ef60:	dd36      	ble.n	801efd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801ef62:	2d00      	cmp	r5, #0
 801ef64:	db32      	blt.n	801efcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801ef66:	45ae      	cmp	lr, r5
 801ef68:	dd30      	ble.n	801efcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801ef6a:	5dd2      	ldrb	r2, [r2, r7]
 801ef6c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801ef70:	1c6a      	adds	r2, r5, #1
 801ef72:	d430      	bmi.n	801efd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801ef74:	4596      	cmp	lr, r2
 801ef76:	dd2e      	ble.n	801efd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801ef78:	b36c      	cbz	r4, 801efd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801ef7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ef7e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801ef82:	3601      	adds	r6, #1
 801ef84:	d42b      	bmi.n	801efde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801ef86:	45b1      	cmp	r9, r6
 801ef88:	dd29      	ble.n	801efde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801ef8a:	f1bc 0f00 	cmp.w	ip, #0
 801ef8e:	d028      	beq.n	801efe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 801ef90:	2d00      	cmp	r5, #0
 801ef92:	db22      	blt.n	801efda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801ef94:	45ae      	cmp	lr, r5
 801ef96:	dd20      	ble.n	801efda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801ef98:	f818 600e 	ldrb.w	r6, [r8, lr]
 801ef9c:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 801efa0:	3501      	adds	r5, #1
 801efa2:	d407      	bmi.n	801efb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801efa4:	45ae      	cmp	lr, r5
 801efa6:	dd05      	ble.n	801efb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801efa8:	b134      	cbz	r4, 801efb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801efaa:	44c6      	add	lr, r8
 801efac:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801efb0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801efb4:	2c0f      	cmp	r4, #15
 801efb6:	d802      	bhi.n	801efbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801efb8:	f1bc 0f0f 	cmp.w	ip, #15
 801efbc:	d914      	bls.n	801efe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 801efbe:	4b26      	ldr	r3, [pc, #152]	; (801f058 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 801efc0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801efc4:	4a25      	ldr	r2, [pc, #148]	; (801f05c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 801efc6:	4826      	ldr	r0, [pc, #152]	; (801f060 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 801efc8:	f006 fdd4 	bl	8025b74 <__assert_func>
 801efcc:	4607      	mov	r7, r0
 801efce:	e7cf      	b.n	801ef70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 801efd0:	4602      	mov	r2, r0
 801efd2:	4607      	mov	r7, r0
 801efd4:	e7d5      	b.n	801ef82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801efd6:	4602      	mov	r2, r0
 801efd8:	e7d3      	b.n	801ef82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801efda:	4606      	mov	r6, r0
 801efdc:	e7e0      	b.n	801efa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 801efde:	4606      	mov	r6, r0
 801efe0:	e7e8      	b.n	801efb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801efe2:	2c0f      	cmp	r4, #15
 801efe4:	d8eb      	bhi.n	801efbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801efe6:	4606      	mov	r6, r0
 801efe8:	fb14 f30c 	smulbb	r3, r4, ip
 801efec:	043d      	lsls	r5, r7, #16
 801efee:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801eff2:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801eff6:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801effa:	10db      	asrs	r3, r3, #3
 801effc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f000:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f004:	432f      	orrs	r7, r5
 801f006:	f1cc 0510 	rsb	r5, ip, #16
 801f00a:	ea4e 0202 	orr.w	r2, lr, r2
 801f00e:	1b2d      	subs	r5, r5, r4
 801f010:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801f014:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801f018:	4354      	muls	r4, r2
 801f01a:	fb05 4507 	mla	r5, r5, r7, r4
 801f01e:	0404      	lsls	r4, r0, #16
 801f020:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f024:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f028:	4320      	orrs	r0, r4
 801f02a:	fb03 5400 	mla	r4, r3, r0, r5
 801f02e:	0430      	lsls	r0, r6, #16
 801f030:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801f034:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801f038:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f03c:	4330      	orrs	r0, r6
 801f03e:	fb03 4000 	mla	r0, r3, r0, r4
 801f042:	0d43      	lsrs	r3, r0, #21
 801f044:	0940      	lsrs	r0, r0, #5
 801f046:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f04a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f04e:	4318      	orrs	r0, r3
 801f050:	8008      	strh	r0, [r1, #0]
 801f052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f056:	bf00      	nop
 801f058:	0802a0cd 	.word	0x0802a0cd
 801f05c:	0802a743 	.word	0x0802a743
 801f060:	0802a151 	.word	0x0802a151

0801f064 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f068:	ed2d 8b0a 	vpush	{d8-d12}
 801f06c:	b093      	sub	sp, #76	; 0x4c
 801f06e:	eeb0 aa40 	vmov.f32	s20, s0
 801f072:	eef0 9a60 	vmov.f32	s19, s1
 801f076:	920f      	str	r2, [sp, #60]	; 0x3c
 801f078:	eeb0 9a41 	vmov.f32	s18, s2
 801f07c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f07e:	eeb0 8a62 	vmov.f32	s16, s5
 801f082:	9010      	str	r0, [sp, #64]	; 0x40
 801f084:	eef0 8a43 	vmov.f32	s17, s6
 801f088:	6850      	ldr	r0, [r2, #4]
 801f08a:	eeb0 ca44 	vmov.f32	s24, s8
 801f08e:	9108      	str	r1, [sp, #32]
 801f090:	eef0 ba64 	vmov.f32	s23, s9
 801f094:	9306      	str	r3, [sp, #24]
 801f096:	eeb0 ba45 	vmov.f32	s22, s10
 801f09a:	6812      	ldr	r2, [r2, #0]
 801f09c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f0a0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f0a4:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801f0a8:	fb00 1303 	mla	r3, r0, r3, r1
 801f0ac:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801f0b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f0b2:	681b      	ldr	r3, [r3, #0]
 801f0b4:	9307      	str	r3, [sp, #28]
 801f0b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f0b8:	685f      	ldr	r7, [r3, #4]
 801f0ba:	3704      	adds	r7, #4
 801f0bc:	9b08      	ldr	r3, [sp, #32]
 801f0be:	2b00      	cmp	r3, #0
 801f0c0:	dc03      	bgt.n	801f0ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f0c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	f340 81b2 	ble.w	801f42e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801f0ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f0cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f0d0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f0d4:	1e48      	subs	r0, r1, #1
 801f0d6:	f102 3cff 	add.w	ip, r2, #4294967295
 801f0da:	9b06      	ldr	r3, [sp, #24]
 801f0dc:	2b00      	cmp	r3, #0
 801f0de:	f340 80a9 	ble.w	801f234 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801f0e2:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f0e6:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f0ea:	d406      	bmi.n	801f0fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f0ec:	4586      	cmp	lr, r0
 801f0ee:	da04      	bge.n	801f0fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f0f0:	2b00      	cmp	r3, #0
 801f0f2:	db02      	blt.n	801f0fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f0f4:	4563      	cmp	r3, ip
 801f0f6:	f2c0 809e 	blt.w	801f236 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f0fa:	f11e 0e01 	adds.w	lr, lr, #1
 801f0fe:	f100 808f 	bmi.w	801f220 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f102:	4571      	cmp	r1, lr
 801f104:	f2c0 808c 	blt.w	801f220 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f108:	3301      	adds	r3, #1
 801f10a:	f100 8089 	bmi.w	801f220 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f10e:	429a      	cmp	r2, r3
 801f110:	f2c0 8086 	blt.w	801f220 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f114:	f8dd b018 	ldr.w	fp, [sp, #24]
 801f118:	46c8      	mov	r8, r9
 801f11a:	f1bb 0f00 	cmp.w	fp, #0
 801f11e:	f340 80a6 	ble.w	801f26e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801f122:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f124:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f128:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f12a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801f12e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f132:	1422      	asrs	r2, r4, #16
 801f134:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f138:	689b      	ldr	r3, [r3, #8]
 801f13a:	f100 80e3 	bmi.w	801f304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801f13e:	f103 3aff 	add.w	sl, r3, #4294967295
 801f142:	4552      	cmp	r2, sl
 801f144:	f280 80de 	bge.w	801f304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801f148:	f1bc 0f00 	cmp.w	ip, #0
 801f14c:	f2c0 80da 	blt.w	801f304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801f150:	f10e 3aff 	add.w	sl, lr, #4294967295
 801f154:	45d4      	cmp	ip, sl
 801f156:	f280 80d5 	bge.w	801f304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801f15a:	b21b      	sxth	r3, r3
 801f15c:	9d07      	ldr	r5, [sp, #28]
 801f15e:	fb0c 2203 	mla	r2, ip, r3, r2
 801f162:	eb05 0a02 	add.w	sl, r5, r2
 801f166:	5caa      	ldrb	r2, [r5, r2]
 801f168:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801f16c:	2800      	cmp	r0, #0
 801f16e:	f000 80c0 	beq.w	801f2f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801f172:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f176:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801f17a:	920b      	str	r2, [sp, #44]	; 0x2c
 801f17c:	b151      	cbz	r1, 801f194 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801f17e:	eb0a 0203 	add.w	r2, sl, r3
 801f182:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f186:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f18a:	9309      	str	r3, [sp, #36]	; 0x24
 801f18c:	7853      	ldrb	r3, [r2, #1]
 801f18e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f192:	930c      	str	r3, [sp, #48]	; 0x30
 801f194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f196:	fb10 f201 	smulbb	r2, r0, r1
 801f19a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f19c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f1a0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f1a4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f1a8:	10d2      	asrs	r2, r2, #3
 801f1aa:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f1ae:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801f1b2:	ea4c 0c03 	orr.w	ip, ip, r3
 801f1b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f1b8:	041b      	lsls	r3, r3, #16
 801f1ba:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f1be:	432b      	orrs	r3, r5
 801f1c0:	4353      	muls	r3, r2
 801f1c2:	fb0a 330c 	mla	r3, sl, ip, r3
 801f1c6:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f1ca:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f1ce:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f1d2:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f1d6:	f1c1 0c10 	rsb	ip, r1, #16
 801f1da:	ebac 0c00 	sub.w	ip, ip, r0
 801f1de:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f1e2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f1e6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1ec:	0418      	lsls	r0, r3, #16
 801f1ee:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f1f2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f1f6:	4318      	orrs	r0, r3
 801f1f8:	fb02 c200 	mla	r2, r2, r0, ip
 801f1fc:	0d53      	lsrs	r3, r2, #21
 801f1fe:	0952      	lsrs	r2, r2, #5
 801f200:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f204:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f208:	431a      	orrs	r2, r3
 801f20a:	f8a8 2000 	strh.w	r2, [r8]
 801f20e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f210:	f108 0802 	add.w	r8, r8, #2
 801f214:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f218:	441c      	add	r4, r3
 801f21a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f21c:	441e      	add	r6, r3
 801f21e:	e77c      	b.n	801f11a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f220:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f222:	f109 0902 	add.w	r9, r9, #2
 801f226:	441c      	add	r4, r3
 801f228:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f22a:	441e      	add	r6, r3
 801f22c:	9b06      	ldr	r3, [sp, #24]
 801f22e:	3b01      	subs	r3, #1
 801f230:	9306      	str	r3, [sp, #24]
 801f232:	e752      	b.n	801f0da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f234:	d020      	beq.n	801f278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f236:	9b06      	ldr	r3, [sp, #24]
 801f238:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801f23a:	3b01      	subs	r3, #1
 801f23c:	fb00 4003 	mla	r0, r0, r3, r4
 801f240:	1400      	asrs	r0, r0, #16
 801f242:	f53f af67 	bmi.w	801f114 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f246:	3901      	subs	r1, #1
 801f248:	4288      	cmp	r0, r1
 801f24a:	f6bf af63 	bge.w	801f114 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f24e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f250:	fb01 6303 	mla	r3, r1, r3, r6
 801f254:	141b      	asrs	r3, r3, #16
 801f256:	f53f af5d 	bmi.w	801f114 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f25a:	3a01      	subs	r2, #1
 801f25c:	4293      	cmp	r3, r2
 801f25e:	f6bf af59 	bge.w	801f114 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f262:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f266:	46ca      	mov	sl, r9
 801f268:	f1b8 0f00 	cmp.w	r8, #0
 801f26c:	dc67      	bgt.n	801f33e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801f26e:	9b06      	ldr	r3, [sp, #24]
 801f270:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801f274:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801f278:	9b08      	ldr	r3, [sp, #32]
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	f340 80d7 	ble.w	801f42e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801f280:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f284:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f286:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f28a:	eef0 6a48 	vmov.f32	s13, s16
 801f28e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f292:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f296:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f29a:	ee16 4a90 	vmov	r4, s13
 801f29e:	eef0 6a68 	vmov.f32	s13, s17
 801f2a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2a6:	ee16 6a90 	vmov	r6, s13
 801f2aa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f2ae:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f2b2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f2b6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f2ba:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f2be:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f2c2:	ee18 2a10 	vmov	r2, s16
 801f2c6:	eeb0 8a47 	vmov.f32	s16, s14
 801f2ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2ce:	ee18 2a90 	vmov	r2, s17
 801f2d2:	9329      	str	r3, [sp, #164]	; 0xa4
 801f2d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f2d6:	eef0 8a67 	vmov.f32	s17, s15
 801f2da:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2de:	932a      	str	r3, [sp, #168]	; 0xa8
 801f2e0:	9b08      	ldr	r3, [sp, #32]
 801f2e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f2e4:	3b01      	subs	r3, #1
 801f2e6:	9308      	str	r3, [sp, #32]
 801f2e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f2ea:	bf08      	it	eq
 801f2ec:	4613      	moveq	r3, r2
 801f2ee:	9306      	str	r3, [sp, #24]
 801f2f0:	e6e4      	b.n	801f0bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f2f2:	2900      	cmp	r1, #0
 801f2f4:	f43f af4e 	beq.w	801f194 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801f2f8:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f2fc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f300:	9309      	str	r3, [sp, #36]	; 0x24
 801f302:	e747      	b.n	801f194 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801f304:	f112 0a01 	adds.w	sl, r2, #1
 801f308:	d481      	bmi.n	801f20e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f30a:	4553      	cmp	r3, sl
 801f30c:	f6ff af7f 	blt.w	801f20e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f310:	f11c 0a01 	adds.w	sl, ip, #1
 801f314:	f53f af7b 	bmi.w	801f20e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f318:	45d6      	cmp	lr, sl
 801f31a:	f6ff af78 	blt.w	801f20e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f31e:	b21b      	sxth	r3, r3
 801f320:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801f324:	fa0f f28e 	sxth.w	r2, lr
 801f328:	9300      	str	r3, [sp, #0]
 801f32a:	463b      	mov	r3, r7
 801f32c:	9201      	str	r2, [sp, #4]
 801f32e:	9a07      	ldr	r2, [sp, #28]
 801f330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f334:	4641      	mov	r1, r8
 801f336:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f338:	f7ff fdfe 	bl	801ef38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801f33c:	e767      	b.n	801f20e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f33e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f340:	1422      	asrs	r2, r4, #16
 801f342:	1431      	asrs	r1, r6, #16
 801f344:	9d07      	ldr	r5, [sp, #28]
 801f346:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f34a:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801f34e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f352:	fb03 2101 	mla	r1, r3, r1, r2
 801f356:	9a07      	ldr	r2, [sp, #28]
 801f358:	440a      	add	r2, r1
 801f35a:	5c69      	ldrb	r1, [r5, r1]
 801f35c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801f360:	f1be 0f00 	cmp.w	lr, #0
 801f364:	d05c      	beq.n	801f420 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 801f366:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f36a:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801f36e:	950d      	str	r5, [sp, #52]	; 0x34
 801f370:	b150      	cbz	r0, 801f388 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801f372:	eb02 0c03 	add.w	ip, r2, r3
 801f376:	5cd3      	ldrb	r3, [r2, r3]
 801f378:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f37c:	930a      	str	r3, [sp, #40]	; 0x28
 801f37e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f382:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f386:	930e      	str	r3, [sp, #56]	; 0x38
 801f388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f38a:	fb1e f200 	smulbb	r2, lr, r0
 801f38e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f390:	f108 38ff 	add.w	r8, r8, #4294967295
 801f394:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f398:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f39c:	10d2      	asrs	r2, r2, #3
 801f39e:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801f3a2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f3a6:	ea4c 0c03 	orr.w	ip, ip, r3
 801f3aa:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801f3ae:	9311      	str	r3, [sp, #68]	; 0x44
 801f3b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f3b4:	041b      	lsls	r3, r3, #16
 801f3b6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f3ba:	ea43 030b 	orr.w	r3, r3, fp
 801f3be:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f3c2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f3c6:	4353      	muls	r3, r2
 801f3c8:	fb05 3c0c 	mla	ip, r5, ip, r3
 801f3cc:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f3d0:	ea43 0b01 	orr.w	fp, r3, r1
 801f3d4:	f1c0 0110 	rsb	r1, r0, #16
 801f3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3da:	eba1 0e0e 	sub.w	lr, r1, lr
 801f3de:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801f3e2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f3e6:	fb0e cc0b 	mla	ip, lr, fp, ip
 801f3ea:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801f3ee:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801f3f2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f3f6:	ea4b 0e0e 	orr.w	lr, fp, lr
 801f3fa:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f3fe:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801f402:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f406:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f40a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f40e:	ea43 0c0c 	orr.w	ip, r3, ip
 801f412:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f414:	441c      	add	r4, r3
 801f416:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f418:	f82a cb02 	strh.w	ip, [sl], #2
 801f41c:	441e      	add	r6, r3
 801f41e:	e723      	b.n	801f268 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f420:	2800      	cmp	r0, #0
 801f422:	d0b1      	beq.n	801f388 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801f424:	5cd3      	ldrb	r3, [r2, r3]
 801f426:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f42a:	930a      	str	r3, [sp, #40]	; 0x28
 801f42c:	e7ac      	b.n	801f388 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801f42e:	b013      	add	sp, #76	; 0x4c
 801f430:	ecbd 8b0a 	vpop	{d8-d12}
 801f434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f438 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801f438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f43c:	468b      	mov	fp, r1
 801f43e:	8809      	ldrh	r1, [r1, #0]
 801f440:	b089      	sub	sp, #36	; 0x24
 801f442:	10cd      	asrs	r5, r1, #3
 801f444:	ea4f 2921 	mov.w	r9, r1, asr #8
 801f448:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 801f44c:	00c9      	lsls	r1, r1, #3
 801f44e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f452:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801f456:	9202      	str	r2, [sp, #8]
 801f458:	b2c9      	uxtb	r1, r1
 801f45a:	9500      	str	r5, [sp, #0]
 801f45c:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 801f460:	9101      	str	r1, [sp, #4]
 801f462:	9900      	ldr	r1, [sp, #0]
 801f464:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801f468:	0209      	lsls	r1, r1, #8
 801f46a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801f46e:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 801f472:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801f476:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 801f47a:	fb04 650e 	mla	r5, r4, lr, r6
 801f47e:	2c00      	cmp	r4, #0
 801f480:	eb02 0805 	add.w	r8, r2, r5
 801f484:	9a01      	ldr	r2, [sp, #4]
 801f486:	ea41 0102 	orr.w	r1, r1, r2
 801f48a:	9107      	str	r1, [sp, #28]
 801f48c:	db43      	blt.n	801f516 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 801f48e:	45a2      	cmp	sl, r4
 801f490:	dd41      	ble.n	801f516 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 801f492:	2e00      	cmp	r6, #0
 801f494:	db3d      	blt.n	801f512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 801f496:	45b6      	cmp	lr, r6
 801f498:	dd3b      	ble.n	801f512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 801f49a:	9a02      	ldr	r2, [sp, #8]
 801f49c:	5d55      	ldrb	r5, [r2, r5]
 801f49e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f4a2:	441d      	add	r5, r3
 801f4a4:	1c72      	adds	r2, r6, #1
 801f4a6:	d439      	bmi.n	801f51c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801f4a8:	4596      	cmp	lr, r2
 801f4aa:	dd37      	ble.n	801f51c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801f4ac:	2f00      	cmp	r7, #0
 801f4ae:	d035      	beq.n	801f51c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801f4b0:	f898 1001 	ldrb.w	r1, [r8, #1]
 801f4b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f4b8:	4419      	add	r1, r3
 801f4ba:	3401      	adds	r4, #1
 801f4bc:	d432      	bmi.n	801f524 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801f4be:	45a2      	cmp	sl, r4
 801f4c0:	dd30      	ble.n	801f524 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801f4c2:	b378      	cbz	r0, 801f524 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801f4c4:	2e00      	cmp	r6, #0
 801f4c6:	db2b      	blt.n	801f520 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 801f4c8:	45b6      	cmp	lr, r6
 801f4ca:	dd29      	ble.n	801f520 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 801f4cc:	f818 400e 	ldrb.w	r4, [r8, lr]
 801f4d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f4d4:	441c      	add	r4, r3
 801f4d6:	3601      	adds	r6, #1
 801f4d8:	d427      	bmi.n	801f52a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801f4da:	45b6      	cmp	lr, r6
 801f4dc:	dd25      	ble.n	801f52a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801f4de:	b327      	cbz	r7, 801f52a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801f4e0:	44c6      	add	lr, r8
 801f4e2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f4e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f4ea:	4413      	add	r3, r2
 801f4ec:	782a      	ldrb	r2, [r5, #0]
 801f4ee:	2f0f      	cmp	r7, #15
 801f4f0:	9202      	str	r2, [sp, #8]
 801f4f2:	780a      	ldrb	r2, [r1, #0]
 801f4f4:	9203      	str	r2, [sp, #12]
 801f4f6:	7822      	ldrb	r2, [r4, #0]
 801f4f8:	9204      	str	r2, [sp, #16]
 801f4fa:	781a      	ldrb	r2, [r3, #0]
 801f4fc:	9205      	str	r2, [sp, #20]
 801f4fe:	d801      	bhi.n	801f504 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 801f500:	280f      	cmp	r0, #15
 801f502:	d914      	bls.n	801f52e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 801f504:	4b3f      	ldr	r3, [pc, #252]	; (801f604 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 801f506:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801f50a:	4a3f      	ldr	r2, [pc, #252]	; (801f608 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 801f50c:	483f      	ldr	r0, [pc, #252]	; (801f60c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 801f50e:	f006 fb31 	bl	8025b74 <__assert_func>
 801f512:	ad07      	add	r5, sp, #28
 801f514:	e7c6      	b.n	801f4a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 801f516:	a907      	add	r1, sp, #28
 801f518:	460d      	mov	r5, r1
 801f51a:	e7ce      	b.n	801f4ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 801f51c:	a907      	add	r1, sp, #28
 801f51e:	e7cc      	b.n	801f4ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 801f520:	ac07      	add	r4, sp, #28
 801f522:	e7d8      	b.n	801f4d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 801f524:	ab07      	add	r3, sp, #28
 801f526:	461c      	mov	r4, r3
 801f528:	e7e0      	b.n	801f4ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801f52a:	ab07      	add	r3, sp, #28
 801f52c:	e7de      	b.n	801f4ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801f52e:	b2ba      	uxth	r2, r7
 801f530:	f891 8002 	ldrb.w	r8, [r1, #2]
 801f534:	b280      	uxth	r0, r0
 801f536:	7849      	ldrb	r1, [r1, #1]
 801f538:	78ae      	ldrb	r6, [r5, #2]
 801f53a:	fa1f f78c 	uxth.w	r7, ip
 801f53e:	fb02 fa00 	mul.w	sl, r2, r0
 801f542:	0112      	lsls	r2, r2, #4
 801f544:	786d      	ldrb	r5, [r5, #1]
 801f546:	ea6f 0c0c 	mvn.w	ip, ip
 801f54a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f54e:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801f552:	eba2 020a 	sub.w	r2, r2, sl
 801f556:	fa5f fc8c 	uxtb.w	ip, ip
 801f55a:	b280      	uxth	r0, r0
 801f55c:	fb19 f90c 	smulbb	r9, r9, ip
 801f560:	b292      	uxth	r2, r2
 801f562:	ebae 0e00 	sub.w	lr, lr, r0
 801f566:	4351      	muls	r1, r2
 801f568:	fa1f fe8e 	uxth.w	lr, lr
 801f56c:	fb02 f808 	mul.w	r8, r2, r8
 801f570:	fb0e 1505 	mla	r5, lr, r5, r1
 801f574:	7861      	ldrb	r1, [r4, #1]
 801f576:	fb0e 8806 	mla	r8, lr, r6, r8
 801f57a:	78a6      	ldrb	r6, [r4, #2]
 801f57c:	fb00 5501 	mla	r5, r0, r1, r5
 801f580:	7859      	ldrb	r1, [r3, #1]
 801f582:	fb00 8806 	mla	r8, r0, r6, r8
 801f586:	789e      	ldrb	r6, [r3, #2]
 801f588:	9b00      	ldr	r3, [sp, #0]
 801f58a:	fb0a 5101 	mla	r1, sl, r1, r5
 801f58e:	fb0a 8606 	mla	r6, sl, r6, r8
 801f592:	fb13 f50c 	smulbb	r5, r3, ip
 801f596:	9b03      	ldr	r3, [sp, #12]
 801f598:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f59c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f5a0:	435a      	muls	r2, r3
 801f5a2:	9b02      	ldr	r3, [sp, #8]
 801f5a4:	fb06 9607 	mla	r6, r6, r7, r9
 801f5a8:	fb0e 2203 	mla	r2, lr, r3, r2
 801f5ac:	9b04      	ldr	r3, [sp, #16]
 801f5ae:	b2b6      	uxth	r6, r6
 801f5b0:	fb01 5107 	mla	r1, r1, r7, r5
 801f5b4:	fb00 2003 	mla	r0, r0, r3, r2
 801f5b8:	9b05      	ldr	r3, [sp, #20]
 801f5ba:	f106 0901 	add.w	r9, r6, #1
 801f5be:	b289      	uxth	r1, r1
 801f5c0:	fb0a 0a03 	mla	sl, sl, r3, r0
 801f5c4:	9b01      	ldr	r3, [sp, #4]
 801f5c6:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801f5ca:	1c4d      	adds	r5, r1, #1
 801f5cc:	fb13 fc0c 	smulbb	ip, r3, ip
 801f5d0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f5d4:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 801f5d8:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 801f5dc:	fb0a c707 	mla	r7, sl, r7, ip
 801f5e0:	0949      	lsrs	r1, r1, #5
 801f5e2:	b2bf      	uxth	r7, r7
 801f5e4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f5e8:	1c7e      	adds	r6, r7, #1
 801f5ea:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801f5ee:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f5f2:	ea46 0609 	orr.w	r6, r6, r9
 801f5f6:	430e      	orrs	r6, r1
 801f5f8:	f8ab 6000 	strh.w	r6, [fp]
 801f5fc:	b009      	add	sp, #36	; 0x24
 801f5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f602:	bf00      	nop
 801f604:	0802a0cd 	.word	0x0802a0cd
 801f608:	0802a69a 	.word	0x0802a69a
 801f60c:	0802a151 	.word	0x0802a151

0801f610 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f614:	ed2d 8b08 	vpush	{d8-d11}
 801f618:	b095      	sub	sp, #84	; 0x54
 801f61a:	eeb0 aa40 	vmov.f32	s20, s0
 801f61e:	eef0 9a60 	vmov.f32	s19, s1
 801f622:	9212      	str	r2, [sp, #72]	; 0x48
 801f624:	eeb0 9a41 	vmov.f32	s18, s2
 801f628:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f62a:	eeb0 8a62 	vmov.f32	s16, s5
 801f62e:	9309      	str	r3, [sp, #36]	; 0x24
 801f630:	eef0 8a43 	vmov.f32	s17, s6
 801f634:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801f638:	eef0 ba44 	vmov.f32	s23, s8
 801f63c:	9013      	str	r0, [sp, #76]	; 0x4c
 801f63e:	eeb0 ba64 	vmov.f32	s22, s9
 801f642:	930f      	str	r3, [sp, #60]	; 0x3c
 801f644:	eef0 aa45 	vmov.f32	s21, s10
 801f648:	6850      	ldr	r0, [r2, #4]
 801f64a:	910e      	str	r1, [sp, #56]	; 0x38
 801f64c:	6812      	ldr	r2, [r2, #0]
 801f64e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f652:	fb00 1303 	mla	r3, r0, r3, r1
 801f656:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f65a:	930a      	str	r3, [sp, #40]	; 0x28
 801f65c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f65e:	681b      	ldr	r3, [r3, #0]
 801f660:	930d      	str	r3, [sp, #52]	; 0x34
 801f662:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f664:	685c      	ldr	r4, [r3, #4]
 801f666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f668:	3404      	adds	r4, #4
 801f66a:	43db      	mvns	r3, r3
 801f66c:	b2db      	uxtb	r3, r3
 801f66e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f672:	2b00      	cmp	r3, #0
 801f674:	dc03      	bgt.n	801f67e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f676:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f678:	2b00      	cmp	r3, #0
 801f67a:	f340 8255 	ble.w	801fb28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801f67e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f680:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f684:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f688:	1e48      	subs	r0, r1, #1
 801f68a:	1e55      	subs	r5, r2, #1
 801f68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f68e:	2b00      	cmp	r3, #0
 801f690:	f340 80f9 	ble.w	801f886 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f694:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801f696:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f698:	1436      	asrs	r6, r6, #16
 801f69a:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f69e:	d406      	bmi.n	801f6ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f6a0:	4286      	cmp	r6, r0
 801f6a2:	da04      	bge.n	801f6ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	db02      	blt.n	801f6ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f6a8:	42ab      	cmp	r3, r5
 801f6aa:	f2c0 80ed 	blt.w	801f888 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f6ae:	3601      	adds	r6, #1
 801f6b0:	f100 80da 	bmi.w	801f868 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801f6b4:	42b1      	cmp	r1, r6
 801f6b6:	f2c0 80d7 	blt.w	801f868 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801f6ba:	3301      	adds	r3, #1
 801f6bc:	f100 80d4 	bmi.w	801f868 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801f6c0:	429a      	cmp	r2, r3
 801f6c2:	f2c0 80d1 	blt.w	801f868 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801f6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6c8:	9311      	str	r3, [sp, #68]	; 0x44
 801f6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f6cc:	930c      	str	r3, [sp, #48]	; 0x30
 801f6ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f6d0:	2b00      	cmp	r3, #0
 801f6d2:	f340 80fa 	ble.w	801f8ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f6d6:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801f6d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f6da:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f6dc:	68c6      	ldr	r6, [r0, #12]
 801f6de:	141d      	asrs	r5, r3, #16
 801f6e0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f6e2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f6e6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f6e8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f6ea:	1400      	asrs	r0, r0, #16
 801f6ec:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f6f0:	6892      	ldr	r2, [r2, #8]
 801f6f2:	f100 813e 	bmi.w	801f972 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801f6f6:	1e57      	subs	r7, r2, #1
 801f6f8:	42b8      	cmp	r0, r7
 801f6fa:	f280 813a 	bge.w	801f972 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801f6fe:	2d00      	cmp	r5, #0
 801f700:	f2c0 8137 	blt.w	801f972 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801f704:	1e77      	subs	r7, r6, #1
 801f706:	42bd      	cmp	r5, r7
 801f708:	f280 8133 	bge.w	801f972 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801f70c:	b212      	sxth	r2, r2
 801f70e:	fb05 0002 	mla	r0, r5, r2, r0
 801f712:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f714:	f815 a000 	ldrb.w	sl, [r5, r0]
 801f718:	182e      	adds	r6, r5, r0
 801f71a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801f71e:	eb04 050a 	add.w	r5, r4, sl
 801f722:	2b00      	cmp	r3, #0
 801f724:	f000 8117 	beq.w	801f956 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801f728:	f896 c001 	ldrb.w	ip, [r6, #1]
 801f72c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f730:	44a4      	add	ip, r4
 801f732:	2900      	cmp	r1, #0
 801f734:	f000 8117 	beq.w	801f966 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f738:	18b0      	adds	r0, r6, r2
 801f73a:	5cb2      	ldrb	r2, [r6, r2]
 801f73c:	7840      	ldrb	r0, [r0, #1]
 801f73e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f742:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f746:	4422      	add	r2, r4
 801f748:	4420      	add	r0, r4
 801f74a:	b29b      	uxth	r3, r3
 801f74c:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801f750:	b289      	uxth	r1, r1
 801f752:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f756:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f758:	fb03 f901 	mul.w	r9, r3, r1
 801f75c:	011b      	lsls	r3, r3, #4
 801f75e:	f8b6 e000 	ldrh.w	lr, [r6]
 801f762:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f766:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801f76a:	eba3 0309 	sub.w	r3, r3, r9
 801f76e:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801f772:	b289      	uxth	r1, r1
 801f774:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801f778:	b29b      	uxth	r3, r3
 801f77a:	eba8 0801 	sub.w	r8, r8, r1
 801f77e:	435f      	muls	r7, r3
 801f780:	fa1f f888 	uxth.w	r8, r8
 801f784:	9310      	str	r3, [sp, #64]	; 0x40
 801f786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f788:	fb08 770b 	mla	r7, r8, fp, r7
 801f78c:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f790:	fb01 770b 	mla	r7, r1, fp, r7
 801f794:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f798:	fb09 770b 	mla	r7, r9, fp, r7
 801f79c:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801f7a0:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801f7a4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f7a8:	fb1b fb03 	smulbb	fp, fp, r3
 801f7ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f7ae:	fb07 b706 	mla	r7, r7, r6, fp
 801f7b2:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f7b6:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f7ba:	f89c c000 	ldrb.w	ip, [ip]
 801f7be:	b2bf      	uxth	r7, r7
 801f7c0:	435d      	muls	r5, r3
 801f7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f7c4:	fb08 550b 	mla	r5, r8, fp, r5
 801f7c8:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f7cc:	fb01 550b 	mla	r5, r1, fp, r5
 801f7d0:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f7d4:	fb09 550b 	mla	r5, r9, fp, r5
 801f7d8:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801f7dc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f7e0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f7e4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f7e8:	fa5f fe8e 	uxtb.w	lr, lr
 801f7ec:	fb1b fb03 	smulbb	fp, fp, r3
 801f7f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f7f2:	fb03 f30c 	mul.w	r3, r3, ip
 801f7f6:	f892 c000 	ldrb.w	ip, [r2]
 801f7fa:	fb05 b506 	mla	r5, r5, r6, fp
 801f7fe:	fb08 330a 	mla	r3, r8, sl, r3
 801f802:	b2ad      	uxth	r5, r5
 801f804:	fb01 330c 	mla	r3, r1, ip, r3
 801f808:	f890 c000 	ldrb.w	ip, [r0]
 801f80c:	f105 0b01 	add.w	fp, r5, #1
 801f810:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f816:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f81a:	fb1e fe03 	smulbb	lr, lr, r3
 801f81e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f822:	1c7b      	adds	r3, r7, #1
 801f824:	096d      	lsrs	r5, r5, #5
 801f826:	fb0c e606 	mla	r6, ip, r6, lr
 801f82a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f82e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f832:	b2b6      	uxth	r6, r6
 801f834:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801f838:	1c77      	adds	r7, r6, #1
 801f83a:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f83e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f842:	431f      	orrs	r7, r3
 801f844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f846:	433d      	orrs	r5, r7
 801f848:	801d      	strh	r5, [r3, #0]
 801f84a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f84c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f84e:	3302      	adds	r3, #2
 801f850:	930c      	str	r3, [sp, #48]	; 0x30
 801f852:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f854:	4413      	add	r3, r2
 801f856:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f858:	9327      	str	r3, [sp, #156]	; 0x9c
 801f85a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f85c:	4413      	add	r3, r2
 801f85e:	9328      	str	r3, [sp, #160]	; 0xa0
 801f860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f862:	3b01      	subs	r3, #1
 801f864:	9311      	str	r3, [sp, #68]	; 0x44
 801f866:	e732      	b.n	801f6ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801f868:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f86a:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801f86c:	4433      	add	r3, r6
 801f86e:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 801f870:	9327      	str	r3, [sp, #156]	; 0x9c
 801f872:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f874:	4433      	add	r3, r6
 801f876:	9328      	str	r3, [sp, #160]	; 0xa0
 801f878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f87a:	3b01      	subs	r3, #1
 801f87c:	9309      	str	r3, [sp, #36]	; 0x24
 801f87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f880:	3302      	adds	r3, #2
 801f882:	930a      	str	r3, [sp, #40]	; 0x28
 801f884:	e702      	b.n	801f68c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f886:	d027      	beq.n	801f8d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f88a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801f88c:	3b01      	subs	r3, #1
 801f88e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801f890:	fb00 5003 	mla	r0, r0, r3, r5
 801f894:	1400      	asrs	r0, r0, #16
 801f896:	f53f af16 	bmi.w	801f6c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f89a:	3901      	subs	r1, #1
 801f89c:	4288      	cmp	r0, r1
 801f89e:	f6bf af12 	bge.w	801f6c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f8a2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f8a4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801f8a6:	fb01 0303 	mla	r3, r1, r3, r0
 801f8aa:	141b      	asrs	r3, r3, #16
 801f8ac:	f53f af0b 	bmi.w	801f6c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f8b0:	3a01      	subs	r2, #1
 801f8b2:	4293      	cmp	r3, r2
 801f8b4:	f6bf af07 	bge.w	801f6c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8ba:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801f8be:	9311      	str	r3, [sp, #68]	; 0x44
 801f8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8c2:	930c      	str	r3, [sp, #48]	; 0x30
 801f8c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f8c6:	2b00      	cmp	r3, #0
 801f8c8:	dc70      	bgt.n	801f9ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 801f8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f8ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f8d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f8d6:	930a      	str	r3, [sp, #40]	; 0x28
 801f8d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	f340 8124 	ble.w	801fb28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801f8e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f8e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f8e6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f8ea:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f8ee:	eef0 6a48 	vmov.f32	s13, s16
 801f8f2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f8f6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f8fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8fe:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801f902:	eef0 6a68 	vmov.f32	s13, s17
 801f906:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f90a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801f90e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f912:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f916:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f91a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f91e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f922:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f926:	ee18 2a10 	vmov	r2, s16
 801f92a:	eeb0 8a47 	vmov.f32	s16, s14
 801f92e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f932:	ee18 2a90 	vmov	r2, s17
 801f936:	9329      	str	r3, [sp, #164]	; 0xa4
 801f938:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f93a:	eef0 8a67 	vmov.f32	s17, s15
 801f93e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f942:	932a      	str	r3, [sp, #168]	; 0xa8
 801f944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f946:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f948:	3b01      	subs	r3, #1
 801f94a:	930e      	str	r3, [sp, #56]	; 0x38
 801f94c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f94e:	bf08      	it	eq
 801f950:	4613      	moveq	r3, r2
 801f952:	9309      	str	r3, [sp, #36]	; 0x24
 801f954:	e68c      	b.n	801f670 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f956:	b149      	cbz	r1, 801f96c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801f958:	5cb2      	ldrb	r2, [r6, r2]
 801f95a:	4628      	mov	r0, r5
 801f95c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f960:	4422      	add	r2, r4
 801f962:	46ac      	mov	ip, r5
 801f964:	e6f1      	b.n	801f74a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801f966:	4628      	mov	r0, r5
 801f968:	462a      	mov	r2, r5
 801f96a:	e6ee      	b.n	801f74a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801f96c:	4628      	mov	r0, r5
 801f96e:	462a      	mov	r2, r5
 801f970:	e7f7      	b.n	801f962 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 801f972:	1c47      	adds	r7, r0, #1
 801f974:	f53f af69 	bmi.w	801f84a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801f978:	42ba      	cmp	r2, r7
 801f97a:	f6ff af66 	blt.w	801f84a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801f97e:	1c6f      	adds	r7, r5, #1
 801f980:	f53f af63 	bmi.w	801f84a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801f984:	42be      	cmp	r6, r7
 801f986:	f6ff af60 	blt.w	801f84a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801f98a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f98c:	b236      	sxth	r6, r6
 801f98e:	b212      	sxth	r2, r2
 801f990:	9002      	str	r0, [sp, #8]
 801f992:	9601      	str	r6, [sp, #4]
 801f994:	9200      	str	r2, [sp, #0]
 801f996:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f998:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801f99c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801f9a0:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801f9a4:	4623      	mov	r3, r4
 801f9a6:	f7ff fd47 	bl	801f438 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801f9aa:	e74e      	b.n	801f84a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801f9ac:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f9ae:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801f9b0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f9b4:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801f9b6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f9b8:	1400      	asrs	r0, r0, #16
 801f9ba:	142d      	asrs	r5, r5, #16
 801f9bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f9be:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f9c2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f9c6:	fb02 5000 	mla	r0, r2, r0, r5
 801f9ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f9cc:	f815 9000 	ldrb.w	r9, [r5, r0]
 801f9d0:	182e      	adds	r6, r5, r0
 801f9d2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f9d6:	eb04 0509 	add.w	r5, r4, r9
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	f000 8096 	beq.w	801fb0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 801f9e0:	7877      	ldrb	r7, [r6, #1]
 801f9e2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f9e6:	4427      	add	r7, r4
 801f9e8:	2900      	cmp	r1, #0
 801f9ea:	f000 8097 	beq.w	801fb1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 801f9ee:	18b0      	adds	r0, r6, r2
 801f9f0:	5cb2      	ldrb	r2, [r6, r2]
 801f9f2:	7840      	ldrb	r0, [r0, #1]
 801f9f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f9f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f9fc:	4422      	add	r2, r4
 801f9fe:	4420      	add	r0, r4
 801fa00:	b29b      	uxth	r3, r3
 801fa02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fa04:	b289      	uxth	r1, r1
 801fa06:	f895 b002 	ldrb.w	fp, [r5, #2]
 801fa0a:	f8b6 c000 	ldrh.w	ip, [r6]
 801fa0e:	fb03 f801 	mul.w	r8, r3, r1
 801fa12:	011b      	lsls	r3, r3, #4
 801fa14:	78be      	ldrb	r6, [r7, #2]
 801fa16:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801fa1a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fa1e:	eba3 0308 	sub.w	r3, r3, r8
 801fa22:	f814 9009 	ldrb.w	r9, [r4, r9]
 801fa26:	b289      	uxth	r1, r1
 801fa28:	b29b      	uxth	r3, r3
 801fa2a:	ebae 0e01 	sub.w	lr, lr, r1
 801fa2e:	435e      	muls	r6, r3
 801fa30:	fa1f fe8e 	uxth.w	lr, lr
 801fa34:	9310      	str	r3, [sp, #64]	; 0x40
 801fa36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa38:	fb0e 660b 	mla	r6, lr, fp, r6
 801fa3c:	f892 b002 	ldrb.w	fp, [r2, #2]
 801fa40:	fb01 660b 	mla	r6, r1, fp, r6
 801fa44:	f890 b002 	ldrb.w	fp, [r0, #2]
 801fa48:	fb08 660b 	mla	r6, r8, fp, r6
 801fa4c:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801fa50:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801fa54:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fa58:	fb1b fb03 	smulbb	fp, fp, r3
 801fa5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa5e:	fb06 b60a 	mla	r6, r6, sl, fp
 801fa62:	f895 b001 	ldrb.w	fp, [r5, #1]
 801fa66:	787d      	ldrb	r5, [r7, #1]
 801fa68:	783f      	ldrb	r7, [r7, #0]
 801fa6a:	b2b6      	uxth	r6, r6
 801fa6c:	435d      	muls	r5, r3
 801fa6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa70:	fb0e 550b 	mla	r5, lr, fp, r5
 801fa74:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fa78:	fb01 550b 	mla	r5, r1, fp, r5
 801fa7c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fa80:	fb08 550b 	mla	r5, r8, fp, r5
 801fa84:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801fa88:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fa8c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801fa90:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801fa94:	fa5f fc8c 	uxtb.w	ip, ip
 801fa98:	fb1b fb03 	smulbb	fp, fp, r3
 801fa9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa9e:	437b      	muls	r3, r7
 801faa0:	7817      	ldrb	r7, [r2, #0]
 801faa2:	fb05 b50a 	mla	r5, r5, sl, fp
 801faa6:	fb0e 3309 	mla	r3, lr, r9, r3
 801faaa:	b2ad      	uxth	r5, r5
 801faac:	fb01 3307 	mla	r3, r1, r7, r3
 801fab0:	7807      	ldrb	r7, [r0, #0]
 801fab2:	f105 0b01 	add.w	fp, r5, #1
 801fab6:	fb08 3707 	mla	r7, r8, r7, r3
 801faba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fabc:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801fac0:	fb1c fc03 	smulbb	ip, ip, r3
 801fac4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801fac8:	1c73      	adds	r3, r6, #1
 801faca:	096d      	lsrs	r5, r5, #5
 801facc:	fb07 c70a 	mla	r7, r7, sl, ip
 801fad0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801fad4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fad8:	b2bf      	uxth	r7, r7
 801fada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fadc:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801fae0:	1c7a      	adds	r2, r7, #1
 801fae2:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801fae6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801faea:	4316      	orrs	r6, r2
 801faec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801faee:	432e      	orrs	r6, r5
 801faf0:	f823 6b02 	strh.w	r6, [r3], #2
 801faf4:	930c      	str	r3, [sp, #48]	; 0x30
 801faf6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801faf8:	4413      	add	r3, r2
 801fafa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801fafc:	9327      	str	r3, [sp, #156]	; 0x9c
 801fafe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fb00:	4413      	add	r3, r2
 801fb02:	9328      	str	r3, [sp, #160]	; 0xa0
 801fb04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fb06:	3b01      	subs	r3, #1
 801fb08:	9311      	str	r3, [sp, #68]	; 0x44
 801fb0a:	e6db      	b.n	801f8c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 801fb0c:	b149      	cbz	r1, 801fb22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801fb0e:	5cb2      	ldrb	r2, [r6, r2]
 801fb10:	4628      	mov	r0, r5
 801fb12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb16:	4422      	add	r2, r4
 801fb18:	462f      	mov	r7, r5
 801fb1a:	e771      	b.n	801fa00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 801fb1c:	4628      	mov	r0, r5
 801fb1e:	462a      	mov	r2, r5
 801fb20:	e76e      	b.n	801fa00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 801fb22:	4628      	mov	r0, r5
 801fb24:	462a      	mov	r2, r5
 801fb26:	e7f7      	b.n	801fb18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801fb28:	b015      	add	sp, #84	; 0x54
 801fb2a:	ecbd 8b08 	vpop	{d8-d11}
 801fb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fb34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801fb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb38:	880e      	ldrh	r6, [r1, #0]
 801fb3a:	b085      	sub	sp, #20
 801fb3c:	4691      	mov	r9, r2
 801fb3e:	0230      	lsls	r0, r6, #8
 801fb40:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fb44:	9101      	str	r1, [sp, #4]
 801fb46:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801fb4a:	0170      	lsls	r0, r6, #5
 801fb4c:	00f6      	lsls	r6, r6, #3
 801fb4e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801fb52:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 801fb56:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801fb5a:	b2f6      	uxtb	r6, r6
 801fb5c:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801fb60:	ea4b 0000 	orr.w	r0, fp, r0
 801fb64:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801fb68:	4306      	orrs	r6, r0
 801fb6a:	fb05 7a0c 	mla	sl, r5, ip, r7
 801fb6e:	2d00      	cmp	r5, #0
 801fb70:	9603      	str	r6, [sp, #12]
 801fb72:	eb09 0e0a 	add.w	lr, r9, sl
 801fb76:	db42      	blt.n	801fbfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 801fb78:	45a8      	cmp	r8, r5
 801fb7a:	dd40      	ble.n	801fbfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 801fb7c:	2f00      	cmp	r7, #0
 801fb7e:	db3c      	blt.n	801fbfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 801fb80:	45bc      	cmp	ip, r7
 801fb82:	dd3a      	ble.n	801fbfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 801fb84:	f819 600a 	ldrb.w	r6, [r9, sl]
 801fb88:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fb8c:	441e      	add	r6, r3
 801fb8e:	1c78      	adds	r0, r7, #1
 801fb90:	d438      	bmi.n	801fc04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801fb92:	4584      	cmp	ip, r0
 801fb94:	dd36      	ble.n	801fc04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801fb96:	b3aa      	cbz	r2, 801fc04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801fb98:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801fb9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fba0:	4418      	add	r0, r3
 801fba2:	3501      	adds	r5, #1
 801fba4:	d432      	bmi.n	801fc0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801fba6:	45a8      	cmp	r8, r5
 801fba8:	dd30      	ble.n	801fc0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801fbaa:	b37c      	cbz	r4, 801fc0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801fbac:	2f00      	cmp	r7, #0
 801fbae:	db2b      	blt.n	801fc08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 801fbb0:	45bc      	cmp	ip, r7
 801fbb2:	dd29      	ble.n	801fc08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 801fbb4:	f81e 500c 	ldrb.w	r5, [lr, ip]
 801fbb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fbbc:	441d      	add	r5, r3
 801fbbe:	3701      	adds	r7, #1
 801fbc0:	d427      	bmi.n	801fc12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801fbc2:	45bc      	cmp	ip, r7
 801fbc4:	dd25      	ble.n	801fc12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801fbc6:	b322      	cbz	r2, 801fc12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801fbc8:	44f4      	add	ip, lr
 801fbca:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801fbce:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fbd2:	443b      	add	r3, r7
 801fbd4:	781f      	ldrb	r7, [r3, #0]
 801fbd6:	2a0f      	cmp	r2, #15
 801fbd8:	f896 9000 	ldrb.w	r9, [r6]
 801fbdc:	f890 a000 	ldrb.w	sl, [r0]
 801fbe0:	4639      	mov	r1, r7
 801fbe2:	f895 8000 	ldrb.w	r8, [r5]
 801fbe6:	d801      	bhi.n	801fbec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 801fbe8:	2c0f      	cmp	r4, #15
 801fbea:	d914      	bls.n	801fc16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 801fbec:	4b2c      	ldr	r3, [pc, #176]	; (801fca0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 801fbee:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801fbf2:	4a2c      	ldr	r2, [pc, #176]	; (801fca4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 801fbf4:	482c      	ldr	r0, [pc, #176]	; (801fca8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 801fbf6:	f005 ffbd 	bl	8025b74 <__assert_func>
 801fbfa:	ae03      	add	r6, sp, #12
 801fbfc:	e7c7      	b.n	801fb8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 801fbfe:	a803      	add	r0, sp, #12
 801fc00:	4606      	mov	r6, r0
 801fc02:	e7ce      	b.n	801fba2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801fc04:	a803      	add	r0, sp, #12
 801fc06:	e7cc      	b.n	801fba2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801fc08:	ad03      	add	r5, sp, #12
 801fc0a:	e7d8      	b.n	801fbbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 801fc0c:	ab03      	add	r3, sp, #12
 801fc0e:	461d      	mov	r5, r3
 801fc10:	e7e0      	b.n	801fbd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 801fc12:	ab03      	add	r3, sp, #12
 801fc14:	e7de      	b.n	801fbd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 801fc16:	b292      	uxth	r2, r2
 801fc18:	f890 c002 	ldrb.w	ip, [r0, #2]
 801fc1c:	b2a4      	uxth	r4, r4
 801fc1e:	f896 b002 	ldrb.w	fp, [r6, #2]
 801fc22:	7840      	ldrb	r0, [r0, #1]
 801fc24:	fb02 fe04 	mul.w	lr, r2, r4
 801fc28:	0112      	lsls	r2, r2, #4
 801fc2a:	7876      	ldrb	r6, [r6, #1]
 801fc2c:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801fc30:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801fc34:	eba2 020e 	sub.w	r2, r2, lr
 801fc38:	b2a4      	uxth	r4, r4
 801fc3a:	b292      	uxth	r2, r2
 801fc3c:	1b3f      	subs	r7, r7, r4
 801fc3e:	fb02 fc0c 	mul.w	ip, r2, ip
 801fc42:	b2bf      	uxth	r7, r7
 801fc44:	fb07 cc0b 	mla	ip, r7, fp, ip
 801fc48:	f895 b002 	ldrb.w	fp, [r5, #2]
 801fc4c:	fb04 cc0b 	mla	ip, r4, fp, ip
 801fc50:	f893 b002 	ldrb.w	fp, [r3, #2]
 801fc54:	785b      	ldrb	r3, [r3, #1]
 801fc56:	fb0e cc0b 	mla	ip, lr, fp, ip
 801fc5a:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801fc5e:	fb02 fc0a 	mul.w	ip, r2, sl
 801fc62:	4342      	muls	r2, r0
 801fc64:	7868      	ldrb	r0, [r5, #1]
 801fc66:	fb07 cc09 	mla	ip, r7, r9, ip
 801fc6a:	fb07 2206 	mla	r2, r7, r6, r2
 801fc6e:	fb04 cc08 	mla	ip, r4, r8, ip
 801fc72:	fb04 2400 	mla	r4, r4, r0, r2
 801fc76:	fb0e cc01 	mla	ip, lr, r1, ip
 801fc7a:	fb0e 4e03 	mla	lr, lr, r3, r4
 801fc7e:	9b01      	ldr	r3, [sp, #4]
 801fc80:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fc84:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801fc88:	ea4c 0c0b 	orr.w	ip, ip, fp
 801fc8c:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801fc90:	ea4c 0c0e 	orr.w	ip, ip, lr
 801fc94:	f8a3 c000 	strh.w	ip, [r3]
 801fc98:	b005      	add	sp, #20
 801fc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc9e:	bf00      	nop
 801fca0:	0802a0cd 	.word	0x0802a0cd
 801fca4:	0802a69a 	.word	0x0802a69a
 801fca8:	0802a151 	.word	0x0802a151

0801fcac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcb0:	ed2d 8b08 	vpush	{d8-d11}
 801fcb4:	b08f      	sub	sp, #60	; 0x3c
 801fcb6:	eeb0 aa40 	vmov.f32	s20, s0
 801fcba:	eef0 9a60 	vmov.f32	s19, s1
 801fcbe:	920c      	str	r2, [sp, #48]	; 0x30
 801fcc0:	eeb0 9a41 	vmov.f32	s18, s2
 801fcc4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fcc6:	eeb0 8a62 	vmov.f32	s16, s5
 801fcca:	900d      	str	r0, [sp, #52]	; 0x34
 801fccc:	eef0 8a43 	vmov.f32	s17, s6
 801fcd0:	6850      	ldr	r0, [r2, #4]
 801fcd2:	eef0 ba44 	vmov.f32	s23, s8
 801fcd6:	910a      	str	r1, [sp, #40]	; 0x28
 801fcd8:	eeb0 ba64 	vmov.f32	s22, s9
 801fcdc:	9306      	str	r3, [sp, #24]
 801fcde:	eef0 aa45 	vmov.f32	s21, s10
 801fce2:	6812      	ldr	r2, [r2, #0]
 801fce4:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801fce8:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 801fcec:	fb00 1303 	mla	r3, r0, r3, r1
 801fcf0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fcf4:	9307      	str	r3, [sp, #28]
 801fcf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fcf8:	681b      	ldr	r3, [r3, #0]
 801fcfa:	9308      	str	r3, [sp, #32]
 801fcfc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fcfe:	685c      	ldr	r4, [r3, #4]
 801fd00:	3404      	adds	r4, #4
 801fd02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	dc03      	bgt.n	801fd10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fd08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	f340 81d5 	ble.w	80200ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 801fd10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fd12:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fd16:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fd1a:	1e48      	subs	r0, r1, #1
 801fd1c:	1e56      	subs	r6, r2, #1
 801fd1e:	9b06      	ldr	r3, [sp, #24]
 801fd20:	2b00      	cmp	r3, #0
 801fd22:	f340 80b6 	ble.w	801fe92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801fd26:	ea5f 472b 	movs.w	r7, fp, asr #16
 801fd2a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801fd2e:	d406      	bmi.n	801fd3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd30:	4287      	cmp	r7, r0
 801fd32:	da04      	bge.n	801fd3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd34:	2b00      	cmp	r3, #0
 801fd36:	db02      	blt.n	801fd3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd38:	42b3      	cmp	r3, r6
 801fd3a:	f2c0 80ab 	blt.w	801fe94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fd3e:	3701      	adds	r7, #1
 801fd40:	f100 809c 	bmi.w	801fe7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801fd44:	42b9      	cmp	r1, r7
 801fd46:	f2c0 8099 	blt.w	801fe7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801fd4a:	3301      	adds	r3, #1
 801fd4c:	f100 8096 	bmi.w	801fe7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801fd50:	429a      	cmp	r2, r3
 801fd52:	f2c0 8093 	blt.w	801fe7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801fd56:	9b06      	ldr	r3, [sp, #24]
 801fd58:	930b      	str	r3, [sp, #44]	; 0x2c
 801fd5a:	9b07      	ldr	r3, [sp, #28]
 801fd5c:	9309      	str	r3, [sp, #36]	; 0x24
 801fd5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	f340 80b4 	ble.w	801fece <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 801fd66:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801fd68:	142e      	asrs	r6, r5, #16
 801fd6a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801fd6c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801fd70:	68c7      	ldr	r7, [r0, #12]
 801fd72:	ea5f 402b 	movs.w	r0, fp, asr #16
 801fd76:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fd7a:	6892      	ldr	r2, [r2, #8]
 801fd7c:	f100 80fb 	bmi.w	801ff76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801fd80:	f102 3cff 	add.w	ip, r2, #4294967295
 801fd84:	4560      	cmp	r0, ip
 801fd86:	f280 80f6 	bge.w	801ff76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801fd8a:	2e00      	cmp	r6, #0
 801fd8c:	f2c0 80f3 	blt.w	801ff76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801fd90:	f107 3cff 	add.w	ip, r7, #4294967295
 801fd94:	4566      	cmp	r6, ip
 801fd96:	f280 80ee 	bge.w	801ff76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801fd9a:	b212      	sxth	r2, r2
 801fd9c:	fb06 0002 	mla	r0, r6, r2, r0
 801fda0:	9e08      	ldr	r6, [sp, #32]
 801fda2:	1837      	adds	r7, r6, r0
 801fda4:	5c30      	ldrb	r0, [r6, r0]
 801fda6:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801fdaa:	eb04 0c08 	add.w	ip, r4, r8
 801fdae:	2b00      	cmp	r3, #0
 801fdb0:	f000 80d3 	beq.w	801ff5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 801fdb4:	787e      	ldrb	r6, [r7, #1]
 801fdb6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fdba:	4426      	add	r6, r4
 801fdbc:	2900      	cmp	r1, #0
 801fdbe:	f000 80d4 	beq.w	801ff6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801fdc2:	18b8      	adds	r0, r7, r2
 801fdc4:	5cba      	ldrb	r2, [r7, r2]
 801fdc6:	7840      	ldrb	r0, [r0, #1]
 801fdc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fdcc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fdd0:	4422      	add	r2, r4
 801fdd2:	4420      	add	r0, r4
 801fdd4:	b29b      	uxth	r3, r3
 801fdd6:	78b7      	ldrb	r7, [r6, #2]
 801fdd8:	b289      	uxth	r1, r1
 801fdda:	f89c a002 	ldrb.w	sl, [ip, #2]
 801fdde:	f89c c001 	ldrb.w	ip, [ip, #1]
 801fde2:	fb03 f901 	mul.w	r9, r3, r1
 801fde6:	011b      	lsls	r3, r3, #4
 801fde8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fdec:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fdf0:	eba3 0309 	sub.w	r3, r3, r9
 801fdf4:	b289      	uxth	r1, r1
 801fdf6:	b29b      	uxth	r3, r3
 801fdf8:	ebae 0e01 	sub.w	lr, lr, r1
 801fdfc:	435f      	muls	r7, r3
 801fdfe:	fa1f fe8e 	uxth.w	lr, lr
 801fe02:	fb0e 770a 	mla	r7, lr, sl, r7
 801fe06:	f892 a002 	ldrb.w	sl, [r2, #2]
 801fe0a:	fb01 770a 	mla	r7, r1, sl, r7
 801fe0e:	f890 a002 	ldrb.w	sl, [r0, #2]
 801fe12:	fb09 7a0a 	mla	sl, r9, sl, r7
 801fe16:	f814 7008 	ldrb.w	r7, [r4, r8]
 801fe1a:	f896 8000 	ldrb.w	r8, [r6]
 801fe1e:	7876      	ldrb	r6, [r6, #1]
 801fe20:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801fe24:	fb03 f808 	mul.w	r8, r3, r8
 801fe28:	4373      	muls	r3, r6
 801fe2a:	fb0e 8807 	mla	r8, lr, r7, r8
 801fe2e:	7817      	ldrb	r7, [r2, #0]
 801fe30:	fb0e 330c 	mla	r3, lr, ip, r3
 801fe34:	fb01 8807 	mla	r8, r1, r7, r8
 801fe38:	7807      	ldrb	r7, [r0, #0]
 801fe3a:	fb09 8707 	mla	r7, r9, r7, r8
 801fe3e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fe42:	ea47 070a 	orr.w	r7, r7, sl
 801fe46:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fe4a:	fb01 310a 	mla	r1, r1, sl, r3
 801fe4e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fe52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe54:	fb09 1a0a 	mla	sl, r9, sl, r1
 801fe58:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fe5c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fe60:	ea47 070a 	orr.w	r7, r7, sl
 801fe64:	801f      	strh	r7, [r3, #0]
 801fe66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe68:	3302      	adds	r3, #2
 801fe6a:	9309      	str	r3, [sp, #36]	; 0x24
 801fe6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fe6e:	449b      	add	fp, r3
 801fe70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe72:	441d      	add	r5, r3
 801fe74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe76:	3b01      	subs	r3, #1
 801fe78:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe7a:	e770      	b.n	801fd5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801fe7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fe7e:	449b      	add	fp, r3
 801fe80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe82:	441d      	add	r5, r3
 801fe84:	9b06      	ldr	r3, [sp, #24]
 801fe86:	3b01      	subs	r3, #1
 801fe88:	9306      	str	r3, [sp, #24]
 801fe8a:	9b07      	ldr	r3, [sp, #28]
 801fe8c:	3302      	adds	r3, #2
 801fe8e:	9307      	str	r3, [sp, #28]
 801fe90:	e745      	b.n	801fd1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe92:	d023      	beq.n	801fedc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801fe94:	9b06      	ldr	r3, [sp, #24]
 801fe96:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801fe98:	3b01      	subs	r3, #1
 801fe9a:	fb00 b003 	mla	r0, r0, r3, fp
 801fe9e:	1400      	asrs	r0, r0, #16
 801fea0:	f53f af59 	bmi.w	801fd56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801fea4:	3901      	subs	r1, #1
 801fea6:	4288      	cmp	r0, r1
 801fea8:	f6bf af55 	bge.w	801fd56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801feac:	9924      	ldr	r1, [sp, #144]	; 0x90
 801feae:	fb01 5303 	mla	r3, r1, r3, r5
 801feb2:	141b      	asrs	r3, r3, #16
 801feb4:	f53f af4f 	bmi.w	801fd56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801feb8:	3a01      	subs	r2, #1
 801feba:	4293      	cmp	r3, r2
 801febc:	f6bf af4b 	bge.w	801fd56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801fec0:	9b06      	ldr	r3, [sp, #24]
 801fec2:	9309      	str	r3, [sp, #36]	; 0x24
 801fec4:	9b07      	ldr	r3, [sp, #28]
 801fec6:	930b      	str	r3, [sp, #44]	; 0x2c
 801fec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801feca:	2b00      	cmp	r3, #0
 801fecc:	dc70      	bgt.n	801ffb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 801fece:	9b06      	ldr	r3, [sp, #24]
 801fed0:	9a07      	ldr	r2, [sp, #28]
 801fed2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fed6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801feda:	9307      	str	r3, [sp, #28]
 801fedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fede:	2b00      	cmp	r3, #0
 801fee0:	f340 80eb 	ble.w	80200ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 801fee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fee8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801feea:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801feee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fef2:	eef0 6a48 	vmov.f32	s13, s16
 801fef6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fefa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fefe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff02:	ee16 ba90 	vmov	fp, s13
 801ff06:	eef0 6a68 	vmov.f32	s13, s17
 801ff0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff0e:	ee16 5a90 	vmov	r5, s13
 801ff12:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ff16:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ff1a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ff1e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ff22:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ff26:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ff2a:	ee18 2a10 	vmov	r2, s16
 801ff2e:	eeb0 8a47 	vmov.f32	s16, s14
 801ff32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff36:	ee18 2a90 	vmov	r2, s17
 801ff3a:	9323      	str	r3, [sp, #140]	; 0x8c
 801ff3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ff3e:	eef0 8a67 	vmov.f32	s17, s15
 801ff42:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff46:	9324      	str	r3, [sp, #144]	; 0x90
 801ff48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ff4c:	3b01      	subs	r3, #1
 801ff4e:	930a      	str	r3, [sp, #40]	; 0x28
 801ff50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ff52:	bf08      	it	eq
 801ff54:	4613      	moveq	r3, r2
 801ff56:	9306      	str	r3, [sp, #24]
 801ff58:	e6d3      	b.n	801fd02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801ff5a:	b149      	cbz	r1, 801ff70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 801ff5c:	5cba      	ldrb	r2, [r7, r2]
 801ff5e:	4660      	mov	r0, ip
 801ff60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ff64:	4422      	add	r2, r4
 801ff66:	4666      	mov	r6, ip
 801ff68:	e734      	b.n	801fdd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ff6a:	4660      	mov	r0, ip
 801ff6c:	4662      	mov	r2, ip
 801ff6e:	e731      	b.n	801fdd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ff70:	4660      	mov	r0, ip
 801ff72:	4662      	mov	r2, ip
 801ff74:	e7f7      	b.n	801ff66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ff76:	f110 0c01 	adds.w	ip, r0, #1
 801ff7a:	f53f af74 	bmi.w	801fe66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ff7e:	4562      	cmp	r2, ip
 801ff80:	f6ff af71 	blt.w	801fe66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ff84:	f116 0c01 	adds.w	ip, r6, #1
 801ff88:	f53f af6d 	bmi.w	801fe66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ff8c:	4567      	cmp	r7, ip
 801ff8e:	f6ff af6a 	blt.w	801fe66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ff92:	b23f      	sxth	r7, r7
 801ff94:	b212      	sxth	r2, r2
 801ff96:	9701      	str	r7, [sp, #4]
 801ff98:	9200      	str	r2, [sp, #0]
 801ff9a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801ff9e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801ffa2:	4623      	mov	r3, r4
 801ffa4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ffa6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ffaa:	f7ff fdc3 	bl	801fb34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801ffae:	e75a      	b.n	801fe66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ffb0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ffb2:	ea4f 462b 	mov.w	r6, fp, asr #16
 801ffb6:	1428      	asrs	r0, r5, #16
 801ffb8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801ffbc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ffc0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ffc4:	fb02 6000 	mla	r0, r2, r0, r6
 801ffc8:	9e08      	ldr	r6, [sp, #32]
 801ffca:	f816 8000 	ldrb.w	r8, [r6, r0]
 801ffce:	1837      	adds	r7, r6, r0
 801ffd0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ffd4:	eb04 0c08 	add.w	ip, r4, r8
 801ffd8:	2b00      	cmp	r3, #0
 801ffda:	d060      	beq.n	802009e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801ffdc:	787e      	ldrb	r6, [r7, #1]
 801ffde:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ffe2:	4426      	add	r6, r4
 801ffe4:	2900      	cmp	r1, #0
 801ffe6:	d062      	beq.n	80200ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 801ffe8:	18b8      	adds	r0, r7, r2
 801ffea:	5cba      	ldrb	r2, [r7, r2]
 801ffec:	7840      	ldrb	r0, [r0, #1]
 801ffee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fff2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fff6:	4422      	add	r2, r4
 801fff8:	4420      	add	r0, r4
 801fffa:	b29b      	uxth	r3, r3
 801fffc:	78b7      	ldrb	r7, [r6, #2]
 801fffe:	b289      	uxth	r1, r1
 8020000:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020004:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020008:	fb03 f901 	mul.w	r9, r3, r1
 802000c:	011b      	lsls	r3, r3, #4
 802000e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020012:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020016:	eba3 0309 	sub.w	r3, r3, r9
 802001a:	b289      	uxth	r1, r1
 802001c:	b29b      	uxth	r3, r3
 802001e:	ebae 0e01 	sub.w	lr, lr, r1
 8020022:	435f      	muls	r7, r3
 8020024:	fa1f fe8e 	uxth.w	lr, lr
 8020028:	fb0e 770a 	mla	r7, lr, sl, r7
 802002c:	f892 a002 	ldrb.w	sl, [r2, #2]
 8020030:	fb01 770a 	mla	r7, r1, sl, r7
 8020034:	f890 a002 	ldrb.w	sl, [r0, #2]
 8020038:	fb09 7a0a 	mla	sl, r9, sl, r7
 802003c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020040:	f896 8000 	ldrb.w	r8, [r6]
 8020044:	7876      	ldrb	r6, [r6, #1]
 8020046:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802004a:	fb03 f808 	mul.w	r8, r3, r8
 802004e:	4373      	muls	r3, r6
 8020050:	7856      	ldrb	r6, [r2, #1]
 8020052:	fb0e 8807 	mla	r8, lr, r7, r8
 8020056:	7817      	ldrb	r7, [r2, #0]
 8020058:	fb0e 330c 	mla	r3, lr, ip, r3
 802005c:	fb01 8807 	mla	r8, r1, r7, r8
 8020060:	7807      	ldrb	r7, [r0, #0]
 8020062:	fb01 3306 	mla	r3, r1, r6, r3
 8020066:	fb09 8707 	mla	r7, r9, r7, r8
 802006a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802006e:	ea47 070a 	orr.w	r7, r7, sl
 8020072:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020076:	fb09 3a0a 	mla	sl, r9, sl, r3
 802007a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802007c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020080:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020084:	ea47 070a 	orr.w	r7, r7, sl
 8020088:	f823 7b02 	strh.w	r7, [r3], #2
 802008c:	930b      	str	r3, [sp, #44]	; 0x2c
 802008e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020090:	449b      	add	fp, r3
 8020092:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020094:	441d      	add	r5, r3
 8020096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020098:	3b01      	subs	r3, #1
 802009a:	9309      	str	r3, [sp, #36]	; 0x24
 802009c:	e714      	b.n	801fec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 802009e:	b149      	cbz	r1, 80200b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 80200a0:	5cba      	ldrb	r2, [r7, r2]
 80200a2:	4660      	mov	r0, ip
 80200a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80200a8:	4422      	add	r2, r4
 80200aa:	4666      	mov	r6, ip
 80200ac:	e7a5      	b.n	801fffa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80200ae:	4660      	mov	r0, ip
 80200b0:	4662      	mov	r2, ip
 80200b2:	e7a2      	b.n	801fffa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80200b4:	4660      	mov	r0, ip
 80200b6:	4662      	mov	r2, ip
 80200b8:	e7f7      	b.n	80200aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 80200ba:	b00f      	add	sp, #60	; 0x3c
 80200bc:	ecbd 8b08 	vpop	{d8-d11}
 80200c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080200c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80200c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200c8:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 80200cc:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80200d0:	2c00      	cmp	r4, #0
 80200d2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80200d6:	fb04 560c 	mla	r6, r4, ip, r5
 80200da:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80200de:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80200e2:	eb02 0e06 	add.w	lr, r2, r6
 80200e6:	db3d      	blt.n	8020164 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 80200e8:	45a0      	cmp	r8, r4
 80200ea:	dd3b      	ble.n	8020164 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 80200ec:	2d00      	cmp	r5, #0
 80200ee:	db37      	blt.n	8020160 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 80200f0:	45ac      	cmp	ip, r5
 80200f2:	dd35      	ble.n	8020160 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 80200f4:	5d92      	ldrb	r2, [r2, r6]
 80200f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80200fa:	1c6e      	adds	r6, r5, #1
 80200fc:	d435      	bmi.n	802016a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 80200fe:	45b4      	cmp	ip, r6
 8020100:	dd33      	ble.n	802016a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8020102:	b3a0      	cbz	r0, 802016e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8020104:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8020108:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 802010c:	3401      	adds	r4, #1
 802010e:	d432      	bmi.n	8020176 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8020110:	45a0      	cmp	r8, r4
 8020112:	dd30      	ble.n	8020176 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8020114:	b397      	cbz	r7, 802017c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 8020116:	2d00      	cmp	r5, #0
 8020118:	db2b      	blt.n	8020172 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 802011a:	45ac      	cmp	ip, r5
 802011c:	dd29      	ble.n	8020172 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 802011e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8020122:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8020126:	3501      	adds	r5, #1
 8020128:	d42b      	bmi.n	8020182 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 802012a:	45ac      	cmp	ip, r5
 802012c:	dd29      	ble.n	8020182 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 802012e:	b350      	cbz	r0, 8020186 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8020130:	44f4      	add	ip, lr
 8020132:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8020136:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802013a:	280f      	cmp	r0, #15
 802013c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020140:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020144:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020148:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802014c:	d801      	bhi.n	8020152 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 802014e:	2f0f      	cmp	r7, #15
 8020150:	d91b      	bls.n	802018a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 8020152:	4b8d      	ldr	r3, [pc, #564]	; (8020388 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8020154:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8020158:	4a8c      	ldr	r2, [pc, #560]	; (802038c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 802015a:	488d      	ldr	r0, [pc, #564]	; (8020390 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 802015c:	f005 fd0a 	bl	8025b74 <__assert_func>
 8020160:	2200      	movs	r2, #0
 8020162:	e7ca      	b.n	80200fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8020164:	2600      	movs	r6, #0
 8020166:	4632      	mov	r2, r6
 8020168:	e7d0      	b.n	802010c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 802016a:	2600      	movs	r6, #0
 802016c:	e7ce      	b.n	802010c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 802016e:	4606      	mov	r6, r0
 8020170:	e7cc      	b.n	802010c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8020172:	2400      	movs	r4, #0
 8020174:	e7d7      	b.n	8020126 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 8020176:	2300      	movs	r3, #0
 8020178:	461c      	mov	r4, r3
 802017a:	e7de      	b.n	802013a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 802017c:	463b      	mov	r3, r7
 802017e:	463c      	mov	r4, r7
 8020180:	e7db      	b.n	802013a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8020182:	2300      	movs	r3, #0
 8020184:	e7d9      	b.n	802013a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8020186:	4603      	mov	r3, r0
 8020188:	e7d7      	b.n	802013a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 802018a:	b280      	uxth	r0, r0
 802018c:	b2bf      	uxth	r7, r7
 802018e:	fb07 fe00 	mul.w	lr, r7, r0
 8020192:	0100      	lsls	r0, r0, #4
 8020194:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020198:	eba0 0c0e 	sub.w	ip, r0, lr
 802019c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80201a0:	b2bf      	uxth	r7, r7
 80201a2:	fa1f fc8c 	uxth.w	ip, ip
 80201a6:	1bed      	subs	r5, r5, r7
 80201a8:	fb0a f00c 	mul.w	r0, sl, ip
 80201ac:	b2ad      	uxth	r5, r5
 80201ae:	fb0b 0005 	mla	r0, fp, r5, r0
 80201b2:	fb07 0009 	mla	r0, r7, r9, r0
 80201b6:	fb0e 0008 	mla	r0, lr, r8, r0
 80201ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80201be:	9001      	str	r0, [sp, #4]
 80201c0:	2800      	cmp	r0, #0
 80201c2:	f000 80de 	beq.w	8020382 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 80201c6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80201ca:	d018      	beq.n	80201fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 80201cc:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80201d0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80201d4:	fb0b f000 	mul.w	r0, fp, r0
 80201d8:	fb0b fb02 	mul.w	fp, fp, r2
 80201dc:	0a02      	lsrs	r2, r0, #8
 80201de:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80201e2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80201e6:	4402      	add	r2, r0
 80201e8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80201ec:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80201f0:	0a12      	lsrs	r2, r2, #8
 80201f2:	0a00      	lsrs	r0, r0, #8
 80201f4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80201f8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80201fc:	4302      	orrs	r2, r0
 80201fe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020202:	d01a      	beq.n	802023a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8020204:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8020208:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802020c:	fb0a f000 	mul.w	r0, sl, r0
 8020210:	fb0a fa06 	mul.w	sl, sl, r6
 8020214:	0a06      	lsrs	r6, r0, #8
 8020216:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802021a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802021e:	4406      	add	r6, r0
 8020220:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020224:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8020228:	0a36      	lsrs	r6, r6, #8
 802022a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802022e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020232:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020236:	ea46 060a 	orr.w	r6, r6, sl
 802023a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802023e:	d01b      	beq.n	8020278 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 8020240:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020244:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020248:	fb09 fa0a 	mul.w	sl, r9, sl
 802024c:	fb09 f004 	mul.w	r0, r9, r4
 8020250:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020254:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020258:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802025c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020260:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8020264:	4454      	add	r4, sl
 8020266:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802026a:	0a24      	lsrs	r4, r4, #8
 802026c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020270:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020274:	ea44 0409 	orr.w	r4, r4, r9
 8020278:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802027c:	d01b      	beq.n	80202b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 802027e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8020282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020286:	fb08 f909 	mul.w	r9, r8, r9
 802028a:	fb08 f003 	mul.w	r0, r8, r3
 802028e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8020292:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020296:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802029a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802029e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80202a2:	444b      	add	r3, r9
 80202a4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80202a8:	0a1b      	lsrs	r3, r3, #8
 80202aa:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80202ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80202b2:	ea43 0308 	orr.w	r3, r3, r8
 80202b6:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80202ba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80202be:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 80202c2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80202c6:	fb0c f808 	mul.w	r8, ip, r8
 80202ca:	8808      	ldrh	r0, [r1, #0]
 80202cc:	fb0c f606 	mul.w	r6, ip, r6
 80202d0:	fb05 8909 	mla	r9, r5, r9, r8
 80202d4:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80202d8:	fb05 6502 	mla	r5, r5, r2, r6
 80202dc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80202e0:	fb07 9908 	mla	r9, r7, r8, r9
 80202e4:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80202e8:	fb07 5704 	mla	r7, r7, r4, r5
 80202ec:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80202f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80202f4:	b2b6      	uxth	r6, r6
 80202f6:	fb0e 9808 	mla	r8, lr, r8, r9
 80202fa:	9a01      	ldr	r2, [sp, #4]
 80202fc:	fb0e 7e03 	mla	lr, lr, r3, r7
 8020300:	1205      	asrs	r5, r0, #8
 8020302:	4372      	muls	r2, r6
 8020304:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020308:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802030c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020310:	1c53      	adds	r3, r2, #1
 8020312:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8020316:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802031a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802031e:	ea48 0e0e 	orr.w	lr, r8, lr
 8020322:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020326:	ea4f 421e 	mov.w	r2, lr, lsr #16
 802032a:	f3ce 2407 	ubfx	r4, lr, #8, #8
 802032e:	b2db      	uxtb	r3, r3
 8020330:	fb12 f206 	smulbb	r2, r2, r6
 8020334:	fa5f fe8e 	uxtb.w	lr, lr
 8020338:	fb14 f406 	smulbb	r4, r4, r6
 802033c:	fb05 2503 	mla	r5, r5, r3, r2
 8020340:	10c2      	asrs	r2, r0, #3
 8020342:	fb1e fe06 	smulbb	lr, lr, r6
 8020346:	00c0      	lsls	r0, r0, #3
 8020348:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802034c:	b2ad      	uxth	r5, r5
 802034e:	b2c0      	uxtb	r0, r0
 8020350:	fb02 4203 	mla	r2, r2, r3, r4
 8020354:	fb00 e303 	mla	r3, r0, r3, lr
 8020358:	b294      	uxth	r4, r2
 802035a:	b298      	uxth	r0, r3
 802035c:	1c6b      	adds	r3, r5, #1
 802035e:	1c62      	adds	r2, r4, #1
 8020360:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020364:	1c43      	adds	r3, r0, #1
 8020366:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802036a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802036e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020372:	0952      	lsrs	r2, r2, #5
 8020374:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020378:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802037c:	432b      	orrs	r3, r5
 802037e:	4313      	orrs	r3, r2
 8020380:	800b      	strh	r3, [r1, #0]
 8020382:	b003      	add	sp, #12
 8020384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020388:	0802a0cd 	.word	0x0802a0cd
 802038c:	0802a69a 	.word	0x0802a69a
 8020390:	0802a151 	.word	0x0802a151

08020394 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020398:	ed2d 8b08 	vpush	{d8-d11}
 802039c:	b09f      	sub	sp, #124	; 0x7c
 802039e:	eeb0 aa40 	vmov.f32	s20, s0
 80203a2:	eef0 9a60 	vmov.f32	s19, s1
 80203a6:	921b      	str	r2, [sp, #108]	; 0x6c
 80203a8:	eeb0 9a41 	vmov.f32	s18, s2
 80203ac:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80203ae:	eeb0 8a62 	vmov.f32	s16, s5
 80203b2:	9309      	str	r3, [sp, #36]	; 0x24
 80203b4:	eef0 8a43 	vmov.f32	s17, s6
 80203b8:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80203bc:	eef0 ba44 	vmov.f32	s23, s8
 80203c0:	901d      	str	r0, [sp, #116]	; 0x74
 80203c2:	eeb0 ba64 	vmov.f32	s22, s9
 80203c6:	931c      	str	r3, [sp, #112]	; 0x70
 80203c8:	eef0 aa45 	vmov.f32	s21, s10
 80203cc:	6850      	ldr	r0, [r2, #4]
 80203ce:	9119      	str	r1, [sp, #100]	; 0x64
 80203d0:	6812      	ldr	r2, [r2, #0]
 80203d2:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 80203d4:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80203d8:	fb00 1303 	mla	r3, r0, r3, r1
 80203dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80203e0:	930c      	str	r3, [sp, #48]	; 0x30
 80203e2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80203e4:	681b      	ldr	r3, [r3, #0]
 80203e6:	9312      	str	r3, [sp, #72]	; 0x48
 80203e8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80203ea:	685e      	ldr	r6, [r3, #4]
 80203ec:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80203f0:	3604      	adds	r6, #4
 80203f2:	930d      	str	r3, [sp, #52]	; 0x34
 80203f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	dc03      	bgt.n	8020402 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80203fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80203fc:	2b00      	cmp	r3, #0
 80203fe:	f340 8387 	ble.w	8020b10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8020402:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020404:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020408:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802040c:	1e48      	subs	r0, r1, #1
 802040e:	1e57      	subs	r7, r2, #1
 8020410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020412:	2b00      	cmp	r3, #0
 8020414:	f340 8194 	ble.w	8020740 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8020418:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802041a:	142b      	asrs	r3, r5, #16
 802041c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020420:	d406      	bmi.n	8020430 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020422:	4584      	cmp	ip, r0
 8020424:	da04      	bge.n	8020430 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020426:	2b00      	cmp	r3, #0
 8020428:	db02      	blt.n	8020430 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802042a:	42bb      	cmp	r3, r7
 802042c:	f2c0 8189 	blt.w	8020742 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020430:	f11c 0c01 	adds.w	ip, ip, #1
 8020434:	f100 8177 	bmi.w	8020726 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8020438:	4561      	cmp	r1, ip
 802043a:	f2c0 8174 	blt.w	8020726 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802043e:	3301      	adds	r3, #1
 8020440:	f100 8171 	bmi.w	8020726 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8020444:	429a      	cmp	r2, r3
 8020446:	f2c0 816e 	blt.w	8020726 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802044a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802044c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802044e:	931a      	str	r3, [sp, #104]	; 0x68
 8020450:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020452:	2b00      	cmp	r3, #0
 8020454:	f340 8193 	ble.w	802077e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8020458:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802045a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802045e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020462:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020466:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020468:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802046c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802046e:	141b      	asrs	r3, r3, #16
 8020470:	f100 81d6 	bmi.w	8020820 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8020474:	f100 38ff 	add.w	r8, r0, #4294967295
 8020478:	4543      	cmp	r3, r8
 802047a:	f280 81d1 	bge.w	8020820 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802047e:	f1bc 0f00 	cmp.w	ip, #0
 8020482:	f2c0 81cd 	blt.w	8020820 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8020486:	f10e 38ff 	add.w	r8, lr, #4294967295
 802048a:	45c4      	cmp	ip, r8
 802048c:	f280 81c8 	bge.w	8020820 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8020490:	b200      	sxth	r0, r0
 8020492:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020494:	fb0c 3300 	mla	r3, ip, r0, r3
 8020498:	eb04 0803 	add.w	r8, r4, r3
 802049c:	5ce3      	ldrb	r3, [r4, r3]
 802049e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80204a2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80204a6:	2a00      	cmp	r2, #0
 80204a8:	f000 81af 	beq.w	802080a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80204ac:	f898 c001 	ldrb.w	ip, [r8, #1]
 80204b0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80204b4:	940e      	str	r4, [sp, #56]	; 0x38
 80204b6:	0e24      	lsrs	r4, r4, #24
 80204b8:	9415      	str	r4, [sp, #84]	; 0x54
 80204ba:	b179      	cbz	r1, 80204dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80204bc:	eb08 0c00 	add.w	ip, r8, r0
 80204c0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80204c4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80204c8:	900a      	str	r0, [sp, #40]	; 0x28
 80204ca:	0e00      	lsrs	r0, r0, #24
 80204cc:	9013      	str	r0, [sp, #76]	; 0x4c
 80204ce:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80204d2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80204d6:	900f      	str	r0, [sp, #60]	; 0x3c
 80204d8:	0e00      	lsrs	r0, r0, #24
 80204da:	9016      	str	r0, [sp, #88]	; 0x58
 80204dc:	b292      	uxth	r2, r2
 80204de:	9815      	ldr	r0, [sp, #84]	; 0x54
 80204e0:	b289      	uxth	r1, r1
 80204e2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80204e4:	fb02 f901 	mul.w	r9, r2, r1
 80204e8:	0112      	lsls	r2, r2, #4
 80204ea:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80204ee:	eba2 0809 	sub.w	r8, r2, r9
 80204f2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80204f6:	b289      	uxth	r1, r1
 80204f8:	fa1f f888 	uxth.w	r8, r8
 80204fc:	1a52      	subs	r2, r2, r1
 80204fe:	fb08 f000 	mul.w	r0, r8, r0
 8020502:	b292      	uxth	r2, r2
 8020504:	fb02 000e 	mla	r0, r2, lr, r0
 8020508:	fb01 0004 	mla	r0, r1, r4, r0
 802050c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802050e:	fb09 0004 	mla	r0, r9, r4, r0
 8020512:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020516:	2800      	cmp	r0, #0
 8020518:	f000 80fa 	beq.w	8020710 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802051c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020520:	d01b      	beq.n	802055a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8020522:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020526:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802052a:	fb0e fa0a 	mul.w	sl, lr, sl
 802052e:	fb0e fe03 	mul.w	lr, lr, r3
 8020532:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020536:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802053a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802053e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020542:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020546:	4453      	add	r3, sl
 8020548:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802054c:	0a1b      	lsrs	r3, r3, #8
 802054e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020552:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020556:	ea43 030c 	orr.w	r3, r3, ip
 802055a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802055c:	2cff      	cmp	r4, #255	; 0xff
 802055e:	d021      	beq.n	80205a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8020560:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020562:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020566:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020568:	fb04 fb0b 	mul.w	fp, r4, fp
 802056c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802056e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020572:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020574:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020578:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802057c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020580:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020584:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020588:	44de      	add	lr, fp
 802058a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802058e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020592:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020596:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802059a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802059e:	ea4e 040a 	orr.w	r4, lr, sl
 80205a2:	940e      	str	r4, [sp, #56]	; 0x38
 80205a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80205a6:	2cff      	cmp	r4, #255	; 0xff
 80205a8:	d021      	beq.n	80205ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80205aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80205ac:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80205b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80205b2:	fb04 fb0b 	mul.w	fp, r4, fp
 80205b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80205b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80205bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80205be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80205c2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80205c6:	fb04 fa0a 	mul.w	sl, r4, sl
 80205ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80205ce:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80205d2:	44de      	add	lr, fp
 80205d4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80205d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80205dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80205e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80205e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80205e8:	ea4e 040a 	orr.w	r4, lr, sl
 80205ec:	940a      	str	r4, [sp, #40]	; 0x28
 80205ee:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80205f0:	2cff      	cmp	r4, #255	; 0xff
 80205f2:	d021      	beq.n	8020638 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80205f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80205f6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80205fa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80205fc:	fb04 fb0b 	mul.w	fp, r4, fp
 8020600:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020602:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020606:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020608:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802060c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020610:	fb04 fa0a 	mul.w	sl, r4, sl
 8020614:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020618:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802061c:	44de      	add	lr, fp
 802061e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020622:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020626:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802062a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802062e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020632:	ea4e 040a 	orr.w	r4, lr, sl
 8020636:	940f      	str	r4, [sp, #60]	; 0x3c
 8020638:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802063a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802063e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020642:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020646:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020648:	fb08 fc0c 	mul.w	ip, r8, ip
 802064c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020650:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020654:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020656:	fb01 cc0e 	mla	ip, r1, lr, ip
 802065a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802065e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020660:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020664:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020668:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802066a:	fb08 f80e 	mul.w	r8, r8, lr
 802066e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020672:	fb02 8303 	mla	r3, r2, r3, r8
 8020676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020678:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802067c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020680:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020682:	fb01 330a 	mla	r3, r1, sl, r3
 8020686:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802068a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802068c:	fb09 3901 	mla	r9, r9, r1, r3
 8020690:	883b      	ldrh	r3, [r7, #0]
 8020692:	4342      	muls	r2, r0
 8020694:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020698:	1c50      	adds	r0, r2, #1
 802069a:	1219      	asrs	r1, r3, #8
 802069c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80206a0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80206a4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80206a8:	ea4c 0c09 	orr.w	ip, ip, r9
 80206ac:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80206b0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80206b4:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80206b8:	b2c0      	uxtb	r0, r0
 80206ba:	fb12 f204 	smulbb	r2, r2, r4
 80206be:	fa5f fc8c 	uxtb.w	ip, ip
 80206c2:	fb1e fe04 	smulbb	lr, lr, r4
 80206c6:	fb01 2100 	mla	r1, r1, r0, r2
 80206ca:	10da      	asrs	r2, r3, #3
 80206cc:	fb1c fc04 	smulbb	ip, ip, r4
 80206d0:	00db      	lsls	r3, r3, #3
 80206d2:	b289      	uxth	r1, r1
 80206d4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80206d8:	b2db      	uxtb	r3, r3
 80206da:	fb02 e200 	mla	r2, r2, r0, lr
 80206de:	fb03 c300 	mla	r3, r3, r0, ip
 80206e2:	b292      	uxth	r2, r2
 80206e4:	fa1f fc83 	uxth.w	ip, r3
 80206e8:	1c4b      	adds	r3, r1, #1
 80206ea:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80206ee:	f10c 0301 	add.w	r3, ip, #1
 80206f2:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80206f6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80206fa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80206fe:	430b      	orrs	r3, r1
 8020700:	1c51      	adds	r1, r2, #1
 8020702:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020706:	0952      	lsrs	r2, r2, #5
 8020708:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802070c:	4313      	orrs	r3, r2
 802070e:	803b      	strh	r3, [r7, #0]
 8020710:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020712:	3702      	adds	r7, #2
 8020714:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020716:	441a      	add	r2, r3
 8020718:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802071a:	441d      	add	r5, r3
 802071c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802071e:	9231      	str	r2, [sp, #196]	; 0xc4
 8020720:	3b01      	subs	r3, #1
 8020722:	931a      	str	r3, [sp, #104]	; 0x68
 8020724:	e694      	b.n	8020450 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8020726:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020728:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802072a:	441c      	add	r4, r3
 802072c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802072e:	441d      	add	r5, r3
 8020730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020732:	9431      	str	r4, [sp, #196]	; 0xc4
 8020734:	3b01      	subs	r3, #1
 8020736:	9309      	str	r3, [sp, #36]	; 0x24
 8020738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802073a:	3302      	adds	r3, #2
 802073c:	930c      	str	r3, [sp, #48]	; 0x30
 802073e:	e667      	b.n	8020410 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020740:	d024      	beq.n	802078c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8020742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020744:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8020746:	3b01      	subs	r3, #1
 8020748:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802074a:	fb00 4003 	mla	r0, r0, r3, r4
 802074e:	1400      	asrs	r0, r0, #16
 8020750:	f53f ae7b 	bmi.w	802044a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020754:	3901      	subs	r1, #1
 8020756:	4288      	cmp	r0, r1
 8020758:	f6bf ae77 	bge.w	802044a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802075c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 802075e:	fb01 5303 	mla	r3, r1, r3, r5
 8020762:	141b      	asrs	r3, r3, #16
 8020764:	f53f ae71 	bmi.w	802044a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020768:	3a01      	subs	r2, #1
 802076a:	4293      	cmp	r3, r2
 802076c:	f6bf ae6d 	bge.w	802044a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020770:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020774:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8020778:	f1bb 0f00 	cmp.w	fp, #0
 802077c:	dc70      	bgt.n	8020860 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 802077e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020780:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020784:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020786:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802078a:	930c      	str	r3, [sp, #48]	; 0x30
 802078c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802078e:	2b00      	cmp	r3, #0
 8020790:	f340 81be 	ble.w	8020b10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8020794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020798:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802079a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802079e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80207a2:	eef0 6a48 	vmov.f32	s13, s16
 80207a6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80207aa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80207ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80207b2:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 80207b6:	eef0 6a68 	vmov.f32	s13, s17
 80207ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80207be:	ee16 5a90 	vmov	r5, s13
 80207c2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80207c6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80207ca:	ee37 8a48 	vsub.f32	s16, s14, s16
 80207ce:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80207d2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80207d6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80207da:	ee18 2a10 	vmov	r2, s16
 80207de:	eeb0 8a47 	vmov.f32	s16, s14
 80207e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80207e6:	ee18 2a90 	vmov	r2, s17
 80207ea:	9333      	str	r3, [sp, #204]	; 0xcc
 80207ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80207ee:	eef0 8a67 	vmov.f32	s17, s15
 80207f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80207f6:	9334      	str	r3, [sp, #208]	; 0xd0
 80207f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80207fa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80207fc:	3b01      	subs	r3, #1
 80207fe:	9319      	str	r3, [sp, #100]	; 0x64
 8020800:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020802:	bf08      	it	eq
 8020804:	4613      	moveq	r3, r2
 8020806:	9309      	str	r3, [sp, #36]	; 0x24
 8020808:	e5f4      	b.n	80203f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802080a:	2900      	cmp	r1, #0
 802080c:	f43f ae66 	beq.w	80204dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020810:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020814:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020818:	900a      	str	r0, [sp, #40]	; 0x28
 802081a:	0e00      	lsrs	r0, r0, #24
 802081c:	9013      	str	r0, [sp, #76]	; 0x4c
 802081e:	e65d      	b.n	80204dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020820:	f113 0801 	adds.w	r8, r3, #1
 8020824:	f53f af74 	bmi.w	8020710 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020828:	4540      	cmp	r0, r8
 802082a:	f6ff af71 	blt.w	8020710 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802082e:	f11c 0801 	adds.w	r8, ip, #1
 8020832:	f53f af6d 	bmi.w	8020710 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020836:	45c6      	cmp	lr, r8
 8020838:	f6ff af6a 	blt.w	8020710 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802083c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802083e:	b200      	sxth	r0, r0
 8020840:	9302      	str	r3, [sp, #8]
 8020842:	fa0f f38e 	sxth.w	r3, lr
 8020846:	9000      	str	r0, [sp, #0]
 8020848:	9301      	str	r3, [sp, #4]
 802084a:	4633      	mov	r3, r6
 802084c:	981d      	ldr	r0, [sp, #116]	; 0x74
 802084e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020852:	e9cd c203 	strd	ip, r2, [sp, #12]
 8020856:	4639      	mov	r1, r7
 8020858:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802085a:	f7ff fc33 	bl	80200c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 802085e:	e757      	b.n	8020710 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020860:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020862:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020866:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8020868:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802086c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802086e:	1427      	asrs	r7, r4, #16
 8020870:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020872:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020876:	142b      	asrs	r3, r5, #16
 8020878:	fb01 7303 	mla	r3, r1, r3, r7
 802087c:	18e7      	adds	r7, r4, r3
 802087e:	5ce3      	ldrb	r3, [r4, r3]
 8020880:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020884:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020888:	2a00      	cmp	r2, #0
 802088a:	f000 8137 	beq.w	8020afc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 802088e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020892:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020896:	9410      	str	r4, [sp, #64]	; 0x40
 8020898:	0e24      	lsrs	r4, r4, #24
 802089a:	9417      	str	r4, [sp, #92]	; 0x5c
 802089c:	b170      	cbz	r0, 80208bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 802089e:	eb07 0e01 	add.w	lr, r7, r1
 80208a2:	5c79      	ldrb	r1, [r7, r1]
 80208a4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80208a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80208aa:	0e09      	lsrs	r1, r1, #24
 80208ac:	9114      	str	r1, [sp, #80]	; 0x50
 80208ae:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80208b2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80208b6:	9111      	str	r1, [sp, #68]	; 0x44
 80208b8:	0e09      	lsrs	r1, r1, #24
 80208ba:	9118      	str	r1, [sp, #96]	; 0x60
 80208bc:	b292      	uxth	r2, r2
 80208be:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80208c0:	b280      	uxth	r0, r0
 80208c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80208c4:	fb02 f800 	mul.w	r8, r2, r0
 80208c8:	0112      	lsls	r2, r2, #4
 80208ca:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80208ce:	eba2 0e08 	sub.w	lr, r2, r8
 80208d2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80208d6:	b280      	uxth	r0, r0
 80208d8:	fa1f fe8e 	uxth.w	lr, lr
 80208dc:	1a12      	subs	r2, r2, r0
 80208de:	fb0e f101 	mul.w	r1, lr, r1
 80208e2:	b292      	uxth	r2, r2
 80208e4:	fb02 110c 	mla	r1, r2, ip, r1
 80208e8:	fb00 1104 	mla	r1, r0, r4, r1
 80208ec:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80208ee:	fb08 1104 	mla	r1, r8, r4, r1
 80208f2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80208f6:	2900      	cmp	r1, #0
 80208f8:	f000 80f5 	beq.w	8020ae6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 80208fc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020900:	d019      	beq.n	8020936 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8020902:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020906:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802090a:	fb0c fa0a 	mul.w	sl, ip, sl
 802090e:	fb0c fc03 	mul.w	ip, ip, r3
 8020912:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020916:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802091a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802091e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020922:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020926:	4453      	add	r3, sl
 8020928:	0a3f      	lsrs	r7, r7, #8
 802092a:	0a1b      	lsrs	r3, r3, #8
 802092c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020930:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020934:	433b      	orrs	r3, r7
 8020936:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020938:	2cff      	cmp	r4, #255	; 0xff
 802093a:	d020      	beq.n	802097e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 802093c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802093e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020942:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020944:	4367      	muls	r7, r4
 8020946:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020948:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802094c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020950:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020952:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020956:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802095a:	fb04 fa0a 	mul.w	sl, r4, sl
 802095e:	44bc      	add	ip, r7
 8020960:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020964:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020968:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802096c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020970:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020974:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020978:	ea4c 040a 	orr.w	r4, ip, sl
 802097c:	9410      	str	r4, [sp, #64]	; 0x40
 802097e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020980:	2cff      	cmp	r4, #255	; 0xff
 8020982:	d020      	beq.n	80209c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8020984:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020986:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802098a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802098c:	4367      	muls	r7, r4
 802098e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020990:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020994:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020998:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802099a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802099e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80209a2:	fb04 fa0a 	mul.w	sl, r4, sl
 80209a6:	44bc      	add	ip, r7
 80209a8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80209ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209b0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80209b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80209b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80209c0:	ea4c 040a 	orr.w	r4, ip, sl
 80209c4:	940b      	str	r4, [sp, #44]	; 0x2c
 80209c6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80209c8:	2cff      	cmp	r4, #255	; 0xff
 80209ca:	d020      	beq.n	8020a0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 80209cc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80209ce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80209d2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80209d4:	4367      	muls	r7, r4
 80209d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80209d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80209dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80209e0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80209e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80209e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80209ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80209ee:	44bc      	add	ip, r7
 80209f0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80209f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80209fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a04:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a08:	ea4c 040a 	orr.w	r4, ip, sl
 8020a0c:	9411      	str	r4, [sp, #68]	; 0x44
 8020a0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020a10:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020a14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a18:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020a1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a1e:	fb0e f707 	mul.w	r7, lr, r7
 8020a22:	fb02 770c 	mla	r7, r2, ip, r7
 8020a26:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020a2a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020a2c:	fb00 770c 	mla	r7, r0, ip, r7
 8020a30:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020a34:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020a36:	fb08 770c 	mla	r7, r8, ip, r7
 8020a3a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020a3e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020a40:	fb0e fe0c 	mul.w	lr, lr, ip
 8020a44:	0a3f      	lsrs	r7, r7, #8
 8020a46:	fb02 e303 	mla	r3, r2, r3, lr
 8020a4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020a4c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020a50:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020a54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020a56:	fb00 330a 	mla	r3, r0, sl, r3
 8020a5a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020a5e:	f8b9 0000 	ldrh.w	r0, [r9]
 8020a62:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a68:	1202      	asrs	r2, r0, #8
 8020a6a:	434b      	muls	r3, r1
 8020a6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a70:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020a74:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020a78:	1c59      	adds	r1, r3, #1
 8020a7a:	ea47 070c 	orr.w	r7, r7, ip
 8020a7e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020a82:	0c3b      	lsrs	r3, r7, #16
 8020a84:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020a88:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020a8c:	b2ff      	uxtb	r7, r7
 8020a8e:	fb13 f304 	smulbb	r3, r3, r4
 8020a92:	b2c9      	uxtb	r1, r1
 8020a94:	fb1c fc04 	smulbb	ip, ip, r4
 8020a98:	fb02 3201 	mla	r2, r2, r1, r3
 8020a9c:	10c3      	asrs	r3, r0, #3
 8020a9e:	fb17 f704 	smulbb	r7, r7, r4
 8020aa2:	00c0      	lsls	r0, r0, #3
 8020aa4:	b292      	uxth	r2, r2
 8020aa6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020aaa:	b2c0      	uxtb	r0, r0
 8020aac:	fb03 c301 	mla	r3, r3, r1, ip
 8020ab0:	f102 0c01 	add.w	ip, r2, #1
 8020ab4:	fb00 7001 	mla	r0, r0, r1, r7
 8020ab8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020abc:	b280      	uxth	r0, r0
 8020abe:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8020ac2:	b29b      	uxth	r3, r3
 8020ac4:	1c42      	adds	r2, r0, #1
 8020ac6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020aca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020ace:	ea42 020c 	orr.w	r2, r2, ip
 8020ad2:	f103 0c01 	add.w	ip, r3, #1
 8020ad6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020ada:	095b      	lsrs	r3, r3, #5
 8020adc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020ae0:	431a      	orrs	r2, r3
 8020ae2:	f8a9 2000 	strh.w	r2, [r9]
 8020ae6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020ae8:	f109 0902 	add.w	r9, r9, #2
 8020aec:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020aee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020af2:	441a      	add	r2, r3
 8020af4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020af6:	9231      	str	r2, [sp, #196]	; 0xc4
 8020af8:	441d      	add	r5, r3
 8020afa:	e63d      	b.n	8020778 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8020afc:	2800      	cmp	r0, #0
 8020afe:	f43f aedd 	beq.w	80208bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8020b02:	5c79      	ldrb	r1, [r7, r1]
 8020b04:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020b08:	910b      	str	r1, [sp, #44]	; 0x2c
 8020b0a:	0e09      	lsrs	r1, r1, #24
 8020b0c:	9114      	str	r1, [sp, #80]	; 0x50
 8020b0e:	e6d5      	b.n	80208bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8020b10:	b01f      	add	sp, #124	; 0x7c
 8020b12:	ecbd 8b08 	vpop	{d8-d11}
 8020b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020b1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8020b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b20:	880e      	ldrh	r6, [r1, #0]
 8020b22:	b085      	sub	sp, #20
 8020b24:	4691      	mov	r9, r2
 8020b26:	ea4f 2826 	mov.w	r8, r6, asr #8
 8020b2a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020b2e:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8020b32:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 8020b36:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8020b3a:	00f6      	lsls	r6, r6, #3
 8020b3c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8020b40:	9200      	str	r2, [sp, #0]
 8020b42:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 8020b46:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8020b4a:	9201      	str	r2, [sp, #4]
 8020b4c:	b2f2      	uxtb	r2, r6
 8020b4e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8020b52:	9202      	str	r2, [sp, #8]
 8020b54:	fb04 560c 	mla	r6, r4, ip, r5
 8020b58:	2c00      	cmp	r4, #0
 8020b5a:	eb09 0806 	add.w	r8, r9, r6
 8020b5e:	db3f      	blt.n	8020be0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8020b60:	45a6      	cmp	lr, r4
 8020b62:	dd3d      	ble.n	8020be0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8020b64:	2d00      	cmp	r5, #0
 8020b66:	db39      	blt.n	8020bdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8020b68:	45ac      	cmp	ip, r5
 8020b6a:	dd37      	ble.n	8020bdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8020b6c:	f819 2006 	ldrb.w	r2, [r9, r6]
 8020b70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020b74:	1c6e      	adds	r6, r5, #1
 8020b76:	d436      	bmi.n	8020be6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8020b78:	45b4      	cmp	ip, r6
 8020b7a:	dd34      	ble.n	8020be6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8020b7c:	b3a8      	cbz	r0, 8020bea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 8020b7e:	f898 6001 	ldrb.w	r6, [r8, #1]
 8020b82:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8020b86:	3401      	adds	r4, #1
 8020b88:	d433      	bmi.n	8020bf2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8020b8a:	45a6      	cmp	lr, r4
 8020b8c:	dd31      	ble.n	8020bf2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8020b8e:	b39f      	cbz	r7, 8020bf8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8020b90:	2d00      	cmp	r5, #0
 8020b92:	eb08 0e0c 	add.w	lr, r8, ip
 8020b96:	db2a      	blt.n	8020bee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8020b98:	45ac      	cmp	ip, r5
 8020b9a:	dd28      	ble.n	8020bee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8020b9c:	f818 400c 	ldrb.w	r4, [r8, ip]
 8020ba0:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8020ba4:	3501      	adds	r5, #1
 8020ba6:	d42a      	bmi.n	8020bfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8020ba8:	45ac      	cmp	ip, r5
 8020baa:	dd28      	ble.n	8020bfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8020bac:	b348      	cbz	r0, 8020c02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8020bae:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8020bb2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8020bb6:	280f      	cmp	r0, #15
 8020bb8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020bbc:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020bc0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020bc4:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8020bc8:	d801      	bhi.n	8020bce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 8020bca:	2f0f      	cmp	r7, #15
 8020bcc:	d91b      	bls.n	8020c06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 8020bce:	4b7e      	ldr	r3, [pc, #504]	; (8020dc8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8020bd0:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8020bd4:	4a7d      	ldr	r2, [pc, #500]	; (8020dcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8020bd6:	487e      	ldr	r0, [pc, #504]	; (8020dd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8020bd8:	f004 ffcc 	bl	8025b74 <__assert_func>
 8020bdc:	2200      	movs	r2, #0
 8020bde:	e7c9      	b.n	8020b74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8020be0:	2600      	movs	r6, #0
 8020be2:	4632      	mov	r2, r6
 8020be4:	e7cf      	b.n	8020b86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8020be6:	2600      	movs	r6, #0
 8020be8:	e7cd      	b.n	8020b86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8020bea:	4606      	mov	r6, r0
 8020bec:	e7cb      	b.n	8020b86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8020bee:	2400      	movs	r4, #0
 8020bf0:	e7d8      	b.n	8020ba4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8020bf2:	2300      	movs	r3, #0
 8020bf4:	461c      	mov	r4, r3
 8020bf6:	e7de      	b.n	8020bb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8020bf8:	463b      	mov	r3, r7
 8020bfa:	463c      	mov	r4, r7
 8020bfc:	e7db      	b.n	8020bb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8020bfe:	2300      	movs	r3, #0
 8020c00:	e7d9      	b.n	8020bb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8020c02:	4603      	mov	r3, r0
 8020c04:	e7d7      	b.n	8020bb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8020c06:	b280      	uxth	r0, r0
 8020c08:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020c0c:	b2bf      	uxth	r7, r7
 8020c0e:	fb00 fe07 	mul.w	lr, r0, r7
 8020c12:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8020c16:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020c1a:	eba0 0c0e 	sub.w	ip, r0, lr
 8020c1e:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8020c22:	b2bf      	uxth	r7, r7
 8020c24:	fa1f fc8c 	uxth.w	ip, ip
 8020c28:	eba5 0507 	sub.w	r5, r5, r7
 8020c2c:	fb0c f00a 	mul.w	r0, ip, sl
 8020c30:	b2ad      	uxth	r5, r5
 8020c32:	fb05 000b 	mla	r0, r5, fp, r0
 8020c36:	fb07 0009 	mla	r0, r7, r9, r0
 8020c3a:	fb0e 0008 	mla	r0, lr, r8, r0
 8020c3e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020c42:	9003      	str	r0, [sp, #12]
 8020c44:	d018      	beq.n	8020c78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 8020c46:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8020c4a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020c4e:	fb0b f000 	mul.w	r0, fp, r0
 8020c52:	fb0b fb02 	mul.w	fp, fp, r2
 8020c56:	0a02      	lsrs	r2, r0, #8
 8020c58:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020c5c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020c60:	4402      	add	r2, r0
 8020c62:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8020c66:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020c6a:	0a12      	lsrs	r2, r2, #8
 8020c6c:	0a00      	lsrs	r0, r0, #8
 8020c6e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020c72:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020c76:	4302      	orrs	r2, r0
 8020c78:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020c7c:	d019      	beq.n	8020cb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 8020c7e:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020c82:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020c86:	fb0a fb0b 	mul.w	fp, sl, fp
 8020c8a:	fb0a fa06 	mul.w	sl, sl, r6
 8020c8e:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020c92:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020c96:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020c9a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020c9e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8020ca2:	445e      	add	r6, fp
 8020ca4:	0a00      	lsrs	r0, r0, #8
 8020ca6:	0a36      	lsrs	r6, r6, #8
 8020ca8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020cac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020cb0:	4306      	orrs	r6, r0
 8020cb2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020cb6:	d019      	beq.n	8020cec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 8020cb8:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020cbc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020cc0:	fb09 fa0a 	mul.w	sl, r9, sl
 8020cc4:	fb09 f904 	mul.w	r9, r9, r4
 8020cc8:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020ccc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020cd0:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8020cd4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020cd8:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8020cdc:	4454      	add	r4, sl
 8020cde:	0a00      	lsrs	r0, r0, #8
 8020ce0:	0a24      	lsrs	r4, r4, #8
 8020ce2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020ce6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020cea:	4304      	orrs	r4, r0
 8020cec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020cf0:	d019      	beq.n	8020d26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 8020cf2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8020cf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020cfa:	fb08 f909 	mul.w	r9, r8, r9
 8020cfe:	fb08 f803 	mul.w	r8, r8, r3
 8020d02:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8020d06:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020d0a:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8020d0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d12:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8020d16:	444b      	add	r3, r9
 8020d18:	0a00      	lsrs	r0, r0, #8
 8020d1a:	0a1b      	lsrs	r3, r3, #8
 8020d1c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020d20:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d24:	4303      	orrs	r3, r0
 8020d26:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020d2a:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8020d2e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020d32:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020d36:	fb0c f808 	mul.w	r8, ip, r8
 8020d3a:	fb0c f606 	mul.w	r6, ip, r6
 8020d3e:	fb05 8800 	mla	r8, r5, r0, r8
 8020d42:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8020d46:	fb05 6202 	mla	r2, r5, r2, r6
 8020d4a:	9d00      	ldr	r5, [sp, #0]
 8020d4c:	fb07 8800 	mla	r8, r7, r0, r8
 8020d50:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8020d54:	fb0e 8000 	mla	r0, lr, r0, r8
 8020d58:	0a00      	lsrs	r0, r0, #8
 8020d5a:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8020d5e:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8020d62:	fb07 2700 	mla	r7, r7, r0, r2
 8020d66:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8020d6a:	9b03      	ldr	r3, [sp, #12]
 8020d6c:	fb0e 7000 	mla	r0, lr, r0, r7
 8020d70:	9a02      	ldr	r2, [sp, #8]
 8020d72:	43dc      	mvns	r4, r3
 8020d74:	9b01      	ldr	r3, [sp, #4]
 8020d76:	0a00      	lsrs	r0, r0, #8
 8020d78:	b2e4      	uxtb	r4, r4
 8020d7a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020d7e:	4363      	muls	r3, r4
 8020d80:	4365      	muls	r5, r4
 8020d82:	ea48 0000 	orr.w	r0, r8, r0
 8020d86:	4362      	muls	r2, r4
 8020d88:	1c5e      	adds	r6, r3, #1
 8020d8a:	4614      	mov	r4, r2
 8020d8c:	1c6a      	adds	r2, r5, #1
 8020d8e:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8020d92:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8020d96:	0a03      	lsrs	r3, r0, #8
 8020d98:	0c02      	lsrs	r2, r0, #16
 8020d9a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8020d9e:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8020da2:	00db      	lsls	r3, r3, #3
 8020da4:	0212      	lsls	r2, r2, #8
 8020da6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020daa:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8020dae:	4313      	orrs	r3, r2
 8020db0:	1c62      	adds	r2, r4, #1
 8020db2:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8020db6:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020dba:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020dbe:	4318      	orrs	r0, r3
 8020dc0:	8008      	strh	r0, [r1, #0]
 8020dc2:	b005      	add	sp, #20
 8020dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dc8:	0802a0cd 	.word	0x0802a0cd
 8020dcc:	0802a69a 	.word	0x0802a69a
 8020dd0:	0802a151 	.word	0x0802a151

08020dd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dd8:	ed2d 8b08 	vpush	{d8-d11}
 8020ddc:	b09b      	sub	sp, #108	; 0x6c
 8020dde:	eeb0 aa40 	vmov.f32	s20, s0
 8020de2:	eef0 9a60 	vmov.f32	s19, s1
 8020de6:	9218      	str	r2, [sp, #96]	; 0x60
 8020de8:	eeb0 9a41 	vmov.f32	s18, s2
 8020dec:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020dee:	eeb0 8a62 	vmov.f32	s16, s5
 8020df2:	9019      	str	r0, [sp, #100]	; 0x64
 8020df4:	eef0 8a43 	vmov.f32	s17, s6
 8020df8:	6850      	ldr	r0, [r2, #4]
 8020dfa:	eef0 ba44 	vmov.f32	s23, s8
 8020dfe:	9116      	str	r1, [sp, #88]	; 0x58
 8020e00:	eeb0 ba64 	vmov.f32	s22, s9
 8020e04:	9307      	str	r3, [sp, #28]
 8020e06:	eef0 aa45 	vmov.f32	s21, s10
 8020e0a:	6812      	ldr	r2, [r2, #0]
 8020e0c:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8020e0e:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8020e12:	fb00 1303 	mla	r3, r0, r3, r1
 8020e16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8020e1c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020e1e:	681b      	ldr	r3, [r3, #0]
 8020e20:	930f      	str	r3, [sp, #60]	; 0x3c
 8020e22:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020e24:	685e      	ldr	r6, [r3, #4]
 8020e26:	3604      	adds	r6, #4
 8020e28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	dc03      	bgt.n	8020e36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020e2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	f340 8373 	ble.w	802151c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8020e36:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020e38:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020e3c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020e40:	1e48      	subs	r0, r1, #1
 8020e42:	1e57      	subs	r7, r2, #1
 8020e44:	9b07      	ldr	r3, [sp, #28]
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	f340 818f 	ble.w	802116a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8020e4c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8020e4e:	142b      	asrs	r3, r5, #16
 8020e50:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020e54:	d406      	bmi.n	8020e64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020e56:	4584      	cmp	ip, r0
 8020e58:	da04      	bge.n	8020e64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	db02      	blt.n	8020e64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020e5e:	42bb      	cmp	r3, r7
 8020e60:	f2c0 8184 	blt.w	802116c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8020e64:	f11c 0c01 	adds.w	ip, ip, #1
 8020e68:	f100 8172 	bmi.w	8021150 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020e6c:	4561      	cmp	r1, ip
 8020e6e:	f2c0 816f 	blt.w	8021150 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020e72:	3301      	adds	r3, #1
 8020e74:	f100 816c 	bmi.w	8021150 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020e78:	429a      	cmp	r2, r3
 8020e7a:	f2c0 8169 	blt.w	8021150 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020e7e:	9b07      	ldr	r3, [sp, #28]
 8020e80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020e82:	9317      	str	r3, [sp, #92]	; 0x5c
 8020e84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	f340 818e 	ble.w	80211a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8020e8c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020e8e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020e92:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020e96:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020e9a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020e9c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020ea0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020ea2:	141b      	asrs	r3, r3, #16
 8020ea4:	f100 81d1 	bmi.w	802124a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8020ea8:	f101 38ff 	add.w	r8, r1, #4294967295
 8020eac:	4543      	cmp	r3, r8
 8020eae:	f280 81cc 	bge.w	802124a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8020eb2:	f1bc 0f00 	cmp.w	ip, #0
 8020eb6:	f2c0 81c8 	blt.w	802124a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8020eba:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020ebe:	45c4      	cmp	ip, r8
 8020ec0:	f280 81c3 	bge.w	802124a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8020ec4:	b209      	sxth	r1, r1
 8020ec6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020ec8:	fb0c 3301 	mla	r3, ip, r1, r3
 8020ecc:	eb04 0803 	add.w	r8, r4, r3
 8020ed0:	5ce3      	ldrb	r3, [r4, r3]
 8020ed2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020ed6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020eda:	2a00      	cmp	r2, #0
 8020edc:	f000 81aa 	beq.w	8021234 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8020ee0:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020ee4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020ee8:	940b      	str	r4, [sp, #44]	; 0x2c
 8020eea:	0e24      	lsrs	r4, r4, #24
 8020eec:	9412      	str	r4, [sp, #72]	; 0x48
 8020eee:	b178      	cbz	r0, 8020f10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8020ef0:	eb08 0c01 	add.w	ip, r8, r1
 8020ef4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020ef8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020efc:	9108      	str	r1, [sp, #32]
 8020efe:	0e09      	lsrs	r1, r1, #24
 8020f00:	9110      	str	r1, [sp, #64]	; 0x40
 8020f02:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8020f06:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020f0a:	910c      	str	r1, [sp, #48]	; 0x30
 8020f0c:	0e09      	lsrs	r1, r1, #24
 8020f0e:	9113      	str	r1, [sp, #76]	; 0x4c
 8020f10:	b292      	uxth	r2, r2
 8020f12:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020f14:	b280      	uxth	r0, r0
 8020f16:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020f18:	fb02 f900 	mul.w	r9, r2, r0
 8020f1c:	0112      	lsls	r2, r2, #4
 8020f1e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020f22:	eba2 0809 	sub.w	r8, r2, r9
 8020f26:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020f2a:	b280      	uxth	r0, r0
 8020f2c:	fa1f f888 	uxth.w	r8, r8
 8020f30:	1a12      	subs	r2, r2, r0
 8020f32:	fb08 f101 	mul.w	r1, r8, r1
 8020f36:	b292      	uxth	r2, r2
 8020f38:	fb02 110e 	mla	r1, r2, lr, r1
 8020f3c:	fb00 1104 	mla	r1, r0, r4, r1
 8020f40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020f42:	fb09 1104 	mla	r1, r9, r4, r1
 8020f46:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020f4a:	2900      	cmp	r1, #0
 8020f4c:	f000 80f5 	beq.w	802113a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8020f50:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020f54:	d01b      	beq.n	8020f8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020f56:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020f5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f5e:	fb0e fa0a 	mul.w	sl, lr, sl
 8020f62:	fb0e fe03 	mul.w	lr, lr, r3
 8020f66:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020f6a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020f6e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020f72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f76:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020f7a:	4453      	add	r3, sl
 8020f7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f80:	0a1b      	lsrs	r3, r3, #8
 8020f82:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020f86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f8a:	ea43 030c 	orr.w	r3, r3, ip
 8020f8e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020f90:	2cff      	cmp	r4, #255	; 0xff
 8020f92:	d021      	beq.n	8020fd8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020f94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020f96:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020f9a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020f9c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020fa0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020fa2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020fa6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020fa8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020fac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020fb0:	fb04 fa0a 	mul.w	sl, r4, sl
 8020fb4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020fb8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020fbc:	44de      	add	lr, fp
 8020fbe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020fc2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fc6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020fce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020fd2:	ea4e 040a 	orr.w	r4, lr, sl
 8020fd6:	940b      	str	r4, [sp, #44]	; 0x2c
 8020fd8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020fda:	2cff      	cmp	r4, #255	; 0xff
 8020fdc:	d021      	beq.n	8021022 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8020fde:	9c08      	ldr	r4, [sp, #32]
 8020fe0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020fe4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020fe6:	fb04 fb0b 	mul.w	fp, r4, fp
 8020fea:	9c08      	ldr	r4, [sp, #32]
 8020fec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020ff0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020ff2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020ff6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020ffa:	fb04 fa0a 	mul.w	sl, r4, sl
 8020ffe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021002:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021006:	44de      	add	lr, fp
 8021008:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802100c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021010:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021014:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021018:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802101c:	ea4e 040a 	orr.w	r4, lr, sl
 8021020:	9408      	str	r4, [sp, #32]
 8021022:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021024:	2cff      	cmp	r4, #255	; 0xff
 8021026:	d021      	beq.n	802106c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8021028:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802102a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802102e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021030:	fb04 fb0b 	mul.w	fp, r4, fp
 8021034:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021036:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802103a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802103c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021040:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021044:	fb04 fa0a 	mul.w	sl, r4, sl
 8021048:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802104c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021050:	44de      	add	lr, fp
 8021052:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021056:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802105a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802105e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021062:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021066:	ea4e 040a 	orr.w	r4, lr, sl
 802106a:	940c      	str	r4, [sp, #48]	; 0x30
 802106c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802106e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021072:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021076:	43c9      	mvns	r1, r1
 8021078:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802107c:	9c08      	ldr	r4, [sp, #32]
 802107e:	fb08 fc0c 	mul.w	ip, r8, ip
 8021082:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021086:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802108a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802108c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021090:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021094:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021096:	fb09 cc0e 	mla	ip, r9, lr, ip
 802109a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802109e:	fb08 f80e 	mul.w	r8, r8, lr
 80210a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210a6:	fa5f fe81 	uxtb.w	lr, r1
 80210aa:	fb02 8303 	mla	r3, r2, r3, r8
 80210ae:	9a08      	ldr	r2, [sp, #32]
 80210b0:	f8b7 8000 	ldrh.w	r8, [r7]
 80210b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80210b8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80210bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80210be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80210c2:	fb00 330a 	mla	r3, r0, sl, r3
 80210c6:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80210ca:	ea4f 2228 	mov.w	r2, r8, asr #8
 80210ce:	fb09 3900 	mla	r9, r9, r0, r3
 80210d2:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80210d6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80210da:	b2c9      	uxtb	r1, r1
 80210dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80210e0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80210e4:	fb02 f20e 	mul.w	r2, r2, lr
 80210e8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80210ec:	fb00 f00e 	mul.w	r0, r0, lr
 80210f0:	1c53      	adds	r3, r2, #1
 80210f2:	fb01 f10e 	mul.w	r1, r1, lr
 80210f6:	ea4c 0c09 	orr.w	ip, ip, r9
 80210fa:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80210fe:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8021102:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021106:	4a60      	ldr	r2, [pc, #384]	; (8021288 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8021108:	b2db      	uxtb	r3, r3
 802110a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802110e:	1c43      	adds	r3, r0, #1
 8021110:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021114:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021118:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802111c:	00db      	lsls	r3, r3, #3
 802111e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021122:	4313      	orrs	r3, r2
 8021124:	1c4a      	adds	r2, r1, #1
 8021126:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802112a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802112e:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8021132:	ea4c 0c03 	orr.w	ip, ip, r3
 8021136:	f8a7 c000 	strh.w	ip, [r7]
 802113a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802113c:	3702      	adds	r7, #2
 802113e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021140:	441a      	add	r2, r3
 8021142:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021144:	441d      	add	r5, r3
 8021146:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021148:	922d      	str	r2, [sp, #180]	; 0xb4
 802114a:	3b01      	subs	r3, #1
 802114c:	9317      	str	r3, [sp, #92]	; 0x5c
 802114e:	e699      	b.n	8020e84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021150:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021152:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8021154:	441c      	add	r4, r3
 8021156:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021158:	441d      	add	r5, r3
 802115a:	9b07      	ldr	r3, [sp, #28]
 802115c:	942d      	str	r4, [sp, #180]	; 0xb4
 802115e:	3b01      	subs	r3, #1
 8021160:	9307      	str	r3, [sp, #28]
 8021162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021164:	3302      	adds	r3, #2
 8021166:	930a      	str	r3, [sp, #40]	; 0x28
 8021168:	e66c      	b.n	8020e44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802116a:	d024      	beq.n	80211b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802116c:	9b07      	ldr	r3, [sp, #28]
 802116e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8021170:	3b01      	subs	r3, #1
 8021172:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8021174:	fb00 4003 	mla	r0, r0, r3, r4
 8021178:	1400      	asrs	r0, r0, #16
 802117a:	f53f ae80 	bmi.w	8020e7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802117e:	3901      	subs	r1, #1
 8021180:	4288      	cmp	r0, r1
 8021182:	f6bf ae7c 	bge.w	8020e7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021186:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8021188:	fb01 5303 	mla	r3, r1, r3, r5
 802118c:	141b      	asrs	r3, r3, #16
 802118e:	f53f ae76 	bmi.w	8020e7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021192:	3a01      	subs	r2, #1
 8021194:	4293      	cmp	r3, r2
 8021196:	f6bf ae72 	bge.w	8020e7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802119a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802119e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80211a2:	f1bb 0f00 	cmp.w	fp, #0
 80211a6:	dc71      	bgt.n	802128c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80211a8:	9b07      	ldr	r3, [sp, #28]
 80211aa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80211ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211b0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80211b4:	930a      	str	r3, [sp, #40]	; 0x28
 80211b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80211b8:	2b00      	cmp	r3, #0
 80211ba:	f340 81af 	ble.w	802151c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80211be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80211c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80211c4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80211c8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80211cc:	eef0 6a48 	vmov.f32	s13, s16
 80211d0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80211d4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80211d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211dc:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80211e0:	eef0 6a68 	vmov.f32	s13, s17
 80211e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211e8:	ee16 5a90 	vmov	r5, s13
 80211ec:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80211f0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80211f4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80211f8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80211fc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021200:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021204:	ee18 2a10 	vmov	r2, s16
 8021208:	eeb0 8a47 	vmov.f32	s16, s14
 802120c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021210:	ee18 2a90 	vmov	r2, s17
 8021214:	932f      	str	r3, [sp, #188]	; 0xbc
 8021216:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021218:	eef0 8a67 	vmov.f32	s17, s15
 802121c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021220:	9330      	str	r3, [sp, #192]	; 0xc0
 8021222:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021224:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021226:	3b01      	subs	r3, #1
 8021228:	9316      	str	r3, [sp, #88]	; 0x58
 802122a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802122c:	bf08      	it	eq
 802122e:	4613      	moveq	r3, r2
 8021230:	9307      	str	r3, [sp, #28]
 8021232:	e5f9      	b.n	8020e28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8021234:	2800      	cmp	r0, #0
 8021236:	f43f ae6b 	beq.w	8020f10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802123a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802123e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021242:	9108      	str	r1, [sp, #32]
 8021244:	0e09      	lsrs	r1, r1, #24
 8021246:	9110      	str	r1, [sp, #64]	; 0x40
 8021248:	e662      	b.n	8020f10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802124a:	f113 0801 	adds.w	r8, r3, #1
 802124e:	f53f af74 	bmi.w	802113a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8021252:	4541      	cmp	r1, r8
 8021254:	f6ff af71 	blt.w	802113a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8021258:	f11c 0801 	adds.w	r8, ip, #1
 802125c:	f53f af6d 	bmi.w	802113a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8021260:	45c6      	cmp	lr, r8
 8021262:	f6ff af6a 	blt.w	802113a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8021266:	b209      	sxth	r1, r1
 8021268:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802126c:	fa0f f38e 	sxth.w	r3, lr
 8021270:	9100      	str	r1, [sp, #0]
 8021272:	4639      	mov	r1, r7
 8021274:	9301      	str	r3, [sp, #4]
 8021276:	4633      	mov	r3, r6
 8021278:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802127c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802127e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021280:	f7ff fc4c 	bl	8020b1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8021284:	e759      	b.n	802113a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8021286:	bf00      	nop
 8021288:	fffff800 	.word	0xfffff800
 802128c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802128e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021292:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8021294:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021298:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802129a:	1427      	asrs	r7, r4, #16
 802129c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802129e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80212a2:	142b      	asrs	r3, r5, #16
 80212a4:	fb01 7303 	mla	r3, r1, r3, r7
 80212a8:	18e7      	adds	r7, r4, r3
 80212aa:	5ce3      	ldrb	r3, [r4, r3]
 80212ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80212b0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80212b4:	2a00      	cmp	r2, #0
 80212b6:	f000 8127 	beq.w	8021508 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 80212ba:	f897 e001 	ldrb.w	lr, [r7, #1]
 80212be:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80212c2:	940d      	str	r4, [sp, #52]	; 0x34
 80212c4:	0e24      	lsrs	r4, r4, #24
 80212c6:	9414      	str	r4, [sp, #80]	; 0x50
 80212c8:	b170      	cbz	r0, 80212e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80212ca:	eb07 0e01 	add.w	lr, r7, r1
 80212ce:	5c79      	ldrb	r1, [r7, r1]
 80212d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80212d4:	9109      	str	r1, [sp, #36]	; 0x24
 80212d6:	0e09      	lsrs	r1, r1, #24
 80212d8:	9111      	str	r1, [sp, #68]	; 0x44
 80212da:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80212de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80212e2:	910e      	str	r1, [sp, #56]	; 0x38
 80212e4:	0e09      	lsrs	r1, r1, #24
 80212e6:	9115      	str	r1, [sp, #84]	; 0x54
 80212e8:	b292      	uxth	r2, r2
 80212ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80212ec:	b280      	uxth	r0, r0
 80212ee:	fb02 f800 	mul.w	r8, r2, r0
 80212f2:	0112      	lsls	r2, r2, #4
 80212f4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80212f8:	eba2 0e08 	sub.w	lr, r2, r8
 80212fc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021300:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021302:	b280      	uxth	r0, r0
 8021304:	fa1f fe8e 	uxth.w	lr, lr
 8021308:	1a09      	subs	r1, r1, r0
 802130a:	fb0e f202 	mul.w	r2, lr, r2
 802130e:	b289      	uxth	r1, r1
 8021310:	fb01 220c 	mla	r2, r1, ip, r2
 8021314:	fb00 2204 	mla	r2, r0, r4, r2
 8021318:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802131a:	fb08 2204 	mla	r2, r8, r4, r2
 802131e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021322:	2a00      	cmp	r2, #0
 8021324:	f000 80e5 	beq.w	80214f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8021328:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802132c:	d019      	beq.n	8021362 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 802132e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021332:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021336:	fb0c fa0a 	mul.w	sl, ip, sl
 802133a:	fb0c fc03 	mul.w	ip, ip, r3
 802133e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021342:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021346:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802134a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802134e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021352:	4453      	add	r3, sl
 8021354:	0a3f      	lsrs	r7, r7, #8
 8021356:	0a1b      	lsrs	r3, r3, #8
 8021358:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802135c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021360:	433b      	orrs	r3, r7
 8021362:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021364:	2cff      	cmp	r4, #255	; 0xff
 8021366:	d020      	beq.n	80213aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 8021368:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802136a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802136e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021370:	4367      	muls	r7, r4
 8021372:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021374:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021378:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802137c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802137e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021382:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021386:	fb04 fa0a 	mul.w	sl, r4, sl
 802138a:	44bc      	add	ip, r7
 802138c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021390:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021394:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021398:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802139c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213a4:	ea4c 040a 	orr.w	r4, ip, sl
 80213a8:	940d      	str	r4, [sp, #52]	; 0x34
 80213aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213ac:	2cff      	cmp	r4, #255	; 0xff
 80213ae:	d020      	beq.n	80213f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 80213b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80213b2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80213b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213b8:	4367      	muls	r7, r4
 80213ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80213bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80213c0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80213c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80213ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80213d2:	44bc      	add	ip, r7
 80213d4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80213d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80213e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213ec:	ea4c 040a 	orr.w	r4, ip, sl
 80213f0:	9409      	str	r4, [sp, #36]	; 0x24
 80213f2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80213f4:	2cff      	cmp	r4, #255	; 0xff
 80213f6:	d020      	beq.n	802143a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 80213f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80213fa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80213fe:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021400:	4367      	muls	r7, r4
 8021402:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021404:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021408:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802140c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802140e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021412:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021416:	fb04 fa0a 	mul.w	sl, r4, sl
 802141a:	44bc      	add	ip, r7
 802141c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021420:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021424:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021428:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802142c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021430:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021434:	ea4c 040a 	orr.w	r4, ip, sl
 8021438:	940e      	str	r4, [sp, #56]	; 0x38
 802143a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802143c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021440:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021444:	43d2      	mvns	r2, r2
 8021446:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802144a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802144c:	b2d2      	uxtb	r2, r2
 802144e:	fb0e f707 	mul.w	r7, lr, r7
 8021452:	fb01 770c 	mla	r7, r1, ip, r7
 8021456:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802145a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802145c:	fb00 770c 	mla	r7, r0, ip, r7
 8021460:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021464:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021466:	fb08 770c 	mla	r7, r8, ip, r7
 802146a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802146e:	fb0e fe0c 	mul.w	lr, lr, ip
 8021472:	0a3f      	lsrs	r7, r7, #8
 8021474:	fb01 e303 	mla	r3, r1, r3, lr
 8021478:	9909      	ldr	r1, [sp, #36]	; 0x24
 802147a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802147e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021482:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021484:	fb00 330a 	mla	r3, r0, sl, r3
 8021488:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802148c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8021490:	f8b9 3000 	ldrh.w	r3, [r9]
 8021494:	1218      	asrs	r0, r3, #8
 8021496:	10d9      	asrs	r1, r3, #3
 8021498:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802149c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80214a0:	00db      	lsls	r3, r3, #3
 80214a2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80214a6:	4350      	muls	r0, r2
 80214a8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80214ac:	b2db      	uxtb	r3, r3
 80214ae:	4351      	muls	r1, r2
 80214b0:	ea47 070c 	orr.w	r7, r7, ip
 80214b4:	4353      	muls	r3, r2
 80214b6:	1c42      	adds	r2, r0, #1
 80214b8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80214bc:	0c3a      	lsrs	r2, r7, #16
 80214be:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80214c2:	4a19      	ldr	r2, [pc, #100]	; (8021528 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 80214c4:	b2c0      	uxtb	r0, r0
 80214c6:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80214ca:	1c4a      	adds	r2, r1, #1
 80214cc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80214d0:	0a3a      	lsrs	r2, r7, #8
 80214d2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80214d6:	00c9      	lsls	r1, r1, #3
 80214d8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80214dc:	4301      	orrs	r1, r0
 80214de:	1c58      	adds	r0, r3, #1
 80214e0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80214e4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80214e8:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80214ec:	4308      	orrs	r0, r1
 80214ee:	f8a9 0000 	strh.w	r0, [r9]
 80214f2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80214f4:	f109 0902 	add.w	r9, r9, #2
 80214f8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80214fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80214fe:	441a      	add	r2, r3
 8021500:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021502:	922d      	str	r2, [sp, #180]	; 0xb4
 8021504:	441d      	add	r5, r3
 8021506:	e64c      	b.n	80211a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8021508:	2800      	cmp	r0, #0
 802150a:	f43f aeed 	beq.w	80212e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802150e:	5c79      	ldrb	r1, [r7, r1]
 8021510:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021514:	9109      	str	r1, [sp, #36]	; 0x24
 8021516:	0e09      	lsrs	r1, r1, #24
 8021518:	9111      	str	r1, [sp, #68]	; 0x44
 802151a:	e6e5      	b.n	80212e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802151c:	b01b      	add	sp, #108	; 0x6c
 802151e:	ecbd 8b08 	vpop	{d8-d11}
 8021522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021526:	bf00      	nop
 8021528:	fffff800 	.word	0xfffff800

0802152c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 802152c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021530:	b085      	sub	sp, #20
 8021532:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8021536:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802153a:	9103      	str	r1, [sp, #12]
 802153c:	2d00      	cmp	r5, #0
 802153e:	fb05 7106 	mla	r1, r5, r6, r7
 8021542:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8021546:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802154a:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 802154e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8021552:	eb03 0901 	add.w	r9, r3, r1
 8021556:	9401      	str	r4, [sp, #4]
 8021558:	f2c0 80c0 	blt.w	80216dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 802155c:	45a8      	cmp	r8, r5
 802155e:	f340 80bd 	ble.w	80216dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8021562:	2f00      	cmp	r7, #0
 8021564:	f2c0 80b6 	blt.w	80216d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8021568:	42be      	cmp	r6, r7
 802156a:	f340 80b3 	ble.w	80216d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 802156e:	f813 c001 	ldrb.w	ip, [r3, r1]
 8021572:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8021576:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802157a:	d019      	beq.n	80215b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 802157c:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8021580:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021584:	435a      	muls	r2, r3
 8021586:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 802158a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 802158e:	fb0c f403 	mul.w	r4, ip, r3
 8021592:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8021596:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802159a:	441a      	add	r2, r3
 802159c:	f104 0320 	add.w	r3, r4, #32
 80215a0:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80215a4:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 80215a8:	0a1b      	lsrs	r3, r3, #8
 80215aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80215ae:	4319      	orrs	r1, r3
 80215b0:	b289      	uxth	r1, r1
 80215b2:	1c7b      	adds	r3, r7, #1
 80215b4:	f100 8097 	bmi.w	80216e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80215b8:	429e      	cmp	r6, r3
 80215ba:	f340 8094 	ble.w	80216e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80215be:	2800      	cmp	r0, #0
 80215c0:	f000 8094 	beq.w	80216ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 80215c4:	f899 4001 	ldrb.w	r4, [r9, #1]
 80215c8:	9b01      	ldr	r3, [sp, #4]
 80215ca:	2cff      	cmp	r4, #255	; 0xff
 80215cc:	885b      	ldrh	r3, [r3, #2]
 80215ce:	d01b      	beq.n	8021608 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 80215d0:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80215d4:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80215d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80215dc:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80215e0:	fb0a f202 	mul.w	r2, sl, r2
 80215e4:	fb04 fa03 	mul.w	sl, r4, r3
 80215e8:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80215ec:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80215f0:	441a      	add	r2, r3
 80215f2:	f10a 0320 	add.w	r3, sl, #32
 80215f6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80215fa:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80215fe:	0a1b      	lsrs	r3, r3, #8
 8021600:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021604:	ea4b 0303 	orr.w	r3, fp, r3
 8021608:	b29b      	uxth	r3, r3
 802160a:	3501      	adds	r5, #1
 802160c:	d474      	bmi.n	80216f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802160e:	45a8      	cmp	r8, r5
 8021610:	dd72      	ble.n	80216f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8021612:	f1be 0f00 	cmp.w	lr, #0
 8021616:	f000 8120 	beq.w	802185a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 802161a:	2f00      	cmp	r7, #0
 802161c:	db69      	blt.n	80216f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802161e:	42be      	cmp	r6, r7
 8021620:	dd67      	ble.n	80216f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8021622:	f819 5006 	ldrb.w	r5, [r9, r6]
 8021626:	9a01      	ldr	r2, [sp, #4]
 8021628:	2dff      	cmp	r5, #255	; 0xff
 802162a:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802162e:	d01c      	beq.n	802166a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8021630:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8021634:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8021638:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802163c:	fb08 f802 	mul.w	r8, r8, r2
 8021640:	fb05 fa0b 	mul.w	sl, r5, fp
 8021644:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8021648:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 802164c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021650:	4490      	add	r8, r2
 8021652:	f10a 0220 	add.w	r2, sl, #32
 8021656:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 802165a:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 802165e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021662:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021666:	ea4b 0b0a 	orr.w	fp, fp, sl
 802166a:	fa1f fb8b 	uxth.w	fp, fp
 802166e:	3701      	adds	r7, #1
 8021670:	d447      	bmi.n	8021702 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8021672:	42be      	cmp	r6, r7
 8021674:	dd45      	ble.n	8021702 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8021676:	2800      	cmp	r0, #0
 8021678:	d046      	beq.n	8021708 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 802167a:	3601      	adds	r6, #1
 802167c:	9a01      	ldr	r2, [sp, #4]
 802167e:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021682:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8021686:	2fff      	cmp	r7, #255	; 0xff
 8021688:	d01a      	beq.n	80216c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 802168a:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 802168e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8021692:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021696:	fb08 f806 	mul.w	r8, r8, r6
 802169a:	fb07 f902 	mul.w	r9, r7, r2
 802169e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80216a2:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80216a6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80216aa:	44b0      	add	r8, r6
 80216ac:	f109 0620 	add.w	r6, r9, #32
 80216b0:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 80216b4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80216b8:	0a36      	lsrs	r6, r6, #8
 80216ba:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80216be:	4332      	orrs	r2, r6
 80216c0:	b292      	uxth	r2, r2
 80216c2:	280f      	cmp	r0, #15
 80216c4:	d922      	bls.n	802170c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 80216c6:	4b69      	ldr	r3, [pc, #420]	; (802186c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 80216c8:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80216cc:	4a68      	ldr	r2, [pc, #416]	; (8021870 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 80216ce:	4869      	ldr	r0, [pc, #420]	; (8021874 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 80216d0:	f004 fa50 	bl	8025b74 <__assert_func>
 80216d4:	f04f 0c00 	mov.w	ip, #0
 80216d8:	4661      	mov	r1, ip
 80216da:	e76a      	b.n	80215b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 80216dc:	2400      	movs	r4, #0
 80216de:	46a4      	mov	ip, r4
 80216e0:	4623      	mov	r3, r4
 80216e2:	4621      	mov	r1, r4
 80216e4:	e791      	b.n	802160a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80216e6:	2400      	movs	r4, #0
 80216e8:	4623      	mov	r3, r4
 80216ea:	e78e      	b.n	802160a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80216ec:	4604      	mov	r4, r0
 80216ee:	4603      	mov	r3, r0
 80216f0:	e78b      	b.n	802160a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80216f2:	2500      	movs	r5, #0
 80216f4:	46ab      	mov	fp, r5
 80216f6:	e7ba      	b.n	802166e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 80216f8:	2700      	movs	r7, #0
 80216fa:	463d      	mov	r5, r7
 80216fc:	463a      	mov	r2, r7
 80216fe:	46bb      	mov	fp, r7
 8021700:	e7df      	b.n	80216c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8021702:	2700      	movs	r7, #0
 8021704:	463a      	mov	r2, r7
 8021706:	e7dc      	b.n	80216c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8021708:	4607      	mov	r7, r0
 802170a:	4602      	mov	r2, r0
 802170c:	f1be 0f0f 	cmp.w	lr, #15
 8021710:	d8d9      	bhi.n	80216c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8021712:	b286      	uxth	r6, r0
 8021714:	fa1f f98e 	uxth.w	r9, lr
 8021718:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802171c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021720:	fb06 f809 	mul.w	r8, r6, r9
 8021724:	0136      	lsls	r6, r6, #4
 8021726:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802172a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802172e:	9601      	str	r6, [sp, #4]
 8021730:	ea4a 0101 	orr.w	r1, sl, r1
 8021734:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8021738:	fa1f f689 	uxth.w	r6, r9
 802173c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021740:	fb10 f90e 	smulbb	r9, r0, lr
 8021744:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021748:	9602      	str	r6, [sp, #8]
 802174a:	460e      	mov	r6, r1
 802174c:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8021750:	f1ce 0110 	rsb	r1, lr, #16
 8021754:	ea4a 0303 	orr.w	r3, sl, r3
 8021758:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802175c:	1a09      	subs	r1, r1, r0
 802175e:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8021762:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021766:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802176a:	4343      	muls	r3, r0
 802176c:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8021770:	9801      	ldr	r0, [sp, #4]
 8021772:	ea4a 0202 	orr.w	r2, sl, r2
 8021776:	fb01 3106 	mla	r1, r1, r6, r3
 802177a:	9e02      	ldr	r6, [sp, #8]
 802177c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021780:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8021784:	fb09 1302 	mla	r3, r9, r2, r1
 8021788:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802178c:	1b80      	subs	r0, r0, r6
 802178e:	9e01      	ldr	r6, [sp, #4]
 8021790:	9a03      	ldr	r2, [sp, #12]
 8021792:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021796:	eba6 0608 	sub.w	r6, r6, r8
 802179a:	b280      	uxth	r0, r0
 802179c:	8811      	ldrh	r1, [r2, #0]
 802179e:	ea4a 0b0b 	orr.w	fp, sl, fp
 80217a2:	b2b6      	uxth	r6, r6
 80217a4:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80217a8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80217ac:	4374      	muls	r4, r6
 80217ae:	b292      	uxth	r2, r2
 80217b0:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80217b4:	fb0c 4400 	mla	r4, ip, r0, r4
 80217b8:	9802      	ldr	r0, [sp, #8]
 80217ba:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80217be:	fb00 4505 	mla	r5, r0, r5, r4
 80217c2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80217c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80217ca:	1208      	asrs	r0, r1, #8
 80217cc:	fb08 5707 	mla	r7, r8, r7, r5
 80217d0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80217d4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80217d8:	10cd      	asrs	r5, r1, #3
 80217da:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80217de:	ea43 0e0e 	orr.w	lr, r3, lr
 80217e2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80217e6:	4357      	muls	r7, r2
 80217e8:	fa1f f38e 	uxth.w	r3, lr
 80217ec:	f107 0801 	add.w	r8, r7, #1
 80217f0:	121c      	asrs	r4, r3, #8
 80217f2:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80217f6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80217fa:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80217fe:	b2ff      	uxtb	r7, r7
 8021800:	fb10 f007 	smulbb	r0, r0, r7
 8021804:	fb15 f507 	smulbb	r5, r5, r7
 8021808:	fb04 0402 	mla	r4, r4, r2, r0
 802180c:	10d8      	asrs	r0, r3, #3
 802180e:	00db      	lsls	r3, r3, #3
 8021810:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021814:	b2a4      	uxth	r4, r4
 8021816:	fb00 5002 	mla	r0, r0, r2, r5
 802181a:	b2dd      	uxtb	r5, r3
 802181c:	00cb      	lsls	r3, r1, #3
 802181e:	b280      	uxth	r0, r0
 8021820:	b2db      	uxtb	r3, r3
 8021822:	fb13 f307 	smulbb	r3, r3, r7
 8021826:	fb05 3202 	mla	r2, r5, r2, r3
 802182a:	1c63      	adds	r3, r4, #1
 802182c:	b292      	uxth	r2, r2
 802182e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021832:	1c53      	adds	r3, r2, #1
 8021834:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021838:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802183c:	1c42      	adds	r2, r0, #1
 802183e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021842:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021846:	9a03      	ldr	r2, [sp, #12]
 8021848:	0940      	lsrs	r0, r0, #5
 802184a:	4323      	orrs	r3, r4
 802184c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021850:	4303      	orrs	r3, r0
 8021852:	8013      	strh	r3, [r2, #0]
 8021854:	b005      	add	sp, #20
 8021856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802185a:	280f      	cmp	r0, #15
 802185c:	f63f af33 	bhi.w	80216c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8021860:	4677      	mov	r7, lr
 8021862:	4675      	mov	r5, lr
 8021864:	4672      	mov	r2, lr
 8021866:	46f3      	mov	fp, lr
 8021868:	e753      	b.n	8021712 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 802186a:	bf00      	nop
 802186c:	0802a0cd 	.word	0x0802a0cd
 8021870:	0802a69a 	.word	0x0802a69a
 8021874:	0802a151 	.word	0x0802a151

08021878 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802187c:	ed2d 8b08 	vpush	{d8-d11}
 8021880:	b097      	sub	sp, #92	; 0x5c
 8021882:	eeb0 aa40 	vmov.f32	s20, s0
 8021886:	eef0 9a60 	vmov.f32	s19, s1
 802188a:	9214      	str	r2, [sp, #80]	; 0x50
 802188c:	eeb0 9a41 	vmov.f32	s18, s2
 8021890:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021892:	eeb0 8a62 	vmov.f32	s16, s5
 8021896:	9308      	str	r3, [sp, #32]
 8021898:	eef0 8a43 	vmov.f32	s17, s6
 802189c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80218a0:	eef0 ba44 	vmov.f32	s23, s8
 80218a4:	9015      	str	r0, [sp, #84]	; 0x54
 80218a6:	eeb0 ba64 	vmov.f32	s22, s9
 80218aa:	9312      	str	r3, [sp, #72]	; 0x48
 80218ac:	eef0 aa45 	vmov.f32	s21, s10
 80218b0:	6850      	ldr	r0, [r2, #4]
 80218b2:	9111      	str	r1, [sp, #68]	; 0x44
 80218b4:	6812      	ldr	r2, [r2, #0]
 80218b6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80218ba:	fb00 1303 	mla	r3, r0, r3, r1
 80218be:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80218c2:	9309      	str	r3, [sp, #36]	; 0x24
 80218c4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80218c6:	681b      	ldr	r3, [r3, #0]
 80218c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80218ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80218cc:	685b      	ldr	r3, [r3, #4]
 80218ce:	930c      	str	r3, [sp, #48]	; 0x30
 80218d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80218d4:	930a      	str	r3, [sp, #40]	; 0x28
 80218d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80218d8:	2b00      	cmp	r3, #0
 80218da:	dc03      	bgt.n	80218e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80218dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80218de:	2b00      	cmp	r3, #0
 80218e0:	f340 83cd 	ble.w	802207e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 80218e4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80218e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80218ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80218ee:	1e48      	subs	r0, r1, #1
 80218f0:	1e55      	subs	r5, r2, #1
 80218f2:	9b08      	ldr	r3, [sp, #32]
 80218f4:	2b00      	cmp	r3, #0
 80218f6:	f340 81a5 	ble.w	8021c44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80218fa:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80218fc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80218fe:	1436      	asrs	r6, r6, #16
 8021900:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021904:	d406      	bmi.n	8021914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021906:	4286      	cmp	r6, r0
 8021908:	da04      	bge.n	8021914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802190a:	2b00      	cmp	r3, #0
 802190c:	db02      	blt.n	8021914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802190e:	42ab      	cmp	r3, r5
 8021910:	f2c0 8199 	blt.w	8021c46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8021914:	3601      	adds	r6, #1
 8021916:	f100 8186 	bmi.w	8021c26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802191a:	42b1      	cmp	r1, r6
 802191c:	f2c0 8183 	blt.w	8021c26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8021920:	3301      	adds	r3, #1
 8021922:	f100 8180 	bmi.w	8021c26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8021926:	429a      	cmp	r2, r3
 8021928:	f2c0 817d 	blt.w	8021c26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802192c:	9b08      	ldr	r3, [sp, #32]
 802192e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021932:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021934:	9313      	str	r3, [sp, #76]	; 0x4c
 8021936:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021938:	2b00      	cmp	r3, #0
 802193a:	f340 81a6 	ble.w	8021c8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802193e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021940:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8021942:	1418      	asrs	r0, r3, #16
 8021944:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021946:	142d      	asrs	r5, r5, #16
 8021948:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802194c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802194e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021952:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021954:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021958:	f100 81fa 	bmi.w	8021d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802195c:	f102 3eff 	add.w	lr, r2, #4294967295
 8021960:	4575      	cmp	r5, lr
 8021962:	f280 81f5 	bge.w	8021d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8021966:	2800      	cmp	r0, #0
 8021968:	f2c0 81f2 	blt.w	8021d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802196c:	f103 3eff 	add.w	lr, r3, #4294967295
 8021970:	4570      	cmp	r0, lr
 8021972:	f280 81ed 	bge.w	8021d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8021976:	b212      	sxth	r2, r2
 8021978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802197a:	fa1f fe81 	uxth.w	lr, r1
 802197e:	fb00 5002 	mla	r0, r0, r2, r5
 8021982:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021986:	eb03 0a00 	add.w	sl, r3, r0
 802198a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802198e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021992:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021996:	b29b      	uxth	r3, r3
 8021998:	f1bc 0f00 	cmp.w	ip, #0
 802199c:	f000 81bb 	beq.w	8021d16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80219a0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80219a4:	eb0a 0b02 	add.w	fp, sl, r2
 80219a8:	fa1f fa8c 	uxth.w	sl, ip
 80219ac:	940d      	str	r4, [sp, #52]	; 0x34
 80219ae:	fb0a fe0e 	mul.w	lr, sl, lr
 80219b2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80219b6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80219ba:	eba5 050e 	sub.w	r5, r5, lr
 80219be:	940e      	str	r4, [sp, #56]	; 0x38
 80219c0:	fa1f fa8a 	uxth.w	sl, sl
 80219c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80219c6:	b2ad      	uxth	r5, r5
 80219c8:	eba3 030a 	sub.w	r3, r3, sl
 80219cc:	fb08 f505 	mul.w	r5, r8, r5
 80219d0:	b29b      	uxth	r3, r3
 80219d2:	fb09 5303 	mla	r3, r9, r3, r5
 80219d6:	fb0a 3304 	mla	r3, sl, r4, r3
 80219da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80219dc:	fb0e 3304 	mla	r3, lr, r4, r3
 80219e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	f000 8111 	beq.w	8021c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80219ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80219ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80219f0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80219f4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80219f8:	f000 8192 	beq.w	8021d20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80219fc:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021a00:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021a04:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a08:	fb0a fe0e 	mul.w	lr, sl, lr
 8021a0c:	fb09 f000 	mul.w	r0, r9, r0
 8021a10:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021a14:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021a18:	f100 0b20 	add.w	fp, r0, #32
 8021a1c:	44ce      	add	lr, r9
 8021a1e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021a22:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021a26:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021a2a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021a2e:	ea4e 0909 	orr.w	r9, lr, r9
 8021a32:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021a36:	8868      	ldrh	r0, [r5, #2]
 8021a38:	d019      	beq.n	8021a6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8021a3a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021a3e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021a42:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a46:	fb0a fe0e 	mul.w	lr, sl, lr
 8021a4a:	fb08 f800 	mul.w	r8, r8, r0
 8021a4e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021a52:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021a56:	f108 0b20 	add.w	fp, r8, #32
 8021a5a:	4486      	add	lr, r0
 8021a5c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021a60:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021a64:	0a00      	lsrs	r0, r0, #8
 8021a66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a6a:	ea4e 0000 	orr.w	r0, lr, r0
 8021a6e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021a72:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021a76:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021a7a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021a7e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021a82:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021a86:	ea4e 0909 	orr.w	r9, lr, r9
 8021a8a:	ea4a 0000 	orr.w	r0, sl, r0
 8021a8e:	f1bc 0f00 	cmp.w	ip, #0
 8021a92:	f000 8147 	beq.w	8021d24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8021a96:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021a9a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021a9c:	3a01      	subs	r2, #1
 8021a9e:	2cff      	cmp	r4, #255	; 0xff
 8021aa0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8021aa4:	f102 0202 	add.w	r2, r2, #2
 8021aa8:	eb05 0e02 	add.w	lr, r5, r2
 8021aac:	5aaa      	ldrh	r2, [r5, r2]
 8021aae:	d018      	beq.n	8021ae2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021ab0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8021ab4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021ab8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021abc:	fb04 fa02 	mul.w	sl, r4, r2
 8021ac0:	fb08 f805 	mul.w	r8, r8, r5
 8021ac4:	f10a 0520 	add.w	r5, sl, #32
 8021ac8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021acc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021ad0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021ad4:	4442      	add	r2, r8
 8021ad6:	0a2d      	lsrs	r5, r5, #8
 8021ad8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021adc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021ae0:	432a      	orrs	r2, r5
 8021ae2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021ae4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021ae8:	2cff      	cmp	r4, #255	; 0xff
 8021aea:	d01a      	beq.n	8021b22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8021aec:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021af0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021af4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021af8:	fb04 fa05 	mul.w	sl, r4, r5
 8021afc:	fb08 f80e 	mul.w	r8, r8, lr
 8021b00:	f10a 0e20 	add.w	lr, sl, #32
 8021b04:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021b08:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021b0c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021b10:	4445      	add	r5, r8
 8021b12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b16:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021b1a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021b1e:	ea45 050e 	orr.w	r5, r5, lr
 8021b22:	fb1c fe01 	smulbb	lr, ip, r1
 8021b26:	f1cc 0810 	rsb	r8, ip, #16
 8021b2a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021b2e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021b32:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021b36:	eba8 0801 	sub.w	r8, r8, r1
 8021b3a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021b3e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021b42:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021b46:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021b4a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021b4e:	ea4a 0202 	orr.w	r2, sl, r2
 8021b52:	4341      	muls	r1, r0
 8021b54:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021b58:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021b5c:	fb09 1108 	mla	r1, r9, r8, r1
 8021b60:	ea4b 0505 	orr.w	r5, fp, r5
 8021b64:	fb0c 1102 	mla	r1, ip, r2, r1
 8021b68:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021b6c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021b70:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021b74:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b78:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021b7c:	ea42 0e0e 	orr.w	lr, r2, lr
 8021b80:	fa1f f28e 	uxth.w	r2, lr
 8021b84:	2bff      	cmp	r3, #255	; 0xff
 8021b86:	d103      	bne.n	8021b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021b88:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021b8a:	29ff      	cmp	r1, #255	; 0xff
 8021b8c:	f000 80de 	beq.w	8021d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8021b90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021b92:	1215      	asrs	r5, r2, #8
 8021b94:	8838      	ldrh	r0, [r7, #0]
 8021b96:	434b      	muls	r3, r1
 8021b98:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021b9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021b9e:	f103 0c01 	add.w	ip, r3, #1
 8021ba2:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8021ba6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021baa:	fa5f fc83 	uxtb.w	ip, r3
 8021bae:	1203      	asrs	r3, r0, #8
 8021bb0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021bb4:	fb13 f30c 	smulbb	r3, r3, ip
 8021bb8:	fb05 3501 	mla	r5, r5, r1, r3
 8021bbc:	10c3      	asrs	r3, r0, #3
 8021bbe:	10d1      	asrs	r1, r2, #3
 8021bc0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021bc4:	00d2      	lsls	r2, r2, #3
 8021bc6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021bca:	b2ad      	uxth	r5, r5
 8021bcc:	fb13 f30c 	smulbb	r3, r3, ip
 8021bd0:	b2d2      	uxtb	r2, r2
 8021bd2:	fb01 3104 	mla	r1, r1, r4, r3
 8021bd6:	00c3      	lsls	r3, r0, #3
 8021bd8:	b2db      	uxtb	r3, r3
 8021bda:	b289      	uxth	r1, r1
 8021bdc:	fb13 f30c 	smulbb	r3, r3, ip
 8021be0:	fb02 3304 	mla	r3, r2, r4, r3
 8021be4:	b29a      	uxth	r2, r3
 8021be6:	1c6b      	adds	r3, r5, #1
 8021be8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021bec:	1c53      	adds	r3, r2, #1
 8021bee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021bf2:	1c4a      	adds	r2, r1, #1
 8021bf4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021bf8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021bfc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021c00:	0949      	lsrs	r1, r1, #5
 8021c02:	432b      	orrs	r3, r5
 8021c04:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021c08:	430b      	orrs	r3, r1
 8021c0a:	803b      	strh	r3, [r7, #0]
 8021c0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021c0e:	3702      	adds	r7, #2
 8021c10:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021c12:	4413      	add	r3, r2
 8021c14:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021c16:	9329      	str	r3, [sp, #164]	; 0xa4
 8021c18:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021c1a:	441a      	add	r2, r3
 8021c1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021c1e:	3b01      	subs	r3, #1
 8021c20:	922a      	str	r2, [sp, #168]	; 0xa8
 8021c22:	9313      	str	r3, [sp, #76]	; 0x4c
 8021c24:	e687      	b.n	8021936 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8021c26:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021c28:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8021c2a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8021c2c:	4433      	add	r3, r6
 8021c2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8021c30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021c32:	441c      	add	r4, r3
 8021c34:	9b08      	ldr	r3, [sp, #32]
 8021c36:	3b01      	subs	r3, #1
 8021c38:	942a      	str	r4, [sp, #168]	; 0xa8
 8021c3a:	9308      	str	r3, [sp, #32]
 8021c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c3e:	3302      	adds	r3, #2
 8021c40:	9309      	str	r3, [sp, #36]	; 0x24
 8021c42:	e656      	b.n	80218f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021c44:	d028      	beq.n	8021c98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8021c46:	9b08      	ldr	r3, [sp, #32]
 8021c48:	982b      	ldr	r0, [sp, #172]	; 0xac
 8021c4a:	3b01      	subs	r3, #1
 8021c4c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8021c4e:	fb00 5003 	mla	r0, r0, r3, r5
 8021c52:	1400      	asrs	r0, r0, #16
 8021c54:	f53f ae6a 	bmi.w	802192c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021c58:	3901      	subs	r1, #1
 8021c5a:	4288      	cmp	r0, r1
 8021c5c:	f6bf ae66 	bge.w	802192c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021c60:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8021c62:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8021c64:	fb01 0303 	mla	r3, r1, r3, r0
 8021c68:	141b      	asrs	r3, r3, #16
 8021c6a:	f53f ae5f 	bmi.w	802192c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021c6e:	3a01      	subs	r2, #1
 8021c70:	4293      	cmp	r3, r2
 8021c72:	f6bf ae5b 	bge.w	802192c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021c76:	9b08      	ldr	r3, [sp, #32]
 8021c78:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021c7c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021c80:	9313      	str	r3, [sp, #76]	; 0x4c
 8021c82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021c84:	2b00      	cmp	r3, #0
 8021c86:	f300 8082 	bgt.w	8021d8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8021c8a:	9b08      	ldr	r3, [sp, #32]
 8021c8c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c92:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021c96:	9309      	str	r3, [sp, #36]	; 0x24
 8021c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	f340 81ef 	ble.w	802207e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8021ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021ca4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021ca6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021caa:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021cae:	eef0 6a48 	vmov.f32	s13, s16
 8021cb2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021cb6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021cba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cbe:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8021cc2:	eef0 6a68 	vmov.f32	s13, s17
 8021cc6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cca:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8021cce:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021cd2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021cd6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021cda:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021cde:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021ce2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021ce6:	ee18 2a10 	vmov	r2, s16
 8021cea:	eeb0 8a47 	vmov.f32	s16, s14
 8021cee:	fb92 f3f3 	sdiv	r3, r2, r3
 8021cf2:	ee18 2a90 	vmov	r2, s17
 8021cf6:	932b      	str	r3, [sp, #172]	; 0xac
 8021cf8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021cfa:	eef0 8a67 	vmov.f32	s17, s15
 8021cfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d02:	932c      	str	r3, [sp, #176]	; 0xb0
 8021d04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021d06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021d08:	3b01      	subs	r3, #1
 8021d0a:	9311      	str	r3, [sp, #68]	; 0x44
 8021d0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021d0e:	bf08      	it	eq
 8021d10:	4613      	moveq	r3, r2
 8021d12:	9308      	str	r3, [sp, #32]
 8021d14:	e5df      	b.n	80218d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021d16:	fb08 f505 	mul.w	r5, r8, r5
 8021d1a:	fb09 5303 	mla	r3, r9, r3, r5
 8021d1e:	e65f      	b.n	80219e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8021d20:	4681      	mov	r9, r0
 8021d22:	e686      	b.n	8021a32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021d24:	f1c1 0210 	rsb	r2, r1, #16
 8021d28:	4341      	muls	r1, r0
 8021d2a:	fb09 1902 	mla	r9, r9, r2, r1
 8021d2e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021d32:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021d36:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021d3a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021d3e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021d42:	ea42 0909 	orr.w	r9, r2, r9
 8021d46:	fa1f f289 	uxth.w	r2, r9
 8021d4a:	e71b      	b.n	8021b84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021d4c:	803a      	strh	r2, [r7, #0]
 8021d4e:	e75d      	b.n	8021c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021d50:	f115 0e01 	adds.w	lr, r5, #1
 8021d54:	f53f af5a 	bmi.w	8021c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021d58:	4572      	cmp	r2, lr
 8021d5a:	f6ff af57 	blt.w	8021c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021d5e:	f110 0e01 	adds.w	lr, r0, #1
 8021d62:	f53f af53 	bmi.w	8021c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021d66:	4573      	cmp	r3, lr
 8021d68:	f6ff af50 	blt.w	8021c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021d6c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021d6e:	b21b      	sxth	r3, r3
 8021d70:	b212      	sxth	r2, r2
 8021d72:	9502      	str	r5, [sp, #8]
 8021d74:	9301      	str	r3, [sp, #4]
 8021d76:	9200      	str	r2, [sp, #0]
 8021d78:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8021d7c:	e9cd c405 	strd	ip, r4, [sp, #20]
 8021d80:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8021d84:	4639      	mov	r1, r7
 8021d86:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021d88:	f7ff fbd0 	bl	802152c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8021d8c:	e73e      	b.n	8021c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021d8e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021d90:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021d94:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021d96:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8021d9a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021d9c:	fa1f fc82 	uxth.w	ip, r2
 8021da0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021da4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021da6:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8021daa:	141f      	asrs	r7, r3, #16
 8021dac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021dae:	141b      	asrs	r3, r3, #16
 8021db0:	fb01 3707 	mla	r7, r1, r7, r3
 8021db4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021db6:	eb03 0a07 	add.w	sl, r3, r7
 8021dba:	f813 9007 	ldrb.w	r9, [r3, r7]
 8021dbe:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8021dc2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021dc6:	b29b      	uxth	r3, r3
 8021dc8:	2d00      	cmp	r5, #0
 8021dca:	f000 813d 	beq.w	8022048 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8021dce:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8021dd2:	eb0a 0b01 	add.w	fp, sl, r1
 8021dd6:	fa1f fa85 	uxth.w	sl, r5
 8021dda:	940f      	str	r4, [sp, #60]	; 0x3c
 8021ddc:	fb0a fc0c 	mul.w	ip, sl, ip
 8021de0:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021de4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8021de8:	eba0 000c 	sub.w	r0, r0, ip
 8021dec:	9410      	str	r4, [sp, #64]	; 0x40
 8021dee:	fa1f fa8a 	uxth.w	sl, sl
 8021df2:	b280      	uxth	r0, r0
 8021df4:	eba3 030a 	sub.w	r3, r3, sl
 8021df8:	fb08 f000 	mul.w	r0, r8, r0
 8021dfc:	b29b      	uxth	r3, r3
 8021dfe:	fb09 0303 	mla	r3, r9, r3, r0
 8021e02:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021e04:	fb0a 3300 	mla	r3, sl, r0, r3
 8021e08:	fb0c 3304 	mla	r3, ip, r4, r3
 8021e0c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021e10:	2b00      	cmp	r3, #0
 8021e12:	f000 810b 	beq.w	802202c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8021e16:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021e18:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021e1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021e1e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8021e22:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8021e26:	f000 8114 	beq.w	8022052 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8021e2a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021e2e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021e32:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021e36:	fb0a fc0c 	mul.w	ip, sl, ip
 8021e3a:	fb09 f707 	mul.w	r7, r9, r7
 8021e3e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8021e42:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021e46:	f107 0b20 	add.w	fp, r7, #32
 8021e4a:	44cc      	add	ip, r9
 8021e4c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8021e50:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021e54:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021e58:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021e5c:	ea4c 0909 	orr.w	r9, ip, r9
 8021e60:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021e64:	8847      	ldrh	r7, [r0, #2]
 8021e66:	d019      	beq.n	8021e9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8021e68:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021e6c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021e70:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021e74:	fb0a fc0c 	mul.w	ip, sl, ip
 8021e78:	fb08 f807 	mul.w	r8, r8, r7
 8021e7c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8021e80:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021e84:	f108 0b20 	add.w	fp, r8, #32
 8021e88:	44bc      	add	ip, r7
 8021e8a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8021e8e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021e92:	0a3f      	lsrs	r7, r7, #8
 8021e94:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021e98:	ea4c 0707 	orr.w	r7, ip, r7
 8021e9c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8021ea0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021ea4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8021ea8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021eac:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021eb0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021eb4:	ea4c 0909 	orr.w	r9, ip, r9
 8021eb8:	ea4a 0707 	orr.w	r7, sl, r7
 8021ebc:	2d00      	cmp	r5, #0
 8021ebe:	f000 80ca 	beq.w	8022056 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021ec2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8021ec6:	3901      	subs	r1, #1
 8021ec8:	0049      	lsls	r1, r1, #1
 8021eca:	3102      	adds	r1, #2
 8021ecc:	eb00 0c01 	add.w	ip, r0, r1
 8021ed0:	5a41      	ldrh	r1, [r0, r1]
 8021ed2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021ed4:	28ff      	cmp	r0, #255	; 0xff
 8021ed6:	d019      	beq.n	8021f0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8021ed8:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8021edc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021ede:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021ee2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021ee6:	fb04 fa01 	mul.w	sl, r4, r1
 8021eea:	fb08 f800 	mul.w	r8, r8, r0
 8021eee:	f10a 0020 	add.w	r0, sl, #32
 8021ef2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8021ef6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021efa:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8021efe:	4441      	add	r1, r8
 8021f00:	0a00      	lsrs	r0, r0, #8
 8021f02:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8021f06:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021f0a:	4301      	orrs	r1, r0
 8021f0c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021f0e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8021f12:	2cff      	cmp	r4, #255	; 0xff
 8021f14:	d01a      	beq.n	8021f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8021f16:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8021f1a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021f1e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021f22:	fb04 fa00 	mul.w	sl, r4, r0
 8021f26:	fb08 f80c 	mul.w	r8, r8, ip
 8021f2a:	f10a 0c20 	add.w	ip, sl, #32
 8021f2e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8021f32:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021f36:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8021f3a:	4440      	add	r0, r8
 8021f3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f40:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8021f44:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021f48:	ea40 000c 	orr.w	r0, r0, ip
 8021f4c:	fb15 fc02 	smulbb	ip, r5, r2
 8021f50:	f1c5 0810 	rsb	r8, r5, #16
 8021f54:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021f58:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021f5c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8021f60:	eba8 0802 	sub.w	r8, r8, r2
 8021f64:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8021f68:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021f6c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8021f70:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021f74:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8021f78:	ea4a 0101 	orr.w	r1, sl, r1
 8021f7c:	437a      	muls	r2, r7
 8021f7e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8021f82:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021f86:	fb09 2208 	mla	r2, r9, r8, r2
 8021f8a:	ea4b 0000 	orr.w	r0, fp, r0
 8021f8e:	fb05 2201 	mla	r2, r5, r1, r2
 8021f92:	fb0c 2200 	mla	r2, ip, r0, r2
 8021f96:	0d57      	lsrs	r7, r2, #21
 8021f98:	0952      	lsrs	r2, r2, #5
 8021f9a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021f9e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021fa2:	433a      	orrs	r2, r7
 8021fa4:	2bff      	cmp	r3, #255	; 0xff
 8021fa6:	b292      	uxth	r2, r2
 8021fa8:	d102      	bne.n	8021fb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8021faa:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021fac:	29ff      	cmp	r1, #255	; 0xff
 8021fae:	d063      	beq.n	8022078 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8021fb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021fb2:	1215      	asrs	r5, r2, #8
 8021fb4:	f8be 1000 	ldrh.w	r1, [lr]
 8021fb8:	4343      	muls	r3, r0
 8021fba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021fbc:	10cf      	asrs	r7, r1, #3
 8021fbe:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021fc2:	1c58      	adds	r0, r3, #1
 8021fc4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021fc8:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8021fcc:	1208      	asrs	r0, r1, #8
 8021fce:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021fd2:	00c9      	lsls	r1, r1, #3
 8021fd4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021fd8:	b2db      	uxtb	r3, r3
 8021fda:	b2c9      	uxtb	r1, r1
 8021fdc:	fb10 f003 	smulbb	r0, r0, r3
 8021fe0:	fb11 f103 	smulbb	r1, r1, r3
 8021fe4:	fb05 0504 	mla	r5, r5, r4, r0
 8021fe8:	10d0      	asrs	r0, r2, #3
 8021fea:	fb17 f703 	smulbb	r7, r7, r3
 8021fee:	00d2      	lsls	r2, r2, #3
 8021ff0:	b2ad      	uxth	r5, r5
 8021ff2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021ff6:	b2d2      	uxtb	r2, r2
 8021ff8:	fb00 7004 	mla	r0, r0, r4, r7
 8021ffc:	1c6b      	adds	r3, r5, #1
 8021ffe:	fb02 1204 	mla	r2, r2, r4, r1
 8022002:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022006:	b292      	uxth	r2, r2
 8022008:	b280      	uxth	r0, r0
 802200a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802200e:	1c57      	adds	r7, r2, #1
 8022010:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022014:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022018:	433d      	orrs	r5, r7
 802201a:	1c47      	adds	r7, r0, #1
 802201c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022020:	097f      	lsrs	r7, r7, #5
 8022022:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022026:	433d      	orrs	r5, r7
 8022028:	f8ae 5000 	strh.w	r5, [lr]
 802202c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802202e:	f10e 0e02 	add.w	lr, lr, #2
 8022032:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022034:	4413      	add	r3, r2
 8022036:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022038:	9329      	str	r3, [sp, #164]	; 0xa4
 802203a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802203c:	441a      	add	r2, r3
 802203e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022040:	3b01      	subs	r3, #1
 8022042:	922a      	str	r2, [sp, #168]	; 0xa8
 8022044:	9313      	str	r3, [sp, #76]	; 0x4c
 8022046:	e61c      	b.n	8021c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8022048:	fb08 f000 	mul.w	r0, r8, r0
 802204c:	fb09 0303 	mla	r3, r9, r3, r0
 8022050:	e6dc      	b.n	8021e0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8022052:	46b9      	mov	r9, r7
 8022054:	e704      	b.n	8021e60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 8022056:	f1c2 0110 	rsb	r1, r2, #16
 802205a:	437a      	muls	r2, r7
 802205c:	fb09 2901 	mla	r9, r9, r1, r2
 8022060:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022064:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022068:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802206c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022070:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022074:	4302      	orrs	r2, r0
 8022076:	e795      	b.n	8021fa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8022078:	f8ae 2000 	strh.w	r2, [lr]
 802207c:	e7d6      	b.n	802202c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 802207e:	b017      	add	sp, #92	; 0x5c
 8022080:	ecbd 8b08 	vpop	{d8-d11}
 8022084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022088 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802208c:	b085      	sub	sp, #20
 802208e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8022092:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8022096:	9103      	str	r1, [sp, #12]
 8022098:	2d00      	cmp	r5, #0
 802209a:	fb05 7106 	mla	r1, r5, r6, r7
 802209e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80220a2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80220a6:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 80220aa:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80220ae:	eb02 0901 	add.w	r9, r2, r1
 80220b2:	9401      	str	r4, [sp, #4]
 80220b4:	f2c0 80c0 	blt.w	8022238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80220b8:	45a8      	cmp	r8, r5
 80220ba:	f340 80bd 	ble.w	8022238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80220be:	2f00      	cmp	r7, #0
 80220c0:	f2c0 80b6 	blt.w	8022230 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80220c4:	42be      	cmp	r6, r7
 80220c6:	f340 80b3 	ble.w	8022230 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80220ca:	f812 c001 	ldrb.w	ip, [r2, r1]
 80220ce:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80220d2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80220d6:	d019      	beq.n	802210c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 80220d8:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80220dc:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80220e0:	435a      	muls	r2, r3
 80220e2:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80220e6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80220ea:	fb0c f403 	mul.w	r4, ip, r3
 80220ee:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80220f2:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80220f6:	441a      	add	r2, r3
 80220f8:	f104 0320 	add.w	r3, r4, #32
 80220fc:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8022100:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8022104:	0a1b      	lsrs	r3, r3, #8
 8022106:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802210a:	4319      	orrs	r1, r3
 802210c:	b289      	uxth	r1, r1
 802210e:	1c7b      	adds	r3, r7, #1
 8022110:	f100 8097 	bmi.w	8022242 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8022114:	429e      	cmp	r6, r3
 8022116:	f340 8094 	ble.w	8022242 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 802211a:	2800      	cmp	r0, #0
 802211c:	f000 8094 	beq.w	8022248 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8022120:	f899 4001 	ldrb.w	r4, [r9, #1]
 8022124:	9b01      	ldr	r3, [sp, #4]
 8022126:	2cff      	cmp	r4, #255	; 0xff
 8022128:	885b      	ldrh	r3, [r3, #2]
 802212a:	d01b      	beq.n	8022164 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 802212c:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8022130:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8022134:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022138:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802213c:	fb0a f202 	mul.w	r2, sl, r2
 8022140:	fb04 fa03 	mul.w	sl, r4, r3
 8022144:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8022148:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802214c:	441a      	add	r2, r3
 802214e:	f10a 0320 	add.w	r3, sl, #32
 8022152:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022156:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802215a:	0a1b      	lsrs	r3, r3, #8
 802215c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022160:	ea4b 0303 	orr.w	r3, fp, r3
 8022164:	b29b      	uxth	r3, r3
 8022166:	3501      	adds	r5, #1
 8022168:	d474      	bmi.n	8022254 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 802216a:	45a8      	cmp	r8, r5
 802216c:	dd72      	ble.n	8022254 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 802216e:	f1be 0f00 	cmp.w	lr, #0
 8022172:	f000 8110 	beq.w	8022396 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 8022176:	2f00      	cmp	r7, #0
 8022178:	db69      	blt.n	802224e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802217a:	42be      	cmp	r6, r7
 802217c:	dd67      	ble.n	802224e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802217e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8022182:	9a01      	ldr	r2, [sp, #4]
 8022184:	2dff      	cmp	r5, #255	; 0xff
 8022186:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802218a:	d01c      	beq.n	80221c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 802218c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8022190:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8022194:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022198:	fb08 f802 	mul.w	r8, r8, r2
 802219c:	fb05 fa0b 	mul.w	sl, r5, fp
 80221a0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80221a4:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80221a8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80221ac:	4490      	add	r8, r2
 80221ae:	f10a 0220 	add.w	r2, sl, #32
 80221b2:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80221b6:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80221ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80221be:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80221c2:	ea4b 0b0a 	orr.w	fp, fp, sl
 80221c6:	fa1f fb8b 	uxth.w	fp, fp
 80221ca:	3701      	adds	r7, #1
 80221cc:	d447      	bmi.n	802225e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80221ce:	42be      	cmp	r6, r7
 80221d0:	dd45      	ble.n	802225e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80221d2:	2800      	cmp	r0, #0
 80221d4:	d046      	beq.n	8022264 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 80221d6:	3601      	adds	r6, #1
 80221d8:	9a01      	ldr	r2, [sp, #4]
 80221da:	f819 7006 	ldrb.w	r7, [r9, r6]
 80221de:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80221e2:	2fff      	cmp	r7, #255	; 0xff
 80221e4:	d01a      	beq.n	802221c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 80221e6:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80221ea:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80221ee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80221f2:	fb08 f806 	mul.w	r8, r8, r6
 80221f6:	fb07 f902 	mul.w	r9, r7, r2
 80221fa:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80221fe:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8022202:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022206:	44b0      	add	r8, r6
 8022208:	f109 0620 	add.w	r6, r9, #32
 802220c:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8022210:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8022214:	0a36      	lsrs	r6, r6, #8
 8022216:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802221a:	4332      	orrs	r2, r6
 802221c:	b292      	uxth	r2, r2
 802221e:	280f      	cmp	r0, #15
 8022220:	d922      	bls.n	8022268 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8022222:	4b61      	ldr	r3, [pc, #388]	; (80223a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8022224:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8022228:	4a60      	ldr	r2, [pc, #384]	; (80223ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 802222a:	4861      	ldr	r0, [pc, #388]	; (80223b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 802222c:	f003 fca2 	bl	8025b74 <__assert_func>
 8022230:	f04f 0c00 	mov.w	ip, #0
 8022234:	4661      	mov	r1, ip
 8022236:	e76a      	b.n	802210e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8022238:	2400      	movs	r4, #0
 802223a:	46a4      	mov	ip, r4
 802223c:	4623      	mov	r3, r4
 802223e:	4621      	mov	r1, r4
 8022240:	e791      	b.n	8022166 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8022242:	2400      	movs	r4, #0
 8022244:	4623      	mov	r3, r4
 8022246:	e78e      	b.n	8022166 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8022248:	4604      	mov	r4, r0
 802224a:	4603      	mov	r3, r0
 802224c:	e78b      	b.n	8022166 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802224e:	2500      	movs	r5, #0
 8022250:	46ab      	mov	fp, r5
 8022252:	e7ba      	b.n	80221ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8022254:	2700      	movs	r7, #0
 8022256:	463d      	mov	r5, r7
 8022258:	463a      	mov	r2, r7
 802225a:	46bb      	mov	fp, r7
 802225c:	e7df      	b.n	802221e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 802225e:	2700      	movs	r7, #0
 8022260:	463a      	mov	r2, r7
 8022262:	e7dc      	b.n	802221e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8022264:	4607      	mov	r7, r0
 8022266:	4602      	mov	r2, r0
 8022268:	f1be 0f0f 	cmp.w	lr, #15
 802226c:	d8d9      	bhi.n	8022222 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802226e:	b286      	uxth	r6, r0
 8022270:	fa1f f98e 	uxth.w	r9, lr
 8022274:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022278:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802227c:	fb06 f809 	mul.w	r8, r6, r9
 8022280:	0136      	lsls	r6, r6, #4
 8022282:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022286:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802228a:	9601      	str	r6, [sp, #4]
 802228c:	ea4a 0101 	orr.w	r1, sl, r1
 8022290:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8022294:	fa1f f689 	uxth.w	r6, r9
 8022298:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802229c:	fb10 f90e 	smulbb	r9, r0, lr
 80222a0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80222a4:	9602      	str	r6, [sp, #8]
 80222a6:	460e      	mov	r6, r1
 80222a8:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80222ac:	f1ce 0110 	rsb	r1, lr, #16
 80222b0:	ea4a 0303 	orr.w	r3, sl, r3
 80222b4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80222b8:	1a09      	subs	r1, r1, r0
 80222ba:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80222be:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80222c2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80222c6:	4343      	muls	r3, r0
 80222c8:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80222cc:	ea4a 0202 	orr.w	r2, sl, r2
 80222d0:	9802      	ldr	r0, [sp, #8]
 80222d2:	fb01 3106 	mla	r1, r1, r6, r3
 80222d6:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80222da:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80222de:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80222e2:	fb09 1302 	mla	r3, r9, r2, r1
 80222e6:	9a03      	ldr	r2, [sp, #12]
 80222e8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80222ec:	8811      	ldrh	r1, [r2, #0]
 80222ee:	9a01      	ldr	r2, [sp, #4]
 80222f0:	ea4a 0b0b 	orr.w	fp, sl, fp
 80222f4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80222f8:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80222fc:	1a12      	subs	r2, r2, r0
 80222fe:	9801      	ldr	r0, [sp, #4]
 8022300:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8022304:	eba0 0608 	sub.w	r6, r0, r8
 8022308:	b292      	uxth	r2, r2
 802230a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802230e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022312:	b2b6      	uxth	r6, r6
 8022314:	10c8      	asrs	r0, r1, #3
 8022316:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802231a:	4374      	muls	r4, r6
 802231c:	ea43 0e0e 	orr.w	lr, r3, lr
 8022320:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022324:	fb0c 4402 	mla	r4, ip, r2, r4
 8022328:	9a02      	ldr	r2, [sp, #8]
 802232a:	fa1f f38e 	uxth.w	r3, lr
 802232e:	fb02 4505 	mla	r5, r2, r5, r4
 8022332:	120a      	asrs	r2, r1, #8
 8022334:	00c9      	lsls	r1, r1, #3
 8022336:	fb08 5707 	mla	r7, r8, r7, r5
 802233a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802233e:	b2c9      	uxtb	r1, r1
 8022340:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8022344:	b2ff      	uxtb	r7, r7
 8022346:	437a      	muls	r2, r7
 8022348:	4378      	muls	r0, r7
 802234a:	434f      	muls	r7, r1
 802234c:	1c51      	adds	r1, r2, #1
 802234e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8022352:	121a      	asrs	r2, r3, #8
 8022354:	f022 0207 	bic.w	r2, r2, #7
 8022358:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802235c:	1c41      	adds	r1, r0, #1
 802235e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022362:	10d9      	asrs	r1, r3, #3
 8022364:	0212      	lsls	r2, r2, #8
 8022366:	f021 0103 	bic.w	r1, r1, #3
 802236a:	00db      	lsls	r3, r3, #3
 802236c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8022370:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022374:	00c9      	lsls	r1, r1, #3
 8022376:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802237a:	430a      	orrs	r2, r1
 802237c:	1c79      	adds	r1, r7, #1
 802237e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8022382:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022386:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802238a:	4313      	orrs	r3, r2
 802238c:	9a03      	ldr	r2, [sp, #12]
 802238e:	8013      	strh	r3, [r2, #0]
 8022390:	b005      	add	sp, #20
 8022392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022396:	280f      	cmp	r0, #15
 8022398:	f63f af43 	bhi.w	8022222 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802239c:	4677      	mov	r7, lr
 802239e:	4675      	mov	r5, lr
 80223a0:	4672      	mov	r2, lr
 80223a2:	46f3      	mov	fp, lr
 80223a4:	e763      	b.n	802226e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 80223a6:	bf00      	nop
 80223a8:	0802a0cd 	.word	0x0802a0cd
 80223ac:	0802a69a 	.word	0x0802a69a
 80223b0:	0802a151 	.word	0x0802a151

080223b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80223b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223b8:	ed2d 8b08 	vpush	{d8-d11}
 80223bc:	b093      	sub	sp, #76	; 0x4c
 80223be:	eeb0 aa40 	vmov.f32	s20, s0
 80223c2:	eef0 9a60 	vmov.f32	s19, s1
 80223c6:	9210      	str	r2, [sp, #64]	; 0x40
 80223c8:	eeb0 9a41 	vmov.f32	s18, s2
 80223cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80223ce:	eeb0 8a62 	vmov.f32	s16, s5
 80223d2:	9011      	str	r0, [sp, #68]	; 0x44
 80223d4:	eef0 8a43 	vmov.f32	s17, s6
 80223d8:	6850      	ldr	r0, [r2, #4]
 80223da:	eef0 ba44 	vmov.f32	s23, s8
 80223de:	910e      	str	r1, [sp, #56]	; 0x38
 80223e0:	eeb0 ba64 	vmov.f32	s22, s9
 80223e4:	9306      	str	r3, [sp, #24]
 80223e6:	eef0 aa45 	vmov.f32	s21, s10
 80223ea:	6812      	ldr	r2, [r2, #0]
 80223ec:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80223f0:	fb00 1303 	mla	r3, r0, r3, r1
 80223f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80223f8:	9307      	str	r3, [sp, #28]
 80223fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	9308      	str	r3, [sp, #32]
 8022400:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022402:	685b      	ldr	r3, [r3, #4]
 8022404:	9309      	str	r3, [sp, #36]	; 0x24
 8022406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022408:	2b00      	cmp	r3, #0
 802240a:	dc03      	bgt.n	8022414 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802240c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802240e:	2b00      	cmp	r3, #0
 8022410:	f340 83b6 	ble.w	8022b80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8022414:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022416:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802241a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802241e:	1e48      	subs	r0, r1, #1
 8022420:	1e55      	subs	r5, r2, #1
 8022422:	9b06      	ldr	r3, [sp, #24]
 8022424:	2b00      	cmp	r3, #0
 8022426:	f340 8165 	ble.w	80226f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802242a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 802242c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802242e:	1436      	asrs	r6, r6, #16
 8022430:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022434:	d406      	bmi.n	8022444 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022436:	4286      	cmp	r6, r0
 8022438:	da04      	bge.n	8022444 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802243a:	2b00      	cmp	r3, #0
 802243c:	db02      	blt.n	8022444 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802243e:	42ab      	cmp	r3, r5
 8022440:	f2c0 8159 	blt.w	80226f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022444:	3601      	adds	r6, #1
 8022446:	f100 8146 	bmi.w	80226d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802244a:	42b1      	cmp	r1, r6
 802244c:	f2c0 8143 	blt.w	80226d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022450:	3301      	adds	r3, #1
 8022452:	f100 8140 	bmi.w	80226d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022456:	429a      	cmp	r2, r3
 8022458:	f2c0 813d 	blt.w	80226d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802245c:	9b06      	ldr	r3, [sp, #24]
 802245e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022462:	9f07      	ldr	r7, [sp, #28]
 8022464:	930f      	str	r3, [sp, #60]	; 0x3c
 8022466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022468:	2b00      	cmp	r3, #0
 802246a:	f340 8166 	ble.w	802273a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802246e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022470:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8022472:	1418      	asrs	r0, r3, #16
 8022474:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022476:	142d      	asrs	r5, r5, #16
 8022478:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802247c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802247e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8022482:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022484:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8022488:	f100 81f0 	bmi.w	802286c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802248c:	f102 3eff 	add.w	lr, r2, #4294967295
 8022490:	4575      	cmp	r5, lr
 8022492:	f280 81eb 	bge.w	802286c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8022496:	2800      	cmp	r0, #0
 8022498:	f2c0 81e8 	blt.w	802286c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802249c:	f103 3eff 	add.w	lr, r3, #4294967295
 80224a0:	4570      	cmp	r0, lr
 80224a2:	f280 81e3 	bge.w	802286c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80224a6:	b212      	sxth	r2, r2
 80224a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224aa:	fa1f fe81 	uxth.w	lr, r1
 80224ae:	fb00 5002 	mla	r0, r0, r2, r5
 80224b2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80224b6:	eb03 0a00 	add.w	sl, r3, r0
 80224ba:	f813 9000 	ldrb.w	r9, [r3, r0]
 80224be:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80224c2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80224c6:	b29b      	uxth	r3, r3
 80224c8:	f1bc 0f00 	cmp.w	ip, #0
 80224cc:	f000 817b 	beq.w	80227c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80224d0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80224d4:	eb0a 0b02 	add.w	fp, sl, r2
 80224d8:	fa1f fa8c 	uxth.w	sl, ip
 80224dc:	940a      	str	r4, [sp, #40]	; 0x28
 80224de:	fb0a fe0e 	mul.w	lr, sl, lr
 80224e2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80224e6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80224ea:	eba5 050e 	sub.w	r5, r5, lr
 80224ee:	940b      	str	r4, [sp, #44]	; 0x2c
 80224f0:	fa1f fa8a 	uxth.w	sl, sl
 80224f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80224f6:	b2ad      	uxth	r5, r5
 80224f8:	eba3 030a 	sub.w	r3, r3, sl
 80224fc:	fb08 f505 	mul.w	r5, r8, r5
 8022500:	b29b      	uxth	r3, r3
 8022502:	fb09 5303 	mla	r3, r9, r3, r5
 8022506:	fb0a 3304 	mla	r3, sl, r4, r3
 802250a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802250c:	fb0e 3304 	mla	r3, lr, r4, r3
 8022510:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022514:	2b00      	cmp	r3, #0
 8022516:	f000 80d1 	beq.w	80226bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802251a:	9c08      	ldr	r4, [sp, #32]
 802251c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022520:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8022524:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8022528:	f000 8152 	beq.w	80227d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802252c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022530:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022534:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022538:	fb0a fe0e 	mul.w	lr, sl, lr
 802253c:	fb09 f000 	mul.w	r0, r9, r0
 8022540:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8022544:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022548:	f100 0b20 	add.w	fp, r0, #32
 802254c:	44ce      	add	lr, r9
 802254e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8022552:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8022556:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802255a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802255e:	ea4e 0909 	orr.w	r9, lr, r9
 8022562:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022566:	8868      	ldrh	r0, [r5, #2]
 8022568:	d019      	beq.n	802259e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802256a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802256e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022572:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022576:	fb0a fe0e 	mul.w	lr, sl, lr
 802257a:	fb08 f800 	mul.w	r8, r8, r0
 802257e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8022582:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022586:	f108 0b20 	add.w	fp, r8, #32
 802258a:	4486      	add	lr, r0
 802258c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8022590:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8022594:	0a00      	lsrs	r0, r0, #8
 8022596:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802259a:	ea4e 0000 	orr.w	r0, lr, r0
 802259e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80225a2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80225a6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80225aa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80225ae:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80225b2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80225b6:	ea4e 0909 	orr.w	r9, lr, r9
 80225ba:	ea4a 0000 	orr.w	r0, sl, r0
 80225be:	f1bc 0f00 	cmp.w	ip, #0
 80225c2:	f000 8107 	beq.w	80227d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80225c6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80225ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80225cc:	3a01      	subs	r2, #1
 80225ce:	2cff      	cmp	r4, #255	; 0xff
 80225d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80225d4:	f102 0202 	add.w	r2, r2, #2
 80225d8:	eb05 0e02 	add.w	lr, r5, r2
 80225dc:	5aaa      	ldrh	r2, [r5, r2]
 80225de:	d018      	beq.n	8022612 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80225e0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80225e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80225e8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80225ec:	fb04 fa02 	mul.w	sl, r4, r2
 80225f0:	fb08 f805 	mul.w	r8, r8, r5
 80225f4:	f10a 0520 	add.w	r5, sl, #32
 80225f8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80225fc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022600:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8022604:	4442      	add	r2, r8
 8022606:	0a2d      	lsrs	r5, r5, #8
 8022608:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802260c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022610:	432a      	orrs	r2, r5
 8022612:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022614:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8022618:	2cff      	cmp	r4, #255	; 0xff
 802261a:	d01a      	beq.n	8022652 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802261c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8022620:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022624:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022628:	fb04 fa05 	mul.w	sl, r4, r5
 802262c:	fb08 f80e 	mul.w	r8, r8, lr
 8022630:	f10a 0e20 	add.w	lr, sl, #32
 8022634:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8022638:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802263c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8022640:	4445      	add	r5, r8
 8022642:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022646:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802264a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802264e:	ea45 050e 	orr.w	r5, r5, lr
 8022652:	fb1c fe01 	smulbb	lr, ip, r1
 8022656:	f1cc 0810 	rsb	r8, ip, #16
 802265a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802265e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022662:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8022666:	eba8 0801 	sub.w	r8, r8, r1
 802266a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802266e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022672:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8022676:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802267a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802267e:	ea4a 0202 	orr.w	r2, sl, r2
 8022682:	4341      	muls	r1, r0
 8022684:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8022688:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802268c:	fb09 1108 	mla	r1, r9, r8, r1
 8022690:	ea4b 0505 	orr.w	r5, fp, r5
 8022694:	fb0c 1102 	mla	r1, ip, r2, r1
 8022698:	fb0e 1e05 	mla	lr, lr, r5, r1
 802269c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80226a0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80226a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80226a8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80226ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80226b0:	fa1f f28e 	uxth.w	r2, lr
 80226b4:	2bff      	cmp	r3, #255	; 0xff
 80226b6:	f040 80a1 	bne.w	80227fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 80226ba:	803a      	strh	r2, [r7, #0]
 80226bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80226be:	3702      	adds	r7, #2
 80226c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80226c2:	4413      	add	r3, r2
 80226c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80226c6:	9325      	str	r3, [sp, #148]	; 0x94
 80226c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80226ca:	441a      	add	r2, r3
 80226cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80226ce:	3b01      	subs	r3, #1
 80226d0:	9226      	str	r2, [sp, #152]	; 0x98
 80226d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80226d4:	e6c7      	b.n	8022466 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80226d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80226d8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80226da:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80226dc:	4433      	add	r3, r6
 80226de:	9325      	str	r3, [sp, #148]	; 0x94
 80226e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80226e2:	441c      	add	r4, r3
 80226e4:	9b06      	ldr	r3, [sp, #24]
 80226e6:	3b01      	subs	r3, #1
 80226e8:	9426      	str	r4, [sp, #152]	; 0x98
 80226ea:	9306      	str	r3, [sp, #24]
 80226ec:	9b07      	ldr	r3, [sp, #28]
 80226ee:	3302      	adds	r3, #2
 80226f0:	9307      	str	r3, [sp, #28]
 80226f2:	e696      	b.n	8022422 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80226f4:	d028      	beq.n	8022748 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80226f6:	9b06      	ldr	r3, [sp, #24]
 80226f8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80226fa:	3b01      	subs	r3, #1
 80226fc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80226fe:	fb00 5003 	mla	r0, r0, r3, r5
 8022702:	1400      	asrs	r0, r0, #16
 8022704:	f53f aeaa 	bmi.w	802245c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022708:	3901      	subs	r1, #1
 802270a:	4288      	cmp	r0, r1
 802270c:	f6bf aea6 	bge.w	802245c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022710:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022712:	9826      	ldr	r0, [sp, #152]	; 0x98
 8022714:	fb01 0303 	mla	r3, r1, r3, r0
 8022718:	141b      	asrs	r3, r3, #16
 802271a:	f53f ae9f 	bmi.w	802245c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802271e:	3a01      	subs	r2, #1
 8022720:	4293      	cmp	r3, r2
 8022722:	f6bf ae9b 	bge.w	802245c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022726:	9b06      	ldr	r3, [sp, #24]
 8022728:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802272c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022730:	930f      	str	r3, [sp, #60]	; 0x3c
 8022732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022734:	2b00      	cmp	r3, #0
 8022736:	f300 80b6 	bgt.w	80228a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802273a:	9b06      	ldr	r3, [sp, #24]
 802273c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022740:	9b07      	ldr	r3, [sp, #28]
 8022742:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022746:	9307      	str	r3, [sp, #28]
 8022748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802274a:	2b00      	cmp	r3, #0
 802274c:	f340 8218 	ble.w	8022b80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8022750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022754:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022756:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802275a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802275e:	eef0 6a48 	vmov.f32	s13, s16
 8022762:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022766:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802276a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802276e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8022772:	eef0 6a68 	vmov.f32	s13, s17
 8022776:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802277a:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 802277e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022782:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022786:	ee37 8a48 	vsub.f32	s16, s14, s16
 802278a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802278e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022792:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022796:	ee18 2a10 	vmov	r2, s16
 802279a:	eeb0 8a47 	vmov.f32	s16, s14
 802279e:	fb92 f3f3 	sdiv	r3, r2, r3
 80227a2:	ee18 2a90 	vmov	r2, s17
 80227a6:	9327      	str	r3, [sp, #156]	; 0x9c
 80227a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80227aa:	eef0 8a67 	vmov.f32	s17, s15
 80227ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80227b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80227b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80227b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80227b8:	3b01      	subs	r3, #1
 80227ba:	930e      	str	r3, [sp, #56]	; 0x38
 80227bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80227be:	bf08      	it	eq
 80227c0:	4613      	moveq	r3, r2
 80227c2:	9306      	str	r3, [sp, #24]
 80227c4:	e61f      	b.n	8022406 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80227c6:	fb08 f505 	mul.w	r5, r8, r5
 80227ca:	fb09 5303 	mla	r3, r9, r3, r5
 80227ce:	e69f      	b.n	8022510 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80227d0:	4681      	mov	r9, r0
 80227d2:	e6c6      	b.n	8022562 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80227d4:	f1c1 0210 	rsb	r2, r1, #16
 80227d8:	4341      	muls	r1, r0
 80227da:	fb09 1902 	mla	r9, r9, r2, r1
 80227de:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80227e2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80227e6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80227ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80227ee:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80227f2:	ea42 0909 	orr.w	r9, r2, r9
 80227f6:	fa1f f289 	uxth.w	r2, r9
 80227fa:	e75b      	b.n	80226b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80227fc:	f8b7 c000 	ldrh.w	ip, [r7]
 8022800:	43db      	mvns	r3, r3
 8022802:	ea4f 202c 	mov.w	r0, ip, asr #8
 8022806:	fa5f fe83 	uxtb.w	lr, r3
 802280a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802280e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022812:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8022816:	fb00 f00e 	mul.w	r0, r0, lr
 802281a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802281e:	b2db      	uxtb	r3, r3
 8022820:	1c41      	adds	r1, r0, #1
 8022822:	fb05 f50e 	mul.w	r5, r5, lr
 8022826:	fb03 f30e 	mul.w	r3, r3, lr
 802282a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802282e:	1211      	asrs	r1, r2, #8
 8022830:	f021 0107 	bic.w	r1, r1, #7
 8022834:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022838:	48d4      	ldr	r0, [pc, #848]	; (8022b8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 802283a:	b2c9      	uxtb	r1, r1
 802283c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8022840:	1c69      	adds	r1, r5, #1
 8022842:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022846:	10d1      	asrs	r1, r2, #3
 8022848:	00d2      	lsls	r2, r2, #3
 802284a:	f021 0103 	bic.w	r1, r1, #3
 802284e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022852:	00c9      	lsls	r1, r1, #3
 8022854:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022858:	4301      	orrs	r1, r0
 802285a:	1c58      	adds	r0, r3, #1
 802285c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022860:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022864:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022868:	430a      	orrs	r2, r1
 802286a:	e726      	b.n	80226ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802286c:	f115 0e01 	adds.w	lr, r5, #1
 8022870:	f53f af24 	bmi.w	80226bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8022874:	4572      	cmp	r2, lr
 8022876:	f6ff af21 	blt.w	80226bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802287a:	f110 0e01 	adds.w	lr, r0, #1
 802287e:	f53f af1d 	bmi.w	80226bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8022882:	4573      	cmp	r3, lr
 8022884:	f6ff af1a 	blt.w	80226bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8022888:	b21b      	sxth	r3, r3
 802288a:	b212      	sxth	r2, r2
 802288c:	9301      	str	r3, [sp, #4]
 802288e:	9200      	str	r2, [sp, #0]
 8022890:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8022894:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8022898:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802289c:	4639      	mov	r1, r7
 802289e:	9811      	ldr	r0, [sp, #68]	; 0x44
 80228a0:	f7ff fbf2 	bl	8022088 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80228a4:	e70a      	b.n	80226bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80228a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80228a8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80228ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80228ae:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80228b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80228b4:	fa1f fc82 	uxth.w	ip, r2
 80228b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80228bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80228be:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80228c2:	141f      	asrs	r7, r3, #16
 80228c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80228c6:	141b      	asrs	r3, r3, #16
 80228c8:	fb01 3707 	mla	r7, r1, r7, r3
 80228cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228ce:	eb03 0a07 	add.w	sl, r3, r7
 80228d2:	f813 9007 	ldrb.w	r9, [r3, r7]
 80228d6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80228da:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80228de:	b29b      	uxth	r3, r3
 80228e0:	2d00      	cmp	r5, #0
 80228e2:	f000 80fe 	beq.w	8022ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80228e6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80228ea:	eb0a 0b01 	add.w	fp, sl, r1
 80228ee:	fa1f fa85 	uxth.w	sl, r5
 80228f2:	940c      	str	r4, [sp, #48]	; 0x30
 80228f4:	fb0a fc0c 	mul.w	ip, sl, ip
 80228f8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80228fc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022900:	eba0 000c 	sub.w	r0, r0, ip
 8022904:	940d      	str	r4, [sp, #52]	; 0x34
 8022906:	fa1f fa8a 	uxth.w	sl, sl
 802290a:	b280      	uxth	r0, r0
 802290c:	eba3 030a 	sub.w	r3, r3, sl
 8022910:	fb08 f000 	mul.w	r0, r8, r0
 8022914:	b29b      	uxth	r3, r3
 8022916:	fb09 0303 	mla	r3, r9, r3, r0
 802291a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802291c:	fb0a 3300 	mla	r3, sl, r0, r3
 8022920:	fb0c 3304 	mla	r3, ip, r4, r3
 8022924:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022928:	2b00      	cmp	r3, #0
 802292a:	f000 80cc 	beq.w	8022ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 802292e:	9808      	ldr	r0, [sp, #32]
 8022930:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022934:	9c08      	ldr	r4, [sp, #32]
 8022936:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802293a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802293e:	f000 80d5 	beq.w	8022aec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8022942:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022946:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802294a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802294e:	fb0a fc0c 	mul.w	ip, sl, ip
 8022952:	fb09 f707 	mul.w	r7, r9, r7
 8022956:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802295a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802295e:	f107 0b20 	add.w	fp, r7, #32
 8022962:	44cc      	add	ip, r9
 8022964:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022968:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802296c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022970:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022974:	ea4c 0909 	orr.w	r9, ip, r9
 8022978:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802297c:	8847      	ldrh	r7, [r0, #2]
 802297e:	d019      	beq.n	80229b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8022980:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022984:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022988:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802298c:	fb0a fc0c 	mul.w	ip, sl, ip
 8022990:	fb08 f807 	mul.w	r8, r8, r7
 8022994:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022998:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802299c:	f108 0b20 	add.w	fp, r8, #32
 80229a0:	44bc      	add	ip, r7
 80229a2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80229a6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80229aa:	0a3f      	lsrs	r7, r7, #8
 80229ac:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80229b0:	ea4c 0707 	orr.w	r7, ip, r7
 80229b4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80229b8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80229bc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80229c0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80229c4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80229c8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80229cc:	ea4c 0909 	orr.w	r9, ip, r9
 80229d0:	ea4a 0707 	orr.w	r7, sl, r7
 80229d4:	2d00      	cmp	r5, #0
 80229d6:	f000 808b 	beq.w	8022af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80229da:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80229de:	3901      	subs	r1, #1
 80229e0:	0049      	lsls	r1, r1, #1
 80229e2:	3102      	adds	r1, #2
 80229e4:	eb00 0c01 	add.w	ip, r0, r1
 80229e8:	5a41      	ldrh	r1, [r0, r1]
 80229ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80229ec:	28ff      	cmp	r0, #255	; 0xff
 80229ee:	d019      	beq.n	8022a24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80229f0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80229f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80229f6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80229fa:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80229fe:	fb04 fa01 	mul.w	sl, r4, r1
 8022a02:	fb08 f800 	mul.w	r8, r8, r0
 8022a06:	f10a 0020 	add.w	r0, sl, #32
 8022a0a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022a0e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022a12:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022a16:	4441      	add	r1, r8
 8022a18:	0a00      	lsrs	r0, r0, #8
 8022a1a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022a1e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022a22:	4301      	orrs	r1, r0
 8022a24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022a26:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022a2a:	2cff      	cmp	r4, #255	; 0xff
 8022a2c:	d01a      	beq.n	8022a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8022a2e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022a32:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022a36:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022a3a:	fb04 fa00 	mul.w	sl, r4, r0
 8022a3e:	fb08 f80c 	mul.w	r8, r8, ip
 8022a42:	f10a 0c20 	add.w	ip, sl, #32
 8022a46:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022a4a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022a4e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022a52:	4440      	add	r0, r8
 8022a54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022a58:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022a5c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022a60:	ea40 000c 	orr.w	r0, r0, ip
 8022a64:	fb15 fc02 	smulbb	ip, r5, r2
 8022a68:	f1c5 0810 	rsb	r8, r5, #16
 8022a6c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022a70:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022a74:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022a78:	eba8 0802 	sub.w	r8, r8, r2
 8022a7c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022a80:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022a84:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022a88:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022a8c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022a90:	ea4a 0101 	orr.w	r1, sl, r1
 8022a94:	437a      	muls	r2, r7
 8022a96:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022a9a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022a9e:	fb09 2208 	mla	r2, r9, r8, r2
 8022aa2:	ea4b 0000 	orr.w	r0, fp, r0
 8022aa6:	fb05 2201 	mla	r2, r5, r1, r2
 8022aaa:	fb0c 2200 	mla	r2, ip, r0, r2
 8022aae:	0d57      	lsrs	r7, r2, #21
 8022ab0:	0952      	lsrs	r2, r2, #5
 8022ab2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022ab6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022aba:	433a      	orrs	r2, r7
 8022abc:	2bff      	cmp	r3, #255	; 0xff
 8022abe:	b292      	uxth	r2, r2
 8022ac0:	d127      	bne.n	8022b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8022ac2:	f8ae 2000 	strh.w	r2, [lr]
 8022ac6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022ac8:	f10e 0e02 	add.w	lr, lr, #2
 8022acc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022ace:	4413      	add	r3, r2
 8022ad0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022ad2:	9325      	str	r3, [sp, #148]	; 0x94
 8022ad4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022ad6:	441a      	add	r2, r3
 8022ad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022ada:	3b01      	subs	r3, #1
 8022adc:	9226      	str	r2, [sp, #152]	; 0x98
 8022ade:	930f      	str	r3, [sp, #60]	; 0x3c
 8022ae0:	e627      	b.n	8022732 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8022ae2:	fb08 f000 	mul.w	r0, r8, r0
 8022ae6:	fb09 0303 	mla	r3, r9, r3, r0
 8022aea:	e71b      	b.n	8022924 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8022aec:	46b9      	mov	r9, r7
 8022aee:	e743      	b.n	8022978 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8022af0:	f1c2 0110 	rsb	r1, r2, #16
 8022af4:	437a      	muls	r2, r7
 8022af6:	fb09 2901 	mla	r9, r9, r1, r2
 8022afa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022afe:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022b02:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022b06:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022b0a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022b0e:	4302      	orrs	r2, r0
 8022b10:	e7d4      	b.n	8022abc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8022b12:	f8be 7000 	ldrh.w	r7, [lr]
 8022b16:	43db      	mvns	r3, r3
 8022b18:	4c1c      	ldr	r4, [pc, #112]	; (8022b8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8022b1a:	1238      	asrs	r0, r7, #8
 8022b1c:	fa5f fc83 	uxtb.w	ip, r3
 8022b20:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022b24:	10fd      	asrs	r5, r7, #3
 8022b26:	00fb      	lsls	r3, r7, #3
 8022b28:	fb00 f00c 	mul.w	r0, r0, ip
 8022b2c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022b30:	b2db      	uxtb	r3, r3
 8022b32:	fb05 f10c 	mul.w	r1, r5, ip
 8022b36:	1c45      	adds	r5, r0, #1
 8022b38:	fb03 f30c 	mul.w	r3, r3, ip
 8022b3c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022b40:	1215      	asrs	r5, r2, #8
 8022b42:	f025 0507 	bic.w	r5, r5, #7
 8022b46:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022b4a:	1c4d      	adds	r5, r1, #1
 8022b4c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022b50:	10d1      	asrs	r1, r2, #3
 8022b52:	b2c0      	uxtb	r0, r0
 8022b54:	f021 0103 	bic.w	r1, r1, #3
 8022b58:	00d2      	lsls	r2, r2, #3
 8022b5a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8022b5e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022b62:	00c9      	lsls	r1, r1, #3
 8022b64:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022b68:	4308      	orrs	r0, r1
 8022b6a:	1c59      	adds	r1, r3, #1
 8022b6c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022b70:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b74:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8022b78:	4318      	orrs	r0, r3
 8022b7a:	f8ae 0000 	strh.w	r0, [lr]
 8022b7e:	e7a2      	b.n	8022ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8022b80:	b013      	add	sp, #76	; 0x4c
 8022b82:	ecbd 8b08 	vpop	{d8-d11}
 8022b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b8a:	bf00      	nop
 8022b8c:	fffff800 	.word	0xfffff800

08022b90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8022b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022b94:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8022b98:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8022b9c:	fb0c 4e03 	mla	lr, ip, r3, r4
 8022ba0:	f1bc 0f00 	cmp.w	ip, #0
 8022ba4:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8022ba8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8022bac:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8022bb0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8022bb4:	8808      	ldrh	r0, [r1, #0]
 8022bb6:	db2f      	blt.n	8022c18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8022bb8:	45e2      	cmp	sl, ip
 8022bba:	dd2d      	ble.n	8022c18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8022bbc:	2c00      	cmp	r4, #0
 8022bbe:	db29      	blt.n	8022c14 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8022bc0:	42a3      	cmp	r3, r4
 8022bc2:	dd27      	ble.n	8022c14 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8022bc4:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8022bc8:	1c62      	adds	r2, r4, #1
 8022bca:	d428      	bmi.n	8022c1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8022bcc:	4293      	cmp	r3, r2
 8022bce:	dd26      	ble.n	8022c1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8022bd0:	b32f      	cbz	r7, 8022c1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8022bd2:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8022bd6:	f11c 0c01 	adds.w	ip, ip, #1
 8022bda:	d424      	bmi.n	8022c26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8022bdc:	45e2      	cmp	sl, ip
 8022bde:	dd22      	ble.n	8022c26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8022be0:	2e00      	cmp	r6, #0
 8022be2:	f000 809d 	beq.w	8022d20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8022be6:	2c00      	cmp	r4, #0
 8022be8:	db1b      	blt.n	8022c22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8022bea:	42a3      	cmp	r3, r4
 8022bec:	dd19      	ble.n	8022c22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8022bee:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8022bf2:	3401      	adds	r4, #1
 8022bf4:	d41a      	bmi.n	8022c2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8022bf6:	42a3      	cmp	r3, r4
 8022bf8:	dd18      	ble.n	8022c2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8022bfa:	b1cf      	cbz	r7, 8022c30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8022bfc:	3301      	adds	r3, #1
 8022bfe:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8022c02:	2f0f      	cmp	r7, #15
 8022c04:	d915      	bls.n	8022c32 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8022c06:	4b49      	ldr	r3, [pc, #292]	; (8022d2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8022c08:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8022c0c:	4a48      	ldr	r2, [pc, #288]	; (8022d30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8022c0e:	4849      	ldr	r0, [pc, #292]	; (8022d34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8022c10:	f002 ffb0 	bl	8025b74 <__assert_func>
 8022c14:	4681      	mov	r9, r0
 8022c16:	e7d7      	b.n	8022bc8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8022c18:	4686      	mov	lr, r0
 8022c1a:	4681      	mov	r9, r0
 8022c1c:	e7db      	b.n	8022bd6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8022c1e:	4686      	mov	lr, r0
 8022c20:	e7d9      	b.n	8022bd6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8022c22:	4684      	mov	ip, r0
 8022c24:	e7e5      	b.n	8022bf2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8022c26:	4603      	mov	r3, r0
 8022c28:	4684      	mov	ip, r0
 8022c2a:	e7ea      	b.n	8022c02 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8022c2c:	4603      	mov	r3, r0
 8022c2e:	e7e8      	b.n	8022c02 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8022c30:	4603      	mov	r3, r0
 8022c32:	2e0f      	cmp	r6, #15
 8022c34:	d8e7      	bhi.n	8022c06 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8022c36:	fb17 f806 	smulbb	r8, r7, r6
 8022c3a:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8022c3e:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8022c42:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022c46:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022c4a:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8022c4e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022c52:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022c56:	ea44 0909 	orr.w	r9, r4, r9
 8022c5a:	f1c6 0410 	rsb	r4, r6, #16
 8022c5e:	041a      	lsls	r2, r3, #16
 8022c60:	ea4a 0e0e 	orr.w	lr, sl, lr
 8022c64:	1be4      	subs	r4, r4, r7
 8022c66:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8022c6a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022c6e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022c72:	fb07 fe0e 	mul.w	lr, r7, lr
 8022c76:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8022c7a:	4313      	orrs	r3, r2
 8022c7c:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8022c80:	fb04 e409 	mla	r4, r4, r9, lr
 8022c84:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8022c88:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022c8c:	b2af      	uxth	r7, r5
 8022c8e:	fb08 4303 	mla	r3, r8, r3, r4
 8022c92:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8022c96:	43ed      	mvns	r5, r5
 8022c98:	4322      	orrs	r2, r4
 8022c9a:	b2ed      	uxtb	r5, r5
 8022c9c:	fb06 3202 	mla	r2, r6, r2, r3
 8022ca0:	10c6      	asrs	r6, r0, #3
 8022ca2:	0d53      	lsrs	r3, r2, #21
 8022ca4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022ca8:	0952      	lsrs	r2, r2, #5
 8022caa:	fb16 f605 	smulbb	r6, r6, r5
 8022cae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022cb2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022cb6:	431a      	orrs	r2, r3
 8022cb8:	b293      	uxth	r3, r2
 8022cba:	1202      	asrs	r2, r0, #8
 8022cbc:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022cc0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022cc4:	00dc      	lsls	r4, r3, #3
 8022cc6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022cca:	fb12 f205 	smulbb	r2, r2, r5
 8022cce:	b2e4      	uxtb	r4, r4
 8022cd0:	fb0c 2c07 	mla	ip, ip, r7, r2
 8022cd4:	10da      	asrs	r2, r3, #3
 8022cd6:	00c3      	lsls	r3, r0, #3
 8022cd8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022cdc:	fa1f fc8c 	uxth.w	ip, ip
 8022ce0:	b2db      	uxtb	r3, r3
 8022ce2:	fb02 6207 	mla	r2, r2, r7, r6
 8022ce6:	fb13 f305 	smulbb	r3, r3, r5
 8022cea:	b296      	uxth	r6, r2
 8022cec:	fb04 3307 	mla	r3, r4, r7, r3
 8022cf0:	b29a      	uxth	r2, r3
 8022cf2:	f10c 0301 	add.w	r3, ip, #1
 8022cf6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022cfa:	1c53      	adds	r3, r2, #1
 8022cfc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022d00:	1c72      	adds	r2, r6, #1
 8022d02:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022d06:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8022d0a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022d0e:	0952      	lsrs	r2, r2, #5
 8022d10:	ea43 030c 	orr.w	r3, r3, ip
 8022d14:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022d18:	4313      	orrs	r3, r2
 8022d1a:	800b      	strh	r3, [r1, #0]
 8022d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d20:	2f0f      	cmp	r7, #15
 8022d22:	f63f af70 	bhi.w	8022c06 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8022d26:	4603      	mov	r3, r0
 8022d28:	4684      	mov	ip, r0
 8022d2a:	e784      	b.n	8022c36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8022d2c:	0802a0cd 	.word	0x0802a0cd
 8022d30:	0802a743 	.word	0x0802a743
 8022d34:	0802a151 	.word	0x0802a151

08022d38 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d3c:	ed2d 8b08 	vpush	{d8-d11}
 8022d40:	b093      	sub	sp, #76	; 0x4c
 8022d42:	461d      	mov	r5, r3
 8022d44:	eeb0 aa40 	vmov.f32	s20, s0
 8022d48:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022d4a:	eef0 9a60 	vmov.f32	s19, s1
 8022d4e:	9210      	str	r2, [sp, #64]	; 0x40
 8022d50:	eeb0 9a41 	vmov.f32	s18, s2
 8022d54:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8022d58:	eeb0 8a62 	vmov.f32	s16, s5
 8022d5c:	910a      	str	r1, [sp, #40]	; 0x28
 8022d5e:	eef0 8a43 	vmov.f32	s17, s6
 8022d62:	920b      	str	r2, [sp, #44]	; 0x2c
 8022d64:	eef0 ba44 	vmov.f32	s23, s8
 8022d68:	6859      	ldr	r1, [r3, #4]
 8022d6a:	eeb0 ba64 	vmov.f32	s22, s9
 8022d6e:	681b      	ldr	r3, [r3, #0]
 8022d70:	eef0 aa45 	vmov.f32	s21, s10
 8022d74:	9011      	str	r0, [sp, #68]	; 0x44
 8022d76:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8022d7a:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8022d7e:	fb01 2707 	mla	r7, r1, r7, r2
 8022d82:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8022d86:	9307      	str	r3, [sp, #28]
 8022d88:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022d8a:	681b      	ldr	r3, [r3, #0]
 8022d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8022d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022d90:	43db      	mvns	r3, r3
 8022d92:	b2db      	uxtb	r3, r3
 8022d94:	9308      	str	r3, [sp, #32]
 8022d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d98:	2b00      	cmp	r3, #0
 8022d9a:	dc03      	bgt.n	8022da4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022d9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022d9e:	2b00      	cmp	r3, #0
 8022da0:	f340 8205 	ble.w	80231ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8022da4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022da6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022daa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022dae:	1e48      	subs	r0, r1, #1
 8022db0:	f102 3cff 	add.w	ip, r2, #4294967295
 8022db4:	2d00      	cmp	r5, #0
 8022db6:	f340 80da 	ble.w	8022f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022dba:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022dbe:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022dc2:	d406      	bmi.n	8022dd2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022dc4:	4586      	cmp	lr, r0
 8022dc6:	da04      	bge.n	8022dd2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	db02      	blt.n	8022dd2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022dcc:	4563      	cmp	r3, ip
 8022dce:	f2c0 80cf 	blt.w	8022f70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022dd2:	f11e 0e01 	adds.w	lr, lr, #1
 8022dd6:	f100 80c1 	bmi.w	8022f5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022dda:	4571      	cmp	r1, lr
 8022ddc:	f2c0 80be 	blt.w	8022f5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022de0:	3301      	adds	r3, #1
 8022de2:	f100 80bb 	bmi.w	8022f5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022de6:	429a      	cmp	r2, r3
 8022de8:	f2c0 80b8 	blt.w	8022f5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022dec:	46a9      	mov	r9, r5
 8022dee:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022df2:	f1b9 0f00 	cmp.w	r9, #0
 8022df6:	f340 80d8 	ble.w	8022faa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022dfa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022dfc:	1421      	asrs	r1, r4, #16
 8022dfe:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022e02:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022e06:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022e0a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022e0e:	f100 8112 	bmi.w	8023036 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022e12:	f10e 3aff 	add.w	sl, lr, #4294967295
 8022e16:	4551      	cmp	r1, sl
 8022e18:	f280 810d 	bge.w	8023036 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022e1c:	2800      	cmp	r0, #0
 8022e1e:	f2c0 810a 	blt.w	8023036 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022e22:	f103 3aff 	add.w	sl, r3, #4294967295
 8022e26:	4550      	cmp	r0, sl
 8022e28:	f280 8105 	bge.w	8023036 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022e2c:	fa0f f38e 	sxth.w	r3, lr
 8022e30:	fb00 1103 	mla	r1, r0, r3, r1
 8022e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022e36:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8022e3a:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8022e3e:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8022e42:	f1bc 0f00 	cmp.w	ip, #0
 8022e46:	d007      	beq.n	8022e58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8022e48:	005b      	lsls	r3, r3, #1
 8022e4a:	eb0a 0003 	add.w	r0, sl, r3
 8022e4e:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8022e52:	930c      	str	r3, [sp, #48]	; 0x30
 8022e54:	8843      	ldrh	r3, [r0, #2]
 8022e56:	930d      	str	r3, [sp, #52]	; 0x34
 8022e58:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8022e5c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022e60:	fb12 f30c 	smulbb	r3, r2, ip
 8022e64:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022e68:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022e6c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022e70:	10db      	asrs	r3, r3, #3
 8022e72:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022e76:	ea40 000e 	orr.w	r0, r0, lr
 8022e7a:	f1cc 0e10 	rsb	lr, ip, #16
 8022e7e:	ea4a 0101 	orr.w	r1, sl, r1
 8022e82:	9f08      	ldr	r7, [sp, #32]
 8022e84:	ebae 0e02 	sub.w	lr, lr, r2
 8022e88:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022e8c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022e90:	4351      	muls	r1, r2
 8022e92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022e94:	fb0e 1e00 	mla	lr, lr, r0, r1
 8022e98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022e9a:	0410      	lsls	r0, r2, #16
 8022e9c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022ea0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022ea4:	4310      	orrs	r0, r2
 8022ea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022ea8:	0412      	lsls	r2, r2, #16
 8022eaa:	fb03 e000 	mla	r0, r3, r0, lr
 8022eae:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022eb2:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022eb6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022eba:	ea42 020e 	orr.w	r2, r2, lr
 8022ebe:	fb03 0302 	mla	r3, r3, r2, r0
 8022ec2:	f8b8 0000 	ldrh.w	r0, [r8]
 8022ec6:	0d5a      	lsrs	r2, r3, #21
 8022ec8:	095b      	lsrs	r3, r3, #5
 8022eca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022ece:	1201      	asrs	r1, r0, #8
 8022ed0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022ed4:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022ed8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022edc:	00c0      	lsls	r0, r0, #3
 8022ede:	4313      	orrs	r3, r2
 8022ee0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8022ee4:	fb11 f107 	smulbb	r1, r1, r7
 8022ee8:	b2c0      	uxtb	r0, r0
 8022eea:	b29b      	uxth	r3, r3
 8022eec:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022ef0:	fb10 f007 	smulbb	r0, r0, r7
 8022ef4:	fb1e fe07 	smulbb	lr, lr, r7
 8022ef8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022efc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022f00:	fb0c 1c02 	mla	ip, ip, r2, r1
 8022f04:	10d9      	asrs	r1, r3, #3
 8022f06:	00db      	lsls	r3, r3, #3
 8022f08:	fa1f fc8c 	uxth.w	ip, ip
 8022f0c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022f10:	b2db      	uxtb	r3, r3
 8022f12:	fb01 e102 	mla	r1, r1, r2, lr
 8022f16:	fb03 0302 	mla	r3, r3, r2, r0
 8022f1a:	b289      	uxth	r1, r1
 8022f1c:	b29a      	uxth	r2, r3
 8022f1e:	f10c 0301 	add.w	r3, ip, #1
 8022f22:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022f26:	1c53      	adds	r3, r2, #1
 8022f28:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022f2c:	1c4a      	adds	r2, r1, #1
 8022f2e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022f32:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022f36:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022f3a:	0949      	lsrs	r1, r1, #5
 8022f3c:	ea43 030c 	orr.w	r3, r3, ip
 8022f40:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022f44:	430b      	orrs	r3, r1
 8022f46:	f8a8 3000 	strh.w	r3, [r8]
 8022f4a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022f4c:	f108 0802 	add.w	r8, r8, #2
 8022f50:	f109 39ff 	add.w	r9, r9, #4294967295
 8022f54:	441c      	add	r4, r3
 8022f56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022f58:	441e      	add	r6, r3
 8022f5a:	e74a      	b.n	8022df2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8022f5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022f5e:	3d01      	subs	r5, #1
 8022f60:	441c      	add	r4, r3
 8022f62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022f64:	441e      	add	r6, r3
 8022f66:	9b07      	ldr	r3, [sp, #28]
 8022f68:	3302      	adds	r3, #2
 8022f6a:	9307      	str	r3, [sp, #28]
 8022f6c:	e722      	b.n	8022db4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022f6e:	d022      	beq.n	8022fb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022f70:	1e6b      	subs	r3, r5, #1
 8022f72:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022f74:	fb00 4003 	mla	r0, r0, r3, r4
 8022f78:	1400      	asrs	r0, r0, #16
 8022f7a:	f53f af37 	bmi.w	8022dec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022f7e:	3901      	subs	r1, #1
 8022f80:	4288      	cmp	r0, r1
 8022f82:	f6bf af33 	bge.w	8022dec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022f86:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022f88:	fb01 6303 	mla	r3, r1, r3, r6
 8022f8c:	141b      	asrs	r3, r3, #16
 8022f8e:	f53f af2d 	bmi.w	8022dec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022f92:	3a01      	subs	r2, #1
 8022f94:	4293      	cmp	r3, r2
 8022f96:	f6bf af29 	bge.w	8022dec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022f9a:	46a8      	mov	r8, r5
 8022f9c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8022fa0:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8022fa4:	f1b8 0f00 	cmp.w	r8, #0
 8022fa8:	dc60      	bgt.n	802306c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8022faa:	9b07      	ldr	r3, [sp, #28]
 8022fac:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022fb0:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8022fb4:	9307      	str	r3, [sp, #28]
 8022fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fb8:	2b00      	cmp	r3, #0
 8022fba:	f340 80f8 	ble.w	80231ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8022fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022fc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022fc4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022fc8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022fcc:	eef0 6a48 	vmov.f32	s13, s16
 8022fd0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022fd4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022fd8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fdc:	ee16 4a90 	vmov	r4, s13
 8022fe0:	eef0 6a68 	vmov.f32	s13, s17
 8022fe4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fe8:	ee16 6a90 	vmov	r6, s13
 8022fec:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022ff0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022ff4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022ff8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022ffc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023000:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023004:	ee18 2a10 	vmov	r2, s16
 8023008:	eeb0 8a47 	vmov.f32	s16, s14
 802300c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023010:	ee18 2a90 	vmov	r2, s17
 8023014:	9327      	str	r3, [sp, #156]	; 0x9c
 8023016:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023018:	eef0 8a67 	vmov.f32	s17, s15
 802301c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023020:	9328      	str	r3, [sp, #160]	; 0xa0
 8023022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023026:	3b01      	subs	r3, #1
 8023028:	930a      	str	r3, [sp, #40]	; 0x28
 802302a:	bf08      	it	eq
 802302c:	4615      	moveq	r5, r2
 802302e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023030:	bf18      	it	ne
 8023032:	461d      	movne	r5, r3
 8023034:	e6af      	b.n	8022d96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023036:	f111 0a01 	adds.w	sl, r1, #1
 802303a:	d486      	bmi.n	8022f4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802303c:	45d6      	cmp	lr, sl
 802303e:	db84      	blt.n	8022f4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023040:	f110 0a01 	adds.w	sl, r0, #1
 8023044:	d481      	bmi.n	8022f4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023046:	4553      	cmp	r3, sl
 8023048:	f6ff af7f 	blt.w	8022f4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802304c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802304e:	b21b      	sxth	r3, r3
 8023050:	9101      	str	r1, [sp, #4]
 8023052:	4641      	mov	r1, r8
 8023054:	9300      	str	r3, [sp, #0]
 8023056:	fa0f f38e 	sxth.w	r3, lr
 802305a:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802305e:	e9cd c704 	strd	ip, r7, [sp, #16]
 8023062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023064:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023066:	f7ff fd93 	bl	8022b90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802306a:	e76e      	b.n	8022f4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802306c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802306e:	1430      	asrs	r0, r6, #16
 8023070:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023072:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023076:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802307a:	1423      	asrs	r3, r4, #16
 802307c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023080:	fb01 3000 	mla	r0, r1, r0, r3
 8023084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023086:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802308a:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802308e:	8858      	ldrh	r0, [r3, #2]
 8023090:	f1be 0f00 	cmp.w	lr, #0
 8023094:	d00b      	beq.n	80230ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8023096:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802309a:	3901      	subs	r1, #1
 802309c:	0049      	lsls	r1, r1, #1
 802309e:	3102      	adds	r1, #2
 80230a0:	eb03 0b01 	add.w	fp, r3, r1
 80230a4:	5a5b      	ldrh	r3, [r3, r1]
 80230a6:	930e      	str	r3, [sp, #56]	; 0x38
 80230a8:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80230ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80230ae:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80230b2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80230b6:	fb12 f30e 	smulbb	r3, r2, lr
 80230ba:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80230be:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80230c2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80230c6:	10db      	asrs	r3, r3, #3
 80230c8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80230cc:	ea41 010c 	orr.w	r1, r1, ip
 80230d0:	f1ce 0c10 	rsb	ip, lr, #16
 80230d4:	ea4b 0000 	orr.w	r0, fp, r0
 80230d8:	9f08      	ldr	r7, [sp, #32]
 80230da:	ebac 0c02 	sub.w	ip, ip, r2
 80230de:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80230e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80230e6:	4350      	muls	r0, r2
 80230e8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80230ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80230ee:	fb0c 0c01 	mla	ip, ip, r1, r0
 80230f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80230f4:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80230f8:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 80230fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80230fe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023102:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023106:	0412      	lsls	r2, r2, #16
 8023108:	ea4b 0101 	orr.w	r1, fp, r1
 802310c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023110:	fb03 c101 	mla	r1, r3, r1, ip
 8023114:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8023118:	4302      	orrs	r2, r0
 802311a:	fb03 1202 	mla	r2, r3, r2, r1
 802311e:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8023122:	0952      	lsrs	r2, r2, #5
 8023124:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023128:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802312c:	f8b9 2000 	ldrh.w	r2, [r9]
 8023130:	ea4b 0303 	orr.w	r3, fp, r3
 8023134:	1211      	asrs	r1, r2, #8
 8023136:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802313a:	b29b      	uxth	r3, r3
 802313c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023140:	00d2      	lsls	r2, r2, #3
 8023142:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8023146:	fb11 f107 	smulbb	r1, r1, r7
 802314a:	1218      	asrs	r0, r3, #8
 802314c:	fb1c fc07 	smulbb	ip, ip, r7
 8023150:	b2d2      	uxtb	r2, r2
 8023152:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023156:	fb12 f207 	smulbb	r2, r2, r7
 802315a:	fb00 100a 	mla	r0, r0, sl, r1
 802315e:	10d9      	asrs	r1, r3, #3
 8023160:	00db      	lsls	r3, r3, #3
 8023162:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023166:	b280      	uxth	r0, r0
 8023168:	b2db      	uxtb	r3, r3
 802316a:	fb01 c10a 	mla	r1, r1, sl, ip
 802316e:	fb03 230a 	mla	r3, r3, sl, r2
 8023172:	1c42      	adds	r2, r0, #1
 8023174:	b289      	uxth	r1, r1
 8023176:	b29b      	uxth	r3, r3
 8023178:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802317c:	f101 0c01 	add.w	ip, r1, #1
 8023180:	1c5a      	adds	r2, r3, #1
 8023182:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023186:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802318a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802318e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023190:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023194:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023198:	441c      	add	r4, r3
 802319a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802319e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80231a0:	4310      	orrs	r0, r2
 80231a2:	441e      	add	r6, r3
 80231a4:	ea40 000c 	orr.w	r0, r0, ip
 80231a8:	f829 0b02 	strh.w	r0, [r9], #2
 80231ac:	e6fa      	b.n	8022fa4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80231ae:	b013      	add	sp, #76	; 0x4c
 80231b0:	ecbd 8b08 	vpop	{d8-d11}
 80231b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080231b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80231b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231bc:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 80231c0:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 80231c4:	fb06 5c03 	mla	ip, r6, r3, r5
 80231c8:	2e00      	cmp	r6, #0
 80231ca:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80231ce:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80231d2:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80231d6:	8808      	ldrh	r0, [r1, #0]
 80231d8:	db2e      	blt.n	8023238 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80231da:	45b0      	cmp	r8, r6
 80231dc:	dd2c      	ble.n	8023238 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80231de:	2d00      	cmp	r5, #0
 80231e0:	db28      	blt.n	8023234 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80231e2:	42ab      	cmp	r3, r5
 80231e4:	dd26      	ble.n	8023234 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80231e6:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 80231ea:	1c6a      	adds	r2, r5, #1
 80231ec:	d427      	bmi.n	802323e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80231ee:	4293      	cmp	r3, r2
 80231f0:	dd25      	ble.n	802323e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80231f2:	b324      	cbz	r4, 802323e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80231f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80231f8:	3601      	adds	r6, #1
 80231fa:	d424      	bmi.n	8023246 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80231fc:	45b0      	cmp	r8, r6
 80231fe:	dd22      	ble.n	8023246 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8023200:	b31f      	cbz	r7, 802324a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8023202:	2d00      	cmp	r5, #0
 8023204:	db1d      	blt.n	8023242 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8023206:	42ab      	cmp	r3, r5
 8023208:	dd1b      	ble.n	8023242 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802320a:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 802320e:	3501      	adds	r5, #1
 8023210:	d405      	bmi.n	802321e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8023212:	42ab      	cmp	r3, r5
 8023214:	dd03      	ble.n	802321e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8023216:	b124      	cbz	r4, 8023222 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8023218:	3301      	adds	r3, #1
 802321a:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 802321e:	2c0f      	cmp	r4, #15
 8023220:	d801      	bhi.n	8023226 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023222:	2f0f      	cmp	r7, #15
 8023224:	d914      	bls.n	8023250 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8023226:	4b27      	ldr	r3, [pc, #156]	; (80232c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8023228:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 802322c:	4a26      	ldr	r2, [pc, #152]	; (80232c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 802322e:	4827      	ldr	r0, [pc, #156]	; (80232cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8023230:	f002 fca0 	bl	8025b74 <__assert_func>
 8023234:	4684      	mov	ip, r0
 8023236:	e7d8      	b.n	80231ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8023238:	4602      	mov	r2, r0
 802323a:	4684      	mov	ip, r0
 802323c:	e7dc      	b.n	80231f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802323e:	4602      	mov	r2, r0
 8023240:	e7da      	b.n	80231f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8023242:	4606      	mov	r6, r0
 8023244:	e7e3      	b.n	802320e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8023246:	4606      	mov	r6, r0
 8023248:	e7e9      	b.n	802321e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802324a:	2c0f      	cmp	r4, #15
 802324c:	d8eb      	bhi.n	8023226 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802324e:	4606      	mov	r6, r0
 8023250:	fb14 f307 	smulbb	r3, r4, r7
 8023254:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8023258:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 802325c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023260:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8023264:	10db      	asrs	r3, r3, #3
 8023266:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802326a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802326e:	ea45 0c0c 	orr.w	ip, r5, ip
 8023272:	f1c7 0510 	rsb	r5, r7, #16
 8023276:	ea4e 0202 	orr.w	r2, lr, r2
 802327a:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 802327e:	1b2d      	subs	r5, r5, r4
 8023280:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8023284:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8023288:	4354      	muls	r4, r2
 802328a:	fb05 450c 	mla	r5, r5, ip, r4
 802328e:	0404      	lsls	r4, r0, #16
 8023290:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023294:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023298:	4320      	orrs	r0, r4
 802329a:	fb03 5400 	mla	r4, r3, r0, r5
 802329e:	0430      	lsls	r0, r6, #16
 80232a0:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80232a4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80232a8:	4330      	orrs	r0, r6
 80232aa:	fb07 4000 	mla	r0, r7, r0, r4
 80232ae:	0d43      	lsrs	r3, r0, #21
 80232b0:	0940      	lsrs	r0, r0, #5
 80232b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80232b6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80232ba:	4318      	orrs	r0, r3
 80232bc:	8008      	strh	r0, [r1, #0]
 80232be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80232c2:	bf00      	nop
 80232c4:	0802a0cd 	.word	0x0802a0cd
 80232c8:	0802a743 	.word	0x0802a743
 80232cc:	0802a151 	.word	0x0802a151

080232d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80232d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232d4:	ed2d 8b08 	vpush	{d8-d11}
 80232d8:	b08f      	sub	sp, #60	; 0x3c
 80232da:	461d      	mov	r5, r3
 80232dc:	eeb0 aa40 	vmov.f32	s20, s0
 80232e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80232e2:	eef0 9a60 	vmov.f32	s19, s1
 80232e6:	9107      	str	r1, [sp, #28]
 80232e8:	eeb0 9a41 	vmov.f32	s18, s2
 80232ec:	6859      	ldr	r1, [r3, #4]
 80232ee:	eeb0 8a62 	vmov.f32	s16, s5
 80232f2:	920c      	str	r2, [sp, #48]	; 0x30
 80232f4:	eef0 8a43 	vmov.f32	s17, s6
 80232f8:	681b      	ldr	r3, [r3, #0]
 80232fa:	eef0 ba44 	vmov.f32	s23, s8
 80232fe:	eeb0 ba64 	vmov.f32	s22, s9
 8023302:	900d      	str	r0, [sp, #52]	; 0x34
 8023304:	eef0 aa45 	vmov.f32	s21, s10
 8023308:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 802330c:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8023310:	fb01 2707 	mla	r7, r1, r7, r2
 8023314:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8023318:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802331a:	f8d3 8000 	ldr.w	r8, [r3]
 802331e:	9b07      	ldr	r3, [sp, #28]
 8023320:	2b00      	cmp	r3, #0
 8023322:	dc03      	bgt.n	802332c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8023324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023326:	2b00      	cmp	r3, #0
 8023328:	f340 8182 	ble.w	8023630 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802332c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802332e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023332:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023336:	1e48      	subs	r0, r1, #1
 8023338:	f102 3cff 	add.w	ip, r2, #4294967295
 802333c:	2d00      	cmp	r5, #0
 802333e:	f340 809b 	ble.w	8023478 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8023342:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023346:	ea4f 4326 	mov.w	r3, r6, asr #16
 802334a:	d406      	bmi.n	802335a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802334c:	4586      	cmp	lr, r0
 802334e:	da04      	bge.n	802335a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023350:	2b00      	cmp	r3, #0
 8023352:	db02      	blt.n	802335a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023354:	4563      	cmp	r3, ip
 8023356:	f2c0 8090 	blt.w	802347a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802335a:	f11e 0e01 	adds.w	lr, lr, #1
 802335e:	f100 8084 	bmi.w	802346a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023362:	4571      	cmp	r1, lr
 8023364:	f2c0 8081 	blt.w	802346a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023368:	3301      	adds	r3, #1
 802336a:	d47e      	bmi.n	802346a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802336c:	429a      	cmp	r2, r3
 802336e:	db7c      	blt.n	802346a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023370:	46aa      	mov	sl, r5
 8023372:	46b9      	mov	r9, r7
 8023374:	f1ba 0f00 	cmp.w	sl, #0
 8023378:	f340 8099 	ble.w	80234ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 802337c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802337e:	1421      	asrs	r1, r4, #16
 8023380:	ea4f 4026 	mov.w	r0, r6, asr #16
 8023384:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023388:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802338c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8023390:	f100 80d1 	bmi.w	8023536 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8023394:	f10e 3bff 	add.w	fp, lr, #4294967295
 8023398:	4559      	cmp	r1, fp
 802339a:	f280 80cc 	bge.w	8023536 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802339e:	2800      	cmp	r0, #0
 80233a0:	f2c0 80c9 	blt.w	8023536 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80233a4:	f103 3bff 	add.w	fp, r3, #4294967295
 80233a8:	4558      	cmp	r0, fp
 80233aa:	f280 80c4 	bge.w	8023536 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80233ae:	fa0f fe8e 	sxth.w	lr, lr
 80233b2:	fb00 110e 	mla	r1, r0, lr, r1
 80233b6:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80233ba:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80233be:	8841      	ldrh	r1, [r0, #2]
 80233c0:	f1bc 0f00 	cmp.w	ip, #0
 80233c4:	d00b      	beq.n	80233de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80233c6:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80233ca:	3b01      	subs	r3, #1
 80233cc:	005b      	lsls	r3, r3, #1
 80233ce:	3302      	adds	r3, #2
 80233d0:	eb00 0e03 	add.w	lr, r0, r3
 80233d4:	5ac3      	ldrh	r3, [r0, r3]
 80233d6:	9308      	str	r3, [sp, #32]
 80233d8:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80233dc:	9309      	str	r3, [sp, #36]	; 0x24
 80233de:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80233e2:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80233e6:	fb12 f30c 	smulbb	r3, r2, ip
 80233ea:	f1cc 0e10 	rsb	lr, ip, #16
 80233ee:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80233f2:	10db      	asrs	r3, r3, #3
 80233f4:	ebae 0e02 	sub.w	lr, lr, r2
 80233f8:	ea40 000b 	orr.w	r0, r0, fp
 80233fc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023400:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023404:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023408:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802340c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8023410:	ea4b 0101 	orr.w	r1, fp, r1
 8023414:	4351      	muls	r1, r2
 8023416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023418:	fb0e 1e00 	mla	lr, lr, r0, r1
 802341c:	0410      	lsls	r0, r2, #16
 802341e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023422:	9908      	ldr	r1, [sp, #32]
 8023424:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023428:	4310      	orrs	r0, r2
 802342a:	9a08      	ldr	r2, [sp, #32]
 802342c:	0412      	lsls	r2, r2, #16
 802342e:	fb03 e000 	mla	r0, r3, r0, lr
 8023432:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8023436:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802343a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802343e:	ea42 020e 	orr.w	r2, r2, lr
 8023442:	fb03 0302 	mla	r3, r3, r2, r0
 8023446:	0d5a      	lsrs	r2, r3, #21
 8023448:	095b      	lsrs	r3, r3, #5
 802344a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802344e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023452:	4313      	orrs	r3, r2
 8023454:	f8a9 3000 	strh.w	r3, [r9]
 8023458:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802345a:	f109 0902 	add.w	r9, r9, #2
 802345e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023462:	441c      	add	r4, r3
 8023464:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023466:	441e      	add	r6, r3
 8023468:	e784      	b.n	8023374 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802346a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802346c:	3d01      	subs	r5, #1
 802346e:	3702      	adds	r7, #2
 8023470:	441c      	add	r4, r3
 8023472:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023474:	441e      	add	r6, r3
 8023476:	e761      	b.n	802333c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023478:	d01d      	beq.n	80234b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802347a:	1e6b      	subs	r3, r5, #1
 802347c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802347e:	fb00 4003 	mla	r0, r0, r3, r4
 8023482:	1400      	asrs	r0, r0, #16
 8023484:	f53f af74 	bmi.w	8023370 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023488:	3901      	subs	r1, #1
 802348a:	4288      	cmp	r0, r1
 802348c:	f6bf af70 	bge.w	8023370 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023490:	9924      	ldr	r1, [sp, #144]	; 0x90
 8023492:	fb01 6303 	mla	r3, r1, r3, r6
 8023496:	141b      	asrs	r3, r3, #16
 8023498:	f53f af6a 	bmi.w	8023370 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802349c:	3a01      	subs	r2, #1
 802349e:	4293      	cmp	r3, r2
 80234a0:	f6bf af66 	bge.w	8023370 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80234a4:	46a9      	mov	r9, r5
 80234a6:	46ba      	mov	sl, r7
 80234a8:	f1b9 0f00 	cmp.w	r9, #0
 80234ac:	dc5b      	bgt.n	8023566 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80234ae:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80234b2:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80234b6:	9b07      	ldr	r3, [sp, #28]
 80234b8:	2b00      	cmp	r3, #0
 80234ba:	f340 80b9 	ble.w	8023630 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80234be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80234c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80234c4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80234c8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80234cc:	eef0 6a48 	vmov.f32	s13, s16
 80234d0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80234d4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80234d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234dc:	ee16 4a90 	vmov	r4, s13
 80234e0:	eef0 6a68 	vmov.f32	s13, s17
 80234e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234e8:	ee16 6a90 	vmov	r6, s13
 80234ec:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80234f0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80234f4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80234f8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80234fc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023500:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023504:	ee18 2a10 	vmov	r2, s16
 8023508:	eeb0 8a47 	vmov.f32	s16, s14
 802350c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023510:	ee18 2a90 	vmov	r2, s17
 8023514:	9323      	str	r3, [sp, #140]	; 0x8c
 8023516:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023518:	eef0 8a67 	vmov.f32	s17, s15
 802351c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023520:	9324      	str	r3, [sp, #144]	; 0x90
 8023522:	9b07      	ldr	r3, [sp, #28]
 8023524:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023526:	3b01      	subs	r3, #1
 8023528:	9307      	str	r3, [sp, #28]
 802352a:	bf08      	it	eq
 802352c:	4615      	moveq	r5, r2
 802352e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023530:	bf18      	it	ne
 8023532:	461d      	movne	r5, r3
 8023534:	e6f3      	b.n	802331e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8023536:	f111 0b01 	adds.w	fp, r1, #1
 802353a:	d48d      	bmi.n	8023458 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802353c:	45de      	cmp	lr, fp
 802353e:	db8b      	blt.n	8023458 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8023540:	f110 0b01 	adds.w	fp, r0, #1
 8023544:	d488      	bmi.n	8023458 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8023546:	455b      	cmp	r3, fp
 8023548:	db86      	blt.n	8023458 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802354a:	b21b      	sxth	r3, r3
 802354c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8023550:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8023554:	9300      	str	r3, [sp, #0]
 8023556:	4642      	mov	r2, r8
 8023558:	fa0f f38e 	sxth.w	r3, lr
 802355c:	4649      	mov	r1, r9
 802355e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023560:	f7ff fe2a 	bl	80231b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8023564:	e778      	b.n	8023458 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8023566:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023568:	1420      	asrs	r0, r4, #16
 802356a:	1431      	asrs	r1, r6, #16
 802356c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023570:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023574:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023578:	fb03 0101 	mla	r1, r3, r1, r0
 802357c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8023580:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8023584:	8841      	ldrh	r1, [r0, #2]
 8023586:	f1be 0f00 	cmp.w	lr, #0
 802358a:	d00b      	beq.n	80235a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802358c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023590:	3b01      	subs	r3, #1
 8023592:	005b      	lsls	r3, r3, #1
 8023594:	3302      	adds	r3, #2
 8023596:	eb00 0b03 	add.w	fp, r0, r3
 802359a:	5ac3      	ldrh	r3, [r0, r3]
 802359c:	930a      	str	r3, [sp, #40]	; 0x28
 802359e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80235a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80235a4:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80235a8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80235ac:	fb12 f30e 	smulbb	r3, r2, lr
 80235b0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80235b4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80235b8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80235bc:	10db      	asrs	r3, r3, #3
 80235be:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80235c2:	ea40 000c 	orr.w	r0, r0, ip
 80235c6:	f1ce 0c10 	rsb	ip, lr, #16
 80235ca:	ea4b 0101 	orr.w	r1, fp, r1
 80235ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80235d2:	ebac 0c02 	sub.w	ip, ip, r2
 80235d6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80235da:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80235de:	4351      	muls	r1, r2
 80235e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80235e2:	fb0c 1c00 	mla	ip, ip, r0, r1
 80235e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80235e8:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80235ec:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80235f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80235f2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80235f6:	0412      	lsls	r2, r2, #16
 80235f8:	ea4b 0000 	orr.w	r0, fp, r0
 80235fc:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8023600:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023604:	fb03 c000 	mla	r0, r3, r0, ip
 8023608:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802360c:	ea42 0b0b 	orr.w	fp, r2, fp
 8023610:	fb03 000b 	mla	r0, r3, fp, r0
 8023614:	0d43      	lsrs	r3, r0, #21
 8023616:	0940      	lsrs	r0, r0, #5
 8023618:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802361c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023620:	4318      	orrs	r0, r3
 8023622:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023624:	441c      	add	r4, r3
 8023626:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023628:	f82a 0b02 	strh.w	r0, [sl], #2
 802362c:	441e      	add	r6, r3
 802362e:	e73b      	b.n	80234a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8023630:	b00f      	add	sp, #60	; 0x3c
 8023632:	ecbd 8b08 	vpop	{d8-d11}
 8023636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802363c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802363c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023640:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8023644:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8023648:	fb04 5603 	mla	r6, r4, r3, r5
 802364c:	2c00      	cmp	r4, #0
 802364e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8023652:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8023656:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802365a:	db36      	blt.n	80236ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 802365c:	45a6      	cmp	lr, r4
 802365e:	dd34      	ble.n	80236ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8023660:	2d00      	cmp	r5, #0
 8023662:	db30      	blt.n	80236c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8023664:	42ab      	cmp	r3, r5
 8023666:	dd2e      	ble.n	80236c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8023668:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 802366c:	1c6e      	adds	r6, r5, #1
 802366e:	d42f      	bmi.n	80236d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8023670:	42b3      	cmp	r3, r6
 8023672:	dd2d      	ble.n	80236d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8023674:	b370      	cbz	r0, 80236d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8023676:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802367a:	3401      	adds	r4, #1
 802367c:	d42e      	bmi.n	80236dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 802367e:	45a6      	cmp	lr, r4
 8023680:	dd2c      	ble.n	80236dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8023682:	b377      	cbz	r7, 80236e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 8023684:	2d00      	cmp	r5, #0
 8023686:	db27      	blt.n	80236d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8023688:	42ab      	cmp	r3, r5
 802368a:	dd25      	ble.n	80236d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 802368c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023690:	3501      	adds	r5, #1
 8023692:	d429      	bmi.n	80236e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8023694:	42ab      	cmp	r3, r5
 8023696:	dd27      	ble.n	80236e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8023698:	b340      	cbz	r0, 80236ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 802369a:	3301      	adds	r3, #1
 802369c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80236a0:	280f      	cmp	r0, #15
 80236a2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80236a6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80236aa:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80236ae:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80236b2:	d801      	bhi.n	80236b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 80236b4:	2f0f      	cmp	r7, #15
 80236b6:	d91b      	bls.n	80236f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 80236b8:	4b8d      	ldr	r3, [pc, #564]	; (80238f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 80236ba:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80236be:	4a8d      	ldr	r2, [pc, #564]	; (80238f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 80236c0:	488d      	ldr	r0, [pc, #564]	; (80238f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 80236c2:	f002 fa57 	bl	8025b74 <__assert_func>
 80236c6:	2200      	movs	r2, #0
 80236c8:	e7d0      	b.n	802366c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 80236ca:	2600      	movs	r6, #0
 80236cc:	4632      	mov	r2, r6
 80236ce:	e7d4      	b.n	802367a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80236d0:	2600      	movs	r6, #0
 80236d2:	e7d2      	b.n	802367a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80236d4:	4606      	mov	r6, r0
 80236d6:	e7d0      	b.n	802367a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80236d8:	2400      	movs	r4, #0
 80236da:	e7d9      	b.n	8023690 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 80236dc:	2300      	movs	r3, #0
 80236de:	461c      	mov	r4, r3
 80236e0:	e7de      	b.n	80236a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80236e2:	463b      	mov	r3, r7
 80236e4:	463c      	mov	r4, r7
 80236e6:	e7db      	b.n	80236a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80236e8:	2300      	movs	r3, #0
 80236ea:	e7d9      	b.n	80236a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80236ec:	4603      	mov	r3, r0
 80236ee:	e7d7      	b.n	80236a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80236f0:	b280      	uxth	r0, r0
 80236f2:	b2bf      	uxth	r7, r7
 80236f4:	fb07 fe00 	mul.w	lr, r7, r0
 80236f8:	0100      	lsls	r0, r0, #4
 80236fa:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80236fe:	eba0 0c0e 	sub.w	ip, r0, lr
 8023702:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8023706:	b2bf      	uxth	r7, r7
 8023708:	fa1f fc8c 	uxth.w	ip, ip
 802370c:	1bed      	subs	r5, r5, r7
 802370e:	fb0a f00c 	mul.w	r0, sl, ip
 8023712:	b2ad      	uxth	r5, r5
 8023714:	fb0b 0005 	mla	r0, fp, r5, r0
 8023718:	fb07 0009 	mla	r0, r7, r9, r0
 802371c:	fb0e 0008 	mla	r0, lr, r8, r0
 8023720:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023724:	9001      	str	r0, [sp, #4]
 8023726:	2800      	cmp	r0, #0
 8023728:	f000 80de 	beq.w	80238e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 802372c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023730:	d018      	beq.n	8023764 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 8023732:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8023736:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802373a:	fb0b f000 	mul.w	r0, fp, r0
 802373e:	fb0b fb02 	mul.w	fp, fp, r2
 8023742:	0a02      	lsrs	r2, r0, #8
 8023744:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023748:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802374c:	4402      	add	r2, r0
 802374e:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8023752:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8023756:	0a12      	lsrs	r2, r2, #8
 8023758:	0a00      	lsrs	r0, r0, #8
 802375a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802375e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023762:	4302      	orrs	r2, r0
 8023764:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023768:	d01a      	beq.n	80237a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 802376a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802376e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023772:	fb0a f000 	mul.w	r0, sl, r0
 8023776:	fb0a fa06 	mul.w	sl, sl, r6
 802377a:	0a06      	lsrs	r6, r0, #8
 802377c:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023780:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023784:	4406      	add	r6, r0
 8023786:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802378a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802378e:	0a36      	lsrs	r6, r6, #8
 8023790:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023794:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023798:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802379c:	ea46 060a 	orr.w	r6, r6, sl
 80237a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80237a4:	d01b      	beq.n	80237de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 80237a6:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80237aa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80237ae:	fb09 fa0a 	mul.w	sl, r9, sl
 80237b2:	fb09 f004 	mul.w	r0, r9, r4
 80237b6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80237ba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80237be:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80237c2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80237c6:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80237ca:	4454      	add	r4, sl
 80237cc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80237d0:	0a24      	lsrs	r4, r4, #8
 80237d2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80237d6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80237da:	ea44 0409 	orr.w	r4, r4, r9
 80237de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80237e2:	d01b      	beq.n	802381c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 80237e4:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80237e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80237ec:	fb08 f909 	mul.w	r9, r8, r9
 80237f0:	fb08 f003 	mul.w	r0, r8, r3
 80237f4:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80237f8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80237fc:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8023800:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023804:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8023808:	444b      	add	r3, r9
 802380a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802380e:	0a1b      	lsrs	r3, r3, #8
 8023810:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023814:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023818:	ea43 0308 	orr.w	r3, r3, r8
 802381c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023820:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023824:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8023828:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802382c:	fb0c f808 	mul.w	r8, ip, r8
 8023830:	8808      	ldrh	r0, [r1, #0]
 8023832:	fb0c f606 	mul.w	r6, ip, r6
 8023836:	fb05 8909 	mla	r9, r5, r9, r8
 802383a:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802383e:	fb05 6502 	mla	r5, r5, r2, r6
 8023842:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023846:	fb07 9908 	mla	r9, r7, r8, r9
 802384a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802384e:	fb07 5704 	mla	r7, r7, r4, r5
 8023852:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8023856:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802385a:	b2b6      	uxth	r6, r6
 802385c:	fb0e 9808 	mla	r8, lr, r8, r9
 8023860:	9a01      	ldr	r2, [sp, #4]
 8023862:	fb0e 7e03 	mla	lr, lr, r3, r7
 8023866:	1205      	asrs	r5, r0, #8
 8023868:	4372      	muls	r2, r6
 802386a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802386e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023872:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023876:	1c53      	adds	r3, r2, #1
 8023878:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802387c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023880:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023884:	ea48 0e0e 	orr.w	lr, r8, lr
 8023888:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802388c:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8023890:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8023894:	b2db      	uxtb	r3, r3
 8023896:	fb12 f206 	smulbb	r2, r2, r6
 802389a:	fa5f fe8e 	uxtb.w	lr, lr
 802389e:	fb14 f406 	smulbb	r4, r4, r6
 80238a2:	fb05 2503 	mla	r5, r5, r3, r2
 80238a6:	10c2      	asrs	r2, r0, #3
 80238a8:	fb1e fe06 	smulbb	lr, lr, r6
 80238ac:	00c0      	lsls	r0, r0, #3
 80238ae:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80238b2:	b2ad      	uxth	r5, r5
 80238b4:	b2c0      	uxtb	r0, r0
 80238b6:	fb02 4203 	mla	r2, r2, r3, r4
 80238ba:	fb00 e303 	mla	r3, r0, r3, lr
 80238be:	b294      	uxth	r4, r2
 80238c0:	b298      	uxth	r0, r3
 80238c2:	1c6b      	adds	r3, r5, #1
 80238c4:	1c62      	adds	r2, r4, #1
 80238c6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80238ca:	1c43      	adds	r3, r0, #1
 80238cc:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80238d0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80238d4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80238d8:	0952      	lsrs	r2, r2, #5
 80238da:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80238de:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80238e2:	432b      	orrs	r3, r5
 80238e4:	4313      	orrs	r3, r2
 80238e6:	800b      	strh	r3, [r1, #0]
 80238e8:	b003      	add	sp, #12
 80238ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238ee:	bf00      	nop
 80238f0:	0802a0cd 	.word	0x0802a0cd
 80238f4:	0802a69a 	.word	0x0802a69a
 80238f8:	0802a151 	.word	0x0802a151

080238fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80238fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023900:	ed2d 8b08 	vpush	{d8-d11}
 8023904:	b09d      	sub	sp, #116	; 0x74
 8023906:	eeb0 aa40 	vmov.f32	s20, s0
 802390a:	eef0 9a60 	vmov.f32	s19, s1
 802390e:	9219      	str	r2, [sp, #100]	; 0x64
 8023910:	eeb0 9a41 	vmov.f32	s18, s2
 8023914:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8023916:	eeb0 8a62 	vmov.f32	s16, s5
 802391a:	9307      	str	r3, [sp, #28]
 802391c:	eef0 8a43 	vmov.f32	s17, s6
 8023920:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8023924:	eef0 ba44 	vmov.f32	s23, s8
 8023928:	901b      	str	r0, [sp, #108]	; 0x6c
 802392a:	eeb0 ba64 	vmov.f32	s22, s9
 802392e:	931a      	str	r3, [sp, #104]	; 0x68
 8023930:	eef0 aa45 	vmov.f32	s21, s10
 8023934:	6850      	ldr	r0, [r2, #4]
 8023936:	9117      	str	r1, [sp, #92]	; 0x5c
 8023938:	6812      	ldr	r2, [r2, #0]
 802393a:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 802393e:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8023942:	fb00 1303 	mla	r3, r0, r3, r1
 8023946:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802394a:	930a      	str	r3, [sp, #40]	; 0x28
 802394c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802394e:	681b      	ldr	r3, [r3, #0]
 8023950:	9310      	str	r3, [sp, #64]	; 0x40
 8023952:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8023956:	930b      	str	r3, [sp, #44]	; 0x2c
 8023958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802395a:	2b00      	cmp	r3, #0
 802395c:	dc03      	bgt.n	8023966 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802395e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023960:	2b00      	cmp	r3, #0
 8023962:	f340 8375 	ble.w	8024050 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8023966:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023968:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802396c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023970:	1e48      	subs	r0, r1, #1
 8023972:	1e57      	subs	r7, r2, #1
 8023974:	9b07      	ldr	r3, [sp, #28]
 8023976:	2b00      	cmp	r3, #0
 8023978:	f340 818e 	ble.w	8023c98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802397c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023980:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023984:	d406      	bmi.n	8023994 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023986:	4584      	cmp	ip, r0
 8023988:	da04      	bge.n	8023994 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802398a:	2b00      	cmp	r3, #0
 802398c:	db02      	blt.n	8023994 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802398e:	42bb      	cmp	r3, r7
 8023990:	f2c0 8183 	blt.w	8023c9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8023994:	f11c 0c01 	adds.w	ip, ip, #1
 8023998:	f100 8173 	bmi.w	8023c82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802399c:	4561      	cmp	r1, ip
 802399e:	f2c0 8170 	blt.w	8023c82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80239a2:	3301      	adds	r3, #1
 80239a4:	f100 816d 	bmi.w	8023c82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80239a8:	429a      	cmp	r2, r3
 80239aa:	f2c0 816a 	blt.w	8023c82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80239ae:	9b07      	ldr	r3, [sp, #28]
 80239b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80239b2:	9318      	str	r3, [sp, #96]	; 0x60
 80239b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80239b6:	2b00      	cmp	r3, #0
 80239b8:	f340 818c 	ble.w	8023cd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 80239bc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80239be:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80239c2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80239c4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80239c8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80239cc:	1422      	asrs	r2, r4, #16
 80239ce:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80239d2:	689b      	ldr	r3, [r3, #8]
 80239d4:	f100 81cd 	bmi.w	8023d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80239d8:	f103 38ff 	add.w	r8, r3, #4294967295
 80239dc:	4542      	cmp	r2, r8
 80239de:	f280 81c8 	bge.w	8023d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80239e2:	f1bc 0f00 	cmp.w	ip, #0
 80239e6:	f2c0 81c4 	blt.w	8023d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80239ea:	f10e 38ff 	add.w	r8, lr, #4294967295
 80239ee:	45c4      	cmp	ip, r8
 80239f0:	f280 81bf 	bge.w	8023d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80239f4:	b21b      	sxth	r3, r3
 80239f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80239f8:	fb0c 2203 	mla	r2, ip, r3, r2
 80239fc:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023a00:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023a04:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023a08:	2800      	cmp	r0, #0
 8023a0a:	f000 81a9 	beq.w	8023d60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8023a0e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023a12:	950c      	str	r5, [sp, #48]	; 0x30
 8023a14:	0e2d      	lsrs	r5, r5, #24
 8023a16:	9513      	str	r5, [sp, #76]	; 0x4c
 8023a18:	b181      	cbz	r1, 8023a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023a1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023a1e:	3b01      	subs	r3, #1
 8023a20:	009b      	lsls	r3, r3, #2
 8023a22:	3304      	adds	r3, #4
 8023a24:	eb08 0c03 	add.w	ip, r8, r3
 8023a28:	f858 3003 	ldr.w	r3, [r8, r3]
 8023a2c:	9308      	str	r3, [sp, #32]
 8023a2e:	0e1b      	lsrs	r3, r3, #24
 8023a30:	9311      	str	r3, [sp, #68]	; 0x44
 8023a32:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023a36:	930d      	str	r3, [sp, #52]	; 0x34
 8023a38:	0e1b      	lsrs	r3, r3, #24
 8023a3a:	9314      	str	r3, [sp, #80]	; 0x50
 8023a3c:	b280      	uxth	r0, r0
 8023a3e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023a40:	b289      	uxth	r1, r1
 8023a42:	fb00 f901 	mul.w	r9, r0, r1
 8023a46:	0100      	lsls	r0, r0, #4
 8023a48:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023a4c:	eba0 0809 	sub.w	r8, r0, r9
 8023a50:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023a54:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023a56:	b289      	uxth	r1, r1
 8023a58:	fa1f f888 	uxth.w	r8, r8
 8023a5c:	1a5b      	subs	r3, r3, r1
 8023a5e:	fb08 f000 	mul.w	r0, r8, r0
 8023a62:	b29b      	uxth	r3, r3
 8023a64:	fb03 000e 	mla	r0, r3, lr, r0
 8023a68:	fb01 0005 	mla	r0, r1, r5, r0
 8023a6c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023a6e:	fb09 0005 	mla	r0, r9, r5, r0
 8023a72:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023a76:	2800      	cmp	r0, #0
 8023a78:	f000 80fa 	beq.w	8023c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023a7c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023a80:	d01b      	beq.n	8023aba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8023a82:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023a86:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023a8a:	fb0e fa0a 	mul.w	sl, lr, sl
 8023a8e:	fb0e fe02 	mul.w	lr, lr, r2
 8023a92:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023a96:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023a9a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023a9e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023aa2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023aa6:	4452      	add	r2, sl
 8023aa8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023aac:	0a12      	lsrs	r2, r2, #8
 8023aae:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023ab2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023ab6:	ea42 020c 	orr.w	r2, r2, ip
 8023aba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023abc:	2dff      	cmp	r5, #255	; 0xff
 8023abe:	d021      	beq.n	8023b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023ac0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023ac2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023ac6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023ac8:	fb05 fb0b 	mul.w	fp, r5, fp
 8023acc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023ace:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023ad2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023ad4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ad8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023adc:	fb05 fa0a 	mul.w	sl, r5, sl
 8023ae0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ae4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023ae8:	44de      	add	lr, fp
 8023aea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023aee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023af2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023af6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023afa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023afe:	ea4e 050a 	orr.w	r5, lr, sl
 8023b02:	950c      	str	r5, [sp, #48]	; 0x30
 8023b04:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023b06:	2dff      	cmp	r5, #255	; 0xff
 8023b08:	d021      	beq.n	8023b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8023b0a:	9d08      	ldr	r5, [sp, #32]
 8023b0c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023b10:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023b12:	fb05 fb0b 	mul.w	fp, r5, fp
 8023b16:	9d08      	ldr	r5, [sp, #32]
 8023b18:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023b1c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023b1e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023b22:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b26:	fb05 fa0a 	mul.w	sl, r5, sl
 8023b2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b2e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023b32:	44de      	add	lr, fp
 8023b34:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023b38:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b48:	ea4e 050a 	orr.w	r5, lr, sl
 8023b4c:	9508      	str	r5, [sp, #32]
 8023b4e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023b50:	2dff      	cmp	r5, #255	; 0xff
 8023b52:	d021      	beq.n	8023b98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8023b54:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023b56:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023b5a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023b5c:	fb05 fb0b 	mul.w	fp, r5, fp
 8023b60:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023b62:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023b66:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023b68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023b6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b70:	fb05 fa0a 	mul.w	sl, r5, sl
 8023b74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b78:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023b7c:	44de      	add	lr, fp
 8023b7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023b82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b92:	ea4e 050a 	orr.w	r5, lr, sl
 8023b96:	950d      	str	r5, [sp, #52]	; 0x34
 8023b98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023b9a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023b9e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023ba2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023ba6:	9d08      	ldr	r5, [sp, #32]
 8023ba8:	fb08 fc0c 	mul.w	ip, r8, ip
 8023bac:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023bb0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023bb4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023bb6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023bba:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023bc0:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023bc4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023bc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023bca:	fb08 f80e 	mul.w	r8, r8, lr
 8023bce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023bd2:	fb03 8202 	mla	r2, r3, r2, r8
 8023bd6:	9b08      	ldr	r3, [sp, #32]
 8023bd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023bdc:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8023be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023be2:	fb01 220a 	mla	r2, r1, sl, r2
 8023be6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8023bea:	883b      	ldrh	r3, [r7, #0]
 8023bec:	fb09 2901 	mla	r9, r9, r1, r2
 8023bf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023bf2:	1219      	asrs	r1, r3, #8
 8023bf4:	4342      	muls	r2, r0
 8023bf6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023bfa:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023bfe:	1c50      	adds	r0, r2, #1
 8023c00:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023c04:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023c08:	ea4c 0c09 	orr.w	ip, ip, r9
 8023c0c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023c10:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023c14:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023c18:	fa5f fc8c 	uxtb.w	ip, ip
 8023c1c:	fb12 f205 	smulbb	r2, r2, r5
 8023c20:	b2c0      	uxtb	r0, r0
 8023c22:	fb1c fc05 	smulbb	ip, ip, r5
 8023c26:	fb01 2100 	mla	r1, r1, r0, r2
 8023c2a:	10da      	asrs	r2, r3, #3
 8023c2c:	fb1e fe05 	smulbb	lr, lr, r5
 8023c30:	00db      	lsls	r3, r3, #3
 8023c32:	b289      	uxth	r1, r1
 8023c34:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023c38:	b2db      	uxtb	r3, r3
 8023c3a:	fb02 e200 	mla	r2, r2, r0, lr
 8023c3e:	fb03 c300 	mla	r3, r3, r0, ip
 8023c42:	b292      	uxth	r2, r2
 8023c44:	fa1f fc83 	uxth.w	ip, r3
 8023c48:	1c4b      	adds	r3, r1, #1
 8023c4a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023c4e:	f10c 0301 	add.w	r3, ip, #1
 8023c52:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023c56:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023c5a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023c5e:	430b      	orrs	r3, r1
 8023c60:	1c51      	adds	r1, r2, #1
 8023c62:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023c66:	0952      	lsrs	r2, r2, #5
 8023c68:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023c6c:	4313      	orrs	r3, r2
 8023c6e:	803b      	strh	r3, [r7, #0]
 8023c70:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023c72:	3702      	adds	r7, #2
 8023c74:	441c      	add	r4, r3
 8023c76:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023c78:	441e      	add	r6, r3
 8023c7a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023c7c:	3b01      	subs	r3, #1
 8023c7e:	9318      	str	r3, [sp, #96]	; 0x60
 8023c80:	e698      	b.n	80239b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023c82:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023c84:	441c      	add	r4, r3
 8023c86:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023c88:	441e      	add	r6, r3
 8023c8a:	9b07      	ldr	r3, [sp, #28]
 8023c8c:	3b01      	subs	r3, #1
 8023c8e:	9307      	str	r3, [sp, #28]
 8023c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c92:	3302      	adds	r3, #2
 8023c94:	930a      	str	r3, [sp, #40]	; 0x28
 8023c96:	e66d      	b.n	8023974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023c98:	d023      	beq.n	8023ce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023c9a:	9b07      	ldr	r3, [sp, #28]
 8023c9c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8023c9e:	3b01      	subs	r3, #1
 8023ca0:	fb00 4003 	mla	r0, r0, r3, r4
 8023ca4:	1400      	asrs	r0, r0, #16
 8023ca6:	f53f ae82 	bmi.w	80239ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023caa:	3901      	subs	r1, #1
 8023cac:	4288      	cmp	r0, r1
 8023cae:	f6bf ae7e 	bge.w	80239ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023cb2:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8023cb4:	fb01 6303 	mla	r3, r1, r3, r6
 8023cb8:	141b      	asrs	r3, r3, #16
 8023cba:	f53f ae78 	bmi.w	80239ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023cbe:	3a01      	subs	r2, #1
 8023cc0:	4293      	cmp	r3, r2
 8023cc2:	f6bf ae74 	bge.w	80239ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023cc6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023cca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023cce:	f1bb 0f00 	cmp.w	fp, #0
 8023cd2:	dc6c      	bgt.n	8023dae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8023cd4:	9b07      	ldr	r3, [sp, #28]
 8023cd6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023cdc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023ce0:	930a      	str	r3, [sp, #40]	; 0x28
 8023ce2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023ce4:	2b00      	cmp	r3, #0
 8023ce6:	f340 81b3 	ble.w	8024050 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8023cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023cee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023cf0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023cf4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023cf8:	eef0 6a48 	vmov.f32	s13, s16
 8023cfc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023d00:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023d04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d08:	ee16 4a90 	vmov	r4, s13
 8023d0c:	eef0 6a68 	vmov.f32	s13, s17
 8023d10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d14:	ee16 6a90 	vmov	r6, s13
 8023d18:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023d1c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023d20:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023d24:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023d28:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023d2c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023d30:	ee18 2a10 	vmov	r2, s16
 8023d34:	eeb0 8a47 	vmov.f32	s16, s14
 8023d38:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d3c:	ee18 2a90 	vmov	r2, s17
 8023d40:	9331      	str	r3, [sp, #196]	; 0xc4
 8023d42:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023d44:	eef0 8a67 	vmov.f32	s17, s15
 8023d48:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d4c:	9332      	str	r3, [sp, #200]	; 0xc8
 8023d4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023d50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023d52:	3b01      	subs	r3, #1
 8023d54:	9317      	str	r3, [sp, #92]	; 0x5c
 8023d56:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023d58:	bf08      	it	eq
 8023d5a:	4613      	moveq	r3, r2
 8023d5c:	9307      	str	r3, [sp, #28]
 8023d5e:	e5fb      	b.n	8023958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8023d60:	2900      	cmp	r1, #0
 8023d62:	f43f ae6b 	beq.w	8023a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023d66:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023d6a:	9308      	str	r3, [sp, #32]
 8023d6c:	0e1b      	lsrs	r3, r3, #24
 8023d6e:	9311      	str	r3, [sp, #68]	; 0x44
 8023d70:	e664      	b.n	8023a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023d72:	f112 0801 	adds.w	r8, r2, #1
 8023d76:	f53f af7b 	bmi.w	8023c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023d7a:	4543      	cmp	r3, r8
 8023d7c:	f6ff af78 	blt.w	8023c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023d80:	f11c 0801 	adds.w	r8, ip, #1
 8023d84:	f53f af74 	bmi.w	8023c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023d88:	45c6      	cmp	lr, r8
 8023d8a:	f6ff af71 	blt.w	8023c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023d8e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023d90:	b21b      	sxth	r3, r3
 8023d92:	9201      	str	r2, [sp, #4]
 8023d94:	fa0f f28e 	sxth.w	r2, lr
 8023d98:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023d9c:	e9cd c002 	strd	ip, r0, [sp, #8]
 8023da0:	9200      	str	r2, [sp, #0]
 8023da2:	4639      	mov	r1, r7
 8023da4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023da6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023da8:	f7ff fc48 	bl	802363c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8023dac:	e760      	b.n	8023c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023dae:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023db0:	1427      	asrs	r7, r4, #16
 8023db2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023db4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023db8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023dbc:	1433      	asrs	r3, r6, #16
 8023dbe:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023dc2:	fb01 7303 	mla	r3, r1, r3, r7
 8023dc6:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8023dca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023dce:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023dd2:	2a00      	cmp	r2, #0
 8023dd4:	f000 8133 	beq.w	802403e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8023dd8:	687d      	ldr	r5, [r7, #4]
 8023dda:	950e      	str	r5, [sp, #56]	; 0x38
 8023ddc:	0e2d      	lsrs	r5, r5, #24
 8023dde:	9515      	str	r5, [sp, #84]	; 0x54
 8023de0:	b178      	cbz	r0, 8023e02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8023de2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8023de6:	3901      	subs	r1, #1
 8023de8:	0089      	lsls	r1, r1, #2
 8023dea:	3104      	adds	r1, #4
 8023dec:	eb07 0e01 	add.w	lr, r7, r1
 8023df0:	5879      	ldr	r1, [r7, r1]
 8023df2:	9109      	str	r1, [sp, #36]	; 0x24
 8023df4:	0e09      	lsrs	r1, r1, #24
 8023df6:	9112      	str	r1, [sp, #72]	; 0x48
 8023df8:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023dfc:	910f      	str	r1, [sp, #60]	; 0x3c
 8023dfe:	0e09      	lsrs	r1, r1, #24
 8023e00:	9116      	str	r1, [sp, #88]	; 0x58
 8023e02:	b292      	uxth	r2, r2
 8023e04:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023e06:	b280      	uxth	r0, r0
 8023e08:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023e0a:	fb02 f800 	mul.w	r8, r2, r0
 8023e0e:	0112      	lsls	r2, r2, #4
 8023e10:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023e14:	eba2 0e08 	sub.w	lr, r2, r8
 8023e18:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023e1c:	b280      	uxth	r0, r0
 8023e1e:	fa1f fe8e 	uxth.w	lr, lr
 8023e22:	1a12      	subs	r2, r2, r0
 8023e24:	fb0e f101 	mul.w	r1, lr, r1
 8023e28:	b292      	uxth	r2, r2
 8023e2a:	fb02 110c 	mla	r1, r2, ip, r1
 8023e2e:	fb00 1105 	mla	r1, r0, r5, r1
 8023e32:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023e34:	fb08 1105 	mla	r1, r8, r5, r1
 8023e38:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023e3c:	2900      	cmp	r1, #0
 8023e3e:	f000 80f5 	beq.w	802402c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023e42:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023e46:	d019      	beq.n	8023e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8023e48:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023e4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e50:	fb0c fa0a 	mul.w	sl, ip, sl
 8023e54:	fb0c fc03 	mul.w	ip, ip, r3
 8023e58:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023e5c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023e60:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023e64:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023e68:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023e6c:	4453      	add	r3, sl
 8023e6e:	0a3f      	lsrs	r7, r7, #8
 8023e70:	0a1b      	lsrs	r3, r3, #8
 8023e72:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023e76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023e7a:	433b      	orrs	r3, r7
 8023e7c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023e7e:	2dff      	cmp	r5, #255	; 0xff
 8023e80:	d020      	beq.n	8023ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8023e82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023e84:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023e88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023e8a:	436f      	muls	r7, r5
 8023e8c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023e8e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023e92:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023e96:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023e98:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023e9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023ea0:	fb05 fa0a 	mul.w	sl, r5, sl
 8023ea4:	44bc      	add	ip, r7
 8023ea6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023eaa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023eae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023eb2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023eb6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023eba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023ebe:	ea4c 050a 	orr.w	r5, ip, sl
 8023ec2:	950e      	str	r5, [sp, #56]	; 0x38
 8023ec4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023ec6:	2dff      	cmp	r5, #255	; 0xff
 8023ec8:	d020      	beq.n	8023f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8023eca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023ecc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023ed0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023ed2:	436f      	muls	r7, r5
 8023ed4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023ed6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023eda:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023ede:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023ee0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023ee4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023ee8:	fb05 fa0a 	mul.w	sl, r5, sl
 8023eec:	44bc      	add	ip, r7
 8023eee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023ef2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ef6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023efa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023efe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f06:	ea4c 050a 	orr.w	r5, ip, sl
 8023f0a:	9509      	str	r5, [sp, #36]	; 0x24
 8023f0c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023f0e:	2dff      	cmp	r5, #255	; 0xff
 8023f10:	d020      	beq.n	8023f54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8023f12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023f14:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023f18:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023f1a:	436f      	muls	r7, r5
 8023f1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023f1e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023f22:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023f26:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023f28:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023f2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f30:	fb05 fa0a 	mul.w	sl, r5, sl
 8023f34:	44bc      	add	ip, r7
 8023f36:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023f3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f3e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023f42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f4e:	ea4c 050a 	orr.w	r5, ip, sl
 8023f52:	950f      	str	r5, [sp, #60]	; 0x3c
 8023f54:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023f56:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023f5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023f5e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023f62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023f64:	fb0e f707 	mul.w	r7, lr, r7
 8023f68:	fb02 770c 	mla	r7, r2, ip, r7
 8023f6c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023f70:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023f72:	fb00 770c 	mla	r7, r0, ip, r7
 8023f76:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023f7a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023f7c:	fb08 770c 	mla	r7, r8, ip, r7
 8023f80:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8023f84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023f86:	fb0e fe0c 	mul.w	lr, lr, ip
 8023f8a:	0a3f      	lsrs	r7, r7, #8
 8023f8c:	fb02 e303 	mla	r3, r2, r3, lr
 8023f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023f92:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023f96:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023f9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023f9c:	fb00 330a 	mla	r3, r0, sl, r3
 8023fa0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023fa4:	f8b9 0000 	ldrh.w	r0, [r9]
 8023fa8:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023fae:	1202      	asrs	r2, r0, #8
 8023fb0:	4359      	muls	r1, r3
 8023fb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023fb6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023fba:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023fbe:	1c4b      	adds	r3, r1, #1
 8023fc0:	ea47 070c 	orr.w	r7, r7, ip
 8023fc4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023fc8:	0c3b      	lsrs	r3, r7, #16
 8023fca:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023fce:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8023fd2:	b2ff      	uxtb	r7, r7
 8023fd4:	fb13 f305 	smulbb	r3, r3, r5
 8023fd8:	b2c9      	uxtb	r1, r1
 8023fda:	fb17 f705 	smulbb	r7, r7, r5
 8023fde:	fb02 3201 	mla	r2, r2, r1, r3
 8023fe2:	10c3      	asrs	r3, r0, #3
 8023fe4:	fb1c fc05 	smulbb	ip, ip, r5
 8023fe8:	00c0      	lsls	r0, r0, #3
 8023fea:	b292      	uxth	r2, r2
 8023fec:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8023ff0:	b2c0      	uxtb	r0, r0
 8023ff2:	fb03 c301 	mla	r3, r3, r1, ip
 8023ff6:	fb00 7001 	mla	r0, r0, r1, r7
 8023ffa:	1c51      	adds	r1, r2, #1
 8023ffc:	b29b      	uxth	r3, r3
 8023ffe:	b280      	uxth	r0, r0
 8024000:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024004:	f100 0c01 	add.w	ip, r0, #1
 8024008:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802400c:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8024010:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024014:	ea4c 0202 	orr.w	r2, ip, r2
 8024018:	f103 0c01 	add.w	ip, r3, #1
 802401c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024020:	095b      	lsrs	r3, r3, #5
 8024022:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024026:	431a      	orrs	r2, r3
 8024028:	f8a9 2000 	strh.w	r2, [r9]
 802402c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802402e:	f109 0902 	add.w	r9, r9, #2
 8024032:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024036:	441c      	add	r4, r3
 8024038:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802403a:	441e      	add	r6, r3
 802403c:	e647      	b.n	8023cce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 802403e:	2800      	cmp	r0, #0
 8024040:	f43f aedf 	beq.w	8023e02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8024044:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8024048:	9109      	str	r1, [sp, #36]	; 0x24
 802404a:	0e09      	lsrs	r1, r1, #24
 802404c:	9112      	str	r1, [sp, #72]	; 0x48
 802404e:	e6d8      	b.n	8023e02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8024050:	b01d      	add	sp, #116	; 0x74
 8024052:	ecbd 8b08 	vpop	{d8-d11}
 8024056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802405c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802405c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024060:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8024064:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8024068:	fb04 5603 	mla	r6, r4, r3, r5
 802406c:	2c00      	cmp	r4, #0
 802406e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8024072:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8024076:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802407a:	db37      	blt.n	80240ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 802407c:	45a6      	cmp	lr, r4
 802407e:	dd35      	ble.n	80240ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8024080:	2d00      	cmp	r5, #0
 8024082:	db31      	blt.n	80240e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024084:	42ab      	cmp	r3, r5
 8024086:	dd2f      	ble.n	80240e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024088:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 802408c:	1c6e      	adds	r6, r5, #1
 802408e:	d430      	bmi.n	80240f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8024090:	42b3      	cmp	r3, r6
 8024092:	dd2e      	ble.n	80240f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8024094:	b378      	cbz	r0, 80240f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 8024096:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802409a:	3401      	adds	r4, #1
 802409c:	d42f      	bmi.n	80240fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 802409e:	45a6      	cmp	lr, r4
 80240a0:	dd2d      	ble.n	80240fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 80240a2:	b37f      	cbz	r7, 8024104 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 80240a4:	2d00      	cmp	r5, #0
 80240a6:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 80240aa:	db26      	blt.n	80240fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80240ac:	42ab      	cmp	r3, r5
 80240ae:	dd24      	ble.n	80240fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80240b0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80240b4:	3501      	adds	r5, #1
 80240b6:	d428      	bmi.n	802410a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80240b8:	42ab      	cmp	r3, r5
 80240ba:	dd26      	ble.n	802410a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80240bc:	b338      	cbz	r0, 802410e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 80240be:	f8de 3004 	ldr.w	r3, [lr, #4]
 80240c2:	280f      	cmp	r0, #15
 80240c4:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80240c8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80240cc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80240d0:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80240d4:	d801      	bhi.n	80240da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 80240d6:	2f0f      	cmp	r7, #15
 80240d8:	d91b      	bls.n	8024112 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 80240da:	4b87      	ldr	r3, [pc, #540]	; (80242f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 80240dc:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80240e0:	4a86      	ldr	r2, [pc, #536]	; (80242fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 80240e2:	4887      	ldr	r0, [pc, #540]	; (8024300 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 80240e4:	f001 fd46 	bl	8025b74 <__assert_func>
 80240e8:	2200      	movs	r2, #0
 80240ea:	e7cf      	b.n	802408c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 80240ec:	2600      	movs	r6, #0
 80240ee:	4632      	mov	r2, r6
 80240f0:	e7d3      	b.n	802409a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 80240f2:	2600      	movs	r6, #0
 80240f4:	e7d1      	b.n	802409a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 80240f6:	4606      	mov	r6, r0
 80240f8:	e7cf      	b.n	802409a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 80240fa:	2400      	movs	r4, #0
 80240fc:	e7da      	b.n	80240b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 80240fe:	2300      	movs	r3, #0
 8024100:	461c      	mov	r4, r3
 8024102:	e7de      	b.n	80240c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8024104:	463b      	mov	r3, r7
 8024106:	463c      	mov	r4, r7
 8024108:	e7db      	b.n	80240c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802410a:	2300      	movs	r3, #0
 802410c:	e7d9      	b.n	80240c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802410e:	4603      	mov	r3, r0
 8024110:	e7d7      	b.n	80240c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8024112:	b280      	uxth	r0, r0
 8024114:	b2bf      	uxth	r7, r7
 8024116:	fb07 fe00 	mul.w	lr, r7, r0
 802411a:	0100      	lsls	r0, r0, #4
 802411c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024120:	eba0 0c0e 	sub.w	ip, r0, lr
 8024124:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8024128:	b2bf      	uxth	r7, r7
 802412a:	fa1f fc8c 	uxth.w	ip, ip
 802412e:	1bed      	subs	r5, r5, r7
 8024130:	fb0c f00a 	mul.w	r0, ip, sl
 8024134:	b2ad      	uxth	r5, r5
 8024136:	fb0b 0005 	mla	r0, fp, r5, r0
 802413a:	fb07 0009 	mla	r0, r7, r9, r0
 802413e:	fb0e 0008 	mla	r0, lr, r8, r0
 8024142:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024146:	9001      	str	r0, [sp, #4]
 8024148:	2800      	cmp	r0, #0
 802414a:	f000 80d1 	beq.w	80242f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 802414e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024152:	d018      	beq.n	8024186 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8024154:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024158:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802415c:	fb0b f000 	mul.w	r0, fp, r0
 8024160:	fb0b fb02 	mul.w	fp, fp, r2
 8024164:	0a02      	lsrs	r2, r0, #8
 8024166:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802416a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802416e:	4402      	add	r2, r0
 8024170:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024174:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024178:	0a12      	lsrs	r2, r2, #8
 802417a:	0a00      	lsrs	r0, r0, #8
 802417c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024180:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024184:	4302      	orrs	r2, r0
 8024186:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802418a:	d01a      	beq.n	80241c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 802418c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8024190:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024194:	fb0a f000 	mul.w	r0, sl, r0
 8024198:	fb0a fa06 	mul.w	sl, sl, r6
 802419c:	0a06      	lsrs	r6, r0, #8
 802419e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80241a2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80241a6:	4406      	add	r6, r0
 80241a8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80241ac:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80241b0:	0a36      	lsrs	r6, r6, #8
 80241b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80241b6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80241ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80241be:	ea46 060a 	orr.w	r6, r6, sl
 80241c2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80241c6:	d01b      	beq.n	8024200 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 80241c8:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80241cc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80241d0:	fb09 fa0a 	mul.w	sl, r9, sl
 80241d4:	fb09 f004 	mul.w	r0, r9, r4
 80241d8:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80241dc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80241e0:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80241e4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80241e8:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80241ec:	4454      	add	r4, sl
 80241ee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80241f2:	0a24      	lsrs	r4, r4, #8
 80241f4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80241f8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80241fc:	ea44 0409 	orr.w	r4, r4, r9
 8024200:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024204:	d01b      	beq.n	802423e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 8024206:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802420a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802420e:	fb08 f909 	mul.w	r9, r8, r9
 8024212:	fb08 f003 	mul.w	r0, r8, r3
 8024216:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802421a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802421e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8024222:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024226:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802422a:	444b      	add	r3, r9
 802422c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024230:	0a1b      	lsrs	r3, r3, #8
 8024232:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024236:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802423a:	ea43 0308 	orr.w	r3, r3, r8
 802423e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024242:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024246:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 802424a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802424e:	fb0c f808 	mul.w	r8, ip, r8
 8024252:	8808      	ldrh	r0, [r1, #0]
 8024254:	fb0c f606 	mul.w	r6, ip, r6
 8024258:	fb05 8909 	mla	r9, r5, r9, r8
 802425c:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8024260:	fb05 6502 	mla	r5, r5, r2, r6
 8024264:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024268:	fb07 9908 	mla	r9, r7, r8, r9
 802426c:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8024270:	fb07 5704 	mla	r7, r7, r4, r5
 8024274:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024278:	fb0e 9808 	mla	r8, lr, r8, r9
 802427c:	10c4      	asrs	r4, r0, #3
 802427e:	fb0e 7e03 	mla	lr, lr, r3, r7
 8024282:	9b01      	ldr	r3, [sp, #4]
 8024284:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024288:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802428c:	43da      	mvns	r2, r3
 802428e:	1203      	asrs	r3, r0, #8
 8024290:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024294:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024298:	b2d2      	uxtb	r2, r2
 802429a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802429e:	00c0      	lsls	r0, r0, #3
 80242a0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80242a4:	4353      	muls	r3, r2
 80242a6:	b2c0      	uxtb	r0, r0
 80242a8:	ea48 0e0e 	orr.w	lr, r8, lr
 80242ac:	4354      	muls	r4, r2
 80242ae:	4350      	muls	r0, r2
 80242b0:	1c5a      	adds	r2, r3, #1
 80242b2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80242b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80242ba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80242be:	1c62      	adds	r2, r4, #1
 80242c0:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80242c4:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80242c8:	021b      	lsls	r3, r3, #8
 80242ca:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80242ce:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80242d2:	00d2      	lsls	r2, r2, #3
 80242d4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80242d8:	4313      	orrs	r3, r2
 80242da:	1c42      	adds	r2, r0, #1
 80242dc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80242e0:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 80242e4:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 80242e8:	ea4e 0e03 	orr.w	lr, lr, r3
 80242ec:	f8a1 e000 	strh.w	lr, [r1]
 80242f0:	b003      	add	sp, #12
 80242f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242f6:	bf00      	nop
 80242f8:	0802a0cd 	.word	0x0802a0cd
 80242fc:	0802a69a 	.word	0x0802a69a
 8024300:	0802a151 	.word	0x0802a151

08024304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024308:	ed2d 8b08 	vpush	{d8-d11}
 802430c:	b09b      	sub	sp, #108	; 0x6c
 802430e:	eeb0 aa40 	vmov.f32	s20, s0
 8024312:	eef0 9a60 	vmov.f32	s19, s1
 8024316:	9218      	str	r2, [sp, #96]	; 0x60
 8024318:	eeb0 9a41 	vmov.f32	s18, s2
 802431c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802431e:	eeb0 8a62 	vmov.f32	s16, s5
 8024322:	9019      	str	r0, [sp, #100]	; 0x64
 8024324:	eef0 8a43 	vmov.f32	s17, s6
 8024328:	6850      	ldr	r0, [r2, #4]
 802432a:	eef0 ba44 	vmov.f32	s23, s8
 802432e:	9116      	str	r1, [sp, #88]	; 0x58
 8024330:	eeb0 ba64 	vmov.f32	s22, s9
 8024334:	9307      	str	r3, [sp, #28]
 8024336:	eef0 aa45 	vmov.f32	s21, s10
 802433a:	6812      	ldr	r2, [r2, #0]
 802433c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8024340:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8024344:	fb00 1303 	mla	r3, r0, r3, r1
 8024348:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802434c:	930a      	str	r3, [sp, #40]	; 0x28
 802434e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024350:	681b      	ldr	r3, [r3, #0]
 8024352:	930f      	str	r3, [sp, #60]	; 0x3c
 8024354:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024356:	2b00      	cmp	r3, #0
 8024358:	dc03      	bgt.n	8024362 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802435a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802435c:	2b00      	cmp	r3, #0
 802435e:	f340 8387 	ble.w	8024a70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8024362:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024364:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024368:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802436c:	1e48      	subs	r0, r1, #1
 802436e:	1e57      	subs	r7, r2, #1
 8024370:	9b07      	ldr	r3, [sp, #28]
 8024372:	2b00      	cmp	r3, #0
 8024374:	f340 8166 	ble.w	8024644 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8024378:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802437c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024380:	d406      	bmi.n	8024390 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024382:	4584      	cmp	ip, r0
 8024384:	da04      	bge.n	8024390 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024386:	2b00      	cmp	r3, #0
 8024388:	db02      	blt.n	8024390 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802438a:	42bb      	cmp	r3, r7
 802438c:	f2c0 815b 	blt.w	8024646 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024390:	f11c 0c01 	adds.w	ip, ip, #1
 8024394:	f100 814b 	bmi.w	802462e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8024398:	4561      	cmp	r1, ip
 802439a:	f2c0 8148 	blt.w	802462e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802439e:	3301      	adds	r3, #1
 80243a0:	f100 8145 	bmi.w	802462e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80243a4:	429a      	cmp	r2, r3
 80243a6:	f2c0 8142 	blt.w	802462e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80243aa:	9b07      	ldr	r3, [sp, #28]
 80243ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80243ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80243b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80243b2:	2b00      	cmp	r3, #0
 80243b4:	f340 8165 	ble.w	8024682 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80243b8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80243ba:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80243be:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80243c0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80243c4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80243c8:	1422      	asrs	r2, r4, #16
 80243ca:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80243ce:	689b      	ldr	r3, [r3, #8]
 80243d0:	f100 81d5 	bmi.w	802477e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80243d4:	f103 38ff 	add.w	r8, r3, #4294967295
 80243d8:	4542      	cmp	r2, r8
 80243da:	f280 81d0 	bge.w	802477e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80243de:	f1bc 0f00 	cmp.w	ip, #0
 80243e2:	f2c0 81cc 	blt.w	802477e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80243e6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80243ea:	45c4      	cmp	ip, r8
 80243ec:	f280 81c7 	bge.w	802477e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80243f0:	b21b      	sxth	r3, r3
 80243f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80243f4:	fb0c 2203 	mla	r2, ip, r3, r2
 80243f8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80243fc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8024400:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8024404:	2900      	cmp	r1, #0
 8024406:	f000 8182 	beq.w	802470e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802440a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802440e:	950b      	str	r5, [sp, #44]	; 0x2c
 8024410:	0e2d      	lsrs	r5, r5, #24
 8024412:	9512      	str	r5, [sp, #72]	; 0x48
 8024414:	b180      	cbz	r0, 8024438 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8024416:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802441a:	3b01      	subs	r3, #1
 802441c:	009b      	lsls	r3, r3, #2
 802441e:	3304      	adds	r3, #4
 8024420:	eb08 0c03 	add.w	ip, r8, r3
 8024424:	f858 3003 	ldr.w	r3, [r8, r3]
 8024428:	9308      	str	r3, [sp, #32]
 802442a:	0e1b      	lsrs	r3, r3, #24
 802442c:	9310      	str	r3, [sp, #64]	; 0x40
 802442e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024432:	930c      	str	r3, [sp, #48]	; 0x30
 8024434:	0e1b      	lsrs	r3, r3, #24
 8024436:	9313      	str	r3, [sp, #76]	; 0x4c
 8024438:	b289      	uxth	r1, r1
 802443a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802443c:	b280      	uxth	r0, r0
 802443e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024440:	fb01 f900 	mul.w	r9, r1, r0
 8024444:	0109      	lsls	r1, r1, #4
 8024446:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802444a:	eba1 0809 	sub.w	r8, r1, r9
 802444e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8024452:	b280      	uxth	r0, r0
 8024454:	fa1f f888 	uxth.w	r8, r8
 8024458:	1a09      	subs	r1, r1, r0
 802445a:	fb08 f303 	mul.w	r3, r8, r3
 802445e:	b289      	uxth	r1, r1
 8024460:	fb01 330e 	mla	r3, r1, lr, r3
 8024464:	fb00 3305 	mla	r3, r0, r5, r3
 8024468:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802446a:	fb09 3305 	mla	r3, r9, r5, r3
 802446e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024472:	2b00      	cmp	r3, #0
 8024474:	f000 80d2 	beq.w	802461c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8024478:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802447c:	d01b      	beq.n	80244b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802447e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8024482:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024486:	fb0e fa0a 	mul.w	sl, lr, sl
 802448a:	fb0e fe02 	mul.w	lr, lr, r2
 802448e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8024492:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024496:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802449a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802449e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80244a2:	4452      	add	r2, sl
 80244a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80244a8:	0a12      	lsrs	r2, r2, #8
 80244aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80244ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80244b2:	ea42 020c 	orr.w	r2, r2, ip
 80244b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80244b8:	2dff      	cmp	r5, #255	; 0xff
 80244ba:	d021      	beq.n	8024500 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80244bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80244be:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80244c2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80244c4:	fb05 fb0b 	mul.w	fp, r5, fp
 80244c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80244ca:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80244ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80244d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80244d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80244d8:	fb05 fa0a 	mul.w	sl, r5, sl
 80244dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80244e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80244e4:	44de      	add	lr, fp
 80244e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80244ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80244ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80244f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80244f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80244fa:	ea4e 050a 	orr.w	r5, lr, sl
 80244fe:	950b      	str	r5, [sp, #44]	; 0x2c
 8024500:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024502:	2dff      	cmp	r5, #255	; 0xff
 8024504:	d021      	beq.n	802454a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8024506:	9d08      	ldr	r5, [sp, #32]
 8024508:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802450c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802450e:	fb05 fb0b 	mul.w	fp, r5, fp
 8024512:	9d08      	ldr	r5, [sp, #32]
 8024514:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8024518:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802451a:	fb05 fa0e 	mul.w	sl, r5, lr
 802451e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024522:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024526:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802452a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802452e:	44de      	add	lr, fp
 8024530:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024534:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024538:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802453c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024540:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024544:	ea4e 050a 	orr.w	r5, lr, sl
 8024548:	9508      	str	r5, [sp, #32]
 802454a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802454c:	2dff      	cmp	r5, #255	; 0xff
 802454e:	d021      	beq.n	8024594 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8024550:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024552:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024556:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024558:	fb05 fb0b 	mul.w	fp, r5, fp
 802455c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802455e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024562:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024564:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024568:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802456c:	fb05 fa0a 	mul.w	sl, r5, sl
 8024570:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024574:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024578:	44de      	add	lr, fp
 802457a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802457e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024582:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024586:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802458a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802458e:	ea4e 050a 	orr.w	r5, lr, sl
 8024592:	950c      	str	r5, [sp, #48]	; 0x30
 8024594:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024596:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802459a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802459e:	2bff      	cmp	r3, #255	; 0xff
 80245a0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80245a4:	9d08      	ldr	r5, [sp, #32]
 80245a6:	fb08 fc0c 	mul.w	ip, r8, ip
 80245aa:	fb01 cc0e 	mla	ip, r1, lr, ip
 80245ae:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80245b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80245b4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80245b8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80245bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80245be:	fb09 cc0e 	mla	ip, r9, lr, ip
 80245c2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80245c6:	fb08 f80e 	mul.w	r8, r8, lr
 80245ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80245ce:	fb01 8202 	mla	r2, r1, r2, r8
 80245d2:	9908      	ldr	r1, [sp, #32]
 80245d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80245d8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80245dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80245de:	fb00 220a 	mla	r2, r0, sl, r2
 80245e2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80245e6:	fb09 2900 	mla	r9, r9, r0, r2
 80245ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80245ee:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80245f2:	ea4c 0c09 	orr.w	ip, ip, r9
 80245f6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80245fa:	f040 8091 	bne.w	8024720 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80245fe:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8024602:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8024606:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802460a:	f022 0207 	bic.w	r2, r2, #7
 802460e:	431a      	orrs	r2, r3
 8024610:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8024614:	ea4c 0c02 	orr.w	ip, ip, r2
 8024618:	f8a7 c000 	strh.w	ip, [r7]
 802461c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802461e:	3702      	adds	r7, #2
 8024620:	441c      	add	r4, r3
 8024622:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024624:	441e      	add	r6, r3
 8024626:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024628:	3b01      	subs	r3, #1
 802462a:	9317      	str	r3, [sp, #92]	; 0x5c
 802462c:	e6c0      	b.n	80243b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802462e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024630:	441c      	add	r4, r3
 8024632:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024634:	441e      	add	r6, r3
 8024636:	9b07      	ldr	r3, [sp, #28]
 8024638:	3b01      	subs	r3, #1
 802463a:	9307      	str	r3, [sp, #28]
 802463c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802463e:	3302      	adds	r3, #2
 8024640:	930a      	str	r3, [sp, #40]	; 0x28
 8024642:	e695      	b.n	8024370 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024644:	d024      	beq.n	8024690 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8024646:	9b07      	ldr	r3, [sp, #28]
 8024648:	982f      	ldr	r0, [sp, #188]	; 0xbc
 802464a:	3b01      	subs	r3, #1
 802464c:	fb00 4003 	mla	r0, r0, r3, r4
 8024650:	1400      	asrs	r0, r0, #16
 8024652:	f53f aeaa 	bmi.w	80243aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8024656:	3901      	subs	r1, #1
 8024658:	4288      	cmp	r0, r1
 802465a:	f6bf aea6 	bge.w	80243aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802465e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8024660:	fb01 6303 	mla	r3, r1, r3, r6
 8024664:	141b      	asrs	r3, r3, #16
 8024666:	f53f aea0 	bmi.w	80243aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802466a:	3a01      	subs	r2, #1
 802466c:	4293      	cmp	r3, r2
 802466e:	f6bf ae9c 	bge.w	80243aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8024672:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024676:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802467a:	f1bb 0f00 	cmp.w	fp, #0
 802467e:	f300 809a 	bgt.w	80247b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8024682:	9b07      	ldr	r3, [sp, #28]
 8024684:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802468a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802468e:	930a      	str	r3, [sp, #40]	; 0x28
 8024690:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024692:	2b00      	cmp	r3, #0
 8024694:	f340 81ec 	ble.w	8024a70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8024698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802469c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802469e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80246a2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80246a6:	eef0 6a48 	vmov.f32	s13, s16
 80246aa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80246ae:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80246b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80246b6:	ee16 4a90 	vmov	r4, s13
 80246ba:	eef0 6a68 	vmov.f32	s13, s17
 80246be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80246c2:	ee16 6a90 	vmov	r6, s13
 80246c6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80246ca:	ee69 7a27 	vmul.f32	s15, s18, s15
 80246ce:	ee37 8a48 	vsub.f32	s16, s14, s16
 80246d2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80246d6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80246da:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80246de:	ee18 2a10 	vmov	r2, s16
 80246e2:	eeb0 8a47 	vmov.f32	s16, s14
 80246e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80246ea:	ee18 2a90 	vmov	r2, s17
 80246ee:	932f      	str	r3, [sp, #188]	; 0xbc
 80246f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80246f2:	eef0 8a67 	vmov.f32	s17, s15
 80246f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80246fa:	9330      	str	r3, [sp, #192]	; 0xc0
 80246fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80246fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024700:	3b01      	subs	r3, #1
 8024702:	9316      	str	r3, [sp, #88]	; 0x58
 8024704:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024706:	bf08      	it	eq
 8024708:	4613      	moveq	r3, r2
 802470a:	9307      	str	r3, [sp, #28]
 802470c:	e622      	b.n	8024354 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 802470e:	2800      	cmp	r0, #0
 8024710:	f43f ae92 	beq.w	8024438 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8024714:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024718:	9308      	str	r3, [sp, #32]
 802471a:	0e1b      	lsrs	r3, r3, #24
 802471c:	9310      	str	r3, [sp, #64]	; 0x40
 802471e:	e68b      	b.n	8024438 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8024720:	8839      	ldrh	r1, [r7, #0]
 8024722:	43db      	mvns	r3, r3
 8024724:	4dd5      	ldr	r5, [pc, #852]	; (8024a7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8024726:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802472a:	fa5f f883 	uxtb.w	r8, r3
 802472e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8024732:	10c8      	asrs	r0, r1, #3
 8024734:	00cb      	lsls	r3, r1, #3
 8024736:	fb0e fe08 	mul.w	lr, lr, r8
 802473a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802473e:	b2db      	uxtb	r3, r3
 8024740:	f10e 0101 	add.w	r1, lr, #1
 8024744:	fb00 f008 	mul.w	r0, r0, r8
 8024748:	fb03 f308 	mul.w	r3, r3, r8
 802474c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8024750:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8024754:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8024758:	f100 0e01 	add.w	lr, r0, #1
 802475c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8024760:	b2c9      	uxtb	r1, r1
 8024762:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024766:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802476a:	00d2      	lsls	r2, r2, #3
 802476c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024770:	430a      	orrs	r2, r1
 8024772:	1c59      	adds	r1, r3, #1
 8024774:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024778:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802477c:	e748      	b.n	8024610 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802477e:	f112 0801 	adds.w	r8, r2, #1
 8024782:	f53f af4b 	bmi.w	802461c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8024786:	4543      	cmp	r3, r8
 8024788:	f6ff af48 	blt.w	802461c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802478c:	f11c 0801 	adds.w	r8, ip, #1
 8024790:	f53f af44 	bmi.w	802461c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8024794:	45c6      	cmp	lr, r8
 8024796:	f6ff af41 	blt.w	802461c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802479a:	b21b      	sxth	r3, r3
 802479c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80247a0:	fa0f f28e 	sxth.w	r2, lr
 80247a4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80247a8:	9200      	str	r2, [sp, #0]
 80247aa:	4639      	mov	r1, r7
 80247ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80247ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80247b0:	f7ff fc54 	bl	802405c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80247b4:	e732      	b.n	802461c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80247b6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80247b8:	1421      	asrs	r1, r4, #16
 80247ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80247bc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80247c0:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80247c4:	1433      	asrs	r3, r6, #16
 80247c6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80247ca:	fb07 1303 	mla	r3, r7, r3, r1
 80247ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80247d0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80247d4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80247d8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80247dc:	2a00      	cmp	r2, #0
 80247de:	f000 8108 	beq.w	80249f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80247e2:	684d      	ldr	r5, [r1, #4]
 80247e4:	950d      	str	r5, [sp, #52]	; 0x34
 80247e6:	0e2d      	lsrs	r5, r5, #24
 80247e8:	9514      	str	r5, [sp, #80]	; 0x50
 80247ea:	b178      	cbz	r0, 802480c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80247ec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80247f0:	3f01      	subs	r7, #1
 80247f2:	00bf      	lsls	r7, r7, #2
 80247f4:	3704      	adds	r7, #4
 80247f6:	eb01 0e07 	add.w	lr, r1, r7
 80247fa:	59c9      	ldr	r1, [r1, r7]
 80247fc:	9109      	str	r1, [sp, #36]	; 0x24
 80247fe:	0e09      	lsrs	r1, r1, #24
 8024800:	9111      	str	r1, [sp, #68]	; 0x44
 8024802:	f8de 1004 	ldr.w	r1, [lr, #4]
 8024806:	910e      	str	r1, [sp, #56]	; 0x38
 8024808:	0e09      	lsrs	r1, r1, #24
 802480a:	9115      	str	r1, [sp, #84]	; 0x54
 802480c:	b292      	uxth	r2, r2
 802480e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024810:	b280      	uxth	r0, r0
 8024812:	fb02 f900 	mul.w	r9, r2, r0
 8024816:	0112      	lsls	r2, r2, #4
 8024818:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802481c:	eba2 0e09 	sub.w	lr, r2, r9
 8024820:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024824:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024826:	b280      	uxth	r0, r0
 8024828:	fa1f fe8e 	uxth.w	lr, lr
 802482c:	1a09      	subs	r1, r1, r0
 802482e:	fb0e f202 	mul.w	r2, lr, r2
 8024832:	b289      	uxth	r1, r1
 8024834:	fb01 220c 	mla	r2, r1, ip, r2
 8024838:	fb00 2205 	mla	r2, r0, r5, r2
 802483c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802483e:	fb09 2205 	mla	r2, r9, r5, r2
 8024842:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024846:	2a00      	cmp	r2, #0
 8024848:	f000 80ca 	beq.w	80249e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802484c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024850:	d019      	beq.n	8024886 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 8024852:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024856:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802485a:	fb0c fa0a 	mul.w	sl, ip, sl
 802485e:	fb0c fc03 	mul.w	ip, ip, r3
 8024862:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024866:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802486a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802486e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024872:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024876:	4453      	add	r3, sl
 8024878:	0a3f      	lsrs	r7, r7, #8
 802487a:	0a1b      	lsrs	r3, r3, #8
 802487c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024880:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024884:	433b      	orrs	r3, r7
 8024886:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024888:	2dff      	cmp	r5, #255	; 0xff
 802488a:	d020      	beq.n	80248ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 802488c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802488e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024892:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024894:	436f      	muls	r7, r5
 8024896:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024898:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802489c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80248a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80248a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80248a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80248aa:	fb05 fa0a 	mul.w	sl, r5, sl
 80248ae:	44bc      	add	ip, r7
 80248b0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80248b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80248b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80248bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80248c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80248c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80248c8:	ea4c 050a 	orr.w	r5, ip, sl
 80248cc:	950d      	str	r5, [sp, #52]	; 0x34
 80248ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80248d0:	2dff      	cmp	r5, #255	; 0xff
 80248d2:	d020      	beq.n	8024916 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 80248d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80248d6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80248da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80248dc:	436f      	muls	r7, r5
 80248de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80248e0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80248e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80248e6:	fb05 fa0c 	mul.w	sl, r5, ip
 80248ea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80248ee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80248f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80248f6:	44bc      	add	ip, r7
 80248f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80248fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024900:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024904:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024908:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802490c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024910:	ea4c 050a 	orr.w	r5, ip, sl
 8024914:	9509      	str	r5, [sp, #36]	; 0x24
 8024916:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024918:	2dff      	cmp	r5, #255	; 0xff
 802491a:	d020      	beq.n	802495e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 802491c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802491e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024922:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024924:	436f      	muls	r7, r5
 8024926:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024928:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802492c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024930:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024932:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024936:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802493a:	fb05 fa0a 	mul.w	sl, r5, sl
 802493e:	44bc      	add	ip, r7
 8024940:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024944:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024948:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802494c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024950:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024954:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024958:	ea4c 050a 	orr.w	r5, ip, sl
 802495c:	950e      	str	r5, [sp, #56]	; 0x38
 802495e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024960:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024964:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024968:	2aff      	cmp	r2, #255	; 0xff
 802496a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802496e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024970:	fb0e f707 	mul.w	r7, lr, r7
 8024974:	fb01 770c 	mla	r7, r1, ip, r7
 8024978:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802497c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802497e:	fb00 770c 	mla	r7, r0, ip, r7
 8024982:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024986:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024988:	fb09 770c 	mla	r7, r9, ip, r7
 802498c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024990:	fb0e fe0c 	mul.w	lr, lr, ip
 8024994:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8024998:	fb01 e303 	mla	r3, r1, r3, lr
 802499c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802499e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80249a2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80249a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80249a8:	fb00 330a 	mla	r3, r0, sl, r3
 80249ac:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80249b0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80249b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249b8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80249bc:	ea47 070c 	orr.w	r7, r7, ip
 80249c0:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80249c4:	d11e      	bne.n	8024a04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 80249c6:	097a      	lsrs	r2, r7, #5
 80249c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80249cc:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80249d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80249d4:	f023 0307 	bic.w	r3, r3, #7
 80249d8:	4313      	orrs	r3, r2
 80249da:	431f      	orrs	r7, r3
 80249dc:	f8a8 7000 	strh.w	r7, [r8]
 80249e0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80249e2:	f108 0802 	add.w	r8, r8, #2
 80249e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80249ea:	441c      	add	r4, r3
 80249ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80249ee:	441e      	add	r6, r3
 80249f0:	e643      	b.n	802467a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 80249f2:	2800      	cmp	r0, #0
 80249f4:	f43f af0a 	beq.w	802480c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80249f8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80249fc:	9109      	str	r1, [sp, #36]	; 0x24
 80249fe:	0e09      	lsrs	r1, r1, #24
 8024a00:	9111      	str	r1, [sp, #68]	; 0x44
 8024a02:	e703      	b.n	802480c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8024a04:	f8b8 1000 	ldrh.w	r1, [r8]
 8024a08:	43d2      	mvns	r2, r2
 8024a0a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8024a0e:	fa5f fe82 	uxtb.w	lr, r2
 8024a12:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024a16:	10c8      	asrs	r0, r1, #3
 8024a18:	00ca      	lsls	r2, r1, #3
 8024a1a:	fb0c fc0e 	mul.w	ip, ip, lr
 8024a1e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024a22:	b2d2      	uxtb	r2, r2
 8024a24:	f10c 0101 	add.w	r1, ip, #1
 8024a28:	fb00 f00e 	mul.w	r0, r0, lr
 8024a2c:	fb02 f20e 	mul.w	r2, r2, lr
 8024a30:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024a34:	0c39      	lsrs	r1, r7, #16
 8024a36:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024a3a:	4910      	ldr	r1, [pc, #64]	; (8024a7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8024a3c:	fa5f fc8c 	uxtb.w	ip, ip
 8024a40:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8024a44:	1c41      	adds	r1, r0, #1
 8024a46:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024a4a:	1c51      	adds	r1, r2, #1
 8024a4c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024a50:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024a54:	00c0      	lsls	r0, r0, #3
 8024a56:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024a5a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024a5e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024a62:	ea4c 0c00 	orr.w	ip, ip, r0
 8024a66:	ea47 0c0c 	orr.w	ip, r7, ip
 8024a6a:	f8a8 c000 	strh.w	ip, [r8]
 8024a6e:	e7b7      	b.n	80249e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8024a70:	b01b      	add	sp, #108	; 0x6c
 8024a72:	ecbd 8b08 	vpop	{d8-d11}
 8024a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a7a:	bf00      	nop
 8024a7c:	fffff800 	.word	0xfffff800

08024a80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8024a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024a84:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8024a88:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024a8c:	2c00      	cmp	r4, #0
 8024a8e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024a92:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8024a96:	fb04 ce03 	mla	lr, r4, r3, ip
 8024a9a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8024a9e:	db60      	blt.n	8024b62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8024aa0:	45a1      	cmp	r9, r4
 8024aa2:	dd5e      	ble.n	8024b62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8024aa4:	f1bc 0f00 	cmp.w	ip, #0
 8024aa8:	db59      	blt.n	8024b5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8024aaa:	45e0      	cmp	r8, ip
 8024aac:	dd57      	ble.n	8024b5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8024aae:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8024ab2:	f01e 0f01 	tst.w	lr, #1
 8024ab6:	5c16      	ldrb	r6, [r2, r0]
 8024ab8:	bf0c      	ite	eq
 8024aba:	f006 060f 	andeq.w	r6, r6, #15
 8024abe:	1136      	asrne	r6, r6, #4
 8024ac0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024ac4:	b2f6      	uxtb	r6, r6
 8024ac6:	f11c 0001 	adds.w	r0, ip, #1
 8024aca:	d44d      	bmi.n	8024b68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8024acc:	4580      	cmp	r8, r0
 8024ace:	dd4b      	ble.n	8024b68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8024ad0:	2d00      	cmp	r5, #0
 8024ad2:	d04b      	beq.n	8024b6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8024ad4:	f10e 0a01 	add.w	sl, lr, #1
 8024ad8:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8024adc:	f01a 0f01 	tst.w	sl, #1
 8024ae0:	5c10      	ldrb	r0, [r2, r0]
 8024ae2:	bf0c      	ite	eq
 8024ae4:	f000 000f 	andeq.w	r0, r0, #15
 8024ae8:	1100      	asrne	r0, r0, #4
 8024aea:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024aee:	b2c0      	uxtb	r0, r0
 8024af0:	3401      	adds	r4, #1
 8024af2:	d43f      	bmi.n	8024b74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8024af4:	45a1      	cmp	r9, r4
 8024af6:	dd3d      	ble.n	8024b74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8024af8:	2f00      	cmp	r7, #0
 8024afa:	f000 80a8 	beq.w	8024c4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 8024afe:	f1bc 0f00 	cmp.w	ip, #0
 8024b02:	db35      	blt.n	8024b70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8024b04:	45e0      	cmp	r8, ip
 8024b06:	dd33      	ble.n	8024b70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8024b08:	eb03 090e 	add.w	r9, r3, lr
 8024b0c:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8024b10:	f019 0f01 	tst.w	r9, #1
 8024b14:	5d14      	ldrb	r4, [r2, r4]
 8024b16:	bf0c      	ite	eq
 8024b18:	f004 040f 	andeq.w	r4, r4, #15
 8024b1c:	1124      	asrne	r4, r4, #4
 8024b1e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024b22:	b2e4      	uxtb	r4, r4
 8024b24:	f11c 0c01 	adds.w	ip, ip, #1
 8024b28:	d427      	bmi.n	8024b7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8024b2a:	45e0      	cmp	r8, ip
 8024b2c:	dd25      	ble.n	8024b7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8024b2e:	b335      	cbz	r5, 8024b7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8024b30:	3301      	adds	r3, #1
 8024b32:	449e      	add	lr, r3
 8024b34:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024b38:	f01e 0f01 	tst.w	lr, #1
 8024b3c:	5cd2      	ldrb	r2, [r2, r3]
 8024b3e:	bf0c      	ite	eq
 8024b40:	f002 020f 	andeq.w	r2, r2, #15
 8024b44:	1112      	asrne	r2, r2, #4
 8024b46:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024b4a:	b2d3      	uxtb	r3, r2
 8024b4c:	2d0f      	cmp	r5, #15
 8024b4e:	d917      	bls.n	8024b80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8024b50:	4b42      	ldr	r3, [pc, #264]	; (8024c5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 8024b52:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8024b56:	4a42      	ldr	r2, [pc, #264]	; (8024c60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8024b58:	4842      	ldr	r0, [pc, #264]	; (8024c64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8024b5a:	f001 f80b 	bl	8025b74 <__assert_func>
 8024b5e:	2600      	movs	r6, #0
 8024b60:	e7b1      	b.n	8024ac6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8024b62:	2000      	movs	r0, #0
 8024b64:	4606      	mov	r6, r0
 8024b66:	e7c3      	b.n	8024af0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8024b68:	2000      	movs	r0, #0
 8024b6a:	e7c1      	b.n	8024af0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8024b6c:	4628      	mov	r0, r5
 8024b6e:	e7bf      	b.n	8024af0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8024b70:	2400      	movs	r4, #0
 8024b72:	e7d7      	b.n	8024b24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8024b74:	2300      	movs	r3, #0
 8024b76:	461c      	mov	r4, r3
 8024b78:	e7e8      	b.n	8024b4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8024b7a:	2300      	movs	r3, #0
 8024b7c:	e7e6      	b.n	8024b4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8024b7e:	462b      	mov	r3, r5
 8024b80:	2f0f      	cmp	r7, #15
 8024b82:	d8e5      	bhi.n	8024b50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8024b84:	b2ad      	uxth	r5, r5
 8024b86:	b2bf      	uxth	r7, r7
 8024b88:	fb05 fc07 	mul.w	ip, r5, r7
 8024b8c:	012d      	lsls	r5, r5, #4
 8024b8e:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8024b92:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8024b96:	eba5 050c 	sub.w	r5, r5, ip
 8024b9a:	b2bf      	uxth	r7, r7
 8024b9c:	b2ad      	uxth	r5, r5
 8024b9e:	1bd2      	subs	r2, r2, r7
 8024ba0:	4368      	muls	r0, r5
 8024ba2:	b292      	uxth	r2, r2
 8024ba4:	fb06 0002 	mla	r0, r6, r2, r0
 8024ba8:	fb07 0404 	mla	r4, r7, r4, r0
 8024bac:	fb0c 4303 	mla	r3, ip, r3, r4
 8024bb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024bb4:	b1b3      	cbz	r3, 8024be4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8024bb6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8024bba:	435a      	muls	r2, r3
 8024bbc:	1c53      	adds	r3, r2, #1
 8024bbe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024bc2:	4a29      	ldr	r2, [pc, #164]	; (8024c68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 8024bc4:	121b      	asrs	r3, r3, #8
 8024bc6:	6812      	ldr	r2, [r2, #0]
 8024bc8:	2bff      	cmp	r3, #255	; 0xff
 8024bca:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8024bce:	d10b      	bne.n	8024be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 8024bd0:	0950      	lsrs	r0, r2, #5
 8024bd2:	4b26      	ldr	r3, [pc, #152]	; (8024c6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 8024bd4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024bd8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024bdc:	4033      	ands	r3, r6
 8024bde:	4318      	orrs	r0, r3
 8024be0:	4302      	orrs	r2, r0
 8024be2:	800a      	strh	r2, [r1, #0]
 8024be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024be8:	880d      	ldrh	r5, [r1, #0]
 8024bea:	b29f      	uxth	r7, r3
 8024bec:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8024bf0:	43db      	mvns	r3, r3
 8024bf2:	122c      	asrs	r4, r5, #8
 8024bf4:	fb10 f007 	smulbb	r0, r0, r7
 8024bf8:	b2db      	uxtb	r3, r3
 8024bfa:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024bfe:	b2f6      	uxtb	r6, r6
 8024c00:	b2d2      	uxtb	r2, r2
 8024c02:	fb04 0403 	mla	r4, r4, r3, r0
 8024c06:	10e8      	asrs	r0, r5, #3
 8024c08:	fb12 f207 	smulbb	r2, r2, r7
 8024c0c:	00ed      	lsls	r5, r5, #3
 8024c0e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024c12:	b2a4      	uxth	r4, r4
 8024c14:	fb16 f607 	smulbb	r6, r6, r7
 8024c18:	b2ed      	uxtb	r5, r5
 8024c1a:	fb00 6603 	mla	r6, r0, r3, r6
 8024c1e:	fb05 2303 	mla	r3, r5, r3, r2
 8024c22:	b2b0      	uxth	r0, r6
 8024c24:	b29a      	uxth	r2, r3
 8024c26:	1c63      	adds	r3, r4, #1
 8024c28:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024c2c:	1c53      	adds	r3, r2, #1
 8024c2e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024c32:	1c42      	adds	r2, r0, #1
 8024c34:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024c38:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024c3c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024c40:	0940      	lsrs	r0, r0, #5
 8024c42:	4323      	orrs	r3, r4
 8024c44:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024c48:	4303      	orrs	r3, r0
 8024c4a:	800b      	strh	r3, [r1, #0]
 8024c4c:	e7ca      	b.n	8024be4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8024c4e:	2d0f      	cmp	r5, #15
 8024c50:	f63f af7e 	bhi.w	8024b50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8024c54:	463b      	mov	r3, r7
 8024c56:	463c      	mov	r4, r7
 8024c58:	e794      	b.n	8024b84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8024c5a:	bf00      	nop
 8024c5c:	0802a0cd 	.word	0x0802a0cd
 8024c60:	0802a69a 	.word	0x0802a69a
 8024c64:	0802a151 	.word	0x0802a151
 8024c68:	2400aef4 	.word	0x2400aef4
 8024c6c:	00fff800 	.word	0x00fff800

08024c70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c74:	ed2d 8b08 	vpush	{d8-d11}
 8024c78:	b097      	sub	sp, #92	; 0x5c
 8024c7a:	eeb0 aa40 	vmov.f32	s20, s0
 8024c7e:	eef0 9a60 	vmov.f32	s19, s1
 8024c82:	9214      	str	r2, [sp, #80]	; 0x50
 8024c84:	eeb0 9a41 	vmov.f32	s18, s2
 8024c88:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024c8a:	eeb0 8a62 	vmov.f32	s16, s5
 8024c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8024c90:	eef0 8a43 	vmov.f32	s17, s6
 8024c94:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024c98:	eef0 ba44 	vmov.f32	s23, s8
 8024c9c:	9015      	str	r0, [sp, #84]	; 0x54
 8024c9e:	eeb0 ba64 	vmov.f32	s22, s9
 8024ca2:	6850      	ldr	r0, [r2, #4]
 8024ca4:	eef0 aa45 	vmov.f32	s21, s10
 8024ca8:	910d      	str	r1, [sp, #52]	; 0x34
 8024caa:	930f      	str	r3, [sp, #60]	; 0x3c
 8024cac:	6812      	ldr	r2, [r2, #0]
 8024cae:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024cb2:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8024cb6:	fb00 1303 	mla	r3, r0, r3, r1
 8024cba:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024cbe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024cc0:	689b      	ldr	r3, [r3, #8]
 8024cc2:	3301      	adds	r3, #1
 8024cc4:	f023 0301 	bic.w	r3, r3, #1
 8024cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8024cca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024ccc:	681f      	ldr	r7, [r3, #0]
 8024cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024cd0:	2b00      	cmp	r3, #0
 8024cd2:	dc03      	bgt.n	8024cdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024cd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024cd6:	2b00      	cmp	r3, #0
 8024cd8:	f340 8289 	ble.w	80251ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8024cdc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024cde:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024ce2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024ce6:	1e48      	subs	r0, r1, #1
 8024ce8:	f102 3cff 	add.w	ip, r2, #4294967295
 8024cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024cee:	2b00      	cmp	r3, #0
 8024cf0:	f340 80c5 	ble.w	8024e7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024cf4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024cf8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024cfc:	d406      	bmi.n	8024d0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024cfe:	4586      	cmp	lr, r0
 8024d00:	da04      	bge.n	8024d0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024d02:	2b00      	cmp	r3, #0
 8024d04:	db02      	blt.n	8024d0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024d06:	4563      	cmp	r3, ip
 8024d08:	f2c0 80ba 	blt.w	8024e80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8024d0c:	f11e 0e01 	adds.w	lr, lr, #1
 8024d10:	f100 80ab 	bmi.w	8024e6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024d14:	4571      	cmp	r1, lr
 8024d16:	f2c0 80a8 	blt.w	8024e6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024d1a:	3301      	adds	r3, #1
 8024d1c:	f100 80a5 	bmi.w	8024e6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024d20:	429a      	cmp	r2, r3
 8024d22:	f2c0 80a2 	blt.w	8024e6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d28:	46c8      	mov	r8, r9
 8024d2a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8024d2e:	930e      	str	r3, [sp, #56]	; 0x38
 8024d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024d32:	2b00      	cmp	r3, #0
 8024d34:	f340 80c4 	ble.w	8024ec0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8024d38:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024d3a:	1430      	asrs	r0, r6, #16
 8024d3c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024d40:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024d44:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024d48:	1423      	asrs	r3, r4, #16
 8024d4a:	f100 814f 	bmi.w	8024fec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024d4e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024d52:	455b      	cmp	r3, fp
 8024d54:	f280 814a 	bge.w	8024fec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024d58:	2800      	cmp	r0, #0
 8024d5a:	f2c0 8147 	blt.w	8024fec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024d5e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024d62:	4558      	cmp	r0, fp
 8024d64:	f280 8142 	bge.w	8024fec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024d68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024d6a:	fb00 3305 	mla	r3, r0, r5, r3
 8024d6e:	0858      	lsrs	r0, r3, #1
 8024d70:	07dd      	lsls	r5, r3, #31
 8024d72:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024d76:	bf54      	ite	pl
 8024d78:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024d7c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024d80:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024d84:	fa5f fc8c 	uxtb.w	ip, ip
 8024d88:	2a00      	cmp	r2, #0
 8024d8a:	f000 80dd 	beq.w	8024f48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024d8e:	1c58      	adds	r0, r3, #1
 8024d90:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024d94:	07c0      	lsls	r0, r0, #31
 8024d96:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024d9a:	bf54      	ite	pl
 8024d9c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024da0:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024da4:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024da8:	fa5f f08e 	uxtb.w	r0, lr
 8024dac:	9010      	str	r0, [sp, #64]	; 0x40
 8024dae:	b1d9      	cbz	r1, 8024de8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8024db0:	4453      	add	r3, sl
 8024db2:	0858      	lsrs	r0, r3, #1
 8024db4:	07dd      	lsls	r5, r3, #31
 8024db6:	f103 0301 	add.w	r3, r3, #1
 8024dba:	5c38      	ldrb	r0, [r7, r0]
 8024dbc:	bf54      	ite	pl
 8024dbe:	f000 000f 	andpl.w	r0, r0, #15
 8024dc2:	1100      	asrmi	r0, r0, #4
 8024dc4:	07dd      	lsls	r5, r3, #31
 8024dc6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024dca:	b2c0      	uxtb	r0, r0
 8024dcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8024dce:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8024dd2:	f817 e000 	ldrb.w	lr, [r7, r0]
 8024dd6:	bf54      	ite	pl
 8024dd8:	f00e 030f 	andpl.w	r3, lr, #15
 8024ddc:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8024de0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024de4:	b2db      	uxtb	r3, r3
 8024de6:	9311      	str	r3, [sp, #68]	; 0x44
 8024de8:	b292      	uxth	r2, r2
 8024dea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024dec:	b289      	uxth	r1, r1
 8024dee:	fb02 f301 	mul.w	r3, r2, r1
 8024df2:	0112      	lsls	r2, r2, #4
 8024df4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024df8:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024dfc:	1ad2      	subs	r2, r2, r3
 8024dfe:	b289      	uxth	r1, r1
 8024e00:	b292      	uxth	r2, r2
 8024e02:	1a40      	subs	r0, r0, r1
 8024e04:	436a      	muls	r2, r5
 8024e06:	b280      	uxth	r0, r0
 8024e08:	fb0c 2c00 	mla	ip, ip, r0, r2
 8024e0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024e0e:	fb01 c102 	mla	r1, r1, r2, ip
 8024e12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024e14:	fb03 1302 	mla	r3, r3, r2, r1
 8024e18:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024e1c:	b1db      	cbz	r3, 8024e56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024e1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024e20:	4353      	muls	r3, r2
 8024e22:	1c5a      	adds	r2, r3, #1
 8024e24:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024e28:	4ac6      	ldr	r2, [pc, #792]	; (8025144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8024e2a:	121b      	asrs	r3, r3, #8
 8024e2c:	6812      	ldr	r2, [r2, #0]
 8024e2e:	2bff      	cmp	r3, #255	; 0xff
 8024e30:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024e34:	f040 8099 	bne.w	8024f6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8024e38:	0953      	lsrs	r3, r2, #5
 8024e3a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8024e3e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024e42:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e46:	f02c 0c07 	bic.w	ip, ip, #7
 8024e4a:	ea43 0c0c 	orr.w	ip, r3, ip
 8024e4e:	ea4c 0202 	orr.w	r2, ip, r2
 8024e52:	f8a8 2000 	strh.w	r2, [r8]
 8024e56:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024e58:	f108 0802 	add.w	r8, r8, #2
 8024e5c:	441c      	add	r4, r3
 8024e5e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024e60:	441e      	add	r6, r3
 8024e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024e64:	3b01      	subs	r3, #1
 8024e66:	930e      	str	r3, [sp, #56]	; 0x38
 8024e68:	e762      	b.n	8024d30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8024e6a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024e6c:	f109 0902 	add.w	r9, r9, #2
 8024e70:	441c      	add	r4, r3
 8024e72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024e74:	441e      	add	r6, r3
 8024e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e78:	3b01      	subs	r3, #1
 8024e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8024e7c:	e736      	b.n	8024cec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024e7e:	d024      	beq.n	8024eca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8024e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e82:	982b      	ldr	r0, [sp, #172]	; 0xac
 8024e84:	3b01      	subs	r3, #1
 8024e86:	fb00 4003 	mla	r0, r0, r3, r4
 8024e8a:	1400      	asrs	r0, r0, #16
 8024e8c:	f53f af4b 	bmi.w	8024d26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024e90:	3901      	subs	r1, #1
 8024e92:	4288      	cmp	r0, r1
 8024e94:	f6bf af47 	bge.w	8024d26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024e98:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8024e9a:	fb01 6303 	mla	r3, r1, r3, r6
 8024e9e:	141b      	asrs	r3, r3, #16
 8024ea0:	f53f af41 	bmi.w	8024d26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024ea4:	3a01      	subs	r2, #1
 8024ea6:	4293      	cmp	r3, r2
 8024ea8:	f6bf af3d 	bge.w	8024d26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024eac:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8024eb0:	46c8      	mov	r8, r9
 8024eb2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024eb6:	930e      	str	r3, [sp, #56]	; 0x38
 8024eb8:	f1bb 0f00 	cmp.w	fp, #0
 8024ebc:	f300 80b7 	bgt.w	802502e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8024ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ec2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024ec6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024ecc:	2b00      	cmp	r3, #0
 8024ece:	f340 818e 	ble.w	80251ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8024ed2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024ed6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024ed8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024edc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024ee0:	eef0 6a48 	vmov.f32	s13, s16
 8024ee4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024ee8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024eec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ef0:	ee16 4a90 	vmov	r4, s13
 8024ef4:	eef0 6a68 	vmov.f32	s13, s17
 8024ef8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024efc:	ee16 6a90 	vmov	r6, s13
 8024f00:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024f04:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024f08:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024f0c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024f10:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024f14:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024f18:	ee18 2a10 	vmov	r2, s16
 8024f1c:	eeb0 8a47 	vmov.f32	s16, s14
 8024f20:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f24:	ee18 2a90 	vmov	r2, s17
 8024f28:	932b      	str	r3, [sp, #172]	; 0xac
 8024f2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024f2c:	eef0 8a67 	vmov.f32	s17, s15
 8024f30:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f34:	932c      	str	r3, [sp, #176]	; 0xb0
 8024f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024f38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024f3a:	3b01      	subs	r3, #1
 8024f3c:	930d      	str	r3, [sp, #52]	; 0x34
 8024f3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024f40:	bf08      	it	eq
 8024f42:	4613      	moveq	r3, r2
 8024f44:	9309      	str	r3, [sp, #36]	; 0x24
 8024f46:	e6c2      	b.n	8024cce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8024f48:	2900      	cmp	r1, #0
 8024f4a:	f43f af4d 	beq.w	8024de8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8024f4e:	eb0a 0003 	add.w	r0, sl, r3
 8024f52:	0843      	lsrs	r3, r0, #1
 8024f54:	07c0      	lsls	r0, r0, #31
 8024f56:	5cfb      	ldrb	r3, [r7, r3]
 8024f58:	bf54      	ite	pl
 8024f5a:	f003 030f 	andpl.w	r3, r3, #15
 8024f5e:	111b      	asrmi	r3, r3, #4
 8024f60:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024f64:	b2db      	uxtb	r3, r3
 8024f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8024f68:	e73e      	b.n	8024de8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8024f6a:	f8b8 e000 	ldrh.w	lr, [r8]
 8024f6e:	fa1f fb83 	uxth.w	fp, r3
 8024f72:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8024f76:	43db      	mvns	r3, r3
 8024f78:	ea4f 202e 	mov.w	r0, lr, asr #8
 8024f7c:	fb11 f10b 	smulbb	r1, r1, fp
 8024f80:	b2db      	uxtb	r3, r3
 8024f82:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024f86:	fa5f fc8c 	uxtb.w	ip, ip
 8024f8a:	b2d2      	uxtb	r2, r2
 8024f8c:	fb00 1003 	mla	r0, r0, r3, r1
 8024f90:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8024f94:	fb1c fc0b 	smulbb	ip, ip, fp
 8024f98:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024f9c:	b280      	uxth	r0, r0
 8024f9e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024fa2:	fb12 fb0b 	smulbb	fp, r2, fp
 8024fa6:	fa5f fe8e 	uxtb.w	lr, lr
 8024faa:	fb01 cc03 	mla	ip, r1, r3, ip
 8024fae:	fb0e bb03 	mla	fp, lr, r3, fp
 8024fb2:	1c43      	adds	r3, r0, #1
 8024fb4:	fa1f fc8c 	uxth.w	ip, ip
 8024fb8:	fa1f fb8b 	uxth.w	fp, fp
 8024fbc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024fc0:	f10c 0101 	add.w	r1, ip, #1
 8024fc4:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8024fc8:	f10b 0001 	add.w	r0, fp, #1
 8024fcc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024fd0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024fd4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024fd8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024fdc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024fe0:	4318      	orrs	r0, r3
 8024fe2:	ea40 000c 	orr.w	r0, r0, ip
 8024fe6:	f8a8 0000 	strh.w	r0, [r8]
 8024fea:	e734      	b.n	8024e56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024fec:	f113 0b01 	adds.w	fp, r3, #1
 8024ff0:	f53f af31 	bmi.w	8024e56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024ff4:	45dc      	cmp	ip, fp
 8024ff6:	f6ff af2e 	blt.w	8024e56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024ffa:	f110 0b01 	adds.w	fp, r0, #1
 8024ffe:	f53f af2a 	bmi.w	8024e56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025002:	45de      	cmp	lr, fp
 8025004:	f6ff af27 	blt.w	8024e56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025008:	9302      	str	r3, [sp, #8]
 802500a:	fa0f f38e 	sxth.w	r3, lr
 802500e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025010:	9301      	str	r3, [sp, #4]
 8025012:	fa0f f38c 	sxth.w	r3, ip
 8025016:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802501a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802501e:	9300      	str	r3, [sp, #0]
 8025020:	463a      	mov	r2, r7
 8025022:	4653      	mov	r3, sl
 8025024:	4641      	mov	r1, r8
 8025026:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025028:	f7ff fd2a 	bl	8024a80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802502c:	e713      	b.n	8024e56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802502e:	1422      	asrs	r2, r4, #16
 8025030:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025032:	1433      	asrs	r3, r6, #16
 8025034:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8025038:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802503c:	fb05 2303 	mla	r3, r5, r3, r2
 8025040:	085a      	lsrs	r2, r3, #1
 8025042:	07dd      	lsls	r5, r3, #31
 8025044:	5cba      	ldrb	r2, [r7, r2]
 8025046:	bf54      	ite	pl
 8025048:	f002 020f 	andpl.w	r2, r2, #15
 802504c:	1112      	asrmi	r2, r2, #4
 802504e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025052:	b2d2      	uxtb	r2, r2
 8025054:	2900      	cmp	r1, #0
 8025056:	d077      	beq.n	8025148 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025058:	f103 0e01 	add.w	lr, r3, #1
 802505c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8025060:	f01e 0f01 	tst.w	lr, #1
 8025064:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025068:	bf0c      	ite	eq
 802506a:	f00c 0c0f 	andeq.w	ip, ip, #15
 802506e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8025072:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025076:	fa5f f58c 	uxtb.w	r5, ip
 802507a:	9512      	str	r5, [sp, #72]	; 0x48
 802507c:	b308      	cbz	r0, 80250c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802507e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025080:	442b      	add	r3, r5
 8025082:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025086:	07dd      	lsls	r5, r3, #31
 8025088:	f103 0301 	add.w	r3, r3, #1
 802508c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025090:	bf54      	ite	pl
 8025092:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025096:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802509a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802509e:	fa5f f58c 	uxtb.w	r5, ip
 80250a2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80250a6:	950c      	str	r5, [sp, #48]	; 0x30
 80250a8:	07dd      	lsls	r5, r3, #31
 80250aa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80250ae:	bf54      	ite	pl
 80250b0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80250b4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80250b8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80250bc:	fa5f f38c 	uxtb.w	r3, ip
 80250c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80250c2:	b289      	uxth	r1, r1
 80250c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80250c6:	b280      	uxth	r0, r0
 80250c8:	fb01 f300 	mul.w	r3, r1, r0
 80250cc:	0109      	lsls	r1, r1, #4
 80250ce:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80250d2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80250d6:	1ac9      	subs	r1, r1, r3
 80250d8:	b280      	uxth	r0, r0
 80250da:	b289      	uxth	r1, r1
 80250dc:	ebac 0c00 	sub.w	ip, ip, r0
 80250e0:	4369      	muls	r1, r5
 80250e2:	fa1f fc8c 	uxth.w	ip, ip
 80250e6:	fb02 120c 	mla	r2, r2, ip, r1
 80250ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80250ec:	fb00 2001 	mla	r0, r0, r1, r2
 80250f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80250f2:	fb03 0302 	mla	r3, r3, r2, r0
 80250f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80250fa:	b1d3      	cbz	r3, 8025132 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80250fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80250fe:	4353      	muls	r3, r2
 8025100:	1c5a      	adds	r2, r3, #1
 8025102:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025106:	4a0f      	ldr	r2, [pc, #60]	; (8025144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8025108:	121b      	asrs	r3, r3, #8
 802510a:	6812      	ldr	r2, [r2, #0]
 802510c:	2bff      	cmp	r3, #255	; 0xff
 802510e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8025112:	d12d      	bne.n	8025170 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8025114:	0953      	lsrs	r3, r2, #5
 8025116:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802511a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802511e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025122:	f02c 0c07 	bic.w	ip, ip, #7
 8025126:	ea43 0c0c 	orr.w	ip, r3, ip
 802512a:	ea4c 0202 	orr.w	r2, ip, r2
 802512e:	f8a8 2000 	strh.w	r2, [r8]
 8025132:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025134:	f108 0802 	add.w	r8, r8, #2
 8025138:	f10b 3bff 	add.w	fp, fp, #4294967295
 802513c:	441c      	add	r4, r3
 802513e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025140:	441e      	add	r6, r3
 8025142:	e6b9      	b.n	8024eb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8025144:	2400aef4 	.word	0x2400aef4
 8025148:	2800      	cmp	r0, #0
 802514a:	d0ba      	beq.n	80250c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802514c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802514e:	442b      	add	r3, r5
 8025150:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025154:	07db      	lsls	r3, r3, #31
 8025156:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802515a:	bf54      	ite	pl
 802515c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025160:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025164:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025168:	fa5f f38c 	uxtb.w	r3, ip
 802516c:	930c      	str	r3, [sp, #48]	; 0x30
 802516e:	e7a8      	b.n	80250c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025170:	f8b8 e000 	ldrh.w	lr, [r8]
 8025174:	fa1f fa83 	uxth.w	sl, r3
 8025178:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802517c:	43db      	mvns	r3, r3
 802517e:	ea4f 202e 	mov.w	r0, lr, asr #8
 8025182:	fb11 f10a 	smulbb	r1, r1, sl
 8025186:	b2db      	uxtb	r3, r3
 8025188:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802518c:	b2d2      	uxtb	r2, r2
 802518e:	fa5f fc8c 	uxtb.w	ip, ip
 8025192:	fb00 1003 	mla	r0, r0, r3, r1
 8025196:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802519a:	fb12 f20a 	smulbb	r2, r2, sl
 802519e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80251a2:	b280      	uxth	r0, r0
 80251a4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80251a8:	fb1c fc0a 	smulbb	ip, ip, sl
 80251ac:	fa5f fe8e 	uxtb.w	lr, lr
 80251b0:	fb0e 2203 	mla	r2, lr, r3, r2
 80251b4:	fb01 cc03 	mla	ip, r1, r3, ip
 80251b8:	1c43      	adds	r3, r0, #1
 80251ba:	b292      	uxth	r2, r2
 80251bc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80251c0:	1c51      	adds	r1, r2, #1
 80251c2:	fa1f fc8c 	uxth.w	ip, ip
 80251c6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80251ca:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80251ce:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80251d2:	4308      	orrs	r0, r1
 80251d4:	f10c 0101 	add.w	r1, ip, #1
 80251d8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80251dc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80251e0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80251e4:	ea40 000c 	orr.w	r0, r0, ip
 80251e8:	f8a8 0000 	strh.w	r0, [r8]
 80251ec:	e7a1      	b.n	8025132 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80251ee:	b017      	add	sp, #92	; 0x5c
 80251f0:	ecbd 8b08 	vpop	{d8-d11}
 80251f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080251f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80251f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80251fc:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8025200:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8025204:	2c00      	cmp	r4, #0
 8025206:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802520a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802520e:	fb04 ce03 	mla	lr, r4, r3, ip
 8025212:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8025216:	db60      	blt.n	80252da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8025218:	45a1      	cmp	r9, r4
 802521a:	dd5e      	ble.n	80252da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802521c:	f1bc 0f00 	cmp.w	ip, #0
 8025220:	db59      	blt.n	80252d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8025222:	45e0      	cmp	r8, ip
 8025224:	dd57      	ble.n	80252d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8025226:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802522a:	f01e 0f01 	tst.w	lr, #1
 802522e:	5c16      	ldrb	r6, [r2, r0]
 8025230:	bf0c      	ite	eq
 8025232:	f006 060f 	andeq.w	r6, r6, #15
 8025236:	1136      	asrne	r6, r6, #4
 8025238:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802523c:	b2f6      	uxtb	r6, r6
 802523e:	f11c 0001 	adds.w	r0, ip, #1
 8025242:	d44d      	bmi.n	80252e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8025244:	4580      	cmp	r8, r0
 8025246:	dd4b      	ble.n	80252e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8025248:	2d00      	cmp	r5, #0
 802524a:	d04b      	beq.n	80252e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 802524c:	f10e 0a01 	add.w	sl, lr, #1
 8025250:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8025254:	f01a 0f01 	tst.w	sl, #1
 8025258:	5c10      	ldrb	r0, [r2, r0]
 802525a:	bf0c      	ite	eq
 802525c:	f000 000f 	andeq.w	r0, r0, #15
 8025260:	1100      	asrne	r0, r0, #4
 8025262:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025266:	b2c0      	uxtb	r0, r0
 8025268:	3401      	adds	r4, #1
 802526a:	d43f      	bmi.n	80252ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802526c:	45a1      	cmp	r9, r4
 802526e:	dd3d      	ble.n	80252ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8025270:	2f00      	cmp	r7, #0
 8025272:	f000 8093 	beq.w	802539c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8025276:	f1bc 0f00 	cmp.w	ip, #0
 802527a:	db35      	blt.n	80252e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802527c:	45e0      	cmp	r8, ip
 802527e:	dd33      	ble.n	80252e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8025280:	eb03 090e 	add.w	r9, r3, lr
 8025284:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8025288:	f019 0f01 	tst.w	r9, #1
 802528c:	5d14      	ldrb	r4, [r2, r4]
 802528e:	bf0c      	ite	eq
 8025290:	f004 040f 	andeq.w	r4, r4, #15
 8025294:	1124      	asrne	r4, r4, #4
 8025296:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802529a:	b2e4      	uxtb	r4, r4
 802529c:	f11c 0c01 	adds.w	ip, ip, #1
 80252a0:	d427      	bmi.n	80252f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 80252a2:	45e0      	cmp	r8, ip
 80252a4:	dd25      	ble.n	80252f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 80252a6:	b335      	cbz	r5, 80252f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 80252a8:	3301      	adds	r3, #1
 80252aa:	449e      	add	lr, r3
 80252ac:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80252b0:	f01e 0f01 	tst.w	lr, #1
 80252b4:	5cd2      	ldrb	r2, [r2, r3]
 80252b6:	bf0c      	ite	eq
 80252b8:	f002 020f 	andeq.w	r2, r2, #15
 80252bc:	1112      	asrne	r2, r2, #4
 80252be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80252c2:	b2d3      	uxtb	r3, r2
 80252c4:	2d0f      	cmp	r5, #15
 80252c6:	d917      	bls.n	80252f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 80252c8:	4b37      	ldr	r3, [pc, #220]	; (80253a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 80252ca:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80252ce:	4a37      	ldr	r2, [pc, #220]	; (80253ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 80252d0:	4837      	ldr	r0, [pc, #220]	; (80253b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 80252d2:	f000 fc4f 	bl	8025b74 <__assert_func>
 80252d6:	2600      	movs	r6, #0
 80252d8:	e7b1      	b.n	802523e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 80252da:	2000      	movs	r0, #0
 80252dc:	4606      	mov	r6, r0
 80252de:	e7c3      	b.n	8025268 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80252e0:	2000      	movs	r0, #0
 80252e2:	e7c1      	b.n	8025268 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80252e4:	4628      	mov	r0, r5
 80252e6:	e7bf      	b.n	8025268 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80252e8:	2400      	movs	r4, #0
 80252ea:	e7d7      	b.n	802529c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 80252ec:	2300      	movs	r3, #0
 80252ee:	461c      	mov	r4, r3
 80252f0:	e7e8      	b.n	80252c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 80252f2:	2300      	movs	r3, #0
 80252f4:	e7e6      	b.n	80252c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 80252f6:	462b      	mov	r3, r5
 80252f8:	2f0f      	cmp	r7, #15
 80252fa:	d8e5      	bhi.n	80252c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 80252fc:	b2ad      	uxth	r5, r5
 80252fe:	b2bf      	uxth	r7, r7
 8025300:	fb05 fc07 	mul.w	ip, r5, r7
 8025304:	012d      	lsls	r5, r5, #4
 8025306:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802530a:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802530e:	eba5 050c 	sub.w	r5, r5, ip
 8025312:	b2bf      	uxth	r7, r7
 8025314:	b2ad      	uxth	r5, r5
 8025316:	1bd2      	subs	r2, r2, r7
 8025318:	4368      	muls	r0, r5
 802531a:	b292      	uxth	r2, r2
 802531c:	fb06 0002 	mla	r0, r6, r2, r0
 8025320:	fb07 0404 	mla	r4, r7, r4, r0
 8025324:	fb0c 4303 	mla	r3, ip, r3, r4
 8025328:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802532c:	b3a3      	cbz	r3, 8025398 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802532e:	4a21      	ldr	r2, [pc, #132]	; (80253b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8025330:	880e      	ldrh	r6, [r1, #0]
 8025332:	6815      	ldr	r5, [r2, #0]
 8025334:	b29a      	uxth	r2, r3
 8025336:	1234      	asrs	r4, r6, #8
 8025338:	43db      	mvns	r3, r3
 802533a:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802533e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8025342:	b2db      	uxtb	r3, r3
 8025344:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025348:	fb10 f002 	smulbb	r0, r0, r2
 802534c:	b2ed      	uxtb	r5, r5
 802534e:	fb17 f702 	smulbb	r7, r7, r2
 8025352:	fb04 0403 	mla	r4, r4, r3, r0
 8025356:	10f0      	asrs	r0, r6, #3
 8025358:	fb15 f202 	smulbb	r2, r5, r2
 802535c:	00f6      	lsls	r6, r6, #3
 802535e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025362:	b2a4      	uxth	r4, r4
 8025364:	b2f6      	uxtb	r6, r6
 8025366:	fb00 7003 	mla	r0, r0, r3, r7
 802536a:	fb06 2303 	mla	r3, r6, r3, r2
 802536e:	b280      	uxth	r0, r0
 8025370:	b29a      	uxth	r2, r3
 8025372:	1c63      	adds	r3, r4, #1
 8025374:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8025378:	1c53      	adds	r3, r2, #1
 802537a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802537e:	1c42      	adds	r2, r0, #1
 8025380:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8025384:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025388:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802538c:	0940      	lsrs	r0, r0, #5
 802538e:	4323      	orrs	r3, r4
 8025390:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025394:	4303      	orrs	r3, r0
 8025396:	800b      	strh	r3, [r1, #0]
 8025398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802539c:	2d0f      	cmp	r5, #15
 802539e:	d893      	bhi.n	80252c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 80253a0:	463b      	mov	r3, r7
 80253a2:	463c      	mov	r4, r7
 80253a4:	e7aa      	b.n	80252fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 80253a6:	bf00      	nop
 80253a8:	0802a0cd 	.word	0x0802a0cd
 80253ac:	0802a69a 	.word	0x0802a69a
 80253b0:	0802a151 	.word	0x0802a151
 80253b4:	2400aef4 	.word	0x2400aef4

080253b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80253b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253bc:	ed2d 8b08 	vpush	{d8-d11}
 80253c0:	b093      	sub	sp, #76	; 0x4c
 80253c2:	461d      	mov	r5, r3
 80253c4:	eeb0 aa40 	vmov.f32	s20, s0
 80253c8:	920c      	str	r2, [sp, #48]	; 0x30
 80253ca:	eef0 9a60 	vmov.f32	s19, s1
 80253ce:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80253d0:	eeb0 9a41 	vmov.f32	s18, s2
 80253d4:	9011      	str	r0, [sp, #68]	; 0x44
 80253d6:	eeb0 8a62 	vmov.f32	s16, s5
 80253da:	6850      	ldr	r0, [r2, #4]
 80253dc:	eef0 8a43 	vmov.f32	s17, s6
 80253e0:	9107      	str	r1, [sp, #28]
 80253e2:	eef0 ba44 	vmov.f32	s23, s8
 80253e6:	6812      	ldr	r2, [r2, #0]
 80253e8:	eeb0 ba64 	vmov.f32	s22, s9
 80253ec:	eef0 aa45 	vmov.f32	s21, s10
 80253f0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80253f4:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80253f8:	fb00 1303 	mla	r3, r0, r3, r1
 80253fc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025400:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025402:	689b      	ldr	r3, [r3, #8]
 8025404:	3301      	adds	r3, #1
 8025406:	f023 0301 	bic.w	r3, r3, #1
 802540a:	9306      	str	r3, [sp, #24]
 802540c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802540e:	681f      	ldr	r7, [r3, #0]
 8025410:	9b07      	ldr	r3, [sp, #28]
 8025412:	2b00      	cmp	r3, #0
 8025414:	dc03      	bgt.n	802541e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025418:	2b00      	cmp	r3, #0
 802541a:	f340 8267 	ble.w	80258ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802541e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025420:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025424:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025428:	1e48      	subs	r0, r1, #1
 802542a:	f102 3cff 	add.w	ip, r2, #4294967295
 802542e:	2d00      	cmp	r5, #0
 8025430:	f340 80b7 	ble.w	80255a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025434:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025438:	ea4f 4326 	mov.w	r3, r6, asr #16
 802543c:	d406      	bmi.n	802544c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802543e:	4586      	cmp	lr, r0
 8025440:	da04      	bge.n	802544c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025442:	2b00      	cmp	r3, #0
 8025444:	db02      	blt.n	802544c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025446:	4563      	cmp	r3, ip
 8025448:	f2c0 80ac 	blt.w	80255a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802544c:	f11e 0e01 	adds.w	lr, lr, #1
 8025450:	f100 809f 	bmi.w	8025592 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8025454:	4571      	cmp	r1, lr
 8025456:	f2c0 809c 	blt.w	8025592 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802545a:	3301      	adds	r3, #1
 802545c:	f100 8099 	bmi.w	8025592 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8025460:	429a      	cmp	r2, r3
 8025462:	f2c0 8096 	blt.w	8025592 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8025466:	46c8      	mov	r8, r9
 8025468:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802546c:	9509      	str	r5, [sp, #36]	; 0x24
 802546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025470:	2b00      	cmp	r3, #0
 8025472:	f340 80b5 	ble.w	80255e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8025476:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802547a:	1430      	asrs	r0, r6, #16
 802547c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025480:	9308      	str	r3, [sp, #32]
 8025482:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025484:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025488:	1423      	asrs	r3, r4, #16
 802548a:	f100 813f 	bmi.w	802570c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802548e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8025492:	455b      	cmp	r3, fp
 8025494:	f280 813a 	bge.w	802570c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8025498:	2800      	cmp	r0, #0
 802549a:	f2c0 8137 	blt.w	802570c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802549e:	f10e 3bff 	add.w	fp, lr, #4294967295
 80254a2:	4558      	cmp	r0, fp
 80254a4:	f280 8132 	bge.w	802570c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80254a8:	9a06      	ldr	r2, [sp, #24]
 80254aa:	fb00 3302 	mla	r3, r0, r2, r3
 80254ae:	0858      	lsrs	r0, r3, #1
 80254b0:	07da      	lsls	r2, r3, #31
 80254b2:	9a08      	ldr	r2, [sp, #32]
 80254b4:	f817 c000 	ldrb.w	ip, [r7, r0]
 80254b8:	bf54      	ite	pl
 80254ba:	f00c 0c0f 	andpl.w	ip, ip, #15
 80254be:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80254c2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80254c6:	fa5f fc8c 	uxtb.w	ip, ip
 80254ca:	2a00      	cmp	r2, #0
 80254cc:	f000 80cc 	beq.w	8025668 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80254d0:	1c58      	adds	r0, r3, #1
 80254d2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80254d6:	07c0      	lsls	r0, r0, #31
 80254d8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80254dc:	bf54      	ite	pl
 80254de:	f00e 0e0f 	andpl.w	lr, lr, #15
 80254e2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80254e6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80254ea:	fa5f fe8e 	uxtb.w	lr, lr
 80254ee:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80254f2:	b1b9      	cbz	r1, 8025524 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80254f4:	4453      	add	r3, sl
 80254f6:	0858      	lsrs	r0, r3, #1
 80254f8:	07da      	lsls	r2, r3, #31
 80254fa:	5c38      	ldrb	r0, [r7, r0]
 80254fc:	bf54      	ite	pl
 80254fe:	f000 000f 	andpl.w	r0, r0, #15
 8025502:	1100      	asrmi	r0, r0, #4
 8025504:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025508:	b2c0      	uxtb	r0, r0
 802550a:	900a      	str	r0, [sp, #40]	; 0x28
 802550c:	1c58      	adds	r0, r3, #1
 802550e:	0843      	lsrs	r3, r0, #1
 8025510:	07c2      	lsls	r2, r0, #31
 8025512:	5cfb      	ldrb	r3, [r7, r3]
 8025514:	bf54      	ite	pl
 8025516:	f003 030f 	andpl.w	r3, r3, #15
 802551a:	111b      	asrmi	r3, r3, #4
 802551c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025520:	b2db      	uxtb	r3, r3
 8025522:	930e      	str	r3, [sp, #56]	; 0x38
 8025524:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8025528:	b289      	uxth	r1, r1
 802552a:	fb02 f301 	mul.w	r3, r2, r1
 802552e:	0112      	lsls	r2, r2, #4
 8025530:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025534:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8025538:	1ad2      	subs	r2, r2, r3
 802553a:	b289      	uxth	r1, r1
 802553c:	b292      	uxth	r2, r2
 802553e:	1a40      	subs	r0, r0, r1
 8025540:	fa1f fe80 	uxth.w	lr, r0
 8025544:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025546:	4342      	muls	r2, r0
 8025548:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802554c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802554e:	fb01 c102 	mla	r1, r1, r2, ip
 8025552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025554:	fb03 1302 	mla	r3, r3, r2, r1
 8025558:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802555c:	2bff      	cmp	r3, #255	; 0xff
 802555e:	f040 8094 	bne.w	802568a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8025562:	4bbf      	ldr	r3, [pc, #764]	; (8025860 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8025564:	681a      	ldr	r2, [r3, #0]
 8025566:	4bbf      	ldr	r3, [pc, #764]	; (8025864 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8025568:	0951      	lsrs	r1, r2, #5
 802556a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802556e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025572:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025576:	430b      	orrs	r3, r1
 8025578:	4313      	orrs	r3, r2
 802557a:	f8a8 3000 	strh.w	r3, [r8]
 802557e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025580:	f108 0802 	add.w	r8, r8, #2
 8025584:	441c      	add	r4, r3
 8025586:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025588:	441e      	add	r6, r3
 802558a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802558c:	3b01      	subs	r3, #1
 802558e:	9309      	str	r3, [sp, #36]	; 0x24
 8025590:	e76d      	b.n	802546e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025592:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025594:	3d01      	subs	r5, #1
 8025596:	f109 0902 	add.w	r9, r9, #2
 802559a:	441c      	add	r4, r3
 802559c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802559e:	441e      	add	r6, r3
 80255a0:	e745      	b.n	802542e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80255a2:	d021      	beq.n	80255e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80255a4:	1e6b      	subs	r3, r5, #1
 80255a6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80255a8:	fb00 4003 	mla	r0, r0, r3, r4
 80255ac:	1400      	asrs	r0, r0, #16
 80255ae:	f53f af5a 	bmi.w	8025466 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80255b2:	3901      	subs	r1, #1
 80255b4:	4288      	cmp	r0, r1
 80255b6:	f6bf af56 	bge.w	8025466 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80255ba:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80255bc:	fb01 6303 	mla	r3, r1, r3, r6
 80255c0:	141b      	asrs	r3, r3, #16
 80255c2:	f53f af50 	bmi.w	8025466 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80255c6:	3a01      	subs	r2, #1
 80255c8:	4293      	cmp	r3, r2
 80255ca:	f6bf af4c 	bge.w	8025466 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80255ce:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80255d2:	46a8      	mov	r8, r5
 80255d4:	46ce      	mov	lr, r9
 80255d6:	9308      	str	r3, [sp, #32]
 80255d8:	f1b8 0f00 	cmp.w	r8, #0
 80255dc:	f300 80b6 	bgt.w	802574c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80255e0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80255e4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80255e8:	9b07      	ldr	r3, [sp, #28]
 80255ea:	2b00      	cmp	r3, #0
 80255ec:	f340 817e 	ble.w	80258ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 80255f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80255f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80255f6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80255fa:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80255fe:	eef0 6a48 	vmov.f32	s13, s16
 8025602:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025606:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802560a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802560e:	ee16 4a90 	vmov	r4, s13
 8025612:	eef0 6a68 	vmov.f32	s13, s17
 8025616:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802561a:	ee16 6a90 	vmov	r6, s13
 802561e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025622:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025626:	ee37 8a48 	vsub.f32	s16, s14, s16
 802562a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802562e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025632:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025636:	ee18 2a10 	vmov	r2, s16
 802563a:	eeb0 8a47 	vmov.f32	s16, s14
 802563e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025642:	ee18 2a90 	vmov	r2, s17
 8025646:	9327      	str	r3, [sp, #156]	; 0x9c
 8025648:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802564a:	eef0 8a67 	vmov.f32	s17, s15
 802564e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025652:	9328      	str	r3, [sp, #160]	; 0xa0
 8025654:	9b07      	ldr	r3, [sp, #28]
 8025656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025658:	3b01      	subs	r3, #1
 802565a:	9307      	str	r3, [sp, #28]
 802565c:	bf08      	it	eq
 802565e:	4615      	moveq	r5, r2
 8025660:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025662:	bf18      	it	ne
 8025664:	461d      	movne	r5, r3
 8025666:	e6d3      	b.n	8025410 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025668:	2900      	cmp	r1, #0
 802566a:	f43f af5b 	beq.w	8025524 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802566e:	eb0a 0003 	add.w	r0, sl, r3
 8025672:	0843      	lsrs	r3, r0, #1
 8025674:	07c0      	lsls	r0, r0, #31
 8025676:	5cfb      	ldrb	r3, [r7, r3]
 8025678:	bf54      	ite	pl
 802567a:	f003 030f 	andpl.w	r3, r3, #15
 802567e:	111b      	asrmi	r3, r3, #4
 8025680:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025684:	b2db      	uxtb	r3, r3
 8025686:	930a      	str	r3, [sp, #40]	; 0x28
 8025688:	e74c      	b.n	8025524 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802568a:	2b00      	cmp	r3, #0
 802568c:	f43f af77 	beq.w	802557e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025690:	4a73      	ldr	r2, [pc, #460]	; (8025860 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8025692:	fa1f fe83 	uxth.w	lr, r3
 8025696:	f8b8 c000 	ldrh.w	ip, [r8]
 802569a:	43db      	mvns	r3, r3
 802569c:	6810      	ldr	r0, [r2, #0]
 802569e:	ea4f 212c 	mov.w	r1, ip, asr #8
 80256a2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80256a6:	b2db      	uxtb	r3, r3
 80256a8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80256ac:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80256b0:	fb12 f20e 	smulbb	r2, r2, lr
 80256b4:	b2c0      	uxtb	r0, r0
 80256b6:	fb1b fb0e 	smulbb	fp, fp, lr
 80256ba:	fb01 2103 	mla	r1, r1, r3, r2
 80256be:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80256c2:	fb10 fe0e 	smulbb	lr, r0, lr
 80256c6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80256ca:	b289      	uxth	r1, r1
 80256cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80256d0:	fa5f fc8c 	uxtb.w	ip, ip
 80256d4:	fb02 b203 	mla	r2, r2, r3, fp
 80256d8:	1c48      	adds	r0, r1, #1
 80256da:	fb0c e303 	mla	r3, ip, r3, lr
 80256de:	b292      	uxth	r2, r2
 80256e0:	b29b      	uxth	r3, r3
 80256e2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80256e6:	f102 0b01 	add.w	fp, r2, #1
 80256ea:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80256ee:	1c59      	adds	r1, r3, #1
 80256f0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80256f4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80256f8:	0952      	lsrs	r2, r2, #5
 80256fa:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80256fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025702:	4301      	orrs	r1, r0
 8025704:	4311      	orrs	r1, r2
 8025706:	f8a8 1000 	strh.w	r1, [r8]
 802570a:	e738      	b.n	802557e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802570c:	f113 0b01 	adds.w	fp, r3, #1
 8025710:	f53f af35 	bmi.w	802557e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025714:	45dc      	cmp	ip, fp
 8025716:	f6ff af32 	blt.w	802557e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802571a:	f110 0b01 	adds.w	fp, r0, #1
 802571e:	f53f af2e 	bmi.w	802557e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025722:	45de      	cmp	lr, fp
 8025724:	f6ff af2b 	blt.w	802557e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025728:	9302      	str	r3, [sp, #8]
 802572a:	fa0f f38e 	sxth.w	r3, lr
 802572e:	9a08      	ldr	r2, [sp, #32]
 8025730:	9301      	str	r3, [sp, #4]
 8025732:	fa0f f38c 	sxth.w	r3, ip
 8025736:	9105      	str	r1, [sp, #20]
 8025738:	4641      	mov	r1, r8
 802573a:	9300      	str	r3, [sp, #0]
 802573c:	4653      	mov	r3, sl
 802573e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025742:	463a      	mov	r2, r7
 8025744:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025746:	f7ff fd57 	bl	80251f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802574a:	e718      	b.n	802557e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802574c:	1422      	asrs	r2, r4, #16
 802574e:	9906      	ldr	r1, [sp, #24]
 8025750:	1433      	asrs	r3, r6, #16
 8025752:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025756:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802575a:	fb01 2303 	mla	r3, r1, r3, r2
 802575e:	085a      	lsrs	r2, r3, #1
 8025760:	07d9      	lsls	r1, r3, #31
 8025762:	5cba      	ldrb	r2, [r7, r2]
 8025764:	bf54      	ite	pl
 8025766:	f002 020f 	andpl.w	r2, r2, #15
 802576a:	1112      	asrmi	r2, r2, #4
 802576c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025770:	b2d2      	uxtb	r2, r2
 8025772:	2800      	cmp	r0, #0
 8025774:	d063      	beq.n	802583e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8025776:	f103 0a01 	add.w	sl, r3, #1
 802577a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802577e:	f01a 0f01 	tst.w	sl, #1
 8025782:	5c79      	ldrb	r1, [r7, r1]
 8025784:	bf0c      	ite	eq
 8025786:	f001 010f 	andeq.w	r1, r1, #15
 802578a:	1109      	asrne	r1, r1, #4
 802578c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025790:	b2c9      	uxtb	r1, r1
 8025792:	910f      	str	r1, [sp, #60]	; 0x3c
 8025794:	f1bc 0f00 	cmp.w	ip, #0
 8025798:	d01a      	beq.n	80257d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802579a:	9908      	ldr	r1, [sp, #32]
 802579c:	440b      	add	r3, r1
 802579e:	0859      	lsrs	r1, r3, #1
 80257a0:	f013 0f01 	tst.w	r3, #1
 80257a4:	f103 0301 	add.w	r3, r3, #1
 80257a8:	5c79      	ldrb	r1, [r7, r1]
 80257aa:	bf0c      	ite	eq
 80257ac:	f001 010f 	andeq.w	r1, r1, #15
 80257b0:	1109      	asrne	r1, r1, #4
 80257b2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80257b6:	b2c9      	uxtb	r1, r1
 80257b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80257ba:	0859      	lsrs	r1, r3, #1
 80257bc:	07db      	lsls	r3, r3, #31
 80257be:	5c79      	ldrb	r1, [r7, r1]
 80257c0:	bf54      	ite	pl
 80257c2:	f001 010f 	andpl.w	r1, r1, #15
 80257c6:	1109      	asrmi	r1, r1, #4
 80257c8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80257cc:	b2c9      	uxtb	r1, r1
 80257ce:	9110      	str	r1, [sp, #64]	; 0x40
 80257d0:	b280      	uxth	r0, r0
 80257d2:	fa1f fc8c 	uxth.w	ip, ip
 80257d6:	fb00 f30c 	mul.w	r3, r0, ip
 80257da:	0100      	lsls	r0, r0, #4
 80257dc:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80257e0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80257e4:	1ac0      	subs	r0, r0, r3
 80257e6:	fa1f fc8c 	uxth.w	ip, ip
 80257ea:	b280      	uxth	r0, r0
 80257ec:	eba1 010c 	sub.w	r1, r1, ip
 80257f0:	fa1f fa81 	uxth.w	sl, r1
 80257f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80257f6:	4348      	muls	r0, r1
 80257f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80257fa:	fb02 020a 	mla	r2, r2, sl, r0
 80257fe:	fb0c 2c01 	mla	ip, ip, r1, r2
 8025802:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025804:	fb03 c302 	mla	r3, r3, r2, ip
 8025808:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802580c:	2bff      	cmp	r3, #255	; 0xff
 802580e:	d12b      	bne.n	8025868 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025810:	4b13      	ldr	r3, [pc, #76]	; (8025860 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8025812:	681a      	ldr	r2, [r3, #0]
 8025814:	4b13      	ldr	r3, [pc, #76]	; (8025864 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8025816:	0951      	lsrs	r1, r2, #5
 8025818:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802581c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025820:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025824:	430b      	orrs	r3, r1
 8025826:	4313      	orrs	r3, r2
 8025828:	f8ae 3000 	strh.w	r3, [lr]
 802582c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802582e:	f10e 0e02 	add.w	lr, lr, #2
 8025832:	f108 38ff 	add.w	r8, r8, #4294967295
 8025836:	441c      	add	r4, r3
 8025838:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802583a:	441e      	add	r6, r3
 802583c:	e6cc      	b.n	80255d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802583e:	f1bc 0f00 	cmp.w	ip, #0
 8025842:	d0c5      	beq.n	80257d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8025844:	9908      	ldr	r1, [sp, #32]
 8025846:	440b      	add	r3, r1
 8025848:	0859      	lsrs	r1, r3, #1
 802584a:	07db      	lsls	r3, r3, #31
 802584c:	5c79      	ldrb	r1, [r7, r1]
 802584e:	bf54      	ite	pl
 8025850:	f001 010f 	andpl.w	r1, r1, #15
 8025854:	1109      	asrmi	r1, r1, #4
 8025856:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802585a:	b2c9      	uxtb	r1, r1
 802585c:	910b      	str	r1, [sp, #44]	; 0x2c
 802585e:	e7b7      	b.n	80257d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8025860:	2400aef4 	.word	0x2400aef4
 8025864:	fffff800 	.word	0xfffff800
 8025868:	2b00      	cmp	r3, #0
 802586a:	d0df      	beq.n	802582c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802586c:	4a22      	ldr	r2, [pc, #136]	; (80258f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802586e:	fa1f fa83 	uxth.w	sl, r3
 8025872:	f8be c000 	ldrh.w	ip, [lr]
 8025876:	43db      	mvns	r3, r3
 8025878:	6810      	ldr	r0, [r2, #0]
 802587a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802587e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025882:	b2db      	uxtb	r3, r3
 8025884:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025888:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802588c:	fb12 f20a 	smulbb	r2, r2, sl
 8025890:	b2c0      	uxtb	r0, r0
 8025892:	fb1b fb0a 	smulbb	fp, fp, sl
 8025896:	fb01 2103 	mla	r1, r1, r3, r2
 802589a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802589e:	fb10 f00a 	smulbb	r0, r0, sl
 80258a2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80258a6:	b289      	uxth	r1, r1
 80258a8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80258ac:	fa5f fc8c 	uxtb.w	ip, ip
 80258b0:	fb02 b203 	mla	r2, r2, r3, fp
 80258b4:	fb0c 0003 	mla	r0, ip, r3, r0
 80258b8:	1c4b      	adds	r3, r1, #1
 80258ba:	b292      	uxth	r2, r2
 80258bc:	b280      	uxth	r0, r0
 80258be:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80258c2:	f100 0b01 	add.w	fp, r0, #1
 80258c6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80258ca:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80258ce:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80258d2:	ea4b 0101 	orr.w	r1, fp, r1
 80258d6:	f102 0b01 	add.w	fp, r2, #1
 80258da:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80258de:	0952      	lsrs	r2, r2, #5
 80258e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80258e4:	4311      	orrs	r1, r2
 80258e6:	f8ae 1000 	strh.w	r1, [lr]
 80258ea:	e79f      	b.n	802582c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 80258ec:	b013      	add	sp, #76	; 0x4c
 80258ee:	ecbd 8b08 	vpop	{d8-d11}
 80258f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80258f6:	bf00      	nop
 80258f8:	2400aef4 	.word	0x2400aef4

080258fc <CRC_Lock>:
 80258fc:	4a20      	ldr	r2, [pc, #128]	; (8025980 <CRC_Lock+0x84>)
 80258fe:	b530      	push	{r4, r5, lr}
 8025900:	6813      	ldr	r3, [r2, #0]
 8025902:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8025906:	f24c 2540 	movw	r5, #49728	; 0xc240
 802590a:	f023 0301 	bic.w	r3, r3, #1
 802590e:	6013      	str	r3, [r2, #0]
 8025910:	4b1c      	ldr	r3, [pc, #112]	; (8025984 <CRC_Lock+0x88>)
 8025912:	681a      	ldr	r2, [r3, #0]
 8025914:	4022      	ands	r2, r4
 8025916:	42aa      	cmp	r2, r5
 8025918:	d005      	beq.n	8025926 <CRC_Lock+0x2a>
 802591a:	681b      	ldr	r3, [r3, #0]
 802591c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8025920:	4023      	ands	r3, r4
 8025922:	4293      	cmp	r3, r2
 8025924:	d124      	bne.n	8025970 <CRC_Lock+0x74>
 8025926:	4b18      	ldr	r3, [pc, #96]	; (8025988 <CRC_Lock+0x8c>)
 8025928:	681b      	ldr	r3, [r3, #0]
 802592a:	bb0b      	cbnz	r3, 8025970 <CRC_Lock+0x74>
 802592c:	4b17      	ldr	r3, [pc, #92]	; (802598c <CRC_Lock+0x90>)
 802592e:	681a      	ldr	r2, [r3, #0]
 8025930:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025934:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8025938:	d00d      	beq.n	8025956 <CRC_Lock+0x5a>
 802593a:	681a      	ldr	r2, [r3, #0]
 802593c:	f240 4483 	movw	r4, #1155	; 0x483
 8025940:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025944:	42a2      	cmp	r2, r4
 8025946:	d006      	beq.n	8025956 <CRC_Lock+0x5a>
 8025948:	681b      	ldr	r3, [r3, #0]
 802594a:	f240 4285 	movw	r2, #1157	; 0x485
 802594e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025952:	4293      	cmp	r3, r2
 8025954:	d10c      	bne.n	8025970 <CRC_Lock+0x74>
 8025956:	4b0e      	ldr	r3, [pc, #56]	; (8025990 <CRC_Lock+0x94>)
 8025958:	2201      	movs	r2, #1
 802595a:	601a      	str	r2, [r3, #0]
 802595c:	681a      	ldr	r2, [r3, #0]
 802595e:	2a00      	cmp	r2, #0
 8025960:	d1fc      	bne.n	802595c <CRC_Lock+0x60>
 8025962:	4b0c      	ldr	r3, [pc, #48]	; (8025994 <CRC_Lock+0x98>)
 8025964:	6018      	str	r0, [r3, #0]
 8025966:	6818      	ldr	r0, [r3, #0]
 8025968:	1a43      	subs	r3, r0, r1
 802596a:	4258      	negs	r0, r3
 802596c:	4158      	adcs	r0, r3
 802596e:	bd30      	pop	{r4, r5, pc}
 8025970:	4b09      	ldr	r3, [pc, #36]	; (8025998 <CRC_Lock+0x9c>)
 8025972:	2201      	movs	r2, #1
 8025974:	601a      	str	r2, [r3, #0]
 8025976:	681a      	ldr	r2, [r3, #0]
 8025978:	2a00      	cmp	r2, #0
 802597a:	d1fc      	bne.n	8025976 <CRC_Lock+0x7a>
 802597c:	4b07      	ldr	r3, [pc, #28]	; (802599c <CRC_Lock+0xa0>)
 802597e:	e7f1      	b.n	8025964 <CRC_Lock+0x68>
 8025980:	e0002000 	.word	0xe0002000
 8025984:	e000ed00 	.word	0xe000ed00
 8025988:	e0042000 	.word	0xe0042000
 802598c:	5c001000 	.word	0x5c001000
 8025990:	58024c08 	.word	0x58024c08
 8025994:	58024c00 	.word	0x58024c00
 8025998:	40023008 	.word	0x40023008
 802599c:	40023000 	.word	0x40023000

080259a0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80259a0:	6101      	str	r1, [r0, #16]
 80259a2:	4770      	bx	lr

080259a4 <_ZN8touchgfx8Gestures4tickEv>:
 80259a4:	7b83      	ldrb	r3, [r0, #14]
 80259a6:	b14b      	cbz	r3, 80259bc <_ZN8touchgfx8Gestures4tickEv+0x18>
 80259a8:	8903      	ldrh	r3, [r0, #8]
 80259aa:	3301      	adds	r3, #1
 80259ac:	b29b      	uxth	r3, r3
 80259ae:	2b07      	cmp	r3, #7
 80259b0:	8103      	strh	r3, [r0, #8]
 80259b2:	bf81      	itttt	hi
 80259b4:	2300      	movhi	r3, #0
 80259b6:	8143      	strhhi	r3, [r0, #10]
 80259b8:	8183      	strhhi	r3, [r0, #12]
 80259ba:	7383      	strbhi	r3, [r0, #14]
 80259bc:	4770      	bx	lr
	...

080259c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80259c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80259c4:	4604      	mov	r4, r0
 80259c6:	4698      	mov	r8, r3
 80259c8:	8880      	ldrh	r0, [r0, #4]
 80259ca:	4617      	mov	r7, r2
 80259cc:	4b1d      	ldr	r3, [pc, #116]	; (8025a44 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80259ce:	460e      	mov	r6, r1
 80259d0:	f8ad 0006 	strh.w	r0, [sp, #6]
 80259d4:	eba8 0000 	sub.w	r0, r8, r0
 80259d8:	9300      	str	r3, [sp, #0]
 80259da:	2300      	movs	r3, #0
 80259dc:	b280      	uxth	r0, r0
 80259de:	8aa2      	ldrh	r2, [r4, #20]
 80259e0:	f88d 3004 	strb.w	r3, [sp, #4]
 80259e4:	b203      	sxth	r3, r0
 80259e6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80259ea:	88e1      	ldrh	r1, [r4, #6]
 80259ec:	2b00      	cmp	r3, #0
 80259ee:	f8ad 800a 	strh.w	r8, [sp, #10]
 80259f2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80259f6:	bfb8      	it	lt
 80259f8:	4240      	neglt	r0, r0
 80259fa:	f8ad 500c 	strh.w	r5, [sp, #12]
 80259fe:	bfb8      	it	lt
 8025a00:	b203      	sxthlt	r3, r0
 8025a02:	4293      	cmp	r3, r2
 8025a04:	dc08      	bgt.n	8025a18 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8025a06:	1a69      	subs	r1, r5, r1
 8025a08:	b289      	uxth	r1, r1
 8025a0a:	b20b      	sxth	r3, r1
 8025a0c:	2b00      	cmp	r3, #0
 8025a0e:	bfbc      	itt	lt
 8025a10:	4249      	neglt	r1, r1
 8025a12:	b20b      	sxthlt	r3, r1
 8025a14:	429a      	cmp	r2, r3
 8025a16:	da13      	bge.n	8025a40 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8025a18:	6920      	ldr	r0, [r4, #16]
 8025a1a:	4669      	mov	r1, sp
 8025a1c:	eba8 0606 	sub.w	r6, r8, r6
 8025a20:	1bef      	subs	r7, r5, r7
 8025a22:	6803      	ldr	r3, [r0, #0]
 8025a24:	685b      	ldr	r3, [r3, #4]
 8025a26:	4798      	blx	r3
 8025a28:	2300      	movs	r3, #0
 8025a2a:	2001      	movs	r0, #1
 8025a2c:	8166      	strh	r6, [r4, #10]
 8025a2e:	8123      	strh	r3, [r4, #8]
 8025a30:	81a7      	strh	r7, [r4, #12]
 8025a32:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025a36:	80e5      	strh	r5, [r4, #6]
 8025a38:	73a0      	strb	r0, [r4, #14]
 8025a3a:	b004      	add	sp, #16
 8025a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025a40:	2000      	movs	r0, #0
 8025a42:	e7fa      	b.n	8025a3a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8025a44:	080284a8 	.word	0x080284a8

08025a48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a4a:	461e      	mov	r6, r3
 8025a4c:	1e4b      	subs	r3, r1, #1
 8025a4e:	b085      	sub	sp, #20
 8025a50:	4604      	mov	r4, r0
 8025a52:	2b01      	cmp	r3, #1
 8025a54:	460d      	mov	r5, r1
 8025a56:	4617      	mov	r7, r2
 8025a58:	d84b      	bhi.n	8025af2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8025a5a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8025a5e:	1cd3      	adds	r3, r2, #3
 8025a60:	b29b      	uxth	r3, r3
 8025a62:	2b06      	cmp	r3, #6
 8025a64:	d916      	bls.n	8025a94 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8025a66:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8025b08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025a6a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025a6e:	f8cd c004 	str.w	ip, [sp, #4]
 8025a72:	f04f 0c00 	mov.w	ip, #0
 8025a76:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025a7a:	6900      	ldr	r0, [r0, #16]
 8025a7c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025a80:	a901      	add	r1, sp, #4
 8025a82:	f88d c008 	strb.w	ip, [sp, #8]
 8025a86:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025a8a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025a8e:	6803      	ldr	r3, [r0, #0]
 8025a90:	689b      	ldr	r3, [r3, #8]
 8025a92:	4798      	blx	r3
 8025a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025a98:	1cd3      	adds	r3, r2, #3
 8025a9a:	b29b      	uxth	r3, r3
 8025a9c:	2b06      	cmp	r3, #6
 8025a9e:	d916      	bls.n	8025ace <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025aa0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8025b08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025aa4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025aa8:	f8cd c004 	str.w	ip, [sp, #4]
 8025aac:	f04f 0c01 	mov.w	ip, #1
 8025ab0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025ab4:	6920      	ldr	r0, [r4, #16]
 8025ab6:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025aba:	a901      	add	r1, sp, #4
 8025abc:	f88d c008 	strb.w	ip, [sp, #8]
 8025ac0:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025ac4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025ac8:	6803      	ldr	r3, [r0, #0]
 8025aca:	689b      	ldr	r3, [r3, #8]
 8025acc:	4798      	blx	r3
 8025ace:	4b0d      	ldr	r3, [pc, #52]	; (8025b04 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8025ad0:	a901      	add	r1, sp, #4
 8025ad2:	6920      	ldr	r0, [r4, #16]
 8025ad4:	9301      	str	r3, [sp, #4]
 8025ad6:	2300      	movs	r3, #0
 8025ad8:	f88d 5008 	strb.w	r5, [sp, #8]
 8025adc:	f8ad 700a 	strh.w	r7, [sp, #10]
 8025ae0:	f8ad 600c 	strh.w	r6, [sp, #12]
 8025ae4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025ae8:	6803      	ldr	r3, [r0, #0]
 8025aea:	681b      	ldr	r3, [r3, #0]
 8025aec:	4798      	blx	r3
 8025aee:	b005      	add	sp, #20
 8025af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025af2:	2900      	cmp	r1, #0
 8025af4:	d1eb      	bne.n	8025ace <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025af6:	80a2      	strh	r2, [r4, #4]
 8025af8:	80c6      	strh	r6, [r0, #6]
 8025afa:	60a1      	str	r1, [r4, #8]
 8025afc:	81a1      	strh	r1, [r4, #12]
 8025afe:	73a1      	strb	r1, [r4, #14]
 8025b00:	e7e5      	b.n	8025ace <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025b02:	bf00      	nop
 8025b04:	08028494 	.word	0x08028494
 8025b08:	08029534 	.word	0x08029534

08025b0c <__aeabi_atexit>:
 8025b0c:	460b      	mov	r3, r1
 8025b0e:	4601      	mov	r1, r0
 8025b10:	4618      	mov	r0, r3
 8025b12:	f000 b853 	b.w	8025bbc <__cxa_atexit>

08025b16 <_ZdlPvj>:
 8025b16:	f000 b812 	b.w	8025b3e <_ZdlPv>

08025b1a <__cxa_guard_acquire>:
 8025b1a:	6803      	ldr	r3, [r0, #0]
 8025b1c:	07db      	lsls	r3, r3, #31
 8025b1e:	d406      	bmi.n	8025b2e <__cxa_guard_acquire+0x14>
 8025b20:	7843      	ldrb	r3, [r0, #1]
 8025b22:	b103      	cbz	r3, 8025b26 <__cxa_guard_acquire+0xc>
 8025b24:	deff      	udf	#255	; 0xff
 8025b26:	2301      	movs	r3, #1
 8025b28:	7043      	strb	r3, [r0, #1]
 8025b2a:	4618      	mov	r0, r3
 8025b2c:	4770      	bx	lr
 8025b2e:	2000      	movs	r0, #0
 8025b30:	4770      	bx	lr

08025b32 <__cxa_guard_release>:
 8025b32:	2301      	movs	r3, #1
 8025b34:	6003      	str	r3, [r0, #0]
 8025b36:	4770      	bx	lr

08025b38 <__cxa_pure_virtual>:
 8025b38:	b508      	push	{r3, lr}
 8025b3a:	f000 f80f 	bl	8025b5c <_ZSt9terminatev>

08025b3e <_ZdlPv>:
 8025b3e:	f000 b88f 	b.w	8025c60 <free>

08025b42 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025b42:	b508      	push	{r3, lr}
 8025b44:	4780      	blx	r0
 8025b46:	f000 f80e 	bl	8025b66 <abort>
	...

08025b4c <_ZSt13get_terminatev>:
 8025b4c:	4b02      	ldr	r3, [pc, #8]	; (8025b58 <_ZSt13get_terminatev+0xc>)
 8025b4e:	6818      	ldr	r0, [r3, #0]
 8025b50:	f3bf 8f5b 	dmb	ish
 8025b54:	4770      	bx	lr
 8025b56:	bf00      	nop
 8025b58:	240000c0 	.word	0x240000c0

08025b5c <_ZSt9terminatev>:
 8025b5c:	b508      	push	{r3, lr}
 8025b5e:	f7ff fff5 	bl	8025b4c <_ZSt13get_terminatev>
 8025b62:	f7ff ffee 	bl	8025b42 <_ZN10__cxxabiv111__terminateEPFvvE>

08025b66 <abort>:
 8025b66:	b508      	push	{r3, lr}
 8025b68:	2006      	movs	r0, #6
 8025b6a:	f000 fc67 	bl	802643c <raise>
 8025b6e:	2001      	movs	r0, #1
 8025b70:	f7db fc96 	bl	80014a0 <_exit>

08025b74 <__assert_func>:
 8025b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025b76:	4614      	mov	r4, r2
 8025b78:	461a      	mov	r2, r3
 8025b7a:	4b09      	ldr	r3, [pc, #36]	; (8025ba0 <__assert_func+0x2c>)
 8025b7c:	681b      	ldr	r3, [r3, #0]
 8025b7e:	4605      	mov	r5, r0
 8025b80:	68d8      	ldr	r0, [r3, #12]
 8025b82:	b14c      	cbz	r4, 8025b98 <__assert_func+0x24>
 8025b84:	4b07      	ldr	r3, [pc, #28]	; (8025ba4 <__assert_func+0x30>)
 8025b86:	9100      	str	r1, [sp, #0]
 8025b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025b8c:	4906      	ldr	r1, [pc, #24]	; (8025ba8 <__assert_func+0x34>)
 8025b8e:	462b      	mov	r3, r5
 8025b90:	f000 f828 	bl	8025be4 <fiprintf>
 8025b94:	f7ff ffe7 	bl	8025b66 <abort>
 8025b98:	4b04      	ldr	r3, [pc, #16]	; (8025bac <__assert_func+0x38>)
 8025b9a:	461c      	mov	r4, r3
 8025b9c:	e7f3      	b.n	8025b86 <__assert_func+0x12>
 8025b9e:	bf00      	nop
 8025ba0:	240000c4 	.word	0x240000c4
 8025ba4:	0802a8d5 	.word	0x0802a8d5
 8025ba8:	0802a8e2 	.word	0x0802a8e2
 8025bac:	0802a910 	.word	0x0802a910

08025bb0 <atexit>:
 8025bb0:	2300      	movs	r3, #0
 8025bb2:	4601      	mov	r1, r0
 8025bb4:	461a      	mov	r2, r3
 8025bb6:	4618      	mov	r0, r3
 8025bb8:	f000 bd1c 	b.w	80265f4 <__register_exitproc>

08025bbc <__cxa_atexit>:
 8025bbc:	b510      	push	{r4, lr}
 8025bbe:	4c05      	ldr	r4, [pc, #20]	; (8025bd4 <__cxa_atexit+0x18>)
 8025bc0:	4613      	mov	r3, r2
 8025bc2:	b12c      	cbz	r4, 8025bd0 <__cxa_atexit+0x14>
 8025bc4:	460a      	mov	r2, r1
 8025bc6:	4601      	mov	r1, r0
 8025bc8:	2002      	movs	r0, #2
 8025bca:	f000 fd13 	bl	80265f4 <__register_exitproc>
 8025bce:	bd10      	pop	{r4, pc}
 8025bd0:	4620      	mov	r0, r4
 8025bd2:	e7fc      	b.n	8025bce <__cxa_atexit+0x12>
 8025bd4:	080265f5 	.word	0x080265f5

08025bd8 <__errno>:
 8025bd8:	4b01      	ldr	r3, [pc, #4]	; (8025be0 <__errno+0x8>)
 8025bda:	6818      	ldr	r0, [r3, #0]
 8025bdc:	4770      	bx	lr
 8025bde:	bf00      	nop
 8025be0:	240000c4 	.word	0x240000c4

08025be4 <fiprintf>:
 8025be4:	b40e      	push	{r1, r2, r3}
 8025be6:	b503      	push	{r0, r1, lr}
 8025be8:	4601      	mov	r1, r0
 8025bea:	ab03      	add	r3, sp, #12
 8025bec:	4805      	ldr	r0, [pc, #20]	; (8025c04 <fiprintf+0x20>)
 8025bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8025bf2:	6800      	ldr	r0, [r0, #0]
 8025bf4:	9301      	str	r3, [sp, #4]
 8025bf6:	f000 f925 	bl	8025e44 <_vfiprintf_r>
 8025bfa:	b002      	add	sp, #8
 8025bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8025c00:	b003      	add	sp, #12
 8025c02:	4770      	bx	lr
 8025c04:	240000c4 	.word	0x240000c4

08025c08 <__libc_init_array>:
 8025c08:	b570      	push	{r4, r5, r6, lr}
 8025c0a:	4d0d      	ldr	r5, [pc, #52]	; (8025c40 <__libc_init_array+0x38>)
 8025c0c:	4c0d      	ldr	r4, [pc, #52]	; (8025c44 <__libc_init_array+0x3c>)
 8025c0e:	1b64      	subs	r4, r4, r5
 8025c10:	10a4      	asrs	r4, r4, #2
 8025c12:	2600      	movs	r6, #0
 8025c14:	42a6      	cmp	r6, r4
 8025c16:	d109      	bne.n	8025c2c <__libc_init_array+0x24>
 8025c18:	4d0b      	ldr	r5, [pc, #44]	; (8025c48 <__libc_init_array+0x40>)
 8025c1a:	4c0c      	ldr	r4, [pc, #48]	; (8025c4c <__libc_init_array+0x44>)
 8025c1c:	f001 f824 	bl	8026c68 <_init>
 8025c20:	1b64      	subs	r4, r4, r5
 8025c22:	10a4      	asrs	r4, r4, #2
 8025c24:	2600      	movs	r6, #0
 8025c26:	42a6      	cmp	r6, r4
 8025c28:	d105      	bne.n	8025c36 <__libc_init_array+0x2e>
 8025c2a:	bd70      	pop	{r4, r5, r6, pc}
 8025c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8025c30:	4798      	blx	r3
 8025c32:	3601      	adds	r6, #1
 8025c34:	e7ee      	b.n	8025c14 <__libc_init_array+0xc>
 8025c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8025c3a:	4798      	blx	r3
 8025c3c:	3601      	adds	r6, #1
 8025c3e:	e7f2      	b.n	8025c26 <__libc_init_array+0x1e>
 8025c40:	0802aa04 	.word	0x0802aa04
 8025c44:	0802aa04 	.word	0x0802aa04
 8025c48:	0802aa04 	.word	0x0802aa04
 8025c4c:	0802aa18 	.word	0x0802aa18

08025c50 <malloc>:
 8025c50:	4b02      	ldr	r3, [pc, #8]	; (8025c5c <malloc+0xc>)
 8025c52:	4601      	mov	r1, r0
 8025c54:	6818      	ldr	r0, [r3, #0]
 8025c56:	f000 b871 	b.w	8025d3c <_malloc_r>
 8025c5a:	bf00      	nop
 8025c5c:	240000c4 	.word	0x240000c4

08025c60 <free>:
 8025c60:	4b02      	ldr	r3, [pc, #8]	; (8025c6c <free+0xc>)
 8025c62:	4601      	mov	r1, r0
 8025c64:	6818      	ldr	r0, [r3, #0]
 8025c66:	f000 b819 	b.w	8025c9c <_free_r>
 8025c6a:	bf00      	nop
 8025c6c:	240000c4 	.word	0x240000c4

08025c70 <memcpy>:
 8025c70:	440a      	add	r2, r1
 8025c72:	4291      	cmp	r1, r2
 8025c74:	f100 33ff 	add.w	r3, r0, #4294967295
 8025c78:	d100      	bne.n	8025c7c <memcpy+0xc>
 8025c7a:	4770      	bx	lr
 8025c7c:	b510      	push	{r4, lr}
 8025c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025c82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025c86:	4291      	cmp	r1, r2
 8025c88:	d1f9      	bne.n	8025c7e <memcpy+0xe>
 8025c8a:	bd10      	pop	{r4, pc}

08025c8c <memset>:
 8025c8c:	4402      	add	r2, r0
 8025c8e:	4603      	mov	r3, r0
 8025c90:	4293      	cmp	r3, r2
 8025c92:	d100      	bne.n	8025c96 <memset+0xa>
 8025c94:	4770      	bx	lr
 8025c96:	f803 1b01 	strb.w	r1, [r3], #1
 8025c9a:	e7f9      	b.n	8025c90 <memset+0x4>

08025c9c <_free_r>:
 8025c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025c9e:	2900      	cmp	r1, #0
 8025ca0:	d048      	beq.n	8025d34 <_free_r+0x98>
 8025ca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025ca6:	9001      	str	r0, [sp, #4]
 8025ca8:	2b00      	cmp	r3, #0
 8025caa:	f1a1 0404 	sub.w	r4, r1, #4
 8025cae:	bfb8      	it	lt
 8025cb0:	18e4      	addlt	r4, r4, r3
 8025cb2:	f000 ff21 	bl	8026af8 <__malloc_lock>
 8025cb6:	4a20      	ldr	r2, [pc, #128]	; (8025d38 <_free_r+0x9c>)
 8025cb8:	9801      	ldr	r0, [sp, #4]
 8025cba:	6813      	ldr	r3, [r2, #0]
 8025cbc:	4615      	mov	r5, r2
 8025cbe:	b933      	cbnz	r3, 8025cce <_free_r+0x32>
 8025cc0:	6063      	str	r3, [r4, #4]
 8025cc2:	6014      	str	r4, [r2, #0]
 8025cc4:	b003      	add	sp, #12
 8025cc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025cca:	f000 bf1b 	b.w	8026b04 <__malloc_unlock>
 8025cce:	42a3      	cmp	r3, r4
 8025cd0:	d90b      	bls.n	8025cea <_free_r+0x4e>
 8025cd2:	6821      	ldr	r1, [r4, #0]
 8025cd4:	1862      	adds	r2, r4, r1
 8025cd6:	4293      	cmp	r3, r2
 8025cd8:	bf04      	itt	eq
 8025cda:	681a      	ldreq	r2, [r3, #0]
 8025cdc:	685b      	ldreq	r3, [r3, #4]
 8025cde:	6063      	str	r3, [r4, #4]
 8025ce0:	bf04      	itt	eq
 8025ce2:	1852      	addeq	r2, r2, r1
 8025ce4:	6022      	streq	r2, [r4, #0]
 8025ce6:	602c      	str	r4, [r5, #0]
 8025ce8:	e7ec      	b.n	8025cc4 <_free_r+0x28>
 8025cea:	461a      	mov	r2, r3
 8025cec:	685b      	ldr	r3, [r3, #4]
 8025cee:	b10b      	cbz	r3, 8025cf4 <_free_r+0x58>
 8025cf0:	42a3      	cmp	r3, r4
 8025cf2:	d9fa      	bls.n	8025cea <_free_r+0x4e>
 8025cf4:	6811      	ldr	r1, [r2, #0]
 8025cf6:	1855      	adds	r5, r2, r1
 8025cf8:	42a5      	cmp	r5, r4
 8025cfa:	d10b      	bne.n	8025d14 <_free_r+0x78>
 8025cfc:	6824      	ldr	r4, [r4, #0]
 8025cfe:	4421      	add	r1, r4
 8025d00:	1854      	adds	r4, r2, r1
 8025d02:	42a3      	cmp	r3, r4
 8025d04:	6011      	str	r1, [r2, #0]
 8025d06:	d1dd      	bne.n	8025cc4 <_free_r+0x28>
 8025d08:	681c      	ldr	r4, [r3, #0]
 8025d0a:	685b      	ldr	r3, [r3, #4]
 8025d0c:	6053      	str	r3, [r2, #4]
 8025d0e:	4421      	add	r1, r4
 8025d10:	6011      	str	r1, [r2, #0]
 8025d12:	e7d7      	b.n	8025cc4 <_free_r+0x28>
 8025d14:	d902      	bls.n	8025d1c <_free_r+0x80>
 8025d16:	230c      	movs	r3, #12
 8025d18:	6003      	str	r3, [r0, #0]
 8025d1a:	e7d3      	b.n	8025cc4 <_free_r+0x28>
 8025d1c:	6825      	ldr	r5, [r4, #0]
 8025d1e:	1961      	adds	r1, r4, r5
 8025d20:	428b      	cmp	r3, r1
 8025d22:	bf04      	itt	eq
 8025d24:	6819      	ldreq	r1, [r3, #0]
 8025d26:	685b      	ldreq	r3, [r3, #4]
 8025d28:	6063      	str	r3, [r4, #4]
 8025d2a:	bf04      	itt	eq
 8025d2c:	1949      	addeq	r1, r1, r5
 8025d2e:	6021      	streq	r1, [r4, #0]
 8025d30:	6054      	str	r4, [r2, #4]
 8025d32:	e7c7      	b.n	8025cc4 <_free_r+0x28>
 8025d34:	b003      	add	sp, #12
 8025d36:	bd30      	pop	{r4, r5, pc}
 8025d38:	2400afe8 	.word	0x2400afe8

08025d3c <_malloc_r>:
 8025d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d3e:	1ccd      	adds	r5, r1, #3
 8025d40:	f025 0503 	bic.w	r5, r5, #3
 8025d44:	3508      	adds	r5, #8
 8025d46:	2d0c      	cmp	r5, #12
 8025d48:	bf38      	it	cc
 8025d4a:	250c      	movcc	r5, #12
 8025d4c:	2d00      	cmp	r5, #0
 8025d4e:	4606      	mov	r6, r0
 8025d50:	db01      	blt.n	8025d56 <_malloc_r+0x1a>
 8025d52:	42a9      	cmp	r1, r5
 8025d54:	d903      	bls.n	8025d5e <_malloc_r+0x22>
 8025d56:	230c      	movs	r3, #12
 8025d58:	6033      	str	r3, [r6, #0]
 8025d5a:	2000      	movs	r0, #0
 8025d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d5e:	f000 fecb 	bl	8026af8 <__malloc_lock>
 8025d62:	4921      	ldr	r1, [pc, #132]	; (8025de8 <_malloc_r+0xac>)
 8025d64:	680a      	ldr	r2, [r1, #0]
 8025d66:	4614      	mov	r4, r2
 8025d68:	b99c      	cbnz	r4, 8025d92 <_malloc_r+0x56>
 8025d6a:	4f20      	ldr	r7, [pc, #128]	; (8025dec <_malloc_r+0xb0>)
 8025d6c:	683b      	ldr	r3, [r7, #0]
 8025d6e:	b923      	cbnz	r3, 8025d7a <_malloc_r+0x3e>
 8025d70:	4621      	mov	r1, r4
 8025d72:	4630      	mov	r0, r6
 8025d74:	f000 fb2a 	bl	80263cc <_sbrk_r>
 8025d78:	6038      	str	r0, [r7, #0]
 8025d7a:	4629      	mov	r1, r5
 8025d7c:	4630      	mov	r0, r6
 8025d7e:	f000 fb25 	bl	80263cc <_sbrk_r>
 8025d82:	1c43      	adds	r3, r0, #1
 8025d84:	d123      	bne.n	8025dce <_malloc_r+0x92>
 8025d86:	230c      	movs	r3, #12
 8025d88:	6033      	str	r3, [r6, #0]
 8025d8a:	4630      	mov	r0, r6
 8025d8c:	f000 feba 	bl	8026b04 <__malloc_unlock>
 8025d90:	e7e3      	b.n	8025d5a <_malloc_r+0x1e>
 8025d92:	6823      	ldr	r3, [r4, #0]
 8025d94:	1b5b      	subs	r3, r3, r5
 8025d96:	d417      	bmi.n	8025dc8 <_malloc_r+0x8c>
 8025d98:	2b0b      	cmp	r3, #11
 8025d9a:	d903      	bls.n	8025da4 <_malloc_r+0x68>
 8025d9c:	6023      	str	r3, [r4, #0]
 8025d9e:	441c      	add	r4, r3
 8025da0:	6025      	str	r5, [r4, #0]
 8025da2:	e004      	b.n	8025dae <_malloc_r+0x72>
 8025da4:	6863      	ldr	r3, [r4, #4]
 8025da6:	42a2      	cmp	r2, r4
 8025da8:	bf0c      	ite	eq
 8025daa:	600b      	streq	r3, [r1, #0]
 8025dac:	6053      	strne	r3, [r2, #4]
 8025dae:	4630      	mov	r0, r6
 8025db0:	f000 fea8 	bl	8026b04 <__malloc_unlock>
 8025db4:	f104 000b 	add.w	r0, r4, #11
 8025db8:	1d23      	adds	r3, r4, #4
 8025dba:	f020 0007 	bic.w	r0, r0, #7
 8025dbe:	1ac2      	subs	r2, r0, r3
 8025dc0:	d0cc      	beq.n	8025d5c <_malloc_r+0x20>
 8025dc2:	1a1b      	subs	r3, r3, r0
 8025dc4:	50a3      	str	r3, [r4, r2]
 8025dc6:	e7c9      	b.n	8025d5c <_malloc_r+0x20>
 8025dc8:	4622      	mov	r2, r4
 8025dca:	6864      	ldr	r4, [r4, #4]
 8025dcc:	e7cc      	b.n	8025d68 <_malloc_r+0x2c>
 8025dce:	1cc4      	adds	r4, r0, #3
 8025dd0:	f024 0403 	bic.w	r4, r4, #3
 8025dd4:	42a0      	cmp	r0, r4
 8025dd6:	d0e3      	beq.n	8025da0 <_malloc_r+0x64>
 8025dd8:	1a21      	subs	r1, r4, r0
 8025dda:	4630      	mov	r0, r6
 8025ddc:	f000 faf6 	bl	80263cc <_sbrk_r>
 8025de0:	3001      	adds	r0, #1
 8025de2:	d1dd      	bne.n	8025da0 <_malloc_r+0x64>
 8025de4:	e7cf      	b.n	8025d86 <_malloc_r+0x4a>
 8025de6:	bf00      	nop
 8025de8:	2400afe8 	.word	0x2400afe8
 8025dec:	2400afec 	.word	0x2400afec

08025df0 <__sfputc_r>:
 8025df0:	6893      	ldr	r3, [r2, #8]
 8025df2:	3b01      	subs	r3, #1
 8025df4:	2b00      	cmp	r3, #0
 8025df6:	b410      	push	{r4}
 8025df8:	6093      	str	r3, [r2, #8]
 8025dfa:	da08      	bge.n	8025e0e <__sfputc_r+0x1e>
 8025dfc:	6994      	ldr	r4, [r2, #24]
 8025dfe:	42a3      	cmp	r3, r4
 8025e00:	db01      	blt.n	8025e06 <__sfputc_r+0x16>
 8025e02:	290a      	cmp	r1, #10
 8025e04:	d103      	bne.n	8025e0e <__sfputc_r+0x1e>
 8025e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e0a:	f000 bb33 	b.w	8026474 <__swbuf_r>
 8025e0e:	6813      	ldr	r3, [r2, #0]
 8025e10:	1c58      	adds	r0, r3, #1
 8025e12:	6010      	str	r0, [r2, #0]
 8025e14:	7019      	strb	r1, [r3, #0]
 8025e16:	4608      	mov	r0, r1
 8025e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e1c:	4770      	bx	lr

08025e1e <__sfputs_r>:
 8025e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025e20:	4606      	mov	r6, r0
 8025e22:	460f      	mov	r7, r1
 8025e24:	4614      	mov	r4, r2
 8025e26:	18d5      	adds	r5, r2, r3
 8025e28:	42ac      	cmp	r4, r5
 8025e2a:	d101      	bne.n	8025e30 <__sfputs_r+0x12>
 8025e2c:	2000      	movs	r0, #0
 8025e2e:	e007      	b.n	8025e40 <__sfputs_r+0x22>
 8025e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025e34:	463a      	mov	r2, r7
 8025e36:	4630      	mov	r0, r6
 8025e38:	f7ff ffda 	bl	8025df0 <__sfputc_r>
 8025e3c:	1c43      	adds	r3, r0, #1
 8025e3e:	d1f3      	bne.n	8025e28 <__sfputs_r+0xa>
 8025e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025e44 <_vfiprintf_r>:
 8025e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e48:	460d      	mov	r5, r1
 8025e4a:	b09d      	sub	sp, #116	; 0x74
 8025e4c:	4614      	mov	r4, r2
 8025e4e:	4698      	mov	r8, r3
 8025e50:	4606      	mov	r6, r0
 8025e52:	b118      	cbz	r0, 8025e5c <_vfiprintf_r+0x18>
 8025e54:	6983      	ldr	r3, [r0, #24]
 8025e56:	b90b      	cbnz	r3, 8025e5c <_vfiprintf_r+0x18>
 8025e58:	f000 fd48 	bl	80268ec <__sinit>
 8025e5c:	4b89      	ldr	r3, [pc, #548]	; (8026084 <_vfiprintf_r+0x240>)
 8025e5e:	429d      	cmp	r5, r3
 8025e60:	d11b      	bne.n	8025e9a <_vfiprintf_r+0x56>
 8025e62:	6875      	ldr	r5, [r6, #4]
 8025e64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025e66:	07d9      	lsls	r1, r3, #31
 8025e68:	d405      	bmi.n	8025e76 <_vfiprintf_r+0x32>
 8025e6a:	89ab      	ldrh	r3, [r5, #12]
 8025e6c:	059a      	lsls	r2, r3, #22
 8025e6e:	d402      	bmi.n	8025e76 <_vfiprintf_r+0x32>
 8025e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025e72:	f000 fdd9 	bl	8026a28 <__retarget_lock_acquire_recursive>
 8025e76:	89ab      	ldrh	r3, [r5, #12]
 8025e78:	071b      	lsls	r3, r3, #28
 8025e7a:	d501      	bpl.n	8025e80 <_vfiprintf_r+0x3c>
 8025e7c:	692b      	ldr	r3, [r5, #16]
 8025e7e:	b9eb      	cbnz	r3, 8025ebc <_vfiprintf_r+0x78>
 8025e80:	4629      	mov	r1, r5
 8025e82:	4630      	mov	r0, r6
 8025e84:	f000 fb48 	bl	8026518 <__swsetup_r>
 8025e88:	b1c0      	cbz	r0, 8025ebc <_vfiprintf_r+0x78>
 8025e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025e8c:	07dc      	lsls	r4, r3, #31
 8025e8e:	d50e      	bpl.n	8025eae <_vfiprintf_r+0x6a>
 8025e90:	f04f 30ff 	mov.w	r0, #4294967295
 8025e94:	b01d      	add	sp, #116	; 0x74
 8025e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e9a:	4b7b      	ldr	r3, [pc, #492]	; (8026088 <_vfiprintf_r+0x244>)
 8025e9c:	429d      	cmp	r5, r3
 8025e9e:	d101      	bne.n	8025ea4 <_vfiprintf_r+0x60>
 8025ea0:	68b5      	ldr	r5, [r6, #8]
 8025ea2:	e7df      	b.n	8025e64 <_vfiprintf_r+0x20>
 8025ea4:	4b79      	ldr	r3, [pc, #484]	; (802608c <_vfiprintf_r+0x248>)
 8025ea6:	429d      	cmp	r5, r3
 8025ea8:	bf08      	it	eq
 8025eaa:	68f5      	ldreq	r5, [r6, #12]
 8025eac:	e7da      	b.n	8025e64 <_vfiprintf_r+0x20>
 8025eae:	89ab      	ldrh	r3, [r5, #12]
 8025eb0:	0598      	lsls	r0, r3, #22
 8025eb2:	d4ed      	bmi.n	8025e90 <_vfiprintf_r+0x4c>
 8025eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025eb6:	f000 fdb9 	bl	8026a2c <__retarget_lock_release_recursive>
 8025eba:	e7e9      	b.n	8025e90 <_vfiprintf_r+0x4c>
 8025ebc:	2300      	movs	r3, #0
 8025ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8025ec0:	2320      	movs	r3, #32
 8025ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8025eca:	2330      	movs	r3, #48	; 0x30
 8025ecc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8026090 <_vfiprintf_r+0x24c>
 8025ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025ed4:	f04f 0901 	mov.w	r9, #1
 8025ed8:	4623      	mov	r3, r4
 8025eda:	469a      	mov	sl, r3
 8025edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025ee0:	b10a      	cbz	r2, 8025ee6 <_vfiprintf_r+0xa2>
 8025ee2:	2a25      	cmp	r2, #37	; 0x25
 8025ee4:	d1f9      	bne.n	8025eda <_vfiprintf_r+0x96>
 8025ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8025eea:	d00b      	beq.n	8025f04 <_vfiprintf_r+0xc0>
 8025eec:	465b      	mov	r3, fp
 8025eee:	4622      	mov	r2, r4
 8025ef0:	4629      	mov	r1, r5
 8025ef2:	4630      	mov	r0, r6
 8025ef4:	f7ff ff93 	bl	8025e1e <__sfputs_r>
 8025ef8:	3001      	adds	r0, #1
 8025efa:	f000 80aa 	beq.w	8026052 <_vfiprintf_r+0x20e>
 8025efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025f00:	445a      	add	r2, fp
 8025f02:	9209      	str	r2, [sp, #36]	; 0x24
 8025f04:	f89a 3000 	ldrb.w	r3, [sl]
 8025f08:	2b00      	cmp	r3, #0
 8025f0a:	f000 80a2 	beq.w	8026052 <_vfiprintf_r+0x20e>
 8025f0e:	2300      	movs	r3, #0
 8025f10:	f04f 32ff 	mov.w	r2, #4294967295
 8025f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025f18:	f10a 0a01 	add.w	sl, sl, #1
 8025f1c:	9304      	str	r3, [sp, #16]
 8025f1e:	9307      	str	r3, [sp, #28]
 8025f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025f24:	931a      	str	r3, [sp, #104]	; 0x68
 8025f26:	4654      	mov	r4, sl
 8025f28:	2205      	movs	r2, #5
 8025f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025f2e:	4858      	ldr	r0, [pc, #352]	; (8026090 <_vfiprintf_r+0x24c>)
 8025f30:	f7da f9d6 	bl	80002e0 <memchr>
 8025f34:	9a04      	ldr	r2, [sp, #16]
 8025f36:	b9d8      	cbnz	r0, 8025f70 <_vfiprintf_r+0x12c>
 8025f38:	06d1      	lsls	r1, r2, #27
 8025f3a:	bf44      	itt	mi
 8025f3c:	2320      	movmi	r3, #32
 8025f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025f42:	0713      	lsls	r3, r2, #28
 8025f44:	bf44      	itt	mi
 8025f46:	232b      	movmi	r3, #43	; 0x2b
 8025f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8025f50:	2b2a      	cmp	r3, #42	; 0x2a
 8025f52:	d015      	beq.n	8025f80 <_vfiprintf_r+0x13c>
 8025f54:	9a07      	ldr	r2, [sp, #28]
 8025f56:	4654      	mov	r4, sl
 8025f58:	2000      	movs	r0, #0
 8025f5a:	f04f 0c0a 	mov.w	ip, #10
 8025f5e:	4621      	mov	r1, r4
 8025f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025f64:	3b30      	subs	r3, #48	; 0x30
 8025f66:	2b09      	cmp	r3, #9
 8025f68:	d94e      	bls.n	8026008 <_vfiprintf_r+0x1c4>
 8025f6a:	b1b0      	cbz	r0, 8025f9a <_vfiprintf_r+0x156>
 8025f6c:	9207      	str	r2, [sp, #28]
 8025f6e:	e014      	b.n	8025f9a <_vfiprintf_r+0x156>
 8025f70:	eba0 0308 	sub.w	r3, r0, r8
 8025f74:	fa09 f303 	lsl.w	r3, r9, r3
 8025f78:	4313      	orrs	r3, r2
 8025f7a:	9304      	str	r3, [sp, #16]
 8025f7c:	46a2      	mov	sl, r4
 8025f7e:	e7d2      	b.n	8025f26 <_vfiprintf_r+0xe2>
 8025f80:	9b03      	ldr	r3, [sp, #12]
 8025f82:	1d19      	adds	r1, r3, #4
 8025f84:	681b      	ldr	r3, [r3, #0]
 8025f86:	9103      	str	r1, [sp, #12]
 8025f88:	2b00      	cmp	r3, #0
 8025f8a:	bfbb      	ittet	lt
 8025f8c:	425b      	neglt	r3, r3
 8025f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8025f92:	9307      	strge	r3, [sp, #28]
 8025f94:	9307      	strlt	r3, [sp, #28]
 8025f96:	bfb8      	it	lt
 8025f98:	9204      	strlt	r2, [sp, #16]
 8025f9a:	7823      	ldrb	r3, [r4, #0]
 8025f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8025f9e:	d10c      	bne.n	8025fba <_vfiprintf_r+0x176>
 8025fa0:	7863      	ldrb	r3, [r4, #1]
 8025fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8025fa4:	d135      	bne.n	8026012 <_vfiprintf_r+0x1ce>
 8025fa6:	9b03      	ldr	r3, [sp, #12]
 8025fa8:	1d1a      	adds	r2, r3, #4
 8025faa:	681b      	ldr	r3, [r3, #0]
 8025fac:	9203      	str	r2, [sp, #12]
 8025fae:	2b00      	cmp	r3, #0
 8025fb0:	bfb8      	it	lt
 8025fb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8025fb6:	3402      	adds	r4, #2
 8025fb8:	9305      	str	r3, [sp, #20]
 8025fba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80260a0 <_vfiprintf_r+0x25c>
 8025fbe:	7821      	ldrb	r1, [r4, #0]
 8025fc0:	2203      	movs	r2, #3
 8025fc2:	4650      	mov	r0, sl
 8025fc4:	f7da f98c 	bl	80002e0 <memchr>
 8025fc8:	b140      	cbz	r0, 8025fdc <_vfiprintf_r+0x198>
 8025fca:	2340      	movs	r3, #64	; 0x40
 8025fcc:	eba0 000a 	sub.w	r0, r0, sl
 8025fd0:	fa03 f000 	lsl.w	r0, r3, r0
 8025fd4:	9b04      	ldr	r3, [sp, #16]
 8025fd6:	4303      	orrs	r3, r0
 8025fd8:	3401      	adds	r4, #1
 8025fda:	9304      	str	r3, [sp, #16]
 8025fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025fe0:	482c      	ldr	r0, [pc, #176]	; (8026094 <_vfiprintf_r+0x250>)
 8025fe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025fe6:	2206      	movs	r2, #6
 8025fe8:	f7da f97a 	bl	80002e0 <memchr>
 8025fec:	2800      	cmp	r0, #0
 8025fee:	d03f      	beq.n	8026070 <_vfiprintf_r+0x22c>
 8025ff0:	4b29      	ldr	r3, [pc, #164]	; (8026098 <_vfiprintf_r+0x254>)
 8025ff2:	bb1b      	cbnz	r3, 802603c <_vfiprintf_r+0x1f8>
 8025ff4:	9b03      	ldr	r3, [sp, #12]
 8025ff6:	3307      	adds	r3, #7
 8025ff8:	f023 0307 	bic.w	r3, r3, #7
 8025ffc:	3308      	adds	r3, #8
 8025ffe:	9303      	str	r3, [sp, #12]
 8026000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026002:	443b      	add	r3, r7
 8026004:	9309      	str	r3, [sp, #36]	; 0x24
 8026006:	e767      	b.n	8025ed8 <_vfiprintf_r+0x94>
 8026008:	fb0c 3202 	mla	r2, ip, r2, r3
 802600c:	460c      	mov	r4, r1
 802600e:	2001      	movs	r0, #1
 8026010:	e7a5      	b.n	8025f5e <_vfiprintf_r+0x11a>
 8026012:	2300      	movs	r3, #0
 8026014:	3401      	adds	r4, #1
 8026016:	9305      	str	r3, [sp, #20]
 8026018:	4619      	mov	r1, r3
 802601a:	f04f 0c0a 	mov.w	ip, #10
 802601e:	4620      	mov	r0, r4
 8026020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026024:	3a30      	subs	r2, #48	; 0x30
 8026026:	2a09      	cmp	r2, #9
 8026028:	d903      	bls.n	8026032 <_vfiprintf_r+0x1ee>
 802602a:	2b00      	cmp	r3, #0
 802602c:	d0c5      	beq.n	8025fba <_vfiprintf_r+0x176>
 802602e:	9105      	str	r1, [sp, #20]
 8026030:	e7c3      	b.n	8025fba <_vfiprintf_r+0x176>
 8026032:	fb0c 2101 	mla	r1, ip, r1, r2
 8026036:	4604      	mov	r4, r0
 8026038:	2301      	movs	r3, #1
 802603a:	e7f0      	b.n	802601e <_vfiprintf_r+0x1da>
 802603c:	ab03      	add	r3, sp, #12
 802603e:	9300      	str	r3, [sp, #0]
 8026040:	462a      	mov	r2, r5
 8026042:	4b16      	ldr	r3, [pc, #88]	; (802609c <_vfiprintf_r+0x258>)
 8026044:	a904      	add	r1, sp, #16
 8026046:	4630      	mov	r0, r6
 8026048:	f3af 8000 	nop.w
 802604c:	4607      	mov	r7, r0
 802604e:	1c78      	adds	r0, r7, #1
 8026050:	d1d6      	bne.n	8026000 <_vfiprintf_r+0x1bc>
 8026052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026054:	07d9      	lsls	r1, r3, #31
 8026056:	d405      	bmi.n	8026064 <_vfiprintf_r+0x220>
 8026058:	89ab      	ldrh	r3, [r5, #12]
 802605a:	059a      	lsls	r2, r3, #22
 802605c:	d402      	bmi.n	8026064 <_vfiprintf_r+0x220>
 802605e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026060:	f000 fce4 	bl	8026a2c <__retarget_lock_release_recursive>
 8026064:	89ab      	ldrh	r3, [r5, #12]
 8026066:	065b      	lsls	r3, r3, #25
 8026068:	f53f af12 	bmi.w	8025e90 <_vfiprintf_r+0x4c>
 802606c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802606e:	e711      	b.n	8025e94 <_vfiprintf_r+0x50>
 8026070:	ab03      	add	r3, sp, #12
 8026072:	9300      	str	r3, [sp, #0]
 8026074:	462a      	mov	r2, r5
 8026076:	4b09      	ldr	r3, [pc, #36]	; (802609c <_vfiprintf_r+0x258>)
 8026078:	a904      	add	r1, sp, #16
 802607a:	4630      	mov	r0, r6
 802607c:	f000 f880 	bl	8026180 <_printf_i>
 8026080:	e7e4      	b.n	802604c <_vfiprintf_r+0x208>
 8026082:	bf00      	nop
 8026084:	0802a970 	.word	0x0802a970
 8026088:	0802a990 	.word	0x0802a990
 802608c:	0802a950 	.word	0x0802a950
 8026090:	0802a918 	.word	0x0802a918
 8026094:	0802a922 	.word	0x0802a922
 8026098:	00000000 	.word	0x00000000
 802609c:	08025e1f 	.word	0x08025e1f
 80260a0:	0802a91e 	.word	0x0802a91e

080260a4 <_printf_common>:
 80260a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80260a8:	4616      	mov	r6, r2
 80260aa:	4699      	mov	r9, r3
 80260ac:	688a      	ldr	r2, [r1, #8]
 80260ae:	690b      	ldr	r3, [r1, #16]
 80260b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80260b4:	4293      	cmp	r3, r2
 80260b6:	bfb8      	it	lt
 80260b8:	4613      	movlt	r3, r2
 80260ba:	6033      	str	r3, [r6, #0]
 80260bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80260c0:	4607      	mov	r7, r0
 80260c2:	460c      	mov	r4, r1
 80260c4:	b10a      	cbz	r2, 80260ca <_printf_common+0x26>
 80260c6:	3301      	adds	r3, #1
 80260c8:	6033      	str	r3, [r6, #0]
 80260ca:	6823      	ldr	r3, [r4, #0]
 80260cc:	0699      	lsls	r1, r3, #26
 80260ce:	bf42      	ittt	mi
 80260d0:	6833      	ldrmi	r3, [r6, #0]
 80260d2:	3302      	addmi	r3, #2
 80260d4:	6033      	strmi	r3, [r6, #0]
 80260d6:	6825      	ldr	r5, [r4, #0]
 80260d8:	f015 0506 	ands.w	r5, r5, #6
 80260dc:	d106      	bne.n	80260ec <_printf_common+0x48>
 80260de:	f104 0a19 	add.w	sl, r4, #25
 80260e2:	68e3      	ldr	r3, [r4, #12]
 80260e4:	6832      	ldr	r2, [r6, #0]
 80260e6:	1a9b      	subs	r3, r3, r2
 80260e8:	42ab      	cmp	r3, r5
 80260ea:	dc26      	bgt.n	802613a <_printf_common+0x96>
 80260ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80260f0:	1e13      	subs	r3, r2, #0
 80260f2:	6822      	ldr	r2, [r4, #0]
 80260f4:	bf18      	it	ne
 80260f6:	2301      	movne	r3, #1
 80260f8:	0692      	lsls	r2, r2, #26
 80260fa:	d42b      	bmi.n	8026154 <_printf_common+0xb0>
 80260fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026100:	4649      	mov	r1, r9
 8026102:	4638      	mov	r0, r7
 8026104:	47c0      	blx	r8
 8026106:	3001      	adds	r0, #1
 8026108:	d01e      	beq.n	8026148 <_printf_common+0xa4>
 802610a:	6823      	ldr	r3, [r4, #0]
 802610c:	68e5      	ldr	r5, [r4, #12]
 802610e:	6832      	ldr	r2, [r6, #0]
 8026110:	f003 0306 	and.w	r3, r3, #6
 8026114:	2b04      	cmp	r3, #4
 8026116:	bf08      	it	eq
 8026118:	1aad      	subeq	r5, r5, r2
 802611a:	68a3      	ldr	r3, [r4, #8]
 802611c:	6922      	ldr	r2, [r4, #16]
 802611e:	bf0c      	ite	eq
 8026120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026124:	2500      	movne	r5, #0
 8026126:	4293      	cmp	r3, r2
 8026128:	bfc4      	itt	gt
 802612a:	1a9b      	subgt	r3, r3, r2
 802612c:	18ed      	addgt	r5, r5, r3
 802612e:	2600      	movs	r6, #0
 8026130:	341a      	adds	r4, #26
 8026132:	42b5      	cmp	r5, r6
 8026134:	d11a      	bne.n	802616c <_printf_common+0xc8>
 8026136:	2000      	movs	r0, #0
 8026138:	e008      	b.n	802614c <_printf_common+0xa8>
 802613a:	2301      	movs	r3, #1
 802613c:	4652      	mov	r2, sl
 802613e:	4649      	mov	r1, r9
 8026140:	4638      	mov	r0, r7
 8026142:	47c0      	blx	r8
 8026144:	3001      	adds	r0, #1
 8026146:	d103      	bne.n	8026150 <_printf_common+0xac>
 8026148:	f04f 30ff 	mov.w	r0, #4294967295
 802614c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026150:	3501      	adds	r5, #1
 8026152:	e7c6      	b.n	80260e2 <_printf_common+0x3e>
 8026154:	18e1      	adds	r1, r4, r3
 8026156:	1c5a      	adds	r2, r3, #1
 8026158:	2030      	movs	r0, #48	; 0x30
 802615a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802615e:	4422      	add	r2, r4
 8026160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026168:	3302      	adds	r3, #2
 802616a:	e7c7      	b.n	80260fc <_printf_common+0x58>
 802616c:	2301      	movs	r3, #1
 802616e:	4622      	mov	r2, r4
 8026170:	4649      	mov	r1, r9
 8026172:	4638      	mov	r0, r7
 8026174:	47c0      	blx	r8
 8026176:	3001      	adds	r0, #1
 8026178:	d0e6      	beq.n	8026148 <_printf_common+0xa4>
 802617a:	3601      	adds	r6, #1
 802617c:	e7d9      	b.n	8026132 <_printf_common+0x8e>
	...

08026180 <_printf_i>:
 8026180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026184:	460c      	mov	r4, r1
 8026186:	4691      	mov	r9, r2
 8026188:	7e27      	ldrb	r7, [r4, #24]
 802618a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802618c:	2f78      	cmp	r7, #120	; 0x78
 802618e:	4680      	mov	r8, r0
 8026190:	469a      	mov	sl, r3
 8026192:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026196:	d807      	bhi.n	80261a8 <_printf_i+0x28>
 8026198:	2f62      	cmp	r7, #98	; 0x62
 802619a:	d80a      	bhi.n	80261b2 <_printf_i+0x32>
 802619c:	2f00      	cmp	r7, #0
 802619e:	f000 80d8 	beq.w	8026352 <_printf_i+0x1d2>
 80261a2:	2f58      	cmp	r7, #88	; 0x58
 80261a4:	f000 80a3 	beq.w	80262ee <_printf_i+0x16e>
 80261a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80261ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80261b0:	e03a      	b.n	8026228 <_printf_i+0xa8>
 80261b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80261b6:	2b15      	cmp	r3, #21
 80261b8:	d8f6      	bhi.n	80261a8 <_printf_i+0x28>
 80261ba:	a001      	add	r0, pc, #4	; (adr r0, 80261c0 <_printf_i+0x40>)
 80261bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80261c0:	08026219 	.word	0x08026219
 80261c4:	0802622d 	.word	0x0802622d
 80261c8:	080261a9 	.word	0x080261a9
 80261cc:	080261a9 	.word	0x080261a9
 80261d0:	080261a9 	.word	0x080261a9
 80261d4:	080261a9 	.word	0x080261a9
 80261d8:	0802622d 	.word	0x0802622d
 80261dc:	080261a9 	.word	0x080261a9
 80261e0:	080261a9 	.word	0x080261a9
 80261e4:	080261a9 	.word	0x080261a9
 80261e8:	080261a9 	.word	0x080261a9
 80261ec:	08026339 	.word	0x08026339
 80261f0:	0802625d 	.word	0x0802625d
 80261f4:	0802631b 	.word	0x0802631b
 80261f8:	080261a9 	.word	0x080261a9
 80261fc:	080261a9 	.word	0x080261a9
 8026200:	0802635b 	.word	0x0802635b
 8026204:	080261a9 	.word	0x080261a9
 8026208:	0802625d 	.word	0x0802625d
 802620c:	080261a9 	.word	0x080261a9
 8026210:	080261a9 	.word	0x080261a9
 8026214:	08026323 	.word	0x08026323
 8026218:	680b      	ldr	r3, [r1, #0]
 802621a:	1d1a      	adds	r2, r3, #4
 802621c:	681b      	ldr	r3, [r3, #0]
 802621e:	600a      	str	r2, [r1, #0]
 8026220:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026228:	2301      	movs	r3, #1
 802622a:	e0a3      	b.n	8026374 <_printf_i+0x1f4>
 802622c:	6825      	ldr	r5, [r4, #0]
 802622e:	6808      	ldr	r0, [r1, #0]
 8026230:	062e      	lsls	r6, r5, #24
 8026232:	f100 0304 	add.w	r3, r0, #4
 8026236:	d50a      	bpl.n	802624e <_printf_i+0xce>
 8026238:	6805      	ldr	r5, [r0, #0]
 802623a:	600b      	str	r3, [r1, #0]
 802623c:	2d00      	cmp	r5, #0
 802623e:	da03      	bge.n	8026248 <_printf_i+0xc8>
 8026240:	232d      	movs	r3, #45	; 0x2d
 8026242:	426d      	negs	r5, r5
 8026244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026248:	485e      	ldr	r0, [pc, #376]	; (80263c4 <_printf_i+0x244>)
 802624a:	230a      	movs	r3, #10
 802624c:	e019      	b.n	8026282 <_printf_i+0x102>
 802624e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8026252:	6805      	ldr	r5, [r0, #0]
 8026254:	600b      	str	r3, [r1, #0]
 8026256:	bf18      	it	ne
 8026258:	b22d      	sxthne	r5, r5
 802625a:	e7ef      	b.n	802623c <_printf_i+0xbc>
 802625c:	680b      	ldr	r3, [r1, #0]
 802625e:	6825      	ldr	r5, [r4, #0]
 8026260:	1d18      	adds	r0, r3, #4
 8026262:	6008      	str	r0, [r1, #0]
 8026264:	0628      	lsls	r0, r5, #24
 8026266:	d501      	bpl.n	802626c <_printf_i+0xec>
 8026268:	681d      	ldr	r5, [r3, #0]
 802626a:	e002      	b.n	8026272 <_printf_i+0xf2>
 802626c:	0669      	lsls	r1, r5, #25
 802626e:	d5fb      	bpl.n	8026268 <_printf_i+0xe8>
 8026270:	881d      	ldrh	r5, [r3, #0]
 8026272:	4854      	ldr	r0, [pc, #336]	; (80263c4 <_printf_i+0x244>)
 8026274:	2f6f      	cmp	r7, #111	; 0x6f
 8026276:	bf0c      	ite	eq
 8026278:	2308      	moveq	r3, #8
 802627a:	230a      	movne	r3, #10
 802627c:	2100      	movs	r1, #0
 802627e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026282:	6866      	ldr	r6, [r4, #4]
 8026284:	60a6      	str	r6, [r4, #8]
 8026286:	2e00      	cmp	r6, #0
 8026288:	bfa2      	ittt	ge
 802628a:	6821      	ldrge	r1, [r4, #0]
 802628c:	f021 0104 	bicge.w	r1, r1, #4
 8026290:	6021      	strge	r1, [r4, #0]
 8026292:	b90d      	cbnz	r5, 8026298 <_printf_i+0x118>
 8026294:	2e00      	cmp	r6, #0
 8026296:	d04d      	beq.n	8026334 <_printf_i+0x1b4>
 8026298:	4616      	mov	r6, r2
 802629a:	fbb5 f1f3 	udiv	r1, r5, r3
 802629e:	fb03 5711 	mls	r7, r3, r1, r5
 80262a2:	5dc7      	ldrb	r7, [r0, r7]
 80262a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80262a8:	462f      	mov	r7, r5
 80262aa:	42bb      	cmp	r3, r7
 80262ac:	460d      	mov	r5, r1
 80262ae:	d9f4      	bls.n	802629a <_printf_i+0x11a>
 80262b0:	2b08      	cmp	r3, #8
 80262b2:	d10b      	bne.n	80262cc <_printf_i+0x14c>
 80262b4:	6823      	ldr	r3, [r4, #0]
 80262b6:	07df      	lsls	r7, r3, #31
 80262b8:	d508      	bpl.n	80262cc <_printf_i+0x14c>
 80262ba:	6923      	ldr	r3, [r4, #16]
 80262bc:	6861      	ldr	r1, [r4, #4]
 80262be:	4299      	cmp	r1, r3
 80262c0:	bfde      	ittt	le
 80262c2:	2330      	movle	r3, #48	; 0x30
 80262c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80262c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80262cc:	1b92      	subs	r2, r2, r6
 80262ce:	6122      	str	r2, [r4, #16]
 80262d0:	f8cd a000 	str.w	sl, [sp]
 80262d4:	464b      	mov	r3, r9
 80262d6:	aa03      	add	r2, sp, #12
 80262d8:	4621      	mov	r1, r4
 80262da:	4640      	mov	r0, r8
 80262dc:	f7ff fee2 	bl	80260a4 <_printf_common>
 80262e0:	3001      	adds	r0, #1
 80262e2:	d14c      	bne.n	802637e <_printf_i+0x1fe>
 80262e4:	f04f 30ff 	mov.w	r0, #4294967295
 80262e8:	b004      	add	sp, #16
 80262ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80262ee:	4835      	ldr	r0, [pc, #212]	; (80263c4 <_printf_i+0x244>)
 80262f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80262f4:	6823      	ldr	r3, [r4, #0]
 80262f6:	680e      	ldr	r6, [r1, #0]
 80262f8:	061f      	lsls	r7, r3, #24
 80262fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80262fe:	600e      	str	r6, [r1, #0]
 8026300:	d514      	bpl.n	802632c <_printf_i+0x1ac>
 8026302:	07d9      	lsls	r1, r3, #31
 8026304:	bf44      	itt	mi
 8026306:	f043 0320 	orrmi.w	r3, r3, #32
 802630a:	6023      	strmi	r3, [r4, #0]
 802630c:	b91d      	cbnz	r5, 8026316 <_printf_i+0x196>
 802630e:	6823      	ldr	r3, [r4, #0]
 8026310:	f023 0320 	bic.w	r3, r3, #32
 8026314:	6023      	str	r3, [r4, #0]
 8026316:	2310      	movs	r3, #16
 8026318:	e7b0      	b.n	802627c <_printf_i+0xfc>
 802631a:	6823      	ldr	r3, [r4, #0]
 802631c:	f043 0320 	orr.w	r3, r3, #32
 8026320:	6023      	str	r3, [r4, #0]
 8026322:	2378      	movs	r3, #120	; 0x78
 8026324:	4828      	ldr	r0, [pc, #160]	; (80263c8 <_printf_i+0x248>)
 8026326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802632a:	e7e3      	b.n	80262f4 <_printf_i+0x174>
 802632c:	065e      	lsls	r6, r3, #25
 802632e:	bf48      	it	mi
 8026330:	b2ad      	uxthmi	r5, r5
 8026332:	e7e6      	b.n	8026302 <_printf_i+0x182>
 8026334:	4616      	mov	r6, r2
 8026336:	e7bb      	b.n	80262b0 <_printf_i+0x130>
 8026338:	680b      	ldr	r3, [r1, #0]
 802633a:	6826      	ldr	r6, [r4, #0]
 802633c:	6960      	ldr	r0, [r4, #20]
 802633e:	1d1d      	adds	r5, r3, #4
 8026340:	600d      	str	r5, [r1, #0]
 8026342:	0635      	lsls	r5, r6, #24
 8026344:	681b      	ldr	r3, [r3, #0]
 8026346:	d501      	bpl.n	802634c <_printf_i+0x1cc>
 8026348:	6018      	str	r0, [r3, #0]
 802634a:	e002      	b.n	8026352 <_printf_i+0x1d2>
 802634c:	0671      	lsls	r1, r6, #25
 802634e:	d5fb      	bpl.n	8026348 <_printf_i+0x1c8>
 8026350:	8018      	strh	r0, [r3, #0]
 8026352:	2300      	movs	r3, #0
 8026354:	6123      	str	r3, [r4, #16]
 8026356:	4616      	mov	r6, r2
 8026358:	e7ba      	b.n	80262d0 <_printf_i+0x150>
 802635a:	680b      	ldr	r3, [r1, #0]
 802635c:	1d1a      	adds	r2, r3, #4
 802635e:	600a      	str	r2, [r1, #0]
 8026360:	681e      	ldr	r6, [r3, #0]
 8026362:	6862      	ldr	r2, [r4, #4]
 8026364:	2100      	movs	r1, #0
 8026366:	4630      	mov	r0, r6
 8026368:	f7d9 ffba 	bl	80002e0 <memchr>
 802636c:	b108      	cbz	r0, 8026372 <_printf_i+0x1f2>
 802636e:	1b80      	subs	r0, r0, r6
 8026370:	6060      	str	r0, [r4, #4]
 8026372:	6863      	ldr	r3, [r4, #4]
 8026374:	6123      	str	r3, [r4, #16]
 8026376:	2300      	movs	r3, #0
 8026378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802637c:	e7a8      	b.n	80262d0 <_printf_i+0x150>
 802637e:	6923      	ldr	r3, [r4, #16]
 8026380:	4632      	mov	r2, r6
 8026382:	4649      	mov	r1, r9
 8026384:	4640      	mov	r0, r8
 8026386:	47d0      	blx	sl
 8026388:	3001      	adds	r0, #1
 802638a:	d0ab      	beq.n	80262e4 <_printf_i+0x164>
 802638c:	6823      	ldr	r3, [r4, #0]
 802638e:	079b      	lsls	r3, r3, #30
 8026390:	d413      	bmi.n	80263ba <_printf_i+0x23a>
 8026392:	68e0      	ldr	r0, [r4, #12]
 8026394:	9b03      	ldr	r3, [sp, #12]
 8026396:	4298      	cmp	r0, r3
 8026398:	bfb8      	it	lt
 802639a:	4618      	movlt	r0, r3
 802639c:	e7a4      	b.n	80262e8 <_printf_i+0x168>
 802639e:	2301      	movs	r3, #1
 80263a0:	4632      	mov	r2, r6
 80263a2:	4649      	mov	r1, r9
 80263a4:	4640      	mov	r0, r8
 80263a6:	47d0      	blx	sl
 80263a8:	3001      	adds	r0, #1
 80263aa:	d09b      	beq.n	80262e4 <_printf_i+0x164>
 80263ac:	3501      	adds	r5, #1
 80263ae:	68e3      	ldr	r3, [r4, #12]
 80263b0:	9903      	ldr	r1, [sp, #12]
 80263b2:	1a5b      	subs	r3, r3, r1
 80263b4:	42ab      	cmp	r3, r5
 80263b6:	dcf2      	bgt.n	802639e <_printf_i+0x21e>
 80263b8:	e7eb      	b.n	8026392 <_printf_i+0x212>
 80263ba:	2500      	movs	r5, #0
 80263bc:	f104 0619 	add.w	r6, r4, #25
 80263c0:	e7f5      	b.n	80263ae <_printf_i+0x22e>
 80263c2:	bf00      	nop
 80263c4:	0802a929 	.word	0x0802a929
 80263c8:	0802a93a 	.word	0x0802a93a

080263cc <_sbrk_r>:
 80263cc:	b538      	push	{r3, r4, r5, lr}
 80263ce:	4d06      	ldr	r5, [pc, #24]	; (80263e8 <_sbrk_r+0x1c>)
 80263d0:	2300      	movs	r3, #0
 80263d2:	4604      	mov	r4, r0
 80263d4:	4608      	mov	r0, r1
 80263d6:	602b      	str	r3, [r5, #0]
 80263d8:	f7db f8da 	bl	8001590 <_sbrk>
 80263dc:	1c43      	adds	r3, r0, #1
 80263de:	d102      	bne.n	80263e6 <_sbrk_r+0x1a>
 80263e0:	682b      	ldr	r3, [r5, #0]
 80263e2:	b103      	cbz	r3, 80263e6 <_sbrk_r+0x1a>
 80263e4:	6023      	str	r3, [r4, #0]
 80263e6:	bd38      	pop	{r3, r4, r5, pc}
 80263e8:	2400b46c 	.word	0x2400b46c

080263ec <_raise_r>:
 80263ec:	291f      	cmp	r1, #31
 80263ee:	b538      	push	{r3, r4, r5, lr}
 80263f0:	4604      	mov	r4, r0
 80263f2:	460d      	mov	r5, r1
 80263f4:	d904      	bls.n	8026400 <_raise_r+0x14>
 80263f6:	2316      	movs	r3, #22
 80263f8:	6003      	str	r3, [r0, #0]
 80263fa:	f04f 30ff 	mov.w	r0, #4294967295
 80263fe:	bd38      	pop	{r3, r4, r5, pc}
 8026400:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026402:	b112      	cbz	r2, 802640a <_raise_r+0x1e>
 8026404:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026408:	b94b      	cbnz	r3, 802641e <_raise_r+0x32>
 802640a:	4620      	mov	r0, r4
 802640c:	f000 f830 	bl	8026470 <_getpid_r>
 8026410:	462a      	mov	r2, r5
 8026412:	4601      	mov	r1, r0
 8026414:	4620      	mov	r0, r4
 8026416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802641a:	f000 b817 	b.w	802644c <_kill_r>
 802641e:	2b01      	cmp	r3, #1
 8026420:	d00a      	beq.n	8026438 <_raise_r+0x4c>
 8026422:	1c59      	adds	r1, r3, #1
 8026424:	d103      	bne.n	802642e <_raise_r+0x42>
 8026426:	2316      	movs	r3, #22
 8026428:	6003      	str	r3, [r0, #0]
 802642a:	2001      	movs	r0, #1
 802642c:	e7e7      	b.n	80263fe <_raise_r+0x12>
 802642e:	2400      	movs	r4, #0
 8026430:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026434:	4628      	mov	r0, r5
 8026436:	4798      	blx	r3
 8026438:	2000      	movs	r0, #0
 802643a:	e7e0      	b.n	80263fe <_raise_r+0x12>

0802643c <raise>:
 802643c:	4b02      	ldr	r3, [pc, #8]	; (8026448 <raise+0xc>)
 802643e:	4601      	mov	r1, r0
 8026440:	6818      	ldr	r0, [r3, #0]
 8026442:	f7ff bfd3 	b.w	80263ec <_raise_r>
 8026446:	bf00      	nop
 8026448:	240000c4 	.word	0x240000c4

0802644c <_kill_r>:
 802644c:	b538      	push	{r3, r4, r5, lr}
 802644e:	4d07      	ldr	r5, [pc, #28]	; (802646c <_kill_r+0x20>)
 8026450:	2300      	movs	r3, #0
 8026452:	4604      	mov	r4, r0
 8026454:	4608      	mov	r0, r1
 8026456:	4611      	mov	r1, r2
 8026458:	602b      	str	r3, [r5, #0]
 802645a:	f7db f811 	bl	8001480 <_kill>
 802645e:	1c43      	adds	r3, r0, #1
 8026460:	d102      	bne.n	8026468 <_kill_r+0x1c>
 8026462:	682b      	ldr	r3, [r5, #0]
 8026464:	b103      	cbz	r3, 8026468 <_kill_r+0x1c>
 8026466:	6023      	str	r3, [r4, #0]
 8026468:	bd38      	pop	{r3, r4, r5, pc}
 802646a:	bf00      	nop
 802646c:	2400b46c 	.word	0x2400b46c

08026470 <_getpid_r>:
 8026470:	f7da bffe 	b.w	8001470 <_getpid>

08026474 <__swbuf_r>:
 8026474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026476:	460e      	mov	r6, r1
 8026478:	4614      	mov	r4, r2
 802647a:	4605      	mov	r5, r0
 802647c:	b118      	cbz	r0, 8026486 <__swbuf_r+0x12>
 802647e:	6983      	ldr	r3, [r0, #24]
 8026480:	b90b      	cbnz	r3, 8026486 <__swbuf_r+0x12>
 8026482:	f000 fa33 	bl	80268ec <__sinit>
 8026486:	4b21      	ldr	r3, [pc, #132]	; (802650c <__swbuf_r+0x98>)
 8026488:	429c      	cmp	r4, r3
 802648a:	d12b      	bne.n	80264e4 <__swbuf_r+0x70>
 802648c:	686c      	ldr	r4, [r5, #4]
 802648e:	69a3      	ldr	r3, [r4, #24]
 8026490:	60a3      	str	r3, [r4, #8]
 8026492:	89a3      	ldrh	r3, [r4, #12]
 8026494:	071a      	lsls	r2, r3, #28
 8026496:	d52f      	bpl.n	80264f8 <__swbuf_r+0x84>
 8026498:	6923      	ldr	r3, [r4, #16]
 802649a:	b36b      	cbz	r3, 80264f8 <__swbuf_r+0x84>
 802649c:	6923      	ldr	r3, [r4, #16]
 802649e:	6820      	ldr	r0, [r4, #0]
 80264a0:	1ac0      	subs	r0, r0, r3
 80264a2:	6963      	ldr	r3, [r4, #20]
 80264a4:	b2f6      	uxtb	r6, r6
 80264a6:	4283      	cmp	r3, r0
 80264a8:	4637      	mov	r7, r6
 80264aa:	dc04      	bgt.n	80264b6 <__swbuf_r+0x42>
 80264ac:	4621      	mov	r1, r4
 80264ae:	4628      	mov	r0, r5
 80264b0:	f000 f988 	bl	80267c4 <_fflush_r>
 80264b4:	bb30      	cbnz	r0, 8026504 <__swbuf_r+0x90>
 80264b6:	68a3      	ldr	r3, [r4, #8]
 80264b8:	3b01      	subs	r3, #1
 80264ba:	60a3      	str	r3, [r4, #8]
 80264bc:	6823      	ldr	r3, [r4, #0]
 80264be:	1c5a      	adds	r2, r3, #1
 80264c0:	6022      	str	r2, [r4, #0]
 80264c2:	701e      	strb	r6, [r3, #0]
 80264c4:	6963      	ldr	r3, [r4, #20]
 80264c6:	3001      	adds	r0, #1
 80264c8:	4283      	cmp	r3, r0
 80264ca:	d004      	beq.n	80264d6 <__swbuf_r+0x62>
 80264cc:	89a3      	ldrh	r3, [r4, #12]
 80264ce:	07db      	lsls	r3, r3, #31
 80264d0:	d506      	bpl.n	80264e0 <__swbuf_r+0x6c>
 80264d2:	2e0a      	cmp	r6, #10
 80264d4:	d104      	bne.n	80264e0 <__swbuf_r+0x6c>
 80264d6:	4621      	mov	r1, r4
 80264d8:	4628      	mov	r0, r5
 80264da:	f000 f973 	bl	80267c4 <_fflush_r>
 80264de:	b988      	cbnz	r0, 8026504 <__swbuf_r+0x90>
 80264e0:	4638      	mov	r0, r7
 80264e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80264e4:	4b0a      	ldr	r3, [pc, #40]	; (8026510 <__swbuf_r+0x9c>)
 80264e6:	429c      	cmp	r4, r3
 80264e8:	d101      	bne.n	80264ee <__swbuf_r+0x7a>
 80264ea:	68ac      	ldr	r4, [r5, #8]
 80264ec:	e7cf      	b.n	802648e <__swbuf_r+0x1a>
 80264ee:	4b09      	ldr	r3, [pc, #36]	; (8026514 <__swbuf_r+0xa0>)
 80264f0:	429c      	cmp	r4, r3
 80264f2:	bf08      	it	eq
 80264f4:	68ec      	ldreq	r4, [r5, #12]
 80264f6:	e7ca      	b.n	802648e <__swbuf_r+0x1a>
 80264f8:	4621      	mov	r1, r4
 80264fa:	4628      	mov	r0, r5
 80264fc:	f000 f80c 	bl	8026518 <__swsetup_r>
 8026500:	2800      	cmp	r0, #0
 8026502:	d0cb      	beq.n	802649c <__swbuf_r+0x28>
 8026504:	f04f 37ff 	mov.w	r7, #4294967295
 8026508:	e7ea      	b.n	80264e0 <__swbuf_r+0x6c>
 802650a:	bf00      	nop
 802650c:	0802a970 	.word	0x0802a970
 8026510:	0802a990 	.word	0x0802a990
 8026514:	0802a950 	.word	0x0802a950

08026518 <__swsetup_r>:
 8026518:	4b32      	ldr	r3, [pc, #200]	; (80265e4 <__swsetup_r+0xcc>)
 802651a:	b570      	push	{r4, r5, r6, lr}
 802651c:	681d      	ldr	r5, [r3, #0]
 802651e:	4606      	mov	r6, r0
 8026520:	460c      	mov	r4, r1
 8026522:	b125      	cbz	r5, 802652e <__swsetup_r+0x16>
 8026524:	69ab      	ldr	r3, [r5, #24]
 8026526:	b913      	cbnz	r3, 802652e <__swsetup_r+0x16>
 8026528:	4628      	mov	r0, r5
 802652a:	f000 f9df 	bl	80268ec <__sinit>
 802652e:	4b2e      	ldr	r3, [pc, #184]	; (80265e8 <__swsetup_r+0xd0>)
 8026530:	429c      	cmp	r4, r3
 8026532:	d10f      	bne.n	8026554 <__swsetup_r+0x3c>
 8026534:	686c      	ldr	r4, [r5, #4]
 8026536:	89a3      	ldrh	r3, [r4, #12]
 8026538:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802653c:	0719      	lsls	r1, r3, #28
 802653e:	d42c      	bmi.n	802659a <__swsetup_r+0x82>
 8026540:	06dd      	lsls	r5, r3, #27
 8026542:	d411      	bmi.n	8026568 <__swsetup_r+0x50>
 8026544:	2309      	movs	r3, #9
 8026546:	6033      	str	r3, [r6, #0]
 8026548:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802654c:	81a3      	strh	r3, [r4, #12]
 802654e:	f04f 30ff 	mov.w	r0, #4294967295
 8026552:	e03e      	b.n	80265d2 <__swsetup_r+0xba>
 8026554:	4b25      	ldr	r3, [pc, #148]	; (80265ec <__swsetup_r+0xd4>)
 8026556:	429c      	cmp	r4, r3
 8026558:	d101      	bne.n	802655e <__swsetup_r+0x46>
 802655a:	68ac      	ldr	r4, [r5, #8]
 802655c:	e7eb      	b.n	8026536 <__swsetup_r+0x1e>
 802655e:	4b24      	ldr	r3, [pc, #144]	; (80265f0 <__swsetup_r+0xd8>)
 8026560:	429c      	cmp	r4, r3
 8026562:	bf08      	it	eq
 8026564:	68ec      	ldreq	r4, [r5, #12]
 8026566:	e7e6      	b.n	8026536 <__swsetup_r+0x1e>
 8026568:	0758      	lsls	r0, r3, #29
 802656a:	d512      	bpl.n	8026592 <__swsetup_r+0x7a>
 802656c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802656e:	b141      	cbz	r1, 8026582 <__swsetup_r+0x6a>
 8026570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026574:	4299      	cmp	r1, r3
 8026576:	d002      	beq.n	802657e <__swsetup_r+0x66>
 8026578:	4630      	mov	r0, r6
 802657a:	f7ff fb8f 	bl	8025c9c <_free_r>
 802657e:	2300      	movs	r3, #0
 8026580:	6363      	str	r3, [r4, #52]	; 0x34
 8026582:	89a3      	ldrh	r3, [r4, #12]
 8026584:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026588:	81a3      	strh	r3, [r4, #12]
 802658a:	2300      	movs	r3, #0
 802658c:	6063      	str	r3, [r4, #4]
 802658e:	6923      	ldr	r3, [r4, #16]
 8026590:	6023      	str	r3, [r4, #0]
 8026592:	89a3      	ldrh	r3, [r4, #12]
 8026594:	f043 0308 	orr.w	r3, r3, #8
 8026598:	81a3      	strh	r3, [r4, #12]
 802659a:	6923      	ldr	r3, [r4, #16]
 802659c:	b94b      	cbnz	r3, 80265b2 <__swsetup_r+0x9a>
 802659e:	89a3      	ldrh	r3, [r4, #12]
 80265a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80265a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80265a8:	d003      	beq.n	80265b2 <__swsetup_r+0x9a>
 80265aa:	4621      	mov	r1, r4
 80265ac:	4630      	mov	r0, r6
 80265ae:	f000 fa63 	bl	8026a78 <__smakebuf_r>
 80265b2:	89a0      	ldrh	r0, [r4, #12]
 80265b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80265b8:	f010 0301 	ands.w	r3, r0, #1
 80265bc:	d00a      	beq.n	80265d4 <__swsetup_r+0xbc>
 80265be:	2300      	movs	r3, #0
 80265c0:	60a3      	str	r3, [r4, #8]
 80265c2:	6963      	ldr	r3, [r4, #20]
 80265c4:	425b      	negs	r3, r3
 80265c6:	61a3      	str	r3, [r4, #24]
 80265c8:	6923      	ldr	r3, [r4, #16]
 80265ca:	b943      	cbnz	r3, 80265de <__swsetup_r+0xc6>
 80265cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80265d0:	d1ba      	bne.n	8026548 <__swsetup_r+0x30>
 80265d2:	bd70      	pop	{r4, r5, r6, pc}
 80265d4:	0781      	lsls	r1, r0, #30
 80265d6:	bf58      	it	pl
 80265d8:	6963      	ldrpl	r3, [r4, #20]
 80265da:	60a3      	str	r3, [r4, #8]
 80265dc:	e7f4      	b.n	80265c8 <__swsetup_r+0xb0>
 80265de:	2000      	movs	r0, #0
 80265e0:	e7f7      	b.n	80265d2 <__swsetup_r+0xba>
 80265e2:	bf00      	nop
 80265e4:	240000c4 	.word	0x240000c4
 80265e8:	0802a970 	.word	0x0802a970
 80265ec:	0802a990 	.word	0x0802a990
 80265f0:	0802a950 	.word	0x0802a950

080265f4 <__register_exitproc>:
 80265f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80265f8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80266b4 <__register_exitproc+0xc0>
 80265fc:	4606      	mov	r6, r0
 80265fe:	f8d8 0000 	ldr.w	r0, [r8]
 8026602:	461f      	mov	r7, r3
 8026604:	460d      	mov	r5, r1
 8026606:	4691      	mov	r9, r2
 8026608:	f000 fa0e 	bl	8026a28 <__retarget_lock_acquire_recursive>
 802660c:	4b25      	ldr	r3, [pc, #148]	; (80266a4 <__register_exitproc+0xb0>)
 802660e:	681c      	ldr	r4, [r3, #0]
 8026610:	b934      	cbnz	r4, 8026620 <__register_exitproc+0x2c>
 8026612:	4c25      	ldr	r4, [pc, #148]	; (80266a8 <__register_exitproc+0xb4>)
 8026614:	601c      	str	r4, [r3, #0]
 8026616:	4b25      	ldr	r3, [pc, #148]	; (80266ac <__register_exitproc+0xb8>)
 8026618:	b113      	cbz	r3, 8026620 <__register_exitproc+0x2c>
 802661a:	681b      	ldr	r3, [r3, #0]
 802661c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026620:	6863      	ldr	r3, [r4, #4]
 8026622:	2b1f      	cmp	r3, #31
 8026624:	dd07      	ble.n	8026636 <__register_exitproc+0x42>
 8026626:	f8d8 0000 	ldr.w	r0, [r8]
 802662a:	f000 f9ff 	bl	8026a2c <__retarget_lock_release_recursive>
 802662e:	f04f 30ff 	mov.w	r0, #4294967295
 8026632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026636:	b34e      	cbz	r6, 802668c <__register_exitproc+0x98>
 8026638:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802663c:	b988      	cbnz	r0, 8026662 <__register_exitproc+0x6e>
 802663e:	4b1c      	ldr	r3, [pc, #112]	; (80266b0 <__register_exitproc+0xbc>)
 8026640:	b923      	cbnz	r3, 802664c <__register_exitproc+0x58>
 8026642:	f8d8 0000 	ldr.w	r0, [r8]
 8026646:	f000 f9f0 	bl	8026a2a <__retarget_lock_release>
 802664a:	e7f0      	b.n	802662e <__register_exitproc+0x3a>
 802664c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026650:	f7ff fafe 	bl	8025c50 <malloc>
 8026654:	2800      	cmp	r0, #0
 8026656:	d0f4      	beq.n	8026642 <__register_exitproc+0x4e>
 8026658:	2300      	movs	r3, #0
 802665a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802665e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026662:	6863      	ldr	r3, [r4, #4]
 8026664:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8026668:	2201      	movs	r2, #1
 802666a:	409a      	lsls	r2, r3
 802666c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026670:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026674:	4313      	orrs	r3, r2
 8026676:	2e02      	cmp	r6, #2
 8026678:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802667c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026680:	bf02      	ittt	eq
 8026682:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8026686:	431a      	orreq	r2, r3
 8026688:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802668c:	6863      	ldr	r3, [r4, #4]
 802668e:	f8d8 0000 	ldr.w	r0, [r8]
 8026692:	1c5a      	adds	r2, r3, #1
 8026694:	3302      	adds	r3, #2
 8026696:	6062      	str	r2, [r4, #4]
 8026698:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802669c:	f000 f9c6 	bl	8026a2c <__retarget_lock_release_recursive>
 80266a0:	2000      	movs	r0, #0
 80266a2:	e7c6      	b.n	8026632 <__register_exitproc+0x3e>
 80266a4:	2400b184 	.word	0x2400b184
 80266a8:	2400b0f8 	.word	0x2400b0f8
 80266ac:	0802a94c 	.word	0x0802a94c
 80266b0:	08025c51 	.word	0x08025c51
 80266b4:	24000128 	.word	0x24000128

080266b8 <__sflush_r>:
 80266b8:	898a      	ldrh	r2, [r1, #12]
 80266ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80266be:	4605      	mov	r5, r0
 80266c0:	0710      	lsls	r0, r2, #28
 80266c2:	460c      	mov	r4, r1
 80266c4:	d458      	bmi.n	8026778 <__sflush_r+0xc0>
 80266c6:	684b      	ldr	r3, [r1, #4]
 80266c8:	2b00      	cmp	r3, #0
 80266ca:	dc05      	bgt.n	80266d8 <__sflush_r+0x20>
 80266cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80266ce:	2b00      	cmp	r3, #0
 80266d0:	dc02      	bgt.n	80266d8 <__sflush_r+0x20>
 80266d2:	2000      	movs	r0, #0
 80266d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80266d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80266da:	2e00      	cmp	r6, #0
 80266dc:	d0f9      	beq.n	80266d2 <__sflush_r+0x1a>
 80266de:	2300      	movs	r3, #0
 80266e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80266e4:	682f      	ldr	r7, [r5, #0]
 80266e6:	602b      	str	r3, [r5, #0]
 80266e8:	d032      	beq.n	8026750 <__sflush_r+0x98>
 80266ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80266ec:	89a3      	ldrh	r3, [r4, #12]
 80266ee:	075a      	lsls	r2, r3, #29
 80266f0:	d505      	bpl.n	80266fe <__sflush_r+0x46>
 80266f2:	6863      	ldr	r3, [r4, #4]
 80266f4:	1ac0      	subs	r0, r0, r3
 80266f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80266f8:	b10b      	cbz	r3, 80266fe <__sflush_r+0x46>
 80266fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80266fc:	1ac0      	subs	r0, r0, r3
 80266fe:	2300      	movs	r3, #0
 8026700:	4602      	mov	r2, r0
 8026702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026704:	6a21      	ldr	r1, [r4, #32]
 8026706:	4628      	mov	r0, r5
 8026708:	47b0      	blx	r6
 802670a:	1c43      	adds	r3, r0, #1
 802670c:	89a3      	ldrh	r3, [r4, #12]
 802670e:	d106      	bne.n	802671e <__sflush_r+0x66>
 8026710:	6829      	ldr	r1, [r5, #0]
 8026712:	291d      	cmp	r1, #29
 8026714:	d82c      	bhi.n	8026770 <__sflush_r+0xb8>
 8026716:	4a2a      	ldr	r2, [pc, #168]	; (80267c0 <__sflush_r+0x108>)
 8026718:	40ca      	lsrs	r2, r1
 802671a:	07d6      	lsls	r6, r2, #31
 802671c:	d528      	bpl.n	8026770 <__sflush_r+0xb8>
 802671e:	2200      	movs	r2, #0
 8026720:	6062      	str	r2, [r4, #4]
 8026722:	04d9      	lsls	r1, r3, #19
 8026724:	6922      	ldr	r2, [r4, #16]
 8026726:	6022      	str	r2, [r4, #0]
 8026728:	d504      	bpl.n	8026734 <__sflush_r+0x7c>
 802672a:	1c42      	adds	r2, r0, #1
 802672c:	d101      	bne.n	8026732 <__sflush_r+0x7a>
 802672e:	682b      	ldr	r3, [r5, #0]
 8026730:	b903      	cbnz	r3, 8026734 <__sflush_r+0x7c>
 8026732:	6560      	str	r0, [r4, #84]	; 0x54
 8026734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026736:	602f      	str	r7, [r5, #0]
 8026738:	2900      	cmp	r1, #0
 802673a:	d0ca      	beq.n	80266d2 <__sflush_r+0x1a>
 802673c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026740:	4299      	cmp	r1, r3
 8026742:	d002      	beq.n	802674a <__sflush_r+0x92>
 8026744:	4628      	mov	r0, r5
 8026746:	f7ff faa9 	bl	8025c9c <_free_r>
 802674a:	2000      	movs	r0, #0
 802674c:	6360      	str	r0, [r4, #52]	; 0x34
 802674e:	e7c1      	b.n	80266d4 <__sflush_r+0x1c>
 8026750:	6a21      	ldr	r1, [r4, #32]
 8026752:	2301      	movs	r3, #1
 8026754:	4628      	mov	r0, r5
 8026756:	47b0      	blx	r6
 8026758:	1c41      	adds	r1, r0, #1
 802675a:	d1c7      	bne.n	80266ec <__sflush_r+0x34>
 802675c:	682b      	ldr	r3, [r5, #0]
 802675e:	2b00      	cmp	r3, #0
 8026760:	d0c4      	beq.n	80266ec <__sflush_r+0x34>
 8026762:	2b1d      	cmp	r3, #29
 8026764:	d001      	beq.n	802676a <__sflush_r+0xb2>
 8026766:	2b16      	cmp	r3, #22
 8026768:	d101      	bne.n	802676e <__sflush_r+0xb6>
 802676a:	602f      	str	r7, [r5, #0]
 802676c:	e7b1      	b.n	80266d2 <__sflush_r+0x1a>
 802676e:	89a3      	ldrh	r3, [r4, #12]
 8026770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026774:	81a3      	strh	r3, [r4, #12]
 8026776:	e7ad      	b.n	80266d4 <__sflush_r+0x1c>
 8026778:	690f      	ldr	r7, [r1, #16]
 802677a:	2f00      	cmp	r7, #0
 802677c:	d0a9      	beq.n	80266d2 <__sflush_r+0x1a>
 802677e:	0793      	lsls	r3, r2, #30
 8026780:	680e      	ldr	r6, [r1, #0]
 8026782:	bf08      	it	eq
 8026784:	694b      	ldreq	r3, [r1, #20]
 8026786:	600f      	str	r7, [r1, #0]
 8026788:	bf18      	it	ne
 802678a:	2300      	movne	r3, #0
 802678c:	eba6 0807 	sub.w	r8, r6, r7
 8026790:	608b      	str	r3, [r1, #8]
 8026792:	f1b8 0f00 	cmp.w	r8, #0
 8026796:	dd9c      	ble.n	80266d2 <__sflush_r+0x1a>
 8026798:	6a21      	ldr	r1, [r4, #32]
 802679a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802679c:	4643      	mov	r3, r8
 802679e:	463a      	mov	r2, r7
 80267a0:	4628      	mov	r0, r5
 80267a2:	47b0      	blx	r6
 80267a4:	2800      	cmp	r0, #0
 80267a6:	dc06      	bgt.n	80267b6 <__sflush_r+0xfe>
 80267a8:	89a3      	ldrh	r3, [r4, #12]
 80267aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80267ae:	81a3      	strh	r3, [r4, #12]
 80267b0:	f04f 30ff 	mov.w	r0, #4294967295
 80267b4:	e78e      	b.n	80266d4 <__sflush_r+0x1c>
 80267b6:	4407      	add	r7, r0
 80267b8:	eba8 0800 	sub.w	r8, r8, r0
 80267bc:	e7e9      	b.n	8026792 <__sflush_r+0xda>
 80267be:	bf00      	nop
 80267c0:	20400001 	.word	0x20400001

080267c4 <_fflush_r>:
 80267c4:	b538      	push	{r3, r4, r5, lr}
 80267c6:	690b      	ldr	r3, [r1, #16]
 80267c8:	4605      	mov	r5, r0
 80267ca:	460c      	mov	r4, r1
 80267cc:	b913      	cbnz	r3, 80267d4 <_fflush_r+0x10>
 80267ce:	2500      	movs	r5, #0
 80267d0:	4628      	mov	r0, r5
 80267d2:	bd38      	pop	{r3, r4, r5, pc}
 80267d4:	b118      	cbz	r0, 80267de <_fflush_r+0x1a>
 80267d6:	6983      	ldr	r3, [r0, #24]
 80267d8:	b90b      	cbnz	r3, 80267de <_fflush_r+0x1a>
 80267da:	f000 f887 	bl	80268ec <__sinit>
 80267de:	4b14      	ldr	r3, [pc, #80]	; (8026830 <_fflush_r+0x6c>)
 80267e0:	429c      	cmp	r4, r3
 80267e2:	d11b      	bne.n	802681c <_fflush_r+0x58>
 80267e4:	686c      	ldr	r4, [r5, #4]
 80267e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80267ea:	2b00      	cmp	r3, #0
 80267ec:	d0ef      	beq.n	80267ce <_fflush_r+0xa>
 80267ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80267f0:	07d0      	lsls	r0, r2, #31
 80267f2:	d404      	bmi.n	80267fe <_fflush_r+0x3a>
 80267f4:	0599      	lsls	r1, r3, #22
 80267f6:	d402      	bmi.n	80267fe <_fflush_r+0x3a>
 80267f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80267fa:	f000 f915 	bl	8026a28 <__retarget_lock_acquire_recursive>
 80267fe:	4628      	mov	r0, r5
 8026800:	4621      	mov	r1, r4
 8026802:	f7ff ff59 	bl	80266b8 <__sflush_r>
 8026806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026808:	07da      	lsls	r2, r3, #31
 802680a:	4605      	mov	r5, r0
 802680c:	d4e0      	bmi.n	80267d0 <_fflush_r+0xc>
 802680e:	89a3      	ldrh	r3, [r4, #12]
 8026810:	059b      	lsls	r3, r3, #22
 8026812:	d4dd      	bmi.n	80267d0 <_fflush_r+0xc>
 8026814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026816:	f000 f909 	bl	8026a2c <__retarget_lock_release_recursive>
 802681a:	e7d9      	b.n	80267d0 <_fflush_r+0xc>
 802681c:	4b05      	ldr	r3, [pc, #20]	; (8026834 <_fflush_r+0x70>)
 802681e:	429c      	cmp	r4, r3
 8026820:	d101      	bne.n	8026826 <_fflush_r+0x62>
 8026822:	68ac      	ldr	r4, [r5, #8]
 8026824:	e7df      	b.n	80267e6 <_fflush_r+0x22>
 8026826:	4b04      	ldr	r3, [pc, #16]	; (8026838 <_fflush_r+0x74>)
 8026828:	429c      	cmp	r4, r3
 802682a:	bf08      	it	eq
 802682c:	68ec      	ldreq	r4, [r5, #12]
 802682e:	e7da      	b.n	80267e6 <_fflush_r+0x22>
 8026830:	0802a970 	.word	0x0802a970
 8026834:	0802a990 	.word	0x0802a990
 8026838:	0802a950 	.word	0x0802a950

0802683c <std>:
 802683c:	2300      	movs	r3, #0
 802683e:	b510      	push	{r4, lr}
 8026840:	4604      	mov	r4, r0
 8026842:	e9c0 3300 	strd	r3, r3, [r0]
 8026846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802684a:	6083      	str	r3, [r0, #8]
 802684c:	8181      	strh	r1, [r0, #12]
 802684e:	6643      	str	r3, [r0, #100]	; 0x64
 8026850:	81c2      	strh	r2, [r0, #14]
 8026852:	6183      	str	r3, [r0, #24]
 8026854:	4619      	mov	r1, r3
 8026856:	2208      	movs	r2, #8
 8026858:	305c      	adds	r0, #92	; 0x5c
 802685a:	f7ff fa17 	bl	8025c8c <memset>
 802685e:	4b05      	ldr	r3, [pc, #20]	; (8026874 <std+0x38>)
 8026860:	6263      	str	r3, [r4, #36]	; 0x24
 8026862:	4b05      	ldr	r3, [pc, #20]	; (8026878 <std+0x3c>)
 8026864:	62a3      	str	r3, [r4, #40]	; 0x28
 8026866:	4b05      	ldr	r3, [pc, #20]	; (802687c <std+0x40>)
 8026868:	62e3      	str	r3, [r4, #44]	; 0x2c
 802686a:	4b05      	ldr	r3, [pc, #20]	; (8026880 <std+0x44>)
 802686c:	6224      	str	r4, [r4, #32]
 802686e:	6323      	str	r3, [r4, #48]	; 0x30
 8026870:	bd10      	pop	{r4, pc}
 8026872:	bf00      	nop
 8026874:	08026b11 	.word	0x08026b11
 8026878:	08026b33 	.word	0x08026b33
 802687c:	08026b6b 	.word	0x08026b6b
 8026880:	08026b8f 	.word	0x08026b8f

08026884 <_cleanup_r>:
 8026884:	4901      	ldr	r1, [pc, #4]	; (802688c <_cleanup_r+0x8>)
 8026886:	f000 b8af 	b.w	80269e8 <_fwalk_reent>
 802688a:	bf00      	nop
 802688c:	080267c5 	.word	0x080267c5

08026890 <__sfmoreglue>:
 8026890:	b570      	push	{r4, r5, r6, lr}
 8026892:	1e4a      	subs	r2, r1, #1
 8026894:	2568      	movs	r5, #104	; 0x68
 8026896:	4355      	muls	r5, r2
 8026898:	460e      	mov	r6, r1
 802689a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802689e:	f7ff fa4d 	bl	8025d3c <_malloc_r>
 80268a2:	4604      	mov	r4, r0
 80268a4:	b140      	cbz	r0, 80268b8 <__sfmoreglue+0x28>
 80268a6:	2100      	movs	r1, #0
 80268a8:	e9c0 1600 	strd	r1, r6, [r0]
 80268ac:	300c      	adds	r0, #12
 80268ae:	60a0      	str	r0, [r4, #8]
 80268b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80268b4:	f7ff f9ea 	bl	8025c8c <memset>
 80268b8:	4620      	mov	r0, r4
 80268ba:	bd70      	pop	{r4, r5, r6, pc}

080268bc <__sfp_lock_acquire>:
 80268bc:	4801      	ldr	r0, [pc, #4]	; (80268c4 <__sfp_lock_acquire+0x8>)
 80268be:	f000 b8b3 	b.w	8026a28 <__retarget_lock_acquire_recursive>
 80268c2:	bf00      	nop
 80268c4:	2400b468 	.word	0x2400b468

080268c8 <__sfp_lock_release>:
 80268c8:	4801      	ldr	r0, [pc, #4]	; (80268d0 <__sfp_lock_release+0x8>)
 80268ca:	f000 b8af 	b.w	8026a2c <__retarget_lock_release_recursive>
 80268ce:	bf00      	nop
 80268d0:	2400b468 	.word	0x2400b468

080268d4 <__sinit_lock_acquire>:
 80268d4:	4801      	ldr	r0, [pc, #4]	; (80268dc <__sinit_lock_acquire+0x8>)
 80268d6:	f000 b8a7 	b.w	8026a28 <__retarget_lock_acquire_recursive>
 80268da:	bf00      	nop
 80268dc:	2400b463 	.word	0x2400b463

080268e0 <__sinit_lock_release>:
 80268e0:	4801      	ldr	r0, [pc, #4]	; (80268e8 <__sinit_lock_release+0x8>)
 80268e2:	f000 b8a3 	b.w	8026a2c <__retarget_lock_release_recursive>
 80268e6:	bf00      	nop
 80268e8:	2400b463 	.word	0x2400b463

080268ec <__sinit>:
 80268ec:	b510      	push	{r4, lr}
 80268ee:	4604      	mov	r4, r0
 80268f0:	f7ff fff0 	bl	80268d4 <__sinit_lock_acquire>
 80268f4:	69a3      	ldr	r3, [r4, #24]
 80268f6:	b11b      	cbz	r3, 8026900 <__sinit+0x14>
 80268f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80268fc:	f7ff bff0 	b.w	80268e0 <__sinit_lock_release>
 8026900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026904:	6523      	str	r3, [r4, #80]	; 0x50
 8026906:	4b13      	ldr	r3, [pc, #76]	; (8026954 <__sinit+0x68>)
 8026908:	4a13      	ldr	r2, [pc, #76]	; (8026958 <__sinit+0x6c>)
 802690a:	681b      	ldr	r3, [r3, #0]
 802690c:	62a2      	str	r2, [r4, #40]	; 0x28
 802690e:	42a3      	cmp	r3, r4
 8026910:	bf04      	itt	eq
 8026912:	2301      	moveq	r3, #1
 8026914:	61a3      	streq	r3, [r4, #24]
 8026916:	4620      	mov	r0, r4
 8026918:	f000 f820 	bl	802695c <__sfp>
 802691c:	6060      	str	r0, [r4, #4]
 802691e:	4620      	mov	r0, r4
 8026920:	f000 f81c 	bl	802695c <__sfp>
 8026924:	60a0      	str	r0, [r4, #8]
 8026926:	4620      	mov	r0, r4
 8026928:	f000 f818 	bl	802695c <__sfp>
 802692c:	2200      	movs	r2, #0
 802692e:	60e0      	str	r0, [r4, #12]
 8026930:	2104      	movs	r1, #4
 8026932:	6860      	ldr	r0, [r4, #4]
 8026934:	f7ff ff82 	bl	802683c <std>
 8026938:	68a0      	ldr	r0, [r4, #8]
 802693a:	2201      	movs	r2, #1
 802693c:	2109      	movs	r1, #9
 802693e:	f7ff ff7d 	bl	802683c <std>
 8026942:	68e0      	ldr	r0, [r4, #12]
 8026944:	2202      	movs	r2, #2
 8026946:	2112      	movs	r1, #18
 8026948:	f7ff ff78 	bl	802683c <std>
 802694c:	2301      	movs	r3, #1
 802694e:	61a3      	str	r3, [r4, #24]
 8026950:	e7d2      	b.n	80268f8 <__sinit+0xc>
 8026952:	bf00      	nop
 8026954:	0802a914 	.word	0x0802a914
 8026958:	08026885 	.word	0x08026885

0802695c <__sfp>:
 802695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802695e:	4607      	mov	r7, r0
 8026960:	f7ff ffac 	bl	80268bc <__sfp_lock_acquire>
 8026964:	4b1e      	ldr	r3, [pc, #120]	; (80269e0 <__sfp+0x84>)
 8026966:	681e      	ldr	r6, [r3, #0]
 8026968:	69b3      	ldr	r3, [r6, #24]
 802696a:	b913      	cbnz	r3, 8026972 <__sfp+0x16>
 802696c:	4630      	mov	r0, r6
 802696e:	f7ff ffbd 	bl	80268ec <__sinit>
 8026972:	3648      	adds	r6, #72	; 0x48
 8026974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026978:	3b01      	subs	r3, #1
 802697a:	d503      	bpl.n	8026984 <__sfp+0x28>
 802697c:	6833      	ldr	r3, [r6, #0]
 802697e:	b30b      	cbz	r3, 80269c4 <__sfp+0x68>
 8026980:	6836      	ldr	r6, [r6, #0]
 8026982:	e7f7      	b.n	8026974 <__sfp+0x18>
 8026984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026988:	b9d5      	cbnz	r5, 80269c0 <__sfp+0x64>
 802698a:	4b16      	ldr	r3, [pc, #88]	; (80269e4 <__sfp+0x88>)
 802698c:	60e3      	str	r3, [r4, #12]
 802698e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026992:	6665      	str	r5, [r4, #100]	; 0x64
 8026994:	f000 f847 	bl	8026a26 <__retarget_lock_init_recursive>
 8026998:	f7ff ff96 	bl	80268c8 <__sfp_lock_release>
 802699c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80269a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80269a4:	6025      	str	r5, [r4, #0]
 80269a6:	61a5      	str	r5, [r4, #24]
 80269a8:	2208      	movs	r2, #8
 80269aa:	4629      	mov	r1, r5
 80269ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80269b0:	f7ff f96c 	bl	8025c8c <memset>
 80269b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80269b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80269bc:	4620      	mov	r0, r4
 80269be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80269c0:	3468      	adds	r4, #104	; 0x68
 80269c2:	e7d9      	b.n	8026978 <__sfp+0x1c>
 80269c4:	2104      	movs	r1, #4
 80269c6:	4638      	mov	r0, r7
 80269c8:	f7ff ff62 	bl	8026890 <__sfmoreglue>
 80269cc:	4604      	mov	r4, r0
 80269ce:	6030      	str	r0, [r6, #0]
 80269d0:	2800      	cmp	r0, #0
 80269d2:	d1d5      	bne.n	8026980 <__sfp+0x24>
 80269d4:	f7ff ff78 	bl	80268c8 <__sfp_lock_release>
 80269d8:	230c      	movs	r3, #12
 80269da:	603b      	str	r3, [r7, #0]
 80269dc:	e7ee      	b.n	80269bc <__sfp+0x60>
 80269de:	bf00      	nop
 80269e0:	0802a914 	.word	0x0802a914
 80269e4:	ffff0001 	.word	0xffff0001

080269e8 <_fwalk_reent>:
 80269e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80269ec:	4606      	mov	r6, r0
 80269ee:	4688      	mov	r8, r1
 80269f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80269f4:	2700      	movs	r7, #0
 80269f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80269fa:	f1b9 0901 	subs.w	r9, r9, #1
 80269fe:	d505      	bpl.n	8026a0c <_fwalk_reent+0x24>
 8026a00:	6824      	ldr	r4, [r4, #0]
 8026a02:	2c00      	cmp	r4, #0
 8026a04:	d1f7      	bne.n	80269f6 <_fwalk_reent+0xe>
 8026a06:	4638      	mov	r0, r7
 8026a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026a0c:	89ab      	ldrh	r3, [r5, #12]
 8026a0e:	2b01      	cmp	r3, #1
 8026a10:	d907      	bls.n	8026a22 <_fwalk_reent+0x3a>
 8026a12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026a16:	3301      	adds	r3, #1
 8026a18:	d003      	beq.n	8026a22 <_fwalk_reent+0x3a>
 8026a1a:	4629      	mov	r1, r5
 8026a1c:	4630      	mov	r0, r6
 8026a1e:	47c0      	blx	r8
 8026a20:	4307      	orrs	r7, r0
 8026a22:	3568      	adds	r5, #104	; 0x68
 8026a24:	e7e9      	b.n	80269fa <_fwalk_reent+0x12>

08026a26 <__retarget_lock_init_recursive>:
 8026a26:	4770      	bx	lr

08026a28 <__retarget_lock_acquire_recursive>:
 8026a28:	4770      	bx	lr

08026a2a <__retarget_lock_release>:
 8026a2a:	4770      	bx	lr

08026a2c <__retarget_lock_release_recursive>:
 8026a2c:	4770      	bx	lr

08026a2e <__swhatbuf_r>:
 8026a2e:	b570      	push	{r4, r5, r6, lr}
 8026a30:	460e      	mov	r6, r1
 8026a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026a36:	2900      	cmp	r1, #0
 8026a38:	b096      	sub	sp, #88	; 0x58
 8026a3a:	4614      	mov	r4, r2
 8026a3c:	461d      	mov	r5, r3
 8026a3e:	da07      	bge.n	8026a50 <__swhatbuf_r+0x22>
 8026a40:	2300      	movs	r3, #0
 8026a42:	602b      	str	r3, [r5, #0]
 8026a44:	89b3      	ldrh	r3, [r6, #12]
 8026a46:	061a      	lsls	r2, r3, #24
 8026a48:	d410      	bmi.n	8026a6c <__swhatbuf_r+0x3e>
 8026a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026a4e:	e00e      	b.n	8026a6e <__swhatbuf_r+0x40>
 8026a50:	466a      	mov	r2, sp
 8026a52:	f000 f8c3 	bl	8026bdc <_fstat_r>
 8026a56:	2800      	cmp	r0, #0
 8026a58:	dbf2      	blt.n	8026a40 <__swhatbuf_r+0x12>
 8026a5a:	9a01      	ldr	r2, [sp, #4]
 8026a5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026a60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026a64:	425a      	negs	r2, r3
 8026a66:	415a      	adcs	r2, r3
 8026a68:	602a      	str	r2, [r5, #0]
 8026a6a:	e7ee      	b.n	8026a4a <__swhatbuf_r+0x1c>
 8026a6c:	2340      	movs	r3, #64	; 0x40
 8026a6e:	2000      	movs	r0, #0
 8026a70:	6023      	str	r3, [r4, #0]
 8026a72:	b016      	add	sp, #88	; 0x58
 8026a74:	bd70      	pop	{r4, r5, r6, pc}
	...

08026a78 <__smakebuf_r>:
 8026a78:	898b      	ldrh	r3, [r1, #12]
 8026a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026a7c:	079d      	lsls	r5, r3, #30
 8026a7e:	4606      	mov	r6, r0
 8026a80:	460c      	mov	r4, r1
 8026a82:	d507      	bpl.n	8026a94 <__smakebuf_r+0x1c>
 8026a84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026a88:	6023      	str	r3, [r4, #0]
 8026a8a:	6123      	str	r3, [r4, #16]
 8026a8c:	2301      	movs	r3, #1
 8026a8e:	6163      	str	r3, [r4, #20]
 8026a90:	b002      	add	sp, #8
 8026a92:	bd70      	pop	{r4, r5, r6, pc}
 8026a94:	ab01      	add	r3, sp, #4
 8026a96:	466a      	mov	r2, sp
 8026a98:	f7ff ffc9 	bl	8026a2e <__swhatbuf_r>
 8026a9c:	9900      	ldr	r1, [sp, #0]
 8026a9e:	4605      	mov	r5, r0
 8026aa0:	4630      	mov	r0, r6
 8026aa2:	f7ff f94b 	bl	8025d3c <_malloc_r>
 8026aa6:	b948      	cbnz	r0, 8026abc <__smakebuf_r+0x44>
 8026aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026aac:	059a      	lsls	r2, r3, #22
 8026aae:	d4ef      	bmi.n	8026a90 <__smakebuf_r+0x18>
 8026ab0:	f023 0303 	bic.w	r3, r3, #3
 8026ab4:	f043 0302 	orr.w	r3, r3, #2
 8026ab8:	81a3      	strh	r3, [r4, #12]
 8026aba:	e7e3      	b.n	8026a84 <__smakebuf_r+0xc>
 8026abc:	4b0d      	ldr	r3, [pc, #52]	; (8026af4 <__smakebuf_r+0x7c>)
 8026abe:	62b3      	str	r3, [r6, #40]	; 0x28
 8026ac0:	89a3      	ldrh	r3, [r4, #12]
 8026ac2:	6020      	str	r0, [r4, #0]
 8026ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026ac8:	81a3      	strh	r3, [r4, #12]
 8026aca:	9b00      	ldr	r3, [sp, #0]
 8026acc:	6163      	str	r3, [r4, #20]
 8026ace:	9b01      	ldr	r3, [sp, #4]
 8026ad0:	6120      	str	r0, [r4, #16]
 8026ad2:	b15b      	cbz	r3, 8026aec <__smakebuf_r+0x74>
 8026ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026ad8:	4630      	mov	r0, r6
 8026ada:	f000 f891 	bl	8026c00 <_isatty_r>
 8026ade:	b128      	cbz	r0, 8026aec <__smakebuf_r+0x74>
 8026ae0:	89a3      	ldrh	r3, [r4, #12]
 8026ae2:	f023 0303 	bic.w	r3, r3, #3
 8026ae6:	f043 0301 	orr.w	r3, r3, #1
 8026aea:	81a3      	strh	r3, [r4, #12]
 8026aec:	89a0      	ldrh	r0, [r4, #12]
 8026aee:	4305      	orrs	r5, r0
 8026af0:	81a5      	strh	r5, [r4, #12]
 8026af2:	e7cd      	b.n	8026a90 <__smakebuf_r+0x18>
 8026af4:	08026885 	.word	0x08026885

08026af8 <__malloc_lock>:
 8026af8:	4801      	ldr	r0, [pc, #4]	; (8026b00 <__malloc_lock+0x8>)
 8026afa:	f7ff bf95 	b.w	8026a28 <__retarget_lock_acquire_recursive>
 8026afe:	bf00      	nop
 8026b00:	2400b464 	.word	0x2400b464

08026b04 <__malloc_unlock>:
 8026b04:	4801      	ldr	r0, [pc, #4]	; (8026b0c <__malloc_unlock+0x8>)
 8026b06:	f7ff bf91 	b.w	8026a2c <__retarget_lock_release_recursive>
 8026b0a:	bf00      	nop
 8026b0c:	2400b464 	.word	0x2400b464

08026b10 <__sread>:
 8026b10:	b510      	push	{r4, lr}
 8026b12:	460c      	mov	r4, r1
 8026b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b18:	f000 f894 	bl	8026c44 <_read_r>
 8026b1c:	2800      	cmp	r0, #0
 8026b1e:	bfab      	itete	ge
 8026b20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026b22:	89a3      	ldrhlt	r3, [r4, #12]
 8026b24:	181b      	addge	r3, r3, r0
 8026b26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026b2a:	bfac      	ite	ge
 8026b2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8026b2e:	81a3      	strhlt	r3, [r4, #12]
 8026b30:	bd10      	pop	{r4, pc}

08026b32 <__swrite>:
 8026b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b36:	461f      	mov	r7, r3
 8026b38:	898b      	ldrh	r3, [r1, #12]
 8026b3a:	05db      	lsls	r3, r3, #23
 8026b3c:	4605      	mov	r5, r0
 8026b3e:	460c      	mov	r4, r1
 8026b40:	4616      	mov	r6, r2
 8026b42:	d505      	bpl.n	8026b50 <__swrite+0x1e>
 8026b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b48:	2302      	movs	r3, #2
 8026b4a:	2200      	movs	r2, #0
 8026b4c:	f000 f868 	bl	8026c20 <_lseek_r>
 8026b50:	89a3      	ldrh	r3, [r4, #12]
 8026b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026b5a:	81a3      	strh	r3, [r4, #12]
 8026b5c:	4632      	mov	r2, r6
 8026b5e:	463b      	mov	r3, r7
 8026b60:	4628      	mov	r0, r5
 8026b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026b66:	f000 b817 	b.w	8026b98 <_write_r>

08026b6a <__sseek>:
 8026b6a:	b510      	push	{r4, lr}
 8026b6c:	460c      	mov	r4, r1
 8026b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b72:	f000 f855 	bl	8026c20 <_lseek_r>
 8026b76:	1c43      	adds	r3, r0, #1
 8026b78:	89a3      	ldrh	r3, [r4, #12]
 8026b7a:	bf15      	itete	ne
 8026b7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8026b7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026b82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026b86:	81a3      	strheq	r3, [r4, #12]
 8026b88:	bf18      	it	ne
 8026b8a:	81a3      	strhne	r3, [r4, #12]
 8026b8c:	bd10      	pop	{r4, pc}

08026b8e <__sclose>:
 8026b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b92:	f000 b813 	b.w	8026bbc <_close_r>
	...

08026b98 <_write_r>:
 8026b98:	b538      	push	{r3, r4, r5, lr}
 8026b9a:	4d07      	ldr	r5, [pc, #28]	; (8026bb8 <_write_r+0x20>)
 8026b9c:	4604      	mov	r4, r0
 8026b9e:	4608      	mov	r0, r1
 8026ba0:	4611      	mov	r1, r2
 8026ba2:	2200      	movs	r2, #0
 8026ba4:	602a      	str	r2, [r5, #0]
 8026ba6:	461a      	mov	r2, r3
 8026ba8:	f7da fca1 	bl	80014ee <_write>
 8026bac:	1c43      	adds	r3, r0, #1
 8026bae:	d102      	bne.n	8026bb6 <_write_r+0x1e>
 8026bb0:	682b      	ldr	r3, [r5, #0]
 8026bb2:	b103      	cbz	r3, 8026bb6 <_write_r+0x1e>
 8026bb4:	6023      	str	r3, [r4, #0]
 8026bb6:	bd38      	pop	{r3, r4, r5, pc}
 8026bb8:	2400b46c 	.word	0x2400b46c

08026bbc <_close_r>:
 8026bbc:	b538      	push	{r3, r4, r5, lr}
 8026bbe:	4d06      	ldr	r5, [pc, #24]	; (8026bd8 <_close_r+0x1c>)
 8026bc0:	2300      	movs	r3, #0
 8026bc2:	4604      	mov	r4, r0
 8026bc4:	4608      	mov	r0, r1
 8026bc6:	602b      	str	r3, [r5, #0]
 8026bc8:	f7da fcad 	bl	8001526 <_close>
 8026bcc:	1c43      	adds	r3, r0, #1
 8026bce:	d102      	bne.n	8026bd6 <_close_r+0x1a>
 8026bd0:	682b      	ldr	r3, [r5, #0]
 8026bd2:	b103      	cbz	r3, 8026bd6 <_close_r+0x1a>
 8026bd4:	6023      	str	r3, [r4, #0]
 8026bd6:	bd38      	pop	{r3, r4, r5, pc}
 8026bd8:	2400b46c 	.word	0x2400b46c

08026bdc <_fstat_r>:
 8026bdc:	b538      	push	{r3, r4, r5, lr}
 8026bde:	4d07      	ldr	r5, [pc, #28]	; (8026bfc <_fstat_r+0x20>)
 8026be0:	2300      	movs	r3, #0
 8026be2:	4604      	mov	r4, r0
 8026be4:	4608      	mov	r0, r1
 8026be6:	4611      	mov	r1, r2
 8026be8:	602b      	str	r3, [r5, #0]
 8026bea:	f7da fca8 	bl	800153e <_fstat>
 8026bee:	1c43      	adds	r3, r0, #1
 8026bf0:	d102      	bne.n	8026bf8 <_fstat_r+0x1c>
 8026bf2:	682b      	ldr	r3, [r5, #0]
 8026bf4:	b103      	cbz	r3, 8026bf8 <_fstat_r+0x1c>
 8026bf6:	6023      	str	r3, [r4, #0]
 8026bf8:	bd38      	pop	{r3, r4, r5, pc}
 8026bfa:	bf00      	nop
 8026bfc:	2400b46c 	.word	0x2400b46c

08026c00 <_isatty_r>:
 8026c00:	b538      	push	{r3, r4, r5, lr}
 8026c02:	4d06      	ldr	r5, [pc, #24]	; (8026c1c <_isatty_r+0x1c>)
 8026c04:	2300      	movs	r3, #0
 8026c06:	4604      	mov	r4, r0
 8026c08:	4608      	mov	r0, r1
 8026c0a:	602b      	str	r3, [r5, #0]
 8026c0c:	f7da fca7 	bl	800155e <_isatty>
 8026c10:	1c43      	adds	r3, r0, #1
 8026c12:	d102      	bne.n	8026c1a <_isatty_r+0x1a>
 8026c14:	682b      	ldr	r3, [r5, #0]
 8026c16:	b103      	cbz	r3, 8026c1a <_isatty_r+0x1a>
 8026c18:	6023      	str	r3, [r4, #0]
 8026c1a:	bd38      	pop	{r3, r4, r5, pc}
 8026c1c:	2400b46c 	.word	0x2400b46c

08026c20 <_lseek_r>:
 8026c20:	b538      	push	{r3, r4, r5, lr}
 8026c22:	4d07      	ldr	r5, [pc, #28]	; (8026c40 <_lseek_r+0x20>)
 8026c24:	4604      	mov	r4, r0
 8026c26:	4608      	mov	r0, r1
 8026c28:	4611      	mov	r1, r2
 8026c2a:	2200      	movs	r2, #0
 8026c2c:	602a      	str	r2, [r5, #0]
 8026c2e:	461a      	mov	r2, r3
 8026c30:	f7da fca0 	bl	8001574 <_lseek>
 8026c34:	1c43      	adds	r3, r0, #1
 8026c36:	d102      	bne.n	8026c3e <_lseek_r+0x1e>
 8026c38:	682b      	ldr	r3, [r5, #0]
 8026c3a:	b103      	cbz	r3, 8026c3e <_lseek_r+0x1e>
 8026c3c:	6023      	str	r3, [r4, #0]
 8026c3e:	bd38      	pop	{r3, r4, r5, pc}
 8026c40:	2400b46c 	.word	0x2400b46c

08026c44 <_read_r>:
 8026c44:	b538      	push	{r3, r4, r5, lr}
 8026c46:	4d07      	ldr	r5, [pc, #28]	; (8026c64 <_read_r+0x20>)
 8026c48:	4604      	mov	r4, r0
 8026c4a:	4608      	mov	r0, r1
 8026c4c:	4611      	mov	r1, r2
 8026c4e:	2200      	movs	r2, #0
 8026c50:	602a      	str	r2, [r5, #0]
 8026c52:	461a      	mov	r2, r3
 8026c54:	f7da fc2e 	bl	80014b4 <_read>
 8026c58:	1c43      	adds	r3, r0, #1
 8026c5a:	d102      	bne.n	8026c62 <_read_r+0x1e>
 8026c5c:	682b      	ldr	r3, [r5, #0]
 8026c5e:	b103      	cbz	r3, 8026c62 <_read_r+0x1e>
 8026c60:	6023      	str	r3, [r4, #0]
 8026c62:	bd38      	pop	{r3, r4, r5, pc}
 8026c64:	2400b46c 	.word	0x2400b46c

08026c68 <_init>:
 8026c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c6a:	bf00      	nop
 8026c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026c6e:	bc08      	pop	{r3}
 8026c70:	469e      	mov	lr, r3
 8026c72:	4770      	bx	lr

08026c74 <_fini>:
 8026c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c76:	bf00      	nop
 8026c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026c7a:	bc08      	pop	{r3}
 8026c7c:	469e      	mov	lr, r3
 8026c7e:	4770      	bx	lr
