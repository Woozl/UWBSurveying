
stm32h745i_disco_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ab5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e50  0802adfc  0802adfc  0003adfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000054  0802ec4c  0802ec4c  0003ec4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802eca0  0802eca0  00051008  2**0
                  CONTENTS
  5 .ARM          00000008  0802eca0  0802eca0  0003eca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802eca8  0802eca8  00051008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0802eca8  0802eca8  0003eca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802ecbc  0802ecbc  0003ecbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  24000000  0802ecc4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b55c  24000148  0802ee0c  00040148  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  2400b6a4  0802ee0c  0004b6a4  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00051008  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00000af4  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 00000514  90000af4  90000af4  00050af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00000000  90001008  90001008  00051036  2**0
                  CONTENTS
 16 .debug_info   000cc411  00000000  00000000  00051036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00014dbb  00000000  00000000  0011d447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004828  00000000  00000000  00132208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000042f8  00000000  00000000  00136a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0004ff37  00000000  00000000  0013ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00058b4c  00000000  00000000  0018ac5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001c64db  00000000  00000000  001e37ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  003a9c86  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000138b4  00000000  00000000  003a9d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802ade4 	.word	0x0802ade4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	0802ade4 	.word	0x0802ade4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000698:	4b9f      	ldr	r3, [pc, #636]	; (8000918 <dwt_initialise+0x290>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80006a0:	4b9d      	ldr	r3, [pc, #628]	; (8000918 <dwt_initialise+0x290>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2200      	movs	r2, #0
 80006a6:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80006a8:	4b9b      	ldr	r3, [pc, #620]	; (8000918 <dwt_initialise+0x290>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2200      	movs	r2, #0
 80006ae:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80006b0:	4b99      	ldr	r3, [pc, #612]	; (8000918 <dwt_initialise+0x290>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2200      	movs	r2, #0
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80006b8:	4b97      	ldr	r3, [pc, #604]	; (8000918 <dwt_initialise+0x290>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2200      	movs	r2, #0
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80006c0:	4b95      	ldr	r3, [pc, #596]	; (8000918 <dwt_initialise+0x290>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2200      	movs	r2, #0
 80006c6:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80006c8:	4b93      	ldr	r3, [pc, #588]	; (8000918 <dwt_initialise+0x290>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80006d0:	f000 f926 	bl	8000920 <dwt_readdevid>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a91      	ldr	r2, [pc, #580]	; (800091c <dwt_initialise+0x294>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d002      	beq.n	80006e2 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	e115      	b.n	800090e <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f003 0302 	and.w	r3, r3, #2
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d101      	bne.n	80006f0 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80006ec:	f000 fd6e 	bl	80011cc <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d004      	beq.n	8000704 <dwt_initialise+0x7c>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000700:	2b00      	cmp	r3, #0
 8000702:	d102      	bne.n	800070a <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000704:	2000      	movs	r0, #0
 8000706:	f000 fc6d 	bl	8000fe4 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800070a:	2204      	movs	r2, #4
 800070c:	2100      	movs	r1, #0
 800070e:	2024      	movs	r0, #36	; 0x24
 8000710:	f000 fbb1 	bl	8000e76 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	2b00      	cmp	r3, #0
 800071c:	d116      	bne.n	800074c <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800071e:	2004      	movs	r0, #4
 8000720:	f000 fbff 	bl	8000f22 <_dwt_otpread>
 8000724:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d01f      	beq.n	800076e <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800072e:	2202      	movs	r2, #2
 8000730:	2112      	movs	r1, #18
 8000732:	202d      	movs	r0, #45	; 0x2d
 8000734:	f000 fb9f 	bl	8000e76 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000738:	4b77      	ldr	r3, [pc, #476]	; (8000918 <dwt_initialise+0x290>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	8ada      	ldrh	r2, [r3, #22]
 800073e:	4b76      	ldr	r3, [pc, #472]	; (8000918 <dwt_initialise+0x290>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000746:	b292      	uxth	r2, r2
 8000748:	82da      	strh	r2, [r3, #22]
 800074a:	e010      	b.n	800076e <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800074c:	2130      	movs	r1, #48	; 0x30
 800074e:	2028      	movs	r0, #40	; 0x28
 8000750:	f000 fb4d 	bl	8000dee <dwt_read32bitoffsetreg>
 8000754:	4603      	mov	r3, r0
 8000756:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 800075a:	d008      	beq.n	800076e <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800075c:	4b6e      	ldr	r3, [pc, #440]	; (8000918 <dwt_initialise+0x290>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	8ada      	ldrh	r2, [r3, #22]
 8000762:	4b6d      	ldr	r3, [pc, #436]	; (8000918 <dwt_initialise+0x290>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800076a:	b292      	uxth	r2, r2
 800076c:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	2b00      	cmp	r3, #0
 8000776:	d009      	beq.n	800078c <dwt_initialise+0x104>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	2b00      	cmp	r3, #0
 8000780:	d011      	beq.n	80007a6 <dwt_initialise+0x11e>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00c      	beq.n	80007a6 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800078c:	201e      	movs	r0, #30
 800078e:	f000 fbc8 	bl	8000f22 <_dwt_otpread>
 8000792:	4603      	mov	r3, r0
 8000794:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8000796:	8afb      	ldrh	r3, [r7, #22]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	b29a      	uxth	r2, r3
 800079c:	4b5e      	ldr	r3, [pc, #376]	; (8000918 <dwt_initialise+0x290>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	72da      	strb	r2, [r3, #11]
 80007a4:	e003      	b.n	80007ae <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80007a6:	4b5c      	ldr	r3, [pc, #368]	; (8000918 <dwt_initialise+0x290>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2200      	movs	r2, #0
 80007ac:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10b      	bne.n	80007d0 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80007b8:	8afb      	ldrh	r3, [r7, #22]
 80007ba:	f003 031f 	and.w	r3, r3, #31
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80007c2:	2310      	movs	r3, #16
 80007c4:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80007c6:	8afb      	ldrh	r3, [r7, #22]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fd24 	bl	8001218 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d007      	beq.n	80007ea <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80007da:	4b4f      	ldr	r3, [pc, #316]	; (8000918 <dwt_initialise+0x290>)
 80007dc:	681c      	ldr	r4, [r3, #0]
 80007de:	2006      	movs	r0, #6
 80007e0:	f000 fb9f 	bl	8000f22 <_dwt_otpread>
 80007e4:	4603      	mov	r3, r0
 80007e6:	6023      	str	r3, [r4, #0]
 80007e8:	e003      	b.n	80007f2 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80007ea:	4b4b      	ldr	r3, [pc, #300]	; (8000918 <dwt_initialise+0x290>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f003 0320 	and.w	r3, r3, #32
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d007      	beq.n	800080c <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80007fc:	4b46      	ldr	r3, [pc, #280]	; (8000918 <dwt_initialise+0x290>)
 80007fe:	681c      	ldr	r4, [r3, #0]
 8000800:	2007      	movs	r0, #7
 8000802:	f000 fb8e 	bl	8000f22 <_dwt_otpread>
 8000806:	4603      	mov	r3, r0
 8000808:	6063      	str	r3, [r4, #4]
 800080a:	e003      	b.n	8000814 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 800080c:	4b42      	ldr	r3, [pc, #264]	; (8000918 <dwt_initialise+0x290>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	2b00      	cmp	r3, #0
 800081c:	d008      	beq.n	8000830 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800081e:	2008      	movs	r0, #8
 8000820:	f000 fb7f 	bl	8000f22 <_dwt_otpread>
 8000824:	4602      	mov	r2, r0
 8000826:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <dwt_initialise+0x290>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	721a      	strb	r2, [r3, #8]
 800082e:	e003      	b.n	8000838 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000830:	4b39      	ldr	r3, [pc, #228]	; (8000918 <dwt_initialise+0x290>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2200      	movs	r2, #0
 8000836:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	2b00      	cmp	r3, #0
 8000840:	d008      	beq.n	8000854 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8000842:	2009      	movs	r0, #9
 8000844:	f000 fb6d 	bl	8000f22 <_dwt_otpread>
 8000848:	4602      	mov	r2, r0
 800084a:	4b33      	ldr	r3, [pc, #204]	; (8000918 <dwt_initialise+0x290>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	725a      	strb	r2, [r3, #9]
 8000852:	e003      	b.n	800085c <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000854:	4b30      	ldr	r3, [pc, #192]	; (8000918 <dwt_initialise+0x290>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2200      	movs	r2, #0
 800085a:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	2b00      	cmp	r3, #0
 8000864:	d121      	bne.n	80008aa <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00b      	beq.n	8000888 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 8000870:	f000 fba4 	bl	8000fbc <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <dwt_initialise+0x290>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	8ada      	ldrh	r2, [r3, #22]
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <dwt_initialise+0x290>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000882:	b292      	uxth	r2, r2
 8000884:	82da      	strh	r2, [r3, #22]
 8000886:	e01e      	b.n	80008c6 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000888:	2105      	movs	r1, #5
 800088a:	2036      	movs	r0, #54	; 0x36
 800088c:	f000 fad6 	bl	8000e3c <dwt_read16bitoffsetreg>
 8000890:	4603      	mov	r3, r0
 8000892:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8000894:	89fb      	ldrh	r3, [r7, #14]
 8000896:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800089a:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800089c:	89fb      	ldrh	r3, [r7, #14]
 800089e:	461a      	mov	r2, r3
 80008a0:	2105      	movs	r1, #5
 80008a2:	2036      	movs	r0, #54	; 0x36
 80008a4:	f000 fafa 	bl	8000e9c <dwt_write16bitoffsetreg>
 80008a8:	e00d      	b.n	80008c6 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d108      	bne.n	80008c6 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <dwt_initialise+0x290>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	8ada      	ldrh	r2, [r3, #22]
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <dwt_initialise+0x290>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80008c2:	b292      	uxth	r2, r2
 80008c4:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 fb8c 	bl	8000fe4 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80008cc:	2200      	movs	r2, #0
 80008ce:	210a      	movs	r1, #10
 80008d0:	202c      	movs	r0, #44	; 0x2c
 80008d2:	f000 fad0 	bl	8000e76 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <dwt_initialise+0x290>)
 80008d8:	681c      	ldr	r4, [r3, #0]
 80008da:	2100      	movs	r1, #0
 80008dc:	2004      	movs	r0, #4
 80008de:	f000 fa86 	bl	8000dee <dwt_read32bitoffsetreg>
 80008e2:	4603      	mov	r3, r0
 80008e4:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <dwt_initialise+0x290>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	691b      	ldr	r3, [r3, #16]
 80008ec:	0c1b      	lsrs	r3, r3, #16
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <dwt_initialise+0x290>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f002 0203 	and.w	r2, r2, #3
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <dwt_initialise+0x290>)
 80008fe:	681c      	ldr	r4, [r3, #0]
 8000900:	2100      	movs	r1, #0
 8000902:	2008      	movs	r0, #8
 8000904:	f000 fa73 	bl	8000dee <dwt_read32bitoffsetreg>
 8000908:	4603      	mov	r3, r0
 800090a:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800090c:	2300      	movs	r3, #0

} // end dwt_initialise()
 800090e:	4618      	mov	r0, r3
 8000910:	371c      	adds	r7, #28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd90      	pop	{r4, r7, pc}
 8000916:	bf00      	nop
 8000918:	24000004 	.word	0x24000004
 800091c:	deca0130 	.word	0xdeca0130

08000920 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000924:	2100      	movs	r1, #0
 8000926:	2000      	movs	r0, #0
 8000928:	f000 fa61 	bl	8000dee <dwt_read32bitoffsetreg>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	795b      	ldrb	r3, [r3, #5]
 800094e:	461a      	mov	r2, r3
 8000950:	4ba1      	ldr	r3, [pc, #644]	; (8000bd8 <dwt_configure+0x2a4>)
 8000952:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000956:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	3b01      	subs	r3, #1
 800095e:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8000960:	7cfb      	ldrb	r3, [r7, #19]
 8000962:	2b04      	cmp	r3, #4
 8000964:	d002      	beq.n	800096c <dwt_configure+0x38>
 8000966:	7cfb      	ldrb	r3, [r7, #19]
 8000968:	2b07      	cmp	r3, #7
 800096a:	d101      	bne.n	8000970 <dwt_configure+0x3c>
 800096c:	2301      	movs	r3, #1
 800096e:	e000      	b.n	8000972 <dwt_configure+0x3e>
 8000970:	2300      	movs	r3, #0
 8000972:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	79db      	ldrb	r3, [r3, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d10b      	bne.n	8000994 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800097c:	4b97      	ldr	r3, [pc, #604]	; (8000bdc <dwt_configure+0x2a8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	691a      	ldr	r2, [r3, #16]
 8000982:	4b96      	ldr	r3, [pc, #600]	; (8000bdc <dwt_configure+0x2a8>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800098a:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800098c:	8abb      	ldrh	r3, [r7, #20]
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	82bb      	strh	r3, [r7, #20]
 8000992:	e007      	b.n	80009a4 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8000994:	4b91      	ldr	r3, [pc, #580]	; (8000bdc <dwt_configure+0x2a8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	691a      	ldr	r2, [r3, #16]
 800099a:	4b90      	ldr	r3, [pc, #576]	; (8000bdc <dwt_configure+0x2a8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80009a2:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80009a4:	4b8d      	ldr	r3, [pc, #564]	; (8000bdc <dwt_configure+0x2a8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	7a12      	ldrb	r2, [r2, #8]
 80009ac:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80009ae:	4b8b      	ldr	r3, [pc, #556]	; (8000bdc <dwt_configure+0x2a8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	691a      	ldr	r2, [r3, #16]
 80009b4:	4b89      	ldr	r3, [pc, #548]	; (8000bdc <dwt_configure+0x2a8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80009bc:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80009be:	4b87      	ldr	r3, [pc, #540]	; (8000bdc <dwt_configure+0x2a8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6919      	ldr	r1, [r3, #16]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7a1b      	ldrb	r3, [r3, #8]
 80009c8:	041b      	lsls	r3, r3, #16
 80009ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80009ce:	4b83      	ldr	r3, [pc, #524]	; (8000bdc <dwt_configure+0x2a8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	430a      	orrs	r2, r1
 80009d4:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80009d6:	4b81      	ldr	r3, [pc, #516]	; (8000bdc <dwt_configure+0x2a8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	691b      	ldr	r3, [r3, #16]
 80009dc:	461a      	mov	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	2004      	movs	r0, #4
 80009e2:	f000 fa77 	bl	8000ed4 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80009e6:	8abb      	ldrh	r3, [r7, #20]
 80009e8:	461a      	mov	r2, r3
 80009ea:	f642 0104 	movw	r1, #10244	; 0x2804
 80009ee:	202e      	movs	r0, #46	; 0x2e
 80009f0:	f000 fa54 	bl	8000e9c <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80009f4:	7cbb      	ldrb	r3, [r7, #18]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fac0 	bl	8000f7c <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80009fc:	7cfb      	ldrb	r3, [r7, #19]
 80009fe:	4a78      	ldr	r2, [pc, #480]	; (8000be0 <dwt_configure+0x2ac>)
 8000a00:	5cd3      	ldrb	r3, [r2, r3]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b77      	ldr	r3, [pc, #476]	; (8000be4 <dwt_configure+0x2b0>)
 8000a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	2107      	movs	r1, #7
 8000a0e:	202b      	movs	r0, #43	; 0x2b
 8000a10:	f000 fa60 	bl	8000ed4 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000a14:	7cfb      	ldrb	r3, [r7, #19]
 8000a16:	4a72      	ldr	r2, [pc, #456]	; (8000be0 <dwt_configure+0x2ac>)
 8000a18:	5cd3      	ldrb	r3, [r2, r3]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b72      	ldr	r3, [pc, #456]	; (8000be8 <dwt_configure+0x2b4>)
 8000a1e:	5c9b      	ldrb	r3, [r3, r2]
 8000a20:	461a      	mov	r2, r3
 8000a22:	210b      	movs	r1, #11
 8000a24:	202b      	movs	r0, #43	; 0x2b
 8000a26:	f000 fa26 	bl	8000e76 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000a2a:	7c7b      	ldrb	r3, [r7, #17]
 8000a2c:	4a6f      	ldr	r2, [pc, #444]	; (8000bec <dwt_configure+0x2b8>)
 8000a2e:	5cd3      	ldrb	r3, [r2, r3]
 8000a30:	461a      	mov	r2, r3
 8000a32:	210b      	movs	r1, #11
 8000a34:	2028      	movs	r0, #40	; 0x28
 8000a36:	f000 fa1e 	bl	8000e76 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000a3a:	7cfb      	ldrb	r3, [r7, #19]
 8000a3c:	4a68      	ldr	r2, [pc, #416]	; (8000be0 <dwt_configure+0x2ac>)
 8000a3e:	5cd3      	ldrb	r3, [r2, r3]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b6b      	ldr	r3, [pc, #428]	; (8000bf0 <dwt_configure+0x2bc>)
 8000a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	210c      	movs	r1, #12
 8000a4c:	2028      	movs	r0, #40	; 0x28
 8000a4e:	f000 fa41 	bl	8000ed4 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	79db      	ldrb	r3, [r3, #7]
 8000a56:	4618      	mov	r0, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	799b      	ldrb	r3, [r3, #6]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4a65      	ldr	r2, [pc, #404]	; (8000bf4 <dwt_configure+0x2c0>)
 8000a60:	0043      	lsls	r3, r0, #1
 8000a62:	440b      	add	r3, r1
 8000a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	2027      	movs	r0, #39	; 0x27
 8000a6e:	f000 fa15 	bl	8000e9c <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8000a72:	7cbb      	ldrb	r3, [r7, #18]
 8000a74:	4a60      	ldr	r2, [pc, #384]	; (8000bf8 <dwt_configure+0x2c4>)
 8000a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	2027      	movs	r0, #39	; 0x27
 8000a80:	f000 fa0c 	bl	8000e9c <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	79db      	ldrb	r3, [r3, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d105      	bne.n	8000a98 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000a8c:	2264      	movs	r2, #100	; 0x64
 8000a8e:	2106      	movs	r1, #6
 8000a90:	2027      	movs	r0, #39	; 0x27
 8000a92:	f000 fa03 	bl	8000e9c <dwt_write16bitoffsetreg>
 8000a96:	e018      	b.n	8000aca <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	789b      	ldrb	r3, [r3, #2]
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d10a      	bne.n	8000ab6 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8000aa0:	2210      	movs	r2, #16
 8000aa2:	2106      	movs	r1, #6
 8000aa4:	2027      	movs	r0, #39	; 0x27
 8000aa6:	f000 f9f9 	bl	8000e9c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8000aaa:	2210      	movs	r2, #16
 8000aac:	2126      	movs	r1, #38	; 0x26
 8000aae:	2027      	movs	r0, #39	; 0x27
 8000ab0:	f000 f9e1 	bl	8000e76 <dwt_write8bitoffsetreg>
 8000ab4:	e009      	b.n	8000aca <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	2106      	movs	r1, #6
 8000aba:	2027      	movs	r0, #39	; 0x27
 8000abc:	f000 f9ee 	bl	8000e9c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8000ac0:	2228      	movs	r2, #40	; 0x28
 8000ac2:	2126      	movs	r1, #38	; 0x26
 8000ac4:	2027      	movs	r0, #39	; 0x27
 8000ac6:	f000 f9d6 	bl	8000e76 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8000aca:	7cbb      	ldrb	r3, [r7, #18]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	78d2      	ldrb	r2, [r2, #3]
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4a4a      	ldr	r2, [pc, #296]	; (8000bfc <dwt_configure+0x2c8>)
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000adc:	461a      	mov	r2, r3
 8000ade:	2108      	movs	r1, #8
 8000ae0:	2027      	movs	r0, #39	; 0x27
 8000ae2:	f000 f9f7 	bl	8000ed4 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	895b      	ldrh	r3, [r3, #10]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d103      	bne.n	8000af6 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f241 0241 	movw	r2, #4161	; 0x1041
 8000af4:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	895b      	ldrh	r3, [r3, #10]
 8000afa:	461a      	mov	r2, r3
 8000afc:	2120      	movs	r1, #32
 8000afe:	2027      	movs	r0, #39	; 0x27
 8000b00:	f000 f9cc 	bl	8000e9c <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000b04:	4b3e      	ldr	r3, [pc, #248]	; (8000c00 <dwt_configure+0x2cc>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	210c      	movs	r1, #12
 8000b0c:	2023      	movs	r0, #35	; 0x23
 8000b0e:	f000 f9e1 	bl	8000ed4 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000b12:	7cbb      	ldrb	r3, [r7, #18]
 8000b14:	4a3a      	ldr	r2, [pc, #232]	; (8000c00 <dwt_configure+0x2cc>)
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	4413      	add	r3, r2
 8000b1a:	889b      	ldrh	r3, [r3, #4]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2104      	movs	r1, #4
 8000b20:	2023      	movs	r0, #35	; 0x23
 8000b22:	f000 f9bb 	bl	8000e9c <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	799b      	ldrb	r3, [r3, #6]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d00d      	beq.n	8000b4a <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	79db      	ldrb	r3, [r3, #7]
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <dwt_configure+0x2d0>)
 8000b36:	5c9b      	ldrb	r3, [r3, r2]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2021      	movs	r0, #33	; 0x21
 8000b3e:	f000 f99a 	bl	8000e76 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000b42:	2303      	movs	r3, #3
 8000b44:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000b46:	2301      	movs	r3, #1
 8000b48:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000b4a:	7cfb      	ldrb	r3, [r7, #19]
 8000b4c:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000b50:	7cfb      	ldrb	r3, [r7, #19]
 8000b52:	011b      	lsls	r3, r3, #4
 8000b54:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000b56:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	785b      	ldrb	r3, [r3, #1]
 8000b5c:	049b      	lsls	r3, r3, #18
 8000b5e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000b62:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000b64:	7dfb      	ldrb	r3, [r7, #23]
 8000b66:	051b      	lsls	r3, r3, #20
 8000b68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000b6c:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000b6e:	7dbb      	ldrb	r3, [r7, #22]
 8000b70:	045b      	lsls	r3, r3, #17
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000b76:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	791b      	ldrb	r3, [r3, #4]
 8000b7c:	059b      	lsls	r3, r3, #22
 8000b7e:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000b82:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	795b      	ldrb	r3, [r3, #5]
 8000b88:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	2100      	movs	r1, #0
 8000b92:	201f      	movs	r0, #31
 8000b94:	f000 f99e 	bl	8000ed4 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	789a      	ldrb	r2, [r3, #2]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	0419      	lsls	r1, r3, #16
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	79db      	ldrb	r3, [r3, #7]
 8000baa:	035a      	lsls	r2, r3, #13
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <dwt_configure+0x2a8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <dwt_configure+0x2a8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2008      	movs	r0, #8
 8000bc0:	f000 f988 	bl	8000ed4 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000bc4:	2242      	movs	r2, #66	; 0x42
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	200d      	movs	r0, #13
 8000bca:	f000 f954 	bl	8000e76 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	0802b90c 	.word	0x0802b90c
 8000bdc:	24000004 	.word	0x24000004
 8000be0:	0802b88c 	.word	0x0802b88c
 8000be4:	0802b8ac 	.word	0x0802b8ac
 8000be8:	0802b8c4 	.word	0x0802b8c4
 8000bec:	0802b8cc 	.word	0x0802b8cc
 8000bf0:	0802b894 	.word	0x0802b894
 8000bf4:	0802b8dc 	.word	0x0802b8dc
 8000bf8:	0802b8e8 	.word	0x0802b8e8
 8000bfc:	0802b8ec 	.word	0x0802b8ec
 8000c00:	0802b8d0 	.word	0x0802b8d0
 8000c04:	0802b8d8 	.word	0x0802b8d8

08000c08 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	80fb      	strh	r3, [r7, #6]
 8000c14:	4613      	mov	r3, r2
 8000c16:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000c18:	88ba      	ldrh	r2, [r7, #4]
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c22:	dc09      	bgt.n	8000c38 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	3b02      	subs	r3, #2
 8000c28:	461a      	mov	r2, r3
 8000c2a:	88b9      	ldrh	r1, [r7, #4]
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2009      	movs	r0, #9
 8000c30:	f000 f828 	bl	8000c84 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000c34:	2300      	movs	r3, #0
 8000c36:	e001      	b.n	8000c3c <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	603a      	str	r2, [r7, #0]
 8000c4e:	80fb      	strh	r3, [r7, #6]
 8000c50:	460b      	mov	r3, r1
 8000c52:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <dwt_writetxfctrl+0x3c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68da      	ldr	r2, [r3, #12]
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	88bb      	ldrh	r3, [r7, #4]
 8000c60:	059b      	lsls	r3, r3, #22
 8000c62:	431a      	orrs	r2, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	03db      	lsls	r3, r3, #15
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2008      	movs	r0, #8
 8000c72:	f000 f92f 	bl	8000ed4 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	24000004 	.word	0x24000004

08000c84 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60ba      	str	r2, [r7, #8]
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4603      	mov	r3, r0
 8000c90:	81fb      	strh	r3, [r7, #14]
 8000c92:	460b      	mov	r3, r1
 8000c94:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000c9a:	89bb      	ldrh	r3, [r7, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10d      	bne.n	8000cbc <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000ca0:	89fb      	ldrh	r3, [r7, #14]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	1c59      	adds	r1, r3, #1
 8000ca8:	6179      	str	r1, [r7, #20]
 8000caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	f107 0118 	add.w	r1, r7, #24
 8000cb4:	440b      	add	r3, r1
 8000cb6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000cba:	e033      	b.n	8000d24 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000cbc:	89fb      	ldrh	r3, [r7, #14]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	1c59      	adds	r1, r3, #1
 8000cc4:	6179      	str	r1, [r7, #20]
 8000cc6:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	f107 0118 	add.w	r1, r7, #24
 8000cd0:	440b      	add	r3, r1
 8000cd2:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000cd6:	89bb      	ldrh	r3, [r7, #12]
 8000cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cda:	d80a      	bhi.n	8000cf2 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	617a      	str	r2, [r7, #20]
 8000ce2:	89ba      	ldrh	r2, [r7, #12]
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	f107 0118 	add.w	r1, r7, #24
 8000cea:	440b      	add	r3, r1
 8000cec:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000cf0:	e018      	b.n	8000d24 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000cf2:	89bb      	ldrh	r3, [r7, #12]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	1c59      	adds	r1, r3, #1
 8000cfa:	6179      	str	r1, [r7, #20]
 8000cfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	f107 0118 	add.w	r1, r7, #24
 8000d06:	440b      	add	r3, r1
 8000d08:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000d0c:	89bb      	ldrh	r3, [r7, #12]
 8000d0e:	09db      	lsrs	r3, r3, #7
 8000d10:	b299      	uxth	r1, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	617a      	str	r2, [r7, #20]
 8000d18:	b2ca      	uxtb	r2, r1
 8000d1a:	f107 0118 	add.w	r1, r7, #24
 8000d1e:	440b      	add	r3, r1
 8000d20:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	b298      	uxth	r0, r3
 8000d28:	f107 0110 	add.w	r1, r7, #16
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f000 fab4 	bl	800129c <writetospi>
} // end dwt_writetodevice()
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60ba      	str	r2, [r7, #8]
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4603      	mov	r3, r0
 8000d48:	81fb      	strh	r3, [r7, #14]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000d52:	89bb      	ldrh	r3, [r7, #12]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10a      	bne.n	8000d6e <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	617a      	str	r2, [r7, #20]
 8000d5e:	89fa      	ldrh	r2, [r7, #14]
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	f107 0118 	add.w	r1, r7, #24
 8000d66:	440b      	add	r3, r1
 8000d68:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000d6c:	e033      	b.n	8000dd6 <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	1c59      	adds	r1, r3, #1
 8000d76:	6179      	str	r1, [r7, #20]
 8000d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	f107 0118 	add.w	r1, r7, #24
 8000d82:	440b      	add	r3, r1
 8000d84:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000d88:	89bb      	ldrh	r3, [r7, #12]
 8000d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d8c:	d80a      	bhi.n	8000da4 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	617a      	str	r2, [r7, #20]
 8000d94:	89ba      	ldrh	r2, [r7, #12]
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	f107 0118 	add.w	r1, r7, #24
 8000d9c:	440b      	add	r3, r1
 8000d9e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000da2:	e018      	b.n	8000dd6 <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000da4:	89bb      	ldrh	r3, [r7, #12]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	1c59      	adds	r1, r3, #1
 8000dac:	6179      	str	r1, [r7, #20]
 8000dae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	f107 0118 	add.w	r1, r7, #24
 8000db8:	440b      	add	r3, r1
 8000dba:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000dbe:	89bb      	ldrh	r3, [r7, #12]
 8000dc0:	09db      	lsrs	r3, r3, #7
 8000dc2:	b299      	uxth	r1, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	617a      	str	r2, [r7, #20]
 8000dca:	b2ca      	uxtb	r2, r1
 8000dcc:	f107 0118 	add.w	r1, r7, #24
 8000dd0:	440b      	add	r3, r1
 8000dd2:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	b298      	uxth	r0, r3
 8000dda:	f107 0110 	add.w	r1, r7, #16
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	f000 fa8f 	bl	8001304 <readfromspi>
} // end dwt_readfromdevice()
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	b298      	uxth	r0, r3
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b299      	uxth	r1, r3
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2204      	movs	r2, #4
 8000e0a:	f7ff ff97 	bl	8000d3c <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000e0e:	2303      	movs	r3, #3
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	e00b      	b.n	8000e2c <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	440a      	add	r2, r1
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	daf0      	bge.n	8000e14 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000e32:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000e46:	2300      	movs	r3, #0
 8000e48:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	b298      	uxth	r0, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b299      	uxth	r1, r3
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	2202      	movs	r2, #2
 8000e58:	f7ff ff70 	bl	8000d3c <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000e5c:	7b7b      	ldrb	r3, [r7, #13]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	7b3b      	ldrb	r3, [r7, #12]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4413      	add	r3, r2
 8000e6a:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000e6c:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	b298      	uxth	r0, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	b299      	uxth	r1, r3
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f7ff fef8 	bl	8000c84 <dwt_writetodevice>
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	b298      	uxth	r0, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	b299      	uxth	r1, r3
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f7ff fedc 	bl	8000c84 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e00d      	b.n	8000f02 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	b2d9      	uxtb	r1, r3
 8000eea:	f107 0210 	add.w	r2, r7, #16
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	460a      	mov	r2, r1
 8000ef4:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	ddee      	ble.n	8000ee6 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	b298      	uxth	r0, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	b299      	uxth	r1, r3
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	2204      	movs	r2, #4
 8000f16:	f7ff feb5 	bl	8000c84 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2104      	movs	r1, #4
 8000f32:	202d      	movs	r0, #45	; 0x2d
 8000f34:	f7ff ffb2 	bl	8000e9c <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000f38:	2203      	movs	r2, #3
 8000f3a:	2106      	movs	r1, #6
 8000f3c:	202d      	movs	r0, #45	; 0x2d
 8000f3e:	f7ff ff9a 	bl	8000e76 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000f42:	2200      	movs	r2, #0
 8000f44:	2106      	movs	r1, #6
 8000f46:	202d      	movs	r0, #45	; 0x2d
 8000f48:	f7ff ff95 	bl	8000e76 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000f4c:	210a      	movs	r1, #10
 8000f4e:	202d      	movs	r0, #45	; 0x2d
 8000f50:	f7ff ff4d 	bl	8000dee <dwt_read32bitoffsetreg>
 8000f54:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000f64:	2200      	movs	r2, #0
 8000f66:	2102      	movs	r1, #2
 8000f68:	202c      	movs	r0, #44	; 0x2c
 8000f6a:	f7ff ff84 	bl	8000e76 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000f6e:	2202      	movs	r2, #2
 8000f70:	2102      	movs	r1, #2
 8000f72:	202c      	movs	r0, #44	; 0x2c
 8000f74:	f7ff ff7f 	bl	8000e76 <dwt_write8bitoffsetreg>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000f84:	226d      	movs	r2, #109	; 0x6d
 8000f86:	f640 0106 	movw	r1, #2054	; 0x806
 8000f8a:	202e      	movs	r0, #46	; 0x2e
 8000f8c:	f7ff ff73 	bl	8000e76 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000f96:	f240 6207 	movw	r2, #1543	; 0x607
 8000f9a:	f641 0106 	movw	r1, #6150	; 0x1806
 8000f9e:	202e      	movs	r0, #46	; 0x2e
 8000fa0:	f7ff ff7c 	bl	8000e9c <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000fa4:	e006      	b.n	8000fb4 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000fa6:	f241 6207 	movw	r2, #5639	; 0x1607
 8000faa:	f641 0106 	movw	r1, #6150	; 0x1806
 8000fae:	202e      	movs	r0, #46	; 0x2e
 8000fb0:	f7ff ff74 	bl	8000e9c <dwt_write16bitoffsetreg>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000fc0:	200e      	movs	r0, #14
 8000fc2:	f000 f80f 	bl	8000fe4 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000fc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fca:	2106      	movs	r1, #6
 8000fcc:	202d      	movs	r0, #45	; 0x2d
 8000fce:	f7ff ff65 	bl	8000e9c <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 f956 	bl	8001284 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f000 f803 	bl	8000fe4 <_dwt_enableclocks>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2036      	movs	r0, #54	; 0x36
 8000ff6:	f7ff fea1 	bl	8000d3c <dwt_readfromdevice>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0e      	cmp	r3, #14
 8000ffe:	d876      	bhi.n	80010ee <_dwt_enableclocks+0x10a>
 8001000:	a201      	add	r2, pc, #4	; (adr r2, 8001008 <_dwt_enableclocks+0x24>)
 8001002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001006:	bf00      	nop
 8001008:	08001055 	.word	0x08001055
 800100c:	08001045 	.word	0x08001045
 8001010:	0800106b 	.word	0x0800106b
 8001014:	080010ef 	.word	0x080010ef
 8001018:	080010ef 	.word	0x080010ef
 800101c:	080010ef 	.word	0x080010ef
 8001020:	080010ef 	.word	0x080010ef
 8001024:	08001081 	.word	0x08001081
 8001028:	080010a1 	.word	0x080010a1
 800102c:	080010ef 	.word	0x080010ef
 8001030:	080010ef 	.word	0x080010ef
 8001034:	080010b7 	.word	0x080010b7
 8001038:	080010c3 	.word	0x080010c3
 800103c:	080010cf 	.word	0x080010cf
 8001040:	080010e5 	.word	0x080010e5
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8001044:	2300      	movs	r3, #0
 8001046:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	f023 0301 	bic.w	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001052:	e04d      	b.n	80010f0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	b25b      	sxtb	r3, r3
 8001058:	f023 0303 	bic.w	r3, r3, #3
 800105c:	b25b      	sxtb	r3, r3
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	b25b      	sxtb	r3, r3
 8001064:	b2db      	uxtb	r3, r3
 8001066:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001068:	e042      	b.n	80010f0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	b25b      	sxtb	r3, r3
 800106e:	f023 0303 	bic.w	r3, r3, #3
 8001072:	b25b      	sxtb	r3, r3
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	b25b      	sxtb	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	733b      	strb	r3, [r7, #12]
        }
        break;
 800107e:	e037      	b.n	80010f0 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8001080:	7b3b      	ldrb	r3, [r7, #12]
 8001082:	b25b      	sxtb	r3, r3
 8001084:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001088:	b25b      	sxtb	r3, r3
 800108a:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 800108e:	b25b      	sxtb	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8001094:	7b7b      	ldrb	r3, [r7, #13]
 8001096:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800109a:	b2db      	uxtb	r3, r3
 800109c:	737b      	strb	r3, [r7, #13]
        }
        break;
 800109e:	e027      	b.n	80010f0 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 80010aa:	7b7b      	ldrb	r3, [r7, #13]
 80010ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	737b      	strb	r3, [r7, #13]
        }
        break;
 80010b4:	e01c      	b.n	80010f0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 80010b6:	7b7b      	ldrb	r3, [r7, #13]
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	737b      	strb	r3, [r7, #13]
        }
        break;
 80010c0:	e016      	b.n	80010f0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	f023 0302 	bic.w	r3, r3, #2
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	737b      	strb	r3, [r7, #13]
        }
        break;
 80010cc:	e010      	b.n	80010f0 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 80010ce:	7b3b      	ldrb	r3, [r7, #12]
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	f043 0320 	orr.w	r3, r3, #32
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	733b      	strb	r3, [r7, #12]
        }
        break;
 80010e2:	e005      	b.n	80010f0 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 80010e4:	2301      	movs	r3, #1
 80010e6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 80010e8:	2303      	movs	r3, #3
 80010ea:	737b      	strb	r3, [r7, #13]
        }
        break;
 80010ec:	e000      	b.n	80010f0 <_dwt_enableclocks+0x10c>
        default:
        break;
 80010ee:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2201      	movs	r2, #1
 80010f6:	2100      	movs	r1, #0
 80010f8:	2036      	movs	r0, #54	; 0x36
 80010fa:	f7ff fdc3 	bl	8000c84 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	3301      	adds	r3, #1
 8001104:	2201      	movs	r2, #1
 8001106:	2101      	movs	r1, #1
 8001108:	2036      	movs	r0, #54	; 0x36
 800110a:	f7ff fdbb 	bl	8000c84 <dwt_writetodevice>

} // end _dwt_enableclocks()
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop

08001118 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff ff61 	bl	8000fe4 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001122:	2200      	movs	r2, #0
 8001124:	2104      	movs	r1, #4
 8001126:	2036      	movs	r0, #54	; 0x36
 8001128:	f7ff feb8 	bl	8000e9c <dwt_write16bitoffsetreg>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800113e:	2300      	movs	r3, #0
 8001140:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001142:	2300      	movs	r3, #0
 8001144:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <dwt_starttx+0x98>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2201      	movs	r2, #1
 800115a:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d020      	beq.n	80011a8 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8001166:	7afb      	ldrb	r3, [r7, #11]
 8001168:	f043 0306 	orr.w	r3, r3, #6
 800116c:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	461a      	mov	r2, r3
 8001172:	2100      	movs	r1, #0
 8001174:	200d      	movs	r0, #13
 8001176:	f7ff fe7e 	bl	8000e76 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800117a:	2103      	movs	r1, #3
 800117c:	200f      	movs	r0, #15
 800117e:	f7ff fe5d 	bl	8000e3c <dwt_read16bitoffsetreg>
 8001182:	4603      	mov	r3, r0
 8001184:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8001186:	893b      	ldrh	r3, [r7, #8]
 8001188:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	e012      	b.n	80011bc <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8001196:	2240      	movs	r2, #64	; 0x40
 8001198:	2100      	movs	r1, #0
 800119a:	200d      	movs	r0, #13
 800119c:	f7ff fe6b 	bl	8000e76 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	e009      	b.n	80011bc <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 80011a8:	7afb      	ldrb	r3, [r7, #11]
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80011b0:	7afb      	ldrb	r3, [r7, #11]
 80011b2:	461a      	mov	r2, r3
 80011b4:	2100      	movs	r1, #0
 80011b6:	200d      	movs	r0, #13
 80011b8:	f7ff fe5d 	bl	8000e76 <dwt_write8bitoffsetreg>
    }

    return retval;
 80011bc:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	24000004 	.word	0x24000004

080011cc <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80011d0:	f7ff ffa2 	bl	8001118 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	202c      	movs	r0, #44	; 0x2c
 80011da:	f7ff fe5f 	bl	8000e9c <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 80011de:	2200      	movs	r2, #0
 80011e0:	2106      	movs	r1, #6
 80011e2:	202c      	movs	r0, #44	; 0x2c
 80011e4:	f7ff fe47 	bl	8000e76 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 80011e8:	f7ff feba 	bl	8000f60 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2103      	movs	r1, #3
 80011f0:	2036      	movs	r0, #54	; 0x36
 80011f2:	f7ff fe40 	bl	8000e76 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f000 f844 	bl	8001284 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80011fc:	22f0      	movs	r2, #240	; 0xf0
 80011fe:	2103      	movs	r1, #3
 8001200:	2036      	movs	r0, #54	; 0x36
 8001202:	f7ff fe38 	bl	8000e76 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001206:	4b03      	ldr	r3, [pc, #12]	; (8001214 <dwt_softreset+0x48>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2200      	movs	r2, #0
 800120c:	755a      	strb	r2, [r3, #21]
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	24000004 	.word	0x24000004

08001218 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	f003 031f 	and.w	r3, r3, #31
 800122a:	b25b      	sxtb	r3, r3
 800122c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001230:	b25b      	sxtb	r3, r3
 8001232:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	461a      	mov	r2, r3
 8001238:	210e      	movs	r1, #14
 800123a:	202b      	movs	r0, #43	; 0x2b
 800123c:	f7ff fe1b 	bl	8000e76 <dwt_write8bitoffsetreg>
}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800124e:	f000 f9bb 	bl	80015c8 <port_GetEXT_IRQStatus>
 8001252:	4603      	mov	r3, r0
 8001254:	607b      	str	r3, [r7, #4]

	if(s) {
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800125c:	f000 f9a6 	bl	80015ac <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001260:	687b      	ldr	r3, [r7, #4]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001278:	f000 f99f 	bl	80015ba <port_EnableEXT_IRQ>
	}
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f8e7 	bl	8001460 <Sleep>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800129c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80012a0:	4683      	mov	fp, r0
 80012a2:	468a      	mov	sl, r1
 80012a4:	4690      	mov	r8, r2
 80012a6:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;

    while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80012a8:	4d14      	ldr	r5, [pc, #80]	; (80012fc <writetospi+0x60>)
    stat = decamutexon() ;
 80012aa:	f7ff ffcd 	bl	8001248 <decamutexon>
 80012ae:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80012b0:	4628      	mov	r0, r5
 80012b2:	f014 f8b9 	bl	8015428 <HAL_SPI_GetState>
 80012b6:	2801      	cmp	r0, #1
 80012b8:	4604      	mov	r4, r0
 80012ba:	d1f9      	bne.n	80012b0 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80012bc:	2200      	movs	r2, #0
 80012be:	2110      	movs	r1, #16
 80012c0:	480f      	ldr	r0, [pc, #60]	; (8001300 <writetospi+0x64>)
 80012c2:	f00e f985 	bl	800f5d0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi2, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80012c6:	465a      	mov	r2, fp
 80012c8:	4651      	mov	r1, sl
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <writetospi+0x60>)
 80012d0:	f013 f9da 	bl	8014688 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	4649      	mov	r1, r9
 80012da:	fa1f f288 	uxth.w	r2, r8
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <writetospi+0x60>)
 80012e0:	f013 f9d2 	bl	8014688 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80012e4:	4622      	mov	r2, r4
 80012e6:	2110      	movs	r1, #16
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <writetospi+0x64>)
 80012ea:	f00e f971 	bl	800f5d0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80012ee:	4630      	mov	r0, r6
 80012f0:	f7ff ffbb 	bl	800126a <decamutexoff>

    return 0;
} // end writetospi()
 80012f4:	2000      	movs	r0, #0
 80012f6:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 80012fa:	bf00      	nop
 80012fc:	2400b1e4 	.word	0x2400b1e4
 8001300:	58020400 	.word	0x58020400

08001304 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001304:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001308:	4681      	mov	r9, r0
 800130a:	460c      	mov	r4, r1
 800130c:	4690      	mov	r8, r2
 800130e:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8001310:	f8df a070 	ldr.w	sl, [pc, #112]	; 8001384 <readfromspi+0x80>
    stat = decamutexon() ;
 8001314:	f7ff ff98 	bl	8001248 <decamutexon>
 8001318:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800131a:	4650      	mov	r0, sl
 800131c:	f014 f884 	bl	8015428 <HAL_SPI_GetState>
 8001320:	2801      	cmp	r0, #1
 8001322:	d1fa      	bne.n	800131a <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001324:	2200      	movs	r2, #0
 8001326:	2110      	movs	r1, #16
 8001328:	4815      	ldr	r0, [pc, #84]	; (8001380 <readfromspi+0x7c>)
 800132a:	f00e f951 	bl	800f5d0 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800132e:	f1b9 0f00 	cmp.w	r9, #0
 8001332:	d00c      	beq.n	800134e <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi2, (uint8_t *)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001334:	f8df a04c 	ldr.w	sl, [pc, #76]	; 8001384 <readfromspi+0x80>
 8001338:	44a1      	add	r9, r4
 800133a:	4621      	mov	r1, r4
 800133c:	3401      	adds	r4, #1
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	2201      	movs	r2, #1
 8001344:	4650      	mov	r0, sl
 8001346:	f013 f99f 	bl	8014688 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800134a:	454c      	cmp	r4, r9
 800134c:	d1f5      	bne.n	800133a <readfromspi+0x36>
 800134e:	fa1f f888 	uxth.w	r8, r8
//        }
//
//        (*readBuffer++) = hspi2.Instance->RXDR;  //copy data read form (MISO)
//    }

    while(HAL_SPI_Receive(&hspi2, readBuffer, readlength, HAL_MAX_DELAY) != HAL_OK)
 8001352:	f8df 9030 	ldr.w	r9, [pc, #48]	; 8001384 <readfromspi+0x80>
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	4642      	mov	r2, r8
 800135c:	4629      	mov	r1, r5
 800135e:	4648      	mov	r0, r9
 8001360:	f013 fb84 	bl	8014a6c <HAL_SPI_Receive>
 8001364:	4604      	mov	r4, r0
 8001366:	2800      	cmp	r0, #0
 8001368:	d1f5      	bne.n	8001356 <readfromspi+0x52>

//    uint8_t dummyTransmit[readlength];
//    for(int i = 0; i<readlength; ++i) dummyTransmit[i] = 0;
//    HAL_SPI_TransmitReceive(&hspi2, dummyTransmit, readBuffer, readlength, HAL_MAX_DELAY);

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800136a:	2201      	movs	r2, #1
 800136c:	2110      	movs	r1, #16
 800136e:	4804      	ldr	r0, [pc, #16]	; (8001380 <readfromspi+0x7c>)
 8001370:	f00e f92e 	bl	800f5d0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001374:	4630      	mov	r0, r6
 8001376:	f7ff ff78 	bl	800126a <decamutexoff>

    return 0;
} // end readfromspi()
 800137a:	4620      	mov	r0, r4
 800137c:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8001380:	58020400 	.word	0x58020400
 8001384:	2400b1e4 	.word	0x2400b1e4

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4907      	ldr	r1, [pc, #28]	; (80013c0 <__NVIC_EnableIRQ+0x38>)
 80013a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db12      	blt.n	80013fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	490a      	ldr	r1, [pc, #40]	; (8001408 <__NVIC_DisableIRQ+0x44>)
 80013de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	3320      	adds	r3, #32
 80013ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013f0:	f3bf 8f4f 	dsb	sy
}
 80013f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013f6:	f3bf 8f6f 	isb	sy
}
 80013fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100

0800140c <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
void usleep(useconds_t usec)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e012      	b.n	8001440 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	e004      	b.n	800142a <usleep+0x1e>
        {
            __NOP();
 8001420:	bf00      	nop
            __NOP();
 8001422:	bf00      	nop
        for(j=0;j<2;j++)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	3301      	adds	r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b01      	cmp	r3, #1
 800142e:	bfd4      	ite	le
 8001430:	2301      	movle	r3, #1
 8001432:	2300      	movgt	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f2      	bne.n	8001420 <usleep+0x14>
    for(i=0;i<usec;i++)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3301      	adds	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	bf8c      	ite	hi
 8001448:	2301      	movhi	r3, #1
 800144a:	2300      	movls	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1e3      	bne.n	800141a <usleep+0xe>
        }
    }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f00d f9db 	bl	800e824 <HAL_Delay>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001480:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <EXTI_GetITEnStatus+0x38>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	095b      	lsrs	r3, r3, #5
 8001486:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf14      	ite	ne
 800149c:	2301      	movne	r3, #1
 800149e:	2300      	moveq	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 80014ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014be:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014c0:	2311      	movs	r3, #17
 80014c2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	4619      	mov	r1, r3
 80014cc:	480a      	ldr	r0, [pc, #40]	; (80014f8 <reset_DW1000+0x44>)
 80014ce:	f00d fdc5 	bl	800f05c <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <reset_DW1000+0x44>)
 80014da:	f00e f879 	bl	800f5d0 <HAL_GPIO_WritePin>

    usleep(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff ff94 	bl	800140c <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f000 f809 	bl	80014fc <setup_DW1000RSTnIRQ>



    Sleep(2);
 80014ea:	2002      	movs	r0, #2
 80014ec:	f7ff ffb8 	bl	8001460 <Sleep>
}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	58022000 	.word	0x58022000

080014fc <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d016      	beq.n	8001538 <setup_DW1000RSTnIRQ+0x3c>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800150a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001510:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001514:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4619      	mov	r1, r3
 8001520:	4813      	ldr	r0, [pc, #76]	; (8001570 <setup_DW1000RSTnIRQ+0x74>)
 8001522:	f00d fd9b 	bl	800f05c <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001526:	2006      	movs	r0, #6
 8001528:	f00d faa2 	bl	800ea70 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2105      	movs	r1, #5
 8001530:	2006      	movs	r0, #6
 8001532:	f00d fa83 	bl	800ea3c <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8001536:	e017      	b.n	8001568 <setup_DW1000RSTnIRQ+0x6c>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8001538:	2006      	movs	r0, #6
 800153a:	f00d faa7 	bl	800ea8c <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800153e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001542:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001544:	2311      	movs	r3, #17
 8001546:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154c:	2302      	movs	r3, #2
 800154e:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <setup_DW1000RSTnIRQ+0x74>)
 8001558:	f00d fd80 	bl	800f05c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <setup_DW1000RSTnIRQ+0x74>)
 8001564:	f00e f834 	bl	800f5d0 <HAL_GPIO_WritePin>
}
 8001568:	bf00      	nop
 800156a:	3720      	adds	r7, #32
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	58022000 	.word	0x58022000

08001574 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <port_set_dw1000_slowrate+0x18>)
 800157a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800157e:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi2);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <port_set_dw1000_slowrate+0x18>)
 8001582:	f012 ff7b 	bl	801447c <HAL_SPI_Init>
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2400b1e4 	.word	0x2400b1e4

08001590 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <port_set_dw1000_fastrate+0x18>)
 8001596:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800159a:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi2);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <port_set_dw1000_fastrate+0x18>)
 800159e:	f012 ff6d 	bl	801447c <HAL_SPI_Init>
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2400b1e4 	.word	0x2400b1e4

080015ac <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80015b0:	2017      	movs	r0, #23
 80015b2:	f7ff ff07 	bl	80013c4 <__NVIC_DisableIRQ>
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}

080015ba <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80015be:	2017      	movs	r0, #23
 80015c0:	f7ff fee2 	bl	8001388 <__NVIC_EnableIRQ>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80015cc:	2017      	movs	r0, #23
 80015ce:	f7ff ff53 	bl	8001478 <EXTI_GetITEnStatus>
 80015d2:	4603      	mov	r3, r0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <stdio_init>:
 * @fn port_stdio_init
 * @brief Initialize stdio on the given UART
 *
 * @param[in] huart Pointer to the STM32 HAL UART peripheral instance
 */
void stdio_init(UART_HandleTypeDef* huart) {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    uart = huart;
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <stdio_init+0x1c>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	2400019c 	.word	0x2400019c

080015f8 <stdio_write>:
 *
 * @param[in] data Pointer to null terminated string
 * @return Number of bytes transmitted or -1 if an error occurred
 */
inline int stdio_write(const char *data)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(data);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7fe fe6d 	bl	80002e0 <strlen>
 8001606:	4603      	mov	r3, r0
 8001608:	81fb      	strh	r3, [r7, #14]
    if (HAL_UART_Transmit(uart, (uint8_t*) data, len, HAL_MAX_DELAY) == HAL_OK) {
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <stdio_write+0x38>)
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	89fa      	ldrh	r2, [r7, #14]
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	f014 fb27 	bl	8015c68 <HAL_UART_Transmit>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <stdio_write+0x2c>
        return len;
 8001620:	89fb      	ldrh	r3, [r7, #14]
 8001622:	e001      	b.n	8001628 <stdio_write+0x30>
    }
    return -1;
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2400019c 	.word	0x2400019c

08001634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800163a:	f000 fca5 	bl	8001f88 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800163e:	4b69      	ldr	r3, [pc, #420]	; (80017e4 <main+0x1b0>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d11b      	bne.n	8001682 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001656:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <main+0x1b0>)
 8001658:	2200      	movs	r2, #0
 800165a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800165e:	f3bf 8f4f 	dsb	sy
}
 8001662:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001664:	f3bf 8f6f 	isb	sy
}
 8001668:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800166a:	4b5e      	ldr	r3, [pc, #376]	; (80017e4 <main+0x1b0>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a5d      	ldr	r2, [pc, #372]	; (80017e4 <main+0x1b0>)
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001676:	f3bf 8f4f 	dsb	sy
}
 800167a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800167c:	f3bf 8f6f 	isb	sy
}
 8001680:	e000      	b.n	8001684 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001682:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001684:	4b57      	ldr	r3, [pc, #348]	; (80017e4 <main+0x1b0>)
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d138      	bne.n	8001702 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001690:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <main+0x1b0>)
 8001692:	2200      	movs	r2, #0
 8001694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001698:	f3bf 8f4f 	dsb	sy
}
 800169c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800169e:	4b51      	ldr	r3, [pc, #324]	; (80017e4 <main+0x1b0>)
 80016a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016a4:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	0b5b      	lsrs	r3, r3, #13
 80016aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016ae:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	08db      	lsrs	r3, r3, #3
 80016b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016b8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	015a      	lsls	r2, r3, #5
 80016be:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80016c2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80016c8:	4946      	ldr	r1, [pc, #280]	; (80017e4 <main+0x1b0>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	1e5a      	subs	r2, r3, #1
 80016d4:	60ba      	str	r2, [r7, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ef      	bne.n	80016ba <main+0x86>
    } while(sets-- != 0U);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1e5a      	subs	r2, r3, #1
 80016de:	60fa      	str	r2, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e5      	bne.n	80016b0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80016e4:	f3bf 8f4f 	dsb	sy
}
 80016e8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <main+0x1b0>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a3d      	ldr	r2, [pc, #244]	; (80017e4 <main+0x1b0>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80016f6:	f3bf 8f4f 	dsb	sy
}
 80016fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016fc:	f3bf 8f6f 	isb	sy
}
 8001700:	e000      	b.n	8001704 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001702:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001704:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001708:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800170a:	bf00      	nop
 800170c:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <main+0x1b4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <main+0xee>
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	1e5a      	subs	r2, r3, #1
 800171c:	617a      	str	r2, [r7, #20]
 800171e:	2b00      	cmp	r3, #0
 8001720:	dcf4      	bgt.n	800170c <main+0xd8>
  if ( timeout < 0 )
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b00      	cmp	r3, #0
 8001726:	da01      	bge.n	800172c <main+0xf8>
  {
  Error_Handler();
 8001728:	f000 fc78 	bl	800201c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172c:	f00d f81e 	bl	800e76c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001730:	f000 f86a 	bl	8001808 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001734:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <main+0x1b4>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173a:	4a2b      	ldr	r2, [pc, #172]	; (80017e8 <main+0x1b4>)
 800173c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <main+0x1b4>)
 8001746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001752:	2000      	movs	r0, #0
 8001754:	f00d ff56 	bl	800f604 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001758:	2100      	movs	r1, #0
 800175a:	2000      	movs	r0, #0
 800175c:	f00d ff6c 	bl	800f638 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001764:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001766:	bf00      	nop
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <main+0x1b4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d104      	bne.n	800177e <main+0x14a>
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	617a      	str	r2, [r7, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	dcf4      	bgt.n	8001768 <main+0x134>
if ( timeout < 0 )
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	da01      	bge.n	8001788 <main+0x154>
{
Error_Handler();
 8001784:	f000 fc4a 	bl	800201c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001788:	f000 fab6 	bl	8001cf8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 800178c:	f000 f98e 	bl	8001aac <MX_QUADSPI_Init>
  MX_FMC_Init();
 8001790:	f000 fa5c 	bl	8001c4c <MX_FMC_Init>
  MX_LTDC_Init();
 8001794:	f000 f906 	bl	80019a4 <MX_LTDC_Init>
  MX_CRC_Init();
 8001798:	f000 f8c4 	bl	8001924 <MX_CRC_Init>
  MX_DMA2D_Init();
 800179c:	f000 f8e4 	bl	8001968 <MX_DMA2D_Init>
  MX_USART3_UART_Init();
 80017a0:	f000 fa08 	bl	8001bb4 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80017a4:	f000 f9b0 	bl	8001b08 <MX_SPI2_Init>
  MX_TouchGFX_Init();
 80017a8:	f001 fb61 	bl	8002e6e <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  setup_DW1000RSTnIRQ(0);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff fea5 	bl	80014fc <setup_DW1000RSTnIRQ>

  stdio_init(&huart3);
 80017b2:	480e      	ldr	r0, [pc, #56]	; (80017ec <main+0x1b8>)
 80017b4:	f7ff ff10 	bl	80015d8 <stdio_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017b8:	f006 ffe0 	bl	800877c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017bc:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <main+0x1bc>)
 80017be:	2100      	movs	r1, #0
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <main+0x1c0>)
 80017c2:	f007 f825 	bl	8008810 <osThreadNew>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <main+0x1c4>)
 80017ca:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80017cc:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <main+0x1c8>)
 80017ce:	2100      	movs	r1, #0
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <main+0x1cc>)
 80017d2:	f007 f81d 	bl	8008810 <osThreadNew>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <main+0x1d0>)
 80017da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017dc:	f006 fff2 	bl	80087c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <main+0x1ac>
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00
 80017e8:	58024400 	.word	0x58024400
 80017ec:	2400b26c 	.word	0x2400b26c
 80017f0:	0802b940 	.word	0x0802b940
 80017f4:	08001f75 	.word	0x08001f75
 80017f8:	2400b1e0 	.word	0x2400b1e0
 80017fc:	0802b964 	.word	0x0802b964
 8001800:	08002e7b 	.word	0x08002e7b
 8001804:	2400b3fc 	.word	0x2400b3fc

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b09c      	sub	sp, #112	; 0x70
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	224c      	movs	r2, #76	; 0x4c
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f028 faf6 	bl	8029e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2220      	movs	r2, #32
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f028 faf0 	bl	8029e08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001828:	2004      	movs	r0, #4
 800182a:	f00f fa6f 	bl	8010d0c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <SystemClock_Config+0x110>)
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	4a38      	ldr	r2, [pc, #224]	; (8001918 <SystemClock_Config+0x110>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <SystemClock_Config+0x110>)
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <SystemClock_Config+0x114>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a33      	ldr	r2, [pc, #204]	; (800191c <SystemClock_Config+0x114>)
 800184e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b31      	ldr	r3, [pc, #196]	; (800191c <SystemClock_Config+0x114>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001860:	bf00      	nop
 8001862:	4b2e      	ldr	r3, [pc, #184]	; (800191c <SystemClock_Config+0x114>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800186a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800186e:	d1f8      	bne.n	8001862 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <SystemClock_Config+0x118>)
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	f023 0303 	bic.w	r3, r3, #3
 8001878:	4a29      	ldr	r2, [pc, #164]	; (8001920 <SystemClock_Config+0x118>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001880:	2303      	movs	r3, #3
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001884:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800188a:	2301      	movs	r3, #1
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800188e:	2340      	movs	r3, #64	; 0x40
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001892:	2302      	movs	r3, #2
 8001894:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001896:	2302      	movs	r3, #2
 8001898:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800189a:	2305      	movs	r3, #5
 800189c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800189e:	23a0      	movs	r3, #160	; 0xa0
 80018a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80018a2:	2302      	movs	r3, #2
 80018a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018a6:	2304      	movs	r3, #4
 80018a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018aa:	2302      	movs	r3, #2
 80018ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80018ae:	2308      	movs	r3, #8
 80018b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018be:	4618      	mov	r0, r3
 80018c0:	f010 f960 	bl	8011b84 <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018ca:	f000 fba7 	bl	800201c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	233f      	movs	r3, #63	; 0x3f
 80018d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2303      	movs	r3, #3
 80018d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80018da:	2308      	movs	r3, #8
 80018dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80018de:	2340      	movs	r3, #64	; 0x40
 80018e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018e2:	2340      	movs	r3, #64	; 0x40
 80018e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80018e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80018ec:	2340      	movs	r3, #64	; 0x40
 80018ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2102      	movs	r1, #2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f010 fd71 	bl	80123dc <HAL_RCC_ClockConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001900:	f000 fb8c 	bl	800201c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001904:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001908:	2100      	movs	r1, #0
 800190a:	2000      	movs	r0, #0
 800190c:	f010 ff1c 	bl	8012748 <HAL_RCC_MCOConfig>
}
 8001910:	bf00      	nop
 8001912:	3770      	adds	r7, #112	; 0x70
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	58000400 	.word	0x58000400
 800191c:	58024800 	.word	0x58024800
 8001920:	58024400 	.word	0x58024400

08001924 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <MX_CRC_Init+0x3c>)
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <MX_CRC_Init+0x40>)
 800192c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_CRC_Init+0x3c>)
 8001930:	2200      	movs	r2, #0
 8001932:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <MX_CRC_Init+0x3c>)
 8001936:	2200      	movs	r2, #0
 8001938:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_CRC_Init+0x3c>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <MX_CRC_Init+0x3c>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_CRC_Init+0x3c>)
 8001948:	2201      	movs	r2, #1
 800194a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_CRC_Init+0x3c>)
 800194e:	f00d f927 	bl	800eba0 <HAL_CRC_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001958:	f000 fb60 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2400b2fc 	.word	0x2400b2fc
 8001964:	58024c00 	.word	0x58024c00

08001968 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_DMA2D_Init+0x34>)
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <MX_DMA2D_Init+0x38>)
 8001970:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <MX_DMA2D_Init+0x34>)
 8001974:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001978:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_DMA2D_Init+0x34>)
 800197c:	2202      	movs	r2, #2
 800197e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_DMA2D_Init+0x34>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_DMA2D_Init+0x34>)
 8001988:	f00d f9f4 	bl	800ed74 <HAL_DMA2D_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8001992:	f000 fb43 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2400b400 	.word	0x2400b400
 80019a0:	52001000 	.word	0x52001000

080019a4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08e      	sub	sp, #56	; 0x38
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 80019aa:	f000 fb99 	bl	80020e0 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2234      	movs	r2, #52	; 0x34
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f028 fa27 	bl	8029e08 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80019ba:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <MX_LTDC_Init+0x100>)
 80019bc:	4a3a      	ldr	r2, [pc, #232]	; (8001aa8 <MX_LTDC_Init+0x104>)
 80019be:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80019c0:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <MX_LTDC_Init+0x100>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <MX_LTDC_Init+0x100>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <MX_LTDC_Init+0x100>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80019d2:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <MX_LTDC_Init+0x100>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <MX_LTDC_Init+0x100>)
 80019da:	2228      	movs	r2, #40	; 0x28
 80019dc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <MX_LTDC_Init+0x100>)
 80019e0:	2209      	movs	r2, #9
 80019e2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <MX_LTDC_Init+0x100>)
 80019e6:	2235      	movs	r2, #53	; 0x35
 80019e8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80019ea:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <MX_LTDC_Init+0x100>)
 80019ec:	220b      	movs	r2, #11
 80019ee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80019f0:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <MX_LTDC_Init+0x100>)
 80019f2:	f240 2215 	movw	r2, #533	; 0x215
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80019f8:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <MX_LTDC_Init+0x100>)
 80019fa:	f240 121b 	movw	r2, #283	; 0x11b
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <MX_LTDC_Init+0x100>)
 8001a02:	f240 2235 	movw	r2, #565	; 0x235
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001a08:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <MX_LTDC_Init+0x100>)
 8001a0a:	f240 121d 	movw	r2, #285	; 0x11d
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <MX_LTDC_Init+0x100>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <MX_LTDC_Init+0x100>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001a20:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <MX_LTDC_Init+0x100>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001a28:	481e      	ldr	r0, [pc, #120]	; (8001aa4 <MX_LTDC_Init+0x100>)
 8001a2a:	f00e fc73 	bl	8010314 <HAL_LTDC_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8001a34:	f000 faf2 	bl	800201c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001a3c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a40:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001a46:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a4a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001a50:	23ff      	movs	r3, #255	; 0xff
 8001a52:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a5e:	2305      	movs	r3, #5
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001a62:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001a68:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001a6e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_LTDC_Init+0x100>)
 8001a8e:	f00e fdc9 	bl	8010624 <HAL_LTDC_ConfigLayer>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001a98:	f000 fac0 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3738      	adds	r7, #56	; 0x38
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2400b320 	.word	0x2400b320
 8001aa8:	50001000 	.word	0x50001000

08001aac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <MX_QUADSPI_Init+0x50>)
 8001ab2:	4a13      	ldr	r2, [pc, #76]	; (8001b00 <MX_QUADSPI_Init+0x54>)
 8001ab4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_QUADSPI_Init+0x50>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_QUADSPI_Init+0x50>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_QUADSPI_Init+0x50>)
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_QUADSPI_Init+0x50>)
 8001aca:	221a      	movs	r2, #26
 8001acc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_QUADSPI_Init+0x50>)
 8001ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_QUADSPI_Init+0x50>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <MX_QUADSPI_Init+0x50>)
 8001ade:	2240      	movs	r2, #64	; 0x40
 8001ae0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001ae2:	4806      	ldr	r0, [pc, #24]	; (8001afc <MX_QUADSPI_Init+0x50>)
 8001ae4:	f00f f96c 	bl	8010dc0 <HAL_QSPI_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8001aee:	f000 fa95 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 8001af2:	4804      	ldr	r0, [pc, #16]	; (8001b04 <MX_QUADSPI_Init+0x58>)
 8001af4:	f000 fb68 	bl	80021c8 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2400b52c 	.word	0x2400b52c
 8001b00:	52005000 	.word	0x52005000
 8001b04:	0800201d 	.word	0x0800201d

08001b08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b0e:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <MX_SPI2_Init+0xa8>)
 8001b10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b14:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b20:	4b22      	ldr	r3, [pc, #136]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b22:	2207      	movs	r2, #7
 8001b24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b3c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001b40:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b60:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <MX_SPI2_Init+0xa4>)
 8001b9a:	f012 fc6f 	bl	801447c <HAL_SPI_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001ba4:	f000 fa3a 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2400b1e4 	.word	0x2400b1e4
 8001bb0:	40003800 	.word	0x40003800

08001bb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001bba:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <MX_USART3_UART_Init+0x94>)
 8001bbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bfc:	4811      	ldr	r0, [pc, #68]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001bfe:	f013 ffe3 	bl	8015bc8 <HAL_UART_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c08:	f000 fa08 	bl	800201c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	480d      	ldr	r0, [pc, #52]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001c10:	f015 f80e 	bl	8016c30 <HAL_UARTEx_SetTxFifoThreshold>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c1a:	f000 f9ff 	bl	800201c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4808      	ldr	r0, [pc, #32]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001c22:	f015 f843 	bl	8016cac <HAL_UARTEx_SetRxFifoThreshold>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c2c:	f000 f9f6 	bl	800201c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_USART3_UART_Init+0x90>)
 8001c32:	f014 ffc4 	bl	8016bbe <HAL_UARTEx_DisableFifoMode>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c3c:	f000 f9ee 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	2400b26c 	.word	0x2400b26c
 8001c48:	40004800 	.word	0x40004800

08001c4c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
 8001c60:	615a      	str	r2, [r3, #20]
 8001c62:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <MX_FMC_Init+0xa0>)
 8001c66:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <MX_FMC_Init+0xa4>)
 8001c68:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <MX_FMC_Init+0xa0>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <MX_FMC_Init+0xa0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_FMC_Init+0xa0>)
 8001c78:	2204      	movs	r2, #4
 8001c7a:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <MX_FMC_Init+0xa0>)
 8001c7e:	2210      	movs	r2, #16
 8001c80:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_FMC_Init+0xa0>)
 8001c84:	2240      	movs	r2, #64	; 0x40
 8001c86:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_FMC_Init+0xa0>)
 8001c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c8e:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <MX_FMC_Init+0xa0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_FMC_Init+0xa0>)
 8001c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c9c:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <MX_FMC_Init+0xa0>)
 8001ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_FMC_Init+0xa0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001cac:	2302      	movs	r3, #2
 8001cae:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8001cb0:	2306      	movs	r3, #6
 8001cb2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001cb8:	2306      	movs	r3, #6
 8001cba:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4807      	ldr	r0, [pc, #28]	; (8001cec <MX_FMC_Init+0xa0>)
 8001cce:	f012 fb1f 	bl	8014310 <HAL_SDRAM_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001cd8:	f000 f9a0 	bl	800201c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 8001cdc:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_FMC_Init+0xa8>)
 8001cde:	f000 fa94 	bl	800220a <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2400b3c8 	.word	0x2400b3c8
 8001cf0:	52004140 	.word	0x52004140
 8001cf4:	0800201d 	.word	0x0800201d

08001cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b090      	sub	sp, #64	; 0x40
 8001cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d0e:	4b92      	ldr	r3, [pc, #584]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d14:	4a90      	ldr	r2, [pc, #576]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d1e:	4b8e      	ldr	r3, [pc, #568]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d2c:	4b8a      	ldr	r3, [pc, #552]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d32:	4a89      	ldr	r2, [pc, #548]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d3c:	4b86      	ldr	r3, [pc, #536]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d4a:	4b83      	ldr	r3, [pc, #524]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d50:	4a81      	ldr	r2, [pc, #516]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d5a:	4b7f      	ldr	r3, [pc, #508]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	623b      	str	r3, [r7, #32]
 8001d66:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d68:	4b7b      	ldr	r3, [pc, #492]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6e:	4a7a      	ldr	r2, [pc, #488]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d70:	f043 0310 	orr.w	r3, r3, #16
 8001d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d78:	4b77      	ldr	r3, [pc, #476]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	4b74      	ldr	r3, [pc, #464]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8c:	4a72      	ldr	r2, [pc, #456]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d96:	4b70      	ldr	r3, [pc, #448]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001da4:	4b6c      	ldr	r3, [pc, #432]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001daa:	4a6b      	ldr	r2, [pc, #428]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db4:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc2:	4b65      	ldr	r3, [pc, #404]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc8:	4a63      	ldr	r2, [pc, #396]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd2:	4b61      	ldr	r3, [pc, #388]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de0:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de6:	4a5c      	ldr	r2, [pc, #368]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	4b56      	ldr	r3, [pc, #344]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e04:	4a54      	ldr	r2, [pc, #336]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0e:	4b52      	ldr	r3, [pc, #328]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e1c:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e22:	4a4d      	ldr	r2, [pc, #308]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001e24:	f043 0320 	orr.w	r3, r3, #32
 8001e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2c:	4b4a      	ldr	r3, [pc, #296]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e40:	4a45      	ldr	r2, [pc, #276]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e4a:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <MX_GPIO_Init+0x260>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	483f      	ldr	r0, [pc, #252]	; (8001f5c <MX_GPIO_Init+0x264>)
 8001e5e:	f00d fbb7 	bl	800f5d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e68:	483d      	ldr	r0, [pc, #244]	; (8001f60 <MX_GPIO_Init+0x268>)
 8001e6a:	f00d fbb1 	bl	800f5d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e74:	483a      	ldr	r0, [pc, #232]	; (8001f60 <MX_GPIO_Init+0x268>)
 8001e76:	f00d fbab 	bl	800f5d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_1_GPIO_Port, GREEN_LED_1_Pin, GPIO_PIN_SET);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	4839      	ldr	r0, [pc, #228]	; (8001f64 <MX_GPIO_Init+0x26c>)
 8001e80:	f00d fba6 	bl	800f5d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8001e84:	2310      	movs	r3, #16
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4830      	ldr	r0, [pc, #192]	; (8001f5c <MX_GPIO_Init+0x264>)
 8001e9c:	f00d f8de 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ea4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	482c      	ldr	r0, [pc, #176]	; (8001f68 <MX_GPIO_Init+0x270>)
 8001eb6:	f00d f8d1 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4827      	ldr	r0, [pc, #156]	; (8001f6c <MX_GPIO_Init+0x274>)
 8001ed0:	f00d f8c4 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eea:	4619      	mov	r1, r3
 8001eec:	481c      	ldr	r0, [pc, #112]	; (8001f60 <MX_GPIO_Init+0x268>)
 8001eee:	f00d f8b5 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001f04:	2300      	movs	r3, #0
 8001f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4818      	ldr	r0, [pc, #96]	; (8001f70 <MX_GPIO_Init+0x278>)
 8001f10:	f00d f8a4 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f22:	2301      	movs	r3, #1
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480c      	ldr	r0, [pc, #48]	; (8001f60 <MX_GPIO_Init+0x268>)
 8001f2e:	f00d f895 	bl	800f05c <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_1_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_1_Pin;
 8001f32:	2304      	movs	r3, #4
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GREEN_LED_1_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f46:	4619      	mov	r1, r3
 8001f48:	4806      	ldr	r0, [pc, #24]	; (8001f64 <MX_GPIO_Init+0x26c>)
 8001f4a:	f00d f887 	bl	800f05c <HAL_GPIO_Init>

}
 8001f4e:	bf00      	nop
 8001f50:	3740      	adds	r7, #64	; 0x40
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	58024400 	.word	0x58024400
 8001f5c:	58020400 	.word	0x58020400
 8001f60:	58022000 	.word	0x58022000
 8001f64:	58022400 	.word	0x58022400
 8001f68:	58021000 	.word	0x58021000
 8001f6c:	58020800 	.word	0x58020800
 8001f70:	58020000 	.word	0x58020000

08001f74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  dw_main();
 8001f7c:	f000 f854 	bl	8002028 <dw_main>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f006 fcd7 	bl	8008934 <osDelay>
 8001f86:	e7fb      	b.n	8001f80 <StartDefaultTask+0xc>

08001f88 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001f8e:	463b      	mov	r3, r7
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001f9a:	f00c fd85 	bl	800eaa8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8001fa6:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001faa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8001fac:	2313      	movs	r3, #19
 8001fae:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fcc:	463b      	mov	r3, r7
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f00c fda2 	bl	800eb18 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001fd8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001fdc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8001fde:	231a      	movs	r3, #26
 8001fe0:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f00c fd97 	bl	800eb18 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001fea:	2004      	movs	r0, #4
 8001fec:	f00c fd74 	bl	800ead8 <HAL_MPU_Enable>

}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800200a:	f00c fbeb 	bl	800e7e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40001000 	.word	0x40001000

0800201c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002020:	b672      	cpsid	i
}
 8002022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002024:	e7fe      	b.n	8002024 <Error_Handler+0x8>
	...

08002028 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
    /* Display application name. */
    stdio_write(APP_NAME);
 800202c:	4824      	ldr	r0, [pc, #144]	; (80020c0 <dw_main+0x98>)
 800202e:	f7ff fae3 	bl	80015f8 <stdio_write>
    stdio_write("\r\n");
 8002032:	4824      	ldr	r0, [pc, #144]	; (80020c4 <dw_main+0x9c>)
 8002034:	f7ff fae0 	bl	80015f8 <stdio_write>

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8002038:	f7ff fa3c 	bl	80014b4 <reset_DW1000>
    port_set_dw1000_slowrate();
 800203c:	f7ff fa9a 	bl	8001574 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8002040:	2000      	movs	r0, #0
 8002042:	f7fe fb21 	bl	8000688 <dwt_initialise>
 8002046:	4603      	mov	r3, r0
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d103      	bne.n	8002056 <dw_main+0x2e>
    {
        stdio_write("INIT FAILED");
 800204e:	481e      	ldr	r0, [pc, #120]	; (80020c8 <dw_main+0xa0>)
 8002050:	f7ff fad2 	bl	80015f8 <stdio_write>
        while (1)
 8002054:	e7fe      	b.n	8002054 <dw_main+0x2c>
        { };
    }
    port_set_dw1000_fastrate();
 8002056:	f7ff fa9b 	bl	8001590 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 3 below. */
    dwt_configure(&config);
 800205a:	481c      	ldr	r0, [pc, #112]	; (80020cc <dw_main+0xa4>)
 800205c:	f7fe fc6a 	bl	8000934 <dwt_configure>

    /* Loop forever sending frames periodically. */
    while(1)
    {
        /* Write frame data to DW1000 and prepare transmission. See NOTE 4 below.*/
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8002060:	2200      	movs	r2, #0
 8002062:	491b      	ldr	r1, [pc, #108]	; (80020d0 <dw_main+0xa8>)
 8002064:	200c      	movs	r0, #12
 8002066:	f7fe fdcf 	bl	8000c08 <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	200c      	movs	r0, #12
 8002070:	f7fe fde8 	bl	8000c44 <dwt_writetxfctrl>


        /* Start transmission. */
        stdio_write("Starting Tx... ");
 8002074:	4817      	ldr	r0, [pc, #92]	; (80020d4 <dw_main+0xac>)
 8002076:	f7ff fabf 	bl	80015f8 <stdio_write>
        dwt_starttx(DWT_START_TX_IMMEDIATE);
 800207a:	2000      	movs	r0, #0
 800207c:	f7ff f858 	bl	8001130 <dwt_starttx>

        /* Poll DW1000 until TX frame sent event set. See NOTE 5 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it.*/
        stdio_write("Polling... ");
 8002080:	4815      	ldr	r0, [pc, #84]	; (80020d8 <dw_main+0xb0>)
 8002082:	f7ff fab9 	bl	80015f8 <stdio_write>
        while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8002086:	bf00      	nop
 8002088:	2100      	movs	r1, #0
 800208a:	200f      	movs	r0, #15
 800208c:	f7fe feaf 	bl	8000dee <dwt_read32bitoffsetreg>
 8002090:	4603      	mov	r3, r0
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f6      	beq.n	8002088 <dw_main+0x60>
        { };

        /* Clear TX frame sent event. */
        stdio_write("Done!\r\n");
 800209a:	4810      	ldr	r0, [pc, #64]	; (80020dc <dw_main+0xb4>)
 800209c:	f7ff faac 	bl	80015f8 <stdio_write>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	2100      	movs	r1, #0
 80020a4:	200f      	movs	r0, #15
 80020a6:	f7fe ff15 	bl	8000ed4 <dwt_write32bitoffsetreg>

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 80020aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020ae:	f7ff f9d7 	bl	8001460 <Sleep>

        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <dw_main+0xa8>)
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	3301      	adds	r3, #1
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <dw_main+0xa8>)
 80020bc:	705a      	strb	r2, [r3, #1]
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 80020be:	e7cf      	b.n	8002060 <dw_main+0x38>
 80020c0:	0802ae18 	.word	0x0802ae18
 80020c4:	0802ae28 	.word	0x0802ae28
 80020c8:	0802ae2c 	.word	0x0802ae2c
 80020cc:	24000008 	.word	0x24000008
 80020d0:	24000014 	.word	0x24000014
 80020d4:	0802ae38 	.word	0x0802ae38
 80020d8:	0802ae48 	.word	0x0802ae48
 80020dc:	0802ae54 	.word	0x0802ae54

080020e0 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08c      	sub	sp, #48	; 0x30
 80020e4:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 80020e6:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <initLtdcClocks+0xe0>)
 80020e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80020ec:	4a34      	ldr	r2, [pc, #208]	; (80021c0 <initLtdcClocks+0xe0>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <initLtdcClocks+0xe0>)
 80020f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8002104:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <initLtdcClocks+0xe0>)
 8002106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210a:	4a2d      	ldr	r2, [pc, #180]	; (80021c0 <initLtdcClocks+0xe0>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002114:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <initLtdcClocks+0xe0>)
 8002116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002122:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <initLtdcClocks+0xe0>)
 8002124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002128:	4a25      	ldr	r2, [pc, #148]	; (80021c0 <initLtdcClocks+0xe0>)
 800212a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800212e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002132:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <initLtdcClocks+0xe0>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <initLtdcClocks+0xe0>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002146:	4a1e      	ldr	r2, [pc, #120]	; (80021c0 <initLtdcClocks+0xe0>)
 8002148:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800214c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <initLtdcClocks+0xe0>)
 8002152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <initLtdcClocks+0xe0>)
 8002160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002164:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <initLtdcClocks+0xe0>)
 8002166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800216e:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <initLtdcClocks+0xe0>)
 8002170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <initLtdcClocks+0xe0>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002182:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <initLtdcClocks+0xe0>)
 8002184:	f043 0308 	orr.w	r3, r3, #8
 8002188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <initLtdcClocks+0xe0>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800219e:	2301      	movs	r3, #1
 80021a0:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	4619      	mov	r1, r3
 80021a8:	4806      	ldr	r0, [pc, #24]	; (80021c4 <initLtdcClocks+0xe4>)
 80021aa:	f00c ff57 	bl	800f05c <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80021ae:	2201      	movs	r2, #1
 80021b0:	2180      	movs	r1, #128	; 0x80
 80021b2:	4804      	ldr	r0, [pc, #16]	; (80021c4 <initLtdcClocks+0xe4>)
 80021b4:	f00d fa0c 	bl	800f5d0 <HAL_GPIO_WritePin>
}
 80021b8:	bf00      	nop
 80021ba:	3730      	adds	r7, #48	; 0x30
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	58024400 	.word	0x58024400
 80021c4:	58020c00 	.word	0x58020c00

080021c8 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 80021d0:	2303      	movs	r3, #3
 80021d2:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 80021d4:	2301      	movs	r3, #1
 80021d6:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 80021d8:	2340      	movs	r3, #64	; 0x40
 80021da:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	4619      	mov	r1, r3
 80021e2:	2000      	movs	r0, #0
 80021e4:	f00b fa7c 	bl	800d6e0 <BSP_QSPI_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <initBspQuadSpi+0x2a>
   {
      error_handler();
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 80021f2:	2000      	movs	r0, #0
 80021f4:	f00b fb4e 	bl	800d894 <BSP_QSPI_EnableMemoryMappedMode>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <initBspQuadSpi+0x3a>
   {
      error_handler();
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4798      	blx	r3
   }
}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8002212:	2000      	movs	r0, #0
 8002214:	f00b feac 	bl	800df70 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8002218:	2000      	movs	r0, #0
 800221a:	f00b fe4d 	bl	800deb8 <BSP_SDRAM_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <initBspSdRam+0x1e>
   {
      error_handler();
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4798      	blx	r3
   }
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_MspInit+0x38>)
 8002238:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800223c:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <HAL_MspInit+0x38>)
 800223e:	f043 0302 	orr.w	r3, r3, #2
 8002242:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_MspInit+0x38>)
 8002248:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002254:	2200      	movs	r2, #0
 8002256:	210f      	movs	r1, #15
 8002258:	f06f 0001 	mvn.w	r0, #1
 800225c:	f00c fbee 	bl	800ea3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	58024400 	.word	0x58024400

0800226c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <HAL_CRC_MspInit+0x3c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10e      	bne.n	800229c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_CRC_MspInit+0x40>)
 8002280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002284:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_CRC_MspInit+0x40>)
 8002286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800228a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_CRC_MspInit+0x40>)
 8002290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	58024c00 	.word	0x58024c00
 80022ac:	58024400 	.word	0x58024400

080022b0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <HAL_DMA2D_MspInit+0x48>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d116      	bne.n	80022f0 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_DMA2D_MspInit+0x4c>)
 80022c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_DMA2D_MspInit+0x4c>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_DMA2D_MspInit+0x4c>)
 80022d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2105      	movs	r1, #5
 80022e4:	205a      	movs	r0, #90	; 0x5a
 80022e6:	f00c fba9 	bl	800ea3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80022ea:	205a      	movs	r0, #90	; 0x5a
 80022ec:	f00c fbc0 	bl	800ea70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	52001000 	.word	0x52001000
 80022fc:	58024400 	.word	0x58024400

08002300 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b0bc      	sub	sp, #240	; 0xf0
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002318:	f107 0320 	add.w	r3, r7, #32
 800231c:	22bc      	movs	r2, #188	; 0xbc
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f027 fd71 	bl	8029e08 <memset>
  if(hltdc->Instance==LTDC)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a68      	ldr	r2, [pc, #416]	; (80024cc <HAL_LTDC_MspInit+0x1cc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	f040 80c8 	bne.w	80024c2 <HAL_LTDC_MspInit+0x1c2>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002332:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002336:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8002338:	2305      	movs	r3, #5
 800233a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 800233c:	23a0      	movs	r3, #160	; 0xa0
 800233e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002340:	2302      	movs	r3, #2
 8002342:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002344:	2302      	movs	r3, #2
 8002346:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8002348:	2353      	movs	r3, #83	; 0x53
 800234a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800234c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002350:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002352:	2300      	movs	r3, #0
 8002354:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800235a:	f107 0320 	add.w	r3, r7, #32
 800235e:	4618      	mov	r0, r3
 8002360:	f010 fc74 	bl	8012c4c <HAL_RCCEx_PeriphCLKConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 800236a:	f7ff fe57 	bl	800201c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800236e:	4b58      	ldr	r3, [pc, #352]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 8002370:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002374:	4a56      	ldr	r2, [pc, #344]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 8002376:	f043 0308 	orr.w	r3, r3, #8
 800237a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800237e:	4b54      	ldr	r3, [pc, #336]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 8002380:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800238c:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 800238e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002392:	4a4f      	ldr	r2, [pc, #316]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 8002394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800239c:	4b4c      	ldr	r3, [pc, #304]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 800239e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023aa:	4b49      	ldr	r3, [pc, #292]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 80023ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b0:	4a47      	ldr	r2, [pc, #284]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 80023b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ba:	4b45      	ldr	r3, [pc, #276]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 80023bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80023c8:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 80023ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ce:	4a40      	ldr	r2, [pc, #256]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 80023d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023d8:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 80023da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80023e6:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 80023e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ec:	4a38      	ldr	r2, [pc, #224]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 80023ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f6:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <HAL_LTDC_MspInit+0x1d0>)
 80023f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8002404:	23fc      	movs	r3, #252	; 0xfc
 8002406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002416:	2302      	movs	r3, #2
 8002418:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800241c:	230e      	movs	r3, #14
 800241e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002422:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002426:	4619      	mov	r1, r3
 8002428:	482a      	ldr	r0, [pc, #168]	; (80024d4 <HAL_LTDC_MspInit+0x1d4>)
 800242a:	f00c fe17 	bl	800f05c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 800242e:	f24d 2303 	movw	r3, #53763	; 0xd203
 8002432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002442:	2302      	movs	r3, #2
 8002444:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002448:	230e      	movs	r3, #14
 800244a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800244e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002452:	4619      	mov	r1, r3
 8002454:	4820      	ldr	r0, [pc, #128]	; (80024d8 <HAL_LTDC_MspInit+0x1d8>)
 8002456:	f00c fe01 	bl	800f05c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800245a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800245e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800246e:	2302      	movs	r3, #2
 8002470:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002474:	230e      	movs	r3, #14
 8002476:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800247a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800247e:	4619      	mov	r1, r3
 8002480:	4816      	ldr	r0, [pc, #88]	; (80024dc <HAL_LTDC_MspInit+0x1dc>)
 8002482:	f00c fdeb 	bl	800f05c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800248a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800249a:	2302      	movs	r3, #2
 800249c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024a0:	230e      	movs	r3, #14
 80024a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024aa:	4619      	mov	r1, r3
 80024ac:	480c      	ldr	r0, [pc, #48]	; (80024e0 <HAL_LTDC_MspInit+0x1e0>)
 80024ae:	f00c fdd5 	bl	800f05c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2105      	movs	r1, #5
 80024b6:	2058      	movs	r0, #88	; 0x58
 80024b8:	f00c fac0 	bl	800ea3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80024bc:	2058      	movs	r0, #88	; 0x58
 80024be:	f00c fad7 	bl	800ea70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80024c2:	bf00      	nop
 80024c4:	37f0      	adds	r7, #240	; 0xf0
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	50001000 	.word	0x50001000
 80024d0:	58024400 	.word	0x58024400
 80024d4:	58022800 	.word	0x58022800
 80024d8:	58022000 	.word	0x58022000
 80024dc:	58022400 	.word	0x58022400
 80024e0:	58021c00 	.word	0x58021c00

080024e4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0bc      	sub	sp, #240	; 0xf0
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024fc:	f107 0320 	add.w	r3, r7, #32
 8002500:	22bc      	movs	r2, #188	; 0xbc
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f027 fc7f 	bl	8029e08 <memset>
  if(hqspi->Instance==QUADSPI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a76      	ldr	r2, [pc, #472]	; (80026e8 <HAL_QSPI_MspInit+0x204>)
 8002510:	4293      	cmp	r3, r2
 8002512:	f040 80e4 	bne.w	80026de <HAL_QSPI_MspInit+0x1fa>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8002516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800251a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800251c:	2300      	movs	r3, #0
 800251e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002520:	f107 0320 	add.w	r3, r7, #32
 8002524:	4618      	mov	r0, r3
 8002526:	f010 fb91 	bl	8012c4c <HAL_RCCEx_PeriphCLKConfig>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8002530:	f7ff fd74 	bl	800201c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002534:	4b6d      	ldr	r3, [pc, #436]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 8002536:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800253a:	4a6c      	ldr	r2, [pc, #432]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002540:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002544:	4b69      	ldr	r3, [pc, #420]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 8002546:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002552:	4b66      	ldr	r3, [pc, #408]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 8002554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002558:	4a64      	ldr	r2, [pc, #400]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 800255a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800255e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002562:	4b62      	ldr	r3, [pc, #392]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 8002564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002570:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 8002572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002576:	4a5d      	ldr	r2, [pc, #372]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 8002578:	f043 0320 	orr.w	r3, r3, #32
 800257c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002580:	4b5a      	ldr	r3, [pc, #360]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 8002582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800258e:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 8002590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002594:	4a55      	ldr	r2, [pc, #340]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 8002596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800259e:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 80025a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ac:	4b4f      	ldr	r3, [pc, #316]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 80025ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b2:	4a4e      	ldr	r2, [pc, #312]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025bc:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <HAL_QSPI_MspInit+0x208>)
 80025be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80025ca:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80025ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025e4:	2309      	movs	r3, #9
 80025e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025ee:	4619      	mov	r1, r3
 80025f0:	483f      	ldr	r0, [pc, #252]	; (80026f0 <HAL_QSPI_MspInit+0x20c>)
 80025f2:	f00c fd33 	bl	800f05c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025f6:	2340      	movs	r3, #64	; 0x40
 80025f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002602:	2301      	movs	r3, #1
 8002604:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800260e:	230a      	movs	r3, #10
 8002610:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002614:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002618:	4619      	mov	r1, r3
 800261a:	4835      	ldr	r0, [pc, #212]	; (80026f0 <HAL_QSPI_MspInit+0x20c>)
 800261c:	f00c fd1e 	bl	800f05c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002620:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002624:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800263a:	2309      	movs	r3, #9
 800263c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002640:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002644:	4619      	mov	r1, r3
 8002646:	482b      	ldr	r0, [pc, #172]	; (80026f4 <HAL_QSPI_MspInit+0x210>)
 8002648:	f00c fd08 	bl	800f05c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800264c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002650:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002660:	2303      	movs	r3, #3
 8002662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002666:	230a      	movs	r3, #10
 8002668:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800266c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002670:	4619      	mov	r1, r3
 8002672:	4820      	ldr	r0, [pc, #128]	; (80026f4 <HAL_QSPI_MspInit+0x210>)
 8002674:	f00c fcf2 	bl	800f05c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002678:	230c      	movs	r3, #12
 800267a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002690:	2309      	movs	r3, #9
 8002692:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002696:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800269a:	4619      	mov	r1, r3
 800269c:	4816      	ldr	r0, [pc, #88]	; (80026f8 <HAL_QSPI_MspInit+0x214>)
 800269e:	f00c fcdd 	bl	800f05c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80026bc:	2309      	movs	r3, #9
 80026be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026c6:	4619      	mov	r1, r3
 80026c8:	480c      	ldr	r0, [pc, #48]	; (80026fc <HAL_QSPI_MspInit+0x218>)
 80026ca:	f00c fcc7 	bl	800f05c <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2105      	movs	r1, #5
 80026d2:	205c      	movs	r0, #92	; 0x5c
 80026d4:	f00c f9b2 	bl	800ea3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80026d8:	205c      	movs	r0, #92	; 0x5c
 80026da:	f00c f9c9 	bl	800ea70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80026de:	bf00      	nop
 80026e0:	37f0      	adds	r7, #240	; 0xf0
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	52005000 	.word	0x52005000
 80026ec:	58024400 	.word	0x58024400
 80026f0:	58021800 	.word	0x58021800
 80026f4:	58021400 	.word	0x58021400
 80026f8:	58021c00 	.word	0x58021c00
 80026fc:	58020c00 	.word	0x58020c00

08002700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b0ba      	sub	sp, #232	; 0xe8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002718:	f107 0318 	add.w	r3, r7, #24
 800271c:	22bc      	movs	r2, #188	; 0xbc
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f027 fb71 	bl	8029e08 <memset>
  if(hspi->Instance==SPI2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a49      	ldr	r2, [pc, #292]	; (8002850 <HAL_SPI_MspInit+0x150>)
 800272c:	4293      	cmp	r3, r2
 800272e:	f040 808b 	bne.w	8002848 <HAL_SPI_MspInit+0x148>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002736:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002738:	2300      	movs	r3, #0
 800273a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800273c:	f107 0318 	add.w	r3, r7, #24
 8002740:	4618      	mov	r0, r3
 8002742:	f010 fa83 	bl	8012c4c <HAL_RCCEx_PeriphCLKConfig>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800274c:	f7ff fc66 	bl	800201c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002750:	4b40      	ldr	r3, [pc, #256]	; (8002854 <HAL_SPI_MspInit+0x154>)
 8002752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002756:	4a3f      	ldr	r2, [pc, #252]	; (8002854 <HAL_SPI_MspInit+0x154>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002760:	4b3c      	ldr	r3, [pc, #240]	; (8002854 <HAL_SPI_MspInit+0x154>)
 8002762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <HAL_SPI_MspInit+0x154>)
 8002770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002774:	4a37      	ldr	r2, [pc, #220]	; (8002854 <HAL_SPI_MspInit+0x154>)
 8002776:	f043 0308 	orr.w	r3, r3, #8
 800277a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800277e:	4b35      	ldr	r3, [pc, #212]	; (8002854 <HAL_SPI_MspInit+0x154>)
 8002780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800278c:	4b31      	ldr	r3, [pc, #196]	; (8002854 <HAL_SPI_MspInit+0x154>)
 800278e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002792:	4a30      	ldr	r2, [pc, #192]	; (8002854 <HAL_SPI_MspInit+0x154>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800279c:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_SPI_MspInit+0x154>)
 800279e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <HAL_SPI_MspInit+0x154>)
 80027ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b0:	4a28      	ldr	r2, [pc, #160]	; (8002854 <HAL_SPI_MspInit+0x154>)
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ba:	4b26      	ldr	r3, [pc, #152]	; (8002854 <HAL_SPI_MspInit+0x154>)
 80027bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027c8:	2308      	movs	r3, #8
 80027ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027e0:	2305      	movs	r3, #5
 80027e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027ea:	4619      	mov	r1, r3
 80027ec:	481a      	ldr	r0, [pc, #104]	; (8002858 <HAL_SPI_MspInit+0x158>)
 80027ee:	f00c fc35 	bl	800f05c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027f2:	2304      	movs	r3, #4
 80027f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002804:	2303      	movs	r3, #3
 8002806:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800280a:	2305      	movs	r3, #5
 800280c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002810:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002814:	4619      	mov	r1, r3
 8002816:	4811      	ldr	r0, [pc, #68]	; (800285c <HAL_SPI_MspInit+0x15c>)
 8002818:	f00c fc20 	bl	800f05c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800281c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002820:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002836:	2305      	movs	r3, #5
 8002838:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002840:	4619      	mov	r1, r3
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <HAL_SPI_MspInit+0x160>)
 8002844:	f00c fc0a 	bl	800f05c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002848:	bf00      	nop
 800284a:	37e8      	adds	r7, #232	; 0xe8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40003800 	.word	0x40003800
 8002854:	58024400 	.word	0x58024400
 8002858:	58020c00 	.word	0x58020c00
 800285c:	58022000 	.word	0x58022000
 8002860:	58020400 	.word	0x58020400

08002864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b0b8      	sub	sp, #224	; 0xe0
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	22bc      	movs	r2, #188	; 0xbc
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f027 fabf 	bl	8029e08 <memset>
  if(huart->Instance==USART3)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a25      	ldr	r2, [pc, #148]	; (8002924 <HAL_UART_MspInit+0xc0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d142      	bne.n	800291a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002894:	2302      	movs	r3, #2
 8002896:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	4618      	mov	r0, r3
 80028a4:	f010 f9d2 	bl	8012c4c <HAL_RCCEx_PeriphCLKConfig>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028ae:	f7ff fbb5 	bl	800201c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_UART_MspInit+0xc4>)
 80028b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <HAL_UART_MspInit+0xc4>)
 80028ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_UART_MspInit+0xc4>)
 80028c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_UART_MspInit+0xc4>)
 80028d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d6:	4a14      	ldr	r2, [pc, #80]	; (8002928 <HAL_UART_MspInit+0xc4>)
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_UART_MspInit+0xc4>)
 80028e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80028ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002902:	2303      	movs	r3, #3
 8002904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002908:	2307      	movs	r3, #7
 800290a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002912:	4619      	mov	r1, r3
 8002914:	4805      	ldr	r0, [pc, #20]	; (800292c <HAL_UART_MspInit+0xc8>)
 8002916:	f00c fba1 	bl	800f05c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800291a:	bf00      	nop
 800291c:	37e0      	adds	r7, #224	; 0xe0
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40004800 	.word	0x40004800
 8002928:	58024400 	.word	0x58024400
 800292c:	58020400 	.word	0x58020400

08002930 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002930:	b580      	push	{r7, lr}
 8002932:	b0b6      	sub	sp, #216	; 0xd8
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002936:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002946:	4b4f      	ldr	r3, [pc, #316]	; (8002a84 <HAL_FMC_MspInit+0x154>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 8096 	bne.w	8002a7c <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 8002950:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <HAL_FMC_MspInit+0x154>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	22bc      	movs	r2, #188	; 0xbc
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f027 fa52 	bl	8029e08 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002968:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800296a:	2300      	movs	r3, #0
 800296c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800296e:	f107 0308 	add.w	r3, r7, #8
 8002972:	4618      	mov	r0, r3
 8002974:	f010 f96a 	bl	8012c4c <HAL_RCCEx_PeriphCLKConfig>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 800297e:	f7ff fb4d 	bl	800201c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_FMC_MspInit+0x158>)
 8002984:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002988:	4a3f      	ldr	r2, [pc, #252]	; (8002a88 <HAL_FMC_MspInit+0x158>)
 800298a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800298e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_FMC_MspInit+0x158>)
 8002994:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80029a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80029a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b4:	2303      	movs	r3, #3
 80029b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029ba:	230c      	movs	r3, #12
 80029bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029c4:	4619      	mov	r1, r3
 80029c6:	4831      	ldr	r0, [pc, #196]	; (8002a8c <HAL_FMC_MspInit+0x15c>)
 80029c8:	f00c fb48 	bl	800f05c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80029cc:	f248 1333 	movw	r3, #33075	; 0x8133
 80029d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e0:	2303      	movs	r3, #3
 80029e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029e6:	230c      	movs	r3, #12
 80029e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029f0:	4619      	mov	r1, r3
 80029f2:	4827      	ldr	r0, [pc, #156]	; (8002a90 <HAL_FMC_MspInit+0x160>)
 80029f4:	f00c fb32 	bl	800f05c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80029f8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80029fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a12:	230c      	movs	r3, #12
 8002a14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	481d      	ldr	r0, [pc, #116]	; (8002a94 <HAL_FMC_MspInit+0x164>)
 8002a20:	f00c fb1c 	bl	800f05c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8002a24:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a3e:	230c      	movs	r3, #12
 8002a40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4813      	ldr	r0, [pc, #76]	; (8002a98 <HAL_FMC_MspInit+0x168>)
 8002a4c:	f00c fb06 	bl	800f05c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a50:	23e0      	movs	r3, #224	; 0xe0
 8002a52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	2302      	movs	r3, #2
 8002a58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a62:	2303      	movs	r3, #3
 8002a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a68:	230c      	movs	r3, #12
 8002a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a6e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a72:	4619      	mov	r1, r3
 8002a74:	4809      	ldr	r0, [pc, #36]	; (8002a9c <HAL_FMC_MspInit+0x16c>)
 8002a76:	f00c faf1 	bl	800f05c <HAL_GPIO_Init>
 8002a7a:	e000      	b.n	8002a7e <HAL_FMC_MspInit+0x14e>
    return;
 8002a7c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a7e:	37d8      	adds	r7, #216	; 0xd8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	240001a0 	.word	0x240001a0
 8002a88:	58024400 	.word	0x58024400
 8002a8c:	58021000 	.word	0x58021000
 8002a90:	58021800 	.word	0x58021800
 8002a94:	58020c00 	.word	0x58020c00
 8002a98:	58021400 	.word	0x58021400
 8002a9c:	58021c00 	.word	0x58021c00

08002aa0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002aa8:	f7ff ff42 	bl	8002930 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <HAL_FMC_MspDeInit+0x58>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d123      	bne.n	8002b08 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_FMC_MspDeInit+0x58>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_FMC_MspDeInit+0x5c>)
 8002ac8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002acc:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <HAL_FMC_MspDeInit+0x5c>)
 8002ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ad2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8002ad6:	f64f 7183 	movw	r1, #65411	; 0xff83
 8002ada:	480e      	ldr	r0, [pc, #56]	; (8002b14 <HAL_FMC_MspDeInit+0x60>)
 8002adc:	f00c fc6e 	bl	800f3bc <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002ae0:	f248 1133 	movw	r1, #33075	; 0x8133
 8002ae4:	480c      	ldr	r0, [pc, #48]	; (8002b18 <HAL_FMC_MspDeInit+0x64>)
 8002ae6:	f00c fc69 	bl	800f3bc <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002aea:	f24c 7103 	movw	r1, #50947	; 0xc703
 8002aee:	480b      	ldr	r0, [pc, #44]	; (8002b1c <HAL_FMC_MspDeInit+0x68>)
 8002af0:	f00c fc64 	bl	800f3bc <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8002af4:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8002af8:	4809      	ldr	r0, [pc, #36]	; (8002b20 <HAL_FMC_MspDeInit+0x6c>)
 8002afa:	f00c fc5f 	bl	800f3bc <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8002afe:	21e0      	movs	r1, #224	; 0xe0
 8002b00:	4808      	ldr	r0, [pc, #32]	; (8002b24 <HAL_FMC_MspDeInit+0x70>)
 8002b02:	f00c fc5b 	bl	800f3bc <HAL_GPIO_DeInit>
 8002b06:	e000      	b.n	8002b0a <HAL_FMC_MspDeInit+0x56>
    return;
 8002b08:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	240001a4 	.word	0x240001a4
 8002b10:	58024400 	.word	0x58024400
 8002b14:	58021000 	.word	0x58021000
 8002b18:	58021800 	.word	0x58021800
 8002b1c:	58020c00 	.word	0x58020c00
 8002b20:	58021400 	.word	0x58021400
 8002b24:	58021c00 	.word	0x58021c00

08002b28 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 8002b30:	f7ff ffc0 	bl	8002ab4 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b090      	sub	sp, #64	; 0x40
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b0f      	cmp	r3, #15
 8002b48:	d827      	bhi.n	8002b9a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	2036      	movs	r0, #54	; 0x36
 8002b50:	f00b ff74 	bl	800ea3c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b54:	2036      	movs	r0, #54	; 0x36
 8002b56:	f00b ff8b 	bl	800ea70 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002b5a:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <HAL_InitTick+0xc4>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <HAL_InitTick+0xc8>)
 8002b62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b66:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <HAL_InitTick+0xc8>)
 8002b68:	f043 0310 	orr.w	r3, r3, #16
 8002b6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_InitTick+0xc8>)
 8002b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b7e:	f107 0210 	add.w	r2, r7, #16
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f010 f81d 	bl	8012bc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d106      	bne.n	8002ba6 <HAL_InitTick+0x6a>
 8002b98:	e001      	b.n	8002b9e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e02b      	b.n	8002bf6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b9e:	f00f ffe7 	bl	8012b70 <HAL_RCC_GetPCLK1Freq>
 8002ba2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002ba4:	e004      	b.n	8002bb0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ba6:	f00f ffe3 	bl	8012b70 <HAL_RCC_GetPCLK1Freq>
 8002baa:	4603      	mov	r3, r0
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb2:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <HAL_InitTick+0xcc>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	0c9b      	lsrs	r3, r3, #18
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <HAL_InitTick+0xd0>)
 8002bc0:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <HAL_InitTick+0xd4>)
 8002bc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_InitTick+0xd0>)
 8002bc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002bcc:	4a0f      	ldr	r2, [pc, #60]	; (8002c0c <HAL_InitTick+0xd0>)
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_InitTick+0xd0>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <HAL_InitTick+0xd0>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002bde:	480b      	ldr	r0, [pc, #44]	; (8002c0c <HAL_InitTick+0xd0>)
 8002be0:	f012 fd19 	bl	8015616 <HAL_TIM_Base_Init>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d104      	bne.n	8002bf4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002bea:	4808      	ldr	r0, [pc, #32]	; (8002c0c <HAL_InitTick+0xd0>)
 8002bec:	f012 fd74 	bl	80156d8 <HAL_TIM_Base_Start_IT>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	e000      	b.n	8002bf6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3740      	adds	r7, #64	; 0x40
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	24000064 	.word	0x24000064
 8002c04:	58024400 	.word	0x58024400
 8002c08:	431bde83 	.word	0x431bde83
 8002c0c:	2400b578 	.word	0x2400b578
 8002c10:	40001000 	.word	0x40001000

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <NMI_Handler+0x4>

08002c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <HardFault_Handler+0x4>

08002c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <MemManage_Handler+0x4>

08002c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2a:	e7fe      	b.n	8002c2a <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <TIM6_DAC_IRQHandler+0x10>)
 8002c46:	f012 fdbf 	bl	80157c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2400b578 	.word	0x2400b578

08002c54 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <LTDC_IRQHandler+0x10>)
 8002c5a:	f00d fc2b 	bl	80104b4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	2400b320 	.word	0x2400b320

08002c68 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <DMA2D_IRQHandler+0x10>)
 8002c6e:	f00c f8e5 	bl	800ee3c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	2400b400 	.word	0x2400b400

08002c7c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <QUADSPI_IRQHandler+0x10>)
 8002c82:	f00e f911 	bl	8010ea8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2400b52c 	.word	0x2400b52c

08002c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
	return 1;
 8002c94:	2301      	movs	r3, #1
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_kill>:

int _kill(int pid, int sig)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002caa:	f027 f853 	bl	8029d54 <__errno>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2216      	movs	r2, #22
 8002cb2:	601a      	str	r2, [r3, #0]
	return -1;
 8002cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_exit>:

void _exit (int status)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ffe7 	bl	8002ca0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cd2:	e7fe      	b.n	8002cd2 <_exit+0x12>

08002cd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e00a      	b.n	8002cfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ce6:	f3af 8000 	nop.w
 8002cea:	4601      	mov	r1, r0
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	60ba      	str	r2, [r7, #8]
 8002cf2:	b2ca      	uxtb	r2, r1
 8002cf4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	dbf0      	blt.n	8002ce6 <_read+0x12>
	}

return len;
 8002d04:	687b      	ldr	r3, [r7, #4]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	e009      	b.n	8002d34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	60ba      	str	r2, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3301      	adds	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	dbf1      	blt.n	8002d20 <_write+0x12>
	}
	return len;
 8002d3c:	687b      	ldr	r3, [r7, #4]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <_close>:

int _close(int file)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d6e:	605a      	str	r2, [r3, #4]
	return 0;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_isatty>:

int _isatty(int file)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
	return 1;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
	return 0;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db8:	4a14      	ldr	r2, [pc, #80]	; (8002e0c <_sbrk+0x5c>)
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <_sbrk+0x60>)
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <_sbrk+0x64>)
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <_sbrk+0x68>)
 8002dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <_sbrk+0x64>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d207      	bcs.n	8002df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de0:	f026 ffb8 	bl	8029d54 <__errno>
 8002de4:	4603      	mov	r3, r0
 8002de6:	220c      	movs	r2, #12
 8002de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
 8002dee:	e009      	b.n	8002e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <_sbrk+0x64>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002df6:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <_sbrk+0x64>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	4a05      	ldr	r2, [pc, #20]	; (8002e14 <_sbrk+0x64>)
 8002e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e02:	68fb      	ldr	r3, [r7, #12]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	24080000 	.word	0x24080000
 8002e10:	00001000 	.word	0x00001000
 8002e14:	240001a8 	.word	0x240001a8
 8002e18:	2400b6a8 	.word	0x2400b6a8

08002e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e20:	f009 f86a 	bl	800bef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e24:	480c      	ldr	r0, [pc, #48]	; (8002e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e26:	490d      	ldr	r1, [pc, #52]	; (8002e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e28:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e2c:	e002      	b.n	8002e34 <LoopCopyDataInit>

08002e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e32:	3304      	adds	r3, #4

08002e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e38:	d3f9      	bcc.n	8002e2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e3c:	4c0a      	ldr	r4, [pc, #40]	; (8002e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e40:	e001      	b.n	8002e46 <LoopFillZerobss>

08002e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e44:	3204      	adds	r2, #4

08002e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e48:	d3fb      	bcc.n	8002e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e4a:	f026 ff9b 	bl	8029d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4e:	f7fe fbf1 	bl	8001634 <main>
  bx  lr
 8002e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e54:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e5c:	24000148 	.word	0x24000148
  ldr r2, =_sidata
 8002e60:	0802ecc4 	.word	0x0802ecc4
  ldr r2, =_sbss
 8002e64:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8002e68:	2400b6a4 	.word	0x2400b6a4

08002e6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <ADC3_IRQHandler>

08002e6e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8002e72:	f001 fc69 	bl	8004748 <touchgfx_init>
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8002e82:	f001 fc8b 	bl	800479c <touchgfx_taskEntry>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
    {
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	601a      	str	r2, [r3, #0]
    }
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	0802b9a8 	.word	0x0802b9a8

08002eb0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
    }
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ffe9 	bl	8002e90 <_ZN8touchgfx15TouchControllerD1Ev>
 8002ebe:	2104      	movs	r1, #4
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f026 fee6 	bl	8029c92 <_ZdlPvj>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 8002ed8:	f000 faa8 	bl	800342c <_ZN25STM32H745ITouchController4initEv>
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	68b8      	ldr	r0, [r7, #8]
 8002ef4:	f000 fabe 	bl	8003474 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ffbb 	bl	8002e90 <_ZN8touchgfx15TouchControllerD1Ev>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0802b990 	.word	0x0802b990

08002f28 <_ZN20STM32TouchControllerD0Ev>:
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ffe7 	bl	8002f04 <_ZN20STM32TouchControllerD1Ev>
 8002f36:	2104      	movs	r1, #4
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f026 feaa 	bl	8029c92 <_ZdlPvj>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d80c      	bhi.n	8002f72 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8002f58:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	08002f71 	.word	0x08002f71
 8002f68:	08002f71 	.word	0x08002f71
 8002f6c:	08002f71 	.word	0x08002f71
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 8002f70:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop

08002f80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d80c      	bhi.n	8002faa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8002f90:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8002f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f96:	bf00      	nop
 8002f98:	08002fa9 	.word	0x08002fa9
 8002f9c:	08002fa9 	.word	0x08002fa9
 8002fa0:	08002fa9 	.word	0x08002fa9
 8002fa4:	08002fa9 	.word	0x08002fa9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 8002fa8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop

08002fb8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d80c      	bhi.n	8002fe2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8002fc8:	a201      	add	r2, pc, #4	; (adr r2, 8002fd0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8002fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fce:	bf00      	nop
 8002fd0:	08002fe1 	.word	0x08002fe1
 8002fd4:	08002fe1 	.word	0x08002fe1
 8002fd8:	08002fe1 	.word	0x08002fe1
 8002fdc:	08002fe1 	.word	0x08002fe1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8002fe0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop

08002ff0 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    {
 8002ff8:	4a04      	ldr	r2, [pc, #16]	; (800300c <_ZN8touchgfx3HALD1Ev+0x1c>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	601a      	str	r2, [r3, #0]
    }
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	0802ca50 	.word	0x0802ca50

08003010 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
    }
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ffe9 	bl	8002ff0 <_ZN8touchgfx3HALD1Ev>
 800301e:	217c      	movs	r1, #124	; 0x7c
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f026 fe36 	bl	8029c92 <_ZdlPvj>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	807b      	strh	r3, [r7, #2]
 8003064:	4613      	mov	r3, r2
 8003066:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	887a      	ldrh	r2, [r7, #2]
 800306e:	429a      	cmp	r2, r3
 8003070:	d304      	bcc.n	800307c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	883a      	ldrh	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d205      	bcs.n	8003088 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800307c:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8003080:	219e      	movs	r1, #158	; 0x9e
 8003082:	480a      	ldr	r0, [pc, #40]	; (80030ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8003084:	f026 fe34 	bl	8029cf0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8003088:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800308e:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8003090:	883b      	ldrh	r3, [r7, #0]
 8003092:	8013      	strh	r3, [r2, #0]
    }
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	2400af38 	.word	0x2400af38
 80030a0:	2400af3a 	.word	0x2400af3a
 80030a4:	0802ae5c 	.word	0x0802ae5c
 80030a8:	0802aec0 	.word	0x0802aec0
 80030ac:	0802af04 	.word	0x0802af04
 80030b0:	2400af3e 	.word	0x2400af3e
 80030b4:	2400af40 	.word	0x2400af40

080030b8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4610      	mov	r0, r2
 80030d8:	4798      	blx	r3
 80030da:	4603      	mov	r3, r0
 80030dc:	e000      	b.n	80030e0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80030de:	2300      	movs	r3, #0
    }
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f015 ff69 	bl	8018fc8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	33a4      	adds	r3, #164	; 0xa4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
    }
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
    {
        return false;
 8003114:	2300      	movs	r3, #0
    }
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d106      	bne.n	8003146 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800313a:	4a12      	ldr	r2, [pc, #72]	; (8003184 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800313c:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8003140:	4811      	ldr	r0, [pc, #68]	; (8003188 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8003142:	f026 fdd5 	bl	8029cf0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2da      	uxtb	r2, r3
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8003166:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf14      	ite	ne
 800316e:	2301      	movne	r3, #1
 8003170:	2300      	moveq	r3, #0
 8003172:	b2da      	uxtb	r2, r3
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8003176:	701a      	strb	r2, [r3, #0]
    }
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	0802af58 	.word	0x0802af58
 8003184:	0802af90 	.word	0x0802af90
 8003188:	0802af04 	.word	0x0802af04
 800318c:	2400af42 	.word	0x2400af42
 8003190:	2400af43 	.word	0x2400af43

08003194 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800319c:	2300      	movs	r3, #0
    }
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	460b      	mov	r3, r1
 80031b4:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	4610      	mov	r0, r2
 80031c6:	4798      	blx	r3
        }
    }
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80031d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3318      	adds	r3, #24
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4610      	mov	r0, r2
 8003200:	4798      	blx	r3
 8003202:	4603      	mov	r3, r0
    }
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003220:	429a      	cmp	r2, r3
 8003222:	d011      	beq.n	8003248 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d11e      	bne.n	800326a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8003232:	4b13      	ldr	r3, [pc, #76]	; (8003280 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8003234:	881a      	ldrh	r2, [r3, #0]
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8003238:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800323a:	4a11      	ldr	r2, [pc, #68]	; (8003280 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800323c:	89bb      	ldrh	r3, [r7, #12]
 800323e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8003240:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8003246:	e010      	b.n	800326a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00c      	beq.n	800326a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8003258:	881a      	ldrh	r2, [r3, #0]
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800325c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800325e:	4a08      	ldr	r2, [pc, #32]	; (8003280 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8003260:	89fb      	ldrh	r3, [r7, #14]
 8003262:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
    }
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	2400af3c 	.word	0x2400af3c
 800327c:	2400af3a 	.word	0x2400af3a
 8003280:	2400af38 	.word	0x2400af38

08003284 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4618      	mov	r0, r3
 8003290:	f015 f84f 	bl	8018332 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	4a05      	ldr	r2, [pc, #20]	; (80032bc <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fe9f 	bl	8002ff0 <_ZN8touchgfx3HALD1Ev>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	0802bd10 	.word	0x0802bd10

080032c0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ffe7 	bl	800329c <_ZN20TouchGFXGeneratedHALD1Ev>
 80032ce:	217c      	movs	r1, #124	; 0x7c
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f026 fcde 	bl	8029c92 <_ZdlPvj>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff ffca 	bl	8003284 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4618      	mov	r0, r3
 8003304:	f001 fd3a 	bl	8004d7c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4618      	mov	r0, r3
 800331c:	f001 fdc6 	bl	8004eac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6839      	ldr	r1, [r7, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f001 fdc5 	bl	8004ec8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6839      	ldr	r1, [r7, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f001 fdcd 	bl	8004ef4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	f001 fe14 	bl	8004fa4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800337c:	4603      	mov	r3, r0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4618      	mov	r0, r3
 8003392:	f001 fd17 	bl	8004dc4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 fd1b 	bl	8004de4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f001 fd1d 	bl	8004e00 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4618      	mov	r0, r3
 80033da:	f001 fd1f 	bl	8004e1c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	4a05      	ldr	r2, [pc, #20]	; (8003408 <_ZN11TouchGFXHALD1Ev+0x20>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff4f 	bl	800329c <_ZN20TouchGFXGeneratedHALD1Ev>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	0802b9c0 	.word	0x0802b9c0

0800340c <_ZN11TouchGFXHALD0Ev>:
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff ffe7 	bl	80033e8 <_ZN11TouchGFXHALD1Ev>
 800341a:	217c      	movs	r1, #124	; 0x7c
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f026 fc38 	bl	8029c92 <_ZdlPvj>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8003432:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003436:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8003438:	f44f 7388 	mov.w	r3, #272	; 0x110
 800343c:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 800343e:	2308      	movs	r3, #8
 8003440:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8003446:	463b      	mov	r3, r7
 8003448:	4619      	mov	r1, r3
 800344a:	2000      	movs	r0, #0
 800344c:	f00a ff16 	bl	800e27c <BSP_TS_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf14      	ite	ne
 8003456:	2301      	movne	r3, #1
 8003458:	2300      	moveq	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d103      	bne.n	8003468 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	e000      	b.n	800346a <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8003468:	bf00      	nop
}
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	240001ac 	.word	0x240001ac

08003474 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	f083 0301 	eor.w	r3, r3, #1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 800348c:	2300      	movs	r3, #0
 800348e:	e014      	b.n	80034ba <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8003490:	490d      	ldr	r1, [pc, #52]	; (80034c8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8003492:	2000      	movs	r0, #0
 8003494:	f00a ffae 	bl	800e3f4 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e00a      	b.n	80034ba <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	461a      	mov	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	461a      	mov	r2, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	601a      	str	r2, [r3, #0]
    return true;
 80034b8:	2301      	movs	r3, #1
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	240001ac 	.word	0x240001ac
 80034c8:	240001b0 	.word	0x240001b0

080034cc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80034d0:	2200      	movs	r2, #0
 80034d2:	2101      	movs	r1, #1
 80034d4:	2001      	movs	r0, #1
 80034d6:	f005 fa48 	bl	800896a <osSemaphoreNew>
 80034da:	4603      	mov	r3, r0
 80034dc:	4a0f      	ldr	r2, [pc, #60]	; (800351c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80034de:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80034e0:	4b0e      	ldr	r3, [pc, #56]	; (800351c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80034ea:	4a0e      	ldr	r2, [pc, #56]	; (8003524 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80034ec:	2128      	movs	r1, #40	; 0x28
 80034ee:	480e      	ldr	r0, [pc, #56]	; (8003528 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80034f0:	f026 fbfe 	bl	8029cf0 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80034f4:	2200      	movs	r2, #0
 80034f6:	2104      	movs	r1, #4
 80034f8:	2001      	movs	r0, #1
 80034fa:	f005 fb55 	bl	8008ba8 <osMessageQueueNew>
 80034fe:	4603      	mov	r3, r0
 8003500:	4a0a      	ldr	r2, [pc, #40]	; (800352c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8003502:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d105      	bne.n	8003518 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800350c:	4b08      	ldr	r3, [pc, #32]	; (8003530 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800350e:	4a05      	ldr	r2, [pc, #20]	; (8003524 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	4805      	ldr	r0, [pc, #20]	; (8003528 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8003514:	f026 fbec 	bl	8029cf0 <__assert_func>
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}
 800351c:	240001bc 	.word	0x240001bc
 8003520:	0802afe0 	.word	0x0802afe0
 8003524:	0802b02c 	.word	0x0802b02c
 8003528:	0802b05c 	.word	0x0802b05c
 800352c:	240001c0 	.word	0x240001c0
 8003530:	0802b0ac 	.word	0x0802b0ac

08003534 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f04f 31ff 	mov.w	r1, #4294967295
 8003540:	4618      	mov	r0, r3
 8003542:	f005 fa9b 	bl	8008a7c <osSemaphoreAcquire>
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	240001bc 	.word	0x240001bc

08003550 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f005 fae1 	bl	8008b20 <osSemaphoreRelease>
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	240001bc 	.word	0x240001bc

08003568 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f005 fa82 	bl	8008a7c <osSemaphoreAcquire>
}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}
 800357c:	240001bc 	.word	0x240001bc

08003580 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f005 fac9 	bl	8008b20 <osSemaphoreRelease>
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	240001bc 	.word	0x240001bc

08003598 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	2300      	movs	r3, #0
 80035a2:	2200      	movs	r2, #0
 80035a4:	4903      	ldr	r1, [pc, #12]	; (80035b4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80035a6:	f005 fb73 	bl	8008c90 <osMessageQueuePut>
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	240001c0 	.word	0x240001c0
 80035b4:	24000020 	.word	0x24000020

080035b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	1d39      	adds	r1, r7, #4
 80035c4:	2300      	movs	r3, #0
 80035c6:	2200      	movs	r2, #0
 80035c8:	f005 fbc2 	bl	8008d50 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	1d39      	adds	r1, r7, #4
 80035d2:	f04f 33ff 	mov.w	r3, #4294967295
 80035d6:	2200      	movs	r2, #0
 80035d8:	f005 fbba 	bl	8008d50 <osMessageQueueGet>
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	240001c0 	.word	0x240001c0

080035e8 <__NVIC_EnableIRQ>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	db0b      	blt.n	8003612 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	4907      	ldr	r1, [pc, #28]	; (8003620 <__NVIC_EnableIRQ+0x38>)
 8003602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2001      	movs	r0, #1
 800360a:	fa00 f202 	lsl.w	r2, r0, r2
 800360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000e100 	.word	0xe000e100

08003624 <__NVIC_DisableIRQ>:
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800362e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003632:	2b00      	cmp	r3, #0
 8003634:	db12      	blt.n	800365c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	f003 021f 	and.w	r2, r3, #31
 800363c:	490a      	ldr	r1, [pc, #40]	; (8003668 <__NVIC_DisableIRQ+0x44>)
 800363e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	2001      	movs	r0, #1
 8003646:	fa00 f202 	lsl.w	r2, r0, r2
 800364a:	3320      	adds	r3, #32
 800364c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003650:	f3bf 8f4f 	dsb	sy
}
 8003654:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003656:	f3bf 8f6f 	isb	sy
}
 800365a:	bf00      	nop
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000e100 	.word	0xe000e100

0800366c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
        : color(0)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
    {
    }
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
    {
        return color;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
    }
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
    {
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	601a      	str	r2, [r3, #0]
    }
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	0802bae0 	.word	0x0802bae0

080036c0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
    }
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ffe9 	bl	80036a0 <_ZN8touchgfx9DMA_QueueD1Ev>
 80036ce:	2104      	movs	r1, #4
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f026 fade 	bl	8029c92 <_ZdlPvj>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3344      	adds	r3, #68	; 0x44
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
    }
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
    {
 8003704:	4a04      	ldr	r2, [pc, #16]	; (8003718 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	601a      	str	r2, [r3, #0]
    }
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	0802cfa8 	.word	0x0802cfa8

0800371c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
    }
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ffe9 	bl	80036fc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800372a:	210c      	movs	r1, #12
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f026 fab0 	bl	8029c92 <_ZdlPvj>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	721a      	strb	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	725a      	strb	r2, [r3, #9]
    {
    }
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	0802cfa8 	.word	0x0802cfa8

08003770 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8003778:	2301      	movs	r3, #1
    }
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3328      	adds	r3, #40	; 0x28
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4610      	mov	r0, r2
 800379a:	4798      	blx	r3
    }
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
        return instance;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80037aa:	681b      	ldr	r3, [r3, #0]
    }
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	2400af44 	.word	0x2400af44

080037bc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3314      	adds	r3, #20
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4610      	mov	r0, r2
 80037d4:	4798      	blx	r3
    }
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80037e6:	f7ff ffdd 	bl	80037a4 <_ZN8touchgfx3HAL11getInstanceEv>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff ffe5 	bl	80037bc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	330c      	adds	r3, #12
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff ff30 	bl	800366c <_ZN8touchgfx9colortypeC1Ev>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8003818:	b5b0      	push	{r4, r5, r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	330c      	adds	r3, #12
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f7ff ff87 	bl	800373c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800382e:	4a0e      	ldr	r2, [pc, #56]	; (8003868 <_ZN8STM32DMAC1Ev+0x50>)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f103 000c 	add.w	r0, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3320      	adds	r3, #32
 800383e:	2260      	movs	r2, #96	; 0x60
 8003840:	4619      	mov	r1, r3
 8003842:	f015 fd27 	bl	8019294 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3320      	adds	r3, #32
 800384a:	245f      	movs	r4, #95	; 0x5f
 800384c:	461d      	mov	r5, r3
 800384e:	2c00      	cmp	r4, #0
 8003850:	db05      	blt.n	800385e <_ZN8STM32DMAC1Ev+0x46>
 8003852:	4628      	mov	r0, r5
 8003854:	f7ff ffd1 	bl	80037fa <_ZN8touchgfx6BlitOpC1Ev>
 8003858:	3520      	adds	r5, #32
 800385a:	3c01      	subs	r4, #1
 800385c:	e7f7      	b.n	800384e <_ZN8STM32DMAC1Ev+0x36>
{
}
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bdb0      	pop	{r4, r5, r7, pc}
 8003868:	0802ba90 	.word	0x0802ba90

0800386c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	4a09      	ldr	r2, [pc, #36]	; (800389c <_ZN8STM32DMAD1Ev+0x30>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800387a:	205a      	movs	r0, #90	; 0x5a
 800387c:	f7ff fed2 	bl	8003624 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	330c      	adds	r3, #12
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fac7 	bl	8003e18 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff35 	bl	80036fc <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	0802ba90 	.word	0x0802ba90

080038a0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
}
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff ffdf 	bl	800386c <_ZN8STM32DMAD1Ev>
 80038ae:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f026 f9ed 	bl	8029c92 <_ZdlPvj>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <_ZN8STM32DMA10initializeEv+0x54>)
 80038ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80038d2:	4a11      	ldr	r2, [pc, #68]	; (8003918 <_ZN8STM32DMA10initializeEv+0x54>)
 80038d4:	f043 0310 	orr.w	r3, r3, #16
 80038d8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <_ZN8STM32DMA10initializeEv+0x54>)
 80038de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <_ZN8STM32DMA10initializeEv+0x54>)
 80038ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <_ZN8STM32DMA10initializeEv+0x54>)
 80038f0:	f043 0310 	orr.w	r3, r3, #16
 80038f4:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <_ZN8STM32DMA10initializeEv+0x54>)
 80038f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fa:	4a07      	ldr	r2, [pc, #28]	; (8003918 <_ZN8STM32DMA10initializeEv+0x54>)
 80038fc:	f023 0310 	bic.w	r3, r3, #16
 8003900:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <_ZN8STM32DMA10initializeEv+0x58>)
 8003904:	4a06      	ldr	r2, [pc, #24]	; (8003920 <_ZN8STM32DMA10initializeEv+0x5c>)
 8003906:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003908:	205a      	movs	r0, #90	; 0x5a
 800390a:	f7ff fe6d 	bl	80035e8 <__NVIC_EnableIRQ>
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	58024400 	.word	0x58024400
 800391c:	2400b400 	.word	0x2400b400
 8003920:	080037df 	.word	0x080037df

08003924 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	2b0b      	cmp	r3, #11
 8003938:	d826      	bhi.n	8003988 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	0800397d 	.word	0x0800397d
 8003944:	08003977 	.word	0x08003977
 8003948:	08003971 	.word	0x08003971
 800394c:	08003989 	.word	0x08003989
 8003950:	08003989 	.word	0x08003989
 8003954:	08003989 	.word	0x08003989
 8003958:	08003989 	.word	0x08003989
 800395c:	08003983 	.word	0x08003983
 8003960:	08003983 	.word	0x08003983
 8003964:	08003983 	.word	0x08003983
 8003968:	08003983 	.word	0x08003983
 800396c:	08003983 	.word	0x08003983
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
        break;
 8003974:	e00e      	b.n	8003994 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8003976:	2301      	movs	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
        break;
 800397a:	e00b      	b.n	8003994 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800397c:	2302      	movs	r3, #2
 800397e:	60fb      	str	r3, [r7, #12]
        break;
 8003980:	e008      	b.n	8003994 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8003982:	2305      	movs	r3, #5
 8003984:	60fb      	str	r3, [r7, #12]
        break;
 8003986:	e005      	b.n	8003994 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800398a:	4a06      	ldr	r2, [pc, #24]	; (80039a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800398c:	2166      	movs	r1, #102	; 0x66
 800398e:	4806      	ldr	r0, [pc, #24]	; (80039a8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8003990:	f026 f9ae 	bl	8029cf0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003994:	68fb      	ldr	r3, [r7, #12]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	0802b0f0 	.word	0x0802b0f0
 80039a4:	0802b10c 	.word	0x0802b10c
 80039a8:	0802b158 	.word	0x0802b158

080039ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]

    switch (format)
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	2b0a      	cmp	r3, #10
 80039c0:	d821      	bhi.n	8003a06 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	08003a01 	.word	0x08003a01
 80039cc:	080039fb 	.word	0x080039fb
 80039d0:	080039f5 	.word	0x080039f5
 80039d4:	08003a07 	.word	0x08003a07
 80039d8:	08003a07 	.word	0x08003a07
 80039dc:	08003a07 	.word	0x08003a07
 80039e0:	08003a07 	.word	0x08003a07
 80039e4:	080039fb 	.word	0x080039fb
 80039e8:	080039fb 	.word	0x080039fb
 80039ec:	080039fb 	.word	0x080039fb
 80039f0:	080039fb 	.word	0x080039fb
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
        break;
 80039f8:	e00b      	b.n	8003a12 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80039fa:	2301      	movs	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
        break;
 80039fe:	e008      	b.n	8003a12 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003a00:	2302      	movs	r3, #2
 8003a02:	60fb      	str	r3, [r7, #12]
        break;
 8003a04:	e005      	b.n	8003a12 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8003a08:	4a05      	ldr	r2, [pc, #20]	; (8003a20 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8003a0a:	2187      	movs	r1, #135	; 0x87
 8003a0c:	4805      	ldr	r0, [pc, #20]	; (8003a24 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8003a0e:	f026 f96f 	bl	8029cf0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003a12:	68fb      	ldr	r3, [r7, #12]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	0802b0f0 	.word	0x0802b0f0
 8003a20:	0802b1a4 	.word	0x0802b1a4
 8003a24:	0802b158 	.word	0x0802b158

08003a28 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8003a30:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	7f5b      	ldrb	r3, [r3, #29]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff67 	bl	8003924 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003a56:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	7f9b      	ldrb	r3, [r3, #30]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ff60 	bl	8003924 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003a64:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	7f9b      	ldrb	r3, [r3, #30]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ff9d 	bl	80039ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003a72:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	8b5b      	ldrh	r3, [r3, #26]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	8a9b      	ldrh	r3, [r3, #20]
 8003a7e:	1ad2      	subs	r2, r2, r3
 8003a80:	4b96      	ldr	r3, [pc, #600]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	8b5b      	ldrh	r3, [r3, #26]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	8a9b      	ldrh	r3, [r3, #20]
 8003a8e:	1ad2      	subs	r2, r2, r3
 8003a90:	4b92      	ldr	r3, [pc, #584]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003a92:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	8b1b      	ldrh	r3, [r3, #24]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	8a9b      	ldrh	r3, [r3, #20]
 8003a9e:	1ad2      	subs	r2, r2, r3
 8003aa0:	4b8e      	ldr	r3, [pc, #568]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003aa2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003aa4:	4a8d      	ldr	r2, [pc, #564]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	8adb      	ldrh	r3, [r3, #22]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	8a9b      	ldrh	r3, [r3, #20]
 8003ab4:	041b      	lsls	r3, r3, #16
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	4b88      	ldr	r3, [pc, #544]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003aba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	4b86      	ldr	r3, [pc, #536]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003ac2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	4b84      	ldr	r3, [pc, #528]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003aca:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad4:	d036      	beq.n	8003b44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 8003ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ada:	f200 80e2 	bhi.w	8003ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8003ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae2:	d014      	beq.n	8003b0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8003ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae8:	f200 80db 	bhi.w	8003ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8003aec:	2b80      	cmp	r3, #128	; 0x80
 8003aee:	d059      	beq.n	8003ba4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 8003af0:	2b80      	cmp	r3, #128	; 0x80
 8003af2:	f200 80d6 	bhi.w	8003ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	f000 80be 	beq.w	8003c78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	f200 80d0 	bhi.w	8003ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d039      	beq.n	8003b7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	f000 80b6 	beq.w	8003c78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8003b0c:	e0c9      	b.n	8003ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	7f1b      	ldrb	r3, [r3, #28]
 8003b12:	061b      	lsls	r3, r3, #24
 8003b14:	4619      	mov	r1, r3
 8003b16:	4a71      	ldr	r2, [pc, #452]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b18:	4b71      	ldr	r3, [pc, #452]	; (8003ce0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	4c6e      	ldr	r4, [pc, #440]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fdaf 	bl	8003688 <_ZNK8touchgfx9colortypecvmEv>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003b2e:	4a6b      	ldr	r2, [pc, #428]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	4b68      	ldr	r3, [pc, #416]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b3a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003b3c:	4b67      	ldr	r3, [pc, #412]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b3e:	4a69      	ldr	r2, [pc, #420]	; (8003ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8003b40:	601a      	str	r2, [r3, #0]
        break;
 8003b42:	e0c7      	b.n	8003cd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	7f1b      	ldrb	r3, [r3, #28]
 8003b48:	061b      	lsls	r3, r3, #24
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4a63      	ldr	r2, [pc, #396]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b4e:	4b66      	ldr	r3, [pc, #408]	; (8003ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003b50:	430b      	orrs	r3, r1
 8003b52:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	4c60      	ldr	r4, [pc, #384]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fd94 	bl	8003688 <_ZNK8touchgfx9colortypecvmEv>
 8003b60:	4603      	mov	r3, r0
 8003b62:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003b64:	4a5d      	ldr	r2, [pc, #372]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	4b5b      	ldr	r3, [pc, #364]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b70:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003b72:	4b5a      	ldr	r3, [pc, #360]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b74:	4a5b      	ldr	r2, [pc, #364]	; (8003ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8003b76:	601a      	str	r2, [r3, #0]
        break;
 8003b78:	e0ac      	b.n	8003cd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	7f1b      	ldrb	r3, [r3, #28]
 8003b7e:	061b      	lsls	r3, r3, #24
 8003b80:	461a      	mov	r2, r3
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	4a55      	ldr	r2, [pc, #340]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003b8e:	4a53      	ldr	r2, [pc, #332]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	4b50      	ldr	r3, [pc, #320]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b9a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003b9c:	4b4f      	ldr	r3, [pc, #316]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003b9e:	4a51      	ldr	r2, [pc, #324]	; (8003ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8003ba0:	601a      	str	r2, [r3, #0]
        break;
 8003ba2:	e097      	b.n	8003cd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1d1a      	adds	r2, r3, #4
 8003bb2:	4b4a      	ldr	r3, [pc, #296]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003bb4:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	7f1b      	ldrb	r3, [r3, #28]
 8003bba:	061b      	lsls	r3, r3, #24
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	4a46      	ldr	r2, [pc, #280]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003bca:	4a44      	ldr	r2, [pc, #272]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	4b41      	ldr	r3, [pc, #260]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003bd6:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d00d      	beq.n	8003c02 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 8003be6:	e020      	b.n	8003c2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003be8:	4b3c      	ldr	r3, [pc, #240]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	4b3f      	ldr	r3, [pc, #252]	; (8003cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	8852      	ldrh	r2, [r2, #2]
 8003bf4:	3a01      	subs	r2, #1
 8003bf6:	0212      	lsls	r2, r2, #8
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4a38      	ldr	r2, [pc, #224]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	61d3      	str	r3, [r2, #28]
                break;
 8003c00:	e01a      	b.n	8003c38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	7f1b      	ldrb	r3, [r3, #28]
 8003c06:	2bff      	cmp	r3, #255	; 0xff
 8003c08:	d101      	bne.n	8003c0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                  blend = false;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003c0e:	4b33      	ldr	r3, [pc, #204]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	4b36      	ldr	r3, [pc, #216]	; (8003cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	8852      	ldrh	r2, [r2, #2]
 8003c1a:	3a01      	subs	r2, #1
 8003c1c:	0212      	lsls	r2, r2, #8
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	4a2e      	ldr	r2, [pc, #184]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003c22:	f043 0310 	orr.w	r3, r3, #16
 8003c26:	61d3      	str	r3, [r2, #28]
                break;
 8003c28:	e006      	b.n	8003c38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8003c2a:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8003c2c:	4a31      	ldr	r2, [pc, #196]	; (8003cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8003c2e:	f240 1111 	movw	r1, #273	; 0x111
 8003c32:	4831      	ldr	r0, [pc, #196]	; (8003cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8003c34:	f026 f85c 	bl	8029cf0 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003c38:	4b28      	ldr	r3, [pc, #160]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	4a27      	ldr	r2, [pc, #156]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003c3e:	f043 0320 	orr.w	r3, r3, #32
 8003c42:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003c44:	4b25      	ldr	r3, [pc, #148]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf14      	ite	ne
 8003c50:	2301      	movne	r3, #1
 8003c52:	2300      	moveq	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d000      	beq.n	8003c5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 8003c5a:	e7f3      	b.n	8003c44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003c5c:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003c5e:	2210      	movs	r2, #16
 8003c60:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8003c62:	7ffb      	ldrb	r3, [r7, #31]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003c68:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003c6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8003c6c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 8003c6e:	e031      	b.n	8003cd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003c72:	4a22      	ldr	r2, [pc, #136]	; (8003cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8003c74:	601a      	str	r2, [r3, #0]
      break;
 8003c76:	e02d      	b.n	8003cd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	7f1b      	ldrb	r3, [r3, #28]
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	461a      	mov	r2, r3
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003c8c:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003c98:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003c9c:	4a11      	ldr	r2, [pc, #68]	; (8003ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8003c9e:	601a      	str	r2, [r3, #0]
        break;
 8003ca0:	e018      	b.n	8003cd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	7f1b      	ldrb	r3, [r3, #28]
 8003ca6:	061b      	lsls	r3, r3, #24
 8003ca8:	461a      	mov	r2, r3
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb4:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	7f5a      	ldrb	r2, [r3, #29]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	7f9b      	ldrb	r3, [r3, #30]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d003      	beq.n	8003cca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003cc4:	4a0d      	ldr	r2, [pc, #52]	; (8003cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8003cc6:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8003cc8:	e003      	b.n	8003cd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8003cca:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8003ccc:	f240 2201 	movw	r2, #513	; 0x201
 8003cd0:	601a      	str	r2, [r3, #0]
        break;
 8003cd2:	bf00      	nop
    }
}
 8003cd4:	bf00      	nop
 8003cd6:	3724      	adds	r7, #36	; 0x24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd90      	pop	{r4, r7, pc}
 8003cdc:	52001000 	.word	0x52001000
 8003ce0:	0002000a 	.word	0x0002000a
 8003ce4:	00020201 	.word	0x00020201
 8003ce8:	00020009 	.word	0x00020009
 8003cec:	ffff00ef 	.word	0xffff00ef
 8003cf0:	0802b1f0 	.word	0x0802b1f0
 8003cf4:	0802b20c 	.word	0x0802b20c
 8003cf8:	0802b158 	.word	0x0802b158
 8003cfc:	00010201 	.word	0x00010201

08003d00 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	7f9b      	ldrb	r3, [r3, #30]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff fe4b 	bl	80039ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003d16:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003d18:	4a3b      	ldr	r2, [pc, #236]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	8adb      	ldrh	r3, [r3, #22]
 8003d22:	461a      	mov	r2, r3
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	8a9b      	ldrh	r3, [r3, #20]
 8003d28:	041b      	lsls	r3, r3, #16
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003d2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003d36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	8b5b      	ldrh	r3, [r3, #26]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	8a9b      	ldrh	r3, [r3, #20]
 8003d42:	1ad2      	subs	r2, r2, r3
 8003d44:	4b30      	ldr	r3, [pc, #192]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003d46:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d12e      	bne.n	8003dae <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	8b5b      	ldrh	r3, [r3, #26]
 8003d54:	461a      	mov	r2, r3
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	8a9b      	ldrh	r3, [r3, #20]
 8003d5a:	1ad2      	subs	r2, r2, r3
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003d5e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	8b5b      	ldrh	r3, [r3, #26]
 8003d64:	461a      	mov	r2, r3
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	8a9b      	ldrh	r3, [r3, #20]
 8003d6a:	1ad2      	subs	r2, r2, r3
 8003d6c:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003d6e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003d70:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	7f1b      	ldrb	r3, [r3, #28]
 8003d7a:	061b      	lsls	r3, r3, #24
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003d80:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8003d82:	430b      	orrs	r3, r1
 8003d84:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	4c1f      	ldr	r4, [pc, #124]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fc7b 	bl	8003688 <_ZNK8touchgfx9colortypecvmEv>
 8003d92:	4603      	mov	r3, r0
 8003d94:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003d9c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003da4:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003da6:	4b18      	ldr	r3, [pc, #96]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003da8:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8003daa:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8003dac:	e027      	b.n	8003dfe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003dae:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8003db4:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff fc62 	bl	8003688 <_ZNK8touchgfx9colortypecvmEv>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fc59 	bl	8003688 <_ZNK8touchgfx9colortypecvmEv>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003dde:	431c      	orrs	r4, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fc4f 	bl	8003688 <_ZNK8touchgfx9colortypecvmEv>
 8003dea:	4603      	mov	r3, r0
 8003dec:	08db      	lsrs	r3, r3, #3
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003df4:	4323      	orrs	r3, r4
 8003df6:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8003df8:	4b03      	ldr	r3, [pc, #12]	; (8003e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8003dfa:	4a06      	ldr	r2, [pc, #24]	; (8003e14 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 8003dfc:	601a      	str	r2, [r3, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd90      	pop	{r4, r7, pc}
 8003e06:	bf00      	nop
 8003e08:	52001000 	.word	0x52001000
 8003e0c:	00010009 	.word	0x00010009
 8003e10:	00020201 	.word	0x00020201
 8003e14:	00030201 	.word	0x00030201

08003e18 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	4a05      	ldr	r2, [pc, #20]	; (8003e38 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fc39 	bl	80036a0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	0802cff8 	.word	0x0802cff8

08003e3c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ffe7 	bl	8003e18 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8003e4a:	2114      	movs	r1, #20
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f025 ff20 	bl	8029c92 <_ZdlPvj>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	801a      	strh	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	805a      	strh	r2, [r3, #2]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	809a      	strh	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	80da      	strh	r2, [r3, #6]
    {
    }
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6013      	str	r3, [r2, #0]
    }
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	2400afa0 	.word	0x2400afa0

08003eac <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
    {
 8003eb4:	4a04      	ldr	r2, [pc, #16]	; (8003ec8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	601a      	str	r2, [r3, #0]
    }
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	0802bcfc 	.word	0x0802bcfc

08003ecc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
    }
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ffe9 	bl	8003eac <_ZN8touchgfx12FontProviderD1Ev>
 8003eda:	2104      	movs	r1, #4
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f025 fed8 	bl	8029c92 <_ZdlPvj>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003efa:	4a0b      	ldr	r2, [pc, #44]	; (8003f28 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	611a      	str	r2, [r3, #16]
    {
    }
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	0802bcec 	.word	0x0802bcec

08003f2c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
    {
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	601a      	str	r2, [r3, #0]
    }
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	0802bcec 	.word	0x0802bcec

08003f4c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
    }
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ffe9 	bl	8003f2c <_ZN8touchgfx7MVPHeapD1Ev>
 8003f5a:	2114      	movs	r1, #20
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f025 fe98 	bl	8029c92 <_ZdlPvj>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
    {
    }
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
    {
    }
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
    {
    }
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	70fb      	strb	r3, [r7, #3]
    {
    }
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
    {
    }
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
    {
    }
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
    {
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	601a      	str	r2, [r3, #0]
    }
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	0802bcc4 	.word	0x0802bcc4

08004010 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    }
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff ffe9 	bl	8003ff0 <_ZN8touchgfx15UIEventListenerD1Ev>
 800401e:	2104      	movs	r1, #4
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f025 fe36 	bl	8029c92 <_ZdlPvj>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
    {
 8004038:	4a04      	ldr	r2, [pc, #16]	; (800404c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	601a      	str	r2, [r3, #0]
    }
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	0802d3a0 	.word	0x0802d3a0

08004050 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
    }
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ffe9 	bl	8004030 <_ZN8touchgfx3LCDD1Ev>
 800405e:	2108      	movs	r1, #8
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f025 fe16 	bl	8029c92 <_ZdlPvj>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800409a:	6810      	ldr	r0, [r2, #0]
 800409c:	6851      	ldr	r1, [r2, #4]
 800409e:	c303      	stmia	r3!, {r0, r1}
    }
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
    {
 80040b4:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	601a      	str	r2, [r3, #0]
    }
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	0802bcac 	.word	0x0802bcac

080040cc <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
    }
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ffe9 	bl	80040ac <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80040da:	2104      	movs	r1, #4
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f025 fdd8 	bl	8029c92 <_ZdlPvj>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	801a      	strh	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	805a      	strh	r2, [r3, #2]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	809a      	strh	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	80da      	strh	r2, [r3, #6]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	811a      	strh	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	815a      	strh	r2, [r3, #10]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	819a      	strh	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	739a      	strb	r2, [r3, #14]
        {
        }
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff ffd5 	bl	80040ec <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	829a      	strh	r2, [r3, #20]
    {
    }
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8004166:	4a55      	ldr	r2, [pc, #340]	; (80042bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	611a      	str	r2, [r3, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	615a      	str	r2, [r3, #20]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	619a      	str	r2, [r3, #24]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	331c      	adds	r3, #28
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff ffcc 	bl	8004132 <_ZN8touchgfx8GesturesC1Ev>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	641a      	str	r2, [r3, #64]	; 0x40
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	64da      	str	r2, [r3, #76]	; 0x4c
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3350      	adds	r3, #80	; 0x50
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fe39 	bl	8003e5c <_ZN8touchgfx4RectC1Ev>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	659a      	str	r2, [r3, #88]	; 0x58
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	661a      	str	r2, [r3, #96]	; 0x60
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	671a      	str	r2, [r3, #112]	; 0x70
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8004272:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8004278:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800427a:	8b3b      	ldrh	r3, [r7, #24]
 800427c:	8013      	strh	r3, [r2, #0]
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8004280:	881a      	ldrh	r2, [r3, #0]
 8004282:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8004284:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8004286:	4a11      	ldr	r2, [pc, #68]	; (80042cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8004288:	8bbb      	ldrh	r3, [r7, #28]
 800428a:	8013      	strh	r3, [r2, #0]
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800428e:	881a      	ldrh	r2, [r3, #0]
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8004292:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800429a:	8b3a      	ldrh	r2, [r7, #24]
 800429c:	8bbb      	ldrh	r3, [r7, #28]
 800429e:	429a      	cmp	r2, r3
 80042a0:	bf34      	ite	cc
 80042a2:	2301      	movcc	r3, #1
 80042a4:	2300      	movcs	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	0802ca50 	.word	0x0802ca50
 80042c0:	2400af44 	.word	0x2400af44
 80042c4:	2400af38 	.word	0x2400af38
 80042c8:	2400af3e 	.word	0x2400af3e
 80042cc:	2400af3a 	.word	0x2400af3a
 80042d0:	2400af40 	.word	0x2400af40
 80042d4:	2400af3c 	.word	0x2400af3c

080042d8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	4a05      	ldr	r2, [pc, #20]	; (80042f8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fe81 	bl	8003ff0 <_ZN8touchgfx15UIEventListenerD1Ev>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	0802d4b4 	.word	0x0802d4b4

080042fc <_ZN8touchgfx11ApplicationD0Ev>:
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ffe7 	bl	80042d8 <_ZN8touchgfx11ApplicationD1Ev>
 800430a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f025 fcbf 	bl	8029c92 <_ZdlPvj>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f804 	bl	8004334 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00f      	beq.n	8004366 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4610      	mov	r0, r2
 800435a:	4798      	blx	r3
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00e      	beq.n	800438a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4610      	mov	r0, r2
 8004380:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff97 	bl	80042d8 <_ZN8touchgfx11ApplicationD1Ev>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	0802bc68 	.word	0x0802bc68

080043b8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ffe7 	bl	8004394 <_ZN8touchgfx14MVPApplicationD1Ev>
 80043c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f025 fc61 	bl	8029c92 <_ZdlPvj>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	4a08      	ldr	r2, [pc, #32]	; (8004408 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fae9 	bl	80049c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ffcb 	bl	8004394 <_ZN8touchgfx14MVPApplicationD1Ev>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	0802bc0c 	.word	0x0802bc0c

0800440c <_ZN23FrontendApplicationBaseD0Ev>:
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff ffe1 	bl	80043dc <_ZN23FrontendApplicationBaseD1Ev>
 800441a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f025 fc37 	bl	8029c92 <_ZdlPvj>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	4a05      	ldr	r2, [pc, #20]	; (8004450 <_ZN19FrontendApplicationD1Ev+0x20>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff ffcb 	bl	80043dc <_ZN23FrontendApplicationBaseD1Ev>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	0802bbc8 	.word	0x0802bbc8

08004454 <_ZN19FrontendApplicationD0Ev>:
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ffe7 	bl	8004430 <_ZN19FrontendApplicationD1Ev>
 8004462:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f025 fc13 	bl	8029c92 <_ZdlPvj>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004484:	4618      	mov	r0, r3
 8004486:	f003 fffd 	bl	8008484 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4618      	mov	r0, r3
 800448e:	f016 fe25 	bl	801b0dc <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 f8ee 	bl	8005688 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 80044ac:	bf00      	nop
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	f7ff fd0d 	bl	8003eec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80044d2:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	601a      	str	r2, [r3, #0]
    {

    }
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	0802bbb4 	.word	0x0802bbb4

080044e8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	4801      	ldr	r0, [pc, #4]	; (80044f4 <__tcf_0+0xc>)
 80044ee:	f000 f95f 	bl	80047b0 <_ZN12FrontendHeapD1Ev>
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	240001c4 	.word	0x240001c4

080044f8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80044fc:	4b12      	ldr	r3, [pc, #72]	; (8004548 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	f3bf 8f5b 	dmb	ish
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	bf0c      	ite	eq
 800450e:	2301      	moveq	r3, #1
 8004510:	2300      	movne	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d013      	beq.n	8004540 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8004518:	480b      	ldr	r0, [pc, #44]	; (8004548 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800451a:	f025 fbbc 	bl	8029c96 <__cxa_guard_acquire>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800452e:	4807      	ldr	r0, [pc, #28]	; (800454c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8004530:	f000 f868 	bl	8004604 <_ZN12FrontendHeapC1Ev>
 8004534:	4804      	ldr	r0, [pc, #16]	; (8004548 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8004536:	f025 fbba 	bl	8029cae <__cxa_guard_release>
 800453a:	4805      	ldr	r0, [pc, #20]	; (8004550 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800453c:	f025 fbf6 	bl	8029d2c <atexit>
        return instance;
 8004540:	4b02      	ldr	r3, [pc, #8]	; (800454c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8004542:	4618      	mov	r0, r3
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	240008cc 	.word	0x240008cc
 800454c:	240001c4 	.word	0x240001c4
 8004550:	080044e9 	.word	0x080044e9

08004554 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	4a05      	ldr	r2, [pc, #20]	; (8004574 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fce1 	bl	8003f2c <_ZN8touchgfx7MVPHeapD1Ev>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	0802bbb4 	.word	0x0802bbb4

08004578 <_ZN16FrontendHeapBaseD0Ev>:
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ffe7 	bl	8004554 <_ZN16FrontendHeapBaseD1Ev>
 8004586:	2114      	movs	r1, #20
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f025 fb82 	bl	8029c92 <_ZdlPvj>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f012 fdb8 	bl	8017118 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80045a8:	4a03      	ldr	r2, [pc, #12]	; (80045b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	0802bb80 	.word	0x0802bb80

080045bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f012 fda6 	bl	8017118 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80045cc:	4a03      	ldr	r2, [pc, #12]	; (80045dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	0802bb4c 	.word	0x0802bb4c

080045e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f012 fd94 	bl	8017118 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80045f0:	4a03      	ldr	r2, [pc, #12]	; (8004600 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	0802bb18 	.word	0x0802bb18

08004604 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b085      	sub	sp, #20
 8004608:	af02      	add	r7, sp, #8
 800460a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f103 0114 	add.w	r1, r3, #20
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 64b3 	add.w	r4, r3, #1432	; 0x598
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
                     app(model, *this)
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	4623      	mov	r3, r4
 800462a:	f7ff ff43 	bl	80044b4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800462e:	4a18      	ldr	r2, [pc, #96]	; (8004690 <_ZN12FrontendHeapC1Ev+0x8c>)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3314      	adds	r3, #20
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff ffad 	bl	8004598 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	332c      	adds	r3, #44	; 0x2c
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ffba 	bl	80045bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff ffc6 	bl	80045e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 800465a:	4618      	mov	r0, r3
 800465c:	f003 ff04 	bl	8008468 <_ZN5ModelC1Ev>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 60b6 	add.w	r0, r3, #1456	; 0x5b0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	4619      	mov	r1, r3
 8004670:	f003 fee4 	bl	800843c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 800467c:	4619      	mov	r1, r3
 800467e:	4610      	mov	r0, r2
 8004680:	f7ff ff0b 	bl	800449a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	bd90      	pop	{r4, r7, pc}
 800468e:	bf00      	nop
 8004690:	0802bb04 	.word	0x0802bb04

08004694 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	8bbb      	ldrh	r3, [r7, #28]
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	8b3b      	ldrh	r3, [r7, #24]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	f7ff fd51 	bl	8004158 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80046b6:	4a04      	ldr	r2, [pc, #16]	; (80046c8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	601a      	str	r2, [r3, #0]
    }
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	0802bd10 	.word	0x0802bd10

080046cc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	8bbb      	ldrh	r3, [r7, #28]
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	8b3b      	ldrh	r3, [r7, #24]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	f7ff ffd3 	bl	8004694 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80046ee:	4a04      	ldr	r2, [pc, #16]	; (8004700 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	601a      	str	r2, [r3, #0]
    }
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	0802b9c0 	.word	0x0802b9c0

08004704 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	4a04      	ldr	r2, [pc, #16]	; (8004720 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	0802b9a8 	.word	0x0802b9a8

08004724 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff ffe8 	bl	8004704 <_ZN8touchgfx15TouchControllerC1Ev>
 8004734:	4a03      	ldr	r2, [pc, #12]	; (8004744 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	0802b990 	.word	0x0802b990

08004748 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b085      	sub	sp, #20
 800474c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800474e:	f000 fd51 	bl	80051f4 <_ZN14BitmapDatabase11getInstanceEv>
 8004752:	4604      	mov	r4, r0
 8004754:	f000 fd58 	bl	8005208 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8004758:	4603      	mov	r3, r0
 800475a:	4619      	mov	r1, r3
 800475c:	2300      	movs	r3, #0
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	2300      	movs	r3, #0
 8004762:	2200      	movs	r2, #0
 8004764:	4620      	mov	r0, r4
 8004766:	f019 fa3d 	bl	801dbe4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800476a:	4809      	ldr	r0, [pc, #36]	; (8004790 <touchgfx_init+0x48>)
 800476c:	f7ff fb8e 	bl	8003e8c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8004770:	2000      	movs	r0, #0
 8004772:	f003 fdb1 	bl	80082d8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8004776:	4807      	ldr	r0, [pc, #28]	; (8004794 <touchgfx_init+0x4c>)
 8004778:	f019 f976 	bl	801da68 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800477c:	f7ff febc 	bl	80044f8 <_ZN12FrontendHeap11getInstanceEv>
 8004780:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8004782:	4805      	ldr	r0, [pc, #20]	; (8004798 <touchgfx_init+0x50>)
 8004784:	f7fe fdb8 	bl	80032f8 <_ZN11TouchGFXHAL10initializeEv>
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bd90      	pop	{r4, r7, pc}
 8004790:	2400156c 	.word	0x2400156c
 8004794:	24000024 	.word	0x24000024
 8004798:	24001570 	.word	0x24001570

0800479c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80047a0:	4802      	ldr	r0, [pc, #8]	; (80047ac <touchgfx_taskEntry+0x10>)
 80047a2:	f013 fe2e 	bl	8018402 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80047a6:	bf00      	nop
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	24001570 	.word	0x24001570

080047b0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	4a10      	ldr	r2, [pc, #64]	; (80047fc <_ZN12FrontendHeapD1Ev+0x4c>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fe33 	bl	8004430 <_ZN19FrontendApplicationD1Ev>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f827 	bl	8004824 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	332c      	adds	r3, #44	; 0x2c
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f844 	bl	8004868 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3314      	adds	r3, #20
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 f863 	bl	80048b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff feb1 	bl	8004554 <_ZN16FrontendHeapBaseD1Ev>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	0802bb04 	.word	0x0802bb04

08004800 <_ZN12FrontendHeapD0Ev>:
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff ffd1 	bl	80047b0 <_ZN12FrontendHeapD1Ev>
 800480e:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f025 fa3d 	bl	8029c92 <_ZdlPvj>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	4a05      	ldr	r2, [pc, #20]	; (8004844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4618      	mov	r0, r3
 8004836:	f012 fc6d 	bl	8017114 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	0802bb18 	.word	0x0802bb18

08004848 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff ffe7 	bl	8004824 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004856:	2114      	movs	r1, #20
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f025 fa1a 	bl	8029c92 <_ZdlPvj>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	4a05      	ldr	r2, [pc, #20]	; (8004888 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4618      	mov	r0, r3
 800487a:	f012 fc4b 	bl	8017114 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	0802bb4c 	.word	0x0802bb4c

0800488c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff ffe7 	bl	8004868 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800489a:	f240 516c 	movw	r1, #1388	; 0x56c
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f025 f9f7 	bl	8029c92 <_ZdlPvj>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	4a05      	ldr	r2, [pc, #20]	; (80048d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f012 fc27 	bl	8017114 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	0802bb80 	.word	0x0802bb80

080048d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff ffe7 	bl	80048b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80048e2:	2118      	movs	r1, #24
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f025 f9d4 	bl	8029c92 <_ZdlPvj>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	4a05      	ldr	r2, [pc, #20]	; (8004914 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fb93 	bl	8004030 <_ZN8touchgfx3LCDD1Ev>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	0802e658 	.word	0x0802e658

08004918 <_ZN8touchgfx8LCD16bppD0Ev>:
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff ffe7 	bl	80048f4 <_ZN8touchgfx8LCD16bppD1Ev>
 8004926:	2178      	movs	r1, #120	; 0x78
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f025 f9b2 	bl	8029c92 <_ZdlPvj>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <_Z41__static_initialization_and_destruction_0ii>:
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af02      	add	r7, sp, #8
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d119      	bne.n	800497c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800494e:	4293      	cmp	r3, r2
 8004950:	d114      	bne.n	800497c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8004952:	4818      	ldr	r0, [pc, #96]	; (80049b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004954:	f7ff fee6 	bl	8004724 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8004958:	4817      	ldr	r0, [pc, #92]	; (80049b8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800495a:	f7fe ff5d 	bl	8003818 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800495e:	4817      	ldr	r0, [pc, #92]	; (80049bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004960:	f01c fa08 	bl	8020d74 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8004964:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004972:	4a12      	ldr	r2, [pc, #72]	; (80049bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004974:	4910      	ldr	r1, [pc, #64]	; (80049b8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004976:	4812      	ldr	r0, [pc, #72]	; (80049c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004978:	f7ff fea8 	bl	80046cc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d113      	bne.n	80049aa <_Z41__static_initialization_and_destruction_0ii+0x72>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004988:	4293      	cmp	r3, r2
 800498a:	d10e      	bne.n	80049aa <_Z41__static_initialization_and_destruction_0ii+0x72>
 800498c:	480c      	ldr	r0, [pc, #48]	; (80049c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800498e:	f7fe fd2b 	bl	80033e8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8004992:	480c      	ldr	r0, [pc, #48]	; (80049c4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004994:	f000 f83a 	bl	8004a0c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8004998:	4808      	ldr	r0, [pc, #32]	; (80049bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800499a:	f7ff ffab 	bl	80048f4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 800499e:	4806      	ldr	r0, [pc, #24]	; (80049b8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80049a0:	f7fe ff64 	bl	800386c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80049a4:	4803      	ldr	r0, [pc, #12]	; (80049b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80049a6:	f7fe faad 	bl	8002f04 <_ZN20STM32TouchControllerD1Ev>
}
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	240008d0 	.word	0x240008d0
 80049b8:	240008d4 	.word	0x240008d4
 80049bc:	240014f4 	.word	0x240014f4
 80049c0:	24001570 	.word	0x24001570
 80049c4:	24000024 	.word	0x24000024

080049c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	4a05      	ldr	r2, [pc, #20]	; (80049e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fb67 	bl	80040ac <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	0802bc50 	.word	0x0802bc50

080049ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff ffe7 	bl	80049c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80049fa:	2110      	movs	r1, #16
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f025 f948 	bl	8029c92 <_ZdlPvj>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId MEDIUM = 3;  // verdana_14_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	4a05      	ldr	r2, [pc, #20]	; (8004a2c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fa45 	bl	8003eac <_ZN8touchgfx12FontProviderD1Ev>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	0802bde0 	.word	0x0802bde0

08004a30 <_ZN23ApplicationFontProviderD0Ev>:
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff ffe7 	bl	8004a0c <_ZN23ApplicationFontProviderD1Ev>
 8004a3e:	2104      	movs	r1, #4
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f025 f926 	bl	8029c92 <_ZdlPvj>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8004a58:	2301      	movs	r3, #1
    }
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8004a6e:	230c      	movs	r3, #12
    }
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8004a88:	887a      	ldrh	r2, [r7, #2]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	3308      	adds	r3, #8
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4413      	add	r3, r2
    }
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	3308      	adds	r3, #8
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4413      	add	r3, r2
    }
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8004ad4:	2301      	movs	r3, #1
    }
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8004aea:	f240 5364 	movw	r3, #1380	; 0x564
    }
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	460b      	mov	r3, r1
 8004b04:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004b06:	887b      	ldrh	r3, [r7, #2]
 8004b08:	f240 5264 	movw	r2, #1380	; 0x564
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	3308      	adds	r3, #8
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	4413      	add	r3, r2
    }
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004b2e:	887b      	ldrh	r3, [r7, #2]
 8004b30:	f240 5264 	movw	r2, #1380	; 0x564
 8004b34:	fb02 f303 	mul.w	r3, r2, r3
 8004b38:	3308      	adds	r3, #8
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
    }
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8004b52:	2301      	movs	r3, #1
    }
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8004b68:	2310      	movs	r3, #16
    }
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004b82:	887b      	ldrh	r3, [r7, #2]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	3308      	adds	r3, #8
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	4413      	add	r3, r2
    }
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	3308      	adds	r3, #8
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4413      	add	r3, r2
    }
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	68d2      	ldr	r2, [r2, #12]
 8004bca:	1052      	asrs	r2, r2, #1
 8004bcc:	1899      	adds	r1, r3, r2
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	e00a      	b.n	8004bf6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	68d2      	ldr	r2, [r2, #12]
 8004be8:	1052      	asrs	r2, r2, #1
 8004bea:	4413      	add	r3, r2
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6892      	ldr	r2, [r2, #8]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	4798      	blx	r3
    }
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d010      	beq.n	8004c34 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d107      	bne.n	8004c2a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d001      	beq.n	8004c34 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8004c34:	2300      	movs	r3, #0
    }
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <_GLOBAL__sub_I_touchgfx_init>:
 8004c42:	b580      	push	{r7, lr}
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	f7ff fe74 	bl	8004938 <_Z41__static_initialization_and_destruction_0ii>
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <_GLOBAL__sub_D_touchgfx_init>:
 8004c52:	b580      	push	{r7, lr}
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	f7ff fe6c 	bl	8004938 <_Z41__static_initialization_and_destruction_0ii>
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3320      	adds	r3, #32
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
    }
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <__NVIC_EnableIRQ>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	4603      	mov	r3, r0
 8004cac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	db0b      	blt.n	8004cce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	f003 021f 	and.w	r2, r3, #31
 8004cbc:	4907      	ldr	r1, [pc, #28]	; (8004cdc <__NVIC_EnableIRQ+0x38>)
 8004cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8004cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	e000e100 	.word	0xe000e100

08004ce0 <__NVIC_DisableIRQ>:
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	db12      	blt.n	8004d18 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	f003 021f 	and.w	r2, r3, #31
 8004cf8:	490a      	ldr	r1, [pc, #40]	; (8004d24 <__NVIC_DisableIRQ+0x44>)
 8004cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	2001      	movs	r0, #1
 8004d02:	fa00 f202 	lsl.w	r2, r0, r2
 8004d06:	3320      	adds	r3, #32
 8004d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d0c:	f3bf 8f4f 	dsb	sy
}
 8004d10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d12:	f3bf 8f6f 	isb	sy
}
 8004d16:	bf00      	nop
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	e000e100 	.word	0xe000e100

08004d28 <__NVIC_SetPriority>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	6039      	str	r1, [r7, #0]
 8004d32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	db0a      	blt.n	8004d52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	490c      	ldr	r1, [pc, #48]	; (8004d74 <__NVIC_SetPriority+0x4c>)
 8004d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d46:	0112      	lsls	r2, r2, #4
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d50:	e00a      	b.n	8004d68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	4908      	ldr	r1, [pc, #32]	; (8004d78 <__NVIC_SetPriority+0x50>)
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	3b04      	subs	r3, #4
 8004d60:	0112      	lsls	r2, r2, #4
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	440b      	add	r3, r1
 8004d66:	761a      	strb	r2, [r3, #24]
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	e000e100 	.word	0xe000e100
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8004d7c:	b5b0      	push	{r4, r5, r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f013 fb29 	bl	80183de <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8004d8c:	687d      	ldr	r5, [r7, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3360      	adds	r3, #96	; 0x60
 8004d94:	681c      	ldr	r4, [r3, #0]
 8004d96:	f016 fa87 	bl	801b2a8 <_ZN8touchgfx11Application11getInstanceEv>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4628      	mov	r0, r5
 8004da0:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3384      	adds	r3, #132	; 0x84
 8004daa:	681c      	ldr	r4, [r3, #0]
 8004dac:	2300      	movs	r3, #0
 8004dae:	4a04      	ldr	r2, [pc, #16]	; (8004dc0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8004db0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8004db4:	47a0      	blx	r4
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	d0200000 	.word	0xd0200000

08004dc4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8004dcc:	2109      	movs	r1, #9
 8004dce:	205a      	movs	r0, #90	; 0x5a
 8004dd0:	f7ff ffaa 	bl	8004d28 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8004dd4:	2109      	movs	r1, #9
 8004dd6:	2058      	movs	r0, #88	; 0x58
 8004dd8:	f7ff ffa6 	bl	8004d28 <__NVIC_SetPriority>
}
 8004ddc:	bf00      	nop
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8004dec:	205a      	movs	r0, #90	; 0x5a
 8004dee:	f7ff ff59 	bl	8004ca4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8004df2:	2058      	movs	r0, #88	; 0x58
 8004df4:	f7ff ff56 	bl	8004ca4 <__NVIC_EnableIRQ>
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8004e08:	205a      	movs	r0, #90	; 0x5a
 8004e0a:	f7ff ff69 	bl	8004ce0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8004e0e:	2058      	movs	r0, #88	; 0x58
 8004e10:	f7ff ff66 	bl	8004ce0 <__NVIC_DisableIRQ>
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004e24:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004e36:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8004e38:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8004e4a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8004e4c:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004e4e:	881a      	ldrh	r2, [r3, #0]
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e58:	4a04      	ldr	r2, [pc, #16]	; (8004e6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	50001000 	.word	0x50001000
 8004e70:	240015ec 	.word	0x240015ec
 8004e74:	240015ee 	.word	0x240015ee

08004e78 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f013 fa92 	bl	80183ac <_ZN8touchgfx3HAL10beginFrameEv>
 8004e88:	4603      	mov	r3, r0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f013 fa91 	bl	80183c4 <_ZN8touchgfx3HAL8endFrameEv>

}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8004eb4:	4b03      	ldr	r3, [pc, #12]	; (8004ec4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	50001084 	.word	0x50001084

08004ec8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8004ed2:	4a06      	ldr	r2, [pc, #24]	; (8004eec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	50001084 	.word	0x50001084
 8004ef0:	50001000 	.word	0x50001000

08004ef4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f013 fa1b 	bl	801833e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004f08:	4b25      	ldr	r3, [pc, #148]	; (8004fa0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bf14      	ite	ne
 8004f14:	2301      	movne	r3, #1
 8004f16:	2300      	moveq	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d03c      	beq.n	8004f98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004f1e:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004f26:	f3bf 8f4f 	dsb	sy
}
 8004f2a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004f2c:	4b1c      	ldr	r3, [pc, #112]	; (8004fa0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8004f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f32:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	0b5b      	lsrs	r3, r3, #13
 8004f38:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004f3c:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	08db      	lsrs	r3, r3, #3
 8004f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f46:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004f50:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004f56:	4912      	ldr	r1, [pc, #72]	; (8004fa0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1e5a      	subs	r2, r3, #1
 8004f62:	60fa      	str	r2, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bf14      	ite	ne
 8004f68:	2301      	movne	r3, #1
 8004f6a:	2300      	moveq	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d000      	beq.n	8004f74 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 8004f72:	e7e9      	b.n	8004f48 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1e5a      	subs	r2, r3, #1
 8004f78:	613a      	str	r2, [r7, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bf14      	ite	ne
 8004f7e:	2301      	movne	r3, #1
 8004f80:	2300      	moveq	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d000      	beq.n	8004f8a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8004f88:	e7d9      	b.n	8004f3e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8004f8a:	f3bf 8f4f 	dsb	sy
}
 8004f8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f90:	f3bf 8f6f 	isb	sy
}
 8004f94:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8004f96:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8004f98:	bf00      	nop
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	e000ed00 	.word	0xe000ed00

08004fa4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	f013 fb2c 	bl	8018616 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8004fbe:	4603      	mov	r3, r0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004fd0:	4b26      	ldr	r3, [pc, #152]	; (800506c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bf14      	ite	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	2300      	moveq	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d03c      	beq.n	8005060 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004fe6:	4b21      	ldr	r3, [pc, #132]	; (800506c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004fee:	f3bf 8f4f 	dsb	sy
}
 8004ff2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	; (800506c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8004ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffa:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	0b5b      	lsrs	r3, r3, #13
 8005000:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005004:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	08db      	lsrs	r3, r3, #3
 800500a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800500e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8005018:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800501e:	4913      	ldr	r1, [pc, #76]	; (800506c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1e5a      	subs	r2, r3, #1
 800502a:	60fa      	str	r2, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	bf14      	ite	ne
 8005030:	2301      	movne	r3, #1
 8005032:	2300      	moveq	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d000      	beq.n	800503c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 800503a:	e7e9      	b.n	8005010 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1e5a      	subs	r2, r3, #1
 8005040:	613a      	str	r2, [r7, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	bf14      	ite	ne
 8005046:	2301      	movne	r3, #1
 8005048:	2300      	moveq	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d000      	beq.n	8005052 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8005050:	e7d9      	b.n	8005006 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005052:	f3bf 8f4f 	dsb	sy
}
 8005056:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005058:	f3bf 8f6f 	isb	sy
}
 800505c:	bf00      	nop
}
 800505e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8005078:	4b26      	ldr	r3, [pc, #152]	; (8005114 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005080:	2b00      	cmp	r3, #0
 8005082:	bf14      	ite	ne
 8005084:	2301      	movne	r3, #1
 8005086:	2300      	moveq	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d03c      	beq.n	8005108 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800508e:	4b21      	ldr	r3, [pc, #132]	; (8005114 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8005090:	2200      	movs	r2, #0
 8005092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005096:	f3bf 8f4f 	dsb	sy
}
 800509a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800509c:	4b1d      	ldr	r3, [pc, #116]	; (8005114 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800509e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050a2:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	0b5b      	lsrs	r3, r3, #13
 80050a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80050ac:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	08db      	lsrs	r3, r3, #3
 80050b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050b6:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80050c0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80050c6:	4913      	ldr	r1, [pc, #76]	; (8005114 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1e5a      	subs	r2, r3, #1
 80050d2:	60fa      	str	r2, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d000      	beq.n	80050e4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 80050e2:	e7e9      	b.n	80050b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1e5a      	subs	r2, r3, #1
 80050e8:	613a      	str	r2, [r7, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	bf14      	ite	ne
 80050ee:	2301      	movne	r3, #1
 80050f0:	2300      	moveq	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d000      	beq.n	80050fa <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 80050f8:	e7d9      	b.n	80050ae <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80050fa:	f3bf 8f4f 	dsb	sy
}
 80050fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005100:	f3bf 8f6f 	isb	sy
}
 8005104:	bf00      	nop
}
 8005106:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8005120:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HAL_LTDC_LineEventCallback+0x74>)
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	4a1a      	ldr	r2, [pc, #104]	; (8005190 <HAL_LTDC_LineEventCallback+0x78>)
 8005126:	8812      	ldrh	r2, [r2, #0]
 8005128:	4293      	cmp	r3, r2
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d017      	beq.n	8005166 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8005136:	4b17      	ldr	r3, [pc, #92]	; (8005194 <HAL_LTDC_LineEventCallback+0x7c>)
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	4619      	mov	r1, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f00b faaf 	bl	80106a0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8005142:	f7fe fb2f 	bl	80037a4 <_ZN8touchgfx3HAL11getInstanceEv>
 8005146:	4603      	mov	r3, r0
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff fd98 	bl	8004c7e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800514e:	f7fe fa23 	bl	8003598 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8005152:	f7fe fb27 	bl	80037a4 <_ZN8touchgfx3HAL11getInstanceEv>
 8005156:	4603      	mov	r3, r0
 8005158:	4618      	mov	r0, r3
 800515a:	f013 ff35 	bl	8018fc8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800515e:	2000      	movs	r0, #0
 8005160:	f7fd fef2 	bl	8002f48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8005164:	e00e      	b.n	8005184 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <HAL_LTDC_LineEventCallback+0x78>)
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f00b fa97 	bl	80106a0 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8005172:	2000      	movs	r0, #0
 8005174:	f7fd ff04 	bl	8002f80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8005178:	f7fe fb14 	bl	80037a4 <_ZN8touchgfx3HAL11getInstanceEv>
 800517c:	4603      	mov	r3, r0
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fd6f 	bl	8004c62 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	50001000 	.word	0x50001000
 8005190:	240015ec 	.word	0x240015ec
 8005194:	240015ee 	.word	0x240015ee

08005198 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80051a4:	887b      	ldrh	r3, [r7, #2]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d81e      	bhi.n	80051e8 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051c1 	.word	0x080051c1
 80051b4:	080051cb 	.word	0x080051cb
 80051b8:	080051d5 	.word	0x080051d5
 80051bc:	080051df 	.word	0x080051df
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80051c0:	f003 f902 	bl	80083c8 <_ZN17TypedTextDatabase8getFontsEv>
 80051c4:	4603      	mov	r3, r0
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	e00f      	b.n	80051ea <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80051ca:	f003 f8fd 	bl	80083c8 <_ZN17TypedTextDatabase8getFontsEv>
 80051ce:	4603      	mov	r3, r0
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	e00a      	b.n	80051ea <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80051d4:	f003 f8f8 	bl	80083c8 <_ZN17TypedTextDatabase8getFontsEv>
 80051d8:	4603      	mov	r3, r0
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	e005      	b.n	80051ea <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::MEDIUM:
        // verdana_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80051de:	f003 f8f3 	bl	80083c8 <_ZN17TypedTextDatabase8getFontsEv>
 80051e2:	4603      	mov	r3, r0
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	e000      	b.n	80051ea <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 80051e8:	2300      	movs	r3, #0
    }
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop

080051f4 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
    return bitmap_database;
 80051f8:	4b02      	ldr	r3, [pc, #8]	; (8005204 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	0802bdec 	.word	0x0802bdec

08005208 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800520c:	2301      	movs	r3, #1
}
 800520e:	4618      	mov	r0, r3
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
    {
 8005220:	4a04      	ldr	r2, [pc, #16]	; (8005234 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
    }
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	0802c214 	.word	0x0802c214

08005238 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
    }
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff ffe9 	bl	8005218 <_ZN8touchgfx4FontD1Ev>
 8005246:	2110      	movs	r1, #16
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f024 fd22 	bl	8029c92 <_ZdlPvj>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8005264:	887b      	ldrh	r3, [r7, #2]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800526a:	2300      	movs	r3, #0
 800526c:	e010      	b.n	8005290 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	681c      	ldr	r4, [r3, #0]
 800527e:	f107 030f 	add.w	r3, r7, #15
 8005282:	f107 0210 	add.w	r2, r7, #16
 8005286:	8879      	ldrh	r1, [r7, #2]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	47a0      	blx	r4
 800528c:	6178      	str	r0, [r7, #20]
        return glyph;
 800528e:	697b      	ldr	r3, [r7, #20]
    }
 8005290:	4618      	mov	r0, r3
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	bd90      	pop	{r4, r7, pc}

08005298 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	895b      	ldrh	r3, [r3, #10]
    }
 80052a4:	4618      	mov	r0, r3
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	899b      	ldrh	r3, [r3, #12]
    }
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	889b      	ldrh	r3, [r3, #4]
    }
 80052d4:	4618      	mov	r0, r3
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	889a      	ldrh	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	799b      	ldrb	r3, [r3, #6]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	4413      	add	r3, r2
 80052f4:	b29b      	uxth	r3, r3
    }
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	79db      	ldrb	r3, [r3, #7]
 800530e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8005312:	b2db      	uxtb	r3, r3
    }
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	79db      	ldrb	r3, [r3, #7]
 800532c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005330:	b2db      	uxtb	r3, r3
    }
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	4a05      	ldr	r2, [pc, #20]	; (8005360 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff ff61 	bl	8005218 <_ZN8touchgfx4FontD1Ev>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	0802d778 	.word	0x0802d778

08005364 <_ZN8touchgfx9ConstFontD0Ev>:
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff ffe7 	bl	8005340 <_ZN8touchgfx9ConstFontD1Ev>
 8005372:	2118      	movs	r1, #24
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f024 fc8c 	bl	8029c92 <_ZdlPvj>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff ffd3 	bl	8005340 <_ZN8touchgfx9ConstFontD1Ev>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	0802be60 	.word	0x0802be60

080053a8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ffe7 	bl	8005384 <_ZN8touchgfx13GeneratedFontD1Ev>
 80053b6:	2128      	movs	r1, #40	; 0x28
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f024 fc6a 	bl	8029c92 <_ZdlPvj>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
    {
 80053d0:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	601a      	str	r2, [r3, #0]
    }
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	0802be08 	.word	0x0802be08

080053e8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
    }
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff ffe9 	bl	80053c8 <_ZN8touchgfx9TypedTextD1Ev>
 80053f6:	2108      	movs	r1, #8
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f024 fc4a 	bl	8029c92 <_ZdlPvj>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8005430:	4b08      	ldr	r3, [pc, #32]	; (8005454 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 800543a:	4b06      	ldr	r3, [pc, #24]	; (8005454 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005440:	e002      	b.n	8005448 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8005442:	4b04      	ldr	r3, [pc, #16]	; (8005454 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
    }
 8005448:	4618      	mov	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	2400af44 	.word	0x2400af44

08005458 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8005460:	4a07      	ldr	r2, [pc, #28]	; (8005480 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	605a      	str	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	721a      	strb	r2, [r3, #8]
    {
    }
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	0802be3c 	.word	0x0802be3c

08005484 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
    {
 800548c:	4a04      	ldr	r2, [pc, #16]	; (80054a0 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	601a      	str	r2, [r3, #0]
    }
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	0802be3c 	.word	0x0802be3c

080054a4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
    }
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff ffe9 	bl	8005484 <_ZN8touchgfx10TransitionD1Ev>
 80054b2:	210c      	movs	r1, #12
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f024 fbec 	bl	8029c92 <_ZdlPvj>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
    {
    }
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
    {
    }
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
    {
    }
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8005508:	f015 fece 	bl	801b2a8 <_ZN8touchgfx11Application11getInstanceEv>
 800550c:	4603      	mov	r3, r0
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	3230      	adds	r2, #48	; 0x30
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	4790      	blx	r2
    }
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	605a      	str	r2, [r3, #4]
    }
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4618      	mov	r0, r3
 8005548:	f015 ff18 	bl	801b37c <_ZN8touchgfx11ApplicationC1Ev>
 800554c:	4a09      	ldr	r2, [pc, #36]	; (8005574 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a04      	ldr	r2, [pc, #16]	; (8005578 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8005566:	6013      	str	r3, [r2, #0]
    }
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	0802bc68 	.word	0x0802bc68
 8005578:	2400af90 	.word	0x2400af90

0800557c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	601a      	str	r2, [r3, #0]
    }
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	721a      	strb	r2, [r3, #8]
    }
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	605a      	str	r2, [r3, #4]
    }
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff ffac 	bl	800553c <_ZN8touchgfx14MVPApplicationC1Ev>
 80055e4:	4a13      	ldr	r2, [pc, #76]	; (8005634 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 f89f 	bl	8005734 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005606:	f7fe f8cd 	bl	80037a4 <_ZN8touchgfx3HAL11getInstanceEv>
 800560a:	4603      	mov	r3, r0
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	3208      	adds	r2, #8
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8005618:	2000      	movs	r0, #0
 800561a:	f002 fe5d 	bl	80082d8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800561e:	f7ff feff 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 8005622:	4603      	mov	r3, r0
 8005624:	4618      	mov	r0, r3
 8005626:	f01d f9f0 	bl	8022a0a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	0802bc0c 	.word	0x0802bc0c

08005638 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	4611      	mov	r1, r2
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff ffe9 	bl	8005638 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	605a      	str	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	3308      	adds	r3, #8
 8005674:	3208      	adds	r2, #8
 8005676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800567a:	e883 0003 	stmia.w	r3, {r0, r1}
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8005688:	b590      	push	{r4, r7, lr}
 800568a:	b089      	sub	sp, #36	; 0x24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8005696:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
 800569e:	f107 0008 	add.w	r0, r7, #8
 80056a2:	f107 0318 	add.w	r3, r7, #24
 80056a6:	cb0c      	ldmia	r3, {r2, r3}
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	f000 f85f 	bl	800576c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80056ae:	f107 0308 	add.w	r3, r7, #8
 80056b2:	4619      	mov	r1, r3
 80056b4:	4620      	mov	r0, r4
 80056b6:	f7ff ffcb 	bl	8005650 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff f982 	bl	80049c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80056d0:	bf00      	nop
 80056d2:	3724      	adds	r7, #36	; 0x24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd90      	pop	{r4, r7, pc}
 80056d8:	080056dd 	.word	0x080056dd

080056dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	4b04      	ldr	r3, [pc, #16]	; (800570c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80056fc:	4804      	ldr	r0, [pc, #16]	; (8005710 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80056fe:	f000 f867 	bl	80057d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	2400af84 	.word	0x2400af84
 8005710:	2400af80 	.word	0x2400af80

08005714 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	4a04      	ldr	r2, [pc, #16]	; (8005730 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	0802bcac 	.word	0x0802bcac

08005734 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff ffe8 	bl	8005714 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005744:	4a08      	ldr	r2, [pc, #32]	; (8005768 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	605a      	str	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	609a      	str	r2, [r3, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	60da      	str	r2, [r3, #12]
    }
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	0802bc50 	.word	0x0802bc50

0800576c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4639      	mov	r1, r7
 8005778:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff ffc8 	bl	8005714 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005784:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	605a      	str	r2, [r3, #4]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3308      	adds	r3, #8
 8005794:	463a      	mov	r2, r7
 8005796:	e892 0003 	ldmia.w	r2, {r0, r1}
 800579a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	0802bc50 	.word	0x0802bc50

080057ac <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff fe4e 	bl	8005458 <_ZN8touchgfx10TransitionC1Ev>
 80057bc:	4a03      	ldr	r2, [pc, #12]	; (80057cc <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	0802be18 	.word	0x0802be18

080057d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80057d0:	b590      	push	{r4, r7, lr}
 80057d2:	b08f      	sub	sp, #60	; 0x3c
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3320      	adds	r3, #32
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4610      	mov	r0, r2
 80057ee:	4798      	blx	r3
 80057f0:	4603      	mov	r3, r0
 80057f2:	f240 5263 	movw	r2, #1379	; 0x563
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d805      	bhi.n	8005806 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80057fa:	4b7f      	ldr	r3, [pc, #508]	; (80059f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80057fc:	4a7f      	ldr	r2, [pc, #508]	; (80059fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80057fe:	21a3      	movs	r1, #163	; 0xa3
 8005800:	487f      	ldr	r0, [pc, #508]	; (8005a00 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005802:	f024 fa75 	bl	8029cf0 <__assert_func>
 8005806:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3320      	adds	r3, #32
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4610      	mov	r0, r2
 8005818:	4798      	blx	r3
 800581a:	4603      	mov	r3, r0
 800581c:	2b0f      	cmp	r3, #15
 800581e:	d805      	bhi.n	800582c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8005820:	4b78      	ldr	r3, [pc, #480]	; (8005a04 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8005822:	4a76      	ldr	r2, [pc, #472]	; (80059fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005824:	21a4      	movs	r1, #164	; 0xa4
 8005826:	4876      	ldr	r0, [pc, #472]	; (8005a00 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005828:	f024 fa62 	bl	8029cf0 <__assert_func>
 800582c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3320      	adds	r3, #32
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4610      	mov	r0, r2
 800583e:	4798      	blx	r3
 8005840:	4603      	mov	r3, r0
 8005842:	2b0b      	cmp	r3, #11
 8005844:	d805      	bhi.n	8005852 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8005846:	4b70      	ldr	r3, [pc, #448]	; (8005a08 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8005848:	4a6c      	ldr	r2, [pc, #432]	; (80059fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800584a:	21a5      	movs	r1, #165	; 0xa5
 800584c:	486c      	ldr	r0, [pc, #432]	; (8005a00 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800584e:	f024 fa4f 	bl	8029cf0 <__assert_func>
 8005852:	bf00      	nop
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	62bb      	str	r3, [r7, #40]	; 0x28
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8005860:	f015 fd22 	bl	801b2a8 <_ZN8touchgfx11Application11getInstanceEv>
 8005864:	4603      	mov	r3, r0
 8005866:	4618      	mov	r0, r3
 8005868:	f015 fd6c 	bl	801b344 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	330c      	adds	r3, #12
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4610      	mov	r0, r2
 8005884:	4798      	blx	r3
    if (*currentTrans)
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4610      	mov	r0, r2
 800589c:	4798      	blx	r3
    if (*currentScreen)
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3314      	adds	r3, #20
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4610      	mov	r0, r2
 80058b6:	4798      	blx	r3
    if (*currentPresenter)
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3304      	adds	r3, #4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4610      	mov	r0, r2
 80058d0:	4798      	blx	r3
    if (*currentScreen)
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4610      	mov	r0, r2
 80058e8:	4798      	blx	r3
    if (*currentPresenter)
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3308      	adds	r3, #8
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4610      	mov	r0, r2
 8005902:	4798      	blx	r3
}
 8005904:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	2100      	movs	r1, #0
 800590c:	4618      	mov	r0, r3
 800590e:	f000 f87d 	bl	8005a0c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8005912:	4603      	mov	r3, r0
 8005914:	4619      	mov	r1, r3
 8005916:	200c      	movs	r0, #12
 8005918:	f7ff fd76 	bl	8005408 <_ZnwjPv>
 800591c:	4604      	mov	r4, r0
 800591e:	4620      	mov	r0, r4
 8005920:	f7ff ff44 	bl	80057ac <_ZN8touchgfx12NoTransitionC1Ev>
 8005924:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2100      	movs	r1, #0
 800592c:	4618      	mov	r0, r3
 800592e:	f000 f880 	bl	8005a32 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8005932:	4603      	mov	r3, r0
 8005934:	4619      	mov	r1, r3
 8005936:	f240 5064 	movw	r0, #1380	; 0x564
 800593a:	f7ff fd65 	bl	8005408 <_ZnwjPv>
 800593e:	4604      	mov	r4, r0
 8005940:	4620      	mov	r0, r4
 8005942:	f002 fead 	bl	80086a0 <_ZN11Screen1ViewC1Ev>
 8005946:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2100      	movs	r1, #0
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f882 	bl	8005a58 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8005954:	4603      	mov	r3, r0
 8005956:	4619      	mov	r1, r3
 8005958:	2010      	movs	r0, #16
 800595a:	f7ff fd55 	bl	8005408 <_ZnwjPv>
 800595e:	4604      	mov	r4, r0
 8005960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005962:	4620      	mov	r0, r4
 8005964:	f002 fe44 	bl	80085f0 <_ZN16Screen1PresenterC1ER11Screen1View>
 8005968:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800596e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005974:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800597c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	3304      	adds	r3, #4
 8005986:	e000      	b.n	800598a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8005988:	2300      	movs	r3, #0
 800598a:	4619      	mov	r1, r3
 800598c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800598e:	f7ff fdf5 	bl	800557c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	3304      	adds	r3, #4
 8005996:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff fe0a 	bl	80055b2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f86b 	bl	8005a7e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	61bb      	str	r3, [r7, #24]
 80059b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	330c      	adds	r3, #12
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69f8      	ldr	r0, [r7, #28]
 80059be:	4798      	blx	r3
    newPresenter->activate();
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69b8      	ldr	r0, [r7, #24]
 80059c8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80059ca:	6979      	ldr	r1, [r7, #20]
 80059cc:	69f8      	ldr	r0, [r7, #28]
 80059ce:	f017 f863 	bl	801ca98 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3310      	adds	r3, #16
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6978      	ldr	r0, [r7, #20]
 80059dc:	4798      	blx	r3
    newTransition->invalidate();
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3314      	adds	r3, #20
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6978      	ldr	r0, [r7, #20]
 80059e8:	4798      	blx	r3
}
 80059ea:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	373c      	adds	r7, #60	; 0x3c
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd90      	pop	{r4, r7, pc}
 80059f6:	bf00      	nop
 80059f8:	0802b24c 	.word	0x0802b24c
 80059fc:	0802b2dc 	.word	0x0802b2dc
 8005a00:	0802b3e0 	.word	0x0802b3e0
 8005a04:	0802b438 	.word	0x0802b438
 8005a08:	0802b4dc 	.word	0x0802b4dc

08005a0c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3324      	adds	r3, #36	; 0x24
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	887a      	ldrh	r2, [r7, #2]
 8005a22:	4611      	mov	r1, r2
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	4798      	blx	r3
 8005a28:	4603      	mov	r3, r0
    }
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3324      	adds	r3, #36	; 0x24
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	887a      	ldrh	r2, [r7, #2]
 8005a48:	4611      	mov	r1, r2
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
 8005a4e:	4603      	mov	r3, r0
    }
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3324      	adds	r3, #36	; 0x24
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	887a      	ldrh	r2, [r7, #2]
 8005a6e:	4611      	mov	r1, r2
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	4798      	blx	r3
 8005a74:	4603      	mov	r3, r0
    }
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <_ZN8touchgfx12NoTransitionD1Ev>:
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	4a05      	ldr	r2, [pc, #20]	; (8005abc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff fce9 	bl	8005484 <_ZN8touchgfx10TransitionD1Ev>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	0802be18 	.word	0x0802be18

08005ac0 <_ZN8touchgfx12NoTransitionD0Ev>:
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff ffe7 	bl	8005a9c <_ZN8touchgfx12NoTransitionD1Ev>
 8005ace:	210c      	movs	r1, #12
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f024 f8de 	bl	8029c92 <_ZdlPvj>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
    }
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8005b04:	4618      	mov	r0, r3
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08c      	sub	sp, #48	; 0x30
 8005b14:	af08      	add	r7, sp, #32
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	460b      	mov	r3, r1
 8005b20:	80fb      	strh	r3, [r7, #6]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	88b9      	ldrh	r1, [r7, #4]
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b2e:	9306      	str	r3, [sp, #24]
 8005b30:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b32:	9305      	str	r3, [sp, #20]
 8005b34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b38:	9304      	str	r3, [sp, #16]
 8005b3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b3e:	9303      	str	r3, [sp, #12]
 8005b40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b44:	9302      	str	r3, [sp, #8]
 8005b46:	7f3b      	ldrb	r3, [r7, #28]
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	7e3b      	ldrb	r3, [r7, #24]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	f016 fc1d 	bl	801c390 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8005b56:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b60:	619a      	str	r2, [r3, #24]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b66:	61da      	str	r2, [r3, #28]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b6c:	621a      	str	r2, [r3, #32]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b72:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	0802be60 	.word	0x0802be60

08005b84 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	889b      	ldrh	r3, [r3, #4]
 8005b98:	0adb      	lsrs	r3, r3, #11
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4413      	add	r3, r2
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b089      	sub	sp, #36	; 0x24
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	7b1b      	ldrb	r3, [r3, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e030      	b.n	8005c38 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	69da      	ldr	r2, [r3, #28]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	7b5b      	ldrb	r3, [r3, #13]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	b21b      	sxth	r3, r3
 8005be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bea:	b219      	sxth	r1, r3
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	7adb      	ldrb	r3, [r3, #11]
 8005bf0:	b21b      	sxth	r3, r3
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	b21b      	sxth	r3, r3
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	7b1b      	ldrb	r3, [r3, #12]
 8005c02:	837b      	strh	r3, [r7, #26]
 8005c04:	8b7b      	ldrh	r3, [r7, #26]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d015      	beq.n	8005c36 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	897a      	ldrh	r2, [r7, #10]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d103      	bne.n	8005c1c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005c1a:	e00d      	b.n	8005c38 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	897a      	ldrh	r2, [r7, #10]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d306      	bcc.n	8005c34 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005c26:	8b7b      	ldrh	r3, [r7, #26]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	837b      	strh	r3, [r7, #26]
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	e7e7      	b.n	8005c04 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8005c34:	bf00      	nop
        }
    }
    return 0;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3724      	adds	r7, #36	; 0x24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
        : color(col)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	601a      	str	r2, [r3, #0]
    }
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	791b      	ldrb	r3, [r3, #4]
    }
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
	...

08005c7c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8005c84:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe f8e4 	bl	8003e5c <_ZN8touchgfx4RectC1Ev>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	330c      	adds	r3, #12
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe f8df 	bl	8003e5c <_ZN8touchgfx4RectC1Ev>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	615a      	str	r2, [r3, #20]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	619a      	str	r2, [r3, #24]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	61da      	str	r2, [r3, #28]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	841a      	strh	r2, [r3, #32]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	845a      	strh	r2, [r3, #34]	; 0x22
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	0802d714 	.word	0x0802d714

08005cdc <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
    {
 8005ce4:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	601a      	str	r2, [r3, #0]
    }
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	0802d714 	.word	0x0802d714

08005cfc <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
    }
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff ffe9 	bl	8005cdc <_ZN8touchgfx8DrawableD1Ev>
 8005d0a:	2128      	movs	r1, #40	; 0x28
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f023 ffc0 	bl	8029c92 <_ZdlPvj>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4618      	mov	r0, r3
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005d24:	2300      	movs	r3, #0
    }
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	4608      	mov	r0, r1
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4603      	mov	r3, r0
 8005d42:	817b      	strh	r3, [r7, #10]
 8005d44:	460b      	mov	r3, r1
 8005d46:	813b      	strh	r3, [r7, #8]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8005d4c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005d50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005d54:	4619      	mov	r1, r3
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 f844 	bl	8005de4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8005d5c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d64:	4619      	mov	r1, r3
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f898 	bl	8005e9c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	887a      	ldrh	r2, [r7, #2]
 8005db8:	809a      	strh	r2, [r3, #4]
    }
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	887a      	ldrh	r2, [r7, #2]
 8005dd6:	80da      	strh	r2, [r3, #6]
    }
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	807b      	strh	r3, [r7, #2]
 8005df0:	4613      	mov	r3, r2
 8005df2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	332c      	adds	r3, #44	; 0x2c
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005e00:	4611      	mov	r1, r2
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	4798      	blx	r3
        setY(y);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3330      	adds	r3, #48	; 0x30
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005e12:	4611      	mov	r1, r2
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	4798      	blx	r3
    }
 8005e18:	bf00      	nop
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	887a      	ldrh	r2, [r7, #2]
 8005e30:	811a      	strh	r2, [r3, #8]
    }
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	887a      	ldrh	r2, [r7, #2]
 8005e4e:	815a      	strh	r2, [r3, #10]
    }
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
    {
    }
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
    {
    }
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]
    {
    }
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	807b      	strh	r3, [r7, #2]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3334      	adds	r3, #52	; 0x34
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	4798      	blx	r3
        setHeight(height);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3338      	adds	r3, #56	; 0x38
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005eca:	4611      	mov	r1, r2
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	4798      	blx	r3
    }
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <_ZN8touchgfx8Drawable14setWidthHeightERKS0_>:
     *
     * @param  drawable The Drawable to copy the width and height from.
     *
     * @see setWidthHeight(int16_t,int16_t)
     */
    void setWidthHeight(const Drawable& drawable)
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
    {
        setWidthHeight(drawable.getWidth(), drawable.getHeight());
 8005ee2:	6838      	ldr	r0, [r7, #0]
 8005ee4:	f7ff ff46 	bl	8005d74 <_ZNK8touchgfx8Drawable8getWidthEv>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461c      	mov	r4, r3
 8005eec:	6838      	ldr	r0, [r7, #0]
 8005eee:	f7ff ff4e 	bl	8005d8e <_ZNK8touchgfx8Drawable9getHeightEv>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff ffcf 	bl	8005e9c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd90      	pop	{r4, r7, pc}

08005f06 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
    {
    }
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
    {
    }
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @param  vis true if this Drawable should be visible. By default, drawables are visible
     *             unless this function has been called with false as argument.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setVisible(bool vis)
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	78fa      	ldrb	r2, [r7, #3]
 8005f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	78fa      	ldrb	r2, [r7, #3]
 8005f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8005f7e:	4618      	mov	r0, r3
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	807b      	strh	r3, [r7, #2]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3350      	adds	r3, #80	; 0x50
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	8879      	ldrh	r1, [r7, #2]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8005fc4:	b292      	uxth	r2, r2
 8005fc6:	1a8a      	subs	r2, r1, r2
 8005fc8:	b292      	uxth	r2, r2
 8005fca:	b210      	sxth	r0, r2
 8005fcc:	8839      	ldrh	r1, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8005fd4:	b292      	uxth	r2, r2
 8005fd6:	1a8a      	subs	r2, r1, r2
 8005fd8:	b292      	uxth	r2, r2
 8005fda:	b212      	sxth	r2, r2
 8005fdc:	4601      	mov	r1, r0
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4798      	blx	r3
    }
 8005fe2:	bf00      	nop
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ff8:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006000:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006008:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff ffe1 	bl	8005fea <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	601a      	str	r2, [r3, #0]
    }
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fe16 	bl	8005c7c <_ZN8touchgfx8DrawableC1Ev>
 8006050:	4a05      	ldr	r2, [pc, #20]	; (8006068 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	0802c668 	.word	0x0802c668

0800606c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
    {
 800608c:	4a06      	ldr	r2, [pc, #24]	; (80060a8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3304      	adds	r3, #4
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f8f4 	bl	8006284 <_ZN8touchgfx9ContainerD1Ev>
    }
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	0802d7e4 	.word	0x0802d7e4

080060ac <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
    }
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff ffe5 	bl	8006084 <_ZN8touchgfx6ScreenD1Ev>
 80060ba:	213c      	movs	r1, #60	; 0x3c
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f023 fde8 	bl	8029c92 <_ZdlPvj>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4618      	mov	r0, r3
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
    {
    }
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
    {
    }
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
    {
    }
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
    {
    }
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
    {
    }
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3304      	adds	r3, #4
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	4618      	mov	r0, r3
 8006146:	f011 f857 	bl	80171f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	607b      	str	r3, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	817b      	strh	r3, [r7, #10]
 8006160:	4613      	mov	r3, r2
 8006162:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff ff02 	bl	8005f70 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d008      	beq.n	8006184 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff ff08 	bl	8005f8a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	601a      	str	r2, [r3, #0]
        }
    }
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff fd6a 	bl	8005c7c <_ZN8touchgfx8DrawableC1Ev>
 80061a8:	4a03      	ldr	r2, [pc, #12]	; (80061b8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	0802c1b0 	.word	0x0802c1b0

080061bc <_ZN8touchgfx6WidgetD1Ev>:
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	4a05      	ldr	r2, [pc, #20]	; (80061dc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff fd85 	bl	8005cdc <_ZN8touchgfx8DrawableD1Ev>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	0802c1b0 	.word	0x0802c1b0

080061e0 <_ZN8touchgfx6WidgetD0Ev>:
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff ffe7 	bl	80061bc <_ZN8touchgfx6WidgetD1Ev>
 80061ee:	2128      	movs	r1, #40	; 0x28
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f023 fd4e 	bl	8029c92 <_ZdlPvj>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4618      	mov	r0, r3
 800620c:	2326      	movs	r3, #38	; 0x26
 800620e:	461a      	mov	r2, r3
 8006210:	2100      	movs	r1, #0
 8006212:	f023 fdf9 	bl	8029e08 <memset>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4618      	mov	r0, r3
 800621a:	f7ff ffbd 	bl	8006198 <_ZN8touchgfx6WidgetC1Ev>
 800621e:	4a09      	ldr	r2, [pc, #36]	; (8006244 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	22ff      	movs	r2, #255	; 0xff
 8006228:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3328      	adds	r3, #40	; 0x28
 8006230:	2100      	movs	r1, #0
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fd06 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	0802d230 	.word	0x0802d230

08006248 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	460b      	mov	r3, r1
 800626e:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	78fa      	ldrb	r2, [r7, #3]
 8006274:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	4a05      	ldr	r2, [pc, #20]	; (80062a4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fd21 	bl	8005cdc <_ZN8touchgfx8DrawableD1Ev>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	0802c668 	.word	0x0802c668

080062a8 <_ZN8touchgfx9ContainerD0Ev>:
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff ffe7 	bl	8006284 <_ZN8touchgfx9ContainerD1Ev>
 80062b6:	212c      	movs	r1, #44	; 0x2c
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f023 fcea 	bl	8029c92 <_ZdlPvj>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff feb4 	bl	8006040 <_ZN8touchgfx9ContainerC1Ev>
 80062d8:	4a0b      	ldr	r2, [pc, #44]	; (8006308 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	22ff      	movs	r2, #255	; 0xff
 80062ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2101      	movs	r1, #1
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fe29 	bl	8005f50 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	0802c118 	.word	0x0802c118

0800630c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3388      	adds	r3, #136	; 0x88
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
    }
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8006342:	4618      	mov	r0, r3
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
        alpha = newAlpha;
        handleAlphaUpdated();
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 800635c:	4618      	mov	r0, r3
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @param  callback The callback.
     *
     * @see executeAction
     */
    void setAction(GenericCallback<const AbstractButtonContainer&>& callback)
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00d      	beq.n	80063b0 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	330c      	adds	r3, #12
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4610      	mov	r0, r2
 80063a4:	4798      	blx	r3
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 80063ac:	2301      	movs	r3, #1
 80063ae:	e000      	b.n	80063b2 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 80063b0:	2300      	movs	r3, #0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d009      	beq.n	80063ca <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3308      	adds	r3, #8
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	4610      	mov	r0, r2
 80063c8:	4798      	blx	r3
        }
    }
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
    {
    }
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
    {
    }
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
	...

080063fc <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	4a05      	ldr	r2, [pc, #20]	; (800641c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fed5 	bl	80061bc <_ZN8touchgfx6WidgetD1Ev>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	0802d230 	.word	0x0802d230

08006420 <_ZN8touchgfx3BoxD0Ev>:
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff ffe7 	bl	80063fc <_ZN8touchgfx3BoxD1Ev>
 800642e:	212c      	movs	r1, #44	; 0x2c
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f023 fc2e 	bl	8029c92 <_ZdlPvj>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff fed8 	bl	8006200 <_ZN8touchgfx3BoxC1Ev>
 8006450:	4a08      	ldr	r2, [pc, #32]	; (8006474 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	332c      	adds	r3, #44	; 0x2c
 800645a:	2100      	movs	r1, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff fbf1 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	0802d33c 	.word	0x0802d33c

08006478 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	887a      	ldrh	r2, [r7, #2]
 80064a4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff ff38 	bl	8006334 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80064c4:	4603      	mov	r3, r0
 80064c6:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80064c8:	6838      	ldr	r0, [r7, #0]
 80064ca:	f7ff fbca 	bl	8005c62 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	bf0c      	ite	eq
 80064d4:	2301      	moveq	r3, #1
 80064d6:	2300      	movne	r3, #0
 80064d8:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80064da:	7bbb      	ldrb	r3, [r7, #14]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	f083 0301 	eor.w	r3, r3, #1
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d108      	bne.n	80064fe <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	f083 0301 	eor.w	r3, r3, #1
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00f      	beq.n	8006518 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00c      	beq.n	8006518 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	7bba      	ldrb	r2, [r7, #14]
 8006502:	4611      	mov	r1, r2
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff ff01 	bl	800630c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3314      	adds	r3, #20
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4610      	mov	r0, r2
 8006516:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800651e:	6838      	ldr	r0, [r7, #0]
 8006520:	f7ff fb9f 	bl	8005c62 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8006524:	4603      	mov	r3, r0
 8006526:	2b01      	cmp	r3, #1
 8006528:	d101      	bne.n	800652e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 800652e:	2300      	movs	r3, #0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d006      	beq.n	8006542 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3384      	adds	r3, #132	; 0x84
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4610      	mov	r0, r2
 8006540:	4798      	blx	r3
        }
    }
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	4a05      	ldr	r2, [pc, #20]	; (800656c <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff fe91 	bl	8006284 <_ZN8touchgfx9ContainerD1Ev>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	0802c118 	.word	0x0802c118

08006570 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff ffe7 	bl	800654c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800657e:	2134      	movs	r1, #52	; 0x34
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f023 fb86 	bl	8029c92 <_ZdlPvj>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800659c:	4a06      	ldr	r2, [pc, #24]	; (80065b8 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	887a      	ldrh	r2, [r7, #2]
 80065a6:	809a      	strh	r2, [r3, #4]
    }
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	0802be08 	.word	0x0802be08

080065bc <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4618      	mov	r0, r3
 80065c8:	2326      	movs	r3, #38	; 0x26
 80065ca:	461a      	mov	r2, r3
 80065cc:	2100      	movs	r1, #0
 80065ce:	f023 fc1b 	bl	8029e08 <memset>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff fddf 	bl	8006198 <_ZN8touchgfx6WidgetC1Ev>
 80065da:	4a14      	ldr	r2, [pc, #80]	; (800662c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3328      	adds	r3, #40	; 0x28
 80065e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff ffd1 	bl	8006590 <_ZN8touchgfx9TypedTextC1Et>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3330      	adds	r3, #48	; 0x30
 80065f2:	2100      	movs	r1, #0
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fb25 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	869a      	strh	r2, [r3, #52]	; 0x34
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	22ff      	movs	r2, #255	; 0xff
 8006604:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	0802d188 	.word	0x0802d188

08006630 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	78fa      	ldrb	r2, [r7, #3]
 8006640:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	4a08      	ldr	r2, [pc, #32]	; (800667c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3328      	adds	r3, #40	; 0x28
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe feb0 	bl	80053c8 <_ZN8touchgfx9TypedTextD1Ev>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff fda6 	bl	80061bc <_ZN8touchgfx6WidgetD1Ev>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	0802d188 	.word	0x0802d188

08006680 <_ZN8touchgfx8TextAreaD0Ev>:
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ffe1 	bl	8006650 <_ZN8touchgfx8TextAreaD1Ev>
 800668e:	213c      	movs	r1, #60	; 0x3c
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f023 fafe 	bl	8029c92 <_ZdlPvj>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff ff86 	bl	80065bc <_ZN8touchgfx8TextAreaC1Ev>
 80066b0:	4a05      	ldr	r2, [pc, #20]	; (80066c8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	0802d294 	.word	0x0802d294

080066cc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	4a05      	ldr	r2, [pc, #20]	; (80066ec <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff fcd1 	bl	8006084 <_ZN8touchgfx6ScreenD1Ev>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	0802c034 	.word	0x0802c034

080066f0 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff ffe7 	bl	80066cc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80066fe:	2140      	movs	r1, #64	; 0x40
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f023 fac6 	bl	8029c92 <_ZdlPvj>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	4a2b      	ldr	r2, [pc, #172]	; (80067c8 <_ZN15Screen1ViewBaseD1Ev+0xb8>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f203 5354 	addw	r3, r3, #1364	; 0x554
 8006724:	4618      	mov	r0, r3
 8006726:	f001 fa13 	bl	8007b50 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8006730:	4618      	mov	r0, r3
 8006732:	f001 faa5 	bl	8007c80 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 800673c:	4618      	mov	r0, r3
 800673e:	f001 fa29 	bl	8007b94 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8006748:	4618      	mov	r0, r3
 800674a:	f001 fa23 	bl	8007b94 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8006754:	4618      	mov	r0, r3
 8006756:	f001 fa45 	bl	8007be4 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff fd8f 	bl	8006284 <_ZN8touchgfx9ContainerD1Ev>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff ff6f 	bl	8006650 <_ZN8touchgfx8TextAreaD1Ev>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8006778:	4618      	mov	r0, r3
 800677a:	f001 fa55 	bl	8007c28 <_ZN8touchgfx19ScrollableContainerD1Ev>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006784:	4618      	mov	r0, r3
 8006786:	f001 fa2d 	bl	8007be4 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006790:	4618      	mov	r0, r3
 8006792:	f001 f9ff 	bl	8007b94 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3398      	adds	r3, #152	; 0x98
 800679a:	4618      	mov	r0, r3
 800679c:	f001 f9fa 	bl	8007b94 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	336c      	adds	r3, #108	; 0x6c
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff fe29 	bl	80063fc <_ZN8touchgfx3BoxD1Ev>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3340      	adds	r3, #64	; 0x40
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff fe24 	bl	80063fc <_ZN8touchgfx3BoxD1Ev>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff ff88 	bl	80066cc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	0802beb8 	.word	0x0802beb8

080067cc <_ZN15Screen1ViewBaseD0Ev>:
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ff9b 	bl	8006710 <_ZN15Screen1ViewBaseD1Ev>
 80067da:	f240 5164 	movw	r1, #1380	; 0x564
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f023 fa57 	bl	8029c92 <_ZdlPvj>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 80067f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f4:	b0d6      	sub	sp, #344	; 0x158
 80067f6:	af02      	add	r7, sp, #8
 80067f8:	1d3b      	adds	r3, r7, #4
 80067fa:	6018      	str	r0, [r3, #0]
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
 80067fc:	1d3b      	adds	r3, r7, #4
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 ff89 	bl	8007718 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8006806:	4aeb      	ldr	r2, [pc, #940]	; (8006bb4 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 8006808:	1d3b      	adds	r3, r7, #4
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	1d3b      	adds	r3, r7, #4
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3340      	adds	r3, #64	; 0x40
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff fcf3 	bl	8006200 <_ZN8touchgfx3BoxC1Ev>
 800681a:	1d3b      	adds	r3, r7, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	336c      	adds	r3, #108	; 0x6c
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fced 	bl	8006200 <_ZN8touchgfx3BoxC1Ev>
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3398      	adds	r3, #152	; 0x98
 800682c:	4618      	mov	r0, r3
 800682e:	f000 ffd3 	bl	80077d8 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8006832:	1d3b      	adds	r3, r7, #4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800683a:	4618      	mov	r0, r3
 800683c:	f000 ffcc 	bl	80077d8 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8006840:	1d3b      	adds	r3, r7, #4
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff fdf9 	bl	8006440 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800684e:	1d3b      	adds	r3, r7, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8006856:	4618      	mov	r0, r3
 8006858:	f011 fa3c 	bl	8017cd4 <_ZN8touchgfx19ScrollableContainerC1Ev>
 800685c:	1d3b      	adds	r3, r7, #4
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fea9 	bl	80065bc <_ZN8touchgfx8TextAreaC1Ev>
 800686a:	1d3b      	adds	r3, r7, #4
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fbe4 	bl	8006040 <_ZN8touchgfx9ContainerC1Ev>
 8006878:	1d3b      	adds	r3, r7, #4
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff fddd 	bl	8006440 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006886:	1d3b      	adds	r3, r7, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800688e:	4618      	mov	r0, r3
 8006890:	f000 ffa2 	bl	80077d8 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8006894:	1d3b      	adds	r3, r7, #4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 800689c:	4618      	mov	r0, r3
 800689e:	f000 ff9b 	bl	80077d8 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 80068a2:	1d3b      	adds	r3, r7, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f203 5314 	addw	r3, r3, #1300	; 0x514
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fef8 	bl	80066a0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80068b0:	1d3b      	adds	r3, r7, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f203 5054 	addw	r0, r3, #1364	; 0x554
 80068b8:	f107 0314 	add.w	r3, r7, #20
 80068bc:	4abe      	ldr	r2, [pc, #760]	; (8006bb8 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	f107 0314 	add.w	r3, r7, #20
 80068c4:	2200      	movs	r2, #0
 80068c6:	605a      	str	r2, [r3, #4]
 80068c8:	f107 0314 	add.w	r3, r7, #20
 80068cc:	1d39      	adds	r1, r7, #4
 80068ce:	cb0c      	ldmia	r3, {r2, r3}
 80068d0:	6809      	ldr	r1, [r1, #0]
 80068d2:	f000 ffb9 	bl	8007848 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 80068d6:	1d3b      	adds	r3, r7, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80068de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80068e8:	2200      	movs	r2, #0
 80068ea:	2100      	movs	r1, #0
 80068ec:	f7ff fa21 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80068f0:	1d3b      	adds	r3, r7, #4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80068f8:	2300      	movs	r3, #0
 80068fa:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 80068fe:	2300      	movs	r3, #0
 8006900:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8006904:	2300      	movs	r3, #0
 8006906:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800690a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800690e:	041b      	lsls	r3, r3, #16
 8006910:	461a      	mov	r2, r3
 8006912:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	431a      	orrs	r2, r3
 800691a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800691e:	4313      	orrs	r3, r2
 8006920:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006924:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006928:	4611      	mov	r1, r2
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff f98a 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006930:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006934:	4619      	mov	r1, r3
 8006936:	4620      	mov	r0, r4
 8006938:	f7ff fc86 	bl	8006248 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    background.setPosition(0, 0, 480, 272);
 800693c:	1d3b      	adds	r3, r7, #4
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8006944:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800694e:	2200      	movs	r2, #0
 8006950:	2100      	movs	r1, #0
 8006952:	f7ff f9ee 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFromRGB(255, 163, 59));
 8006956:	1d3b      	adds	r3, r7, #4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800695e:	23ff      	movs	r3, #255	; 0xff
 8006960:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006964:	23a3      	movs	r3, #163	; 0xa3
 8006966:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 800696a:	233b      	movs	r3, #59	; 0x3b
 800696c:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8006970:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006974:	041b      	lsls	r3, r3, #16
 8006976:	461a      	mov	r2, r3
 8006978:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	431a      	orrs	r2, r3
 8006980:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8006984:	4313      	orrs	r3, r2
 8006986:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800698a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800698e:	4611      	mov	r1, r2
 8006990:	4618      	mov	r0, r3
 8006992:	f7ff f957 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800699a:	4619      	mov	r1, r3
 800699c:	4620      	mov	r0, r4
 800699e:	f7ff fc53 	bl	8006248 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    txButton.setBoxWithBorderPosition(0, 0, 69, 48);
 80069a2:	1d3b      	adds	r3, r7, #4
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80069aa:	2330      	movs	r3, #48	; 0x30
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	2345      	movs	r3, #69	; 0x45
 80069b0:	2200      	movs	r2, #0
 80069b2:	2100      	movs	r1, #0
 80069b4:	f000 ff68 	bl	8007888 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    txButton.setBorderSize(5);
 80069b8:	1d3b      	adds	r3, r7, #4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3398      	adds	r3, #152	; 0x98
 80069be:	2105      	movs	r1, #5
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 ff81 	bl	80078c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    txButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 80069c6:	1d3b      	adds	r3, r7, #4
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80069ce:	2300      	movs	r3, #0
 80069d0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80069d4:	2366      	movs	r3, #102	; 0x66
 80069d6:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 80069da:	2399      	movs	r3, #153	; 0x99
 80069dc:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80069e0:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	461a      	mov	r2, r3
 80069e8:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	431a      	orrs	r2, r3
 80069f0:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80069fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80069fe:	4611      	mov	r1, r2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff f91f 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a0a:	461d      	mov	r5, r3
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8006a12:	2399      	movs	r3, #153	; 0x99
 8006a14:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8006a18:	23cc      	movs	r3, #204	; 0xcc
 8006a1a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8006a1e:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8006a22:	041b      	lsls	r3, r3, #16
 8006a24:	461a      	mov	r2, r3
 8006a26:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006a32:	4313      	orrs	r3, r2
 8006a34:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006a38:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff f900 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a48:	461e      	mov	r6, r3
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
 8006a50:	2333      	movs	r3, #51	; 0x33
 8006a52:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8006a56:	2366      	movs	r3, #102	; 0x66
 8006a58:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8006a5c:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	461a      	mov	r2, r3
 8006a64:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8006a70:	4313      	orrs	r3, r2
 8006a72:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006a76:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff f8e1 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006a82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a86:	4698      	mov	r8, r3
 8006a88:	2333      	movs	r3, #51	; 0x33
 8006a8a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 8006a8e:	2366      	movs	r3, #102	; 0x66
 8006a90:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006a94:	2399      	movs	r3, #153	; 0x99
 8006a96:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
 8006a9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a9e:	041b      	lsls	r3, r3, #16
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006ab4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff f8c2 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006ac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	4643      	mov	r3, r8
 8006ac8:	4632      	mov	r2, r6
 8006aca:	4629      	mov	r1, r5
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 ff0d 	bl	80078ec <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    txButton.setText(TypedText(T___SINGLEUSE_C6V9));
 8006ad2:	1d3b      	adds	r3, r7, #4
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006ada:	f107 031c 	add.w	r3, r7, #28
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7ff fd55 	bl	8006590 <_ZN8touchgfx9TypedTextC1Et>
 8006ae6:	f107 031c 	add.w	r3, r7, #28
 8006aea:	4619      	mov	r1, r3
 8006aec:	4620      	mov	r0, r4
 8006aee:	f000 ff1a 	bl	8007926 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8006af2:	f107 031c 	add.w	r3, r7, #28
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fc66 	bl	80053c8 <_ZN8touchgfx9TypedTextD1Ev>
    txButton.setTextPosition(0, 11, 69, 48);
 8006afc:	1d3b      	adds	r3, r7, #4
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8006b04:	2330      	movs	r3, #48	; 0x30
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	2345      	movs	r3, #69	; 0x45
 8006b0a:	220b      	movs	r2, #11
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	f000 ff20 	bl	8007952 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    txButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006b12:	1d3b      	adds	r3, r7, #4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006b1a:	23ff      	movs	r3, #255	; 0xff
 8006b1c:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8006b20:	23ff      	movs	r3, #255	; 0xff
 8006b22:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 8006b26:	23ff      	movs	r3, #255	; 0xff
 8006b28:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 8006b2c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8006b30:	041b      	lsls	r3, r3, #16
 8006b32:	461a      	mov	r2, r3
 8006b34:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006b46:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff f879 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006b52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b56:	461d      	mov	r5, r3
 8006b58:	23ff      	movs	r3, #255	; 0xff
 8006b5a:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
 8006b5e:	23ff      	movs	r3, #255	; 0xff
 8006b60:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
 8006b64:	23ff      	movs	r3, #255	; 0xff
 8006b66:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8006b6a:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8006b6e:	041b      	lsls	r3, r3, #16
 8006b70:	461a      	mov	r2, r3
 8006b72:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006b84:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff f85a 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006b90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b94:	461a      	mov	r2, r3
 8006b96:	4629      	mov	r1, r5
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fefa 	bl	8007992 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    txButton.setPosition(23, 18, 69, 48);
 8006b9e:	1d3b      	adds	r3, r7, #4
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8006ba6:	2330      	movs	r3, #48	; 0x30
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	2345      	movs	r3, #69	; 0x45
 8006bac:	2212      	movs	r2, #18
 8006bae:	2117      	movs	r1, #23
 8006bb0:	e004      	b.n	8006bbc <_ZN15Screen1ViewBaseC1Ev+0x3cc>
 8006bb2:	bf00      	nop
 8006bb4:	0802beb8 	.word	0x0802beb8
 8006bb8:	080076b9 	.word	0x080076b9
 8006bbc:	f7ff f8b9 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>
    txButton.setAction(flexButtonCallback);
 8006bc0:	1d3b      	adds	r3, r7, #4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8006bc8:	1d3b      	adds	r3, r7, #4
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f203 5354 	addw	r3, r3, #1364	; 0x554
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	f7ff fbc8 	bl	8006368 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    rxButton.setBoxWithBorderPosition(0, 0, 69, 48);
 8006bd8:	1d3b      	adds	r3, r7, #4
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 8006be0:	2330      	movs	r3, #48	; 0x30
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2345      	movs	r3, #69	; 0x45
 8006be6:	2200      	movs	r2, #0
 8006be8:	2100      	movs	r1, #0
 8006bea:	f000 fe4d 	bl	8007888 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    rxButton.setBorderSize(5);
 8006bee:	1d3b      	adds	r3, r7, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bf6:	2105      	movs	r1, #5
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fe65 	bl	80078c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    rxButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 8006bfe:	1d3b      	adds	r3, r7, #4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
 8006c0c:	2366      	movs	r3, #102	; 0x66
 8006c0e:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8006c12:	2399      	movs	r3, #153	; 0x99
 8006c14:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
 8006c18:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8006c1c:	041b      	lsls	r3, r3, #16
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	431a      	orrs	r2, r3
 8006c28:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006c32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff f803 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c42:	461d      	mov	r5, r3
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8006c4a:	2399      	movs	r3, #153	; 0x99
 8006c4c:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 8006c50:	23cc      	movs	r3, #204	; 0xcc
 8006c52:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
 8006c56:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006c5a:	041b      	lsls	r3, r3, #16
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8006c62:	021b      	lsls	r3, r3, #8
 8006c64:	431a      	orrs	r2, r3
 8006c66:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006c70:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006c74:	4611      	mov	r1, r2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe ffe4 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c80:	461e      	mov	r6, r3
 8006c82:	2300      	movs	r3, #0
 8006c84:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8006c88:	2333      	movs	r3, #51	; 0x33
 8006c8a:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8006c8e:	2366      	movs	r3, #102	; 0x66
 8006c90:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 8006c94:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8006c98:	041b      	lsls	r3, r3, #16
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006cae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fe ffc5 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006cba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cbe:	4698      	mov	r8, r3
 8006cc0:	2333      	movs	r3, #51	; 0x33
 8006cc2:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
 8006cc6:	2366      	movs	r3, #102	; 0x66
 8006cc8:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
 8006ccc:	2399      	movs	r3, #153	; 0x99
 8006cce:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8006cd2:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 8006cd6:	041b      	lsls	r3, r3, #16
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8006cde:	021b      	lsls	r3, r3, #8
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006cec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe ffa6 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006cf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	4643      	mov	r3, r8
 8006d00:	4632      	mov	r2, r6
 8006d02:	4629      	mov	r1, r5
 8006d04:	4620      	mov	r0, r4
 8006d06:	f000 fdf1 	bl	80078ec <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    rxButton.setText(TypedText(T___SINGLEUSE_NCFE));
 8006d0a:	1d3b      	adds	r3, r7, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8006d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d16:	2101      	movs	r1, #1
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff fc39 	bl	8006590 <_ZN8touchgfx9TypedTextC1Et>
 8006d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d22:	4619      	mov	r1, r3
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 fdfe 	bl	8007926 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8006d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fe fb4a 	bl	80053c8 <_ZN8touchgfx9TypedTextD1Ev>
    rxButton.setTextPosition(0, 11, 69, 48);
 8006d34:	1d3b      	adds	r3, r7, #4
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 8006d3c:	2330      	movs	r3, #48	; 0x30
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	2345      	movs	r3, #69	; 0x45
 8006d42:	220b      	movs	r2, #11
 8006d44:	2100      	movs	r1, #0
 8006d46:	f000 fe04 	bl	8007952 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    rxButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006d4a:	1d3b      	adds	r3, r7, #4
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8006d52:	23ff      	movs	r3, #255	; 0xff
 8006d54:	f887 30f8 	strb.w	r3, [r7, #248]	; 0xf8
 8006d58:	23ff      	movs	r3, #255	; 0xff
 8006d5a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8006d5e:	23ff      	movs	r3, #255	; 0xff
 8006d60:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
 8006d64:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8006d68:	041b      	lsls	r3, r3, #16
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8006d70:	021b      	lsls	r3, r3, #8
 8006d72:	431a      	orrs	r2, r3
 8006d74:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006d7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006d82:	4611      	mov	r1, r2
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fe ff5d 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006d8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d8e:	461d      	mov	r5, r3
 8006d90:	23ff      	movs	r3, #255	; 0xff
 8006d92:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 8006d96:	23ff      	movs	r3, #255	; 0xff
 8006d98:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 8006d9c:	23ff      	movs	r3, #255	; 0xff
 8006d9e:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
 8006da2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8006da6:	041b      	lsls	r3, r3, #16
 8006da8:	461a      	mov	r2, r3
 8006daa:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	431a      	orrs	r2, r3
 8006db2:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006dbc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe ff3e 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dcc:	461a      	mov	r2, r3
 8006dce:	4629      	mov	r1, r5
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fdde 	bl	8007992 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    rxButton.setPosition(112, 18, 69, 48);
 8006dd6:	1d3b      	adds	r3, r7, #4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 8006dde:	2330      	movs	r3, #48	; 0x30
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	2345      	movs	r3, #69	; 0x45
 8006de4:	2212      	movs	r2, #18
 8006de6:	2170      	movs	r1, #112	; 0x70
 8006de8:	f7fe ffa3 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>
    rxButton.setAction(flexButtonCallback);
 8006dec:	1d3b      	adds	r3, r7, #4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f503 72aa 	add.w	r2, r3, #340	; 0x154
 8006df4:	1d3b      	adds	r3, r7, #4
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f203 5354 	addw	r3, r3, #1364	; 0x554
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f7ff fab2 	bl	8006368 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    scrollBackgroundBox.setPosition(208, 0, 272, 272);
 8006e04:	1d3b      	adds	r3, r7, #4
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f503 7004 	add.w	r0, r3, #528	; 0x210
 8006e0c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006e16:	2200      	movs	r2, #0
 8006e18:	21d0      	movs	r1, #208	; 0xd0
 8006e1a:	f7fe ff8a 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollBackgroundBox.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8006e26:	23ff      	movs	r3, #255	; 0xff
 8006e28:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
 8006e2c:	23ff      	movs	r3, #255	; 0xff
 8006e2e:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8006e32:	23ff      	movs	r3, #255	; 0xff
 8006e34:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8006e38:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8006e3c:	041b      	lsls	r3, r3, #16
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8006e44:	021b      	lsls	r3, r3, #8
 8006e46:	431a      	orrs	r2, r3
 8006e48:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006e52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006e56:	4611      	mov	r1, r2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe fef3 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006e5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e62:	4619      	mov	r1, r3
 8006e64:	4620      	mov	r0, r4
 8006e66:	f7ff f9ef 	bl	8006248 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    scrollBackgroundBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006e6a:	1d3b      	adds	r3, r7, #4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8006e72:	2300      	movs	r3, #0
 8006e74:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8006e84:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8006e88:	041b      	lsls	r3, r3, #16
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	431a      	orrs	r2, r3
 8006e94:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006e9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fe fecd 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f7ff fae1 	bl	8006478 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    scrollBackgroundBox.setBorderSize(5);
 8006eb6:	1d3b      	adds	r3, r7, #4
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006ebe:	2105      	movs	r1, #5
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff fae7 	bl	8006494 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    scrollableContainer.setPosition(219, 11, 250, 250);
 8006ec6:	1d3b      	adds	r3, r7, #4
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f503 7011 	add.w	r0, r3, #580	; 0x244
 8006ece:	23fa      	movs	r3, #250	; 0xfa
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	23fa      	movs	r3, #250	; 0xfa
 8006ed4:	220b      	movs	r2, #11
 8006ed6:	21db      	movs	r1, #219	; 0xdb
 8006ed8:	f7fe ff2b 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006edc:	1d3b      	adds	r3, r7, #4
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f503 7411 	add.w	r4, r3, #580	; 0x244
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 8006eea:	2300      	movs	r3, #0
 8006eec:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 8006ef6:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8006efa:	041b      	lsls	r3, r3, #16
 8006efc:	461a      	mov	r2, r3
 8006efe:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	431a      	orrs	r2, r3
 8006f06:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006f10:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006f14:	4611      	mov	r1, r2
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fe94 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f20:	4619      	mov	r1, r3
 8006f22:	4620      	mov	r0, r4
 8006f24:	f011 f9ea 	bl	80182fc <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>

    feedbackTextArea.setXY(0, 0);
 8006f28:	1d3b      	adds	r3, r7, #4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006f30:	2200      	movs	r2, #0
 8006f32:	2100      	movs	r1, #0
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fe ff55 	bl	8005de4 <_ZN8touchgfx8Drawable5setXYEss>
    feedbackTextArea.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006f3a:	1d3b      	adds	r3, r7, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8006f42:	2300      	movs	r3, #0
 8006f44:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8006f54:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8006f58:	041b      	lsls	r3, r3, #16
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8006f60:	021b      	lsls	r3, r3, #8
 8006f62:	431a      	orrs	r2, r3
 8006f64:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006f6e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006f72:	4611      	mov	r1, r2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe fe65 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8006f7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8006f84:	f107 0310 	add.w	r3, r7, #16
 8006f88:	601a      	str	r2, [r3, #0]
        this->color = color;
 8006f8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f8e:	f107 0210 	add.w	r2, r7, #16
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006f96:	bf00      	nop
    feedbackTextArea.setLinespacing(0);
 8006f98:	1d3b      	adds	r3, r7, #4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006fa0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8006faa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006fae:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006fb2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8006fb4:	bf00      	nop
    feedbackTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X7DN));
 8006fb6:	1d3b      	adds	r3, r7, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8006fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fc2:	2102      	movs	r1, #2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff fae3 	bl	8006590 <_ZN8touchgfx9TypedTextC1Et>
 8006fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f012 fb54 	bl	801967e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe f9f4 	bl	80053c8 <_ZN8touchgfx9TypedTextD1Ev>
    scrollableContainer.add(feedbackTextArea);
 8006fe0:	1d3b      	adds	r3, r7, #4
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f503 7211 	add.w	r2, r3, #580	; 0x244
 8006fe8:	1d3b      	adds	r3, r7, #4
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	f010 fb93 	bl	801771e <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
    scrollableContainer.setScrollbarsPermanentlyVisible();
 8006ff8:	1d3b      	adds	r3, r7, #4
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8007000:	2101      	movs	r1, #1
 8007002:	4618      	mov	r0, r3
 8007004:	f011 f97f 	bl	8018306 <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>

    txInfoContainer.setPosition(7, 77, 190, 184);
 8007008:	1d3b      	adds	r3, r7, #4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8007010:	23b8      	movs	r3, #184	; 0xb8
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	23be      	movs	r3, #190	; 0xbe
 8007016:	224d      	movs	r2, #77	; 0x4d
 8007018:	2107      	movs	r1, #7
 800701a:	f7fe fe8a 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>

    txInfoBackgroundBox.setPosition(0, 0, 190, 184);
 800701e:	1d3b      	adds	r3, r7, #4
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f503 705a 	add.w	r0, r3, #872	; 0x368
 8007026:	23b8      	movs	r3, #184	; 0xb8
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	23be      	movs	r3, #190	; 0xbe
 800702c:	2200      	movs	r2, #0
 800702e:	2100      	movs	r1, #0
 8007030:	f7fe fe7f 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>
    txInfoBackgroundBox.setColor(touchgfx::Color::getColorFromRGB(255, 201, 143));
 8007034:	1d3b      	adds	r3, r7, #4
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f503 745a 	add.w	r4, r3, #872	; 0x368
 800703c:	23ff      	movs	r3, #255	; 0xff
 800703e:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8007042:	23c9      	movs	r3, #201	; 0xc9
 8007044:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 8007048:	238f      	movs	r3, #143	; 0x8f
 800704a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800704e:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8007052:	041b      	lsls	r3, r3, #16
 8007054:	461a      	mov	r2, r3
 8007056:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 800705a:	021b      	lsls	r3, r3, #8
 800705c:	431a      	orrs	r2, r3
 800705e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007062:	4313      	orrs	r3, r2
 8007064:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007068:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800706c:	4611      	mov	r1, r2
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fde8 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8007074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007078:	4619      	mov	r1, r3
 800707a:	4620      	mov	r0, r4
 800707c:	f7ff f8e4 	bl	8006248 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    txInfoBackgroundBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007080:	1d3b      	adds	r3, r7, #4
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f503 745a 	add.w	r4, r3, #872	; 0x368
 8007088:	2300      	movs	r3, #0
 800708a:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 800708e:	2300      	movs	r3, #0
 8007090:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 8007094:	2300      	movs	r3, #0
 8007096:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800709a:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 800709e:	041b      	lsls	r3, r3, #16
 80070a0:	461a      	mov	r2, r3
 80070a2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	431a      	orrs	r2, r3
 80070aa:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80070b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80070b8:	4611      	mov	r1, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fdc2 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 80070c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070c4:	4619      	mov	r1, r3
 80070c6:	4620      	mov	r0, r4
 80070c8:	f7ff f9d6 	bl	8006478 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    txInfoBackgroundBox.setBorderSize(5);
 80070cc:	1d3b      	adds	r3, r7, #4
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80070d4:	2105      	movs	r1, #5
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff f9dc 	bl	8006494 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    txInfoContainer.add(txInfoBackgroundBox);
 80070dc:	1d3b      	adds	r3, r7, #4
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 80070e4:	1d3b      	adds	r3, r7, #4
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f010 f882 	bl	80171f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    sendValButton.setBoxWithBorderPosition(0, 0, 158, 32);
 80070f4:	1d3b      	adds	r3, r7, #4
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 80070fc:	2320      	movs	r3, #32
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	239e      	movs	r3, #158	; 0x9e
 8007102:	2200      	movs	r2, #0
 8007104:	2100      	movs	r1, #0
 8007106:	f000 fbbf 	bl	8007888 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    sendValButton.setBorderSize(5);
 800710a:	1d3b      	adds	r3, r7, #4
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8007112:	2105      	movs	r1, #5
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fbd7 	bl	80078c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    sendValButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800711a:	1d3b      	adds	r3, r7, #4
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8007122:	2300      	movs	r3, #0
 8007124:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8007128:	2366      	movs	r3, #102	; 0x66
 800712a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800712e:	2399      	movs	r3, #153	; 0x99
 8007130:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8007134:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007138:	041b      	lsls	r3, r3, #16
 800713a:	461a      	mov	r2, r3
 800713c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	431a      	orrs	r2, r3
 8007144:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8007148:	4313      	orrs	r3, r2
 800714a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800714e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007152:	4611      	mov	r1, r2
 8007154:	4618      	mov	r0, r3
 8007156:	f7fe fd75 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 800715a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800715c:	461d      	mov	r5, r3
 800715e:	2300      	movs	r3, #0
 8007160:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
 8007164:	2399      	movs	r3, #153	; 0x99
 8007166:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
 800716a:	23cc      	movs	r3, #204	; 0xcc
 800716c:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
 8007170:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8007174:	041b      	lsls	r3, r3, #16
 8007176:	461a      	mov	r2, r3
 8007178:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	431a      	orrs	r2, r3
 8007180:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8007184:	4313      	orrs	r3, r2
 8007186:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800718a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe fd57 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 8007196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007198:	461e      	mov	r6, r3
 800719a:	2300      	movs	r3, #0
 800719c:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
 80071a0:	2333      	movs	r3, #51	; 0x33
 80071a2:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
 80071a6:	2366      	movs	r3, #102	; 0x66
 80071a8:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
 80071ac:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 80071b0:	041b      	lsls	r3, r3, #16
 80071b2:	461a      	mov	r2, r3
 80071b4:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	431a      	orrs	r2, r3
 80071bc:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80071c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80071ca:	4611      	mov	r1, r2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe fd39 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 80071d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071d4:	4698      	mov	r8, r3
 80071d6:	2333      	movs	r3, #51	; 0x33
 80071d8:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
 80071dc:	2366      	movs	r3, #102	; 0x66
 80071de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80071e2:	2399      	movs	r3, #153	; 0x99
 80071e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80071e8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80071ec:	041b      	lsls	r3, r3, #16
 80071ee:	461a      	mov	r2, r3
 80071f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	431a      	orrs	r2, r3
 80071f8:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007202:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007206:	4611      	mov	r1, r2
 8007208:	4618      	mov	r0, r3
 800720a:	f7fe fd1b 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 800720e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	4643      	mov	r3, r8
 8007214:	4632      	mov	r2, r6
 8007216:	4629      	mov	r1, r5
 8007218:	4620      	mov	r0, r4
 800721a:	f000 fb67 	bl	80078ec <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    sendValButton.setText(TypedText(T___SINGLEUSE_N3IE));
 800721e:	1d3b      	adds	r3, r7, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8007226:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800722a:	2105      	movs	r1, #5
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff f9af 	bl	8006590 <_ZN8touchgfx9TypedTextC1Et>
 8007232:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007236:	4619      	mov	r1, r3
 8007238:	4620      	mov	r0, r4
 800723a:	f000 fb74 	bl	8007926 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 800723e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe f8c0 	bl	80053c8 <_ZN8touchgfx9TypedTextD1Ev>
    sendValButton.setTextPosition(0, 6, 158, 32);
 8007248:	1d3b      	adds	r3, r7, #4
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8007250:	2320      	movs	r3, #32
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	239e      	movs	r3, #158	; 0x9e
 8007256:	2206      	movs	r2, #6
 8007258:	2100      	movs	r1, #0
 800725a:	f000 fb7a 	bl	8007952 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    sendValButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 800725e:	1d3b      	adds	r3, r7, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8007266:	23ff      	movs	r3, #255	; 0xff
 8007268:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
 800726c:	23ff      	movs	r3, #255	; 0xff
 800726e:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
 8007272:	23ff      	movs	r3, #255	; 0xff
 8007274:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
 8007278:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800727c:	041b      	lsls	r3, r3, #16
 800727e:	461a      	mov	r2, r3
 8007280:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8007284:	021b      	lsls	r3, r3, #8
 8007286:	431a      	orrs	r2, r3
 8007288:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 800728c:	4313      	orrs	r3, r2
 800728e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007292:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007296:	4611      	mov	r1, r2
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe fcd3 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 800729e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a0:	461d      	mov	r5, r3
 80072a2:	23ff      	movs	r3, #255	; 0xff
 80072a4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80072a8:	23ff      	movs	r3, #255	; 0xff
 80072aa:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 80072ae:	23ff      	movs	r3, #255	; 0xff
 80072b0:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
 80072b4:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80072b8:	041b      	lsls	r3, r3, #16
 80072ba:	461a      	mov	r2, r3
 80072bc:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	431a      	orrs	r2, r3
 80072c4:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80072ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80072d2:	4611      	mov	r1, r2
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fe fcb5 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 80072da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072dc:	461a      	mov	r2, r3
 80072de:	4629      	mov	r1, r5
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 fb56 	bl	8007992 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    sendValButton.setPosition(16, 68, 158, 32);
 80072e6:	1d3b      	adds	r3, r7, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 80072ee:	2320      	movs	r3, #32
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	239e      	movs	r3, #158	; 0x9e
 80072f4:	2244      	movs	r2, #68	; 0x44
 80072f6:	2110      	movs	r1, #16
 80072f8:	f7fe fd1b 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>
    txInfoContainer.add(sendValButton);
 80072fc:	1d3b      	adds	r3, r7, #4
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8007304:	1d3b      	adds	r3, r7, #4
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800730c:	4619      	mov	r1, r3
 800730e:	4610      	mov	r0, r2
 8007310:	f00f ff72 	bl	80171f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    newValButton.setBoxWithBorderPosition(0, 0, 69, 47);
 8007314:	1d3b      	adds	r3, r7, #4
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 800731c:	232f      	movs	r3, #47	; 0x2f
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	2345      	movs	r3, #69	; 0x45
 8007322:	2200      	movs	r2, #0
 8007324:	2100      	movs	r1, #0
 8007326:	f000 faaf 	bl	8007888 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    newValButton.setBorderSize(5);
 800732a:	1d3b      	adds	r3, r7, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8007332:	2105      	movs	r1, #5
 8007334:	4618      	mov	r0, r3
 8007336:	f000 fac7 	bl	80078c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    newValButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800733a:	1d3b      	adds	r3, r7, #4
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 8007342:	2300      	movs	r3, #0
 8007344:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
 8007348:	2366      	movs	r3, #102	; 0x66
 800734a:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
 800734e:	2399      	movs	r3, #153	; 0x99
 8007350:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8007354:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8007358:	041b      	lsls	r3, r3, #16
 800735a:	461a      	mov	r2, r3
 800735c:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	431a      	orrs	r2, r3
 8007364:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007368:	4313      	orrs	r3, r2
 800736a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800736e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007372:	4611      	mov	r1, r2
 8007374:	4618      	mov	r0, r3
 8007376:	f7fe fc65 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 800737a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800737c:	461d      	mov	r5, r3
 800737e:	2300      	movs	r3, #0
 8007380:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
 8007384:	2399      	movs	r3, #153	; 0x99
 8007386:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 800738a:	23cc      	movs	r3, #204	; 0xcc
 800738c:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
 8007390:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 8007394:	041b      	lsls	r3, r3, #16
 8007396:	461a      	mov	r2, r3
 8007398:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	431a      	orrs	r2, r3
 80073a0:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 80073a4:	4313      	orrs	r3, r2
 80073a6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80073aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80073ae:	4611      	mov	r1, r2
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe fc47 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 80073b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b8:	461e      	mov	r6, r3
 80073ba:	2300      	movs	r3, #0
 80073bc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80073c0:	2333      	movs	r3, #51	; 0x33
 80073c2:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 80073c6:	2366      	movs	r3, #102	; 0x66
 80073c8:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
 80073cc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80073d0:	041b      	lsls	r3, r3, #16
 80073d2:	461a      	mov	r2, r3
 80073d4:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	431a      	orrs	r2, r3
 80073dc:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80073e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80073ea:	4611      	mov	r1, r2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe fc29 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 80073f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073f4:	4698      	mov	r8, r3
 80073f6:	2333      	movs	r3, #51	; 0x33
 80073f8:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 80073fc:	2366      	movs	r3, #102	; 0x66
 80073fe:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 8007402:	2399      	movs	r3, #153	; 0x99
 8007404:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
 8007408:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800740c:	041b      	lsls	r3, r3, #16
 800740e:	461a      	mov	r2, r3
 8007410:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	431a      	orrs	r2, r3
 8007418:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800741c:	4313      	orrs	r3, r2
 800741e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007422:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007426:	4611      	mov	r1, r2
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe fc0b 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 800742e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	4643      	mov	r3, r8
 8007434:	4632      	mov	r2, r6
 8007436:	4629      	mov	r1, r5
 8007438:	4620      	mov	r0, r4
 800743a:	f000 fa57 	bl	80078ec <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    newValButton.setText(TypedText(T___SINGLEUSE_TVNT));
 800743e:	1d3b      	adds	r3, r7, #4
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 8007446:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800744a:	2104      	movs	r1, #4
 800744c:	4618      	mov	r0, r3
 800744e:	f7ff f89f 	bl	8006590 <_ZN8touchgfx9TypedTextC1Et>
 8007452:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007456:	4619      	mov	r1, r3
 8007458:	4620      	mov	r0, r4
 800745a:	f000 fa64 	bl	8007926 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 800745e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007462:	4618      	mov	r0, r3
 8007464:	f7fd ffb0 	bl	80053c8 <_ZN8touchgfx9TypedTextD1Ev>
    newValButton.setTextPosition(0, 6, 69, 47);
 8007468:	1d3b      	adds	r3, r7, #4
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 8007470:	232f      	movs	r3, #47	; 0x2f
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	2345      	movs	r3, #69	; 0x45
 8007476:	2206      	movs	r2, #6
 8007478:	2100      	movs	r1, #0
 800747a:	f000 fa6a 	bl	8007952 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    newValButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 800747e:	1d3b      	adds	r3, r7, #4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 8007486:	23ff      	movs	r3, #255	; 0xff
 8007488:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
 800748c:	23ff      	movs	r3, #255	; 0xff
 800748e:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
 8007492:	23ff      	movs	r3, #255	; 0xff
 8007494:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8007498:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 800749c:	041b      	lsls	r3, r3, #16
 800749e:	461a      	mov	r2, r3
 80074a0:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 80074a4:	021b      	lsls	r3, r3, #8
 80074a6:	431a      	orrs	r2, r3
 80074a8:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80074ac:	4313      	orrs	r3, r2
 80074ae:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80074b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80074b6:	4611      	mov	r1, r2
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe fbc3 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 80074be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074c0:	461d      	mov	r5, r3
 80074c2:	23ff      	movs	r3, #255	; 0xff
 80074c4:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
 80074c8:	23ff      	movs	r3, #255	; 0xff
 80074ca:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80074ce:	23ff      	movs	r3, #255	; 0xff
 80074d0:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 80074d4:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80074d8:	041b      	lsls	r3, r3, #16
 80074da:	461a      	mov	r2, r3
 80074dc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	431a      	orrs	r2, r3
 80074e4:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80074ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fe fba5 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 80074fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	4629      	mov	r1, r5
 8007504:	4620      	mov	r0, r4
 8007506:	f000 fa44 	bl	8007992 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    newValButton.setPosition(16, 12, 69, 47);
 800750a:	1d3b      	adds	r3, r7, #4
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 8007512:	232f      	movs	r3, #47	; 0x2f
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	2345      	movs	r3, #69	; 0x45
 8007518:	220c      	movs	r2, #12
 800751a:	2110      	movs	r1, #16
 800751c:	f7fe fc09 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>
    txInfoContainer.add(newValButton);
 8007520:	1d3b      	adds	r3, r7, #4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8007528:	1d3b      	adds	r3, r7, #4
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8007530:	4619      	mov	r1, r3
 8007532:	4610      	mov	r0, r2
 8007534:	f00f fe60 	bl	80171f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    sendValTextArea.setPosition(95, 26, 79, 19);
 8007538:	1d3b      	adds	r3, r7, #4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f203 5014 	addw	r0, r3, #1300	; 0x514
 8007540:	2313      	movs	r3, #19
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	234f      	movs	r3, #79	; 0x4f
 8007546:	221a      	movs	r2, #26
 8007548:	215f      	movs	r1, #95	; 0x5f
 800754a:	f7fe fbf2 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>
    sendValTextArea.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800754e:	1d3b      	adds	r3, r7, #4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f203 5414 	addw	r4, r3, #1300	; 0x514
 8007556:	2300      	movs	r3, #0
 8007558:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
 800755c:	2300      	movs	r3, #0
 800755e:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
 8007562:	2300      	movs	r3, #0
 8007564:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
 8007568:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800756c:	041b      	lsls	r3, r3, #16
 800756e:	461a      	mov	r2, r3
 8007570:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	431a      	orrs	r2, r3
 8007578:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800757c:	4313      	orrs	r3, r2
 800757e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007582:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007586:	4611      	mov	r1, r2
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe fb5b 	bl	8005c44 <_ZN8touchgfx9colortypeC1Em>
 800758e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	461a      	mov	r2, r3
 8007596:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 800759a:	f107 030c 	add.w	r3, r7, #12
 800759e:	601a      	str	r2, [r3, #0]
        this->color = color;
 80075a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80075a4:	f107 020c 	add.w	r2, r7, #12
 80075a8:	6812      	ldr	r2, [r2, #0]
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80075ac:	bf00      	nop
    sendValTextArea.setLinespacing(0);
 80075ae:	1d3b      	adds	r3, r7, #4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f203 5314 	addw	r3, r3, #1300	; 0x514
 80075b6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80075ba:	2300      	movs	r3, #0
 80075bc:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
        linespace = space;
 80075c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80075c4:	f8b7 214a 	ldrh.w	r2, [r7, #330]	; 0x14a
 80075c8:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80075ca:	bf00      	nop
    sendValTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NA10));
 80075cc:	1d3b      	adds	r3, r7, #4
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f203 5414 	addw	r4, r3, #1300	; 0x514
 80075d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80075d8:	2103      	movs	r1, #3
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe ffd8 	bl	8006590 <_ZN8touchgfx9TypedTextC1Et>
 80075e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80075e4:	4619      	mov	r1, r3
 80075e6:	4620      	mov	r0, r4
 80075e8:	f012 f849 	bl	801967e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80075ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fd fee9 	bl	80053c8 <_ZN8touchgfx9TypedTextD1Ev>
    txInfoContainer.add(sendValTextArea);
 80075f6:	1d3b      	adds	r3, r7, #4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 80075fe:	1d3b      	adds	r3, r7, #4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8007606:	4619      	mov	r1, r3
 8007608:	4610      	mov	r0, r2
 800760a:	f00f fdf5 	bl	80171f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 800760e:	1d3b      	adds	r3, r7, #4
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	1d3b      	adds	r3, r7, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3340      	adds	r3, #64	; 0x40
 8007618:	4619      	mov	r1, r3
 800761a:	4610      	mov	r0, r2
 800761c:	f7fe fd8a 	bl	8006134 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(background);
 8007620:	1d3b      	adds	r3, r7, #4
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	1d3b      	adds	r3, r7, #4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	336c      	adds	r3, #108	; 0x6c
 800762a:	4619      	mov	r1, r3
 800762c:	4610      	mov	r0, r2
 800762e:	f7fe fd81 	bl	8006134 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(txButton);
 8007632:	1d3b      	adds	r3, r7, #4
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	1d3b      	adds	r3, r7, #4
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3398      	adds	r3, #152	; 0x98
 800763c:	4619      	mov	r1, r3
 800763e:	4610      	mov	r0, r2
 8007640:	f7fe fd78 	bl	8006134 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rxButton);
 8007644:	1d3b      	adds	r3, r7, #4
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	1d3b      	adds	r3, r7, #4
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007650:	4619      	mov	r1, r3
 8007652:	4610      	mov	r0, r2
 8007654:	f7fe fd6e 	bl	8006134 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollBackgroundBox);
 8007658:	1d3b      	adds	r3, r7, #4
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	1d3b      	adds	r3, r7, #4
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f7fe fd64 	bl	8006134 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollableContainer);
 800766c:	1d3b      	adds	r3, r7, #4
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	1d3b      	adds	r3, r7, #4
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8007678:	4619      	mov	r1, r3
 800767a:	4610      	mov	r0, r2
 800767c:	f7fe fd5a 	bl	8006134 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(txInfoContainer);
 8007680:	1d3b      	adds	r3, r7, #4
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	1d3b      	adds	r3, r7, #4
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 800768c:	4619      	mov	r1, r3
 800768e:	4610      	mov	r0, r2
 8007690:	f7fe fd50 	bl	8006134 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8007694:	1d3b      	adds	r3, r7, #4
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4618      	mov	r0, r3
 800769a:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800769e:	46bd      	mov	sp, r7
 80076a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080076a4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]

}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
    if (&src == &txButton)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3398      	adds	r3, #152	; 0x98
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d10d      	bne.n	80076e8 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x30>
    {
        //showTxInfo
        //When txButton clicked show txInfoContainer
        //Show txInfoContainer
        txInfoContainer.setVisible(true);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80076d2:	2101      	movs	r1, #1
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fc2b 	bl	8005f30 <_ZN8touchgfx8Drawable10setVisibleEb>
        txInfoContainer.invalidate();
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80076e0:	4618      	mov	r0, r3
 80076e2:	f014 fdab 	bl	801c23c <_ZNK8touchgfx8Drawable10invalidateEv>
        //When rxButton clicked hide txInfoContainer
        //Hide txInfoContainer
        txInfoContainer.setVisible(false);
        txInfoContainer.invalidate();
    }
}
 80076e6:	e012      	b.n	800770e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x56>
    else if (&src == &rxButton)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d10c      	bne.n	800770e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x56>
        txInfoContainer.setVisible(false);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fe fc17 	bl	8005f30 <_ZN8touchgfx8Drawable10setVisibleEb>
        txInfoContainer.invalidate();
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8007708:	4618      	mov	r0, r3
 800770a:	f014 fd97 	bl	801c23c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800770e:	bf00      	nop
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4618      	mov	r0, r3
 8007724:	f015 f80c 	bl	801c740 <_ZN8touchgfx6ScreenC1Ev>
 8007728:	4a05      	ldr	r2, [pc, #20]	; (8007740 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	0802c034 	.word	0x0802c034

08007744 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	4a05      	ldr	r2, [pc, #20]	; (8007764 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe fef9 	bl	800654c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	0802c068 	.word	0x0802c068

08007768 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff ffe7 	bl	8007744 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8007776:	2134      	movs	r1, #52	; 0x34
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f022 fa8a 	bl	8029c92 <_ZdlPvj>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	4a08      	ldr	r2, [pc, #32]	; (80077b4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3334      	adds	r3, #52	; 0x34
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fa22 	bl	8007be4 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff ffce 	bl	8007744 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	0802bf9c 	.word	0x0802bf9c

080077b8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff ffe1 	bl	8007788 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 80077c6:	2178      	movs	r1, #120	; 0x78
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f022 fa62 	bl	8029c92 <_ZdlPvj>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4618      	mov	r0, r3
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
 */
template <class T>
class TextButtonStyle : public T
{
public:
    TextButtonStyle()
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
        : T()
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 f900 	bl	80079e8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 80077e8:	4a0e      	ldr	r2, [pc, #56]	; (8007824 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x4c>)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3378      	adds	r3, #120	; 0x78
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fe fee2 	bl	80065bc <_ZN8touchgfx8TextAreaC1Ev>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	33b4      	adds	r3, #180	; 0xb4
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fb ff35 	bl	800366c <_ZN8touchgfx9colortypeC1Ev>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	33b8      	adds	r3, #184	; 0xb8
 8007806:	4618      	mov	r0, r3
 8007808:	f7fb ff30 	bl	800366c <_ZN8touchgfx9colortypeC1Ev>
    {
        T::add(text);
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3378      	adds	r3, #120	; 0x78
 8007812:	4619      	mov	r1, r3
 8007814:	4610      	mov	r0, r2
 8007816:	f00f fcef 	bl	80171f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	0802bf04 	.word	0x0802bf04

08007828 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	4a04      	ldr	r2, [pc, #16]	; (8007844 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4618      	mov	r0, r3
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	0802c100 	.word	0x0802c100

08007848 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	4639      	mov	r1, r7
 8007854:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff ffe4 	bl	8007828 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8007860:	4a08      	ldr	r2, [pc, #32]	; (8007884 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	605a      	str	r2, [r3, #4]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3308      	adds	r3, #8
 8007870:	463a      	mov	r2, r7
 8007872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007876:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	0802beec 	.word	0x0802beec

08007888 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param  width  The width of this BoxWithBorderButtonStyle.
     * @param  height The height of this BoxWithBorderButtonStyle.
     *
     * @note Changing this does not automatically yield a redraw.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8007888:	b590      	push	{r4, r7, lr}
 800788a:	b087      	sub	sp, #28
 800788c:	af02      	add	r7, sp, #8
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	4608      	mov	r0, r1
 8007892:	4611      	mov	r1, r2
 8007894:	461a      	mov	r2, r3
 8007896:	4603      	mov	r3, r0
 8007898:	817b      	strh	r3, [r7, #10]
 800789a:	460b      	mov	r3, r1
 800789c:	813b      	strh	r3, [r7, #8]
 800789e:	4613      	mov	r3, r2
 80078a0:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80078a8:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80078ac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80078b0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80078b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	4623      	mov	r3, r4
 80078bc:	f7fe fa39 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80078c0:	bf00      	nop
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd90      	pop	{r4, r7, pc}

080078c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    /**
     * Sets border size.
     *
     * @param  size The size.
     */
    void setBorderSize(uint8_t size)
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3334      	adds	r3, #52	; 0x34
 80078d8:	78fa      	ldrb	r2, [r7, #3]
 80078da:	b292      	uxth	r2, r2
 80078dc:	4611      	mov	r1, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe fdd8 	bl	8006494 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3388      	adds	r3, #136	; 0x88
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	4798      	blx	r3
    }
 800791e:	bf00      	nop
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>:
    /**
     * Sets a text.
     *
     * @param  t A TypedText to process.
     */
    void setText(TypedText t)
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
    {
        text.setTypedText(t);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3378      	adds	r3, #120	; 0x78
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	4618      	mov	r0, r3
 8007938:	f011 fea1 	bl	801967e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        text.setWidthHeight(*this);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3378      	adds	r3, #120	; 0x78
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	4611      	mov	r1, r2
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe fac7 	bl	8005ed8 <_ZN8touchgfx8Drawable14setWidthHeightERKS0_>
    }
 800794a:	bf00      	nop
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width of the text.
     * @param  height The height of the text.
     */
    void setTextPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8007952:	b590      	push	{r4, r7, lr}
 8007954:	b087      	sub	sp, #28
 8007956:	af02      	add	r7, sp, #8
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	4608      	mov	r0, r1
 800795c:	4611      	mov	r1, r2
 800795e:	461a      	mov	r2, r3
 8007960:	4603      	mov	r3, r0
 8007962:	817b      	strh	r3, [r7, #10]
 8007964:	460b      	mov	r3, r1
 8007966:	813b      	strh	r3, [r7, #8]
 8007968:	4613      	mov	r3, r2
 800796a:	80fb      	strh	r3, [r7, #6]
    {
        text.setPosition(x, y, width, height);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8007972:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007976:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800797a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800797e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	4623      	mov	r3, r4
 8007986:	f7fe f9d4 	bl	8005d32 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	bd90      	pop	{r4, r7, pc}

08007992 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>:
     * Sets text colors.
     *
     * @param  newColorReleased The new color released.
     * @param  newColorPressed  The new color pressed.
     */
    void setTextColors(colortype newColorReleased, colortype newColorPressed)
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
    {
        colorReleased = newColorReleased;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        colorPressed = newColorPressed;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        handlePressedUpdated();
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3388      	adds	r3, #136	; 0x88
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	4798      	blx	r3
    }
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe fc7a 	bl	80062c8 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 80079d4:	4a03      	ldr	r2, [pc, #12]	; (80079e4 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	0802c068 	.word	0x0802c068

080079e8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle()
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4618      	mov	r0, r3
 80079f4:	2334      	movs	r3, #52	; 0x34
 80079f6:	461a      	mov	r2, r3
 80079f8:	2100      	movs	r1, #0
 80079fa:	f022 fa05 	bl	8029e08 <memset>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff ffdf 	bl	80079c4 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 8007a06:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x7c>)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3334      	adds	r3, #52	; 0x34
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe fd15 	bl	8006440 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	3368      	adds	r3, #104	; 0x68
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fb fe26 	bl	800366c <_ZN8touchgfx9colortypeC1Ev>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	336c      	adds	r3, #108	; 0x6c
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fb fe21 	bl	800366c <_ZN8touchgfx9colortypeC1Ev>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3370      	adds	r3, #112	; 0x70
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fb fe1c 	bl	800366c <_ZN8touchgfx9colortypeC1Ev>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3374      	adds	r3, #116	; 0x74
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fb fe17 	bl	800366c <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	3334      	adds	r3, #52	; 0x34
 8007a42:	2200      	movs	r2, #0
 8007a44:	2100      	movs	r1, #0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe f9cc 	bl	8005de4 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3334      	adds	r3, #52	; 0x34
 8007a52:	4619      	mov	r1, r3
 8007a54:	4610      	mov	r0, r2
 8007a56:	f00f fbcf 	bl	80171f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	0802bf9c 	.word	0x0802bf9c

08007a68 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
    }
 8007a70:	4a04      	ldr	r2, [pc, #16]	; (8007a84 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	0802c100 	.word	0x0802c100

08007a88 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
    }
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff ffe9 	bl	8007a68 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8007a96:	2104      	movs	r1, #4
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f022 f8fa 	bl	8029c92 <_ZdlPvj>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype down;          ///< The down
    colortype borderUp;      ///< The border up
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 8007aa8:	b590      	push	{r4, r7, lr}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fe fc3b 	bl	8006334 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	336c      	adds	r3, #108	; 0x6c
 8007ac8:	e001      	b.n	8007ace <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3368      	adds	r3, #104	; 0x68
 8007ace:	6819      	ldr	r1, [r3, #0]
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f7fe fbb9 	bl	8006248 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fe fc28 	bl	8006334 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3374      	adds	r3, #116	; 0x74
 8007aee:	e001      	b.n	8007af4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3370      	adds	r3, #112	; 0x70
 8007af4:	6819      	ldr	r1, [r3, #0]
 8007af6:	4620      	mov	r0, r4
 8007af8:	f7fe fcbe 	bl	8006478 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe fc67 	bl	80063d2 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd90      	pop	{r4, r7, pc}

08007b0c <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    TextArea text;           ///< The text
    colortype colorReleased; ///< The color released
    colortype colorPressed;  ///< The color pressed

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 8007b0c:	b590      	push	{r4, r7, lr}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe fc09 	bl	8006334 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	33b8      	adds	r3, #184	; 0xb8
 8007b2c:	e001      	b.n	8007b32 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	33b4      	adds	r3, #180	; 0xb4
 8007b32:	60fc      	str	r4, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007b3e:	bf00      	nop
        T::handlePressedUpdated();
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff ffb0 	bl	8007aa8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 8007b48:	bf00      	nop
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd90      	pop	{r4, r7, pc}

08007b50 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	4a05      	ldr	r2, [pc, #20]	; (8007b70 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff ff81 	bl	8007a68 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	0802beec 	.word	0x0802beec

08007b74 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff ffe7 	bl	8007b50 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8007b82:	2110      	movs	r1, #16
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f022 f884 	bl	8029c92 <_ZdlPvj>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
class TextButtonStyle : public T
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	4a08      	ldr	r2, [pc, #32]	; (8007bc0 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev+0x2c>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3378      	adds	r3, #120	; 0x78
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fd52 	bl	8006650 <_ZN8touchgfx8TextAreaD1Ev>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff fdea 	bl	8007788 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	0802bf04 	.word	0x0802bf04

08007bc4 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff ffe1 	bl	8007b94 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8007bd2:	21bc      	movs	r1, #188	; 0xbc
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f022 f85c 	bl	8029c92 <_ZdlPvj>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	4a05      	ldr	r2, [pc, #20]	; (8007c04 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fe fc01 	bl	80063fc <_ZN8touchgfx3BoxD1Ev>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	0802d33c 	.word	0x0802d33c

08007c08 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7ff ffe7 	bl	8007be4 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8007c16:	2134      	movs	r1, #52	; 0x34
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f022 f83a 	bl	8029c92 <_ZdlPvj>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <_ZN8touchgfx19ScrollableContainerD1Ev>:
 * @see Container
 *
 * @note The ScrollableContainer will consume all DragEvents in the area covered by the
 *       container.
 */
class ScrollableContainer : public Container
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	4a0a      	ldr	r2, [pc, #40]	; (8007c5c <_ZN8touchgfx19ScrollableContainerD1Ev+0x34>)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	3364      	adds	r3, #100	; 0x64
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe fbde 	bl	80063fc <_ZN8touchgfx3BoxD1Ev>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3338      	adds	r3, #56	; 0x38
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fe fbd9 	bl	80063fc <_ZN8touchgfx3BoxD1Ev>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fe fb19 	bl	8006284 <_ZN8touchgfx9ContainerD1Ev>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4618      	mov	r0, r3
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	0802c758 	.word	0x0802c758

08007c60 <_ZN8touchgfx19ScrollableContainerD0Ev>:
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff ffdd 	bl	8007c28 <_ZN8touchgfx19ScrollableContainerD1Ev>
 8007c6e:	21bc      	movs	r1, #188	; 0xbc
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f022 f80e 	bl	8029c92 <_ZdlPvj>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	4a05      	ldr	r2, [pc, #20]	; (8007ca0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fe fcdd 	bl	8006650 <_ZN8touchgfx8TextAreaD1Ev>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	0802d294 	.word	0x0802d294

08007ca4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff ffe7 	bl	8007c80 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007cb2:	2140      	movs	r1, #64	; 0x40
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f021 ffec 	bl	8029c92 <_ZdlPvj>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	68d2      	ldr	r2, [r2, #12]
 8007cd6:	1052      	asrs	r2, r2, #1
 8007cd8:	1898      	adds	r0, r3, r2
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	e00a      	b.n	8007d02 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	68d2      	ldr	r2, [r2, #12]
 8007cf4:	1052      	asrs	r2, r2, #1
 8007cf6:	4413      	add	r3, r2
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6892      	ldr	r2, [r2, #8]
 8007cfe:	4413      	add	r3, r2
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	4798      	blx	r3
    }
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d010      	beq.n	8007d40 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d107      	bne.n	8007d36 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e000      	b.n	8007d38 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8007d36:	2300      	movs	r3, #0
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d001      	beq.n	8007d40 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e000      	b.n	8007d42 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8007d40:	2300      	movs	r3, #0
    }
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 8007d4e:	b590      	push	{r4, r7, lr}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
    {
        text.setAlpha(T::getAlpha());
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe faf5 	bl	800634e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8007d64:	4603      	mov	r3, r0
 8007d66:	4619      	mov	r1, r3
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f7fe fc61 	bl	8006630 <_ZN8touchgfx8TextArea8setAlphaEh>
        T::handleAlphaUpdated();
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 f804 	bl	8007d7e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>
    }
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd90      	pop	{r4, r7, pc}

08007d7e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 8007d7e:	b590      	push	{r4, r7, lr}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe fadd 	bl	800634e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8007d94:	4603      	mov	r3, r0
 8007d96:	4619      	mov	r1, r3
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f7fe fa63 	bl	8006264 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fe fb20 	bl	80063e6 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd90      	pop	{r4, r7, pc}
	...

08007db0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <__tcf_0+0xc>)
 8007db6:	f7fd fae5 	bl	8005384 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	240015f0 	.word	0x240015f0

08007dc0 <_Z23getFont_verdana_10_4bppv>:
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08c      	sub	sp, #48	; 0x30
 8007dc4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007dc6:	4b1f      	ldr	r3, [pc, #124]	; (8007e44 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	f3bf 8f5b 	dmb	ish
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bf0c      	ite	eq
 8007dd8:	2301      	moveq	r3, #1
 8007dda:	2300      	movne	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d02c      	beq.n	8007e3c <_Z23getFont_verdana_10_4bppv+0x7c>
 8007de2:	4818      	ldr	r0, [pc, #96]	; (8007e44 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007de4:	f021 ff57 	bl	8029c96 <__cxa_guard_acquire>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bf14      	ite	ne
 8007dee:	2301      	movne	r3, #1
 8007df0:	2300      	moveq	r3, #0
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d021      	beq.n	8007e3c <_Z23getFont_verdana_10_4bppv+0x7c>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007e00:	2300      	movs	r3, #0
 8007e02:	9308      	str	r3, [sp, #32]
 8007e04:	233f      	movs	r3, #63	; 0x3f
 8007e06:	9307      	str	r3, [sp, #28]
 8007e08:	4b0f      	ldr	r3, [pc, #60]	; (8007e48 <_Z23getFont_verdana_10_4bppv+0x88>)
 8007e0a:	9306      	str	r3, [sp, #24]
 8007e0c:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <_Z23getFont_verdana_10_4bppv+0x8c>)
 8007e0e:	9305      	str	r3, [sp, #20]
 8007e10:	2300      	movs	r3, #0
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	2300      	movs	r3, #0
 8007e16:	9303      	str	r3, [sp, #12]
 8007e18:	2301      	movs	r3, #1
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	2304      	movs	r3, #4
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	2300      	movs	r3, #0
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	230a      	movs	r3, #10
 8007e26:	2201      	movs	r2, #1
 8007e28:	4909      	ldr	r1, [pc, #36]	; (8007e50 <_Z23getFont_verdana_10_4bppv+0x90>)
 8007e2a:	480a      	ldr	r0, [pc, #40]	; (8007e54 <_Z23getFont_verdana_10_4bppv+0x94>)
 8007e2c:	f7fd fe70 	bl	8005b10 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007e30:	4804      	ldr	r0, [pc, #16]	; (8007e44 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007e32:	f021 ff3c 	bl	8029cae <__cxa_guard_release>
 8007e36:	4808      	ldr	r0, [pc, #32]	; (8007e58 <_Z23getFont_verdana_10_4bppv+0x98>)
 8007e38:	f021 ff78 	bl	8029d2c <atexit>
    return verdana_10_4bpp;
 8007e3c:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	24001618 	.word	0x24001618
 8007e48:	0802ec4c 	.word	0x0802ec4c
 8007e4c:	0802ec90 	.word	0x0802ec90
 8007e50:	9000085c 	.word	0x9000085c
 8007e54:	240015f0 	.word	0x240015f0
 8007e58:	08007db1 	.word	0x08007db1

08007e5c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_14_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_14_4bpp();

touchgfx::GeneratedFont& getFont_verdana_14_4bpp()
{
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 41, 14, 3, 4, 1, 1, 0, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <__tcf_0+0xc>)
 8007e62:	f7fd fa8f 	bl	8005384 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	2400161c 	.word	0x2400161c

08007e6c <_Z23getFont_verdana_14_4bppv>:
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08c      	sub	sp, #48	; 0x30
 8007e70:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 41, 14, 3, 4, 1, 1, 0, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 8007e72:	4b1f      	ldr	r3, [pc, #124]	; (8007ef0 <_Z23getFont_verdana_14_4bppv+0x84>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	f3bf 8f5b 	dmb	ish
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	bf0c      	ite	eq
 8007e84:	2301      	moveq	r3, #1
 8007e86:	2300      	movne	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d02c      	beq.n	8007ee8 <_Z23getFont_verdana_14_4bppv+0x7c>
 8007e8e:	4818      	ldr	r0, [pc, #96]	; (8007ef0 <_Z23getFont_verdana_14_4bppv+0x84>)
 8007e90:	f021 ff01 	bl	8029c96 <__cxa_guard_acquire>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	bf14      	ite	ne
 8007e9a:	2301      	movne	r3, #1
 8007e9c:	2300      	moveq	r3, #0
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d021      	beq.n	8007ee8 <_Z23getFont_verdana_14_4bppv+0x7c>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8007eac:	2300      	movs	r3, #0
 8007eae:	9308      	str	r3, [sp, #32]
 8007eb0:	233f      	movs	r3, #63	; 0x3f
 8007eb2:	9307      	str	r3, [sp, #28]
 8007eb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <_Z23getFont_verdana_14_4bppv+0x88>)
 8007eb6:	9306      	str	r3, [sp, #24]
 8007eb8:	4b0f      	ldr	r3, [pc, #60]	; (8007ef8 <_Z23getFont_verdana_14_4bppv+0x8c>)
 8007eba:	9305      	str	r3, [sp, #20]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	9304      	str	r3, [sp, #16]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	9303      	str	r3, [sp, #12]
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	9302      	str	r3, [sp, #8]
 8007ec8:	2304      	movs	r3, #4
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	2303      	movs	r3, #3
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	230e      	movs	r3, #14
 8007ed2:	2229      	movs	r2, #41	; 0x29
 8007ed4:	4909      	ldr	r1, [pc, #36]	; (8007efc <_Z23getFont_verdana_14_4bppv+0x90>)
 8007ed6:	480a      	ldr	r0, [pc, #40]	; (8007f00 <_Z23getFont_verdana_14_4bppv+0x94>)
 8007ed8:	f7fd fe1a 	bl	8005b10 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007edc:	4804      	ldr	r0, [pc, #16]	; (8007ef0 <_Z23getFont_verdana_14_4bppv+0x84>)
 8007ede:	f021 fee6 	bl	8029cae <__cxa_guard_release>
 8007ee2:	4808      	ldr	r0, [pc, #32]	; (8007f04 <_Z23getFont_verdana_14_4bppv+0x98>)
 8007ee4:	f021 ff22 	bl	8029d2c <atexit>
    return verdana_14_4bpp;
 8007ee8:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <_Z23getFont_verdana_14_4bppv+0x94>)
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	24001644 	.word	0x24001644
 8007ef4:	0802ec50 	.word	0x0802ec50
 8007ef8:	0802ec94 	.word	0x0802ec94
 8007efc:	9000086c 	.word	0x9000086c
 8007f00:	2400161c 	.word	0x2400161c
 8007f04:	08007e5d 	.word	0x08007e5d

08007f08 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 4, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	4801      	ldr	r0, [pc, #4]	; (8007f14 <__tcf_0+0xc>)
 8007f0e:	f7fd fa39 	bl	8005384 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	24001648 	.word	0x24001648

08007f18 <_Z23getFont_verdana_20_4bppv>:
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08c      	sub	sp, #48	; 0x30
 8007f1c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 4, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007f1e:	4b1f      	ldr	r3, [pc, #124]	; (8007f9c <_Z23getFont_verdana_20_4bppv+0x84>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	f3bf 8f5b 	dmb	ish
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	bf0c      	ite	eq
 8007f30:	2301      	moveq	r3, #1
 8007f32:	2300      	movne	r3, #0
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d02c      	beq.n	8007f94 <_Z23getFont_verdana_20_4bppv+0x7c>
 8007f3a:	4818      	ldr	r0, [pc, #96]	; (8007f9c <_Z23getFont_verdana_20_4bppv+0x84>)
 8007f3c:	f021 feab 	bl	8029c96 <__cxa_guard_acquire>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	bf14      	ite	ne
 8007f46:	2301      	movne	r3, #1
 8007f48:	2300      	moveq	r3, #0
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d021      	beq.n	8007f94 <_Z23getFont_verdana_20_4bppv+0x7c>
 8007f50:	2300      	movs	r3, #0
 8007f52:	930a      	str	r3, [sp, #40]	; 0x28
 8007f54:	2300      	movs	r3, #0
 8007f56:	9309      	str	r3, [sp, #36]	; 0x24
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9308      	str	r3, [sp, #32]
 8007f5c:	233f      	movs	r3, #63	; 0x3f
 8007f5e:	9307      	str	r3, [sp, #28]
 8007f60:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <_Z23getFont_verdana_20_4bppv+0x88>)
 8007f62:	9306      	str	r3, [sp, #24]
 8007f64:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8007f66:	9305      	str	r3, [sp, #20]
 8007f68:	2301      	movs	r3, #1
 8007f6a:	9304      	str	r3, [sp, #16]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9303      	str	r3, [sp, #12]
 8007f70:	2301      	movs	r3, #1
 8007f72:	9302      	str	r3, [sp, #8]
 8007f74:	2304      	movs	r3, #4
 8007f76:	9301      	str	r3, [sp, #4]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	2314      	movs	r3, #20
 8007f7e:	2204      	movs	r2, #4
 8007f80:	4909      	ldr	r1, [pc, #36]	; (8007fa8 <_Z23getFont_verdana_20_4bppv+0x90>)
 8007f82:	480a      	ldr	r0, [pc, #40]	; (8007fac <_Z23getFont_verdana_20_4bppv+0x94>)
 8007f84:	f7fd fdc4 	bl	8005b10 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007f88:	4804      	ldr	r0, [pc, #16]	; (8007f9c <_Z23getFont_verdana_20_4bppv+0x84>)
 8007f8a:	f021 fe90 	bl	8029cae <__cxa_guard_release>
 8007f8e:	4808      	ldr	r0, [pc, #32]	; (8007fb0 <_Z23getFont_verdana_20_4bppv+0x98>)
 8007f90:	f021 fecc 	bl	8029d2c <atexit>
    return verdana_20_4bpp;
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	24001670 	.word	0x24001670
 8007fa0:	0802ec88 	.word	0x0802ec88
 8007fa4:	0802ec98 	.word	0x0802ec98
 8007fa8:	90000aac 	.word	0x90000aac
 8007fac:	24001648 	.word	0x24001648
 8007fb0:	08007f09 	.word	0x08007f09

08007fb4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	4801      	ldr	r0, [pc, #4]	; (8007fc0 <__tcf_0+0xc>)
 8007fba:	f7fd f9e3 	bl	8005384 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	24001674 	.word	0x24001674

08007fc4 <_Z23getFont_verdana_40_4bppv>:
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08c      	sub	sp, #48	; 0x30
 8007fc8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007fca:	4b1f      	ldr	r3, [pc, #124]	; (8008048 <_Z23getFont_verdana_40_4bppv+0x84>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	f3bf 8f5b 	dmb	ish
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bf0c      	ite	eq
 8007fdc:	2301      	moveq	r3, #1
 8007fde:	2300      	movne	r3, #0
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d02c      	beq.n	8008040 <_Z23getFont_verdana_40_4bppv+0x7c>
 8007fe6:	4818      	ldr	r0, [pc, #96]	; (8008048 <_Z23getFont_verdana_40_4bppv+0x84>)
 8007fe8:	f021 fe55 	bl	8029c96 <__cxa_guard_acquire>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bf14      	ite	ne
 8007ff2:	2301      	movne	r3, #1
 8007ff4:	2300      	moveq	r3, #0
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d021      	beq.n	8008040 <_Z23getFont_verdana_40_4bppv+0x7c>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8008000:	2300      	movs	r3, #0
 8008002:	9309      	str	r3, [sp, #36]	; 0x24
 8008004:	2300      	movs	r3, #0
 8008006:	9308      	str	r3, [sp, #32]
 8008008:	233f      	movs	r3, #63	; 0x3f
 800800a:	9307      	str	r3, [sp, #28]
 800800c:	4b0f      	ldr	r3, [pc, #60]	; (800804c <_Z23getFont_verdana_40_4bppv+0x88>)
 800800e:	9306      	str	r3, [sp, #24]
 8008010:	4b0f      	ldr	r3, [pc, #60]	; (8008050 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	2300      	movs	r3, #0
 8008016:	9304      	str	r3, [sp, #16]
 8008018:	2300      	movs	r3, #0
 800801a:	9303      	str	r3, [sp, #12]
 800801c:	2301      	movs	r3, #1
 800801e:	9302      	str	r3, [sp, #8]
 8008020:	2304      	movs	r3, #4
 8008022:	9301      	str	r3, [sp, #4]
 8008024:	2300      	movs	r3, #0
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	2328      	movs	r3, #40	; 0x28
 800802a:	2201      	movs	r2, #1
 800802c:	4909      	ldr	r1, [pc, #36]	; (8008054 <_Z23getFont_verdana_40_4bppv+0x90>)
 800802e:	480a      	ldr	r0, [pc, #40]	; (8008058 <_Z23getFont_verdana_40_4bppv+0x94>)
 8008030:	f7fd fd6e 	bl	8005b10 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008034:	4804      	ldr	r0, [pc, #16]	; (8008048 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008036:	f021 fe3a 	bl	8029cae <__cxa_guard_release>
 800803a:	4808      	ldr	r0, [pc, #32]	; (800805c <_Z23getFont_verdana_40_4bppv+0x98>)
 800803c:	f021 fe76 	bl	8029d2c <atexit>
    return verdana_40_4bpp;
 8008040:	4b05      	ldr	r3, [pc, #20]	; (8008058 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8008042:	4618      	mov	r0, r3
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	2400169c 	.word	0x2400169c
 800804c:	0802ec8c 	.word	0x0802ec8c
 8008050:	0802ec9c 	.word	0x0802ec9c
 8008054:	90000ae4 	.word	0x90000ae4
 8008058:	24001674 	.word	0x24001674
 800805c:	08007fb5 	.word	0x08007fb5

08008060 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	460b      	mov	r3, r1
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800806e:	2300      	movs	r3, #0
    }
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008084:	2300      	movs	r3, #0
    }
 8008086:	4618      	mov	r0, r3
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800809a:	2300      	movs	r3, #0
    }
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80080b6:	4a07      	ldr	r2, [pc, #28]	; (80080d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6013      	str	r3, [r2, #0]
        fonts = f;
 80080bc:	4a06      	ldr	r2, [pc, #24]	; (80080d8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80080c2:	4a06      	ldr	r2, [pc, #24]	; (80080dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	8013      	strh	r3, [r2, #0]
    }
 80080c8:	bf00      	nop
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	2400af94 	.word	0x2400af94
 80080d8:	2400af9c 	.word	0x2400af9c
 80080dc:	2400af98 	.word	0x2400af98

080080e0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80080e0:	b40e      	push	{r1, r2, r3}
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b085      	sub	sp, #20
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80080ea:	f107 0320 	add.w	r3, r7, #32
 80080ee:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	69fa      	ldr	r2, [r7, #28]
 80080f4:	2100      	movs	r1, #0
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f013 ff7e 	bl	801bff8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80080fc:	4603      	mov	r3, r0
 80080fe:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008100:	89fb      	ldrh	r3, [r7, #14]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800810c:	b003      	add	sp, #12
 800810e:	4770      	bx	lr

08008110 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008110:	b40c      	push	{r2, r3}
 8008112:	b580      	push	{r7, lr}
 8008114:	b084      	sub	sp, #16
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	460b      	mov	r3, r1
 800811c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800811e:	f107 031c 	add.w	r3, r7, #28
 8008122:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008124:	78f9      	ldrb	r1, [r7, #3]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f013 ff64 	bl	801bff8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008130:	4603      	mov	r3, r0
 8008132:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008134:	89fb      	ldrh	r3, [r7, #14]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008140:	b002      	add	sp, #8
 8008142:	4770      	bx	lr

08008144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08a      	sub	sp, #40	; 0x28
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008154:	2b00      	cmp	r3, #0
 8008156:	d016      	beq.n	8008186 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3322      	adds	r3, #34	; 0x22
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	8adb      	ldrh	r3, [r3, #22]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8008166:	4b43      	ldr	r3, [pc, #268]	; (8008274 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008168:	4a43      	ldr	r2, [pc, #268]	; (8008278 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800816a:	21c0      	movs	r1, #192	; 0xc0
 800816c:	4843      	ldr	r0, [pc, #268]	; (800827c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800816e:	f021 fdbf 	bl	8029cf0 <__assert_func>
            return buffer[pos];
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	8a9b      	ldrh	r3, [r3, #20]
 8008176:	461a      	mov	r2, r3
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8008186:	2300      	movs	r3, #0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d06a      	beq.n	8008262 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f015 fa25 	bl	801d5dc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3322      	adds	r3, #34	; 0x22
 8008196:	623b      	str	r3, [r7, #32]
 8008198:	2301      	movs	r3, #1
 800819a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	8adb      	ldrh	r3, [r3, #22]
 80081a0:	8bfa      	ldrh	r2, [r7, #30]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d305      	bcc.n	80081b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80081a6:	4b36      	ldr	r3, [pc, #216]	; (8008280 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80081a8:	4a36      	ldr	r2, [pc, #216]	; (8008284 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80081aa:	21c5      	movs	r1, #197	; 0xc5
 80081ac:	4833      	ldr	r0, [pc, #204]	; (800827c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80081ae:	f021 fd9f 	bl	8029cf0 <__assert_func>
            const uint16_t index = pos + offset;
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	8a9a      	ldrh	r2, [r3, #20]
 80081b6:	8bfb      	ldrh	r3, [r7, #30]
 80081b8:	4413      	add	r3, r2
 80081ba:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80081bc:	8bbb      	ldrh	r3, [r7, #28]
 80081be:	2b09      	cmp	r3, #9
 80081c0:	d801      	bhi.n	80081c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80081c2:	8bbb      	ldrh	r3, [r7, #28]
 80081c4:	e001      	b.n	80081ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80081c6:	8bbb      	ldrh	r3, [r7, #28]
 80081c8:	3b0a      	subs	r3, #10
 80081ca:	6a3a      	ldr	r2, [r7, #32]
 80081cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081d0:	f640 123f 	movw	r2, #2367	; 0x93f
 80081d4:	4293      	cmp	r3, r2
 80081d6:	bf0c      	ite	eq
 80081d8:	2301      	moveq	r3, #1
 80081da:	2300      	movne	r3, #0
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d03f      	beq.n	8008262 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3322      	adds	r3, #34	; 0x22
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	3222      	adds	r2, #34	; 0x22
 80081ea:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	8ad2      	ldrh	r2, [r2, #22]
 80081f0:	2a00      	cmp	r2, #0
 80081f2:	d105      	bne.n	8008200 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80081f4:	4b1f      	ldr	r3, [pc, #124]	; (8008274 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80081f6:	4a20      	ldr	r2, [pc, #128]	; (8008278 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80081f8:	21c0      	movs	r1, #192	; 0xc0
 80081fa:	4820      	ldr	r0, [pc, #128]	; (800827c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80081fc:	f021 fd78 	bl	8029cf0 <__assert_func>
            return buffer[pos];
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	8a92      	ldrh	r2, [r2, #20]
 8008204:	4611      	mov	r1, r2
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800820c:	613b      	str	r3, [r7, #16]
 800820e:	4613      	mov	r3, r2
 8008210:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	8adb      	ldrh	r3, [r3, #22]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d806      	bhi.n	8008228 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800821a:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800821c:	4a1b      	ldr	r2, [pc, #108]	; (800828c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800821e:	f240 110d 	movw	r1, #269	; 0x10d
 8008222:	4816      	ldr	r0, [pc, #88]	; (800827c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008224:	f021 fd64 	bl	8029cf0 <__assert_func>
            const uint16_t index = pos + 1;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	8a9b      	ldrh	r3, [r3, #20]
 800822c:	3301      	adds	r3, #1
 800822e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8008230:	89bb      	ldrh	r3, [r7, #12]
 8008232:	2b09      	cmp	r3, #9
 8008234:	d801      	bhi.n	800823a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8008236:	89bb      	ldrh	r3, [r7, #12]
 8008238:	e000      	b.n	800823c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800823a:	2300      	movs	r3, #0
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	89f9      	ldrh	r1, [r7, #14]
 8008240:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8008244:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3322      	adds	r3, #34	; 0x22
 800824a:	61bb      	str	r3, [r7, #24]
 800824c:	f640 133f 	movw	r3, #2367	; 0x93f
 8008250:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	8a9b      	ldrh	r3, [r3, #20]
 8008256:	4619      	mov	r1, r3
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	8afa      	ldrh	r2, [r7, #22]
 800825c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8008260:	bf00      	nop
        }
    }
    return getNextChar();
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f015 f89e 	bl	801d3a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8008268:	4603      	mov	r3, r0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3728      	adds	r7, #40	; 0x28
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	0802b580 	.word	0x0802b580
 8008278:	0802b58c 	.word	0x0802b58c
 800827c:	0802b638 	.word	0x0802b638
 8008280:	0802b690 	.word	0x0802b690
 8008284:	0802b6a0 	.word	0x0802b6a0
 8008288:	0802b774 	.word	0x0802b774
 800828c:	0802b780 	.word	0x0802b780

08008290 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f015 f83b 	bl	801d314 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800829e:	bf00      	nop
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b088      	sub	sp, #32
 80082aa:	af02      	add	r7, sp, #8
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	1d38      	adds	r0, r7, #4
 80082b0:	e880 0006 	stmia.w	r0, {r1, r2}
 80082b4:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80082b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082ba:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80082bc:	1d39      	adds	r1, r7, #4
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f012 fbb2 	bl	801aa34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80082d0:	bf00      	nop
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80082d8:	b590      	push	{r4, r7, lr}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80082e6:	88fb      	ldrh	r3, [r7, #6]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d127      	bne.n	800833c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80082ec:	88fb      	ldrh	r3, [r7, #6]
 80082ee:	4a1e      	ldr	r2, [pc, #120]	; (8008368 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80082f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d016      	beq.n	8008326 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80082f8:	88fb      	ldrh	r3, [r7, #6]
 80082fa:	4a1b      	ldr	r2, [pc, #108]	; (8008368 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80082fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008300:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	4413      	add	r3, r2
 800830a:	4a18      	ldr	r2, [pc, #96]	; (800836c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800830c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	4413      	add	r3, r2
 8008316:	4a16      	ldr	r2, [pc, #88]	; (8008370 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008318:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	4413      	add	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e00a      	b.n	800833c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8008326:	4b11      	ldr	r3, [pc, #68]	; (800836c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008328:	4a12      	ldr	r2, [pc, #72]	; (8008374 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800832a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800832c:	4a12      	ldr	r2, [pc, #72]	; (8008378 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800832e:	4b10      	ldr	r3, [pc, #64]	; (8008370 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008330:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8008332:	88fb      	ldrh	r3, [r7, #6]
 8008334:	4a11      	ldr	r2, [pc, #68]	; (800837c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8008336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800833a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00d      	beq.n	800835e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8008342:	4a0f      	ldr	r2, [pc, #60]	; (8008380 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8008344:	88fb      	ldrh	r3, [r7, #6]
 8008346:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8008348:	f000 f83e 	bl	80083c8 <_ZN17TypedTextDatabase8getFontsEv>
 800834c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800834e:	f000 f833 	bl	80083b8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8008352:	4603      	mov	r3, r0
 8008354:	461a      	mov	r2, r3
 8008356:	4621      	mov	r1, r4
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f7ff fea5 	bl	80080a8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800835e:	bf00      	nop
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	bd90      	pop	{r4, r7, pc}
 8008366:	bf00      	nop
 8008368:	240016a0 	.word	0x240016a0
 800836c:	240016a8 	.word	0x240016a8
 8008370:	240016ac 	.word	0x240016ac
 8008374:	90000b0c 	.word	0x90000b0c
 8008378:	90000af4 	.word	0x90000af4
 800837c:	90001004 	.word	0x90001004
 8008380:	240016a4 	.word	0x240016a4

08008384 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8008390:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	4b07      	ldr	r3, [pc, #28]	; (80083b4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8008396:	6819      	ldr	r1, [r3, #0]
 8008398:	887b      	ldrh	r3, [r7, #2]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	4413      	add	r3, r2
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	240016a8 	.word	0x240016a8
 80083b4:	240016ac 	.word	0x240016ac

080083b8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80083bc:	2306      	movs	r3, #6
}
 80083be:	4618      	mov	r0, r3
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80083cc:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	240016b0 	.word	0x240016b0

080083dc <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_14_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d118      	bne.n	800841e <_Z41__static_initialization_and_destruction_0ii+0x42>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d113      	bne.n	800841e <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 80083f6:	f7ff fd8f 	bl	8007f18 <_Z23getFont_verdana_20_4bppv>
 80083fa:	4603      	mov	r3, r0
};
 80083fc:	4a0a      	ldr	r2, [pc, #40]	; (8008428 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80083fe:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8008400:	f7ff fde0 	bl	8007fc4 <_Z23getFont_verdana_40_4bppv>
 8008404:	4603      	mov	r3, r0
};
 8008406:	4a08      	ldr	r2, [pc, #32]	; (8008428 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8008408:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 800840a:	f7ff fcd9 	bl	8007dc0 <_Z23getFont_verdana_10_4bppv>
 800840e:	4603      	mov	r3, r0
};
 8008410:	4a05      	ldr	r2, [pc, #20]	; (8008428 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8008412:	6093      	str	r3, [r2, #8]
    &(getFont_verdana_14_4bpp())
 8008414:	f7ff fd2a 	bl	8007e6c <_Z23getFont_verdana_14_4bppv>
 8008418:	4603      	mov	r3, r0
};
 800841a:	4a03      	ldr	r2, [pc, #12]	; (8008428 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800841c:	60d3      	str	r3, [r2, #12]
} // namespace TypedTextDatabase
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	240016b0 	.word	0x240016b0

0800842c <_GLOBAL__sub_I_touchgfx_fonts>:
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
 8008430:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008434:	2001      	movs	r0, #1
 8008436:	f7ff ffd1 	bl	80083dc <_Z41__static_initialization_and_destruction_0ii>
 800843a:	bd80      	pop	{r7, pc}

0800843c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	4618      	mov	r0, r3
 8008450:	f7fd f8be 	bl	80055d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8008454:	4a03      	ldr	r2, [pc, #12]	; (8008464 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	601a      	str	r2, [r3, #0]
{

}
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	0802bbc8 	.word	0x0802bbc8

08008468 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
{

}
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4618      	mov	r0, r3
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <_ZN5Model4tickEv>:

void Model::tick()
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]

}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
    {
    }
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
    {
    }
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
    {
 80084c8:	4a04      	ldr	r2, [pc, #16]	; (80084dc <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	601a      	str	r2, [r3, #0]
    }
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	0802c2a0 	.word	0x0802c2a0

080084e0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
    }
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff ffe9 	bl	80084c0 <_ZN8touchgfx9PresenterD1Ev>
 80084ee:	2104      	movs	r1, #4
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f021 fbce 	bl	8029c92 <_ZdlPvj>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4618      	mov	r0, r3
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
    {
 8008508:	4a04      	ldr	r2, [pc, #16]	; (800851c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	601a      	str	r2, [r3, #0]
    }
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	0802c2a0 	.word	0x0802c2a0

08008520 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	4a06      	ldr	r2, [pc, #24]	; (8008544 <_ZN13ModelListenerC1Ev+0x24>)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	605a      	str	r2, [r3, #4]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4618      	mov	r0, r3
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	0802c290 	.word	0x0802c290

08008548 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	4a04      	ldr	r2, [pc, #16]	; (8008564 <_ZN13ModelListenerD1Ev+0x1c>)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	0802c290 	.word	0x0802c290

08008568 <_ZN13ModelListenerD0Ev>:
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff ffe9 	bl	8008548 <_ZN13ModelListenerD1Ev>
 8008576:	2108      	movs	r1, #8
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f021 fb8a 	bl	8029c92 <_ZdlPvj>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	4a09      	ldr	r2, [pc, #36]	; (80085b8 <_ZN16Screen1PresenterD1Ev+0x30>)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	4a09      	ldr	r2, [pc, #36]	; (80085bc <_ZN16Screen1PresenterD1Ev+0x34>)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	605a      	str	r2, [r3, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3304      	adds	r3, #4
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7ff ffd1 	bl	8008548 <_ZN13ModelListenerD1Ev>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff ff89 	bl	80084c0 <_ZN8touchgfx9PresenterD1Ev>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	0802c268 	.word	0x0802c268
 80085bc:	0802c280 	.word	0x0802c280

080085c0 <_ZThn4_N16Screen1PresenterD1Ev>:
 80085c0:	f1a0 0004 	sub.w	r0, r0, #4
 80085c4:	e7e0      	b.n	8008588 <_ZN16Screen1PresenterD1Ev>
 80085c6:	bf00      	nop

080085c8 <_ZN16Screen1PresenterD0Ev>:
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7ff ffd9 	bl	8008588 <_ZN16Screen1PresenterD1Ev>
 80085d6:	2110      	movs	r1, #16
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f021 fb5a 	bl	8029c92 <_ZdlPvj>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <_ZThn4_N16Screen1PresenterD0Ev>:
 80085e8:	f1a0 0004 	sub.w	r0, r0, #4
 80085ec:	e7ec      	b.n	80085c8 <_ZN16Screen1PresenterD0Ev>
	...

080085f0 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
    : view(v)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff ff7f 	bl	8008500 <_ZN8touchgfx9PresenterC1Ev>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3304      	adds	r3, #4
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff ff8a 	bl	8008520 <_ZN13ModelListenerC1Ev>
 800860c:	4a06      	ldr	r2, [pc, #24]	; (8008628 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	4a06      	ldr	r2, [pc, #24]	; (800862c <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	605a      	str	r2, [r3, #4]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	60da      	str	r2, [r3, #12]
{

}
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	0802c268 	.word	0x0802c268
 800862c:	0802c280 	.word	0x0802c280

08008630 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]

}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]

}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	4a05      	ldr	r2, [pc, #20]	; (8008678 <_ZN11Screen1ViewD1Ev+0x20>)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe f851 	bl	8006710 <_ZN15Screen1ViewBaseD1Ev>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4618      	mov	r0, r3
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	0802c2b8 	.word	0x0802c2b8

0800867c <_ZN11Screen1ViewD0Ev>:
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff ffe7 	bl	8008658 <_ZN11Screen1ViewD1Ev>
 800868a:	f240 5164 	movw	r1, #1380	; 0x564
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f021 faff 	bl	8029c92 <_ZdlPvj>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fe f8a0 	bl	80067f0 <_ZN15Screen1ViewBaseC1Ev>
 80086b0:	4a03      	ldr	r2, [pc, #12]	; (80086c0 <_ZN11Screen1ViewC1Ev+0x20>)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	601a      	str	r2, [r3, #0]
{

}
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	0802c2b8 	.word	0x0802c2b8

080086c4 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe ffe8 	bl	80076a4 <_ZN15Screen1ViewBase11setupScreenEv>
}
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fd fd04 	bl	80060f4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80086ec:	bf00      	nop
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <__NVIC_SetPriority>:
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4603      	mov	r3, r0
 80086fc:	6039      	str	r1, [r7, #0]
 80086fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008704:	2b00      	cmp	r3, #0
 8008706:	db0a      	blt.n	800871e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	b2da      	uxtb	r2, r3
 800870c:	490c      	ldr	r1, [pc, #48]	; (8008740 <__NVIC_SetPriority+0x4c>)
 800870e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008712:	0112      	lsls	r2, r2, #4
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	440b      	add	r3, r1
 8008718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800871c:	e00a      	b.n	8008734 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	b2da      	uxtb	r2, r3
 8008722:	4908      	ldr	r1, [pc, #32]	; (8008744 <__NVIC_SetPriority+0x50>)
 8008724:	88fb      	ldrh	r3, [r7, #6]
 8008726:	f003 030f 	and.w	r3, r3, #15
 800872a:	3b04      	subs	r3, #4
 800872c:	0112      	lsls	r2, r2, #4
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	440b      	add	r3, r1
 8008732:	761a      	strb	r2, [r3, #24]
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr
 8008740:	e000e100 	.word	0xe000e100
 8008744:	e000ed00 	.word	0xe000ed00

08008748 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800874c:	4b05      	ldr	r3, [pc, #20]	; (8008764 <SysTick_Handler+0x1c>)
 800874e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008750:	f002 fea6 	bl	800b4a0 <xTaskGetSchedulerState>
 8008754:	4603      	mov	r3, r0
 8008756:	2b01      	cmp	r3, #1
 8008758:	d001      	beq.n	800875e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800875a:	f000 ffe5 	bl	8009728 <xPortSysTickHandler>
  }
}
 800875e:	bf00      	nop
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	e000e010 	.word	0xe000e010

08008768 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800876c:	2100      	movs	r1, #0
 800876e:	f06f 0004 	mvn.w	r0, #4
 8008772:	f7ff ffbf 	bl	80086f4 <__NVIC_SetPriority>
#endif
}
 8008776:	bf00      	nop
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008782:	f3ef 8305 	mrs	r3, IPSR
 8008786:	603b      	str	r3, [r7, #0]
  return(result);
 8008788:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800878e:	f06f 0305 	mvn.w	r3, #5
 8008792:	607b      	str	r3, [r7, #4]
 8008794:	e00c      	b.n	80087b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008796:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <osKernelInitialize+0x44>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d105      	bne.n	80087aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800879e:	4b08      	ldr	r3, [pc, #32]	; (80087c0 <osKernelInitialize+0x44>)
 80087a0:	2201      	movs	r2, #1
 80087a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	607b      	str	r3, [r7, #4]
 80087a8:	e002      	b.n	80087b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80087aa:	f04f 33ff 	mov.w	r3, #4294967295
 80087ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087b0:	687b      	ldr	r3, [r7, #4]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	240016c0 	.word	0x240016c0

080087c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087ca:	f3ef 8305 	mrs	r3, IPSR
 80087ce:	603b      	str	r3, [r7, #0]
  return(result);
 80087d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <osKernelStart+0x1a>
    stat = osErrorISR;
 80087d6:	f06f 0305 	mvn.w	r3, #5
 80087da:	607b      	str	r3, [r7, #4]
 80087dc:	e010      	b.n	8008800 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087de:	4b0b      	ldr	r3, [pc, #44]	; (800880c <osKernelStart+0x48>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d109      	bne.n	80087fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087e6:	f7ff ffbf 	bl	8008768 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087ea:	4b08      	ldr	r3, [pc, #32]	; (800880c <osKernelStart+0x48>)
 80087ec:	2202      	movs	r2, #2
 80087ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80087f0:	f002 fa0e 	bl	800ac10 <vTaskStartScheduler>
      stat = osOK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	607b      	str	r3, [r7, #4]
 80087f8:	e002      	b.n	8008800 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80087fa:	f04f 33ff 	mov.w	r3, #4294967295
 80087fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008800:	687b      	ldr	r3, [r7, #4]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	240016c0 	.word	0x240016c0

08008810 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008810:	b580      	push	{r7, lr}
 8008812:	b08e      	sub	sp, #56	; 0x38
 8008814:	af04      	add	r7, sp, #16
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800881c:	2300      	movs	r3, #0
 800881e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008820:	f3ef 8305 	mrs	r3, IPSR
 8008824:	617b      	str	r3, [r7, #20]
  return(result);
 8008826:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008828:	2b00      	cmp	r3, #0
 800882a:	d17e      	bne.n	800892a <osThreadNew+0x11a>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d07b      	beq.n	800892a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008832:	2380      	movs	r3, #128	; 0x80
 8008834:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008836:	2318      	movs	r3, #24
 8008838:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800883a:	2300      	movs	r3, #0
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800883e:	f04f 33ff 	mov.w	r3, #4294967295
 8008842:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d045      	beq.n	80088d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <osThreadNew+0x48>
        name = attr->name;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d008      	beq.n	800887e <osThreadNew+0x6e>
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	2b38      	cmp	r3, #56	; 0x38
 8008870:	d805      	bhi.n	800887e <osThreadNew+0x6e>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <osThreadNew+0x72>
        return (NULL);
 800887e:	2300      	movs	r3, #0
 8008880:	e054      	b.n	800892c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	089b      	lsrs	r3, r3, #2
 8008890:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00e      	beq.n	80088b8 <osThreadNew+0xa8>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	2b5b      	cmp	r3, #91	; 0x5b
 80088a0:	d90a      	bls.n	80088b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d006      	beq.n	80088b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d002      	beq.n	80088b8 <osThreadNew+0xa8>
        mem = 1;
 80088b2:	2301      	movs	r3, #1
 80088b4:	61bb      	str	r3, [r7, #24]
 80088b6:	e010      	b.n	80088da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10c      	bne.n	80088da <osThreadNew+0xca>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d108      	bne.n	80088da <osThreadNew+0xca>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d104      	bne.n	80088da <osThreadNew+0xca>
          mem = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61bb      	str	r3, [r7, #24]
 80088d4:	e001      	b.n	80088da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d110      	bne.n	8008902 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088e8:	9202      	str	r2, [sp, #8]
 80088ea:	9301      	str	r3, [sp, #4]
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	6a3a      	ldr	r2, [r7, #32]
 80088f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f001 ffb4 	bl	800a864 <xTaskCreateStatic>
 80088fc:	4603      	mov	r3, r0
 80088fe:	613b      	str	r3, [r7, #16]
 8008900:	e013      	b.n	800892a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d110      	bne.n	800892a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008908:	6a3b      	ldr	r3, [r7, #32]
 800890a:	b29a      	uxth	r2, r3
 800890c:	f107 0310 	add.w	r3, r7, #16
 8008910:	9301      	str	r3, [sp, #4]
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f001 ffff 	bl	800a91e <xTaskCreate>
 8008920:	4603      	mov	r3, r0
 8008922:	2b01      	cmp	r3, #1
 8008924:	d001      	beq.n	800892a <osThreadNew+0x11a>
            hTask = NULL;
 8008926:	2300      	movs	r3, #0
 8008928:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800892a:	693b      	ldr	r3, [r7, #16]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3728      	adds	r7, #40	; 0x28
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800893c:	f3ef 8305 	mrs	r3, IPSR
 8008940:	60bb      	str	r3, [r7, #8]
  return(result);
 8008942:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008944:	2b00      	cmp	r3, #0
 8008946:	d003      	beq.n	8008950 <osDelay+0x1c>
    stat = osErrorISR;
 8008948:	f06f 0305 	mvn.w	r3, #5
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	e007      	b.n	8008960 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <osDelay+0x2c>
      vTaskDelay(ticks);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f002 f924 	bl	800aba8 <vTaskDelay>
    }
  }

  return (stat);
 8008960:	68fb      	ldr	r3, [r7, #12]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800896a:	b580      	push	{r7, lr}
 800896c:	b08a      	sub	sp, #40	; 0x28
 800896e:	af02      	add	r7, sp, #8
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008976:	2300      	movs	r3, #0
 8008978:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800897a:	f3ef 8305 	mrs	r3, IPSR
 800897e:	613b      	str	r3, [r7, #16]
  return(result);
 8008980:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008982:	2b00      	cmp	r3, #0
 8008984:	d175      	bne.n	8008a72 <osSemaphoreNew+0x108>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d072      	beq.n	8008a72 <osSemaphoreNew+0x108>
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	429a      	cmp	r2, r3
 8008992:	d86e      	bhi.n	8008a72 <osSemaphoreNew+0x108>
    mem = -1;
 8008994:	f04f 33ff 	mov.w	r3, #4294967295
 8008998:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d015      	beq.n	80089cc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d006      	beq.n	80089b6 <osSemaphoreNew+0x4c>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	2b4f      	cmp	r3, #79	; 0x4f
 80089ae:	d902      	bls.n	80089b6 <osSemaphoreNew+0x4c>
        mem = 1;
 80089b0:	2301      	movs	r3, #1
 80089b2:	61bb      	str	r3, [r7, #24]
 80089b4:	e00c      	b.n	80089d0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d108      	bne.n	80089d0 <osSemaphoreNew+0x66>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d104      	bne.n	80089d0 <osSemaphoreNew+0x66>
          mem = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	61bb      	str	r3, [r7, #24]
 80089ca:	e001      	b.n	80089d0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d6:	d04c      	beq.n	8008a72 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d128      	bne.n	8008a30 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d10a      	bne.n	80089fa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	2203      	movs	r2, #3
 80089ea:	9200      	str	r2, [sp, #0]
 80089ec:	2200      	movs	r2, #0
 80089ee:	2100      	movs	r1, #0
 80089f0:	2001      	movs	r0, #1
 80089f2:	f000 ff91 	bl	8009918 <xQueueGenericCreateStatic>
 80089f6:	61f8      	str	r0, [r7, #28]
 80089f8:	e005      	b.n	8008a06 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80089fa:	2203      	movs	r2, #3
 80089fc:	2100      	movs	r1, #0
 80089fe:	2001      	movs	r0, #1
 8008a00:	f001 f802 	bl	8009a08 <xQueueGenericCreate>
 8008a04:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d022      	beq.n	8008a52 <osSemaphoreNew+0xe8>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d01f      	beq.n	8008a52 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008a12:	2300      	movs	r3, #0
 8008a14:	2200      	movs	r2, #0
 8008a16:	2100      	movs	r1, #0
 8008a18:	69f8      	ldr	r0, [r7, #28]
 8008a1a:	f001 f8bd 	bl	8009b98 <xQueueGenericSend>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d016      	beq.n	8008a52 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008a24:	69f8      	ldr	r0, [r7, #28]
 8008a26:	f001 fd49 	bl	800a4bc <vQueueDelete>
            hSemaphore = NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	61fb      	str	r3, [r7, #28]
 8008a2e:	e010      	b.n	8008a52 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d108      	bne.n	8008a48 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	68b9      	ldr	r1, [r7, #8]
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f001 f83f 	bl	8009ac2 <xQueueCreateCountingSemaphoreStatic>
 8008a44:	61f8      	str	r0, [r7, #28]
 8008a46:	e004      	b.n	8008a52 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f001 f870 	bl	8009b30 <xQueueCreateCountingSemaphore>
 8008a50:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00c      	beq.n	8008a72 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d003      	beq.n	8008a66 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	617b      	str	r3, [r7, #20]
 8008a64:	e001      	b.n	8008a6a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008a6a:	6979      	ldr	r1, [r7, #20]
 8008a6c:	69f8      	ldr	r0, [r7, #28]
 8008a6e:	f001 fe71 	bl	800a754 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008a72:	69fb      	ldr	r3, [r7, #28]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3720      	adds	r7, #32
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d103      	bne.n	8008a9c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008a94:	f06f 0303 	mvn.w	r3, #3
 8008a98:	617b      	str	r3, [r7, #20]
 8008a9a:	e039      	b.n	8008b10 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a9c:	f3ef 8305 	mrs	r3, IPSR
 8008aa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d022      	beq.n	8008aee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008aae:	f06f 0303 	mvn.w	r3, #3
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	e02c      	b.n	8008b10 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008aba:	f107 0308 	add.w	r3, r7, #8
 8008abe:	461a      	mov	r2, r3
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	6938      	ldr	r0, [r7, #16]
 8008ac4:	f001 fc7a 	bl	800a3bc <xQueueReceiveFromISR>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d003      	beq.n	8008ad6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008ace:	f06f 0302 	mvn.w	r3, #2
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	e01c      	b.n	8008b10 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d019      	beq.n	8008b10 <osSemaphoreAcquire+0x94>
 8008adc:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <osSemaphoreAcquire+0xa0>)
 8008ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	e010      	b.n	8008b10 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6938      	ldr	r0, [r7, #16]
 8008af2:	f001 fb57 	bl	800a1a4 <xQueueSemaphoreTake>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d009      	beq.n	8008b10 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008b02:	f06f 0301 	mvn.w	r3, #1
 8008b06:	617b      	str	r3, [r7, #20]
 8008b08:	e002      	b.n	8008b10 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008b0a:	f06f 0302 	mvn.w	r3, #2
 8008b0e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008b10:	697b      	ldr	r3, [r7, #20]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	e000ed04 	.word	0xe000ed04

08008b20 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d103      	bne.n	8008b3e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008b36:	f06f 0303 	mvn.w	r3, #3
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	e02c      	b.n	8008b98 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b3e:	f3ef 8305 	mrs	r3, IPSR
 8008b42:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b44:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d01a      	beq.n	8008b80 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008b4e:	f107 0308 	add.w	r3, r7, #8
 8008b52:	4619      	mov	r1, r3
 8008b54:	6938      	ldr	r0, [r7, #16]
 8008b56:	f001 f9b8 	bl	8009eca <xQueueGiveFromISR>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d003      	beq.n	8008b68 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008b60:	f06f 0302 	mvn.w	r3, #2
 8008b64:	617b      	str	r3, [r7, #20]
 8008b66:	e017      	b.n	8008b98 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d014      	beq.n	8008b98 <osSemaphoreRelease+0x78>
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <osSemaphoreRelease+0x84>)
 8008b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	e00b      	b.n	8008b98 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008b80:	2300      	movs	r3, #0
 8008b82:	2200      	movs	r2, #0
 8008b84:	2100      	movs	r1, #0
 8008b86:	6938      	ldr	r0, [r7, #16]
 8008b88:	f001 f806 	bl	8009b98 <xQueueGenericSend>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d002      	beq.n	8008b98 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008b92:	f06f 0302 	mvn.w	r3, #2
 8008b96:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008b98:	697b      	ldr	r3, [r7, #20]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	e000ed04 	.word	0xe000ed04

08008ba8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08a      	sub	sp, #40	; 0x28
 8008bac:	af02      	add	r7, sp, #8
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bb8:	f3ef 8305 	mrs	r3, IPSR
 8008bbc:	613b      	str	r3, [r7, #16]
  return(result);
 8008bbe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d15f      	bne.n	8008c84 <osMessageQueueNew+0xdc>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d05c      	beq.n	8008c84 <osMessageQueueNew+0xdc>
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d059      	beq.n	8008c84 <osMessageQueueNew+0xdc>
    mem = -1;
 8008bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d029      	beq.n	8008c30 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d012      	beq.n	8008c0a <osMessageQueueNew+0x62>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	2b4f      	cmp	r3, #79	; 0x4f
 8008bea:	d90e      	bls.n	8008c0a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00a      	beq.n	8008c0a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	695a      	ldr	r2, [r3, #20]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	68b9      	ldr	r1, [r7, #8]
 8008bfc:	fb01 f303 	mul.w	r3, r1, r3
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d302      	bcc.n	8008c0a <osMessageQueueNew+0x62>
        mem = 1;
 8008c04:	2301      	movs	r3, #1
 8008c06:	61bb      	str	r3, [r7, #24]
 8008c08:	e014      	b.n	8008c34 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d110      	bne.n	8008c34 <osMessageQueueNew+0x8c>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10c      	bne.n	8008c34 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d108      	bne.n	8008c34 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d104      	bne.n	8008c34 <osMessageQueueNew+0x8c>
          mem = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61bb      	str	r3, [r7, #24]
 8008c2e:	e001      	b.n	8008c34 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d10b      	bne.n	8008c52 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691a      	ldr	r2, [r3, #16]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	2100      	movs	r1, #0
 8008c44:	9100      	str	r1, [sp, #0]
 8008c46:	68b9      	ldr	r1, [r7, #8]
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 fe65 	bl	8009918 <xQueueGenericCreateStatic>
 8008c4e:	61f8      	str	r0, [r7, #28]
 8008c50:	e008      	b.n	8008c64 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d105      	bne.n	8008c64 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008c58:	2200      	movs	r2, #0
 8008c5a:	68b9      	ldr	r1, [r7, #8]
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 fed3 	bl	8009a08 <xQueueGenericCreate>
 8008c62:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00c      	beq.n	8008c84 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d003      	beq.n	8008c78 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	617b      	str	r3, [r7, #20]
 8008c76:	e001      	b.n	8008c7c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008c7c:	6979      	ldr	r1, [r7, #20]
 8008c7e:	69f8      	ldr	r0, [r7, #28]
 8008c80:	f001 fd68 	bl	800a754 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008c84:	69fb      	ldr	r3, [r7, #28]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3720      	adds	r7, #32
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ca8:	f3ef 8305 	mrs	r3, IPSR
 8008cac:	617b      	str	r3, [r7, #20]
  return(result);
 8008cae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d028      	beq.n	8008d06 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d005      	beq.n	8008cc6 <osMessageQueuePut+0x36>
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <osMessageQueuePut+0x36>
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008cc6:	f06f 0303 	mvn.w	r3, #3
 8008cca:	61fb      	str	r3, [r7, #28]
 8008ccc:	e038      	b.n	8008d40 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008cd2:	f107 0210 	add.w	r2, r7, #16
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	68b9      	ldr	r1, [r7, #8]
 8008cda:	69b8      	ldr	r0, [r7, #24]
 8008cdc:	f001 f85a 	bl	8009d94 <xQueueGenericSendFromISR>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d003      	beq.n	8008cee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008ce6:	f06f 0302 	mvn.w	r3, #2
 8008cea:	61fb      	str	r3, [r7, #28]
 8008cec:	e028      	b.n	8008d40 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d025      	beq.n	8008d40 <osMessageQueuePut+0xb0>
 8008cf4:	4b15      	ldr	r3, [pc, #84]	; (8008d4c <osMessageQueuePut+0xbc>)
 8008cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	e01c      	b.n	8008d40 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <osMessageQueuePut+0x82>
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d103      	bne.n	8008d1a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008d12:	f06f 0303 	mvn.w	r3, #3
 8008d16:	61fb      	str	r3, [r7, #28]
 8008d18:	e012      	b.n	8008d40 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	68b9      	ldr	r1, [r7, #8]
 8008d20:	69b8      	ldr	r0, [r7, #24]
 8008d22:	f000 ff39 	bl	8009b98 <xQueueGenericSend>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d009      	beq.n	8008d40 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008d32:	f06f 0301 	mvn.w	r3, #1
 8008d36:	61fb      	str	r3, [r7, #28]
 8008d38:	e002      	b.n	8008d40 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008d3a:	f06f 0302 	mvn.w	r3, #2
 8008d3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008d40:	69fb      	ldr	r3, [r7, #28]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3720      	adds	r7, #32
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d66:	f3ef 8305 	mrs	r3, IPSR
 8008d6a:	617b      	str	r3, [r7, #20]
  return(result);
 8008d6c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d028      	beq.n	8008dc4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <osMessageQueueGet+0x34>
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <osMessageQueueGet+0x34>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008d84:	f06f 0303 	mvn.w	r3, #3
 8008d88:	61fb      	str	r3, [r7, #28]
 8008d8a:	e037      	b.n	8008dfc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008d90:	f107 0310 	add.w	r3, r7, #16
 8008d94:	461a      	mov	r2, r3
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	69b8      	ldr	r0, [r7, #24]
 8008d9a:	f001 fb0f 	bl	800a3bc <xQueueReceiveFromISR>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d003      	beq.n	8008dac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008da4:	f06f 0302 	mvn.w	r3, #2
 8008da8:	61fb      	str	r3, [r7, #28]
 8008daa:	e027      	b.n	8008dfc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d024      	beq.n	8008dfc <osMessageQueueGet+0xac>
 8008db2:	4b15      	ldr	r3, [pc, #84]	; (8008e08 <osMessageQueueGet+0xb8>)
 8008db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	e01b      	b.n	8008dfc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <osMessageQueueGet+0x80>
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d103      	bne.n	8008dd8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008dd0:	f06f 0303 	mvn.w	r3, #3
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	e011      	b.n	8008dfc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	68b9      	ldr	r1, [r7, #8]
 8008ddc:	69b8      	ldr	r0, [r7, #24]
 8008dde:	f001 f901 	bl	8009fe4 <xQueueReceive>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d009      	beq.n	8008dfc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008dee:	f06f 0301 	mvn.w	r3, #1
 8008df2:	61fb      	str	r3, [r7, #28]
 8008df4:	e002      	b.n	8008dfc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008df6:	f06f 0302 	mvn.w	r3, #2
 8008dfa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008dfc:	69fb      	ldr	r3, [r7, #28]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3720      	adds	r7, #32
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	e000ed04 	.word	0xe000ed04

08008e0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4a07      	ldr	r2, [pc, #28]	; (8008e38 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	4a06      	ldr	r2, [pc, #24]	; (8008e3c <vApplicationGetIdleTaskMemory+0x30>)
 8008e22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2280      	movs	r2, #128	; 0x80
 8008e28:	601a      	str	r2, [r3, #0]
}
 8008e2a:	bf00      	nop
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	240016c4 	.word	0x240016c4
 8008e3c:	24001720 	.word	0x24001720

08008e40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4a07      	ldr	r2, [pc, #28]	; (8008e6c <vApplicationGetTimerTaskMemory+0x2c>)
 8008e50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	4a06      	ldr	r2, [pc, #24]	; (8008e70 <vApplicationGetTimerTaskMemory+0x30>)
 8008e56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e5e:	601a      	str	r2, [r3, #0]
}
 8008e60:	bf00      	nop
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	24001920 	.word	0x24001920
 8008e70:	2400197c 	.word	0x2400197c

08008e74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08a      	sub	sp, #40	; 0x28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e80:	f001 ff2c 	bl	800acdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e84:	4b5b      	ldr	r3, [pc, #364]	; (8008ff4 <pvPortMalloc+0x180>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e8c:	f000 f920 	bl	80090d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e90:	4b59      	ldr	r3, [pc, #356]	; (8008ff8 <pvPortMalloc+0x184>)
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4013      	ands	r3, r2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f040 8093 	bne.w	8008fc4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01d      	beq.n	8008ee0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ea4:	2208      	movs	r2, #8
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f003 0307 	and.w	r3, r3, #7
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d014      	beq.n	8008ee0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f023 0307 	bic.w	r3, r3, #7
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f003 0307 	and.w	r3, r3, #7
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008edc:	bf00      	nop
 8008ede:	e7fe      	b.n	8008ede <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d06e      	beq.n	8008fc4 <pvPortMalloc+0x150>
 8008ee6:	4b45      	ldr	r3, [pc, #276]	; (8008ffc <pvPortMalloc+0x188>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d869      	bhi.n	8008fc4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ef0:	4b43      	ldr	r3, [pc, #268]	; (8009000 <pvPortMalloc+0x18c>)
 8008ef2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ef4:	4b42      	ldr	r3, [pc, #264]	; (8009000 <pvPortMalloc+0x18c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008efa:	e004      	b.n	8008f06 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d903      	bls.n	8008f18 <pvPortMalloc+0xa4>
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1f1      	bne.n	8008efc <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f18:	4b36      	ldr	r3, [pc, #216]	; (8008ff4 <pvPortMalloc+0x180>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d050      	beq.n	8008fc4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f22:	6a3b      	ldr	r3, [r7, #32]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2208      	movs	r2, #8
 8008f28:	4413      	add	r3, r2
 8008f2a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	1ad2      	subs	r2, r2, r3
 8008f3c:	2308      	movs	r3, #8
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d91f      	bls.n	8008f84 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4413      	add	r3, r2
 8008f4a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00a      	beq.n	8008f6c <pvPortMalloc+0xf8>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	613b      	str	r3, [r7, #16]
}
 8008f68:	bf00      	nop
 8008f6a:	e7fe      	b.n	8008f6a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	1ad2      	subs	r2, r2, r3
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f7e:	69b8      	ldr	r0, [r7, #24]
 8008f80:	f000 f908 	bl	8009194 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f84:	4b1d      	ldr	r3, [pc, #116]	; (8008ffc <pvPortMalloc+0x188>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	4a1b      	ldr	r2, [pc, #108]	; (8008ffc <pvPortMalloc+0x188>)
 8008f90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f92:	4b1a      	ldr	r3, [pc, #104]	; (8008ffc <pvPortMalloc+0x188>)
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	4b1b      	ldr	r3, [pc, #108]	; (8009004 <pvPortMalloc+0x190>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d203      	bcs.n	8008fa6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f9e:	4b17      	ldr	r3, [pc, #92]	; (8008ffc <pvPortMalloc+0x188>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a18      	ldr	r2, [pc, #96]	; (8009004 <pvPortMalloc+0x190>)
 8008fa4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	4b13      	ldr	r3, [pc, #76]	; (8008ff8 <pvPortMalloc+0x184>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008fba:	4b13      	ldr	r3, [pc, #76]	; (8009008 <pvPortMalloc+0x194>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	4a11      	ldr	r2, [pc, #68]	; (8009008 <pvPortMalloc+0x194>)
 8008fc2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fc4:	f001 fe98 	bl	800acf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <pvPortMalloc+0x174>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	60fb      	str	r3, [r7, #12]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <pvPortMalloc+0x172>
	return pvReturn;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3728      	adds	r7, #40	; 0x28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	24009d84 	.word	0x24009d84
 8008ff8:	24009d98 	.word	0x24009d98
 8008ffc:	24009d88 	.word	0x24009d88
 8009000:	24009d7c 	.word	0x24009d7c
 8009004:	24009d8c 	.word	0x24009d8c
 8009008:	24009d90 	.word	0x24009d90

0800900c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d04d      	beq.n	80090ba <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800901e:	2308      	movs	r3, #8
 8009020:	425b      	negs	r3, r3
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	4413      	add	r3, r2
 8009026:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	4b24      	ldr	r3, [pc, #144]	; (80090c4 <vPortFree+0xb8>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4013      	ands	r3, r2
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <vPortFree+0x44>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	60fb      	str	r3, [r7, #12]
}
 800904c:	bf00      	nop
 800904e:	e7fe      	b.n	800904e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00a      	beq.n	800906e <vPortFree+0x62>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	60bb      	str	r3, [r7, #8]
}
 800906a:	bf00      	nop
 800906c:	e7fe      	b.n	800906c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	4b14      	ldr	r3, [pc, #80]	; (80090c4 <vPortFree+0xb8>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4013      	ands	r3, r2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d01e      	beq.n	80090ba <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d11a      	bne.n	80090ba <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	4b0e      	ldr	r3, [pc, #56]	; (80090c4 <vPortFree+0xb8>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	43db      	mvns	r3, r3
 800908e:	401a      	ands	r2, r3
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009094:	f001 fe22 	bl	800acdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <vPortFree+0xbc>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4413      	add	r3, r2
 80090a2:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <vPortFree+0xbc>)
 80090a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090a6:	6938      	ldr	r0, [r7, #16]
 80090a8:	f000 f874 	bl	8009194 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80090ac:	4b07      	ldr	r3, [pc, #28]	; (80090cc <vPortFree+0xc0>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3301      	adds	r3, #1
 80090b2:	4a06      	ldr	r2, [pc, #24]	; (80090cc <vPortFree+0xc0>)
 80090b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80090b6:	f001 fe1f 	bl	800acf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090ba:	bf00      	nop
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	24009d98 	.word	0x24009d98
 80090c8:	24009d88 	.word	0x24009d88
 80090cc:	24009d94 	.word	0x24009d94

080090d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090dc:	4b27      	ldr	r3, [pc, #156]	; (800917c <prvHeapInit+0xac>)
 80090de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00c      	beq.n	8009104 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3307      	adds	r3, #7
 80090ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0307 	bic.w	r3, r3, #7
 80090f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	4a1f      	ldr	r2, [pc, #124]	; (800917c <prvHeapInit+0xac>)
 8009100:	4413      	add	r3, r2
 8009102:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009108:	4a1d      	ldr	r2, [pc, #116]	; (8009180 <prvHeapInit+0xb0>)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800910e:	4b1c      	ldr	r3, [pc, #112]	; (8009180 <prvHeapInit+0xb0>)
 8009110:	2200      	movs	r2, #0
 8009112:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	4413      	add	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800911c:	2208      	movs	r2, #8
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	1a9b      	subs	r3, r3, r2
 8009122:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 0307 	bic.w	r3, r3, #7
 800912a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4a15      	ldr	r2, [pc, #84]	; (8009184 <prvHeapInit+0xb4>)
 8009130:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009132:	4b14      	ldr	r3, [pc, #80]	; (8009184 <prvHeapInit+0xb4>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2200      	movs	r2, #0
 8009138:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800913a:	4b12      	ldr	r3, [pc, #72]	; (8009184 <prvHeapInit+0xb4>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2200      	movs	r2, #0
 8009140:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	1ad2      	subs	r2, r2, r3
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009150:	4b0c      	ldr	r3, [pc, #48]	; (8009184 <prvHeapInit+0xb4>)
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	4a0a      	ldr	r2, [pc, #40]	; (8009188 <prvHeapInit+0xb8>)
 800915e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	4a09      	ldr	r2, [pc, #36]	; (800918c <prvHeapInit+0xbc>)
 8009166:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009168:	4b09      	ldr	r3, [pc, #36]	; (8009190 <prvHeapInit+0xc0>)
 800916a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800916e:	601a      	str	r2, [r3, #0]
}
 8009170:	bf00      	nop
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	24001d7c 	.word	0x24001d7c
 8009180:	24009d7c 	.word	0x24009d7c
 8009184:	24009d84 	.word	0x24009d84
 8009188:	24009d8c 	.word	0x24009d8c
 800918c:	24009d88 	.word	0x24009d88
 8009190:	24009d98 	.word	0x24009d98

08009194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800919c:	4b28      	ldr	r3, [pc, #160]	; (8009240 <prvInsertBlockIntoFreeList+0xac>)
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	e002      	b.n	80091a8 <prvInsertBlockIntoFreeList+0x14>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d8f7      	bhi.n	80091a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	4413      	add	r3, r2
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d108      	bne.n	80091d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	441a      	add	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	441a      	add	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d118      	bne.n	800921c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	4b15      	ldr	r3, [pc, #84]	; (8009244 <prvInsertBlockIntoFreeList+0xb0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d00d      	beq.n	8009212 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	441a      	add	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	e008      	b.n	8009224 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009212:	4b0c      	ldr	r3, [pc, #48]	; (8009244 <prvInsertBlockIntoFreeList+0xb0>)
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	e003      	b.n	8009224 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	429a      	cmp	r2, r3
 800922a:	d002      	beq.n	8009232 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009232:	bf00      	nop
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	24009d7c 	.word	0x24009d7c
 8009244:	24009d84 	.word	0x24009d84

08009248 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f103 0208 	add.w	r2, r3, #8
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f04f 32ff 	mov.w	r2, #4294967295
 8009260:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f103 0208 	add.w	r2, r3, #8
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f103 0208 	add.w	r2, r3, #8
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092a2:	b480      	push	{r7}
 80092a4:	b085      	sub	sp, #20
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	601a      	str	r2, [r3, #0]
}
 80092de:	bf00      	nop
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092ea:	b480      	push	{r7}
 80092ec:	b085      	sub	sp, #20
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009300:	d103      	bne.n	800930a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	e00c      	b.n	8009324 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	3308      	adds	r3, #8
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	e002      	b.n	8009318 <vListInsert+0x2e>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	429a      	cmp	r2, r3
 8009322:	d2f6      	bcs.n	8009312 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	1c5a      	adds	r2, r3, #1
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	601a      	str	r2, [r3, #0]
}
 8009350:	bf00      	nop
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	6892      	ldr	r2, [r2, #8]
 8009372:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	6852      	ldr	r2, [r2, #4]
 800937c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	429a      	cmp	r2, r3
 8009386:	d103      	bne.n	8009390 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689a      	ldr	r2, [r3, #8]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	1e5a      	subs	r2, r3, #1
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	3b04      	subs	r3, #4
 80093c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80093c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3b04      	subs	r3, #4
 80093ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	f023 0201 	bic.w	r2, r3, #1
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3b04      	subs	r3, #4
 80093de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80093e0:	4a0c      	ldr	r2, [pc, #48]	; (8009414 <pxPortInitialiseStack+0x64>)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3b14      	subs	r3, #20
 80093ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3b04      	subs	r3, #4
 80093f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f06f 0202 	mvn.w	r2, #2
 80093fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3b20      	subs	r3, #32
 8009404:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009406:	68fb      	ldr	r3, [r7, #12]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	08009419 	.word	0x08009419

08009418 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009422:	4b12      	ldr	r3, [pc, #72]	; (800946c <prvTaskExitError+0x54>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942a:	d00a      	beq.n	8009442 <prvTaskExitError+0x2a>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	60fb      	str	r3, [r7, #12]
}
 800943e:	bf00      	nop
 8009440:	e7fe      	b.n	8009440 <prvTaskExitError+0x28>
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	60bb      	str	r3, [r7, #8]
}
 8009454:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009456:	bf00      	nop
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0fc      	beq.n	8009458 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800945e:	bf00      	nop
 8009460:	bf00      	nop
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	24000028 	.word	0x24000028

08009470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009470:	4b07      	ldr	r3, [pc, #28]	; (8009490 <pxCurrentTCBConst2>)
 8009472:	6819      	ldr	r1, [r3, #0]
 8009474:	6808      	ldr	r0, [r1, #0]
 8009476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947a:	f380 8809 	msr	PSP, r0
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f04f 0000 	mov.w	r0, #0
 8009486:	f380 8811 	msr	BASEPRI, r0
 800948a:	4770      	bx	lr
 800948c:	f3af 8000 	nop.w

08009490 <pxCurrentTCBConst2>:
 8009490:	24009da4 	.word	0x24009da4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009494:	bf00      	nop
 8009496:	bf00      	nop

08009498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009498:	4808      	ldr	r0, [pc, #32]	; (80094bc <prvPortStartFirstTask+0x24>)
 800949a:	6800      	ldr	r0, [r0, #0]
 800949c:	6800      	ldr	r0, [r0, #0]
 800949e:	f380 8808 	msr	MSP, r0
 80094a2:	f04f 0000 	mov.w	r0, #0
 80094a6:	f380 8814 	msr	CONTROL, r0
 80094aa:	b662      	cpsie	i
 80094ac:	b661      	cpsie	f
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	df00      	svc	0
 80094b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094ba:	bf00      	nop
 80094bc:	e000ed08 	.word	0xe000ed08

080094c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80094c6:	4b46      	ldr	r3, [pc, #280]	; (80095e0 <xPortStartScheduler+0x120>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a46      	ldr	r2, [pc, #280]	; (80095e4 <xPortStartScheduler+0x124>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d10a      	bne.n	80094e6 <xPortStartScheduler+0x26>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	613b      	str	r3, [r7, #16]
}
 80094e2:	bf00      	nop
 80094e4:	e7fe      	b.n	80094e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80094e6:	4b3e      	ldr	r3, [pc, #248]	; (80095e0 <xPortStartScheduler+0x120>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a3f      	ldr	r2, [pc, #252]	; (80095e8 <xPortStartScheduler+0x128>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d10a      	bne.n	8009506 <xPortStartScheduler+0x46>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	60fb      	str	r3, [r7, #12]
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009506:	4b39      	ldr	r3, [pc, #228]	; (80095ec <xPortStartScheduler+0x12c>)
 8009508:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	22ff      	movs	r2, #255	; 0xff
 8009516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	b2db      	uxtb	r3, r3
 800951e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009528:	b2da      	uxtb	r2, r3
 800952a:	4b31      	ldr	r3, [pc, #196]	; (80095f0 <xPortStartScheduler+0x130>)
 800952c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800952e:	4b31      	ldr	r3, [pc, #196]	; (80095f4 <xPortStartScheduler+0x134>)
 8009530:	2207      	movs	r2, #7
 8009532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009534:	e009      	b.n	800954a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009536:	4b2f      	ldr	r3, [pc, #188]	; (80095f4 <xPortStartScheduler+0x134>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3b01      	subs	r3, #1
 800953c:	4a2d      	ldr	r2, [pc, #180]	; (80095f4 <xPortStartScheduler+0x134>)
 800953e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	b2db      	uxtb	r3, r3
 8009548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800954a:	78fb      	ldrb	r3, [r7, #3]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009552:	2b80      	cmp	r3, #128	; 0x80
 8009554:	d0ef      	beq.n	8009536 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009556:	4b27      	ldr	r3, [pc, #156]	; (80095f4 <xPortStartScheduler+0x134>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f1c3 0307 	rsb	r3, r3, #7
 800955e:	2b04      	cmp	r3, #4
 8009560:	d00a      	beq.n	8009578 <xPortStartScheduler+0xb8>
	__asm volatile
 8009562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	60bb      	str	r3, [r7, #8]
}
 8009574:	bf00      	nop
 8009576:	e7fe      	b.n	8009576 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009578:	4b1e      	ldr	r3, [pc, #120]	; (80095f4 <xPortStartScheduler+0x134>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	021b      	lsls	r3, r3, #8
 800957e:	4a1d      	ldr	r2, [pc, #116]	; (80095f4 <xPortStartScheduler+0x134>)
 8009580:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009582:	4b1c      	ldr	r3, [pc, #112]	; (80095f4 <xPortStartScheduler+0x134>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800958a:	4a1a      	ldr	r2, [pc, #104]	; (80095f4 <xPortStartScheduler+0x134>)
 800958c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	b2da      	uxtb	r2, r3
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009596:	4b18      	ldr	r3, [pc, #96]	; (80095f8 <xPortStartScheduler+0x138>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a17      	ldr	r2, [pc, #92]	; (80095f8 <xPortStartScheduler+0x138>)
 800959c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095a2:	4b15      	ldr	r3, [pc, #84]	; (80095f8 <xPortStartScheduler+0x138>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a14      	ldr	r2, [pc, #80]	; (80095f8 <xPortStartScheduler+0x138>)
 80095a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095ae:	f000 f8dd 	bl	800976c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095b2:	4b12      	ldr	r3, [pc, #72]	; (80095fc <xPortStartScheduler+0x13c>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095b8:	f000 f8fc 	bl	80097b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095bc:	4b10      	ldr	r3, [pc, #64]	; (8009600 <xPortStartScheduler+0x140>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a0f      	ldr	r2, [pc, #60]	; (8009600 <xPortStartScheduler+0x140>)
 80095c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80095c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095c8:	f7ff ff66 	bl	8009498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095cc:	f001 fcfc 	bl	800afc8 <vTaskSwitchContext>
	prvTaskExitError();
 80095d0:	f7ff ff22 	bl	8009418 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	e000ed00 	.word	0xe000ed00
 80095e4:	410fc271 	.word	0x410fc271
 80095e8:	410fc270 	.word	0x410fc270
 80095ec:	e000e400 	.word	0xe000e400
 80095f0:	24009d9c 	.word	0x24009d9c
 80095f4:	24009da0 	.word	0x24009da0
 80095f8:	e000ed20 	.word	0xe000ed20
 80095fc:	24000028 	.word	0x24000028
 8009600:	e000ef34 	.word	0xe000ef34

08009604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	607b      	str	r3, [r7, #4]
}
 800961c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800961e:	4b0f      	ldr	r3, [pc, #60]	; (800965c <vPortEnterCritical+0x58>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3301      	adds	r3, #1
 8009624:	4a0d      	ldr	r2, [pc, #52]	; (800965c <vPortEnterCritical+0x58>)
 8009626:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009628:	4b0c      	ldr	r3, [pc, #48]	; (800965c <vPortEnterCritical+0x58>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d10f      	bne.n	8009650 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009630:	4b0b      	ldr	r3, [pc, #44]	; (8009660 <vPortEnterCritical+0x5c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <vPortEnterCritical+0x4c>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	603b      	str	r3, [r7, #0]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <vPortEnterCritical+0x4a>
	}
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	24000028 	.word	0x24000028
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800966a:	4b12      	ldr	r3, [pc, #72]	; (80096b4 <vPortExitCritical+0x50>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10a      	bne.n	8009688 <vPortExitCritical+0x24>
	__asm volatile
 8009672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	607b      	str	r3, [r7, #4]
}
 8009684:	bf00      	nop
 8009686:	e7fe      	b.n	8009686 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009688:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <vPortExitCritical+0x50>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	3b01      	subs	r3, #1
 800968e:	4a09      	ldr	r2, [pc, #36]	; (80096b4 <vPortExitCritical+0x50>)
 8009690:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009692:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <vPortExitCritical+0x50>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d105      	bne.n	80096a6 <vPortExitCritical+0x42>
 800969a:	2300      	movs	r3, #0
 800969c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80096a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	24000028 	.word	0x24000028
	...

080096c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096c0:	f3ef 8009 	mrs	r0, PSP
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	4b15      	ldr	r3, [pc, #84]	; (8009720 <pxCurrentTCBConst>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	f01e 0f10 	tst.w	lr, #16
 80096d0:	bf08      	it	eq
 80096d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80096d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096da:	6010      	str	r0, [r2, #0]
 80096dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80096e4:	f380 8811 	msr	BASEPRI, r0
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f001 fc6a 	bl	800afc8 <vTaskSwitchContext>
 80096f4:	f04f 0000 	mov.w	r0, #0
 80096f8:	f380 8811 	msr	BASEPRI, r0
 80096fc:	bc09      	pop	{r0, r3}
 80096fe:	6819      	ldr	r1, [r3, #0]
 8009700:	6808      	ldr	r0, [r1, #0]
 8009702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009706:	f01e 0f10 	tst.w	lr, #16
 800970a:	bf08      	it	eq
 800970c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009710:	f380 8809 	msr	PSP, r0
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	f3af 8000 	nop.w

08009720 <pxCurrentTCBConst>:
 8009720:	24009da4 	.word	0x24009da4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop

08009728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	607b      	str	r3, [r7, #4]
}
 8009740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009742:	f001 fb87 	bl	800ae54 <xTaskIncrementTick>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800974c:	4b06      	ldr	r3, [pc, #24]	; (8009768 <xPortSysTickHandler+0x40>)
 800974e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	2300      	movs	r3, #0
 8009756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	f383 8811 	msr	BASEPRI, r3
}
 800975e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	e000ed04 	.word	0xe000ed04

0800976c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800976c:	b480      	push	{r7}
 800976e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009770:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <vPortSetupTimerInterrupt+0x34>)
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009776:	4b0b      	ldr	r3, [pc, #44]	; (80097a4 <vPortSetupTimerInterrupt+0x38>)
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800977c:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <vPortSetupTimerInterrupt+0x3c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a0a      	ldr	r2, [pc, #40]	; (80097ac <vPortSetupTimerInterrupt+0x40>)
 8009782:	fba2 2303 	umull	r2, r3, r2, r3
 8009786:	099b      	lsrs	r3, r3, #6
 8009788:	4a09      	ldr	r2, [pc, #36]	; (80097b0 <vPortSetupTimerInterrupt+0x44>)
 800978a:	3b01      	subs	r3, #1
 800978c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800978e:	4b04      	ldr	r3, [pc, #16]	; (80097a0 <vPortSetupTimerInterrupt+0x34>)
 8009790:	2207      	movs	r2, #7
 8009792:	601a      	str	r2, [r3, #0]
}
 8009794:	bf00      	nop
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	e000e010 	.word	0xe000e010
 80097a4:	e000e018 	.word	0xe000e018
 80097a8:	2400002c 	.word	0x2400002c
 80097ac:	10624dd3 	.word	0x10624dd3
 80097b0:	e000e014 	.word	0xe000e014

080097b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80097c4 <vPortEnableVFP+0x10>
 80097b8:	6801      	ldr	r1, [r0, #0]
 80097ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80097be:	6001      	str	r1, [r0, #0]
 80097c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097c2:	bf00      	nop
 80097c4:	e000ed88 	.word	0xe000ed88

080097c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097ce:	f3ef 8305 	mrs	r3, IPSR
 80097d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b0f      	cmp	r3, #15
 80097d8:	d914      	bls.n	8009804 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80097da:	4a17      	ldr	r2, [pc, #92]	; (8009838 <vPortValidateInterruptPriority+0x70>)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	4413      	add	r3, r2
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097e4:	4b15      	ldr	r3, [pc, #84]	; (800983c <vPortValidateInterruptPriority+0x74>)
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	7afa      	ldrb	r2, [r7, #11]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d20a      	bcs.n	8009804 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	607b      	str	r3, [r7, #4]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009804:	4b0e      	ldr	r3, [pc, #56]	; (8009840 <vPortValidateInterruptPriority+0x78>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800980c:	4b0d      	ldr	r3, [pc, #52]	; (8009844 <vPortValidateInterruptPriority+0x7c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	429a      	cmp	r2, r3
 8009812:	d90a      	bls.n	800982a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	603b      	str	r3, [r7, #0]
}
 8009826:	bf00      	nop
 8009828:	e7fe      	b.n	8009828 <vPortValidateInterruptPriority+0x60>
	}
 800982a:	bf00      	nop
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	e000e3f0 	.word	0xe000e3f0
 800983c:	24009d9c 	.word	0x24009d9c
 8009840:	e000ed0c 	.word	0xe000ed0c
 8009844:	24009da0 	.word	0x24009da0

08009848 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10a      	bne.n	8009872 <xQueueGenericReset+0x2a>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	60bb      	str	r3, [r7, #8]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009872:	f7ff fec7 	bl	8009604 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987e:	68f9      	ldr	r1, [r7, #12]
 8009880:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009882:	fb01 f303 	mul.w	r3, r1, r3
 8009886:	441a      	add	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a2:	3b01      	subs	r3, #1
 80098a4:	68f9      	ldr	r1, [r7, #12]
 80098a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098a8:	fb01 f303 	mul.w	r3, r1, r3
 80098ac:	441a      	add	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	22ff      	movs	r2, #255	; 0xff
 80098b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	22ff      	movs	r2, #255	; 0xff
 80098be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d114      	bne.n	80098f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d01a      	beq.n	8009906 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	3310      	adds	r3, #16
 80098d4:	4618      	mov	r0, r3
 80098d6:	f001 fc25 	bl	800b124 <xTaskRemoveFromEventList>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d012      	beq.n	8009906 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80098e0:	4b0c      	ldr	r3, [pc, #48]	; (8009914 <xQueueGenericReset+0xcc>)
 80098e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	e009      	b.n	8009906 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3310      	adds	r3, #16
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7ff fca6 	bl	8009248 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3324      	adds	r3, #36	; 0x24
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff fca1 	bl	8009248 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009906:	f7ff fead 	bl	8009664 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800990a:	2301      	movs	r3, #1
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	e000ed04 	.word	0xe000ed04

08009918 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009918:	b580      	push	{r7, lr}
 800991a:	b08e      	sub	sp, #56	; 0x38
 800991c:	af02      	add	r7, sp, #8
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10a      	bne.n	800995e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	627b      	str	r3, [r7, #36]	; 0x24
}
 800995a:	bf00      	nop
 800995c:	e7fe      	b.n	800995c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <xQueueGenericCreateStatic+0x52>
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <xQueueGenericCreateStatic+0x56>
 800996a:	2301      	movs	r3, #1
 800996c:	e000      	b.n	8009970 <xQueueGenericCreateStatic+0x58>
 800996e:	2300      	movs	r3, #0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10a      	bne.n	800998a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	623b      	str	r3, [r7, #32]
}
 8009986:	bf00      	nop
 8009988:	e7fe      	b.n	8009988 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d102      	bne.n	8009996 <xQueueGenericCreateStatic+0x7e>
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <xQueueGenericCreateStatic+0x82>
 8009996:	2301      	movs	r3, #1
 8009998:	e000      	b.n	800999c <xQueueGenericCreateStatic+0x84>
 800999a:	2300      	movs	r3, #0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10a      	bne.n	80099b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	61fb      	str	r3, [r7, #28]
}
 80099b2:	bf00      	nop
 80099b4:	e7fe      	b.n	80099b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099b6:	2350      	movs	r3, #80	; 0x50
 80099b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	2b50      	cmp	r3, #80	; 0x50
 80099be:	d00a      	beq.n	80099d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	61bb      	str	r3, [r7, #24]
}
 80099d2:	bf00      	nop
 80099d4:	e7fe      	b.n	80099d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80099d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80099dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00d      	beq.n	80099fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80099e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80099ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	4613      	mov	r3, r2
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	68b9      	ldr	r1, [r7, #8]
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 f83f 	bl	8009a7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80099fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3730      	adds	r7, #48	; 0x30
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08a      	sub	sp, #40	; 0x28
 8009a0c:	af02      	add	r7, sp, #8
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	4613      	mov	r3, r2
 8009a14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	613b      	str	r3, [r7, #16]
}
 8009a2e:	bf00      	nop
 8009a30:	e7fe      	b.n	8009a30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	fb02 f303 	mul.w	r3, r2, r3
 8009a3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	3350      	adds	r3, #80	; 0x50
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff fa17 	bl	8008e74 <pvPortMalloc>
 8009a46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d011      	beq.n	8009a72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	3350      	adds	r3, #80	; 0x50
 8009a56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a60:	79fa      	ldrb	r2, [r7, #7]
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	4613      	mov	r3, r2
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	68b9      	ldr	r1, [r7, #8]
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f000 f805 	bl	8009a7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a72:	69bb      	ldr	r3, [r7, #24]
	}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3720      	adds	r7, #32
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
 8009a88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d103      	bne.n	8009a98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	69ba      	ldr	r2, [r7, #24]
 8009a94:	601a      	str	r2, [r3, #0]
 8009a96:	e002      	b.n	8009a9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009aaa:	2101      	movs	r1, #1
 8009aac:	69b8      	ldr	r0, [r7, #24]
 8009aae:	f7ff fecb 	bl	8009848 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	78fa      	ldrb	r2, [r7, #3]
 8009ab6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009aba:	bf00      	nop
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b08a      	sub	sp, #40	; 0x28
 8009ac6:	af02      	add	r7, sp, #8
 8009ac8:	60f8      	str	r0, [r7, #12]
 8009aca:	60b9      	str	r1, [r7, #8]
 8009acc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10a      	bne.n	8009aea <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	61bb      	str	r3, [r7, #24]
}
 8009ae6:	bf00      	nop
 8009ae8:	e7fe      	b.n	8009ae8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d90a      	bls.n	8009b08 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	617b      	str	r3, [r7, #20]
}
 8009b04:	bf00      	nop
 8009b06:	e7fe      	b.n	8009b06 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b08:	2302      	movs	r3, #2
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2100      	movs	r1, #0
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f7ff ff00 	bl	8009918 <xQueueGenericCreateStatic>
 8009b18:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009b26:	69fb      	ldr	r3, [r7, #28]
	}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3720      	adds	r7, #32
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10a      	bne.n	8009b56 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	613b      	str	r3, [r7, #16]
}
 8009b52:	bf00      	nop
 8009b54:	e7fe      	b.n	8009b54 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d90a      	bls.n	8009b74 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	60fb      	str	r3, [r7, #12]
}
 8009b70:	bf00      	nop
 8009b72:	e7fe      	b.n	8009b72 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b74:	2202      	movs	r2, #2
 8009b76:	2100      	movs	r1, #0
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff ff45 	bl	8009a08 <xQueueGenericCreate>
 8009b7e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009b8c:	697b      	ldr	r3, [r7, #20]
	}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08e      	sub	sp, #56	; 0x38
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10a      	bne.n	8009bca <xQueueGenericSend+0x32>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d103      	bne.n	8009bd8 <xQueueGenericSend+0x40>
 8009bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <xQueueGenericSend+0x44>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e000      	b.n	8009bde <xQueueGenericSend+0x46>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10a      	bne.n	8009bf8 <xQueueGenericSend+0x60>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bf4:	bf00      	nop
 8009bf6:	e7fe      	b.n	8009bf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d103      	bne.n	8009c06 <xQueueGenericSend+0x6e>
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d101      	bne.n	8009c0a <xQueueGenericSend+0x72>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e000      	b.n	8009c0c <xQueueGenericSend+0x74>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10a      	bne.n	8009c26 <xQueueGenericSend+0x8e>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	623b      	str	r3, [r7, #32]
}
 8009c22:	bf00      	nop
 8009c24:	e7fe      	b.n	8009c24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c26:	f001 fc3b 	bl	800b4a0 <xTaskGetSchedulerState>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d102      	bne.n	8009c36 <xQueueGenericSend+0x9e>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d101      	bne.n	8009c3a <xQueueGenericSend+0xa2>
 8009c36:	2301      	movs	r3, #1
 8009c38:	e000      	b.n	8009c3c <xQueueGenericSend+0xa4>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10a      	bne.n	8009c56 <xQueueGenericSend+0xbe>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	61fb      	str	r3, [r7, #28]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c56:	f7ff fcd5 	bl	8009604 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d302      	bcc.n	8009c6c <xQueueGenericSend+0xd4>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d129      	bne.n	8009cc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c72:	f000 fc5e 	bl	800a532 <prvCopyDataToQueue>
 8009c76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d010      	beq.n	8009ca2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c82:	3324      	adds	r3, #36	; 0x24
 8009c84:	4618      	mov	r0, r3
 8009c86:	f001 fa4d 	bl	800b124 <xTaskRemoveFromEventList>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d013      	beq.n	8009cb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c90:	4b3f      	ldr	r3, [pc, #252]	; (8009d90 <xQueueGenericSend+0x1f8>)
 8009c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c96:	601a      	str	r2, [r3, #0]
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	e00a      	b.n	8009cb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d007      	beq.n	8009cb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ca8:	4b39      	ldr	r3, [pc, #228]	; (8009d90 <xQueueGenericSend+0x1f8>)
 8009caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009cb8:	f7ff fcd4 	bl	8009664 <vPortExitCritical>
				return pdPASS;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e063      	b.n	8009d88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d103      	bne.n	8009cce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009cc6:	f7ff fccd 	bl	8009664 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e05c      	b.n	8009d88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d106      	bne.n	8009ce2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cd4:	f107 0314 	add.w	r3, r7, #20
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f001 fa87 	bl	800b1ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ce2:	f7ff fcbf 	bl	8009664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ce6:	f000 fff9 	bl	800acdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cea:	f7ff fc8b 	bl	8009604 <vPortEnterCritical>
 8009cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cf4:	b25b      	sxtb	r3, r3
 8009cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfa:	d103      	bne.n	8009d04 <xQueueGenericSend+0x16c>
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d0a:	b25b      	sxtb	r3, r3
 8009d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d10:	d103      	bne.n	8009d1a <xQueueGenericSend+0x182>
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d1a:	f7ff fca3 	bl	8009664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d1e:	1d3a      	adds	r2, r7, #4
 8009d20:	f107 0314 	add.w	r3, r7, #20
 8009d24:	4611      	mov	r1, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f001 fa76 	bl	800b218 <xTaskCheckForTimeOut>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d124      	bne.n	8009d7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d34:	f000 fcf5 	bl	800a722 <prvIsQueueFull>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d018      	beq.n	8009d70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	3310      	adds	r3, #16
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	4611      	mov	r1, r2
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 f99c 	bl	800b084 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d4e:	f000 fc80 	bl	800a652 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d52:	f000 ffd1 	bl	800acf8 <xTaskResumeAll>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f47f af7c 	bne.w	8009c56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009d5e:	4b0c      	ldr	r3, [pc, #48]	; (8009d90 <xQueueGenericSend+0x1f8>)
 8009d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	e772      	b.n	8009c56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d72:	f000 fc6e 	bl	800a652 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d76:	f000 ffbf 	bl	800acf8 <xTaskResumeAll>
 8009d7a:	e76c      	b.n	8009c56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d7e:	f000 fc68 	bl	800a652 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d82:	f000 ffb9 	bl	800acf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009d86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3738      	adds	r7, #56	; 0x38
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	e000ed04 	.word	0xe000ed04

08009d94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b090      	sub	sp, #64	; 0x40
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10a      	bne.n	8009dc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dbe:	bf00      	nop
 8009dc0:	e7fe      	b.n	8009dc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d103      	bne.n	8009dd0 <xQueueGenericSendFromISR+0x3c>
 8009dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <xQueueGenericSendFromISR+0x40>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e000      	b.n	8009dd6 <xQueueGenericSendFromISR+0x42>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10a      	bne.n	8009df0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009dec:	bf00      	nop
 8009dee:	e7fe      	b.n	8009dee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d103      	bne.n	8009dfe <xQueueGenericSendFromISR+0x6a>
 8009df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d101      	bne.n	8009e02 <xQueueGenericSendFromISR+0x6e>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e000      	b.n	8009e04 <xQueueGenericSendFromISR+0x70>
 8009e02:	2300      	movs	r3, #0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	623b      	str	r3, [r7, #32]
}
 8009e1a:	bf00      	nop
 8009e1c:	e7fe      	b.n	8009e1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e1e:	f7ff fcd3 	bl	80097c8 <vPortValidateInterruptPriority>
	__asm volatile
 8009e22:	f3ef 8211 	mrs	r2, BASEPRI
 8009e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2a:	f383 8811 	msr	BASEPRI, r3
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	61fa      	str	r2, [r7, #28]
 8009e38:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009e3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d302      	bcc.n	8009e50 <xQueueGenericSendFromISR+0xbc>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d12f      	bne.n	8009eb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e60:	683a      	ldr	r2, [r7, #0]
 8009e62:	68b9      	ldr	r1, [r7, #8]
 8009e64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e66:	f000 fb64 	bl	800a532 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e72:	d112      	bne.n	8009e9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d016      	beq.n	8009eaa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7e:	3324      	adds	r3, #36	; 0x24
 8009e80:	4618      	mov	r0, r3
 8009e82:	f001 f94f 	bl	800b124 <xTaskRemoveFromEventList>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00e      	beq.n	8009eaa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00b      	beq.n	8009eaa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	e007      	b.n	8009eaa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	b25a      	sxtb	r2, r3
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009eae:	e001      	b.n	8009eb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb6:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f383 8811 	msr	BASEPRI, r3
}
 8009ebe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3740      	adds	r7, #64	; 0x40
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b08e      	sub	sp, #56	; 0x38
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10a      	bne.n	8009ef4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	623b      	str	r3, [r7, #32]
}
 8009ef0:	bf00      	nop
 8009ef2:	e7fe      	b.n	8009ef2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00a      	beq.n	8009f12 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	61fb      	str	r3, [r7, #28]
}
 8009f0e:	bf00      	nop
 8009f10:	e7fe      	b.n	8009f10 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d103      	bne.n	8009f22 <xQueueGiveFromISR+0x58>
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <xQueueGiveFromISR+0x5c>
 8009f22:	2301      	movs	r3, #1
 8009f24:	e000      	b.n	8009f28 <xQueueGiveFromISR+0x5e>
 8009f26:	2300      	movs	r3, #0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	61bb      	str	r3, [r7, #24]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f42:	f7ff fc41 	bl	80097c8 <vPortValidateInterruptPriority>
	__asm volatile
 8009f46:	f3ef 8211 	mrs	r2, BASEPRI
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	617a      	str	r2, [r7, #20]
 8009f5c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009f5e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d22b      	bcs.n	8009fca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f82:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8c:	d112      	bne.n	8009fb4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d016      	beq.n	8009fc4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	3324      	adds	r3, #36	; 0x24
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f001 f8c2 	bl	800b124 <xTaskRemoveFromEventList>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00e      	beq.n	8009fc4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	e007      	b.n	8009fc4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fb8:	3301      	adds	r3, #1
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	b25a      	sxtb	r2, r3
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8009fc8:	e001      	b.n	8009fce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8009fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f383 8811 	msr	BASEPRI, r3
}
 8009fd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3738      	adds	r7, #56	; 0x38
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08c      	sub	sp, #48	; 0x30
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10a      	bne.n	800a014 <xQueueReceive+0x30>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	623b      	str	r3, [r7, #32]
}
 800a010:	bf00      	nop
 800a012:	e7fe      	b.n	800a012 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d103      	bne.n	800a022 <xQueueReceive+0x3e>
 800a01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d101      	bne.n	800a026 <xQueueReceive+0x42>
 800a022:	2301      	movs	r3, #1
 800a024:	e000      	b.n	800a028 <xQueueReceive+0x44>
 800a026:	2300      	movs	r3, #0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10a      	bne.n	800a042 <xQueueReceive+0x5e>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	61fb      	str	r3, [r7, #28]
}
 800a03e:	bf00      	nop
 800a040:	e7fe      	b.n	800a040 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a042:	f001 fa2d 	bl	800b4a0 <xTaskGetSchedulerState>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d102      	bne.n	800a052 <xQueueReceive+0x6e>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <xQueueReceive+0x72>
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <xQueueReceive+0x74>
 800a056:	2300      	movs	r3, #0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10a      	bne.n	800a072 <xQueueReceive+0x8e>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	61bb      	str	r3, [r7, #24]
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a072:	f7ff fac7 	bl	8009604 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d01f      	beq.n	800a0c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a082:	68b9      	ldr	r1, [r7, #8]
 800a084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a086:	f000 fabe 	bl	800a606 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	1e5a      	subs	r2, r3, #1
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00f      	beq.n	800a0ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	3310      	adds	r3, #16
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f001 f840 	bl	800b124 <xTaskRemoveFromEventList>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d007      	beq.n	800a0ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0aa:	4b3d      	ldr	r3, [pc, #244]	; (800a1a0 <xQueueReceive+0x1bc>)
 800a0ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b0:	601a      	str	r2, [r3, #0]
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0ba:	f7ff fad3 	bl	8009664 <vPortExitCritical>
				return pdPASS;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e069      	b.n	800a196 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d103      	bne.n	800a0d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0c8:	f7ff facc 	bl	8009664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	e062      	b.n	800a196 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d106      	bne.n	800a0e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0d6:	f107 0310 	add.w	r3, r7, #16
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f001 f886 	bl	800b1ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0e4:	f7ff fabe 	bl	8009664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0e8:	f000 fdf8 	bl	800acdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0ec:	f7ff fa8a 	bl	8009604 <vPortEnterCritical>
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0f6:	b25b      	sxtb	r3, r3
 800a0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fc:	d103      	bne.n	800a106 <xQueueReceive+0x122>
 800a0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a100:	2200      	movs	r2, #0
 800a102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a10c:	b25b      	sxtb	r3, r3
 800a10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a112:	d103      	bne.n	800a11c <xQueueReceive+0x138>
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a11c:	f7ff faa2 	bl	8009664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a120:	1d3a      	adds	r2, r7, #4
 800a122:	f107 0310 	add.w	r3, r7, #16
 800a126:	4611      	mov	r1, r2
 800a128:	4618      	mov	r0, r3
 800a12a:	f001 f875 	bl	800b218 <xTaskCheckForTimeOut>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d123      	bne.n	800a17c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a136:	f000 fade 	bl	800a6f6 <prvIsQueueEmpty>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d017      	beq.n	800a170 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	3324      	adds	r3, #36	; 0x24
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	4611      	mov	r1, r2
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 ff9b 	bl	800b084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a150:	f000 fa7f 	bl	800a652 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a154:	f000 fdd0 	bl	800acf8 <xTaskResumeAll>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d189      	bne.n	800a072 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a15e:	4b10      	ldr	r3, [pc, #64]	; (800a1a0 <xQueueReceive+0x1bc>)
 800a160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	e780      	b.n	800a072 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a172:	f000 fa6e 	bl	800a652 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a176:	f000 fdbf 	bl	800acf8 <xTaskResumeAll>
 800a17a:	e77a      	b.n	800a072 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a17c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a17e:	f000 fa68 	bl	800a652 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a182:	f000 fdb9 	bl	800acf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a188:	f000 fab5 	bl	800a6f6 <prvIsQueueEmpty>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f43f af6f 	beq.w	800a072 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a194:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a196:	4618      	mov	r0, r3
 800a198:	3730      	adds	r7, #48	; 0x30
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	e000ed04 	.word	0xe000ed04

0800a1a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b08e      	sub	sp, #56	; 0x38
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10a      	bne.n	800a1d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	623b      	str	r3, [r7, #32]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00a      	beq.n	800a1f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	61fb      	str	r3, [r7, #28]
}
 800a1f0:	bf00      	nop
 800a1f2:	e7fe      	b.n	800a1f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1f4:	f001 f954 	bl	800b4a0 <xTaskGetSchedulerState>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d102      	bne.n	800a204 <xQueueSemaphoreTake+0x60>
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <xQueueSemaphoreTake+0x64>
 800a204:	2301      	movs	r3, #1
 800a206:	e000      	b.n	800a20a <xQueueSemaphoreTake+0x66>
 800a208:	2300      	movs	r3, #0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	61bb      	str	r3, [r7, #24]
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a224:	f7ff f9ee 	bl	8009604 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a230:	2b00      	cmp	r3, #0
 800a232:	d024      	beq.n	800a27e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a236:	1e5a      	subs	r2, r3, #1
 800a238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d104      	bne.n	800a24e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a244:	f001 faa2 	bl	800b78c <pvTaskIncrementMutexHeldCount>
 800a248:	4602      	mov	r2, r0
 800a24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00f      	beq.n	800a276 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a258:	3310      	adds	r3, #16
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 ff62 	bl	800b124 <xTaskRemoveFromEventList>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d007      	beq.n	800a276 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a266:	4b54      	ldr	r3, [pc, #336]	; (800a3b8 <xQueueSemaphoreTake+0x214>)
 800a268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a276:	f7ff f9f5 	bl	8009664 <vPortExitCritical>
				return pdPASS;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e097      	b.n	800a3ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d111      	bne.n	800a2a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	617b      	str	r3, [r7, #20]
}
 800a29c:	bf00      	nop
 800a29e:	e7fe      	b.n	800a29e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a2a0:	f7ff f9e0 	bl	8009664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	e082      	b.n	800a3ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d106      	bne.n	800a2bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2ae:	f107 030c 	add.w	r3, r7, #12
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 ff9a 	bl	800b1ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2bc:	f7ff f9d2 	bl	8009664 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2c0:	f000 fd0c 	bl	800acdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2c4:	f7ff f99e 	bl	8009604 <vPortEnterCritical>
 800a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2ce:	b25b      	sxtb	r3, r3
 800a2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d4:	d103      	bne.n	800a2de <xQueueSemaphoreTake+0x13a>
 800a2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2e4:	b25b      	sxtb	r3, r3
 800a2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ea:	d103      	bne.n	800a2f4 <xQueueSemaphoreTake+0x150>
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2f4:	f7ff f9b6 	bl	8009664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2f8:	463a      	mov	r2, r7
 800a2fa:	f107 030c 	add.w	r3, r7, #12
 800a2fe:	4611      	mov	r1, r2
 800a300:	4618      	mov	r0, r3
 800a302:	f000 ff89 	bl	800b218 <xTaskCheckForTimeOut>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d132      	bne.n	800a372 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a30c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a30e:	f000 f9f2 	bl	800a6f6 <prvIsQueueEmpty>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d026      	beq.n	800a366 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d109      	bne.n	800a334 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a320:	f7ff f970 	bl	8009604 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	4618      	mov	r0, r3
 800a32a:	f001 f8d7 	bl	800b4dc <xTaskPriorityInherit>
 800a32e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a330:	f7ff f998 	bl	8009664 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a336:	3324      	adds	r3, #36	; 0x24
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	4611      	mov	r1, r2
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fea1 	bl	800b084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a344:	f000 f985 	bl	800a652 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a348:	f000 fcd6 	bl	800acf8 <xTaskResumeAll>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f47f af68 	bne.w	800a224 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a354:	4b18      	ldr	r3, [pc, #96]	; (800a3b8 <xQueueSemaphoreTake+0x214>)
 800a356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	e75e      	b.n	800a224 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a368:	f000 f973 	bl	800a652 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a36c:	f000 fcc4 	bl	800acf8 <xTaskResumeAll>
 800a370:	e758      	b.n	800a224 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a374:	f000 f96d 	bl	800a652 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a378:	f000 fcbe 	bl	800acf8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a37c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a37e:	f000 f9ba 	bl	800a6f6 <prvIsQueueEmpty>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	f43f af4d 	beq.w	800a224 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00d      	beq.n	800a3ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a390:	f7ff f938 	bl	8009604 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a396:	f000 f8b4 	bl	800a502 <prvGetDisinheritPriorityAfterTimeout>
 800a39a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f001 f970 	bl	800b688 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a3a8:	f7ff f95c 	bl	8009664 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3738      	adds	r7, #56	; 0x38
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	e000ed04 	.word	0xe000ed04

0800a3bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b08e      	sub	sp, #56	; 0x38
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10a      	bne.n	800a3e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	623b      	str	r3, [r7, #32]
}
 800a3e4:	bf00      	nop
 800a3e6:	e7fe      	b.n	800a3e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d103      	bne.n	800a3f6 <xQueueReceiveFromISR+0x3a>
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <xQueueReceiveFromISR+0x3e>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e000      	b.n	800a3fc <xQueueReceiveFromISR+0x40>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10a      	bne.n	800a416 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	61fb      	str	r3, [r7, #28]
}
 800a412:	bf00      	nop
 800a414:	e7fe      	b.n	800a414 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a416:	f7ff f9d7 	bl	80097c8 <vPortValidateInterruptPriority>
	__asm volatile
 800a41a:	f3ef 8211 	mrs	r2, BASEPRI
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	61ba      	str	r2, [r7, #24]
 800a430:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a432:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a434:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d02f      	beq.n	800a4a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a44c:	68b9      	ldr	r1, [r7, #8]
 800a44e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a450:	f000 f8d9 	bl	800a606 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	1e5a      	subs	r2, r3, #1
 800a458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a45c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a464:	d112      	bne.n	800a48c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d016      	beq.n	800a49c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	3310      	adds	r3, #16
 800a472:	4618      	mov	r0, r3
 800a474:	f000 fe56 	bl	800b124 <xTaskRemoveFromEventList>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00e      	beq.n	800a49c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d00b      	beq.n	800a49c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	e007      	b.n	800a49c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a490:	3301      	adds	r3, #1
 800a492:	b2db      	uxtb	r3, r3
 800a494:	b25a      	sxtb	r2, r3
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a49c:	2301      	movs	r3, #1
 800a49e:	637b      	str	r3, [r7, #52]	; 0x34
 800a4a0:	e001      	b.n	800a4a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f383 8811 	msr	BASEPRI, r3
}
 800a4b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3738      	adds	r7, #56	; 0x38
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <vQueueDelete+0x28>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	60bb      	str	r3, [r7, #8]
}
 800a4e0:	bf00      	nop
 800a4e2:	e7fe      	b.n	800a4e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 f95f 	bl	800a7a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f7fe fd89 	bl	800900c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a4fa:	bf00      	nop
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a502:	b480      	push	{r7}
 800a504:	b085      	sub	sp, #20
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d006      	beq.n	800a520 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a51c:	60fb      	str	r3, [r7, #12]
 800a51e:	e001      	b.n	800a524 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a520:	2300      	movs	r3, #0
 800a522:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a524:	68fb      	ldr	r3, [r7, #12]
	}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b086      	sub	sp, #24
 800a536:	af00      	add	r7, sp, #0
 800a538:	60f8      	str	r0, [r7, #12]
 800a53a:	60b9      	str	r1, [r7, #8]
 800a53c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a53e:	2300      	movs	r3, #0
 800a540:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a546:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10d      	bne.n	800a56c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d14d      	bne.n	800a5f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f001 f825 	bl	800b5ac <xTaskPriorityDisinherit>
 800a562:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	609a      	str	r2, [r3, #8]
 800a56a:	e043      	b.n	800a5f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d119      	bne.n	800a5a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6858      	ldr	r0, [r3, #4]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57a:	461a      	mov	r2, r3
 800a57c:	68b9      	ldr	r1, [r7, #8]
 800a57e:	f01f fc35 	bl	8029dec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58a:	441a      	add	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d32b      	bcc.n	800a5f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	605a      	str	r2, [r3, #4]
 800a5a4:	e026      	b.n	800a5f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	68d8      	ldr	r0, [r3, #12]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	68b9      	ldr	r1, [r7, #8]
 800a5b2:	f01f fc1b 	bl	8029dec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	68da      	ldr	r2, [r3, #12]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5be:	425b      	negs	r3, r3
 800a5c0:	441a      	add	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	68da      	ldr	r2, [r3, #12]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d207      	bcs.n	800a5e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	689a      	ldr	r2, [r3, #8]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5da:	425b      	negs	r3, r3
 800a5dc:	441a      	add	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d105      	bne.n	800a5f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d002      	beq.n	800a5f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a5fc:	697b      	ldr	r3, [r7, #20]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3718      	adds	r7, #24
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a614:	2b00      	cmp	r3, #0
 800a616:	d018      	beq.n	800a64a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	68da      	ldr	r2, [r3, #12]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a620:	441a      	add	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68da      	ldr	r2, [r3, #12]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d303      	bcc.n	800a63a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	68d9      	ldr	r1, [r3, #12]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a642:	461a      	mov	r2, r3
 800a644:	6838      	ldr	r0, [r7, #0]
 800a646:	f01f fbd1 	bl	8029dec <memcpy>
	}
}
 800a64a:	bf00      	nop
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b084      	sub	sp, #16
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a65a:	f7fe ffd3 	bl	8009604 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a664:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a666:	e011      	b.n	800a68c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d012      	beq.n	800a696 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3324      	adds	r3, #36	; 0x24
 800a674:	4618      	mov	r0, r3
 800a676:	f000 fd55 	bl	800b124 <xTaskRemoveFromEventList>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a680:	f000 fe2c 	bl	800b2dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	3b01      	subs	r3, #1
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a68c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a690:	2b00      	cmp	r3, #0
 800a692:	dce9      	bgt.n	800a668 <prvUnlockQueue+0x16>
 800a694:	e000      	b.n	800a698 <prvUnlockQueue+0x46>
					break;
 800a696:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	22ff      	movs	r2, #255	; 0xff
 800a69c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6a0:	f7fe ffe0 	bl	8009664 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6a4:	f7fe ffae 	bl	8009604 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6b0:	e011      	b.n	800a6d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d012      	beq.n	800a6e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	3310      	adds	r3, #16
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fd30 	bl	800b124 <xTaskRemoveFromEventList>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6ca:	f000 fe07 	bl	800b2dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	dce9      	bgt.n	800a6b2 <prvUnlockQueue+0x60>
 800a6de:	e000      	b.n	800a6e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	22ff      	movs	r2, #255	; 0xff
 800a6e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a6ea:	f7fe ffbb 	bl	8009664 <vPortExitCritical>
}
 800a6ee:	bf00      	nop
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b084      	sub	sp, #16
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6fe:	f7fe ff81 	bl	8009604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a706:	2b00      	cmp	r3, #0
 800a708:	d102      	bne.n	800a710 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a70a:	2301      	movs	r3, #1
 800a70c:	60fb      	str	r3, [r7, #12]
 800a70e:	e001      	b.n	800a714 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a710:	2300      	movs	r3, #0
 800a712:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a714:	f7fe ffa6 	bl	8009664 <vPortExitCritical>

	return xReturn;
 800a718:	68fb      	ldr	r3, [r7, #12]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b084      	sub	sp, #16
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a72a:	f7fe ff6b 	bl	8009604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a736:	429a      	cmp	r2, r3
 800a738:	d102      	bne.n	800a740 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a73a:	2301      	movs	r3, #1
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	e001      	b.n	800a744 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a740:	2300      	movs	r3, #0
 800a742:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a744:	f7fe ff8e 	bl	8009664 <vPortExitCritical>

	return xReturn;
 800a748:	68fb      	ldr	r3, [r7, #12]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a75e:	2300      	movs	r3, #0
 800a760:	60fb      	str	r3, [r7, #12]
 800a762:	e014      	b.n	800a78e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a764:	4a0f      	ldr	r2, [pc, #60]	; (800a7a4 <vQueueAddToRegistry+0x50>)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10b      	bne.n	800a788 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a770:	490c      	ldr	r1, [pc, #48]	; (800a7a4 <vQueueAddToRegistry+0x50>)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a77a:	4a0a      	ldr	r2, [pc, #40]	; (800a7a4 <vQueueAddToRegistry+0x50>)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	00db      	lsls	r3, r3, #3
 800a780:	4413      	add	r3, r2
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a786:	e006      	b.n	800a796 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	3301      	adds	r3, #1
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b07      	cmp	r3, #7
 800a792:	d9e7      	bls.n	800a764 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a794:	bf00      	nop
 800a796:	bf00      	nop
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	2400b5c4 	.word	0x2400b5c4

0800a7a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	e016      	b.n	800a7e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a7b6:	4a10      	ldr	r2, [pc, #64]	; (800a7f8 <vQueueUnregisterQueue+0x50>)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	00db      	lsls	r3, r3, #3
 800a7bc:	4413      	add	r3, r2
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d10b      	bne.n	800a7de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a7c6:	4a0c      	ldr	r2, [pc, #48]	; (800a7f8 <vQueueUnregisterQueue+0x50>)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a7d0:	4a09      	ldr	r2, [pc, #36]	; (800a7f8 <vQueueUnregisterQueue+0x50>)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	4413      	add	r3, r2
 800a7d8:	2200      	movs	r2, #0
 800a7da:	605a      	str	r2, [r3, #4]
				break;
 800a7dc:	e006      	b.n	800a7ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	60fb      	str	r3, [r7, #12]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b07      	cmp	r3, #7
 800a7e8:	d9e5      	bls.n	800a7b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a7ea:	bf00      	nop
 800a7ec:	bf00      	nop
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	2400b5c4 	.word	0x2400b5c4

0800a7fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a80c:	f7fe fefa 	bl	8009604 <vPortEnterCritical>
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a816:	b25b      	sxtb	r3, r3
 800a818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81c:	d103      	bne.n	800a826 <vQueueWaitForMessageRestricted+0x2a>
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a82c:	b25b      	sxtb	r3, r3
 800a82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a832:	d103      	bne.n	800a83c <vQueueWaitForMessageRestricted+0x40>
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a83c:	f7fe ff12 	bl	8009664 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a844:	2b00      	cmp	r3, #0
 800a846:	d106      	bne.n	800a856 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	3324      	adds	r3, #36	; 0x24
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	68b9      	ldr	r1, [r7, #8]
 800a850:	4618      	mov	r0, r3
 800a852:	f000 fc3b 	bl	800b0cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a856:	6978      	ldr	r0, [r7, #20]
 800a858:	f7ff fefb 	bl	800a652 <prvUnlockQueue>
	}
 800a85c:	bf00      	nop
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08e      	sub	sp, #56	; 0x38
 800a868:	af04      	add	r7, sp, #16
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
 800a870:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10a      	bne.n	800a88e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	623b      	str	r3, [r7, #32]
}
 800a88a:	bf00      	nop
 800a88c:	e7fe      	b.n	800a88c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10a      	bne.n	800a8aa <xTaskCreateStatic+0x46>
	__asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	61fb      	str	r3, [r7, #28]
}
 800a8a6:	bf00      	nop
 800a8a8:	e7fe      	b.n	800a8a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8aa:	235c      	movs	r3, #92	; 0x5c
 800a8ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	2b5c      	cmp	r3, #92	; 0x5c
 800a8b2:	d00a      	beq.n	800a8ca <xTaskCreateStatic+0x66>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	61bb      	str	r3, [r7, #24]
}
 800a8c6:	bf00      	nop
 800a8c8:	e7fe      	b.n	800a8c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a8ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d01e      	beq.n	800a910 <xTaskCreateStatic+0xac>
 800a8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d01b      	beq.n	800a910 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	9303      	str	r3, [sp, #12]
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f0:	9302      	str	r3, [sp, #8]
 800a8f2:	f107 0314 	add.w	r3, r7, #20
 800a8f6:	9301      	str	r3, [sp, #4]
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	68b9      	ldr	r1, [r7, #8]
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 f850 	bl	800a9a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a90a:	f000 f8dd 	bl	800aac8 <prvAddNewTaskToReadyList>
 800a90e:	e001      	b.n	800a914 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a910:	2300      	movs	r3, #0
 800a912:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a914:	697b      	ldr	r3, [r7, #20]
	}
 800a916:	4618      	mov	r0, r3
 800a918:	3728      	adds	r7, #40	; 0x28
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b08c      	sub	sp, #48	; 0x30
 800a922:	af04      	add	r7, sp, #16
 800a924:	60f8      	str	r0, [r7, #12]
 800a926:	60b9      	str	r1, [r7, #8]
 800a928:	603b      	str	r3, [r7, #0]
 800a92a:	4613      	mov	r3, r2
 800a92c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a92e:	88fb      	ldrh	r3, [r7, #6]
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe fa9e 	bl	8008e74 <pvPortMalloc>
 800a938:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00e      	beq.n	800a95e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a940:	205c      	movs	r0, #92	; 0x5c
 800a942:	f7fe fa97 	bl	8008e74 <pvPortMalloc>
 800a946:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	631a      	str	r2, [r3, #48]	; 0x30
 800a954:	e005      	b.n	800a962 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a956:	6978      	ldr	r0, [r7, #20]
 800a958:	f7fe fb58 	bl	800900c <vPortFree>
 800a95c:	e001      	b.n	800a962 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a95e:	2300      	movs	r3, #0
 800a960:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d017      	beq.n	800a998 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a970:	88fa      	ldrh	r2, [r7, #6]
 800a972:	2300      	movs	r3, #0
 800a974:	9303      	str	r3, [sp, #12]
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	9302      	str	r3, [sp, #8]
 800a97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	68b9      	ldr	r1, [r7, #8]
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f000 f80e 	bl	800a9a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a98c:	69f8      	ldr	r0, [r7, #28]
 800a98e:	f000 f89b 	bl	800aac8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a992:	2301      	movs	r3, #1
 800a994:	61bb      	str	r3, [r7, #24]
 800a996:	e002      	b.n	800a99e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a998:	f04f 33ff 	mov.w	r3, #4294967295
 800a99c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a99e:	69bb      	ldr	r3, [r7, #24]
	}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3720      	adds	r7, #32
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	461a      	mov	r2, r3
 800a9c0:	21a5      	movs	r1, #165	; 0xa5
 800a9c2:	f01f fa21 	bl	8029e08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9ca:	6879      	ldr	r1, [r7, #4]
 800a9cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a9d0:	440b      	add	r3, r1
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	f023 0307 	bic.w	r3, r3, #7
 800a9de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	f003 0307 	and.w	r3, r3, #7
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	617b      	str	r3, [r7, #20]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d01f      	beq.n	800aa46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa06:	2300      	movs	r3, #0
 800aa08:	61fb      	str	r3, [r7, #28]
 800aa0a:	e012      	b.n	800aa32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	4413      	add	r3, r2
 800aa12:	7819      	ldrb	r1, [r3, #0]
 800aa14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	4413      	add	r3, r2
 800aa1a:	3334      	adds	r3, #52	; 0x34
 800aa1c:	460a      	mov	r2, r1
 800aa1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	4413      	add	r3, r2
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d006      	beq.n	800aa3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	61fb      	str	r3, [r7, #28]
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	2b0f      	cmp	r3, #15
 800aa36:	d9e9      	bls.n	800aa0c <prvInitialiseNewTask+0x64>
 800aa38:	e000      	b.n	800aa3c <prvInitialiseNewTask+0x94>
			{
				break;
 800aa3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa44:	e003      	b.n	800aa4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa50:	2b37      	cmp	r3, #55	; 0x37
 800aa52:	d901      	bls.n	800aa58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa54:	2337      	movs	r3, #55	; 0x37
 800aa56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa66:	2200      	movs	r2, #0
 800aa68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fc0a 	bl	8009288 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa76:	3318      	adds	r3, #24
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fe fc05 	bl	8009288 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	2200      	movs	r2, #0
 800aa98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	68f9      	ldr	r1, [r7, #12]
 800aaa6:	69b8      	ldr	r0, [r7, #24]
 800aaa8:	f7fe fc82 	bl	80093b0 <pxPortInitialiseStack>
 800aaac:	4602      	mov	r2, r0
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d002      	beq.n	800aabe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aabc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aabe:	bf00      	nop
 800aac0:	3720      	adds	r7, #32
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aad0:	f7fe fd98 	bl	8009604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aad4:	4b2d      	ldr	r3, [pc, #180]	; (800ab8c <prvAddNewTaskToReadyList+0xc4>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3301      	adds	r3, #1
 800aada:	4a2c      	ldr	r2, [pc, #176]	; (800ab8c <prvAddNewTaskToReadyList+0xc4>)
 800aadc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aade:	4b2c      	ldr	r3, [pc, #176]	; (800ab90 <prvAddNewTaskToReadyList+0xc8>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d109      	bne.n	800aafa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aae6:	4a2a      	ldr	r2, [pc, #168]	; (800ab90 <prvAddNewTaskToReadyList+0xc8>)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aaec:	4b27      	ldr	r3, [pc, #156]	; (800ab8c <prvAddNewTaskToReadyList+0xc4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d110      	bne.n	800ab16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aaf4:	f000 fc16 	bl	800b324 <prvInitialiseTaskLists>
 800aaf8:	e00d      	b.n	800ab16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aafa:	4b26      	ldr	r3, [pc, #152]	; (800ab94 <prvAddNewTaskToReadyList+0xcc>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d109      	bne.n	800ab16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab02:	4b23      	ldr	r3, [pc, #140]	; (800ab90 <prvAddNewTaskToReadyList+0xc8>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d802      	bhi.n	800ab16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab10:	4a1f      	ldr	r2, [pc, #124]	; (800ab90 <prvAddNewTaskToReadyList+0xc8>)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab16:	4b20      	ldr	r3, [pc, #128]	; (800ab98 <prvAddNewTaskToReadyList+0xd0>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	4a1e      	ldr	r2, [pc, #120]	; (800ab98 <prvAddNewTaskToReadyList+0xd0>)
 800ab1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab20:	4b1d      	ldr	r3, [pc, #116]	; (800ab98 <prvAddNewTaskToReadyList+0xd0>)
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2c:	4b1b      	ldr	r3, [pc, #108]	; (800ab9c <prvAddNewTaskToReadyList+0xd4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d903      	bls.n	800ab3c <prvAddNewTaskToReadyList+0x74>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab38:	4a18      	ldr	r2, [pc, #96]	; (800ab9c <prvAddNewTaskToReadyList+0xd4>)
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4a15      	ldr	r2, [pc, #84]	; (800aba0 <prvAddNewTaskToReadyList+0xd8>)
 800ab4a:	441a      	add	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	3304      	adds	r3, #4
 800ab50:	4619      	mov	r1, r3
 800ab52:	4610      	mov	r0, r2
 800ab54:	f7fe fba5 	bl	80092a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab58:	f7fe fd84 	bl	8009664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab5c:	4b0d      	ldr	r3, [pc, #52]	; (800ab94 <prvAddNewTaskToReadyList+0xcc>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00e      	beq.n	800ab82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab64:	4b0a      	ldr	r3, [pc, #40]	; (800ab90 <prvAddNewTaskToReadyList+0xc8>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d207      	bcs.n	800ab82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab72:	4b0c      	ldr	r3, [pc, #48]	; (800aba4 <prvAddNewTaskToReadyList+0xdc>)
 800ab74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	2400a278 	.word	0x2400a278
 800ab90:	24009da4 	.word	0x24009da4
 800ab94:	2400a284 	.word	0x2400a284
 800ab98:	2400a294 	.word	0x2400a294
 800ab9c:	2400a280 	.word	0x2400a280
 800aba0:	24009da8 	.word	0x24009da8
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800abb0:	2300      	movs	r3, #0
 800abb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d017      	beq.n	800abea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800abba:	4b13      	ldr	r3, [pc, #76]	; (800ac08 <vTaskDelay+0x60>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00a      	beq.n	800abd8 <vTaskDelay+0x30>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	60bb      	str	r3, [r7, #8]
}
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800abd8:	f000 f880 	bl	800acdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800abdc:	2100      	movs	r1, #0
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fde8 	bl	800b7b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800abe4:	f000 f888 	bl	800acf8 <xTaskResumeAll>
 800abe8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d107      	bne.n	800ac00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800abf0:	4b06      	ldr	r3, [pc, #24]	; (800ac0c <vTaskDelay+0x64>)
 800abf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac00:	bf00      	nop
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	2400a2a0 	.word	0x2400a2a0
 800ac0c:	e000ed04 	.word	0xe000ed04

0800ac10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b08a      	sub	sp, #40	; 0x28
 800ac14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac16:	2300      	movs	r3, #0
 800ac18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac1e:	463a      	mov	r2, r7
 800ac20:	1d39      	adds	r1, r7, #4
 800ac22:	f107 0308 	add.w	r3, r7, #8
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fe f8f0 	bl	8008e0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac2c:	6839      	ldr	r1, [r7, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	9202      	str	r2, [sp, #8]
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	2300      	movs	r3, #0
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	460a      	mov	r2, r1
 800ac3e:	4921      	ldr	r1, [pc, #132]	; (800acc4 <vTaskStartScheduler+0xb4>)
 800ac40:	4821      	ldr	r0, [pc, #132]	; (800acc8 <vTaskStartScheduler+0xb8>)
 800ac42:	f7ff fe0f 	bl	800a864 <xTaskCreateStatic>
 800ac46:	4603      	mov	r3, r0
 800ac48:	4a20      	ldr	r2, [pc, #128]	; (800accc <vTaskStartScheduler+0xbc>)
 800ac4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac4c:	4b1f      	ldr	r3, [pc, #124]	; (800accc <vTaskStartScheduler+0xbc>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac54:	2301      	movs	r3, #1
 800ac56:	617b      	str	r3, [r7, #20]
 800ac58:	e001      	b.n	800ac5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d102      	bne.n	800ac6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac64:	f000 fdfa 	bl	800b85c <xTimerCreateTimerTask>
 800ac68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d116      	bne.n	800ac9e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ac70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	613b      	str	r3, [r7, #16]
}
 800ac82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac84:	4b12      	ldr	r3, [pc, #72]	; (800acd0 <vTaskStartScheduler+0xc0>)
 800ac86:	f04f 32ff 	mov.w	r2, #4294967295
 800ac8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac8c:	4b11      	ldr	r3, [pc, #68]	; (800acd4 <vTaskStartScheduler+0xc4>)
 800ac8e:	2201      	movs	r2, #1
 800ac90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac92:	4b11      	ldr	r3, [pc, #68]	; (800acd8 <vTaskStartScheduler+0xc8>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac98:	f7fe fc12 	bl	80094c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac9c:	e00e      	b.n	800acbc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca4:	d10a      	bne.n	800acbc <vTaskStartScheduler+0xac>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	60fb      	str	r3, [r7, #12]
}
 800acb8:	bf00      	nop
 800acba:	e7fe      	b.n	800acba <vTaskStartScheduler+0xaa>
}
 800acbc:	bf00      	nop
 800acbe:	3718      	adds	r7, #24
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	0802b834 	.word	0x0802b834
 800acc8:	0800b2f5 	.word	0x0800b2f5
 800accc:	2400a29c 	.word	0x2400a29c
 800acd0:	2400a298 	.word	0x2400a298
 800acd4:	2400a284 	.word	0x2400a284
 800acd8:	2400a27c 	.word	0x2400a27c

0800acdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ace0:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <vTaskSuspendAll+0x18>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3301      	adds	r3, #1
 800ace6:	4a03      	ldr	r2, [pc, #12]	; (800acf4 <vTaskSuspendAll+0x18>)
 800ace8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800acea:	bf00      	nop
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	2400a2a0 	.word	0x2400a2a0

0800acf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad06:	4b42      	ldr	r3, [pc, #264]	; (800ae10 <xTaskResumeAll+0x118>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10a      	bne.n	800ad24 <xTaskResumeAll+0x2c>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	603b      	str	r3, [r7, #0]
}
 800ad20:	bf00      	nop
 800ad22:	e7fe      	b.n	800ad22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad24:	f7fe fc6e 	bl	8009604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad28:	4b39      	ldr	r3, [pc, #228]	; (800ae10 <xTaskResumeAll+0x118>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	4a38      	ldr	r2, [pc, #224]	; (800ae10 <xTaskResumeAll+0x118>)
 800ad30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad32:	4b37      	ldr	r3, [pc, #220]	; (800ae10 <xTaskResumeAll+0x118>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d162      	bne.n	800ae00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad3a:	4b36      	ldr	r3, [pc, #216]	; (800ae14 <xTaskResumeAll+0x11c>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d05e      	beq.n	800ae00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad42:	e02f      	b.n	800ada4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad44:	4b34      	ldr	r3, [pc, #208]	; (800ae18 <xTaskResumeAll+0x120>)
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	3318      	adds	r3, #24
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7fe fb03 	bl	800935c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3304      	adds	r3, #4
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fe fafe 	bl	800935c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad64:	4b2d      	ldr	r3, [pc, #180]	; (800ae1c <xTaskResumeAll+0x124>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d903      	bls.n	800ad74 <xTaskResumeAll+0x7c>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad70:	4a2a      	ldr	r2, [pc, #168]	; (800ae1c <xTaskResumeAll+0x124>)
 800ad72:	6013      	str	r3, [r2, #0]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad78:	4613      	mov	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4a27      	ldr	r2, [pc, #156]	; (800ae20 <xTaskResumeAll+0x128>)
 800ad82:	441a      	add	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3304      	adds	r3, #4
 800ad88:	4619      	mov	r1, r3
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	f7fe fa89 	bl	80092a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad94:	4b23      	ldr	r3, [pc, #140]	; (800ae24 <xTaskResumeAll+0x12c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d302      	bcc.n	800ada4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ad9e:	4b22      	ldr	r3, [pc, #136]	; (800ae28 <xTaskResumeAll+0x130>)
 800ada0:	2201      	movs	r2, #1
 800ada2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ada4:	4b1c      	ldr	r3, [pc, #112]	; (800ae18 <xTaskResumeAll+0x120>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1cb      	bne.n	800ad44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800adb2:	f000 fb55 	bl	800b460 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800adb6:	4b1d      	ldr	r3, [pc, #116]	; (800ae2c <xTaskResumeAll+0x134>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d010      	beq.n	800ade4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800adc2:	f000 f847 	bl	800ae54 <xTaskIncrementTick>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800adcc:	4b16      	ldr	r3, [pc, #88]	; (800ae28 <xTaskResumeAll+0x130>)
 800adce:	2201      	movs	r2, #1
 800add0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	3b01      	subs	r3, #1
 800add6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1f1      	bne.n	800adc2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800adde:	4b13      	ldr	r3, [pc, #76]	; (800ae2c <xTaskResumeAll+0x134>)
 800ade0:	2200      	movs	r2, #0
 800ade2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ade4:	4b10      	ldr	r3, [pc, #64]	; (800ae28 <xTaskResumeAll+0x130>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d009      	beq.n	800ae00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800adec:	2301      	movs	r3, #1
 800adee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800adf0:	4b0f      	ldr	r3, [pc, #60]	; (800ae30 <xTaskResumeAll+0x138>)
 800adf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adf6:	601a      	str	r2, [r3, #0]
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae00:	f7fe fc30 	bl	8009664 <vPortExitCritical>

	return xAlreadyYielded;
 800ae04:	68bb      	ldr	r3, [r7, #8]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	2400a2a0 	.word	0x2400a2a0
 800ae14:	2400a278 	.word	0x2400a278
 800ae18:	2400a238 	.word	0x2400a238
 800ae1c:	2400a280 	.word	0x2400a280
 800ae20:	24009da8 	.word	0x24009da8
 800ae24:	24009da4 	.word	0x24009da4
 800ae28:	2400a28c 	.word	0x2400a28c
 800ae2c:	2400a288 	.word	0x2400a288
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae3a:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <xTaskGetTickCount+0x1c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae40:	687b      	ldr	r3, [r7, #4]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	2400a27c 	.word	0x2400a27c

0800ae54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae5e:	4b4f      	ldr	r3, [pc, #316]	; (800af9c <xTaskIncrementTick+0x148>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f040 808f 	bne.w	800af86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae68:	4b4d      	ldr	r3, [pc, #308]	; (800afa0 <xTaskIncrementTick+0x14c>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae70:	4a4b      	ldr	r2, [pc, #300]	; (800afa0 <xTaskIncrementTick+0x14c>)
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d120      	bne.n	800aebe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae7c:	4b49      	ldr	r3, [pc, #292]	; (800afa4 <xTaskIncrementTick+0x150>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00a      	beq.n	800ae9c <xTaskIncrementTick+0x48>
	__asm volatile
 800ae86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	603b      	str	r3, [r7, #0]
}
 800ae98:	bf00      	nop
 800ae9a:	e7fe      	b.n	800ae9a <xTaskIncrementTick+0x46>
 800ae9c:	4b41      	ldr	r3, [pc, #260]	; (800afa4 <xTaskIncrementTick+0x150>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	60fb      	str	r3, [r7, #12]
 800aea2:	4b41      	ldr	r3, [pc, #260]	; (800afa8 <xTaskIncrementTick+0x154>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a3f      	ldr	r2, [pc, #252]	; (800afa4 <xTaskIncrementTick+0x150>)
 800aea8:	6013      	str	r3, [r2, #0]
 800aeaa:	4a3f      	ldr	r2, [pc, #252]	; (800afa8 <xTaskIncrementTick+0x154>)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6013      	str	r3, [r2, #0]
 800aeb0:	4b3e      	ldr	r3, [pc, #248]	; (800afac <xTaskIncrementTick+0x158>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	4a3d      	ldr	r2, [pc, #244]	; (800afac <xTaskIncrementTick+0x158>)
 800aeb8:	6013      	str	r3, [r2, #0]
 800aeba:	f000 fad1 	bl	800b460 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aebe:	4b3c      	ldr	r3, [pc, #240]	; (800afb0 <xTaskIncrementTick+0x15c>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d349      	bcc.n	800af5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aec8:	4b36      	ldr	r3, [pc, #216]	; (800afa4 <xTaskIncrementTick+0x150>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d104      	bne.n	800aedc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aed2:	4b37      	ldr	r3, [pc, #220]	; (800afb0 <xTaskIncrementTick+0x15c>)
 800aed4:	f04f 32ff 	mov.w	r2, #4294967295
 800aed8:	601a      	str	r2, [r3, #0]
					break;
 800aeda:	e03f      	b.n	800af5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aedc:	4b31      	ldr	r3, [pc, #196]	; (800afa4 <xTaskIncrementTick+0x150>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d203      	bcs.n	800aefc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aef4:	4a2e      	ldr	r2, [pc, #184]	; (800afb0 <xTaskIncrementTick+0x15c>)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aefa:	e02f      	b.n	800af5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	3304      	adds	r3, #4
 800af00:	4618      	mov	r0, r3
 800af02:	f7fe fa2b 	bl	800935c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d004      	beq.n	800af18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	3318      	adds	r3, #24
 800af12:	4618      	mov	r0, r3
 800af14:	f7fe fa22 	bl	800935c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1c:	4b25      	ldr	r3, [pc, #148]	; (800afb4 <xTaskIncrementTick+0x160>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	429a      	cmp	r2, r3
 800af22:	d903      	bls.n	800af2c <xTaskIncrementTick+0xd8>
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	4a22      	ldr	r2, [pc, #136]	; (800afb4 <xTaskIncrementTick+0x160>)
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4a1f      	ldr	r2, [pc, #124]	; (800afb8 <xTaskIncrementTick+0x164>)
 800af3a:	441a      	add	r2, r3
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	3304      	adds	r3, #4
 800af40:	4619      	mov	r1, r3
 800af42:	4610      	mov	r0, r2
 800af44:	f7fe f9ad 	bl	80092a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4c:	4b1b      	ldr	r3, [pc, #108]	; (800afbc <xTaskIncrementTick+0x168>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af52:	429a      	cmp	r2, r3
 800af54:	d3b8      	bcc.n	800aec8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800af56:	2301      	movs	r3, #1
 800af58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af5a:	e7b5      	b.n	800aec8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af5c:	4b17      	ldr	r3, [pc, #92]	; (800afbc <xTaskIncrementTick+0x168>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af62:	4915      	ldr	r1, [pc, #84]	; (800afb8 <xTaskIncrementTick+0x164>)
 800af64:	4613      	mov	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	440b      	add	r3, r1
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d901      	bls.n	800af78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af74:	2301      	movs	r3, #1
 800af76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af78:	4b11      	ldr	r3, [pc, #68]	; (800afc0 <xTaskIncrementTick+0x16c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d007      	beq.n	800af90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800af80:	2301      	movs	r3, #1
 800af82:	617b      	str	r3, [r7, #20]
 800af84:	e004      	b.n	800af90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af86:	4b0f      	ldr	r3, [pc, #60]	; (800afc4 <xTaskIncrementTick+0x170>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	3301      	adds	r3, #1
 800af8c:	4a0d      	ldr	r2, [pc, #52]	; (800afc4 <xTaskIncrementTick+0x170>)
 800af8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af90:	697b      	ldr	r3, [r7, #20]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	2400a2a0 	.word	0x2400a2a0
 800afa0:	2400a27c 	.word	0x2400a27c
 800afa4:	2400a230 	.word	0x2400a230
 800afa8:	2400a234 	.word	0x2400a234
 800afac:	2400a290 	.word	0x2400a290
 800afb0:	2400a298 	.word	0x2400a298
 800afb4:	2400a280 	.word	0x2400a280
 800afb8:	24009da8 	.word	0x24009da8
 800afbc:	24009da4 	.word	0x24009da4
 800afc0:	2400a28c 	.word	0x2400a28c
 800afc4:	2400a288 	.word	0x2400a288

0800afc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afce:	4b28      	ldr	r3, [pc, #160]	; (800b070 <vTaskSwitchContext+0xa8>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800afd6:	4b27      	ldr	r3, [pc, #156]	; (800b074 <vTaskSwitchContext+0xac>)
 800afd8:	2201      	movs	r2, #1
 800afda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800afdc:	e041      	b.n	800b062 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800afde:	4b25      	ldr	r3, [pc, #148]	; (800b074 <vTaskSwitchContext+0xac>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afe4:	4b24      	ldr	r3, [pc, #144]	; (800b078 <vTaskSwitchContext+0xb0>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	60fb      	str	r3, [r7, #12]
 800afea:	e010      	b.n	800b00e <vTaskSwitchContext+0x46>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10a      	bne.n	800b008 <vTaskSwitchContext+0x40>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	607b      	str	r3, [r7, #4]
}
 800b004:	bf00      	nop
 800b006:	e7fe      	b.n	800b006 <vTaskSwitchContext+0x3e>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3b01      	subs	r3, #1
 800b00c:	60fb      	str	r3, [r7, #12]
 800b00e:	491b      	ldr	r1, [pc, #108]	; (800b07c <vTaskSwitchContext+0xb4>)
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	4613      	mov	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	440b      	add	r3, r1
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d0e4      	beq.n	800afec <vTaskSwitchContext+0x24>
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	4613      	mov	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4a13      	ldr	r2, [pc, #76]	; (800b07c <vTaskSwitchContext+0xb4>)
 800b02e:	4413      	add	r3, r2
 800b030:	60bb      	str	r3, [r7, #8]
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	685a      	ldr	r2, [r3, #4]
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	605a      	str	r2, [r3, #4]
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	685a      	ldr	r2, [r3, #4]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	3308      	adds	r3, #8
 800b044:	429a      	cmp	r2, r3
 800b046:	d104      	bne.n	800b052 <vTaskSwitchContext+0x8a>
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	685a      	ldr	r2, [r3, #4]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	605a      	str	r2, [r3, #4]
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	4a09      	ldr	r2, [pc, #36]	; (800b080 <vTaskSwitchContext+0xb8>)
 800b05a:	6013      	str	r3, [r2, #0]
 800b05c:	4a06      	ldr	r2, [pc, #24]	; (800b078 <vTaskSwitchContext+0xb0>)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6013      	str	r3, [r2, #0]
}
 800b062:	bf00      	nop
 800b064:	3714      	adds	r7, #20
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	2400a2a0 	.word	0x2400a2a0
 800b074:	2400a28c 	.word	0x2400a28c
 800b078:	2400a280 	.word	0x2400a280
 800b07c:	24009da8 	.word	0x24009da8
 800b080:	24009da4 	.word	0x24009da4

0800b084 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	60fb      	str	r3, [r7, #12]
}
 800b0a6:	bf00      	nop
 800b0a8:	e7fe      	b.n	800b0a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0aa:	4b07      	ldr	r3, [pc, #28]	; (800b0c8 <vTaskPlaceOnEventList+0x44>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	3318      	adds	r3, #24
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7fe f919 	bl	80092ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0b8:	2101      	movs	r1, #1
 800b0ba:	6838      	ldr	r0, [r7, #0]
 800b0bc:	f000 fb7a 	bl	800b7b4 <prvAddCurrentTaskToDelayedList>
}
 800b0c0:	bf00      	nop
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	24009da4 	.word	0x24009da4

0800b0cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10a      	bne.n	800b0f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	617b      	str	r3, [r7, #20]
}
 800b0f0:	bf00      	nop
 800b0f2:	e7fe      	b.n	800b0f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0f4:	4b0a      	ldr	r3, [pc, #40]	; (800b120 <vTaskPlaceOnEventListRestricted+0x54>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3318      	adds	r3, #24
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f7fe f8d0 	bl	80092a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b108:	f04f 33ff 	mov.w	r3, #4294967295
 800b10c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b10e:	6879      	ldr	r1, [r7, #4]
 800b110:	68b8      	ldr	r0, [r7, #8]
 800b112:	f000 fb4f 	bl	800b7b4 <prvAddCurrentTaskToDelayedList>
	}
 800b116:	bf00      	nop
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	24009da4 	.word	0x24009da4

0800b124 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10a      	bne.n	800b150 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	60fb      	str	r3, [r7, #12]
}
 800b14c:	bf00      	nop
 800b14e:	e7fe      	b.n	800b14e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	3318      	adds	r3, #24
 800b154:	4618      	mov	r0, r3
 800b156:	f7fe f901 	bl	800935c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b15a:	4b1e      	ldr	r3, [pc, #120]	; (800b1d4 <xTaskRemoveFromEventList+0xb0>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d11d      	bne.n	800b19e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	3304      	adds	r3, #4
 800b166:	4618      	mov	r0, r3
 800b168:	f7fe f8f8 	bl	800935c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b170:	4b19      	ldr	r3, [pc, #100]	; (800b1d8 <xTaskRemoveFromEventList+0xb4>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	429a      	cmp	r2, r3
 800b176:	d903      	bls.n	800b180 <xTaskRemoveFromEventList+0x5c>
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17c:	4a16      	ldr	r2, [pc, #88]	; (800b1d8 <xTaskRemoveFromEventList+0xb4>)
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b184:	4613      	mov	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4a13      	ldr	r2, [pc, #76]	; (800b1dc <xTaskRemoveFromEventList+0xb8>)
 800b18e:	441a      	add	r2, r3
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	3304      	adds	r3, #4
 800b194:	4619      	mov	r1, r3
 800b196:	4610      	mov	r0, r2
 800b198:	f7fe f883 	bl	80092a2 <vListInsertEnd>
 800b19c:	e005      	b.n	800b1aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	3318      	adds	r3, #24
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	480e      	ldr	r0, [pc, #56]	; (800b1e0 <xTaskRemoveFromEventList+0xbc>)
 800b1a6:	f7fe f87c 	bl	80092a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ae:	4b0d      	ldr	r3, [pc, #52]	; (800b1e4 <xTaskRemoveFromEventList+0xc0>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d905      	bls.n	800b1c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1bc:	4b0a      	ldr	r3, [pc, #40]	; (800b1e8 <xTaskRemoveFromEventList+0xc4>)
 800b1be:	2201      	movs	r2, #1
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	e001      	b.n	800b1c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b1c8:	697b      	ldr	r3, [r7, #20]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3718      	adds	r7, #24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	2400a2a0 	.word	0x2400a2a0
 800b1d8:	2400a280 	.word	0x2400a280
 800b1dc:	24009da8 	.word	0x24009da8
 800b1e0:	2400a238 	.word	0x2400a238
 800b1e4:	24009da4 	.word	0x24009da4
 800b1e8:	2400a28c 	.word	0x2400a28c

0800b1ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b1f4:	4b06      	ldr	r3, [pc, #24]	; (800b210 <vTaskInternalSetTimeOutState+0x24>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b1fc:	4b05      	ldr	r3, [pc, #20]	; (800b214 <vTaskInternalSetTimeOutState+0x28>)
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	605a      	str	r2, [r3, #4]
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr
 800b210:	2400a290 	.word	0x2400a290
 800b214:	2400a27c 	.word	0x2400a27c

0800b218 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b088      	sub	sp, #32
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10a      	bne.n	800b23e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22c:	f383 8811 	msr	BASEPRI, r3
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	613b      	str	r3, [r7, #16]
}
 800b23a:	bf00      	nop
 800b23c:	e7fe      	b.n	800b23c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10a      	bne.n	800b25a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b248:	f383 8811 	msr	BASEPRI, r3
 800b24c:	f3bf 8f6f 	isb	sy
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	60fb      	str	r3, [r7, #12]
}
 800b256:	bf00      	nop
 800b258:	e7fe      	b.n	800b258 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b25a:	f7fe f9d3 	bl	8009604 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b25e:	4b1d      	ldr	r3, [pc, #116]	; (800b2d4 <xTaskCheckForTimeOut+0xbc>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b276:	d102      	bne.n	800b27e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b278:	2300      	movs	r3, #0
 800b27a:	61fb      	str	r3, [r7, #28]
 800b27c:	e023      	b.n	800b2c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	4b15      	ldr	r3, [pc, #84]	; (800b2d8 <xTaskCheckForTimeOut+0xc0>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	429a      	cmp	r2, r3
 800b288:	d007      	beq.n	800b29a <xTaskCheckForTimeOut+0x82>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	69ba      	ldr	r2, [r7, #24]
 800b290:	429a      	cmp	r2, r3
 800b292:	d302      	bcc.n	800b29a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b294:	2301      	movs	r3, #1
 800b296:	61fb      	str	r3, [r7, #28]
 800b298:	e015      	b.n	800b2c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d20b      	bcs.n	800b2bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	1ad2      	subs	r2, r2, r3
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7ff ff9b 	bl	800b1ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	61fb      	str	r3, [r7, #28]
 800b2ba:	e004      	b.n	800b2c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b2c6:	f7fe f9cd 	bl	8009664 <vPortExitCritical>

	return xReturn;
 800b2ca:	69fb      	ldr	r3, [r7, #28]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3720      	adds	r7, #32
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	2400a27c 	.word	0x2400a27c
 800b2d8:	2400a290 	.word	0x2400a290

0800b2dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b2dc:	b480      	push	{r7}
 800b2de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b2e0:	4b03      	ldr	r3, [pc, #12]	; (800b2f0 <vTaskMissedYield+0x14>)
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	601a      	str	r2, [r3, #0]
}
 800b2e6:	bf00      	nop
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	2400a28c 	.word	0x2400a28c

0800b2f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b2fc:	f000 f852 	bl	800b3a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b300:	4b06      	ldr	r3, [pc, #24]	; (800b31c <prvIdleTask+0x28>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d9f9      	bls.n	800b2fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b308:	4b05      	ldr	r3, [pc, #20]	; (800b320 <prvIdleTask+0x2c>)
 800b30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b30e:	601a      	str	r2, [r3, #0]
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b318:	e7f0      	b.n	800b2fc <prvIdleTask+0x8>
 800b31a:	bf00      	nop
 800b31c:	24009da8 	.word	0x24009da8
 800b320:	e000ed04 	.word	0xe000ed04

0800b324 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b32a:	2300      	movs	r3, #0
 800b32c:	607b      	str	r3, [r7, #4]
 800b32e:	e00c      	b.n	800b34a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	4613      	mov	r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4413      	add	r3, r2
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	4a12      	ldr	r2, [pc, #72]	; (800b384 <prvInitialiseTaskLists+0x60>)
 800b33c:	4413      	add	r3, r2
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fd ff82 	bl	8009248 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	3301      	adds	r3, #1
 800b348:	607b      	str	r3, [r7, #4]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b37      	cmp	r3, #55	; 0x37
 800b34e:	d9ef      	bls.n	800b330 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b350:	480d      	ldr	r0, [pc, #52]	; (800b388 <prvInitialiseTaskLists+0x64>)
 800b352:	f7fd ff79 	bl	8009248 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b356:	480d      	ldr	r0, [pc, #52]	; (800b38c <prvInitialiseTaskLists+0x68>)
 800b358:	f7fd ff76 	bl	8009248 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b35c:	480c      	ldr	r0, [pc, #48]	; (800b390 <prvInitialiseTaskLists+0x6c>)
 800b35e:	f7fd ff73 	bl	8009248 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b362:	480c      	ldr	r0, [pc, #48]	; (800b394 <prvInitialiseTaskLists+0x70>)
 800b364:	f7fd ff70 	bl	8009248 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b368:	480b      	ldr	r0, [pc, #44]	; (800b398 <prvInitialiseTaskLists+0x74>)
 800b36a:	f7fd ff6d 	bl	8009248 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b36e:	4b0b      	ldr	r3, [pc, #44]	; (800b39c <prvInitialiseTaskLists+0x78>)
 800b370:	4a05      	ldr	r2, [pc, #20]	; (800b388 <prvInitialiseTaskLists+0x64>)
 800b372:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b374:	4b0a      	ldr	r3, [pc, #40]	; (800b3a0 <prvInitialiseTaskLists+0x7c>)
 800b376:	4a05      	ldr	r2, [pc, #20]	; (800b38c <prvInitialiseTaskLists+0x68>)
 800b378:	601a      	str	r2, [r3, #0]
}
 800b37a:	bf00      	nop
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	24009da8 	.word	0x24009da8
 800b388:	2400a208 	.word	0x2400a208
 800b38c:	2400a21c 	.word	0x2400a21c
 800b390:	2400a238 	.word	0x2400a238
 800b394:	2400a24c 	.word	0x2400a24c
 800b398:	2400a264 	.word	0x2400a264
 800b39c:	2400a230 	.word	0x2400a230
 800b3a0:	2400a234 	.word	0x2400a234

0800b3a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3aa:	e019      	b.n	800b3e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b3ac:	f7fe f92a 	bl	8009604 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3b0:	4b10      	ldr	r3, [pc, #64]	; (800b3f4 <prvCheckTasksWaitingTermination+0x50>)
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fd ffcd 	bl	800935c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b3c2:	4b0d      	ldr	r3, [pc, #52]	; (800b3f8 <prvCheckTasksWaitingTermination+0x54>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	4a0b      	ldr	r2, [pc, #44]	; (800b3f8 <prvCheckTasksWaitingTermination+0x54>)
 800b3ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b3cc:	4b0b      	ldr	r3, [pc, #44]	; (800b3fc <prvCheckTasksWaitingTermination+0x58>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	4a0a      	ldr	r2, [pc, #40]	; (800b3fc <prvCheckTasksWaitingTermination+0x58>)
 800b3d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b3d6:	f7fe f945 	bl	8009664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 f810 	bl	800b400 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3e0:	4b06      	ldr	r3, [pc, #24]	; (800b3fc <prvCheckTasksWaitingTermination+0x58>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1e1      	bne.n	800b3ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b3e8:	bf00      	nop
 800b3ea:	bf00      	nop
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	2400a24c 	.word	0x2400a24c
 800b3f8:	2400a278 	.word	0x2400a278
 800b3fc:	2400a260 	.word	0x2400a260

0800b400 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d108      	bne.n	800b424 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b416:	4618      	mov	r0, r3
 800b418:	f7fd fdf8 	bl	800900c <vPortFree>
				vPortFree( pxTCB );
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7fd fdf5 	bl	800900c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b422:	e018      	b.n	800b456 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d103      	bne.n	800b436 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7fd fdec 	bl	800900c <vPortFree>
	}
 800b434:	e00f      	b.n	800b456 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	d00a      	beq.n	800b456 <prvDeleteTCB+0x56>
	__asm volatile
 800b440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b444:	f383 8811 	msr	BASEPRI, r3
 800b448:	f3bf 8f6f 	isb	sy
 800b44c:	f3bf 8f4f 	dsb	sy
 800b450:	60fb      	str	r3, [r7, #12]
}
 800b452:	bf00      	nop
 800b454:	e7fe      	b.n	800b454 <prvDeleteTCB+0x54>
	}
 800b456:	bf00      	nop
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
	...

0800b460 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b466:	4b0c      	ldr	r3, [pc, #48]	; (800b498 <prvResetNextTaskUnblockTime+0x38>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d104      	bne.n	800b47a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b470:	4b0a      	ldr	r3, [pc, #40]	; (800b49c <prvResetNextTaskUnblockTime+0x3c>)
 800b472:	f04f 32ff 	mov.w	r2, #4294967295
 800b476:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b478:	e008      	b.n	800b48c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b47a:	4b07      	ldr	r3, [pc, #28]	; (800b498 <prvResetNextTaskUnblockTime+0x38>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	4a04      	ldr	r2, [pc, #16]	; (800b49c <prvResetNextTaskUnblockTime+0x3c>)
 800b48a:	6013      	str	r3, [r2, #0]
}
 800b48c:	bf00      	nop
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	2400a230 	.word	0x2400a230
 800b49c:	2400a298 	.word	0x2400a298

0800b4a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b4a6:	4b0b      	ldr	r3, [pc, #44]	; (800b4d4 <xTaskGetSchedulerState+0x34>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d102      	bne.n	800b4b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	607b      	str	r3, [r7, #4]
 800b4b2:	e008      	b.n	800b4c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4b4:	4b08      	ldr	r3, [pc, #32]	; (800b4d8 <xTaskGetSchedulerState+0x38>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d102      	bne.n	800b4c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b4bc:	2302      	movs	r3, #2
 800b4be:	607b      	str	r3, [r7, #4]
 800b4c0:	e001      	b.n	800b4c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b4c6:	687b      	ldr	r3, [r7, #4]
	}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr
 800b4d4:	2400a284 	.word	0x2400a284
 800b4d8:	2400a2a0 	.word	0x2400a2a0

0800b4dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d051      	beq.n	800b596 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f6:	4b2a      	ldr	r3, [pc, #168]	; (800b5a0 <xTaskPriorityInherit+0xc4>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d241      	bcs.n	800b584 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	699b      	ldr	r3, [r3, #24]
 800b504:	2b00      	cmp	r3, #0
 800b506:	db06      	blt.n	800b516 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b508:	4b25      	ldr	r3, [pc, #148]	; (800b5a0 <xTaskPriorityInherit+0xc4>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	6959      	ldr	r1, [r3, #20]
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51e:	4613      	mov	r3, r2
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	4413      	add	r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4a1f      	ldr	r2, [pc, #124]	; (800b5a4 <xTaskPriorityInherit+0xc8>)
 800b528:	4413      	add	r3, r2
 800b52a:	4299      	cmp	r1, r3
 800b52c:	d122      	bne.n	800b574 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	3304      	adds	r3, #4
 800b532:	4618      	mov	r0, r3
 800b534:	f7fd ff12 	bl	800935c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b538:	4b19      	ldr	r3, [pc, #100]	; (800b5a0 <xTaskPriorityInherit+0xc4>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b546:	4b18      	ldr	r3, [pc, #96]	; (800b5a8 <xTaskPriorityInherit+0xcc>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d903      	bls.n	800b556 <xTaskPriorityInherit+0x7a>
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b552:	4a15      	ldr	r2, [pc, #84]	; (800b5a8 <xTaskPriorityInherit+0xcc>)
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55a:	4613      	mov	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4a10      	ldr	r2, [pc, #64]	; (800b5a4 <xTaskPriorityInherit+0xc8>)
 800b564:	441a      	add	r2, r3
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	3304      	adds	r3, #4
 800b56a:	4619      	mov	r1, r3
 800b56c:	4610      	mov	r0, r2
 800b56e:	f7fd fe98 	bl	80092a2 <vListInsertEnd>
 800b572:	e004      	b.n	800b57e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b574:	4b0a      	ldr	r3, [pc, #40]	; (800b5a0 <xTaskPriorityInherit+0xc4>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b57e:	2301      	movs	r3, #1
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	e008      	b.n	800b596 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b588:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <xTaskPriorityInherit+0xc4>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58e:	429a      	cmp	r2, r3
 800b590:	d201      	bcs.n	800b596 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b592:	2301      	movs	r3, #1
 800b594:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b596:	68fb      	ldr	r3, [r7, #12]
	}
 800b598:	4618      	mov	r0, r3
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	24009da4 	.word	0x24009da4
 800b5a4:	24009da8 	.word	0x24009da8
 800b5a8:	2400a280 	.word	0x2400a280

0800b5ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d056      	beq.n	800b670 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5c2:	4b2e      	ldr	r3, [pc, #184]	; (800b67c <xTaskPriorityDisinherit+0xd0>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d00a      	beq.n	800b5e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	60fb      	str	r3, [r7, #12]
}
 800b5de:	bf00      	nop
 800b5e0:	e7fe      	b.n	800b5e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d10a      	bne.n	800b600 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	60bb      	str	r3, [r7, #8]
}
 800b5fc:	bf00      	nop
 800b5fe:	e7fe      	b.n	800b5fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b604:	1e5a      	subs	r2, r3, #1
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b612:	429a      	cmp	r2, r3
 800b614:	d02c      	beq.n	800b670 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d128      	bne.n	800b670 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	3304      	adds	r3, #4
 800b622:	4618      	mov	r0, r3
 800b624:	f7fd fe9a 	bl	800935c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b634:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b640:	4b0f      	ldr	r3, [pc, #60]	; (800b680 <xTaskPriorityDisinherit+0xd4>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	429a      	cmp	r2, r3
 800b646:	d903      	bls.n	800b650 <xTaskPriorityDisinherit+0xa4>
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64c:	4a0c      	ldr	r2, [pc, #48]	; (800b680 <xTaskPriorityDisinherit+0xd4>)
 800b64e:	6013      	str	r3, [r2, #0]
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b654:	4613      	mov	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4413      	add	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	4a09      	ldr	r2, [pc, #36]	; (800b684 <xTaskPriorityDisinherit+0xd8>)
 800b65e:	441a      	add	r2, r3
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	3304      	adds	r3, #4
 800b664:	4619      	mov	r1, r3
 800b666:	4610      	mov	r0, r2
 800b668:	f7fd fe1b 	bl	80092a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b66c:	2301      	movs	r3, #1
 800b66e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b670:	697b      	ldr	r3, [r7, #20]
	}
 800b672:	4618      	mov	r0, r3
 800b674:	3718      	adds	r7, #24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	24009da4 	.word	0x24009da4
 800b680:	2400a280 	.word	0x2400a280
 800b684:	24009da8 	.word	0x24009da8

0800b688 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b696:	2301      	movs	r3, #1
 800b698:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d06a      	beq.n	800b776 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10a      	bne.n	800b6be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	60fb      	str	r3, [r7, #12]
}
 800b6ba:	bf00      	nop
 800b6bc:	e7fe      	b.n	800b6bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d902      	bls.n	800b6ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	61fb      	str	r3, [r7, #28]
 800b6cc:	e002      	b.n	800b6d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d8:	69fa      	ldr	r2, [r7, #28]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d04b      	beq.n	800b776 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6e2:	697a      	ldr	r2, [r7, #20]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d146      	bne.n	800b776 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b6e8:	4b25      	ldr	r3, [pc, #148]	; (800b780 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	69ba      	ldr	r2, [r7, #24]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d10a      	bne.n	800b708 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	60bb      	str	r3, [r7, #8]
}
 800b704:	bf00      	nop
 800b706:	e7fe      	b.n	800b706 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	69fa      	ldr	r2, [r7, #28]
 800b712:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	699b      	ldr	r3, [r3, #24]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	db04      	blt.n	800b726 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	6959      	ldr	r1, [r3, #20]
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	4613      	mov	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4a13      	ldr	r2, [pc, #76]	; (800b784 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b736:	4413      	add	r3, r2
 800b738:	4299      	cmp	r1, r3
 800b73a:	d11c      	bne.n	800b776 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	3304      	adds	r3, #4
 800b740:	4618      	mov	r0, r3
 800b742:	f7fd fe0b 	bl	800935c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74a:	4b0f      	ldr	r3, [pc, #60]	; (800b788 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d903      	bls.n	800b75a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b756:	4a0c      	ldr	r2, [pc, #48]	; (800b788 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b758:	6013      	str	r3, [r2, #0]
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75e:	4613      	mov	r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4413      	add	r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4a07      	ldr	r2, [pc, #28]	; (800b784 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b768:	441a      	add	r2, r3
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	3304      	adds	r3, #4
 800b76e:	4619      	mov	r1, r3
 800b770:	4610      	mov	r0, r2
 800b772:	f7fd fd96 	bl	80092a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b776:	bf00      	nop
 800b778:	3720      	adds	r7, #32
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	24009da4 	.word	0x24009da4
 800b784:	24009da8 	.word	0x24009da8
 800b788:	2400a280 	.word	0x2400a280

0800b78c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b790:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d004      	beq.n	800b7a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b798:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b79e:	3201      	adds	r2, #1
 800b7a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b7a2:	4b03      	ldr	r3, [pc, #12]	; (800b7b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
	}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	24009da4 	.word	0x24009da4

0800b7b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7be:	4b21      	ldr	r3, [pc, #132]	; (800b844 <prvAddCurrentTaskToDelayedList+0x90>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7c4:	4b20      	ldr	r3, [pc, #128]	; (800b848 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fd fdc6 	bl	800935c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d6:	d10a      	bne.n	800b7ee <prvAddCurrentTaskToDelayedList+0x3a>
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d007      	beq.n	800b7ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7de:	4b1a      	ldr	r3, [pc, #104]	; (800b848 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4819      	ldr	r0, [pc, #100]	; (800b84c <prvAddCurrentTaskToDelayedList+0x98>)
 800b7e8:	f7fd fd5b 	bl	80092a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7ec:	e026      	b.n	800b83c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7f6:	4b14      	ldr	r3, [pc, #80]	; (800b848 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	429a      	cmp	r2, r3
 800b804:	d209      	bcs.n	800b81a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b806:	4b12      	ldr	r3, [pc, #72]	; (800b850 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	4b0f      	ldr	r3, [pc, #60]	; (800b848 <prvAddCurrentTaskToDelayedList+0x94>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3304      	adds	r3, #4
 800b810:	4619      	mov	r1, r3
 800b812:	4610      	mov	r0, r2
 800b814:	f7fd fd69 	bl	80092ea <vListInsert>
}
 800b818:	e010      	b.n	800b83c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b81a:	4b0e      	ldr	r3, [pc, #56]	; (800b854 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	4b0a      	ldr	r3, [pc, #40]	; (800b848 <prvAddCurrentTaskToDelayedList+0x94>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	3304      	adds	r3, #4
 800b824:	4619      	mov	r1, r3
 800b826:	4610      	mov	r0, r2
 800b828:	f7fd fd5f 	bl	80092ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b82c:	4b0a      	ldr	r3, [pc, #40]	; (800b858 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	429a      	cmp	r2, r3
 800b834:	d202      	bcs.n	800b83c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b836:	4a08      	ldr	r2, [pc, #32]	; (800b858 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	6013      	str	r3, [r2, #0]
}
 800b83c:	bf00      	nop
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	2400a27c 	.word	0x2400a27c
 800b848:	24009da4 	.word	0x24009da4
 800b84c:	2400a264 	.word	0x2400a264
 800b850:	2400a234 	.word	0x2400a234
 800b854:	2400a230 	.word	0x2400a230
 800b858:	2400a298 	.word	0x2400a298

0800b85c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08a      	sub	sp, #40	; 0x28
 800b860:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b866:	f000 fb07 	bl	800be78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b86a:	4b1c      	ldr	r3, [pc, #112]	; (800b8dc <xTimerCreateTimerTask+0x80>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d021      	beq.n	800b8b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b872:	2300      	movs	r3, #0
 800b874:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b876:	2300      	movs	r3, #0
 800b878:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b87a:	1d3a      	adds	r2, r7, #4
 800b87c:	f107 0108 	add.w	r1, r7, #8
 800b880:	f107 030c 	add.w	r3, r7, #12
 800b884:	4618      	mov	r0, r3
 800b886:	f7fd fadb 	bl	8008e40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b88a:	6879      	ldr	r1, [r7, #4]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	9202      	str	r2, [sp, #8]
 800b892:	9301      	str	r3, [sp, #4]
 800b894:	2302      	movs	r3, #2
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	2300      	movs	r3, #0
 800b89a:	460a      	mov	r2, r1
 800b89c:	4910      	ldr	r1, [pc, #64]	; (800b8e0 <xTimerCreateTimerTask+0x84>)
 800b89e:	4811      	ldr	r0, [pc, #68]	; (800b8e4 <xTimerCreateTimerTask+0x88>)
 800b8a0:	f7fe ffe0 	bl	800a864 <xTaskCreateStatic>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	4a10      	ldr	r2, [pc, #64]	; (800b8e8 <xTimerCreateTimerTask+0x8c>)
 800b8a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b8aa:	4b0f      	ldr	r3, [pc, #60]	; (800b8e8 <xTimerCreateTimerTask+0x8c>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d10a      	bne.n	800b8d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	613b      	str	r3, [r7, #16]
}
 800b8ce:	bf00      	nop
 800b8d0:	e7fe      	b.n	800b8d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b8d2:	697b      	ldr	r3, [r7, #20]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3718      	adds	r7, #24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	2400a2d4 	.word	0x2400a2d4
 800b8e0:	0802b83c 	.word	0x0802b83c
 800b8e4:	0800ba21 	.word	0x0800ba21
 800b8e8:	2400a2d8 	.word	0x2400a2d8

0800b8ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b08a      	sub	sp, #40	; 0x28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
 800b8f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10a      	bne.n	800b91a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	623b      	str	r3, [r7, #32]
}
 800b916:	bf00      	nop
 800b918:	e7fe      	b.n	800b918 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b91a:	4b1a      	ldr	r3, [pc, #104]	; (800b984 <xTimerGenericCommand+0x98>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d02a      	beq.n	800b978 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	2b05      	cmp	r3, #5
 800b932:	dc18      	bgt.n	800b966 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b934:	f7ff fdb4 	bl	800b4a0 <xTaskGetSchedulerState>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d109      	bne.n	800b952 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b93e:	4b11      	ldr	r3, [pc, #68]	; (800b984 <xTimerGenericCommand+0x98>)
 800b940:	6818      	ldr	r0, [r3, #0]
 800b942:	f107 0110 	add.w	r1, r7, #16
 800b946:	2300      	movs	r3, #0
 800b948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b94a:	f7fe f925 	bl	8009b98 <xQueueGenericSend>
 800b94e:	6278      	str	r0, [r7, #36]	; 0x24
 800b950:	e012      	b.n	800b978 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b952:	4b0c      	ldr	r3, [pc, #48]	; (800b984 <xTimerGenericCommand+0x98>)
 800b954:	6818      	ldr	r0, [r3, #0]
 800b956:	f107 0110 	add.w	r1, r7, #16
 800b95a:	2300      	movs	r3, #0
 800b95c:	2200      	movs	r2, #0
 800b95e:	f7fe f91b 	bl	8009b98 <xQueueGenericSend>
 800b962:	6278      	str	r0, [r7, #36]	; 0x24
 800b964:	e008      	b.n	800b978 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b966:	4b07      	ldr	r3, [pc, #28]	; (800b984 <xTimerGenericCommand+0x98>)
 800b968:	6818      	ldr	r0, [r3, #0]
 800b96a:	f107 0110 	add.w	r1, r7, #16
 800b96e:	2300      	movs	r3, #0
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	f7fe fa0f 	bl	8009d94 <xQueueGenericSendFromISR>
 800b976:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3728      	adds	r7, #40	; 0x28
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	2400a2d4 	.word	0x2400a2d4

0800b988 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af02      	add	r7, sp, #8
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b992:	4b22      	ldr	r3, [pc, #136]	; (800ba1c <prvProcessExpiredTimer+0x94>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	3304      	adds	r3, #4
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fd fcdb 	bl	800935c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9ac:	f003 0304 	and.w	r3, r3, #4
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d022      	beq.n	800b9fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	699a      	ldr	r2, [r3, #24]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	18d1      	adds	r1, r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	6978      	ldr	r0, [r7, #20]
 800b9c2:	f000 f8d1 	bl	800bb68 <prvInsertTimerInActiveList>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d01f      	beq.n	800ba0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	6978      	ldr	r0, [r7, #20]
 800b9d8:	f7ff ff88 	bl	800b8ec <xTimerGenericCommand>
 800b9dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d113      	bne.n	800ba0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	60fb      	str	r3, [r7, #12]
}
 800b9f6:	bf00      	nop
 800b9f8:	e7fe      	b.n	800b9f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba00:	f023 0301 	bic.w	r3, r3, #1
 800ba04:	b2da      	uxtb	r2, r3
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	6a1b      	ldr	r3, [r3, #32]
 800ba10:	6978      	ldr	r0, [r7, #20]
 800ba12:	4798      	blx	r3
}
 800ba14:	bf00      	nop
 800ba16:	3718      	adds	r7, #24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	2400a2cc 	.word	0x2400a2cc

0800ba20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba28:	f107 0308 	add.w	r3, r7, #8
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 f857 	bl	800bae0 <prvGetNextExpireTime>
 800ba32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	4619      	mov	r1, r3
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f000 f803 	bl	800ba44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba3e:	f000 f8d5 	bl	800bbec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba42:	e7f1      	b.n	800ba28 <prvTimerTask+0x8>

0800ba44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba4e:	f7ff f945 	bl	800acdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba52:	f107 0308 	add.w	r3, r7, #8
 800ba56:	4618      	mov	r0, r3
 800ba58:	f000 f866 	bl	800bb28 <prvSampleTimeNow>
 800ba5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d130      	bne.n	800bac6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10a      	bne.n	800ba80 <prvProcessTimerOrBlockTask+0x3c>
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d806      	bhi.n	800ba80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba72:	f7ff f941 	bl	800acf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba76:	68f9      	ldr	r1, [r7, #12]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f7ff ff85 	bl	800b988 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba7e:	e024      	b.n	800baca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d008      	beq.n	800ba98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba86:	4b13      	ldr	r3, [pc, #76]	; (800bad4 <prvProcessTimerOrBlockTask+0x90>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d101      	bne.n	800ba94 <prvProcessTimerOrBlockTask+0x50>
 800ba90:	2301      	movs	r3, #1
 800ba92:	e000      	b.n	800ba96 <prvProcessTimerOrBlockTask+0x52>
 800ba94:	2300      	movs	r3, #0
 800ba96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba98:	4b0f      	ldr	r3, [pc, #60]	; (800bad8 <prvProcessTimerOrBlockTask+0x94>)
 800ba9a:	6818      	ldr	r0, [r3, #0]
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	4619      	mov	r1, r3
 800baa6:	f7fe fea9 	bl	800a7fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800baaa:	f7ff f925 	bl	800acf8 <xTaskResumeAll>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10a      	bne.n	800baca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bab4:	4b09      	ldr	r3, [pc, #36]	; (800badc <prvProcessTimerOrBlockTask+0x98>)
 800bab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baba:	601a      	str	r2, [r3, #0]
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	f3bf 8f6f 	isb	sy
}
 800bac4:	e001      	b.n	800baca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bac6:	f7ff f917 	bl	800acf8 <xTaskResumeAll>
}
 800baca:	bf00      	nop
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	2400a2d0 	.word	0x2400a2d0
 800bad8:	2400a2d4 	.word	0x2400a2d4
 800badc:	e000ed04 	.word	0xe000ed04

0800bae0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bae8:	4b0e      	ldr	r3, [pc, #56]	; (800bb24 <prvGetNextExpireTime+0x44>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <prvGetNextExpireTime+0x16>
 800baf2:	2201      	movs	r2, #1
 800baf4:	e000      	b.n	800baf8 <prvGetNextExpireTime+0x18>
 800baf6:	2200      	movs	r2, #0
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d105      	bne.n	800bb10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb04:	4b07      	ldr	r3, [pc, #28]	; (800bb24 <prvGetNextExpireTime+0x44>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	60fb      	str	r3, [r7, #12]
 800bb0e:	e001      	b.n	800bb14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb10:	2300      	movs	r3, #0
 800bb12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb14:	68fb      	ldr	r3, [r7, #12]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	2400a2cc 	.word	0x2400a2cc

0800bb28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb30:	f7ff f980 	bl	800ae34 <xTaskGetTickCount>
 800bb34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb36:	4b0b      	ldr	r3, [pc, #44]	; (800bb64 <prvSampleTimeNow+0x3c>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68fa      	ldr	r2, [r7, #12]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d205      	bcs.n	800bb4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb40:	f000 f936 	bl	800bdb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	e002      	b.n	800bb52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb52:	4a04      	ldr	r2, [pc, #16]	; (800bb64 <prvSampleTimeNow+0x3c>)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb58:	68fb      	ldr	r3, [r7, #12]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	2400a2dc 	.word	0x2400a2dc

0800bb68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
 800bb74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb76:	2300      	movs	r3, #0
 800bb78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d812      	bhi.n	800bbb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	1ad2      	subs	r2, r2, r3
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	699b      	ldr	r3, [r3, #24]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d302      	bcc.n	800bba2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	617b      	str	r3, [r7, #20]
 800bba0:	e01b      	b.n	800bbda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bba2:	4b10      	ldr	r3, [pc, #64]	; (800bbe4 <prvInsertTimerInActiveList+0x7c>)
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	3304      	adds	r3, #4
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4610      	mov	r0, r2
 800bbae:	f7fd fb9c 	bl	80092ea <vListInsert>
 800bbb2:	e012      	b.n	800bbda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d206      	bcs.n	800bbca <prvInsertTimerInActiveList+0x62>
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d302      	bcc.n	800bbca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	e007      	b.n	800bbda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbca:	4b07      	ldr	r3, [pc, #28]	; (800bbe8 <prvInsertTimerInActiveList+0x80>)
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	4610      	mov	r0, r2
 800bbd6:	f7fd fb88 	bl	80092ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbda:	697b      	ldr	r3, [r7, #20]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3718      	adds	r7, #24
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	2400a2d0 	.word	0x2400a2d0
 800bbe8:	2400a2cc 	.word	0x2400a2cc

0800bbec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b08e      	sub	sp, #56	; 0x38
 800bbf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbf2:	e0ca      	b.n	800bd8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	da18      	bge.n	800bc2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bbfa:	1d3b      	adds	r3, r7, #4
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10a      	bne.n	800bc1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	61fb      	str	r3, [r7, #28]
}
 800bc18:	bf00      	nop
 800bc1a:	e7fe      	b.n	800bc1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc22:	6850      	ldr	r0, [r2, #4]
 800bc24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc26:	6892      	ldr	r2, [r2, #8]
 800bc28:	4611      	mov	r1, r2
 800bc2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f2c0 80aa 	blt.w	800bd88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3a:	695b      	ldr	r3, [r3, #20]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d004      	beq.n	800bc4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc42:	3304      	adds	r3, #4
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7fd fb89 	bl	800935c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc4a:	463b      	mov	r3, r7
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7ff ff6b 	bl	800bb28 <prvSampleTimeNow>
 800bc52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b09      	cmp	r3, #9
 800bc58:	f200 8097 	bhi.w	800bd8a <prvProcessReceivedCommands+0x19e>
 800bc5c:	a201      	add	r2, pc, #4	; (adr r2, 800bc64 <prvProcessReceivedCommands+0x78>)
 800bc5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc62:	bf00      	nop
 800bc64:	0800bc8d 	.word	0x0800bc8d
 800bc68:	0800bc8d 	.word	0x0800bc8d
 800bc6c:	0800bc8d 	.word	0x0800bc8d
 800bc70:	0800bd01 	.word	0x0800bd01
 800bc74:	0800bd15 	.word	0x0800bd15
 800bc78:	0800bd5f 	.word	0x0800bd5f
 800bc7c:	0800bc8d 	.word	0x0800bc8d
 800bc80:	0800bc8d 	.word	0x0800bc8d
 800bc84:	0800bd01 	.word	0x0800bd01
 800bc88:	0800bd15 	.word	0x0800bd15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc92:	f043 0301 	orr.w	r3, r3, #1
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	699b      	ldr	r3, [r3, #24]
 800bca4:	18d1      	adds	r1, r2, r3
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcac:	f7ff ff5c 	bl	800bb68 <prvInsertTimerInActiveList>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d069      	beq.n	800bd8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	6a1b      	ldr	r3, [r3, #32]
 800bcba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcc4:	f003 0304 	and.w	r3, r3, #4
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d05e      	beq.n	800bd8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd0:	699b      	ldr	r3, [r3, #24]
 800bcd2:	441a      	add	r2, r3
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	2300      	movs	r3, #0
 800bcda:	2100      	movs	r1, #0
 800bcdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcde:	f7ff fe05 	bl	800b8ec <xTimerGenericCommand>
 800bce2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d14f      	bne.n	800bd8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcee:	f383 8811 	msr	BASEPRI, r3
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	f3bf 8f4f 	dsb	sy
 800bcfa:	61bb      	str	r3, [r7, #24]
}
 800bcfc:	bf00      	nop
 800bcfe:	e7fe      	b.n	800bcfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd06:	f023 0301 	bic.w	r3, r3, #1
 800bd0a:	b2da      	uxtb	r2, r3
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd12:	e03a      	b.n	800bd8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd1a:	f043 0301 	orr.w	r3, r3, #1
 800bd1e:	b2da      	uxtb	r2, r3
 800bd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10a      	bne.n	800bd4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	617b      	str	r3, [r7, #20]
}
 800bd46:	bf00      	nop
 800bd48:	e7fe      	b.n	800bd48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	699a      	ldr	r2, [r3, #24]
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd50:	18d1      	adds	r1, r2, r3
 800bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd58:	f7ff ff06 	bl	800bb68 <prvInsertTimerInActiveList>
					break;
 800bd5c:	e015      	b.n	800bd8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd64:	f003 0302 	and.w	r3, r3, #2
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d103      	bne.n	800bd74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bd6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd6e:	f7fd f94d 	bl	800900c <vPortFree>
 800bd72:	e00a      	b.n	800bd8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd7a:	f023 0301 	bic.w	r3, r3, #1
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd86:	e000      	b.n	800bd8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bd88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd8a:	4b08      	ldr	r3, [pc, #32]	; (800bdac <prvProcessReceivedCommands+0x1c0>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	1d39      	adds	r1, r7, #4
 800bd90:	2200      	movs	r2, #0
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fe f926 	bl	8009fe4 <xQueueReceive>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f47f af2a 	bne.w	800bbf4 <prvProcessReceivedCommands+0x8>
	}
}
 800bda0:	bf00      	nop
 800bda2:	bf00      	nop
 800bda4:	3730      	adds	r7, #48	; 0x30
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	2400a2d4 	.word	0x2400a2d4

0800bdb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b088      	sub	sp, #32
 800bdb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdb6:	e048      	b.n	800be4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdb8:	4b2d      	ldr	r3, [pc, #180]	; (800be70 <prvSwitchTimerLists+0xc0>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdc2:	4b2b      	ldr	r3, [pc, #172]	; (800be70 <prvSwitchTimerLists+0xc0>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	3304      	adds	r3, #4
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fd fac3 	bl	800935c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6a1b      	ldr	r3, [r3, #32]
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bde4:	f003 0304 	and.w	r3, r3, #4
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d02e      	beq.n	800be4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	699b      	ldr	r3, [r3, #24]
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d90e      	bls.n	800be1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be0a:	4b19      	ldr	r3, [pc, #100]	; (800be70 <prvSwitchTimerLists+0xc0>)
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	3304      	adds	r3, #4
 800be12:	4619      	mov	r1, r3
 800be14:	4610      	mov	r0, r2
 800be16:	f7fd fa68 	bl	80092ea <vListInsert>
 800be1a:	e016      	b.n	800be4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be1c:	2300      	movs	r3, #0
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	2300      	movs	r3, #0
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	2100      	movs	r1, #0
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff fd60 	bl	800b8ec <xTimerGenericCommand>
 800be2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10a      	bne.n	800be4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	603b      	str	r3, [r7, #0]
}
 800be46:	bf00      	nop
 800be48:	e7fe      	b.n	800be48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be4a:	4b09      	ldr	r3, [pc, #36]	; (800be70 <prvSwitchTimerLists+0xc0>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1b1      	bne.n	800bdb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be54:	4b06      	ldr	r3, [pc, #24]	; (800be70 <prvSwitchTimerLists+0xc0>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be5a:	4b06      	ldr	r3, [pc, #24]	; (800be74 <prvSwitchTimerLists+0xc4>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a04      	ldr	r2, [pc, #16]	; (800be70 <prvSwitchTimerLists+0xc0>)
 800be60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be62:	4a04      	ldr	r2, [pc, #16]	; (800be74 <prvSwitchTimerLists+0xc4>)
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	6013      	str	r3, [r2, #0]
}
 800be68:	bf00      	nop
 800be6a:	3718      	adds	r7, #24
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	2400a2cc 	.word	0x2400a2cc
 800be74:	2400a2d0 	.word	0x2400a2d0

0800be78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be7e:	f7fd fbc1 	bl	8009604 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be82:	4b15      	ldr	r3, [pc, #84]	; (800bed8 <prvCheckForValidListAndQueue+0x60>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d120      	bne.n	800becc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be8a:	4814      	ldr	r0, [pc, #80]	; (800bedc <prvCheckForValidListAndQueue+0x64>)
 800be8c:	f7fd f9dc 	bl	8009248 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be90:	4813      	ldr	r0, [pc, #76]	; (800bee0 <prvCheckForValidListAndQueue+0x68>)
 800be92:	f7fd f9d9 	bl	8009248 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be96:	4b13      	ldr	r3, [pc, #76]	; (800bee4 <prvCheckForValidListAndQueue+0x6c>)
 800be98:	4a10      	ldr	r2, [pc, #64]	; (800bedc <prvCheckForValidListAndQueue+0x64>)
 800be9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be9c:	4b12      	ldr	r3, [pc, #72]	; (800bee8 <prvCheckForValidListAndQueue+0x70>)
 800be9e:	4a10      	ldr	r2, [pc, #64]	; (800bee0 <prvCheckForValidListAndQueue+0x68>)
 800bea0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bea2:	2300      	movs	r3, #0
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	4b11      	ldr	r3, [pc, #68]	; (800beec <prvCheckForValidListAndQueue+0x74>)
 800bea8:	4a11      	ldr	r2, [pc, #68]	; (800bef0 <prvCheckForValidListAndQueue+0x78>)
 800beaa:	2110      	movs	r1, #16
 800beac:	200a      	movs	r0, #10
 800beae:	f7fd fd33 	bl	8009918 <xQueueGenericCreateStatic>
 800beb2:	4603      	mov	r3, r0
 800beb4:	4a08      	ldr	r2, [pc, #32]	; (800bed8 <prvCheckForValidListAndQueue+0x60>)
 800beb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800beb8:	4b07      	ldr	r3, [pc, #28]	; (800bed8 <prvCheckForValidListAndQueue+0x60>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d005      	beq.n	800becc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bec0:	4b05      	ldr	r3, [pc, #20]	; (800bed8 <prvCheckForValidListAndQueue+0x60>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	490b      	ldr	r1, [pc, #44]	; (800bef4 <prvCheckForValidListAndQueue+0x7c>)
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fe fc44 	bl	800a754 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800becc:	f7fd fbca 	bl	8009664 <vPortExitCritical>
}
 800bed0:	bf00      	nop
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	2400a2d4 	.word	0x2400a2d4
 800bedc:	2400a2a4 	.word	0x2400a2a4
 800bee0:	2400a2b8 	.word	0x2400a2b8
 800bee4:	2400a2cc 	.word	0x2400a2cc
 800bee8:	2400a2d0 	.word	0x2400a2d0
 800beec:	2400a380 	.word	0x2400a380
 800bef0:	2400a2e0 	.word	0x2400a2e0
 800bef4:	0802b844 	.word	0x0802b844

0800bef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bef8:	b480      	push	{r7}
 800befa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800befc:	4b3f      	ldr	r3, [pc, #252]	; (800bffc <SystemInit+0x104>)
 800befe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf02:	4a3e      	ldr	r2, [pc, #248]	; (800bffc <SystemInit+0x104>)
 800bf04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bf08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800bf0c:	4b3b      	ldr	r3, [pc, #236]	; (800bffc <SystemInit+0x104>)
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	4a3a      	ldr	r2, [pc, #232]	; (800bffc <SystemInit+0x104>)
 800bf12:	f043 0310 	orr.w	r3, r3, #16
 800bf16:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800bf18:	4b39      	ldr	r3, [pc, #228]	; (800c000 <SystemInit+0x108>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 030f 	and.w	r3, r3, #15
 800bf20:	2b06      	cmp	r3, #6
 800bf22:	d807      	bhi.n	800bf34 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800bf24:	4b36      	ldr	r3, [pc, #216]	; (800c000 <SystemInit+0x108>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f023 030f 	bic.w	r3, r3, #15
 800bf2c:	4a34      	ldr	r2, [pc, #208]	; (800c000 <SystemInit+0x108>)
 800bf2e:	f043 0307 	orr.w	r3, r3, #7
 800bf32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800bf34:	4b33      	ldr	r3, [pc, #204]	; (800c004 <SystemInit+0x10c>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a32      	ldr	r2, [pc, #200]	; (800c004 <SystemInit+0x10c>)
 800bf3a:	f043 0301 	orr.w	r3, r3, #1
 800bf3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bf40:	4b30      	ldr	r3, [pc, #192]	; (800c004 <SystemInit+0x10c>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800bf46:	4b2f      	ldr	r3, [pc, #188]	; (800c004 <SystemInit+0x10c>)
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	492e      	ldr	r1, [pc, #184]	; (800c004 <SystemInit+0x10c>)
 800bf4c:	4b2e      	ldr	r3, [pc, #184]	; (800c008 <SystemInit+0x110>)
 800bf4e:	4013      	ands	r3, r2
 800bf50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800bf52:	4b2b      	ldr	r3, [pc, #172]	; (800c000 <SystemInit+0x108>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 0308 	and.w	r3, r3, #8
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d007      	beq.n	800bf6e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800bf5e:	4b28      	ldr	r3, [pc, #160]	; (800c000 <SystemInit+0x108>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f023 030f 	bic.w	r3, r3, #15
 800bf66:	4a26      	ldr	r2, [pc, #152]	; (800c000 <SystemInit+0x108>)
 800bf68:	f043 0307 	orr.w	r3, r3, #7
 800bf6c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800bf6e:	4b25      	ldr	r3, [pc, #148]	; (800c004 <SystemInit+0x10c>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800bf74:	4b23      	ldr	r3, [pc, #140]	; (800c004 <SystemInit+0x10c>)
 800bf76:	2200      	movs	r2, #0
 800bf78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800bf7a:	4b22      	ldr	r3, [pc, #136]	; (800c004 <SystemInit+0x10c>)
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800bf80:	4b20      	ldr	r3, [pc, #128]	; (800c004 <SystemInit+0x10c>)
 800bf82:	4a22      	ldr	r2, [pc, #136]	; (800c00c <SystemInit+0x114>)
 800bf84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800bf86:	4b1f      	ldr	r3, [pc, #124]	; (800c004 <SystemInit+0x10c>)
 800bf88:	4a21      	ldr	r2, [pc, #132]	; (800c010 <SystemInit+0x118>)
 800bf8a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800bf8c:	4b1d      	ldr	r3, [pc, #116]	; (800c004 <SystemInit+0x10c>)
 800bf8e:	4a21      	ldr	r2, [pc, #132]	; (800c014 <SystemInit+0x11c>)
 800bf90:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800bf92:	4b1c      	ldr	r3, [pc, #112]	; (800c004 <SystemInit+0x10c>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800bf98:	4b1a      	ldr	r3, [pc, #104]	; (800c004 <SystemInit+0x10c>)
 800bf9a:	4a1e      	ldr	r2, [pc, #120]	; (800c014 <SystemInit+0x11c>)
 800bf9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800bf9e:	4b19      	ldr	r3, [pc, #100]	; (800c004 <SystemInit+0x10c>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800bfa4:	4b17      	ldr	r3, [pc, #92]	; (800c004 <SystemInit+0x10c>)
 800bfa6:	4a1b      	ldr	r2, [pc, #108]	; (800c014 <SystemInit+0x11c>)
 800bfa8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800bfaa:	4b16      	ldr	r3, [pc, #88]	; (800c004 <SystemInit+0x10c>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bfb0:	4b14      	ldr	r3, [pc, #80]	; (800c004 <SystemInit+0x10c>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a13      	ldr	r2, [pc, #76]	; (800c004 <SystemInit+0x10c>)
 800bfb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bfba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bfbc:	4b11      	ldr	r3, [pc, #68]	; (800c004 <SystemInit+0x10c>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800bfc2:	4b15      	ldr	r3, [pc, #84]	; (800c018 <SystemInit+0x120>)
 800bfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc6:	4a14      	ldr	r2, [pc, #80]	; (800c018 <SystemInit+0x120>)
 800bfc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bfcc:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800bfce:	4b13      	ldr	r3, [pc, #76]	; (800c01c <SystemInit+0x124>)
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	4b13      	ldr	r3, [pc, #76]	; (800c020 <SystemInit+0x128>)
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfda:	d202      	bcs.n	800bfe2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800bfdc:	4b11      	ldr	r3, [pc, #68]	; (800c024 <SystemInit+0x12c>)
 800bfde:	2201      	movs	r2, #1
 800bfe0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800bfe2:	4b11      	ldr	r3, [pc, #68]	; (800c028 <SystemInit+0x130>)
 800bfe4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800bfe8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800bfea:	4b04      	ldr	r3, [pc, #16]	; (800bffc <SystemInit+0x104>)
 800bfec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bff0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800bff2:	bf00      	nop
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr
 800bffc:	e000ed00 	.word	0xe000ed00
 800c000:	52002000 	.word	0x52002000
 800c004:	58024400 	.word	0x58024400
 800c008:	eaf6ed7f 	.word	0xeaf6ed7f
 800c00c:	02020200 	.word	0x02020200
 800c010:	01ff0000 	.word	0x01ff0000
 800c014:	01010280 	.word	0x01010280
 800c018:	580000c0 	.word	0x580000c0
 800c01c:	5c001000 	.word	0x5c001000
 800c020:	ffff0000 	.word	0xffff0000
 800c024:	51008108 	.word	0x51008108
 800c028:	52004000 	.word	0x52004000

0800c02c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d103      	bne.n	800c044 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800c03c:	f04f 33ff 	mov.w	r3, #4294967295
 800c040:	60fb      	str	r3, [r7, #12]
 800c042:	e02c      	b.n	800c09e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	891a      	ldrh	r2, [r3, #8]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	68da      	ldr	r2, [r3, #12]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	691a      	ldr	r2, [r3, #16]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	695a      	ldr	r2, [r3, #20]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a0c      	ldr	r2, [pc, #48]	; (800c0a8 <FT5336_RegisterBusIO+0x7c>)
 800c078:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4a0b      	ldr	r2, [pc, #44]	; (800c0ac <FT5336_RegisterBusIO+0x80>)
 800c07e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d004      	beq.n	800c098 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4798      	blx	r3
 800c094:	60f8      	str	r0, [r7, #12]
 800c096:	e002      	b.n	800c09e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800c098:	f04f 33ff 	mov.w	r3, #4294967295
 800c09c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c09e:	68fb      	ldr	r3, [r7, #12]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	0800c4b3 	.word	0x0800c4b3
 800c0ac:	0800c4e7 	.word	0x0800c4e7

0800c0b0 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	2205      	movs	r2, #5
 800c0ca:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c0d2:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800c0da:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10d      	bne.n	800c11c <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f98e 	bl	800c428 <FT5336_DisableIT>
 800c10c:	4602      	mov	r2, r0
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	4413      	add	r3, r2
 800c112:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800c122:	f04f 33ff 	mov.w	r3, #4294967295
 800c126:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c128:	68fb      	ldr	r3, [r7, #12]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800c132:	b480      	push	{r7}
 800c134:	b085      	sub	sp, #20
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c144:	2b01      	cmp	r3, #1
 800c146:	d103      	bne.n	800c150 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800c150:	68fb      	ldr	r3, [r7, #12]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b084      	sub	sp, #16
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f103 0218 	add.w	r2, r3, #24
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	b2db      	uxtb	r3, r3
 800c174:	4619      	mov	r1, r3
 800c176:	4610      	mov	r0, r2
 800c178:	f000 fa2c 	bl	800c5d4 <ft5336_radian_value>
 800c17c:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f103 0218 	add.w	r2, r3, #24
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	4619      	mov	r1, r3
 800c18c:	4610      	mov	r0, r2
 800c18e:	f000 fa32 	bl	800c5f6 <ft5336_offset_left_right>
 800c192:	4602      	mov	r2, r0
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	4413      	add	r3, r2
 800c198:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f103 0218 	add.w	r2, r3, #24
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	f000 fa35 	bl	800c618 <ft5336_offset_up_down>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f103 0218 	add.w	r2, r3, #24
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	4610      	mov	r0, r2
 800c1c6:	f000 fa38 	bl	800c63a <ft5336_disatnce_left_right>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f103 0218 	add.w	r2, r3, #24
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	4619      	mov	r1, r3
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	f000 fa3b 	bl	800c65c <ft5336_distance_up_down>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f103 0218 	add.w	r2, r3, #24
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	695b      	ldr	r3, [r3, #20]
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	f000 fa3e 	bl	800c67e <ft5336_distance_zoom>
 800c202:	4602      	mov	r2, r0
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	4413      	add	r3, r2
 800c208:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d002      	beq.n	800c216 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800c210:	f04f 33ff 	mov.w	r3, #4294967295
 800c214:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c216:	68fb      	ldr	r3, [r7, #12]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	3318      	adds	r3, #24
 800c22e:	6839      	ldr	r1, [r7, #0]
 800c230:	4618      	mov	r0, r3
 800c232:	f000 fa46 	bl	800c6c2 <ft5336_chip_id>
 800c236:	4603      	mov	r3, r0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3708      	adds	r7, #8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f90f 	bl	800c472 <FT5336_DetectTouch>
 800c254:	4603      	mov	r3, r0
 800c256:	461a      	mov	r2, r3
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f103 0018 	add.w	r0, r3, #24
 800c262:	f107 0208 	add.w	r2, r7, #8
 800c266:	2304      	movs	r3, #4
 800c268:	2103      	movs	r1, #3
 800c26a:	f000 f956 	bl	800c51a <ft5336_read_reg>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d003      	beq.n	800c27c <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800c274:	f04f 33ff 	mov.w	r3, #4294967295
 800c278:	60fb      	str	r3, [r7, #12]
 800c27a:	e00f      	b.n	800c29c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800c27c:	7a3b      	ldrb	r3, [r7, #8]
 800c27e:	021b      	lsls	r3, r3, #8
 800c280:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c284:	7a7a      	ldrb	r2, [r7, #9]
 800c286:	431a      	orrs	r2, r3
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800c28c:	7abb      	ldrb	r3, [r7, #10]
 800c28e:	021b      	lsls	r3, r3, #8
 800c290:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c294:	7afa      	ldrb	r2, [r7, #11]
 800c296:	431a      	orrs	r2, r3
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c29c:	68fb      	ldr	r3, [r7, #12]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b08c      	sub	sp, #48	; 0x30
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
 800c2ae:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f8dc 	bl	800c472 <FT5336_DetectTouch>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	461a      	mov	r2, r3
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f103 0018 	add.w	r0, r3, #24
 800c2c8:	f107 0208 	add.w	r2, r7, #8
 800c2cc:	231e      	movs	r3, #30
 800c2ce:	2103      	movs	r1, #3
 800c2d0:	f000 f923 	bl	800c51a <ft5336_read_reg>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d003      	beq.n	800c2e2 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800c2da:	f04f 33ff 	mov.w	r3, #4294967295
 800c2de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2e0:	e07e      	b.n	800c3e0 <FT5336_GetMultiTouchState+0x13a>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2e6:	e078      	b.n	800c3da <FT5336_GetMultiTouchState+0x134>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800c2e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	4413      	add	r3, r2
 800c2f0:	005b      	lsls	r3, r3, #1
 800c2f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c2f6:	4413      	add	r3, r2
 800c2f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c2fc:	021b      	lsls	r3, r3, #8
 800c2fe:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800c302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c304:	4613      	mov	r3, r2
 800c306:	005b      	lsls	r3, r3, #1
 800c308:	4413      	add	r3, r2
 800c30a:	005b      	lsls	r3, r3, #1
 800c30c:	3301      	adds	r3, #1
 800c30e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c312:	4413      	add	r3, r2
 800c314:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c318:	ea41 0203 	orr.w	r2, r1, r3
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	440b      	add	r3, r1
 800c324:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800c326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c328:	4613      	mov	r3, r2
 800c32a:	005b      	lsls	r3, r3, #1
 800c32c:	4413      	add	r3, r2
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	3302      	adds	r3, #2
 800c332:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c336:	4413      	add	r3, r2
 800c338:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c33c:	021b      	lsls	r3, r3, #8
 800c33e:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800c342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c344:	4613      	mov	r3, r2
 800c346:	005b      	lsls	r3, r3, #1
 800c348:	4413      	add	r3, r2
 800c34a:	005b      	lsls	r3, r3, #1
 800c34c:	3303      	adds	r3, #3
 800c34e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c352:	4413      	add	r3, r2
 800c354:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c358:	4319      	orrs	r1, r3
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c35e:	3206      	adds	r2, #6
 800c360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800c364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c366:	4613      	mov	r3, r2
 800c368:	005b      	lsls	r3, r3, #1
 800c36a:	4413      	add	r3, r2
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c372:	4413      	add	r3, r2
 800c374:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c378:	099b      	lsrs	r3, r3, #6
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	4619      	mov	r1, r3
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c382:	3210      	adds	r2, #16
 800c384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800c388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c38a:	4613      	mov	r3, r2
 800c38c:	005b      	lsls	r3, r3, #1
 800c38e:	4413      	add	r3, r2
 800c390:	005b      	lsls	r3, r3, #1
 800c392:	3304      	adds	r3, #4
 800c394:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c398:	4413      	add	r3, r2
 800c39a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c39e:	4619      	mov	r1, r3
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a4:	330a      	adds	r3, #10
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800c3ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	005b      	lsls	r3, r3, #1
 800c3b2:	4413      	add	r3, r2
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	3305      	adds	r3, #5
 800c3b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c3bc:	4413      	add	r3, r2
 800c3be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c3c2:	091b      	lsrs	r3, r3, #4
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	683a      	ldr	r2, [r7, #0]
 800c3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3cc:	3314      	adds	r3, #20
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	4413      	add	r3, r2
 800c3d2:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	2b04      	cmp	r3, #4
 800c3de:	d983      	bls.n	800c2e8 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800c3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3730      	adds	r7, #48	; 0x30
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b082      	sub	sp, #8
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
 800c3f2:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	3318      	adds	r3, #24
 800c3f8:	6839      	ldr	r1, [r7, #0]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 f8bb 	bl	800c576 <ft5336_gest_id>
 800c400:	4603      	mov	r3, r0
}
 800c402:	4618      	mov	r0, r3
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b082      	sub	sp, #8
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	3318      	adds	r3, #24
 800c416:	2101      	movs	r1, #1
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 f941 	bl	800c6a0 <ft5336_g_mode>
 800c41e:	4603      	mov	r3, r0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	3318      	adds	r3, #24
 800c434:	2100      	movs	r1, #0
 800c436:	4618      	mov	r0, r3
 800c438:	f000 f932 	bl	800c6a0 <ft5336_g_mode>
 800c43c:	4603      	mov	r3, r0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800c446:	b480      	push	{r7}
 800c448:	b083      	sub	sp, #12
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	370c      	adds	r7, #12
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr

0800c472 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b084      	sub	sp, #16
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	3318      	adds	r3, #24
 800c47e:	f107 020b 	add.w	r2, r7, #11
 800c482:	4611      	mov	r1, r2
 800c484:	4618      	mov	r0, r3
 800c486:	f000 f886 	bl	800c596 <ft5336_td_status>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800c490:	f04f 33ff 	mov.w	r3, #4294967295
 800c494:	60fb      	str	r3, [r7, #12]
 800c496:	e007      	b.n	800c4a8 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800c498:	7afb      	ldrb	r3, [r7, #11]
 800c49a:	2b05      	cmp	r3, #5
 800c49c:	d902      	bls.n	800c4a4 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	60fb      	str	r3, [r7, #12]
 800c4a2:	e001      	b.n	800c4a8 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800c4a4:	7afb      	ldrb	r3, [r7, #11]
 800c4a6:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800c4b2:	b590      	push	{r4, r7, lr}
 800c4b4:	b087      	sub	sp, #28
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	60f8      	str	r0, [r7, #12]
 800c4ba:	607a      	str	r2, [r7, #4]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	460b      	mov	r3, r1
 800c4c0:	72fb      	strb	r3, [r7, #11]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	691c      	ldr	r4, [r3, #16]
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	8918      	ldrh	r0, [r3, #8]
 800c4d2:	7afb      	ldrb	r3, [r7, #11]
 800c4d4:	b299      	uxth	r1, r3
 800c4d6:	893b      	ldrh	r3, [r7, #8]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	47a0      	blx	r4
 800c4dc:	4603      	mov	r3, r0
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	371c      	adds	r7, #28
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd90      	pop	{r4, r7, pc}

0800c4e6 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800c4e6:	b590      	push	{r4, r7, lr}
 800c4e8:	b087      	sub	sp, #28
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	60f8      	str	r0, [r7, #12]
 800c4ee:	607a      	str	r2, [r7, #4]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	72fb      	strb	r3, [r7, #11]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	68dc      	ldr	r4, [r3, #12]
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	8918      	ldrh	r0, [r3, #8]
 800c506:	7afb      	ldrb	r3, [r7, #11]
 800c508:	b299      	uxth	r1, r3
 800c50a:	893b      	ldrh	r3, [r7, #8]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	47a0      	blx	r4
 800c510:	4603      	mov	r3, r0
}
 800c512:	4618      	mov	r0, r3
 800c514:	371c      	adds	r7, #28
 800c516:	46bd      	mov	sp, r7
 800c518:	bd90      	pop	{r4, r7, pc}

0800c51a <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800c51a:	b590      	push	{r4, r7, lr}
 800c51c:	b085      	sub	sp, #20
 800c51e:	af00      	add	r7, sp, #0
 800c520:	60f8      	str	r0, [r7, #12]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	461a      	mov	r2, r3
 800c526:	460b      	mov	r3, r1
 800c528:	72fb      	strb	r3, [r7, #11]
 800c52a:	4613      	mov	r3, r2
 800c52c:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	685c      	ldr	r4, [r3, #4]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	6898      	ldr	r0, [r3, #8]
 800c536:	893b      	ldrh	r3, [r7, #8]
 800c538:	7af9      	ldrb	r1, [r7, #11]
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	47a0      	blx	r4
 800c53e:	4603      	mov	r3, r0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3714      	adds	r7, #20
 800c544:	46bd      	mov	sp, r7
 800c546:	bd90      	pop	{r4, r7, pc}

0800c548 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800c548:	b590      	push	{r4, r7, lr}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	607a      	str	r2, [r7, #4]
 800c552:	461a      	mov	r2, r3
 800c554:	460b      	mov	r3, r1
 800c556:	72fb      	strb	r3, [r7, #11]
 800c558:	4613      	mov	r3, r2
 800c55a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681c      	ldr	r4, [r3, #0]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6898      	ldr	r0, [r3, #8]
 800c564:	893b      	ldrh	r3, [r7, #8]
 800c566:	7af9      	ldrb	r1, [r7, #11]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	47a0      	blx	r4
 800c56c:	4603      	mov	r3, r0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3714      	adds	r7, #20
 800c572:	46bd      	mov	sp, r7
 800c574:	bd90      	pop	{r4, r7, pc}

0800c576 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b082      	sub	sp, #8
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
 800c57e:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800c580:	2301      	movs	r3, #1
 800c582:	683a      	ldr	r2, [r7, #0]
 800c584:	2101      	movs	r1, #1
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7ff ffc7 	bl	800c51a <ft5336_read_reg>
 800c58c:	4603      	mov	r3, r0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3708      	adds	r7, #8
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	2102      	movs	r1, #2
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7ff ffb7 	bl	800c51a <ft5336_read_reg>
 800c5ac:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d10a      	bne.n	800c5ca <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	f003 030f 	and.w	r3, r3, #15
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	781a      	ldrb	r2, [r3, #0]
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800c5e0:	1cfa      	adds	r2, r7, #3
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	2191      	movs	r1, #145	; 0x91
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7ff ffae 	bl	800c548 <ft5336_write_reg>
 800c5ec:	4603      	mov	r3, r0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b082      	sub	sp, #8
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	460b      	mov	r3, r1
 800c600:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800c602:	1cfa      	adds	r2, r7, #3
 800c604:	2301      	movs	r3, #1
 800c606:	2192      	movs	r1, #146	; 0x92
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f7ff ff9d 	bl	800c548 <ft5336_write_reg>
 800c60e:	4603      	mov	r3, r0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	460b      	mov	r3, r1
 800c622:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800c624:	1cfa      	adds	r2, r7, #3
 800c626:	2301      	movs	r3, #1
 800c628:	2193      	movs	r1, #147	; 0x93
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff ff8c 	bl	800c548 <ft5336_write_reg>
 800c630:	4603      	mov	r3, r0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3708      	adds	r7, #8
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b082      	sub	sp, #8
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	460b      	mov	r3, r1
 800c644:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800c646:	1cfa      	adds	r2, r7, #3
 800c648:	2301      	movs	r3, #1
 800c64a:	2194      	movs	r1, #148	; 0x94
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7ff ff7b 	bl	800c548 <ft5336_write_reg>
 800c652:	4603      	mov	r3, r0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	460b      	mov	r3, r1
 800c666:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800c668:	1cfa      	adds	r2, r7, #3
 800c66a:	2301      	movs	r3, #1
 800c66c:	2195      	movs	r1, #149	; 0x95
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7ff ff6a 	bl	800c548 <ft5336_write_reg>
 800c674:	4603      	mov	r3, r0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b082      	sub	sp, #8
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
 800c686:	460b      	mov	r3, r1
 800c688:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800c68a:	1cfa      	adds	r2, r7, #3
 800c68c:	2301      	movs	r3, #1
 800c68e:	2196      	movs	r1, #150	; 0x96
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7ff ff59 	bl	800c548 <ft5336_write_reg>
 800c696:	4603      	mov	r3, r0
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3708      	adds	r7, #8
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800c6ac:	1cfa      	adds	r2, r7, #3
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	21a4      	movs	r1, #164	; 0xa4
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7ff ff48 	bl	800c548 <ft5336_write_reg>
 800c6b8:	4603      	mov	r3, r0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b084      	sub	sp, #16
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	21a8      	movs	r1, #168	; 0xa8
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f7ff ff21 	bl	800c51a <ft5336_read_reg>
 800c6d8:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d107      	bne.n	800c6f0 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	781a      	ldrb	r2, [r3, #0]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	781a      	ldrb	r2, [r3, #0]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800c6fa:	b480      	push	{r7}
 800c6fc:	b083      	sub	sp, #12
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c708:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c710:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c718:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c722:	fbb2 f2f3 	udiv	r2, r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c732:	fbb2 f2f3 	udiv	r2, r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800c73a:	2300      	movs	r3, #0
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	370c      	adds	r7, #12
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b090      	sub	sp, #64	; 0x40
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	460b      	mov	r3, r1
 800c752:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800c754:	78fb      	ldrb	r3, [r7, #3]
 800c756:	2b03      	cmp	r3, #3
 800c758:	d102      	bne.n	800c760 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800c75a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c75e:	e001      	b.n	800c764 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800c760:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c764:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800c766:	23b7      	movs	r3, #183	; 0xb7
 800c768:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800c76a:	2300      	movs	r3, #0
 800c76c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800c76e:	2300      	movs	r3, #0
 800c770:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800c772:	2300      	movs	r3, #0
 800c774:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800c77a:	2300      	movs	r3, #0
 800c77c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800c77e:	2300      	movs	r3, #0
 800c780:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800c782:	2300      	movs	r3, #0
 800c784:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800c786:	78fb      	ldrb	r3, [r7, #3]
 800c788:	4619      	mov	r1, r3
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f860 	bl	800c850 <MT25TL01G_WriteEnable>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d002      	beq.n	800c79c <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800c796:	f06f 0301 	mvn.w	r3, #1
 800c79a:	e019      	b.n	800c7d0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c79c:	f107 0308 	add.w	r3, r7, #8
 800c7a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f004 fd38 	bl	801121c <HAL_QSPI_Command>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d002      	beq.n	800c7b8 <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800c7b2:	f06f 0301 	mvn.w	r3, #1
 800c7b6:	e00b      	b.n	800c7d0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800c7b8:	78fb      	ldrb	r3, [r7, #3]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f80b 	bl	800c7d8 <MT25TL01G_AutoPollingMemReady>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d002      	beq.n	800c7ce <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800c7c8:	f06f 0301 	mvn.w	r3, #1
 800c7cc:	e000      	b.n	800c7d0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3740      	adds	r7, #64	; 0x40
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b096      	sub	sp, #88	; 0x58
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800c7e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c7e8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800c7ea:	2305      	movs	r3, #5
 800c7ec:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800c7f6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800c7fa:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800c800:	2300      	movs	r3, #0
 800c802:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800c804:	2300      	movs	r3, #0
 800c806:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800c808:	2300      	movs	r3, #0
 800c80a:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800c80c:	2300      	movs	r3, #0
 800c80e:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800c810:	2300      	movs	r3, #0
 800c812:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800c814:	2310      	movs	r3, #16
 800c816:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800c818:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c81c:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800c81e:	f240 1301 	movw	r3, #257	; 0x101
 800c822:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800c824:	2302      	movs	r3, #2
 800c826:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c828:	f107 0208 	add.w	r2, r7, #8
 800c82c:	f107 0120 	add.w	r1, r7, #32
 800c830:	f241 3388 	movw	r3, #5000	; 0x1388
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f004 fe7e 	bl	8011536 <HAL_QSPI_AutoPolling>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d002      	beq.n	800c846 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800c840:	f06f 0304 	mvn.w	r3, #4
 800c844:	e000      	b.n	800c848 <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800c846:	2300      	movs	r3, #0

}
 800c848:	4618      	mov	r0, r3
 800c84a:	3758      	adds	r7, #88	; 0x58
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b096      	sub	sp, #88	; 0x58
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	460b      	mov	r3, r1
 800c85a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800c85c:	78fb      	ldrb	r3, [r7, #3]
 800c85e:	2b03      	cmp	r3, #3
 800c860:	d102      	bne.n	800c868 <MT25TL01G_WriteEnable+0x18>
 800c862:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c866:	e001      	b.n	800c86c <MT25TL01G_WriteEnable+0x1c>
 800c868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c86c:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800c86e:	2306      	movs	r3, #6
 800c870:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800c872:	2300      	movs	r3, #0
 800c874:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800c876:	2300      	movs	r3, #0
 800c878:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800c87a:	2300      	movs	r3, #0
 800c87c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800c882:	2300      	movs	r3, #0
 800c884:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800c886:	2300      	movs	r3, #0
 800c888:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800c88a:	2300      	movs	r3, #0
 800c88c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c88e:	f107 0320 	add.w	r3, r7, #32
 800c892:	f241 3288 	movw	r2, #5000	; 0x1388
 800c896:	4619      	mov	r1, r3
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f004 fcbf 	bl	801121c <HAL_QSPI_Command>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d002      	beq.n	800c8aa <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800c8a4:	f06f 0301 	mvn.w	r3, #1
 800c8a8:	e029      	b.n	800c8fe <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800c8aa:	f240 2302 	movw	r3, #514	; 0x202
 800c8ae:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800c8b0:	f240 2302 	movw	r3, #514	; 0x202
 800c8b4:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800c8ba:	2302      	movs	r3, #2
 800c8bc:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800c8be:	2310      	movs	r3, #16
 800c8c0:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800c8c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c8c6:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800c8c8:	2305      	movs	r3, #5
 800c8ca:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800c8cc:	78fb      	ldrb	r3, [r7, #3]
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d102      	bne.n	800c8d8 <MT25TL01G_WriteEnable+0x88>
 800c8d2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800c8d6:	e001      	b.n	800c8dc <MT25TL01G_WriteEnable+0x8c>
 800c8d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c8dc:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c8de:	f107 0208 	add.w	r2, r7, #8
 800c8e2:	f107 0120 	add.w	r1, r7, #32
 800c8e6:	f241 3388 	movw	r3, #5000	; 0x1388
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f004 fe23 	bl	8011536 <HAL_QSPI_AutoPolling>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d002      	beq.n	800c8fc <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800c8f6:	f06f 0304 	mvn.w	r3, #4
 800c8fa:	e000      	b.n	800c8fe <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3758      	adds	r7, #88	; 0x58
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b090      	sub	sp, #64	; 0x40
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800c90e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c912:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800c914:	2335      	movs	r3, #53	; 0x35
 800c916:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800c918:	2300      	movs	r3, #0
 800c91a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800c91c:	2300      	movs	r3, #0
 800c91e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800c920:	2300      	movs	r3, #0
 800c922:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800c928:	2300      	movs	r3, #0
 800c92a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800c92c:	2300      	movs	r3, #0
 800c92e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800c930:	2300      	movs	r3, #0
 800c932:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c934:	f107 0308 	add.w	r3, r7, #8
 800c938:	f241 3288 	movw	r2, #5000	; 0x1388
 800c93c:	4619      	mov	r1, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f004 fc6c 	bl	801121c <HAL_QSPI_Command>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d002      	beq.n	800c950 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800c94a:	f06f 0301 	mvn.w	r3, #1
 800c94e:	e000      	b.n	800c952 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3740      	adds	r7, #64	; 0x40
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b090      	sub	sp, #64	; 0x40
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800c962:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c966:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800c968:	23f5      	movs	r3, #245	; 0xf5
 800c96a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800c96c:	2300      	movs	r3, #0
 800c96e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800c970:	2300      	movs	r3, #0
 800c972:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800c974:	2300      	movs	r3, #0
 800c976:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800c978:	2300      	movs	r3, #0
 800c97a:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800c97c:	2300      	movs	r3, #0
 800c97e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800c980:	2300      	movs	r3, #0
 800c982:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800c984:	2300      	movs	r3, #0
 800c986:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c988:	f107 0308 	add.w	r3, r7, #8
 800c98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c990:	4619      	mov	r1, r3
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f004 fc42 	bl	801121c <HAL_QSPI_Command>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d002      	beq.n	800c9a4 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800c99e:	f06f 0301 	mvn.w	r3, #1
 800c9a2:	e000      	b.n	800c9a6 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3740      	adds	r7, #64	; 0x40
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
	...

0800c9b0 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b092      	sub	sp, #72	; 0x48
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800c9bc:	78fb      	ldrb	r3, [r7, #3]
 800c9be:	2b03      	cmp	r3, #3
 800c9c0:	d83a      	bhi.n	800ca38 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800c9c2:	a201      	add	r2, pc, #4	; (adr r2, 800c9c8 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800c9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c8:	0800c9d9 	.word	0x0800c9d9
 800c9cc:	0800c9f1 	.word	0x0800c9f1
 800c9d0:	0800ca09 	.word	0x0800ca09
 800c9d4:	0800ca21 	.word	0x0800ca21
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800c9d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9dc:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800c9de:	230e      	movs	r3, #14
 800c9e0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800c9e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800c9e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c9ec:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800c9ee:	e023      	b.n	800ca38 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800c9f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9f4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800c9f6:	233d      	movs	r3, #61	; 0x3d
 800c9f8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800c9fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800ca00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ca04:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800ca06:	e017      	b.n	800ca38 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ca08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca0c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800ca0e:	23ee      	movs	r3, #238	; 0xee
 800ca10:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800ca12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ca16:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800ca18:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ca1c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800ca1e:	e00b      	b.n	800ca38 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ca20:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ca24:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800ca26:	23ed      	movs	r3, #237	; 0xed
 800ca28:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800ca2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ca2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800ca30:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ca34:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800ca36:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800ca38:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ca3c:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800ca42:	2308      	movs	r3, #8
 800ca44:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800ca46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800ca4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca50:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ca52:	2300      	movs	r3, #0
 800ca54:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800ca56:	2300      	movs	r3, #0
 800ca58:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800ca5e:	f107 0208 	add.w	r2, r7, #8
 800ca62:	f107 0310 	add.w	r3, r7, #16
 800ca66:	4619      	mov	r1, r3
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f004 fddb 	bl	8011624 <HAL_QSPI_MemoryMapped>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800ca74:	f06f 0305 	mvn.w	r3, #5
 800ca78:	e000      	b.n	800ca7c <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3748      	adds	r7, #72	; 0x48
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b092      	sub	sp, #72	; 0x48
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800ca90:	78fb      	ldrb	r3, [r7, #3]
 800ca92:	2b03      	cmp	r3, #3
 800ca94:	d83a      	bhi.n	800cb0c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800ca96:	a201      	add	r2, pc, #4	; (adr r2, 800ca9c <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800ca98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca9c:	0800caad 	.word	0x0800caad
 800caa0:	0800cac5 	.word	0x0800cac5
 800caa4:	0800cadd 	.word	0x0800cadd
 800caa8:	0800caf5 	.word	0x0800caf5
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800caac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cab0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800cab2:	230c      	movs	r3, #12
 800cab4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800cab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caba:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800cabc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cac0:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800cac2:	e023      	b.n	800cb0c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800cac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cac8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800caca:	23bc      	movs	r3, #188	; 0xbc
 800cacc:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800cace:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800cad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cad8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800cada:	e017      	b.n	800cb0c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800cadc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cae0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800cae2:	23ec      	movs	r3, #236	; 0xec
 800cae4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800cae6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800caea:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800caec:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800caf0:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800caf2:	e00b      	b.n	800cb0c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800caf4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800caf8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800cafa:	23eb      	movs	r3, #235	; 0xeb
 800cafc:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800cafe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800cb02:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800cb04:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800cb08:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800cb0a:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800cb0c:	2308      	movs	r3, #8
 800cb0e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800cb10:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800cb14:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800cb16:	2300      	movs	r3, #0
 800cb18:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800cb22:	2300      	movs	r3, #0
 800cb24:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800cb26:	2300      	movs	r3, #0
 800cb28:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800cb2e:	f107 0208 	add.w	r2, r7, #8
 800cb32:	f107 0310 	add.w	r3, r7, #16
 800cb36:	4619      	mov	r1, r3
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f004 fd73 	bl	8011624 <HAL_QSPI_MemoryMapped>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d002      	beq.n	800cb4a <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800cb44:	f06f 0305 	mvn.w	r3, #5
 800cb48:	e000      	b.n	800cb4c <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3748      	adds	r7, #72	; 0x48
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b090      	sub	sp, #64	; 0x40
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800cb60:	78fb      	ldrb	r3, [r7, #3]
 800cb62:	2b03      	cmp	r3, #3
 800cb64:	d102      	bne.n	800cb6c <MT25TL01G_ResetEnable+0x18>
 800cb66:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cb6a:	e001      	b.n	800cb70 <MT25TL01G_ResetEnable+0x1c>
 800cb6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb70:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800cb72:	2366      	movs	r3, #102	; 0x66
 800cb74:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800cb76:	2300      	movs	r3, #0
 800cb78:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800cb86:	2300      	movs	r3, #0
 800cb88:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cb92:	f107 0308 	add.w	r3, r7, #8
 800cb96:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f004 fb3d 	bl	801121c <HAL_QSPI_Command>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d002      	beq.n	800cbae <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800cba8:	f06f 0301 	mvn.w	r3, #1
 800cbac:	e000      	b.n	800cbb0 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3740      	adds	r7, #64	; 0x40
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b090      	sub	sp, #64	; 0x40
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800cbc4:	78fb      	ldrb	r3, [r7, #3]
 800cbc6:	2b03      	cmp	r3, #3
 800cbc8:	d102      	bne.n	800cbd0 <MT25TL01G_ResetMemory+0x18>
 800cbca:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cbce:	e001      	b.n	800cbd4 <MT25TL01G_ResetMemory+0x1c>
 800cbd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbd4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800cbd6:	2399      	movs	r3, #153	; 0x99
 800cbd8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800cbea:	2300      	movs	r3, #0
 800cbec:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cbf6:	f107 0308 	add.w	r3, r7, #8
 800cbfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbfe:	4619      	mov	r1, r3
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f004 fb0b 	bl	801121c <HAL_QSPI_Command>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800cc0c:	f06f 0301 	mvn.w	r3, #1
 800cc10:	e000      	b.n	800cc14 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800cc12:	2300      	movs	r3, #0
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3740      	adds	r7, #64	; 0x40
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800cc26:	f04f 33ff 	mov.w	r3, #4294967295
 800cc2a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4619      	mov	r1, r3
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 f832 	bl	800cc9c <MT48LC4M32B2_ClockEnable>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d128      	bne.n	800cc90 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800cc3e:	2001      	movs	r0, #1
 800cc40:	f000 f8e2 	bl	800ce08 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4619      	mov	r1, r3
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f84a 	bl	800cce4 <MT48LC4M32B2_Precharge>
 800cc50:	4603      	mov	r3, r0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d11c      	bne.n	800cc90 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	6819      	ldr	r1, [r3, #0]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	461a      	mov	r2, r3
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 f897 	bl	800cd94 <MT48LC4M32B2_RefreshMode>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d111      	bne.n	800cc90 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800cc6c:	6839      	ldr	r1, [r7, #0]
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 f85c 	bl	800cd2c <MT48LC4M32B2_ModeRegConfig>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10a      	bne.n	800cc90 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 f8ad 	bl	800cde0 <MT48LC4M32B2_RefreshRate>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d101      	bne.n	800cc90 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800cc90:	68fb      	ldr	r3, [r7, #12]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
	...

0800cc9c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800cca6:	4b0e      	ldr	r3, [pc, #56]	; (800cce0 <MT48LC4M32B2_ClockEnable+0x44>)
 800cca8:	2201      	movs	r2, #1
 800ccaa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800ccac:	4a0c      	ldr	r2, [pc, #48]	; (800cce0 <MT48LC4M32B2_ClockEnable+0x44>)
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800ccb2:	4b0b      	ldr	r3, [pc, #44]	; (800cce0 <MT48LC4M32B2_ClockEnable+0x44>)
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800ccb8:	4b09      	ldr	r3, [pc, #36]	; (800cce0 <MT48LC4M32B2_ClockEnable+0x44>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800ccbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccc2:	4907      	ldr	r1, [pc, #28]	; (800cce0 <MT48LC4M32B2_ClockEnable+0x44>)
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f007 fb7b 	bl	80143c0 <HAL_SDRAM_SendCommand>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d002      	beq.n	800ccd6 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800ccd0:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd4:	e000      	b.n	800ccd8 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800ccd6:	2300      	movs	r3, #0
  }
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	2400a3d0 	.word	0x2400a3d0

0800cce4 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800ccee:	4b0e      	ldr	r3, [pc, #56]	; (800cd28 <MT48LC4M32B2_Precharge+0x44>)
 800ccf0:	2202      	movs	r2, #2
 800ccf2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800ccf4:	4a0c      	ldr	r2, [pc, #48]	; (800cd28 <MT48LC4M32B2_Precharge+0x44>)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800ccfa:	4b0b      	ldr	r3, [pc, #44]	; (800cd28 <MT48LC4M32B2_Precharge+0x44>)
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800cd00:	4b09      	ldr	r3, [pc, #36]	; (800cd28 <MT48LC4M32B2_Precharge+0x44>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800cd06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd0a:	4907      	ldr	r1, [pc, #28]	; (800cd28 <MT48LC4M32B2_Precharge+0x44>)
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f007 fb57 	bl	80143c0 <HAL_SDRAM_SendCommand>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800cd18:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1c:	e000      	b.n	800cd20 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800cd1e:	2300      	movs	r3, #0
  }
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	2400a3d0 	.word	0x2400a3d0

0800cd2c <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800cd3e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800cd44:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800cd4a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800cd50:	4313      	orrs	r3, r2
 800cd52:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800cd54:	4b0e      	ldr	r3, [pc, #56]	; (800cd90 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800cd56:	2204      	movs	r2, #4
 800cd58:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a0c      	ldr	r2, [pc, #48]	; (800cd90 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800cd60:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800cd62:	4b0b      	ldr	r3, [pc, #44]	; (800cd90 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800cd64:	2201      	movs	r2, #1
 800cd66:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800cd68:	4a09      	ldr	r2, [pc, #36]	; (800cd90 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800cd6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd72:	4907      	ldr	r1, [pc, #28]	; (800cd90 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f007 fb23 	bl	80143c0 <HAL_SDRAM_SendCommand>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800cd80:	f04f 33ff 	mov.w	r3, #4294967295
 800cd84:	e000      	b.n	800cd88 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800cd86:	2300      	movs	r3, #0
  }
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	2400a3d0 	.word	0x2400a3d0

0800cd94 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800cda0:	4a0e      	ldr	r2, [pc, #56]	; (800cddc <MT48LC4M32B2_RefreshMode+0x48>)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800cda6:	4a0d      	ldr	r2, [pc, #52]	; (800cddc <MT48LC4M32B2_RefreshMode+0x48>)
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800cdac:	4b0b      	ldr	r3, [pc, #44]	; (800cddc <MT48LC4M32B2_RefreshMode+0x48>)
 800cdae:	2208      	movs	r2, #8
 800cdb0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800cdb2:	4b0a      	ldr	r3, [pc, #40]	; (800cddc <MT48LC4M32B2_RefreshMode+0x48>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800cdb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdbc:	4907      	ldr	r1, [pc, #28]	; (800cddc <MT48LC4M32B2_RefreshMode+0x48>)
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f007 fafe 	bl	80143c0 <HAL_SDRAM_SendCommand>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d002      	beq.n	800cdd0 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800cdca:	f04f 33ff 	mov.w	r3, #4294967295
 800cdce:	e000      	b.n	800cdd2 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800cdd0:	2300      	movs	r3, #0
  }
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	2400a3d0 	.word	0x2400a3d0

0800cde0 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800cdea:	6839      	ldr	r1, [r7, #0]
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f007 fb1c 	bl	801442a <HAL_SDRAM_ProgramRefreshRate>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800cdf8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdfc:	e000      	b.n	800ce00 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800cdfe:	2300      	movs	r3, #0
  }
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800ce10:	f001 fcfc 	bl	800e80c <HAL_GetTick>
 800ce14:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800ce16:	bf00      	nop
 800ce18:	f001 fcf8 	bl	800e80c <HAL_GetTick>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d8f7      	bhi.n	800ce18 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800ce3e:	4b16      	ldr	r3, [pc, #88]	; (800ce98 <BSP_I2C4_Init+0x64>)
 800ce40:	4a16      	ldr	r2, [pc, #88]	; (800ce9c <BSP_I2C4_Init+0x68>)
 800ce42:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800ce44:	4b16      	ldr	r3, [pc, #88]	; (800cea0 <BSP_I2C4_Init+0x6c>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d11f      	bne.n	800ce8c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800ce4c:	4b14      	ldr	r3, [pc, #80]	; (800cea0 <BSP_I2C4_Init+0x6c>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	3301      	adds	r3, #1
 800ce52:	4a13      	ldr	r2, [pc, #76]	; (800cea0 <BSP_I2C4_Init+0x6c>)
 800ce54:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800ce56:	4810      	ldr	r0, [pc, #64]	; (800ce98 <BSP_I2C4_Init+0x64>)
 800ce58:	f002 ff04 	bl	800fc64 <HAL_I2C_GetState>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d114      	bne.n	800ce8c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800ce62:	480d      	ldr	r0, [pc, #52]	; (800ce98 <BSP_I2C4_Init+0x64>)
 800ce64:	f000 fb60 	bl	800d528 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800ce68:	f005 fe98 	bl	8012b9c <HAL_RCC_GetPCLK2Freq>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	490d      	ldr	r1, [pc, #52]	; (800cea4 <BSP_I2C4_Init+0x70>)
 800ce70:	4618      	mov	r0, r3
 800ce72:	f000 f8e3 	bl	800d03c <I2C_GetTiming>
 800ce76:	4603      	mov	r3, r0
 800ce78:	4619      	mov	r1, r3
 800ce7a:	4807      	ldr	r0, [pc, #28]	; (800ce98 <BSP_I2C4_Init+0x64>)
 800ce7c:	f000 f838 	bl	800cef0 <MX_I2C4_Init>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d002      	beq.n	800ce8c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800ce86:	f06f 0307 	mvn.w	r3, #7
 800ce8a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800ce8c:	687b      	ldr	r3, [r7, #4]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	2400b604 	.word	0x2400b604
 800ce9c:	58001c00 	.word	0x58001c00
 800cea0:	2400a3e0 	.word	0x2400a3e0
 800cea4:	000186a0 	.word	0x000186a0

0800cea8 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800ceb2:	4b0d      	ldr	r3, [pc, #52]	; (800cee8 <BSP_I2C4_DeInit+0x40>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	4a0b      	ldr	r2, [pc, #44]	; (800cee8 <BSP_I2C4_DeInit+0x40>)
 800ceba:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800cebc:	4b0a      	ldr	r3, [pc, #40]	; (800cee8 <BSP_I2C4_DeInit+0x40>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10b      	bne.n	800cedc <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800cec4:	4809      	ldr	r0, [pc, #36]	; (800ceec <BSP_I2C4_DeInit+0x44>)
 800cec6:	f000 fb9b 	bl	800d600 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800ceca:	4808      	ldr	r0, [pc, #32]	; (800ceec <BSP_I2C4_DeInit+0x44>)
 800cecc:	f002 fc58 	bl	800f780 <HAL_I2C_DeInit>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d002      	beq.n	800cedc <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800ced6:	f06f 0307 	mvn.w	r3, #7
 800ceda:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800cedc:	687b      	ldr	r3, [r7, #4]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	2400a3e0 	.word	0x2400a3e0
 800ceec:	2400b604 	.word	0x2400b604

0800cef0 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cefa:	2300      	movs	r3, #0
 800cefc:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	683a      	ldr	r2, [r7, #0]
 800cf02:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f002 fb96 	bl	800f660 <HAL_I2C_Init>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d002      	beq.n	800cf40 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	73fb      	strb	r3, [r7, #15]
 800cf3e:	e014      	b.n	800cf6a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800cf40:	2300      	movs	r3, #0
 800cf42:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800cf44:	68b9      	ldr	r1, [r7, #8]
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f003 f94c 	bl	80101e4 <HAL_I2CEx_ConfigAnalogFilter>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d002      	beq.n	800cf58 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
 800cf54:	73fb      	strb	r3, [r7, #15]
 800cf56:	e008      	b.n	800cf6a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800cf58:	2100      	movs	r1, #0
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f003 f98d 	bl	801027a <HAL_I2CEx_ConfigDigitalFilter>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d001      	beq.n	800cf6a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800cf66:	2301      	movs	r3, #1
 800cf68:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800cf6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b088      	sub	sp, #32
 800cf78:	af02      	add	r7, sp, #8
 800cf7a:	60ba      	str	r2, [r7, #8]
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	4603      	mov	r3, r0
 800cf80:	81fb      	strh	r3, [r7, #14]
 800cf82:	460b      	mov	r3, r1
 800cf84:	81bb      	strh	r3, [r7, #12]
 800cf86:	4613      	mov	r3, r2
 800cf88:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800cf8a:	89b9      	ldrh	r1, [r7, #12]
 800cf8c:	89f8      	ldrh	r0, [r7, #14]
 800cf8e:	88fb      	ldrh	r3, [r7, #6]
 800cf90:	9300      	str	r3, [sp, #0]
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f000 fb57 	bl	800d648 <I2C4_WriteReg>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d102      	bne.n	800cfa6 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	617b      	str	r3, [r7, #20]
 800cfa4:	e00c      	b.n	800cfc0 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800cfa6:	4809      	ldr	r0, [pc, #36]	; (800cfcc <BSP_I2C4_WriteReg+0x58>)
 800cfa8:	f002 fe6a 	bl	800fc80 <HAL_I2C_GetError>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b04      	cmp	r3, #4
 800cfb0:	d103      	bne.n	800cfba <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800cfb2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800cfb6:	617b      	str	r3, [r7, #20]
 800cfb8:	e002      	b.n	800cfc0 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800cfba:	f06f 0303 	mvn.w	r3, #3
 800cfbe:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800cfc0:	697b      	ldr	r3, [r7, #20]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3718      	adds	r7, #24
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	2400b604 	.word	0x2400b604

0800cfd0 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b088      	sub	sp, #32
 800cfd4:	af02      	add	r7, sp, #8
 800cfd6:	60ba      	str	r2, [r7, #8]
 800cfd8:	461a      	mov	r2, r3
 800cfda:	4603      	mov	r3, r0
 800cfdc:	81fb      	strh	r3, [r7, #14]
 800cfde:	460b      	mov	r3, r1
 800cfe0:	81bb      	strh	r3, [r7, #12]
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800cfe6:	89b9      	ldrh	r1, [r7, #12]
 800cfe8:	89f8      	ldrh	r0, [r7, #14]
 800cfea:	88fb      	ldrh	r3, [r7, #6]
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	2201      	movs	r2, #1
 800cff2:	f000 fb4f 	bl	800d694 <I2C4_ReadReg>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d102      	bne.n	800d002 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800cffc:	2300      	movs	r3, #0
 800cffe:	617b      	str	r3, [r7, #20]
 800d000:	e00c      	b.n	800d01c <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800d002:	4809      	ldr	r0, [pc, #36]	; (800d028 <BSP_I2C4_ReadReg+0x58>)
 800d004:	f002 fe3c 	bl	800fc80 <HAL_I2C_GetError>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b04      	cmp	r3, #4
 800d00c:	d103      	bne.n	800d016 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800d00e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800d012:	617b      	str	r3, [r7, #20]
 800d014:	e002      	b.n	800d01c <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800d016:	f06f 0303 	mvn.w	r3, #3
 800d01a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800d01c:	697b      	ldr	r3, [r7, #20]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3718      	adds	r7, #24
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	2400b604 	.word	0x2400b604

0800d02c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800d030:	f001 fbec 	bl	800e80c <HAL_GetTick>
 800d034:	4603      	mov	r3, r0
}
 800d036:	4618      	mov	r0, r3
 800d038:	bd80      	pop	{r7, pc}
	...

0800d03c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800d046:	2300      	movs	r3, #0
 800d048:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d06b      	beq.n	800d128 <I2C_GetTiming+0xec>
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d068      	beq.n	800d128 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800d056:	2300      	movs	r3, #0
 800d058:	613b      	str	r3, [r7, #16]
 800d05a:	e060      	b.n	800d11e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800d05c:	4a35      	ldr	r2, [pc, #212]	; (800d134 <I2C_GetTiming+0xf8>)
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	212c      	movs	r1, #44	; 0x2c
 800d062:	fb01 f303 	mul.w	r3, r1, r3
 800d066:	4413      	add	r3, r2
 800d068:	3304      	adds	r3, #4
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d352      	bcc.n	800d118 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800d072:	4a30      	ldr	r2, [pc, #192]	; (800d134 <I2C_GetTiming+0xf8>)
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	212c      	movs	r1, #44	; 0x2c
 800d078:	fb01 f303 	mul.w	r3, r1, r3
 800d07c:	4413      	add	r3, r2
 800d07e:	3308      	adds	r3, #8
 800d080:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800d082:	683a      	ldr	r2, [r7, #0]
 800d084:	429a      	cmp	r2, r3
 800d086:	d847      	bhi.n	800d118 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800d088:	6939      	ldr	r1, [r7, #16]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 f856 	bl	800d13c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800d090:	6939      	ldr	r1, [r7, #16]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f940 	bl	800d318 <I2C_Compute_SCLL_SCLH>
 800d098:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2b7f      	cmp	r3, #127	; 0x7f
 800d09e:	d842      	bhi.n	800d126 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800d0a0:	4925      	ldr	r1, [pc, #148]	; (800d138 <I2C_GetTiming+0xfc>)
 800d0a2:	68fa      	ldr	r2, [r7, #12]
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	4413      	add	r3, r2
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	440b      	add	r3, r1
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800d0b2:	4821      	ldr	r0, [pc, #132]	; (800d138 <I2C_GetTiming+0xfc>)
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4413      	add	r3, r2
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4403      	add	r3, r0
 800d0c0:	3304      	adds	r3, #4
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	051b      	lsls	r3, r3, #20
 800d0c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800d0ca:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800d0cc:	481a      	ldr	r0, [pc, #104]	; (800d138 <I2C_GetTiming+0xfc>)
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4413      	add	r3, r2
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4403      	add	r3, r0
 800d0da:	3308      	adds	r3, #8
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	041b      	lsls	r3, r3, #16
 800d0e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800d0e4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800d0e6:	4814      	ldr	r0, [pc, #80]	; (800d138 <I2C_GetTiming+0xfc>)
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4413      	add	r3, r2
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	4403      	add	r3, r0
 800d0f4:	330c      	adds	r3, #12
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	021b      	lsls	r3, r3, #8
 800d0fa:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800d0fc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800d0fe:	480e      	ldr	r0, [pc, #56]	; (800d138 <I2C_GetTiming+0xfc>)
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	4613      	mov	r3, r2
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	4413      	add	r3, r2
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4403      	add	r3, r0
 800d10c:	3310      	adds	r3, #16
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800d112:	430b      	orrs	r3, r1
 800d114:	617b      	str	r3, [r7, #20]
        }
        break;
 800d116:	e006      	b.n	800d126 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	3301      	adds	r3, #1
 800d11c:	613b      	str	r3, [r7, #16]
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	2b02      	cmp	r3, #2
 800d122:	d99b      	bls.n	800d05c <I2C_GetTiming+0x20>
 800d124:	e000      	b.n	800d128 <I2C_GetTiming+0xec>
        break;
 800d126:	bf00      	nop
      }
    }
  }

  return ret;
 800d128:	697b      	ldr	r3, [r7, #20]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3718      	adds	r7, #24
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	0802c2f4 	.word	0x0802c2f4
 800d138:	2400a3e4 	.word	0x2400a3e4

0800d13c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b08f      	sub	sp, #60	; 0x3c
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800d146:	2310      	movs	r3, #16
 800d148:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	085a      	lsrs	r2, r3, #1
 800d14e:	4b6e      	ldr	r3, [pc, #440]	; (800d308 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800d150:	4413      	add	r3, r2
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	fbb3 f3f2 	udiv	r3, r3, r2
 800d158:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800d15a:	2332      	movs	r3, #50	; 0x32
 800d15c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800d15e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d162:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800d164:	4a69      	ldr	r2, [pc, #420]	; (800d30c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	212c      	movs	r1, #44	; 0x2c
 800d16a:	fb01 f303 	mul.w	r3, r1, r3
 800d16e:	4413      	add	r3, r2
 800d170:	3324      	adds	r3, #36	; 0x24
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4618      	mov	r0, r3
 800d176:	4a65      	ldr	r2, [pc, #404]	; (800d30c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	212c      	movs	r1, #44	; 0x2c
 800d17c:	fb01 f303 	mul.w	r3, r1, r3
 800d180:	4413      	add	r3, r2
 800d182:	330c      	adds	r3, #12
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800d188:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800d18a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800d18c:	495f      	ldr	r1, [pc, #380]	; (800d30c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	202c      	movs	r0, #44	; 0x2c
 800d192:	fb00 f303 	mul.w	r3, r0, r3
 800d196:	440b      	add	r3, r1
 800d198:	3328      	adds	r3, #40	; 0x28
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	3303      	adds	r3, #3
 800d19e:	69f9      	ldr	r1, [r7, #28]
 800d1a0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800d1a8:	4a58      	ldr	r2, [pc, #352]	; (800d30c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	212c      	movs	r1, #44	; 0x2c
 800d1ae:	fb01 f303 	mul.w	r3, r1, r3
 800d1b2:	4413      	add	r3, r2
 800d1b4:	3310      	adds	r3, #16
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	4a54      	ldr	r2, [pc, #336]	; (800d30c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	212c      	movs	r1, #44	; 0x2c
 800d1c0:	fb01 f303 	mul.w	r3, r1, r3
 800d1c4:	4413      	add	r3, r2
 800d1c6:	3320      	adds	r3, #32
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800d1cc:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800d1ce:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800d1d0:	494e      	ldr	r1, [pc, #312]	; (800d30c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	202c      	movs	r0, #44	; 0x2c
 800d1d6:	fb00 f303 	mul.w	r3, r0, r3
 800d1da:	440b      	add	r3, r1
 800d1dc:	3328      	adds	r3, #40	; 0x28
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	3304      	adds	r3, #4
 800d1e2:	69f9      	ldr	r1, [r7, #28]
 800d1e4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800d1e8:	1ad3      	subs	r3, r2, r3
 800d1ea:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800d1ec:	4a47      	ldr	r2, [pc, #284]	; (800d30c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	212c      	movs	r1, #44	; 0x2c
 800d1f2:	fb01 f303 	mul.w	r3, r1, r3
 800d1f6:	4413      	add	r3, r2
 800d1f8:	3320      	adds	r3, #32
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	4a43      	ldr	r2, [pc, #268]	; (800d30c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	212c      	movs	r1, #44	; 0x2c
 800d204:	fb01 f303 	mul.w	r3, r1, r3
 800d208:	4413      	add	r3, r2
 800d20a:	3314      	adds	r3, #20
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4403      	add	r3, r0
 800d210:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800d212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d214:	2b00      	cmp	r3, #0
 800d216:	dc01      	bgt.n	800d21c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800d218:	2300      	movs	r3, #0
 800d21a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800d21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21e:	2b00      	cmp	r3, #0
 800d220:	dc01      	bgt.n	800d226 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800d222:	2300      	movs	r3, #0
 800d224:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800d226:	2300      	movs	r3, #0
 800d228:	62bb      	str	r3, [r7, #40]	; 0x28
 800d22a:	e062      	b.n	800d2f2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800d22c:	2300      	movs	r3, #0
 800d22e:	627b      	str	r3, [r7, #36]	; 0x24
 800d230:	e059      	b.n	800d2e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800d232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d234:	3301      	adds	r3, #1
 800d236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d238:	3201      	adds	r2, #1
 800d23a:	fb02 f203 	mul.w	r2, r2, r3
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	fb02 f303 	mul.w	r3, r2, r3
 800d244:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d348      	bcc.n	800d2e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800d24e:	2300      	movs	r3, #0
 800d250:	623b      	str	r3, [r7, #32]
 800d252:	e042      	b.n	800d2da <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800d254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d256:	3301      	adds	r3, #1
 800d258:	6a3a      	ldr	r2, [r7, #32]
 800d25a:	fb02 f203 	mul.w	r2, r2, r3
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	fb02 f303 	mul.w	r3, r2, r3
 800d264:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800d266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d332      	bcc.n	800d2d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800d26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d270:	68ba      	ldr	r2, [r7, #8]
 800d272:	429a      	cmp	r2, r3
 800d274:	d82e      	bhi.n	800d2d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800d276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d02a      	beq.n	800d2d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800d27e:	4b24      	ldr	r3, [pc, #144]	; (800d310 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	4924      	ldr	r1, [pc, #144]	; (800d314 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800d284:	4613      	mov	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4413      	add	r3, r2
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	440b      	add	r3, r1
 800d28e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d290:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800d292:	4b1f      	ldr	r3, [pc, #124]	; (800d310 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	491f      	ldr	r1, [pc, #124]	; (800d314 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800d298:	4613      	mov	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4413      	add	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	440b      	add	r3, r1
 800d2a2:	3304      	adds	r3, #4
 800d2a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2a6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800d2a8:	4b19      	ldr	r3, [pc, #100]	; (800d310 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	4919      	ldr	r1, [pc, #100]	; (800d314 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4413      	add	r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	440b      	add	r3, r1
 800d2b8:	3308      	adds	r3, #8
 800d2ba:	6a3a      	ldr	r2, [r7, #32]
 800d2bc:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800d2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c0:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800d2c2:	4b13      	ldr	r3, [pc, #76]	; (800d310 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	4a11      	ldr	r2, [pc, #68]	; (800d310 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800d2ca:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800d2cc:	4b10      	ldr	r3, [pc, #64]	; (800d310 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b7f      	cmp	r3, #127	; 0x7f
 800d2d2:	d812      	bhi.n	800d2fa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800d2d4:	6a3b      	ldr	r3, [r7, #32]
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	623b      	str	r3, [r7, #32]
 800d2da:	6a3b      	ldr	r3, [r7, #32]
 800d2dc:	2b0f      	cmp	r3, #15
 800d2de:	d9b9      	bls.n	800d254 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800d2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e8:	2b0f      	cmp	r3, #15
 800d2ea:	d9a2      	bls.n	800d232 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800d2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f4:	2b0f      	cmp	r3, #15
 800d2f6:	d999      	bls.n	800d22c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800d2f8:	e000      	b.n	800d2fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800d2fa:	bf00      	nop
          }
        }
      }
    }
  }
}
 800d2fc:	373c      	adds	r7, #60	; 0x3c
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	3b9aca00 	.word	0x3b9aca00
 800d30c:	0802c2f4 	.word	0x0802c2f4
 800d310:	2400ade4 	.word	0x2400ade4
 800d314:	2400a3e4 	.word	0x2400a3e4

0800d318 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800d318:	b480      	push	{r7}
 800d31a:	b093      	sub	sp, #76	; 0x4c
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800d322:	f04f 33ff 	mov.w	r3, #4294967295
 800d326:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	085a      	lsrs	r2, r3, #1
 800d32c:	4b7a      	ldr	r3, [pc, #488]	; (800d518 <I2C_Compute_SCLL_SCLH+0x200>)
 800d32e:	4413      	add	r3, r2
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	fbb3 f3f2 	udiv	r3, r3, r2
 800d336:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800d338:	4a78      	ldr	r2, [pc, #480]	; (800d51c <I2C_Compute_SCLL_SCLH+0x204>)
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	212c      	movs	r1, #44	; 0x2c
 800d33e:	fb01 f303 	mul.w	r3, r1, r3
 800d342:	4413      	add	r3, r2
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	085a      	lsrs	r2, r3, #1
 800d348:	4b73      	ldr	r3, [pc, #460]	; (800d518 <I2C_Compute_SCLL_SCLH+0x200>)
 800d34a:	4413      	add	r3, r2
 800d34c:	4973      	ldr	r1, [pc, #460]	; (800d51c <I2C_Compute_SCLL_SCLH+0x204>)
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	202c      	movs	r0, #44	; 0x2c
 800d352:	fb00 f202 	mul.w	r2, r0, r2
 800d356:	440a      	add	r2, r1
 800d358:	6812      	ldr	r2, [r2, #0]
 800d35a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d35e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800d360:	2332      	movs	r3, #50	; 0x32
 800d362:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800d364:	4a6d      	ldr	r2, [pc, #436]	; (800d51c <I2C_Compute_SCLL_SCLH+0x204>)
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	212c      	movs	r1, #44	; 0x2c
 800d36a:	fb01 f303 	mul.w	r3, r1, r3
 800d36e:	4413      	add	r3, r2
 800d370:	3328      	adds	r3, #40	; 0x28
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	fb02 f303 	mul.w	r3, r2, r3
 800d37a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800d37c:	4a67      	ldr	r2, [pc, #412]	; (800d51c <I2C_Compute_SCLL_SCLH+0x204>)
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	212c      	movs	r1, #44	; 0x2c
 800d382:	fb01 f303 	mul.w	r3, r1, r3
 800d386:	4413      	add	r3, r2
 800d388:	3304      	adds	r3, #4
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a62      	ldr	r2, [pc, #392]	; (800d518 <I2C_Compute_SCLL_SCLH+0x200>)
 800d38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d392:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800d394:	4a61      	ldr	r2, [pc, #388]	; (800d51c <I2C_Compute_SCLL_SCLH+0x204>)
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	212c      	movs	r1, #44	; 0x2c
 800d39a:	fb01 f303 	mul.w	r3, r1, r3
 800d39e:	4413      	add	r3, r2
 800d3a0:	3308      	adds	r3, #8
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4a5c      	ldr	r2, [pc, #368]	; (800d518 <I2C_Compute_SCLL_SCLH+0x200>)
 800d3a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3aa:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800d3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ae:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	637b      	str	r3, [r7, #52]	; 0x34
 800d3b4:	e0a3      	b.n	800d4fe <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800d3b6:	495a      	ldr	r1, [pc, #360]	; (800d520 <I2C_Compute_SCLL_SCLH+0x208>)
 800d3b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	4413      	add	r3, r2
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	440b      	add	r3, r1
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	1c5a      	adds	r2, r3, #1
 800d3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ca:	fb02 f303 	mul.w	r3, r2, r3
 800d3ce:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3d4:	e08c      	b.n	800d4f0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800d3d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3d8:	6a3b      	ldr	r3, [r7, #32]
 800d3da:	441a      	add	r2, r3
 800d3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3de:	3301      	adds	r3, #1
 800d3e0:	6979      	ldr	r1, [r7, #20]
 800d3e2:	fb01 f103 	mul.w	r1, r1, r3
 800d3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e8:	005b      	lsls	r3, r3, #1
 800d3ea:	440b      	add	r3, r1
 800d3ec:	4413      	add	r3, r2
 800d3ee:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800d3f0:	4a4a      	ldr	r2, [pc, #296]	; (800d51c <I2C_Compute_SCLL_SCLH+0x204>)
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	212c      	movs	r1, #44	; 0x2c
 800d3f6:	fb01 f303 	mul.w	r3, r1, r3
 800d3fa:	4413      	add	r3, r2
 800d3fc:	3318      	adds	r3, #24
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	693a      	ldr	r2, [r7, #16]
 800d402:	429a      	cmp	r2, r3
 800d404:	d971      	bls.n	800d4ea <I2C_Compute_SCLL_SCLH+0x1d2>
 800d406:	693a      	ldr	r2, [r7, #16]
 800d408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40a:	1ad2      	subs	r2, r2, r3
 800d40c:	6a3b      	ldr	r3, [r7, #32]
 800d40e:	1ad3      	subs	r3, r2, r3
 800d410:	089b      	lsrs	r3, r3, #2
 800d412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d414:	429a      	cmp	r2, r3
 800d416:	d268      	bcs.n	800d4ea <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800d418:	2300      	movs	r3, #0
 800d41a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d41c:	e062      	b.n	800d4e4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800d41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	441a      	add	r2, r3
 800d424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d426:	3301      	adds	r3, #1
 800d428:	6979      	ldr	r1, [r7, #20]
 800d42a:	fb01 f103 	mul.w	r1, r1, r3
 800d42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d430:	005b      	lsls	r3, r3, #1
 800d432:	440b      	add	r3, r1
 800d434:	4413      	add	r3, r2
 800d436:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800d438:	693a      	ldr	r2, [r7, #16]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	441a      	add	r2, r3
 800d43e:	4937      	ldr	r1, [pc, #220]	; (800d51c <I2C_Compute_SCLL_SCLH+0x204>)
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	202c      	movs	r0, #44	; 0x2c
 800d444:	fb00 f303 	mul.w	r3, r0, r3
 800d448:	440b      	add	r3, r1
 800d44a:	3320      	adds	r3, #32
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	441a      	add	r2, r3
 800d450:	4932      	ldr	r1, [pc, #200]	; (800d51c <I2C_Compute_SCLL_SCLH+0x204>)
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	202c      	movs	r0, #44	; 0x2c
 800d456:	fb00 f303 	mul.w	r3, r0, r3
 800d45a:	440b      	add	r3, r1
 800d45c:	3324      	adds	r3, #36	; 0x24
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4413      	add	r3, r2
 800d462:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d338      	bcc.n	800d4de <I2C_Compute_SCLL_SCLH+0x1c6>
 800d46c:	68ba      	ldr	r2, [r7, #8]
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	429a      	cmp	r2, r3
 800d472:	d834      	bhi.n	800d4de <I2C_Compute_SCLL_SCLH+0x1c6>
 800d474:	4a29      	ldr	r2, [pc, #164]	; (800d51c <I2C_Compute_SCLL_SCLH+0x204>)
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	212c      	movs	r1, #44	; 0x2c
 800d47a:	fb01 f303 	mul.w	r3, r1, r3
 800d47e:	4413      	add	r3, r2
 800d480:	331c      	adds	r3, #28
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68fa      	ldr	r2, [r7, #12]
 800d486:	429a      	cmp	r2, r3
 800d488:	d329      	bcc.n	800d4de <I2C_Compute_SCLL_SCLH+0x1c6>
 800d48a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d225      	bcs.n	800d4de <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800d492:	68ba      	ldr	r2, [r7, #8]
 800d494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800d49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	da02      	bge.n	800d4a6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800d4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a2:	425b      	negs	r3, r3
 800d4a4:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d917      	bls.n	800d4de <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800d4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b0:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800d4b2:	491b      	ldr	r1, [pc, #108]	; (800d520 <I2C_Compute_SCLL_SCLH+0x208>)
 800d4b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	4413      	add	r3, r2
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	440b      	add	r3, r1
 800d4c0:	3310      	adds	r3, #16
 800d4c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4c4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800d4c6:	4916      	ldr	r1, [pc, #88]	; (800d520 <I2C_Compute_SCLL_SCLH+0x208>)
 800d4c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4413      	add	r3, r2
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	440b      	add	r3, r1
 800d4d4:	330c      	adds	r3, #12
 800d4d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4d8:	601a      	str	r2, [r3, #0]
              ret = count;
 800d4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4dc:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800d4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800d4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e6:	2bff      	cmp	r3, #255	; 0xff
 800d4e8:	d999      	bls.n	800d41e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800d4ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4f2:	2bff      	cmp	r3, #255	; 0xff
 800d4f4:	f67f af6f 	bls.w	800d3d6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800d4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	637b      	str	r3, [r7, #52]	; 0x34
 800d4fe:	4b09      	ldr	r3, [pc, #36]	; (800d524 <I2C_Compute_SCLL_SCLH+0x20c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d504:	429a      	cmp	r2, r3
 800d506:	f4ff af56 	bcc.w	800d3b6 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800d50a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	374c      	adds	r7, #76	; 0x4c
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr
 800d518:	3b9aca00 	.word	0x3b9aca00
 800d51c:	0802c2f4 	.word	0x0802c2f4
 800d520:	2400a3e4 	.word	0x2400a3e4
 800d524:	2400ade4 	.word	0x2400ade4

0800d528 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b08a      	sub	sp, #40	; 0x28
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800d530:	4b31      	ldr	r3, [pc, #196]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d536:	4a30      	ldr	r2, [pc, #192]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d538:	f043 0308 	orr.w	r3, r3, #8
 800d53c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d540:	4b2d      	ldr	r3, [pc, #180]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d546:	f003 0308 	and.w	r3, r3, #8
 800d54a:	613b      	str	r3, [r7, #16]
 800d54c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800d54e:	4b2a      	ldr	r3, [pc, #168]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d554:	4a28      	ldr	r2, [pc, #160]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d556:	f043 0308 	orr.w	r3, r3, #8
 800d55a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d55e:	4b26      	ldr	r3, [pc, #152]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d564:	f003 0308 	and.w	r3, r3, #8
 800d568:	60fb      	str	r3, [r7, #12]
 800d56a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800d56c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d570:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800d572:	2312      	movs	r3, #18
 800d574:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800d576:	2300      	movs	r3, #0
 800d578:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800d57a:	2302      	movs	r3, #2
 800d57c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800d57e:	2304      	movs	r3, #4
 800d580:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800d582:	f107 0314 	add.w	r3, r7, #20
 800d586:	4619      	mov	r1, r3
 800d588:	481c      	ldr	r0, [pc, #112]	; (800d5fc <I2C4_MspInit+0xd4>)
 800d58a:	f001 fd67 	bl	800f05c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800d58e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d592:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800d594:	2312      	movs	r3, #18
 800d596:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800d598:	2300      	movs	r3, #0
 800d59a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800d59c:	2302      	movs	r3, #2
 800d59e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800d5a0:	2304      	movs	r3, #4
 800d5a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800d5a4:	f107 0314 	add.w	r3, r7, #20
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	4814      	ldr	r0, [pc, #80]	; (800d5fc <I2C4_MspInit+0xd4>)
 800d5ac:	f001 fd56 	bl	800f05c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800d5b0:	4b11      	ldr	r3, [pc, #68]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d5b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d5b6:	4a10      	ldr	r2, [pc, #64]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d5c0:	4b0d      	ldr	r3, [pc, #52]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d5c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d5c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5ca:	60bb      	str	r3, [r7, #8]
 800d5cc:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800d5ce:	4b0a      	ldr	r3, [pc, #40]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d5d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d5d4:	4a08      	ldr	r2, [pc, #32]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d5d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800d5de:	4b06      	ldr	r3, [pc, #24]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d5e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d5e4:	4a04      	ldr	r2, [pc, #16]	; (800d5f8 <I2C4_MspInit+0xd0>)
 800d5e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800d5ee:	bf00      	nop
 800d5f0:	3728      	adds	r7, #40	; 0x28
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	58024400 	.word	0x58024400
 800d5fc:	58020c00 	.word	0x58020c00

0800d600 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b088      	sub	sp, #32
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800d608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d60c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	4619      	mov	r1, r3
 800d612:	480b      	ldr	r0, [pc, #44]	; (800d640 <I2C4_MspDeInit+0x40>)
 800d614:	f001 fed2 	bl	800f3bc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800d618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d61c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	4619      	mov	r1, r3
 800d622:	4807      	ldr	r0, [pc, #28]	; (800d640 <I2C4_MspDeInit+0x40>)
 800d624:	f001 feca 	bl	800f3bc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800d628:	4b06      	ldr	r3, [pc, #24]	; (800d644 <I2C4_MspDeInit+0x44>)
 800d62a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d62e:	4a05      	ldr	r2, [pc, #20]	; (800d644 <I2C4_MspDeInit+0x44>)
 800d630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d634:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800d638:	bf00      	nop
 800d63a:	3720      	adds	r7, #32
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	58020c00 	.word	0x58020c00
 800d644:	58024400 	.word	0x58024400

0800d648 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b088      	sub	sp, #32
 800d64c:	af04      	add	r7, sp, #16
 800d64e:	607b      	str	r3, [r7, #4]
 800d650:	4603      	mov	r3, r0
 800d652:	81fb      	strh	r3, [r7, #14]
 800d654:	460b      	mov	r3, r1
 800d656:	81bb      	strh	r3, [r7, #12]
 800d658:	4613      	mov	r3, r2
 800d65a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800d65c:	8978      	ldrh	r0, [r7, #10]
 800d65e:	89ba      	ldrh	r2, [r7, #12]
 800d660:	89f9      	ldrh	r1, [r7, #14]
 800d662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d666:	9302      	str	r3, [sp, #8]
 800d668:	8b3b      	ldrh	r3, [r7, #24]
 800d66a:	9301      	str	r3, [sp, #4]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	4603      	mov	r3, r0
 800d672:	4807      	ldr	r0, [pc, #28]	; (800d690 <I2C4_WriteReg+0x48>)
 800d674:	f002 f8c8 	bl	800f808 <HAL_I2C_Mem_Write>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d101      	bne.n	800d682 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800d67e:	2300      	movs	r3, #0
 800d680:	e001      	b.n	800d686 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800d682:	f06f 0307 	mvn.w	r3, #7
}
 800d686:	4618      	mov	r0, r3
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	2400b604 	.word	0x2400b604

0800d694 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b088      	sub	sp, #32
 800d698:	af04      	add	r7, sp, #16
 800d69a:	607b      	str	r3, [r7, #4]
 800d69c:	4603      	mov	r3, r0
 800d69e:	81fb      	strh	r3, [r7, #14]
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	81bb      	strh	r3, [r7, #12]
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800d6a8:	8978      	ldrh	r0, [r7, #10]
 800d6aa:	89ba      	ldrh	r2, [r7, #12]
 800d6ac:	89f9      	ldrh	r1, [r7, #14]
 800d6ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d6b2:	9302      	str	r3, [sp, #8]
 800d6b4:	8b3b      	ldrh	r3, [r7, #24]
 800d6b6:	9301      	str	r3, [sp, #4]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	4603      	mov	r3, r0
 800d6be:	4807      	ldr	r0, [pc, #28]	; (800d6dc <I2C4_ReadReg+0x48>)
 800d6c0:	f002 f9b6 	bl	800fa30 <HAL_I2C_Mem_Read>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d101      	bne.n	800d6ce <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	e001      	b.n	800d6d2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800d6ce:	f06f 0307 	mvn.w	r3, #7
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	2400b604 	.word	0x2400b604

0800d6e0 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b090      	sub	sp, #64	; 0x40
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d003      	beq.n	800d6fc <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800d6f4:	f06f 0301 	mvn.w	r3, #1
 800d6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6fa:	e090      	b.n	800d81e <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800d6fc:	494a      	ldr	r1, [pc, #296]	; (800d828 <BSP_QSPI_Init+0x148>)
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	4613      	mov	r3, r2
 800d702:	005b      	lsls	r3, r3, #1
 800d704:	4413      	add	r3, r2
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	440b      	add	r3, r1
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f040 8086 	bne.w	800d81e <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800d712:	4846      	ldr	r0, [pc, #280]	; (800d82c <BSP_QSPI_Init+0x14c>)
 800d714:	f000 f99c 	bl	800da50 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800d718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d17f      	bne.n	800d81e <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800d71e:	f107 031c 	add.w	r3, r7, #28
 800d722:	4618      	mov	r0, r3
 800d724:	f7fe ffe9 	bl	800c6fa <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	785b      	ldrb	r3, [r3, #1]
 800d72c:	461a      	mov	r2, r3
 800d72e:	4b40      	ldr	r3, [pc, #256]	; (800d830 <BSP_QSPI_Init+0x150>)
 800d730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d734:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800d736:	2340      	movs	r3, #64	; 0x40
 800d738:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d740:	fa93 f3a3 	rbit	r3, r3
 800d744:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800d746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d748:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800d74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d101      	bne.n	800d754 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800d750:	2320      	movs	r3, #32
 800d752:	e003      	b.n	800d75c <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800d754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d756:	fab3 f383 	clz	r3, r3
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	3b01      	subs	r3, #1
 800d75e:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	785b      	ldrb	r3, [r3, #1]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d101      	bne.n	800d76c <BSP_QSPI_Init+0x8c>
 800d768:	2310      	movs	r3, #16
 800d76a:	e000      	b.n	800d76e <BSP_QSPI_Init+0x8e>
 800d76c:	2300      	movs	r3, #0
 800d76e:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800d770:	f107 030c 	add.w	r3, r7, #12
 800d774:	4619      	mov	r1, r3
 800d776:	482d      	ldr	r0, [pc, #180]	; (800d82c <BSP_QSPI_Init+0x14c>)
 800d778:	f000 f85c 	bl	800d834 <MX_QSPI_Init>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800d782:	f06f 0303 	mvn.w	r3, #3
 800d786:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d788:	e049      	b.n	800d81e <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 faa8 	bl	800dce0 <QSPI_ResetMemory>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d003      	beq.n	800d79e <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800d796:	f06f 0304 	mvn.w	r3, #4
 800d79a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d79c:	e03f      	b.n	800d81e <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d79e:	4922      	ldr	r1, [pc, #136]	; (800d828 <BSP_QSPI_Init+0x148>)
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	005b      	lsls	r3, r3, #1
 800d7a6:	4413      	add	r3, r2
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	440b      	add	r3, r1
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	481e      	ldr	r0, [pc, #120]	; (800d82c <BSP_QSPI_Init+0x14c>)
 800d7b4:	f7ff f810 	bl	800c7d8 <MT25TL01G_AutoPollingMemReady>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d003      	beq.n	800d7c6 <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800d7be:	f06f 0304 	mvn.w	r3, #4
 800d7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7c4:	e02b      	b.n	800d81e <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d7c6:	4918      	ldr	r1, [pc, #96]	; (800d828 <BSP_QSPI_Init+0x148>)
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	005b      	lsls	r3, r3, #1
 800d7ce:	4413      	add	r3, r2
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	440b      	add	r3, r1
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	4619      	mov	r1, r3
 800d7da:	4814      	ldr	r0, [pc, #80]	; (800d82c <BSP_QSPI_Init+0x14c>)
 800d7dc:	f7fe ffb4 	bl	800c748 <MT25TL01G_Enter4BytesAddressMode>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d003      	beq.n	800d7ee <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800d7e6:	f06f 0304 	mvn.w	r3, #4
 800d7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7ec:	e017      	b.n	800d81e <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 fae2 	bl	800ddb8 <QSPI_DummyCyclesCfg>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d003      	beq.n	800d802 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800d7fa:	f06f 0304 	mvn.w	r3, #4
 800d7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d800:	e00d      	b.n	800d81e <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	7819      	ldrb	r1, [r3, #0]
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	785b      	ldrb	r3, [r3, #1]
 800d80a:	461a      	mov	r2, r3
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 f89d 	bl	800d94c <BSP_QSPI_ConfigFlash>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d002      	beq.n	800d81e <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800d818:	f06f 0304 	mvn.w	r3, #4
 800d81c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800d81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d820:	4618      	mov	r0, r3
 800d822:	3740      	adds	r7, #64	; 0x40
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	2400b650 	.word	0x2400b650
 800d82c:	2400b52c 	.word	0x2400b52c
 800d830:	0802c378 	.word	0x0802c378

0800d834 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4a13      	ldr	r2, [pc, #76]	; (800d890 <MX_QSPI_Init+0x5c>)
 800d842:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	685a      	ldr	r2, [r3, #4]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2201      	movs	r2, #1
 800d850:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	689a      	ldr	r2, [r3, #8]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f44f 7240 	mov.w	r2, #768	; 0x300
 800d868:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	68da      	ldr	r2, [r3, #12]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f003 fa9e 	bl	8010dc0 <HAL_QSPI_Init>
 800d884:	4603      	mov	r3, r0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	52005000 	.word	0x52005000

0800d894 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800d89c:	2300      	movs	r3, #0
 800d89e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d003      	beq.n	800d8ae <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800d8a6:	f06f 0301 	mvn.w	r3, #1
 800d8aa:	60fb      	str	r3, [r7, #12]
 800d8ac:	e045      	b.n	800d93a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800d8ae:	4925      	ldr	r1, [pc, #148]	; (800d944 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	005b      	lsls	r3, r3, #1
 800d8b6:	4413      	add	r3, r2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	440b      	add	r3, r1
 800d8bc:	3302      	adds	r3, #2
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d11d      	bne.n	800d900 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d8c4:	491f      	ldr	r1, [pc, #124]	; (800d944 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	005b      	lsls	r3, r3, #1
 800d8cc:	4413      	add	r3, r2
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	440b      	add	r3, r1
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	481b      	ldr	r0, [pc, #108]	; (800d948 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800d8da:	f7ff f8d3 	bl	800ca84 <MT25TL01G_EnableMemoryMappedModeSTR>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d003      	beq.n	800d8ec <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d8e4:	f06f 0304 	mvn.w	r3, #4
 800d8e8:	60fb      	str	r3, [r7, #12]
 800d8ea:	e026      	b.n	800d93a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800d8ec:	4915      	ldr	r1, [pc, #84]	; (800d944 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	4413      	add	r3, r2
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	440b      	add	r3, r1
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	701a      	strb	r2, [r3, #0]
 800d8fe:	e01c      	b.n	800d93a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d900:	4910      	ldr	r1, [pc, #64]	; (800d944 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	4613      	mov	r3, r2
 800d906:	005b      	lsls	r3, r3, #1
 800d908:	4413      	add	r3, r2
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	440b      	add	r3, r1
 800d90e:	3301      	adds	r3, #1
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	4619      	mov	r1, r3
 800d914:	480c      	ldr	r0, [pc, #48]	; (800d948 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800d916:	f7ff f84b 	bl	800c9b0 <MT25TL01G_EnableMemoryMappedModeDTR>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d003      	beq.n	800d928 <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d920:	f06f 0304 	mvn.w	r3, #4
 800d924:	60fb      	str	r3, [r7, #12]
 800d926:	e008      	b.n	800d93a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800d928:	4906      	ldr	r1, [pc, #24]	; (800d944 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	4613      	mov	r3, r2
 800d92e:	005b      	lsls	r3, r3, #1
 800d930:	4413      	add	r3, r2
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	440b      	add	r3, r1
 800d936:	2202      	movs	r2, #2
 800d938:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800d93a:	68fb      	ldr	r3, [r7, #12]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	2400b650 	.word	0x2400b650
 800d948:	2400b52c 	.word	0x2400b52c

0800d94c <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	460b      	mov	r3, r1
 800d956:	70fb      	strb	r3, [r7, #3]
 800d958:	4613      	mov	r3, r2
 800d95a:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800d95c:	2300      	movs	r3, #0
 800d95e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d003      	beq.n	800d96e <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800d966:	f06f 0301 	mvn.w	r3, #1
 800d96a:	60fb      	str	r3, [r7, #12]
 800d96c:	e067      	b.n	800da3e <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800d96e:	4936      	ldr	r1, [pc, #216]	; (800da48 <BSP_QSPI_ConfigFlash+0xfc>)
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	4613      	mov	r3, r2
 800d974:	005b      	lsls	r3, r3, #1
 800d976:	4413      	add	r3, r2
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	440b      	add	r3, r1
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	2b02      	cmp	r3, #2
 800d980:	d103      	bne.n	800d98a <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800d982:	f06f 0319 	mvn.w	r3, #25
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	e059      	b.n	800da3e <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800d98a:	78bb      	ldrb	r3, [r7, #2]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <BSP_QSPI_ConfigFlash+0x48>
 800d990:	2310      	movs	r3, #16
 800d992:	e000      	b.n	800d996 <BSP_QSPI_ConfigFlash+0x4a>
 800d994:	2300      	movs	r3, #0
 800d996:	4a2d      	ldr	r2, [pc, #180]	; (800da4c <BSP_QSPI_ConfigFlash+0x100>)
 800d998:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800d99a:	482c      	ldr	r0, [pc, #176]	; (800da4c <BSP_QSPI_ConfigFlash+0x100>)
 800d99c:	f003 fa10 	bl	8010dc0 <HAL_QSPI_Init>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800d9a6:	f06f 0303 	mvn.w	r3, #3
 800d9aa:	60fb      	str	r3, [r7, #12]
 800d9ac:	e047      	b.n	800da3e <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800d9ae:	4926      	ldr	r1, [pc, #152]	; (800da48 <BSP_QSPI_ConfigFlash+0xfc>)
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	005b      	lsls	r3, r3, #1
 800d9b6:	4413      	add	r3, r2
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	440b      	add	r3, r1
 800d9bc:	3301      	adds	r3, #1
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	2b03      	cmp	r3, #3
 800d9c2:	d10c      	bne.n	800d9de <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800d9c4:	78fb      	ldrb	r3, [r7, #3]
 800d9c6:	2b03      	cmp	r3, #3
 800d9c8:	d016      	beq.n	800d9f8 <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800d9ca:	4820      	ldr	r0, [pc, #128]	; (800da4c <BSP_QSPI_ConfigFlash+0x100>)
 800d9cc:	f7fe ffc5 	bl	800c95a <MT25TL01G_ExitQPIMode>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d010      	beq.n	800d9f8 <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800d9d6:	f06f 0304 	mvn.w	r3, #4
 800d9da:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800d9dc:	e00c      	b.n	800d9f8 <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 800d9de:	78fb      	ldrb	r3, [r7, #3]
 800d9e0:	2b03      	cmp	r3, #3
 800d9e2:	d10b      	bne.n	800d9fc <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800d9e4:	4819      	ldr	r0, [pc, #100]	; (800da4c <BSP_QSPI_ConfigFlash+0x100>)
 800d9e6:	f7fe ff8e 	bl	800c906 <MT25TL01G_EnterQPIMode>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d005      	beq.n	800d9fc <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800d9f0:	f06f 0304 	mvn.w	r3, #4
 800d9f4:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800d9f6:	e001      	b.n	800d9fc <BSP_QSPI_ConfigFlash+0xb0>
          break;
 800d9f8:	bf00      	nop
 800d9fa:	e000      	b.n	800d9fe <BSP_QSPI_ConfigFlash+0xb2>
          break;
 800d9fc:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d11c      	bne.n	800da3e <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800da04:	4910      	ldr	r1, [pc, #64]	; (800da48 <BSP_QSPI_ConfigFlash+0xfc>)
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	4613      	mov	r3, r2
 800da0a:	005b      	lsls	r3, r3, #1
 800da0c:	4413      	add	r3, r2
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	440b      	add	r3, r1
 800da12:	2201      	movs	r2, #1
 800da14:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800da16:	490c      	ldr	r1, [pc, #48]	; (800da48 <BSP_QSPI_ConfigFlash+0xfc>)
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	4613      	mov	r3, r2
 800da1c:	005b      	lsls	r3, r3, #1
 800da1e:	4413      	add	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	440b      	add	r3, r1
 800da24:	3301      	adds	r3, #1
 800da26:	78fa      	ldrb	r2, [r7, #3]
 800da28:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800da2a:	4907      	ldr	r1, [pc, #28]	; (800da48 <BSP_QSPI_ConfigFlash+0xfc>)
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	4613      	mov	r3, r2
 800da30:	005b      	lsls	r3, r3, #1
 800da32:	4413      	add	r3, r2
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	440b      	add	r3, r1
 800da38:	3302      	adds	r3, #2
 800da3a:	78ba      	ldrb	r2, [r7, #2]
 800da3c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800da3e:	68fb      	ldr	r3, [r7, #12]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3710      	adds	r7, #16
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	2400b650 	.word	0x2400b650
 800da4c:	2400b52c 	.word	0x2400b52c

0800da50 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b094      	sub	sp, #80	; 0x50
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800da58:	4b9c      	ldr	r3, [pc, #624]	; (800dccc <QSPI_MspInit+0x27c>)
 800da5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800da5e:	4a9b      	ldr	r2, [pc, #620]	; (800dccc <QSPI_MspInit+0x27c>)
 800da60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da64:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800da68:	4b98      	ldr	r3, [pc, #608]	; (800dccc <QSPI_MspInit+0x27c>)
 800da6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800da6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da72:	63bb      	str	r3, [r7, #56]	; 0x38
 800da74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800da76:	4b95      	ldr	r3, [pc, #596]	; (800dccc <QSPI_MspInit+0x27c>)
 800da78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da7a:	4a94      	ldr	r2, [pc, #592]	; (800dccc <QSPI_MspInit+0x27c>)
 800da7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da80:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800da82:	4b92      	ldr	r3, [pc, #584]	; (800dccc <QSPI_MspInit+0x27c>)
 800da84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da86:	4a91      	ldr	r2, [pc, #580]	; (800dccc <QSPI_MspInit+0x27c>)
 800da88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da8c:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800da8e:	4b8f      	ldr	r3, [pc, #572]	; (800dccc <QSPI_MspInit+0x27c>)
 800da90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800da94:	4a8d      	ldr	r2, [pc, #564]	; (800dccc <QSPI_MspInit+0x27c>)
 800da96:	f043 0320 	orr.w	r3, r3, #32
 800da9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800da9e:	4b8b      	ldr	r3, [pc, #556]	; (800dccc <QSPI_MspInit+0x27c>)
 800daa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800daa4:	f003 0320 	and.w	r3, r3, #32
 800daa8:	637b      	str	r3, [r7, #52]	; 0x34
 800daaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800daac:	4b87      	ldr	r3, [pc, #540]	; (800dccc <QSPI_MspInit+0x27c>)
 800daae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dab2:	4a86      	ldr	r2, [pc, #536]	; (800dccc <QSPI_MspInit+0x27c>)
 800dab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dabc:	4b83      	ldr	r3, [pc, #524]	; (800dccc <QSPI_MspInit+0x27c>)
 800dabe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dac6:	633b      	str	r3, [r7, #48]	; 0x30
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800daca:	4b80      	ldr	r3, [pc, #512]	; (800dccc <QSPI_MspInit+0x27c>)
 800dacc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dad0:	4a7e      	ldr	r2, [pc, #504]	; (800dccc <QSPI_MspInit+0x27c>)
 800dad2:	f043 0308 	orr.w	r3, r3, #8
 800dad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dada:	4b7c      	ldr	r3, [pc, #496]	; (800dccc <QSPI_MspInit+0x27c>)
 800dadc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dae0:	f003 0308 	and.w	r3, r3, #8
 800dae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800dae8:	4b78      	ldr	r3, [pc, #480]	; (800dccc <QSPI_MspInit+0x27c>)
 800daea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800daee:	4a77      	ldr	r2, [pc, #476]	; (800dccc <QSPI_MspInit+0x27c>)
 800daf0:	f043 0320 	orr.w	r3, r3, #32
 800daf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800daf8:	4b74      	ldr	r3, [pc, #464]	; (800dccc <QSPI_MspInit+0x27c>)
 800dafa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dafe:	f003 0320 	and.w	r3, r3, #32
 800db02:	62bb      	str	r3, [r7, #40]	; 0x28
 800db04:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800db06:	4b71      	ldr	r3, [pc, #452]	; (800dccc <QSPI_MspInit+0x27c>)
 800db08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db0c:	4a6f      	ldr	r2, [pc, #444]	; (800dccc <QSPI_MspInit+0x27c>)
 800db0e:	f043 0320 	orr.w	r3, r3, #32
 800db12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800db16:	4b6d      	ldr	r3, [pc, #436]	; (800dccc <QSPI_MspInit+0x27c>)
 800db18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db1c:	f003 0320 	and.w	r3, r3, #32
 800db20:	627b      	str	r3, [r7, #36]	; 0x24
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800db24:	4b69      	ldr	r3, [pc, #420]	; (800dccc <QSPI_MspInit+0x27c>)
 800db26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db2a:	4a68      	ldr	r2, [pc, #416]	; (800dccc <QSPI_MspInit+0x27c>)
 800db2c:	f043 0320 	orr.w	r3, r3, #32
 800db30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800db34:	4b65      	ldr	r3, [pc, #404]	; (800dccc <QSPI_MspInit+0x27c>)
 800db36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db3a:	f003 0320 	and.w	r3, r3, #32
 800db3e:	623b      	str	r3, [r7, #32]
 800db40:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800db42:	4b62      	ldr	r3, [pc, #392]	; (800dccc <QSPI_MspInit+0x27c>)
 800db44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db48:	4a60      	ldr	r2, [pc, #384]	; (800dccc <QSPI_MspInit+0x27c>)
 800db4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800db52:	4b5e      	ldr	r3, [pc, #376]	; (800dccc <QSPI_MspInit+0x27c>)
 800db54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db5c:	61fb      	str	r3, [r7, #28]
 800db5e:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800db60:	4b5a      	ldr	r3, [pc, #360]	; (800dccc <QSPI_MspInit+0x27c>)
 800db62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db66:	4a59      	ldr	r2, [pc, #356]	; (800dccc <QSPI_MspInit+0x27c>)
 800db68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800db70:	4b56      	ldr	r3, [pc, #344]	; (800dccc <QSPI_MspInit+0x27c>)
 800db72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db7a:	61bb      	str	r3, [r7, #24]
 800db7c:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800db7e:	4b53      	ldr	r3, [pc, #332]	; (800dccc <QSPI_MspInit+0x27c>)
 800db80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db84:	4a51      	ldr	r2, [pc, #324]	; (800dccc <QSPI_MspInit+0x27c>)
 800db86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800db8e:	4b4f      	ldr	r3, [pc, #316]	; (800dccc <QSPI_MspInit+0x27c>)
 800db90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db98:	617b      	str	r3, [r7, #20]
 800db9a:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800db9c:	4b4b      	ldr	r3, [pc, #300]	; (800dccc <QSPI_MspInit+0x27c>)
 800db9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dba2:	4a4a      	ldr	r2, [pc, #296]	; (800dccc <QSPI_MspInit+0x27c>)
 800dba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dbac:	4b47      	ldr	r3, [pc, #284]	; (800dccc <QSPI_MspInit+0x27c>)
 800dbae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dbb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbb6:	613b      	str	r3, [r7, #16]
 800dbb8:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800dbba:	4b44      	ldr	r3, [pc, #272]	; (800dccc <QSPI_MspInit+0x27c>)
 800dbbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dbc0:	4a42      	ldr	r2, [pc, #264]	; (800dccc <QSPI_MspInit+0x27c>)
 800dbc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dbca:	4b40      	ldr	r3, [pc, #256]	; (800dccc <QSPI_MspInit+0x27c>)
 800dbcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dbd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbd4:	60fb      	str	r3, [r7, #12]
 800dbd6:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800dbd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800dbde:	2302      	movs	r3, #2
 800dbe0:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800dbe2:	2303      	movs	r3, #3
 800dbe4:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800dbea:	2309      	movs	r3, #9
 800dbec:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800dbee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4836      	ldr	r0, [pc, #216]	; (800dcd0 <QSPI_MspInit+0x280>)
 800dbf6:	f001 fa31 	bl	800f05c <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800dbfa:	2340      	movs	r3, #64	; 0x40
 800dbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800dc02:	230a      	movs	r3, #10
 800dc04:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800dc06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	4831      	ldr	r0, [pc, #196]	; (800dcd4 <QSPI_MspInit+0x284>)
 800dc0e:	f001 fa25 	bl	800f05c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800dc12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc16:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800dc1c:	2309      	movs	r3, #9
 800dc1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800dc20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dc24:	4619      	mov	r1, r3
 800dc26:	482c      	ldr	r0, [pc, #176]	; (800dcd8 <QSPI_MspInit+0x288>)
 800dc28:	f001 fa18 	bl	800f05c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800dc2c:	2304      	movs	r3, #4
 800dc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800dc30:	2309      	movs	r3, #9
 800dc32:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800dc34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dc38:	4619      	mov	r1, r3
 800dc3a:	4828      	ldr	r0, [pc, #160]	; (800dcdc <QSPI_MspInit+0x28c>)
 800dc3c:	f001 fa0e 	bl	800f05c <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800dc40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc44:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800dc46:	230a      	movs	r3, #10
 800dc48:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800dc4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dc4e:	4619      	mov	r1, r3
 800dc50:	481f      	ldr	r0, [pc, #124]	; (800dcd0 <QSPI_MspInit+0x280>)
 800dc52:	f001 fa03 	bl	800f05c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800dc56:	2308      	movs	r3, #8
 800dc58:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800dc5a:	2309      	movs	r3, #9
 800dc5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800dc5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dc62:	4619      	mov	r1, r3
 800dc64:	481d      	ldr	r0, [pc, #116]	; (800dcdc <QSPI_MspInit+0x28c>)
 800dc66:	f001 f9f9 	bl	800f05c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800dc6a:	2380      	movs	r3, #128	; 0x80
 800dc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800dc6e:	2309      	movs	r3, #9
 800dc70:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800dc72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dc76:	4619      	mov	r1, r3
 800dc78:	4815      	ldr	r0, [pc, #84]	; (800dcd0 <QSPI_MspInit+0x280>)
 800dc7a:	f001 f9ef 	bl	800f05c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800dc7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800dc84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dc88:	4619      	mov	r1, r3
 800dc8a:	4812      	ldr	r0, [pc, #72]	; (800dcd4 <QSPI_MspInit+0x284>)
 800dc8c:	f001 f9e6 	bl	800f05c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800dc90:	2340      	movs	r3, #64	; 0x40
 800dc92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800dc94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dc98:	4619      	mov	r1, r3
 800dc9a:	480d      	ldr	r0, [pc, #52]	; (800dcd0 <QSPI_MspInit+0x280>)
 800dc9c:	f001 f9de 	bl	800f05c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800dca0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800dca6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dcaa:	4619      	mov	r1, r3
 800dcac:	4809      	ldr	r0, [pc, #36]	; (800dcd4 <QSPI_MspInit+0x284>)
 800dcae:	f001 f9d5 	bl	800f05c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	210f      	movs	r1, #15
 800dcb6:	205c      	movs	r0, #92	; 0x5c
 800dcb8:	f000 fec0 	bl	800ea3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800dcbc:	205c      	movs	r0, #92	; 0x5c
 800dcbe:	f000 fed7 	bl	800ea70 <HAL_NVIC_EnableIRQ>
}
 800dcc2:	bf00      	nop
 800dcc4:	3750      	adds	r7, #80	; 0x50
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	58024400 	.word	0x58024400
 800dcd0:	58021400 	.word	0x58021400
 800dcd4:	58021800 	.word	0x58021800
 800dcd8:	58020c00 	.word	0x58020c00
 800dcdc:	58021c00 	.word	0x58021c00

0800dce0 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800dce8:	2300      	movs	r3, #0
 800dcea:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800dcec:	2103      	movs	r1, #3
 800dcee:	4830      	ldr	r0, [pc, #192]	; (800ddb0 <QSPI_ResetMemory+0xd0>)
 800dcf0:	f7fe ff30 	bl	800cb54 <MT25TL01G_ResetEnable>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d003      	beq.n	800dd02 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 800dcfa:	f06f 0304 	mvn.w	r3, #4
 800dcfe:	60fb      	str	r3, [r7, #12]
 800dd00:	e051      	b.n	800dda6 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800dd02:	2103      	movs	r1, #3
 800dd04:	482a      	ldr	r0, [pc, #168]	; (800ddb0 <QSPI_ResetMemory+0xd0>)
 800dd06:	f7fe ff57 	bl	800cbb8 <MT25TL01G_ResetMemory>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d003      	beq.n	800dd18 <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800dd10:	f06f 0304 	mvn.w	r3, #4
 800dd14:	60fb      	str	r3, [r7, #12]
 800dd16:	e046      	b.n	800dda6 <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800dd18:	4926      	ldr	r1, [pc, #152]	; (800ddb4 <QSPI_ResetMemory+0xd4>)
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	005b      	lsls	r3, r3, #1
 800dd20:	4413      	add	r3, r2
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	440b      	add	r3, r1
 800dd26:	3301      	adds	r3, #1
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	4820      	ldr	r0, [pc, #128]	; (800ddb0 <QSPI_ResetMemory+0xd0>)
 800dd2e:	f7fe fd53 	bl	800c7d8 <MT25TL01G_AutoPollingMemReady>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d003      	beq.n	800dd40 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800dd38:	f06f 0304 	mvn.w	r3, #4
 800dd3c:	60fb      	str	r3, [r7, #12]
 800dd3e:	e032      	b.n	800dda6 <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800dd40:	2100      	movs	r1, #0
 800dd42:	481b      	ldr	r0, [pc, #108]	; (800ddb0 <QSPI_ResetMemory+0xd0>)
 800dd44:	f7fe ff06 	bl	800cb54 <MT25TL01G_ResetEnable>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d003      	beq.n	800dd56 <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800dd4e:	f06f 0304 	mvn.w	r3, #4
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	e027      	b.n	800dda6 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800dd56:	2100      	movs	r1, #0
 800dd58:	4815      	ldr	r0, [pc, #84]	; (800ddb0 <QSPI_ResetMemory+0xd0>)
 800dd5a:	f7fe ff2d 	bl	800cbb8 <MT25TL01G_ResetMemory>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d003      	beq.n	800dd6c <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800dd64:	f06f 0304 	mvn.w	r3, #4
 800dd68:	60fb      	str	r3, [r7, #12]
 800dd6a:	e01c      	b.n	800dda6 <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800dd6c:	4911      	ldr	r1, [pc, #68]	; (800ddb4 <QSPI_ResetMemory+0xd4>)
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	4613      	mov	r3, r2
 800dd72:	005b      	lsls	r3, r3, #1
 800dd74:	4413      	add	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	440b      	add	r3, r1
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800dd7e:	490d      	ldr	r1, [pc, #52]	; (800ddb4 <QSPI_ResetMemory+0xd4>)
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	4613      	mov	r3, r2
 800dd84:	005b      	lsls	r3, r3, #1
 800dd86:	4413      	add	r3, r2
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	440b      	add	r3, r1
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	2200      	movs	r2, #0
 800dd90:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800dd92:	4908      	ldr	r1, [pc, #32]	; (800ddb4 <QSPI_ResetMemory+0xd4>)
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	4613      	mov	r3, r2
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	4413      	add	r3, r2
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	440b      	add	r3, r1
 800dda0:	3302      	adds	r3, #2
 800dda2:	2200      	movs	r2, #0
 800dda4:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 800dda6:	68fb      	ldr	r3, [r7, #12]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3710      	adds	r7, #16
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	2400b52c 	.word	0x2400b52c
 800ddb4:	2400b650 	.word	0x2400b650

0800ddb8 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b092      	sub	sp, #72	; 0x48
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ddc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ddcc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800ddce:	2385      	movs	r3, #133	; 0x85
 800ddd0:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800ddda:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ddde:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800dde0:	2300      	movs	r3, #0
 800dde2:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 800dde4:	2302      	movs	r3, #2
 800dde6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800dde8:	2300      	movs	r3, #0
 800ddea:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ddec:	2300      	movs	r3, #0
 800ddee:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ddf4:	f107 030c 	add.w	r3, r7, #12
 800ddf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	482b      	ldr	r0, [pc, #172]	; (800deac <QSPI_DummyCyclesCfg+0xf4>)
 800de00:	f003 fa0c 	bl	801121c <HAL_QSPI_Command>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	d002      	beq.n	800de10 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800de0a:	f06f 0304 	mvn.w	r3, #4
 800de0e:	e048      	b.n	800dea2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800de10:	f107 030a 	add.w	r3, r7, #10
 800de14:	f241 3288 	movw	r2, #5000	; 0x1388
 800de18:	4619      	mov	r1, r3
 800de1a:	4824      	ldr	r0, [pc, #144]	; (800deac <QSPI_DummyCyclesCfg+0xf4>)
 800de1c:	f003 faee 	bl	80113fc <HAL_QSPI_Receive>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d002      	beq.n	800de2c <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800de26:	f06f 0304 	mvn.w	r3, #4
 800de2a:	e03a      	b.n	800dea2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800de2c:	4920      	ldr	r1, [pc, #128]	; (800deb0 <QSPI_DummyCyclesCfg+0xf8>)
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	4613      	mov	r3, r2
 800de32:	005b      	lsls	r3, r3, #1
 800de34:	4413      	add	r3, r2
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	440b      	add	r3, r1
 800de3a:	3301      	adds	r3, #1
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	4619      	mov	r1, r3
 800de40:	481a      	ldr	r0, [pc, #104]	; (800deac <QSPI_DummyCyclesCfg+0xf4>)
 800de42:	f7fe fd05 	bl	800c850 <MT25TL01G_WriteEnable>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d002      	beq.n	800de52 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800de4c:	f06f 0304 	mvn.w	r3, #4
 800de50:	e027      	b.n	800dea2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800de52:	2381      	movs	r3, #129	; 0x81
 800de54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800de56:	897a      	ldrh	r2, [r7, #10]
 800de58:	f640 730f 	movw	r3, #3855	; 0xf0f
 800de5c:	4013      	ands	r3, r2
 800de5e:	b29a      	uxth	r2, r3
 800de60:	4b14      	ldr	r3, [pc, #80]	; (800deb4 <QSPI_DummyCyclesCfg+0xfc>)
 800de62:	4313      	orrs	r3, r2
 800de64:	b29b      	uxth	r3, r3
 800de66:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800de68:	f107 030c 	add.w	r3, r7, #12
 800de6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800de70:	4619      	mov	r1, r3
 800de72:	480e      	ldr	r0, [pc, #56]	; (800deac <QSPI_DummyCyclesCfg+0xf4>)
 800de74:	f003 f9d2 	bl	801121c <HAL_QSPI_Command>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d002      	beq.n	800de84 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800de7e:	f06f 0304 	mvn.w	r3, #4
 800de82:	e00e      	b.n	800dea2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800de84:	f107 030a 	add.w	r3, r7, #10
 800de88:	f241 3288 	movw	r2, #5000	; 0x1388
 800de8c:	4619      	mov	r1, r3
 800de8e:	4807      	ldr	r0, [pc, #28]	; (800deac <QSPI_DummyCyclesCfg+0xf4>)
 800de90:	f003 fa22 	bl	80112d8 <HAL_QSPI_Transmit>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d002      	beq.n	800dea0 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800de9a:	f06f 0304 	mvn.w	r3, #4
 800de9e:	e000      	b.n	800dea2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 800dea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3748      	adds	r7, #72	; 0x48
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	2400b52c 	.word	0x2400b52c
 800deb0:	2400b650 	.word	0x2400b650
 800deb4:	ffff8080 	.word	0xffff8080

0800deb8 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800dec0:	2300      	movs	r3, #0
 800dec2:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d003      	beq.n	800ded2 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800deca:	f06f 0301 	mvn.w	r3, #1
 800dece:	60fb      	str	r3, [r7, #12]
 800ded0:	e044      	b.n	800df5c <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2234      	movs	r2, #52	; 0x34
 800ded6:	fb02 f303 	mul.w	r3, r2, r3
 800deda:	4a23      	ldr	r2, [pc, #140]	; (800df68 <BSP_SDRAM_Init+0xb0>)
 800dedc:	4413      	add	r3, r2
 800dede:	4618      	mov	r0, r3
 800dee0:	f000 f8b8 	bl	800e054 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2234      	movs	r2, #52	; 0x34
 800dee8:	fb02 f303 	mul.w	r3, r2, r3
 800deec:	4a1e      	ldr	r2, [pc, #120]	; (800df68 <BSP_SDRAM_Init+0xb0>)
 800deee:	4413      	add	r3, r2
 800def0:	2210      	movs	r2, #16
 800def2:	2104      	movs	r1, #4
 800def4:	4618      	mov	r0, r3
 800def6:	f000 f861 	bl	800dfbc <MX_SDRAM_BANK2_Init>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d003      	beq.n	800df08 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 800df00:	f04f 33ff 	mov.w	r3, #4294967295
 800df04:	60fb      	str	r3, [r7, #12]
 800df06:	e029      	b.n	800df5c <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800df08:	4b18      	ldr	r3, [pc, #96]	; (800df6c <BSP_SDRAM_Init+0xb4>)
 800df0a:	2208      	movs	r2, #8
 800df0c:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800df0e:	4b17      	ldr	r3, [pc, #92]	; (800df6c <BSP_SDRAM_Init+0xb4>)
 800df10:	2203      	movs	r2, #3
 800df12:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800df14:	4b15      	ldr	r3, [pc, #84]	; (800df6c <BSP_SDRAM_Init+0xb4>)
 800df16:	f240 6203 	movw	r2, #1539	; 0x603
 800df1a:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 800df1c:	4b13      	ldr	r3, [pc, #76]	; (800df6c <BSP_SDRAM_Init+0xb4>)
 800df1e:	2200      	movs	r2, #0
 800df20:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800df22:	4b12      	ldr	r3, [pc, #72]	; (800df6c <BSP_SDRAM_Init+0xb4>)
 800df24:	2200      	movs	r2, #0
 800df26:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800df28:	4b10      	ldr	r3, [pc, #64]	; (800df6c <BSP_SDRAM_Init+0xb4>)
 800df2a:	2230      	movs	r2, #48	; 0x30
 800df2c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800df2e:	4b0f      	ldr	r3, [pc, #60]	; (800df6c <BSP_SDRAM_Init+0xb4>)
 800df30:	2200      	movs	r2, #0
 800df32:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800df34:	4b0d      	ldr	r3, [pc, #52]	; (800df6c <BSP_SDRAM_Init+0xb4>)
 800df36:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df3a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2234      	movs	r2, #52	; 0x34
 800df40:	fb02 f303 	mul.w	r3, r2, r3
 800df44:	4a08      	ldr	r2, [pc, #32]	; (800df68 <BSP_SDRAM_Init+0xb0>)
 800df46:	4413      	add	r3, r2
 800df48:	4908      	ldr	r1, [pc, #32]	; (800df6c <BSP_SDRAM_Init+0xb4>)
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fe fe66 	bl	800cc1c <MT48LC4M32B2_Init>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d002      	beq.n	800df5c <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800df56:	f06f 0304 	mvn.w	r3, #4
 800df5a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800df5c:	68fb      	ldr	r3, [r7, #12]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	2400b65c 	.word	0x2400b65c
 800df6c:	2400ade8 	.word	0x2400ade8

0800df70 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800df78:	2300      	movs	r3, #0
 800df7a:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d003      	beq.n	800df8a <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800df82:	f06f 0301 	mvn.w	r3, #1
 800df86:	60fb      	str	r3, [r7, #12]
 800df88:	e011      	b.n	800dfae <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2234      	movs	r2, #52	; 0x34
 800df8e:	fb02 f303 	mul.w	r3, r2, r3
 800df92:	4a09      	ldr	r2, [pc, #36]	; (800dfb8 <BSP_SDRAM_DeInit+0x48>)
 800df94:	4413      	add	r3, r2
 800df96:	4618      	mov	r0, r3
 800df98:	f006 f9f6 	bl	8014388 <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2234      	movs	r2, #52	; 0x34
 800dfa0:	fb02 f303 	mul.w	r3, r2, r3
 800dfa4:	4a04      	ldr	r2, [pc, #16]	; (800dfb8 <BSP_SDRAM_DeInit+0x48>)
 800dfa6:	4413      	add	r3, r2
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f000 f951 	bl	800e250 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 800dfae:	68fb      	ldr	r3, [r7, #12]
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	2400b65c 	.word	0x2400b65c

0800dfbc <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b08c      	sub	sp, #48	; 0x30
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800dfc8:	4b20      	ldr	r3, [pc, #128]	; (800e04c <MX_SDRAM_BANK2_Init+0x90>)
 800dfca:	4a21      	ldr	r2, [pc, #132]	; (800e050 <MX_SDRAM_BANK2_Init+0x94>)
 800dfcc:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	68ba      	ldr	r2, [r7, #8]
 800dfde:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800dfe6:	4b19      	ldr	r3, [pc, #100]	; (800e04c <MX_SDRAM_BANK2_Init+0x90>)
 800dfe8:	2240      	movs	r2, #64	; 0x40
 800dfea:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800dff2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2200      	movs	r2, #0
 800dff8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e000:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e008:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2200      	movs	r2, #0
 800e00e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800e010:	2302      	movs	r3, #2
 800e012:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800e014:	2307      	movs	r3, #7
 800e016:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 800e018:	2304      	movs	r3, #4
 800e01a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800e01c:	2307      	movs	r3, #7
 800e01e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800e020:	2302      	movs	r3, #2
 800e022:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 800e024:	2302      	movs	r3, #2
 800e026:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 800e028:	2302      	movs	r3, #2
 800e02a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800e02c:	f107 0314 	add.w	r3, r7, #20
 800e030:	4619      	mov	r1, r3
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f006 f96c 	bl	8014310 <HAL_SDRAM_Init>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d001      	beq.n	800e042 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800e03e:	2301      	movs	r3, #1
 800e040:	e000      	b.n	800e044 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800e042:	2300      	movs	r3, #0
}
 800e044:	4618      	mov	r0, r3
 800e046:	3730      	adds	r7, #48	; 0x30
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}
 800e04c:	2400b65c 	.word	0x2400b65c
 800e050:	52004140 	.word	0x52004140

0800e054 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b08e      	sub	sp, #56	; 0x38
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e05c:	4b73      	ldr	r3, [pc, #460]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e05e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e062:	4a72      	ldr	r2, [pc, #456]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e068:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800e06c:	4b6f      	ldr	r3, [pc, #444]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e06e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e076:	623b      	str	r3, [r7, #32]
 800e078:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800e07a:	4b6c      	ldr	r3, [pc, #432]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e07c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e080:	4a6a      	ldr	r2, [pc, #424]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e082:	f043 0301 	orr.w	r3, r3, #1
 800e086:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800e08a:	4b68      	ldr	r3, [pc, #416]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e08c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e090:	f003 0301 	and.w	r3, r3, #1
 800e094:	61fb      	str	r3, [r7, #28]
 800e096:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e098:	4b64      	ldr	r3, [pc, #400]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e09a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e09e:	4a63      	ldr	r2, [pc, #396]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e0a0:	f043 0308 	orr.w	r3, r3, #8
 800e0a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e0a8:	4b60      	ldr	r3, [pc, #384]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e0aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0ae:	f003 0308 	and.w	r3, r3, #8
 800e0b2:	61bb      	str	r3, [r7, #24]
 800e0b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800e0b6:	4b5d      	ldr	r3, [pc, #372]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e0b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0bc:	4a5b      	ldr	r2, [pc, #364]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e0be:	f043 0310 	orr.w	r3, r3, #16
 800e0c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e0c6:	4b59      	ldr	r3, [pc, #356]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e0c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0cc:	f003 0310 	and.w	r3, r3, #16
 800e0d0:	617b      	str	r3, [r7, #20]
 800e0d2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800e0d4:	4b55      	ldr	r3, [pc, #340]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e0d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0da:	4a54      	ldr	r2, [pc, #336]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e0dc:	f043 0320 	orr.w	r3, r3, #32
 800e0e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e0e4:	4b51      	ldr	r3, [pc, #324]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e0e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0ea:	f003 0320 	and.w	r3, r3, #32
 800e0ee:	613b      	str	r3, [r7, #16]
 800e0f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e0f2:	4b4e      	ldr	r3, [pc, #312]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e0f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0f8:	4a4c      	ldr	r2, [pc, #304]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e0fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e102:	4b4a      	ldr	r3, [pc, #296]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e10c:	60fb      	str	r3, [r7, #12]
 800e10e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e110:	4b46      	ldr	r3, [pc, #280]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e116:	4a45      	ldr	r2, [pc, #276]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e11c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e120:	4b42      	ldr	r3, [pc, #264]	; (800e22c <SDRAM_MspInit+0x1d8>)
 800e122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e12a:	60bb      	str	r3, [r7, #8]
 800e12c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800e12e:	2302      	movs	r3, #2
 800e130:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800e132:	2301      	movs	r3, #1
 800e134:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800e136:	2303      	movs	r3, #3
 800e138:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800e13a:	230c      	movs	r3, #12
 800e13c:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800e13e:	f24c 7303 	movw	r3, #50947	; 0xc703
 800e142:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800e144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e148:	4619      	mov	r1, r3
 800e14a:	4839      	ldr	r0, [pc, #228]	; (800e230 <SDRAM_MspInit+0x1dc>)
 800e14c:	f000 ff86 	bl	800f05c <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800e150:	f64f 7383 	movw	r3, #65411	; 0xff83
 800e154:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800e156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e15a:	4619      	mov	r1, r3
 800e15c:	4835      	ldr	r0, [pc, #212]	; (800e234 <SDRAM_MspInit+0x1e0>)
 800e15e:	f000 ff7d 	bl	800f05c <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800e162:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800e166:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800e168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e16c:	4619      	mov	r1, r3
 800e16e:	4832      	ldr	r0, [pc, #200]	; (800e238 <SDRAM_MspInit+0x1e4>)
 800e170:	f000 ff74 	bl	800f05c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800e174:	f248 1333 	movw	r3, #33075	; 0x8133
 800e178:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800e17a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e17e:	4619      	mov	r1, r3
 800e180:	482e      	ldr	r0, [pc, #184]	; (800e23c <SDRAM_MspInit+0x1e8>)
 800e182:	f000 ff6b 	bl	800f05c <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800e186:	23e0      	movs	r3, #224	; 0xe0
 800e188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800e18a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e18e:	4619      	mov	r1, r3
 800e190:	482b      	ldr	r0, [pc, #172]	; (800e240 <SDRAM_MspInit+0x1ec>)
 800e192:	f000 ff63 	bl	800f05c <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800e196:	4b2b      	ldr	r3, [pc, #172]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e19c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800e19e:	4b29      	ldr	r3, [pc, #164]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1a4:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800e1a6:	4b27      	ldr	r3, [pc, #156]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1a8:	2280      	movs	r2, #128	; 0x80
 800e1aa:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800e1ac:	4b25      	ldr	r3, [pc, #148]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800e1b2:	4b24      	ldr	r3, [pc, #144]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1b4:	f240 2202 	movw	r2, #514	; 0x202
 800e1b8:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800e1ba:	4b22      	ldr	r3, [pc, #136]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1bc:	f640 0208 	movw	r2, #2056	; 0x808
 800e1c0:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800e1c2:	4b20      	ldr	r3, [pc, #128]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1c4:	2220      	movs	r2, #32
 800e1c6:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800e1c8:	4b1e      	ldr	r3, [pc, #120]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1ca:	2280      	movs	r2, #128	; 0x80
 800e1cc:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800e1ce:	4b1d      	ldr	r3, [pc, #116]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e1d4:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800e1d6:	4b1b      	ldr	r3, [pc, #108]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800e1dc:	4b19      	ldr	r3, [pc, #100]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1de:	2200      	movs	r2, #0
 800e1e0:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800e1e2:	4b18      	ldr	r3, [pc, #96]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1e4:	2280      	movs	r2, #128	; 0x80
 800e1e6:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800e1e8:	4b16      	ldr	r3, [pc, #88]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800e1ee:	4b15      	ldr	r3, [pc, #84]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800e1f4:	4b13      	ldr	r3, [pc, #76]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1f6:	4a14      	ldr	r2, [pc, #80]	; (800e248 <SDRAM_MspInit+0x1f4>)
 800e1f8:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800e1fa:	4b14      	ldr	r3, [pc, #80]	; (800e24c <SDRAM_MspInit+0x1f8>)
 800e1fc:	4a11      	ldr	r2, [pc, #68]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e1fe:	631a      	str	r2, [r3, #48]	; 0x30
 800e200:	4b10      	ldr	r3, [pc, #64]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e202:	4a12      	ldr	r2, [pc, #72]	; (800e24c <SDRAM_MspInit+0x1f8>)
 800e204:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800e206:	480f      	ldr	r0, [pc, #60]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e208:	f002 fc68 	bl	8010adc <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800e20c:	480d      	ldr	r0, [pc, #52]	; (800e244 <SDRAM_MspInit+0x1f0>)
 800e20e:	f002 fc19 	bl	8010a44 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800e212:	2200      	movs	r2, #0
 800e214:	210f      	movs	r1, #15
 800e216:	207a      	movs	r0, #122	; 0x7a
 800e218:	f000 fc10 	bl	800ea3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800e21c:	207a      	movs	r0, #122	; 0x7a
 800e21e:	f000 fc27 	bl	800ea70 <HAL_NVIC_EnableIRQ>
}
 800e222:	bf00      	nop
 800e224:	3738      	adds	r7, #56	; 0x38
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	58024400 	.word	0x58024400
 800e230:	58020c00 	.word	0x58020c00
 800e234:	58021000 	.word	0x58021000
 800e238:	58021400 	.word	0x58021400
 800e23c:	58021800 	.word	0x58021800
 800e240:	58021c00 	.word	0x58021c00
 800e244:	2400ae08 	.word	0x2400ae08
 800e248:	52000040 	.word	0x52000040
 800e24c:	2400b65c 	.word	0x2400b65c

0800e250 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800e258:	207a      	movs	r0, #122	; 0x7a
 800e25a:	f000 fc17 	bl	800ea8c <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800e25e:	4b05      	ldr	r3, [pc, #20]	; (800e274 <SDRAM_MspDeInit+0x24>)
 800e260:	4a05      	ldr	r2, [pc, #20]	; (800e278 <SDRAM_MspDeInit+0x28>)
 800e262:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800e264:	4803      	ldr	r0, [pc, #12]	; (800e274 <SDRAM_MspDeInit+0x24>)
 800e266:	f002 fc39 	bl	8010adc <HAL_MDMA_DeInit>
}
 800e26a:	bf00      	nop
 800e26c:	3708      	adds	r7, #8
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	2400ae74 	.word	0x2400ae74
 800e278:	52000040 	.word	0x52000040

0800e27c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b088      	sub	sp, #32
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800e286:	2300      	movs	r3, #0
 800e288:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d11c      	bne.n	800e2ca <BSP_TS_Init+0x4e>
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d018      	beq.n	800e2ca <BSP_TS_Init+0x4e>
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800e2a0:	d813      	bhi.n	800e2ca <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00f      	beq.n	800e2ca <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800e2b2:	d80a      	bhi.n	800e2ca <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	68da      	ldr	r2, [r3, #12]
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	6819      	ldr	r1, [r3, #0]
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	428b      	cmp	r3, r1
 800e2c2:	bf28      	it	cs
 800e2c4:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d903      	bls.n	800e2d2 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e2ca:	f06f 0301 	mvn.w	r3, #1
 800e2ce:	61fb      	str	r3, [r7, #28]
 800e2d0:	e085      	b.n	800e3de <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 f9e6 	bl	800e6a4 <FT5336_Probe>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d003      	beq.n	800e2e6 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800e2de:	f04f 33ff 	mov.w	r3, #4294967295
 800e2e2:	61fb      	str	r3, [r7, #28]
 800e2e4:	e07b      	b.n	800e3de <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	6819      	ldr	r1, [r3, #0]
 800e2ea:	483f      	ldr	r0, [pc, #252]	; (800e3e8 <BSP_TS_Init+0x16c>)
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	4413      	add	r3, r2
 800e2f4:	00db      	lsls	r3, r3, #3
 800e2f6:	4403      	add	r3, r0
 800e2f8:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	6859      	ldr	r1, [r3, #4]
 800e2fe:	483a      	ldr	r0, [pc, #232]	; (800e3e8 <BSP_TS_Init+0x16c>)
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	4613      	mov	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	4413      	add	r3, r2
 800e308:	00db      	lsls	r3, r3, #3
 800e30a:	4403      	add	r3, r0
 800e30c:	3304      	adds	r3, #4
 800e30e:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	6899      	ldr	r1, [r3, #8]
 800e314:	4834      	ldr	r0, [pc, #208]	; (800e3e8 <BSP_TS_Init+0x16c>)
 800e316:	687a      	ldr	r2, [r7, #4]
 800e318:	4613      	mov	r3, r2
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4413      	add	r3, r2
 800e31e:	00db      	lsls	r3, r3, #3
 800e320:	4403      	add	r3, r0
 800e322:	3308      	adds	r3, #8
 800e324:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	68d9      	ldr	r1, [r3, #12]
 800e32a:	482f      	ldr	r0, [pc, #188]	; (800e3e8 <BSP_TS_Init+0x16c>)
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	4613      	mov	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	4413      	add	r3, r2
 800e334:	00db      	lsls	r3, r3, #3
 800e336:	4403      	add	r3, r0
 800e338:	330c      	adds	r3, #12
 800e33a:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800e33c:	4b2b      	ldr	r3, [pc, #172]	; (800e3ec <BSP_TS_Init+0x170>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	69db      	ldr	r3, [r3, #28]
 800e342:	492b      	ldr	r1, [pc, #172]	; (800e3f0 <BSP_TS_Init+0x174>)
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e34a:	f107 010c 	add.w	r1, r7, #12
 800e34e:	4610      	mov	r0, r2
 800e350:	4798      	blx	r3
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	da03      	bge.n	800e360 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e358:	f06f 0304 	mvn.w	r3, #4
 800e35c:	61fb      	str	r3, [r7, #28]
 800e35e:	e03e      	b.n	800e3de <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800e360:	6939      	ldr	r1, [r7, #16]
 800e362:	4821      	ldr	r0, [pc, #132]	; (800e3e8 <BSP_TS_Init+0x16c>)
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	4613      	mov	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	4413      	add	r3, r2
 800e36c:	00db      	lsls	r3, r3, #3
 800e36e:	4403      	add	r3, r0
 800e370:	3310      	adds	r3, #16
 800e372:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800e374:	6979      	ldr	r1, [r7, #20]
 800e376:	481c      	ldr	r0, [pc, #112]	; (800e3e8 <BSP_TS_Init+0x16c>)
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	4613      	mov	r3, r2
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	4413      	add	r3, r2
 800e380:	00db      	lsls	r3, r3, #3
 800e382:	4403      	add	r3, r0
 800e384:	3314      	adds	r3, #20
 800e386:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800e388:	2300      	movs	r3, #0
 800e38a:	61bb      	str	r3, [r7, #24]
 800e38c:	e024      	b.n	800e3d8 <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	4413      	add	r3, r2
 800e398:	1c59      	adds	r1, r3, #1
 800e39a:	4813      	ldr	r0, [pc, #76]	; (800e3e8 <BSP_TS_Init+0x16c>)
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	4613      	mov	r3, r2
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	4413      	add	r3, r2
 800e3a4:	005b      	lsls	r3, r3, #1
 800e3a6:	69ba      	ldr	r2, [r7, #24]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	3306      	adds	r3, #6
 800e3ac:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	685a      	ldr	r2, [r3, #4]
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	1c59      	adds	r1, r3, #1
 800e3bc:	480a      	ldr	r0, [pc, #40]	; (800e3e8 <BSP_TS_Init+0x16c>)
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	4613      	mov	r3, r2
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	4413      	add	r3, r2
 800e3c6:	005b      	lsls	r3, r3, #1
 800e3c8:	69ba      	ldr	r2, [r7, #24]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	3308      	adds	r3, #8
 800e3ce:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800e3d2:	69bb      	ldr	r3, [r7, #24]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	61bb      	str	r3, [r7, #24]
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d9d7      	bls.n	800e38e <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 800e3de:	69fb      	ldr	r3, [r7, #28]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3720      	adds	r7, #32
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	2400aee8 	.word	0x2400aee8
 800e3ec:	2400aee0 	.word	0x2400aee0
 800e3f0:	2400aee4 	.word	0x2400aee4

0800e3f4 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b08a      	sub	sp, #40	; 0x28
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800e3fe:	2300      	movs	r3, #0
 800e400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d003      	beq.n	800e410 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e408:	f06f 0301 	mvn.w	r3, #1
 800e40c:	627b      	str	r3, [r7, #36]	; 0x24
 800e40e:	e13e      	b.n	800e68e <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800e410:	4ba1      	ldr	r3, [pc, #644]	; (800e698 <BSP_TS_GetState+0x2a4>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	49a1      	ldr	r1, [pc, #644]	; (800e69c <BSP_TS_GetState+0x2a8>)
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e41e:	f107 0108 	add.w	r1, r7, #8
 800e422:	4610      	mov	r0, r2
 800e424:	4798      	blx	r3
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	da03      	bge.n	800e434 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e42c:	f06f 0304 	mvn.w	r3, #4
 800e430:	627b      	str	r3, [r7, #36]	; 0x24
 800e432:	e12c      	b.n	800e68e <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	f000 8110 	beq.w	800e65c <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800e444:	4996      	ldr	r1, [pc, #600]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	4613      	mov	r3, r2
 800e44a:	009b      	lsls	r3, r3, #2
 800e44c:	4413      	add	r3, r2
 800e44e:	00db      	lsls	r3, r3, #3
 800e450:	440b      	add	r3, r1
 800e452:	3308      	adds	r3, #8
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f003 0308 	and.w	r3, r3, #8
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d003      	beq.n	800e466 <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800e466:	498e      	ldr	r1, [pc, #568]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	4613      	mov	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4413      	add	r3, r2
 800e470:	00db      	lsls	r3, r3, #3
 800e472:	440b      	add	r3, r1
 800e474:	3308      	adds	r3, #8
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f003 0302 	and.w	r3, r3, #2
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00c      	beq.n	800e49a <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800e480:	4987      	ldr	r1, [pc, #540]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	4613      	mov	r3, r2
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	4413      	add	r3, r2
 800e48a:	00db      	lsls	r3, r3, #3
 800e48c:	440b      	add	r3, r1
 800e48e:	3310      	adds	r3, #16
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	1ad3      	subs	r3, r2, r3
 800e496:	3b01      	subs	r3, #1
 800e498:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800e49a:	4981      	ldr	r1, [pc, #516]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	4613      	mov	r3, r2
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4413      	add	r3, r2
 800e4a4:	00db      	lsls	r3, r3, #3
 800e4a6:	440b      	add	r3, r1
 800e4a8:	3308      	adds	r3, #8
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f003 0304 	and.w	r3, r3, #4
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d00b      	beq.n	800e4cc <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800e4b4:	497a      	ldr	r1, [pc, #488]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	4413      	add	r3, r2
 800e4be:	00db      	lsls	r3, r3, #3
 800e4c0:	440b      	add	r3, r1
 800e4c2:	3314      	adds	r3, #20
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800e4cc:	4974      	ldr	r1, [pc, #464]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4413      	add	r3, r2
 800e4d6:	00db      	lsls	r3, r3, #3
 800e4d8:	440b      	add	r3, r1
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	6a3a      	ldr	r2, [r7, #32]
 800e4de:	fb02 f103 	mul.w	r1, r2, r3
 800e4e2:	486f      	ldr	r0, [pc, #444]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	4613      	mov	r3, r2
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	4413      	add	r3, r2
 800e4ec:	00db      	lsls	r3, r3, #3
 800e4ee:	4403      	add	r3, r0
 800e4f0:	3310      	adds	r3, #16
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	fbb1 f2f3 	udiv	r2, r1, r3
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800e4fc:	4968      	ldr	r1, [pc, #416]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	4613      	mov	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	4413      	add	r3, r2
 800e506:	00db      	lsls	r3, r3, #3
 800e508:	440b      	add	r3, r1
 800e50a:	3304      	adds	r3, #4
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	69fa      	ldr	r2, [r7, #28]
 800e510:	fb02 f103 	mul.w	r1, r2, r3
 800e514:	4862      	ldr	r0, [pc, #392]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	4613      	mov	r3, r2
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	4413      	add	r3, r2
 800e51e:	00db      	lsls	r3, r3, #3
 800e520:	4403      	add	r3, r0
 800e522:	3314      	adds	r3, #20
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	fbb1 f2f3 	udiv	r2, r1, r3
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800e52e:	68ba      	ldr	r2, [r7, #8]
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	6859      	ldr	r1, [r3, #4]
 800e538:	4859      	ldr	r0, [pc, #356]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	4613      	mov	r3, r2
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	4413      	add	r3, r2
 800e542:	00db      	lsls	r3, r3, #3
 800e544:	4403      	add	r3, r0
 800e546:	3318      	adds	r3, #24
 800e548:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800e54a:	4299      	cmp	r1, r3
 800e54c:	d90c      	bls.n	800e568 <BSP_TS_GetState+0x174>
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	6859      	ldr	r1, [r3, #4]
 800e552:	4853      	ldr	r0, [pc, #332]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	4613      	mov	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	00db      	lsls	r3, r3, #3
 800e55e:	4403      	add	r3, r0
 800e560:	3318      	adds	r3, #24
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	1acb      	subs	r3, r1, r3
 800e566:	e00b      	b.n	800e580 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800e568:	494d      	ldr	r1, [pc, #308]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	4613      	mov	r3, r2
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	4413      	add	r3, r2
 800e572:	00db      	lsls	r3, r3, #3
 800e574:	440b      	add	r3, r1
 800e576:	3318      	adds	r3, #24
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800e57e:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800e580:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	6899      	ldr	r1, [r3, #8]
 800e586:	4846      	ldr	r0, [pc, #280]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	4613      	mov	r3, r2
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	4413      	add	r3, r2
 800e590:	00db      	lsls	r3, r3, #3
 800e592:	4403      	add	r3, r0
 800e594:	3320      	adds	r3, #32
 800e596:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800e598:	4299      	cmp	r1, r3
 800e59a:	d90c      	bls.n	800e5b6 <BSP_TS_GetState+0x1c2>
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	6899      	ldr	r1, [r3, #8]
 800e5a0:	483f      	ldr	r0, [pc, #252]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	4413      	add	r3, r2
 800e5aa:	00db      	lsls	r3, r3, #3
 800e5ac:	4403      	add	r3, r0
 800e5ae:	3320      	adds	r3, #32
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	1acb      	subs	r3, r1, r3
 800e5b4:	e00b      	b.n	800e5ce <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800e5b6:	493a      	ldr	r1, [pc, #232]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4413      	add	r3, r2
 800e5c0:	00db      	lsls	r3, r3, #3
 800e5c2:	440b      	add	r3, r1
 800e5c4:	3320      	adds	r3, #32
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800e5cc:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800e5ce:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800e5d0:	4933      	ldr	r1, [pc, #204]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	4413      	add	r3, r2
 800e5da:	00db      	lsls	r3, r3, #3
 800e5dc:	440b      	add	r3, r1
 800e5de:	330c      	adds	r3, #12
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	69ba      	ldr	r2, [r7, #24]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d80b      	bhi.n	800e600 <BSP_TS_GetState+0x20c>
 800e5e8:	492d      	ldr	r1, [pc, #180]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	4613      	mov	r3, r2
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	4413      	add	r3, r2
 800e5f2:	00db      	lsls	r3, r3, #3
 800e5f4:	440b      	add	r3, r1
 800e5f6:	330c      	adds	r3, #12
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	697a      	ldr	r2, [r7, #20]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d916      	bls.n	800e62e <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	6859      	ldr	r1, [r3, #4]
 800e604:	4826      	ldr	r0, [pc, #152]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	4613      	mov	r3, r2
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	4413      	add	r3, r2
 800e60e:	00db      	lsls	r3, r3, #3
 800e610:	4403      	add	r3, r0
 800e612:	3318      	adds	r3, #24
 800e614:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	6899      	ldr	r1, [r3, #8]
 800e61a:	4821      	ldr	r0, [pc, #132]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	4613      	mov	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4413      	add	r3, r2
 800e624:	00db      	lsls	r3, r3, #3
 800e626:	4403      	add	r3, r0
 800e628:	3320      	adds	r3, #32
 800e62a:	6019      	str	r1, [r3, #0]
 800e62c:	e02f      	b.n	800e68e <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800e62e:	491c      	ldr	r1, [pc, #112]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e630:	687a      	ldr	r2, [r7, #4]
 800e632:	4613      	mov	r3, r2
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	4413      	add	r3, r2
 800e638:	00db      	lsls	r3, r3, #3
 800e63a:	440b      	add	r3, r1
 800e63c:	3318      	adds	r3, #24
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800e644:	4916      	ldr	r1, [pc, #88]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	4613      	mov	r3, r2
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	4413      	add	r3, r2
 800e64e:	00db      	lsls	r3, r3, #3
 800e650:	440b      	add	r3, r1
 800e652:	3320      	adds	r3, #32
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	609a      	str	r2, [r3, #8]
 800e65a:	e018      	b.n	800e68e <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	2200      	movs	r2, #0
 800e660:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800e662:	490f      	ldr	r1, [pc, #60]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	4613      	mov	r3, r2
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4413      	add	r3, r2
 800e66c:	00db      	lsls	r3, r3, #3
 800e66e:	440b      	add	r3, r1
 800e670:	3318      	adds	r3, #24
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800e678:	4909      	ldr	r1, [pc, #36]	; (800e6a0 <BSP_TS_GetState+0x2ac>)
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	4613      	mov	r3, r2
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	4413      	add	r3, r2
 800e682:	00db      	lsls	r3, r3, #3
 800e684:	440b      	add	r3, r1
 800e686:	3320      	adds	r3, #32
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e690:	4618      	mov	r0, r3
 800e692:	3728      	adds	r7, #40	; 0x28
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	2400aee0 	.word	0x2400aee0
 800e69c:	2400aee4 	.word	0x2400aee4
 800e6a0:	2400aee8 	.word	0x2400aee8

0800e6a4 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b08a      	sub	sp, #40	; 0x28
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800e6b4:	2370      	movs	r3, #112	; 0x70
 800e6b6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800e6b8:	4b23      	ldr	r3, [pc, #140]	; (800e748 <FT5336_Probe+0xa4>)
 800e6ba:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800e6bc:	4b23      	ldr	r3, [pc, #140]	; (800e74c <FT5336_Probe+0xa8>)
 800e6be:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800e6c0:	4b23      	ldr	r3, [pc, #140]	; (800e750 <FT5336_Probe+0xac>)
 800e6c2:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800e6c4:	4b23      	ldr	r3, [pc, #140]	; (800e754 <FT5336_Probe+0xb0>)
 800e6c6:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800e6c8:	4b23      	ldr	r3, [pc, #140]	; (800e758 <FT5336_Probe+0xb4>)
 800e6ca:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800e6cc:	f107 030c 	add.w	r3, r7, #12
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	4822      	ldr	r0, [pc, #136]	; (800e75c <FT5336_Probe+0xb8>)
 800e6d4:	f7fd fcaa 	bl	800c02c <FT5336_RegisterBusIO>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d003      	beq.n	800e6e6 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800e6de:	f06f 0307 	mvn.w	r3, #7
 800e6e2:	627b      	str	r3, [r7, #36]	; 0x24
 800e6e4:	e02a      	b.n	800e73c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800e6e6:	f107 0308 	add.w	r3, r7, #8
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	481b      	ldr	r0, [pc, #108]	; (800e75c <FT5336_Probe+0xb8>)
 800e6ee:	f7fd fd97 	bl	800c220 <FT5336_ReadID>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d003      	beq.n	800e700 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800e6f8:	f06f 0304 	mvn.w	r3, #4
 800e6fc:	627b      	str	r3, [r7, #36]	; 0x24
 800e6fe:	e01d      	b.n	800e73c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	2b51      	cmp	r3, #81	; 0x51
 800e704:	d003      	beq.n	800e70e <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e706:	f06f 0306 	mvn.w	r3, #6
 800e70a:	627b      	str	r3, [r7, #36]	; 0x24
 800e70c:	e016      	b.n	800e73c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800e70e:	4a14      	ldr	r2, [pc, #80]	; (800e760 <FT5336_Probe+0xbc>)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	4912      	ldr	r1, [pc, #72]	; (800e75c <FT5336_Probe+0xb8>)
 800e714:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800e718:	4b12      	ldr	r3, [pc, #72]	; (800e764 <FT5336_Probe+0xc0>)
 800e71a:	4a13      	ldr	r2, [pc, #76]	; (800e768 <FT5336_Probe+0xc4>)
 800e71c:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800e71e:	4b11      	ldr	r3, [pc, #68]	; (800e764 <FT5336_Probe+0xc0>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	490e      	ldr	r1, [pc, #56]	; (800e760 <FT5336_Probe+0xbc>)
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e72c:	4610      	mov	r0, r2
 800e72e:	4798      	blx	r3
 800e730:	4603      	mov	r3, r0
 800e732:	2b00      	cmp	r3, #0
 800e734:	d002      	beq.n	800e73c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e736:	f06f 0304 	mvn.w	r3, #4
 800e73a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800e73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3728      	adds	r7, #40	; 0x28
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	0800ce35 	.word	0x0800ce35
 800e74c:	0800cea9 	.word	0x0800cea9
 800e750:	0800cfd1 	.word	0x0800cfd1
 800e754:	0800cf75 	.word	0x0800cf75
 800e758:	0800d02d 	.word	0x0800d02d
 800e75c:	2400af10 	.word	0x2400af10
 800e760:	2400aee4 	.word	0x2400aee4
 800e764:	2400aee0 	.word	0x2400aee0
 800e768:	24000034 	.word	0x24000034

0800e76c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e772:	2003      	movs	r0, #3
 800e774:	f000 f957 	bl	800ea26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e778:	f004 f850 	bl	801281c <HAL_RCC_GetSysClockFreq>
 800e77c:	4602      	mov	r2, r0
 800e77e:	4b15      	ldr	r3, [pc, #84]	; (800e7d4 <HAL_Init+0x68>)
 800e780:	699b      	ldr	r3, [r3, #24]
 800e782:	0a1b      	lsrs	r3, r3, #8
 800e784:	f003 030f 	and.w	r3, r3, #15
 800e788:	4913      	ldr	r1, [pc, #76]	; (800e7d8 <HAL_Init+0x6c>)
 800e78a:	5ccb      	ldrb	r3, [r1, r3]
 800e78c:	f003 031f 	and.w	r3, r3, #31
 800e790:	fa22 f303 	lsr.w	r3, r2, r3
 800e794:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e796:	4b0f      	ldr	r3, [pc, #60]	; (800e7d4 <HAL_Init+0x68>)
 800e798:	699b      	ldr	r3, [r3, #24]
 800e79a:	f003 030f 	and.w	r3, r3, #15
 800e79e:	4a0e      	ldr	r2, [pc, #56]	; (800e7d8 <HAL_Init+0x6c>)
 800e7a0:	5cd3      	ldrb	r3, [r2, r3]
 800e7a2:	f003 031f 	and.w	r3, r3, #31
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	fa22 f303 	lsr.w	r3, r2, r3
 800e7ac:	4a0b      	ldr	r2, [pc, #44]	; (800e7dc <HAL_Init+0x70>)
 800e7ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e7b0:	4a0b      	ldr	r2, [pc, #44]	; (800e7e0 <HAL_Init+0x74>)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e7b6:	200f      	movs	r0, #15
 800e7b8:	f7f4 f9c0 	bl	8002b3c <HAL_InitTick>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d001      	beq.n	800e7c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	e002      	b.n	800e7cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800e7c6:	f7f3 fd33 	bl	8002230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3708      	adds	r7, #8
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	58024400 	.word	0x58024400
 800e7d8:	0802c2e4 	.word	0x0802c2e4
 800e7dc:	24000030 	.word	0x24000030
 800e7e0:	2400002c 	.word	0x2400002c

0800e7e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800e7e8:	4b06      	ldr	r3, [pc, #24]	; (800e804 <HAL_IncTick+0x20>)
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	4b06      	ldr	r3, [pc, #24]	; (800e808 <HAL_IncTick+0x24>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	4a04      	ldr	r2, [pc, #16]	; (800e808 <HAL_IncTick+0x24>)
 800e7f6:	6013      	str	r3, [r2, #0]
}
 800e7f8:	bf00      	nop
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	24000068 	.word	0x24000068
 800e808:	2400b690 	.word	0x2400b690

0800e80c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e80c:	b480      	push	{r7}
 800e80e:	af00      	add	r7, sp, #0
  return uwTick;
 800e810:	4b03      	ldr	r3, [pc, #12]	; (800e820 <HAL_GetTick+0x14>)
 800e812:	681b      	ldr	r3, [r3, #0]
}
 800e814:	4618      	mov	r0, r3
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr
 800e81e:	bf00      	nop
 800e820:	2400b690 	.word	0x2400b690

0800e824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e82c:	f7ff ffee 	bl	800e80c <HAL_GetTick>
 800e830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e83c:	d005      	beq.n	800e84a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e83e:	4b0a      	ldr	r3, [pc, #40]	; (800e868 <HAL_Delay+0x44>)
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	461a      	mov	r2, r3
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	4413      	add	r3, r2
 800e848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800e84a:	bf00      	nop
 800e84c:	f7ff ffde 	bl	800e80c <HAL_GetTick>
 800e850:	4602      	mov	r2, r0
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	1ad3      	subs	r3, r2, r3
 800e856:	68fa      	ldr	r2, [r7, #12]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d8f7      	bhi.n	800e84c <HAL_Delay+0x28>
  {
  }
}
 800e85c:	bf00      	nop
 800e85e:	bf00      	nop
 800e860:	3710      	adds	r7, #16
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	24000068 	.word	0x24000068

0800e86c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800e86c:	b480      	push	{r7}
 800e86e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800e870:	4b03      	ldr	r3, [pc, #12]	; (800e880 <HAL_GetREVID+0x14>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	0c1b      	lsrs	r3, r3, #16
}
 800e876:	4618      	mov	r0, r3
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr
 800e880:	5c001000 	.word	0x5c001000

0800e884 <__NVIC_SetPriorityGrouping>:
{
 800e884:	b480      	push	{r7}
 800e886:	b085      	sub	sp, #20
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f003 0307 	and.w	r3, r3, #7
 800e892:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e894:	4b0b      	ldr	r3, [pc, #44]	; (800e8c4 <__NVIC_SetPriorityGrouping+0x40>)
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e8a0:	4013      	ands	r3, r2
 800e8a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800e8ac:	4b06      	ldr	r3, [pc, #24]	; (800e8c8 <__NVIC_SetPriorityGrouping+0x44>)
 800e8ae:	4313      	orrs	r3, r2
 800e8b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e8b2:	4a04      	ldr	r2, [pc, #16]	; (800e8c4 <__NVIC_SetPriorityGrouping+0x40>)
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	60d3      	str	r3, [r2, #12]
}
 800e8b8:	bf00      	nop
 800e8ba:	3714      	adds	r7, #20
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr
 800e8c4:	e000ed00 	.word	0xe000ed00
 800e8c8:	05fa0000 	.word	0x05fa0000

0800e8cc <__NVIC_GetPriorityGrouping>:
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e8d0:	4b04      	ldr	r3, [pc, #16]	; (800e8e4 <__NVIC_GetPriorityGrouping+0x18>)
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	0a1b      	lsrs	r3, r3, #8
 800e8d6:	f003 0307 	and.w	r3, r3, #7
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr
 800e8e4:	e000ed00 	.word	0xe000ed00

0800e8e8 <__NVIC_EnableIRQ>:
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e8f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	db0b      	blt.n	800e912 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e8fa:	88fb      	ldrh	r3, [r7, #6]
 800e8fc:	f003 021f 	and.w	r2, r3, #31
 800e900:	4907      	ldr	r1, [pc, #28]	; (800e920 <__NVIC_EnableIRQ+0x38>)
 800e902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e906:	095b      	lsrs	r3, r3, #5
 800e908:	2001      	movs	r0, #1
 800e90a:	fa00 f202 	lsl.w	r2, r0, r2
 800e90e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e912:	bf00      	nop
 800e914:	370c      	adds	r7, #12
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr
 800e91e:	bf00      	nop
 800e920:	e000e100 	.word	0xe000e100

0800e924 <__NVIC_DisableIRQ>:
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	4603      	mov	r3, r0
 800e92c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e92e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e932:	2b00      	cmp	r3, #0
 800e934:	db12      	blt.n	800e95c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e936:	88fb      	ldrh	r3, [r7, #6]
 800e938:	f003 021f 	and.w	r2, r3, #31
 800e93c:	490a      	ldr	r1, [pc, #40]	; (800e968 <__NVIC_DisableIRQ+0x44>)
 800e93e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e942:	095b      	lsrs	r3, r3, #5
 800e944:	2001      	movs	r0, #1
 800e946:	fa00 f202 	lsl.w	r2, r0, r2
 800e94a:	3320      	adds	r3, #32
 800e94c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800e950:	f3bf 8f4f 	dsb	sy
}
 800e954:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e956:	f3bf 8f6f 	isb	sy
}
 800e95a:	bf00      	nop
}
 800e95c:	bf00      	nop
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr
 800e968:	e000e100 	.word	0xe000e100

0800e96c <__NVIC_SetPriority>:
{
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 800e972:	4603      	mov	r3, r0
 800e974:	6039      	str	r1, [r7, #0]
 800e976:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	db0a      	blt.n	800e996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	b2da      	uxtb	r2, r3
 800e984:	490c      	ldr	r1, [pc, #48]	; (800e9b8 <__NVIC_SetPriority+0x4c>)
 800e986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e98a:	0112      	lsls	r2, r2, #4
 800e98c:	b2d2      	uxtb	r2, r2
 800e98e:	440b      	add	r3, r1
 800e990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e994:	e00a      	b.n	800e9ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	b2da      	uxtb	r2, r3
 800e99a:	4908      	ldr	r1, [pc, #32]	; (800e9bc <__NVIC_SetPriority+0x50>)
 800e99c:	88fb      	ldrh	r3, [r7, #6]
 800e99e:	f003 030f 	and.w	r3, r3, #15
 800e9a2:	3b04      	subs	r3, #4
 800e9a4:	0112      	lsls	r2, r2, #4
 800e9a6:	b2d2      	uxtb	r2, r2
 800e9a8:	440b      	add	r3, r1
 800e9aa:	761a      	strb	r2, [r3, #24]
}
 800e9ac:	bf00      	nop
 800e9ae:	370c      	adds	r7, #12
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr
 800e9b8:	e000e100 	.word	0xe000e100
 800e9bc:	e000ed00 	.word	0xe000ed00

0800e9c0 <NVIC_EncodePriority>:
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b089      	sub	sp, #36	; 0x24
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f003 0307 	and.w	r3, r3, #7
 800e9d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	f1c3 0307 	rsb	r3, r3, #7
 800e9da:	2b04      	cmp	r3, #4
 800e9dc:	bf28      	it	cs
 800e9de:	2304      	movcs	r3, #4
 800e9e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	3304      	adds	r3, #4
 800e9e6:	2b06      	cmp	r3, #6
 800e9e8:	d902      	bls.n	800e9f0 <NVIC_EncodePriority+0x30>
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	3b03      	subs	r3, #3
 800e9ee:	e000      	b.n	800e9f2 <NVIC_EncodePriority+0x32>
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e9fe:	43da      	mvns	r2, r3
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	401a      	ands	r2, r3
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ea08:	f04f 31ff 	mov.w	r1, #4294967295
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ea12:	43d9      	mvns	r1, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ea18:	4313      	orrs	r3, r2
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3724      	adds	r7, #36	; 0x24
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr

0800ea26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ea26:	b580      	push	{r7, lr}
 800ea28:	b082      	sub	sp, #8
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7ff ff28 	bl	800e884 <__NVIC_SetPriorityGrouping>
}
 800ea34:	bf00      	nop
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b086      	sub	sp, #24
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	4603      	mov	r3, r0
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
 800ea48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ea4a:	f7ff ff3f 	bl	800e8cc <__NVIC_GetPriorityGrouping>
 800ea4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	68b9      	ldr	r1, [r7, #8]
 800ea54:	6978      	ldr	r0, [r7, #20]
 800ea56:	f7ff ffb3 	bl	800e9c0 <NVIC_EncodePriority>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ea60:	4611      	mov	r1, r2
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7ff ff82 	bl	800e96c <__NVIC_SetPriority>
}
 800ea68:	bf00      	nop
 800ea6a:	3718      	adds	r7, #24
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	4603      	mov	r3, r0
 800ea78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ea7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7ff ff32 	bl	800e8e8 <__NVIC_EnableIRQ>
}
 800ea84:	bf00      	nop
 800ea86:	3708      	adds	r7, #8
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b082      	sub	sp, #8
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	4603      	mov	r3, r0
 800ea94:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ea96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7ff ff42 	bl	800e924 <__NVIC_DisableIRQ>
}
 800eaa0:	bf00      	nop
 800eaa2:	3708      	adds	r7, #8
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800eaac:	f3bf 8f5f 	dmb	sy
}
 800eab0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800eab2:	4b07      	ldr	r3, [pc, #28]	; (800ead0 <HAL_MPU_Disable+0x28>)
 800eab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab6:	4a06      	ldr	r2, [pc, #24]	; (800ead0 <HAL_MPU_Disable+0x28>)
 800eab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eabc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800eabe:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <HAL_MPU_Disable+0x2c>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	605a      	str	r2, [r3, #4]
}
 800eac4:	bf00      	nop
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr
 800eace:	bf00      	nop
 800ead0:	e000ed00 	.word	0xe000ed00
 800ead4:	e000ed90 	.word	0xe000ed90

0800ead8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800eae0:	4a0b      	ldr	r2, [pc, #44]	; (800eb10 <HAL_MPU_Enable+0x38>)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f043 0301 	orr.w	r3, r3, #1
 800eae8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800eaea:	4b0a      	ldr	r3, [pc, #40]	; (800eb14 <HAL_MPU_Enable+0x3c>)
 800eaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaee:	4a09      	ldr	r2, [pc, #36]	; (800eb14 <HAL_MPU_Enable+0x3c>)
 800eaf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eaf4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800eaf6:	f3bf 8f4f 	dsb	sy
}
 800eafa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800eafc:	f3bf 8f6f 	isb	sy
}
 800eb00:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800eb02:	bf00      	nop
 800eb04:	370c      	adds	r7, #12
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop
 800eb10:	e000ed90 	.word	0xe000ed90
 800eb14:	e000ed00 	.word	0xe000ed00

0800eb18 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	785a      	ldrb	r2, [r3, #1]
 800eb24:	4b1d      	ldr	r3, [pc, #116]	; (800eb9c <HAL_MPU_ConfigRegion+0x84>)
 800eb26:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d029      	beq.n	800eb84 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800eb30:	4a1a      	ldr	r2, [pc, #104]	; (800eb9c <HAL_MPU_ConfigRegion+0x84>)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	7b1b      	ldrb	r3, [r3, #12]
 800eb3c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	7adb      	ldrb	r3, [r3, #11]
 800eb42:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800eb44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	7a9b      	ldrb	r3, [r3, #10]
 800eb4a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800eb4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	7b5b      	ldrb	r3, [r3, #13]
 800eb52:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800eb54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	7b9b      	ldrb	r3, [r3, #14]
 800eb5a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800eb5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	7bdb      	ldrb	r3, [r3, #15]
 800eb62:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800eb64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	7a5b      	ldrb	r3, [r3, #9]
 800eb6a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800eb6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	7a1b      	ldrb	r3, [r3, #8]
 800eb72:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800eb74:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	7812      	ldrb	r2, [r2, #0]
 800eb7a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800eb7c:	4a07      	ldr	r2, [pc, #28]	; (800eb9c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800eb7e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800eb80:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800eb82:	e005      	b.n	800eb90 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800eb84:	4b05      	ldr	r3, [pc, #20]	; (800eb9c <HAL_MPU_ConfigRegion+0x84>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800eb8a:	4b04      	ldr	r3, [pc, #16]	; (800eb9c <HAL_MPU_ConfigRegion+0x84>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	611a      	str	r2, [r3, #16]
}
 800eb90:	bf00      	nop
 800eb92:	370c      	adds	r7, #12
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr
 800eb9c:	e000ed90 	.word	0xe000ed90

0800eba0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d101      	bne.n	800ebb2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800ebae:	2301      	movs	r3, #1
 800ebb0:	e054      	b.n	800ec5c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	7f5b      	ldrb	r3, [r3, #29]
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d105      	bne.n	800ebc8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7f3 fb52 	bl	800226c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2202      	movs	r2, #2
 800ebcc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	791b      	ldrb	r3, [r3, #4]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10c      	bne.n	800ebf0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	4a22      	ldr	r2, [pc, #136]	; (800ec64 <HAL_CRC_Init+0xc4>)
 800ebdc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	689a      	ldr	r2, [r3, #8]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f022 0218 	bic.w	r2, r2, #24
 800ebec:	609a      	str	r2, [r3, #8]
 800ebee:	e00c      	b.n	800ec0a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6899      	ldr	r1, [r3, #8]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	68db      	ldr	r3, [r3, #12]
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 f834 	bl	800ec68 <HAL_CRCEx_Polynomial_Set>
 800ec00:	4603      	mov	r3, r0
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d001      	beq.n	800ec0a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800ec06:	2301      	movs	r3, #1
 800ec08:	e028      	b.n	800ec5c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	795b      	ldrb	r3, [r3, #5]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d105      	bne.n	800ec1e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f04f 32ff 	mov.w	r2, #4294967295
 800ec1a:	611a      	str	r2, [r3, #16]
 800ec1c:	e004      	b.n	800ec28 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	6912      	ldr	r2, [r2, #16]
 800ec26:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	689b      	ldr	r3, [r3, #8]
 800ec2e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	695a      	ldr	r2, [r3, #20]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	430a      	orrs	r2, r1
 800ec3c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	699a      	ldr	r2, [r3, #24]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	430a      	orrs	r2, r1
 800ec52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2201      	movs	r2, #1
 800ec58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	04c11db7 	.word	0x04c11db7

0800ec68 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b087      	sub	sp, #28
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec74:	2300      	movs	r3, #0
 800ec76:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800ec78:	231f      	movs	r3, #31
 800ec7a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800ec7c:	bf00      	nop
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	1e5a      	subs	r2, r3, #1
 800ec82:	613a      	str	r2, [r7, #16]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d009      	beq.n	800ec9c <HAL_CRCEx_Polynomial_Set+0x34>
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	f003 031f 	and.w	r3, r3, #31
 800ec8e:	68ba      	ldr	r2, [r7, #8]
 800ec90:	fa22 f303 	lsr.w	r3, r2, r3
 800ec94:	f003 0301 	and.w	r3, r3, #1
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d0f0      	beq.n	800ec7e <HAL_CRCEx_Polynomial_Set+0x16>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2b18      	cmp	r3, #24
 800eca0:	d846      	bhi.n	800ed30 <HAL_CRCEx_Polynomial_Set+0xc8>
 800eca2:	a201      	add	r2, pc, #4	; (adr r2, 800eca8 <HAL_CRCEx_Polynomial_Set+0x40>)
 800eca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca8:	0800ed37 	.word	0x0800ed37
 800ecac:	0800ed31 	.word	0x0800ed31
 800ecb0:	0800ed31 	.word	0x0800ed31
 800ecb4:	0800ed31 	.word	0x0800ed31
 800ecb8:	0800ed31 	.word	0x0800ed31
 800ecbc:	0800ed31 	.word	0x0800ed31
 800ecc0:	0800ed31 	.word	0x0800ed31
 800ecc4:	0800ed31 	.word	0x0800ed31
 800ecc8:	0800ed25 	.word	0x0800ed25
 800eccc:	0800ed31 	.word	0x0800ed31
 800ecd0:	0800ed31 	.word	0x0800ed31
 800ecd4:	0800ed31 	.word	0x0800ed31
 800ecd8:	0800ed31 	.word	0x0800ed31
 800ecdc:	0800ed31 	.word	0x0800ed31
 800ece0:	0800ed31 	.word	0x0800ed31
 800ece4:	0800ed31 	.word	0x0800ed31
 800ece8:	0800ed19 	.word	0x0800ed19
 800ecec:	0800ed31 	.word	0x0800ed31
 800ecf0:	0800ed31 	.word	0x0800ed31
 800ecf4:	0800ed31 	.word	0x0800ed31
 800ecf8:	0800ed31 	.word	0x0800ed31
 800ecfc:	0800ed31 	.word	0x0800ed31
 800ed00:	0800ed31 	.word	0x0800ed31
 800ed04:	0800ed31 	.word	0x0800ed31
 800ed08:	0800ed0d 	.word	0x0800ed0d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	2b06      	cmp	r3, #6
 800ed10:	d913      	bls.n	800ed3a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800ed12:	2301      	movs	r3, #1
 800ed14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ed16:	e010      	b.n	800ed3a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	2b07      	cmp	r3, #7
 800ed1c:	d90f      	bls.n	800ed3e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800ed1e:	2301      	movs	r3, #1
 800ed20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ed22:	e00c      	b.n	800ed3e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	2b0f      	cmp	r3, #15
 800ed28:	d90b      	bls.n	800ed42 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ed2e:	e008      	b.n	800ed42 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800ed30:	2301      	movs	r3, #1
 800ed32:	75fb      	strb	r3, [r7, #23]
      break;
 800ed34:	e006      	b.n	800ed44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ed36:	bf00      	nop
 800ed38:	e004      	b.n	800ed44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ed3a:	bf00      	nop
 800ed3c:	e002      	b.n	800ed44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ed3e:	bf00      	nop
 800ed40:	e000      	b.n	800ed44 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ed42:	bf00      	nop
  }
  if (status == HAL_OK)
 800ed44:	7dfb      	ldrb	r3, [r7, #23]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d10d      	bne.n	800ed66 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	68ba      	ldr	r2, [r7, #8]
 800ed50:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	689b      	ldr	r3, [r3, #8]
 800ed58:	f023 0118 	bic.w	r1, r3, #24
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	430a      	orrs	r2, r1
 800ed64:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800ed66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	371c      	adds	r7, #28
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d101      	bne.n	800ed86 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800ed82:	2301      	movs	r3, #1
 800ed84:	e04f      	b.n	800ee26 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d106      	bne.n	800eda0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7f3 fa88 	bl	80022b0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2202      	movs	r2, #2
 800eda4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	4b20      	ldr	r3, [pc, #128]	; (800ee30 <HAL_DMA2D_Init+0xbc>)
 800edb0:	4013      	ands	r3, r2
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	6851      	ldr	r1, [r2, #4]
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	69d2      	ldr	r2, [r2, #28]
 800edba:	4311      	orrs	r1, r2
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	6812      	ldr	r2, [r2, #0]
 800edc0:	430b      	orrs	r3, r1
 800edc2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edca:	4b1a      	ldr	r3, [pc, #104]	; (800ee34 <HAL_DMA2D_Init+0xc0>)
 800edcc:	4013      	ands	r3, r2
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	6891      	ldr	r1, [r2, #8]
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	6992      	ldr	r2, [r2, #24]
 800edd6:	4311      	orrs	r1, r2
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	6812      	ldr	r2, [r2, #0]
 800eddc:	430b      	orrs	r3, r1
 800edde:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ede6:	4b14      	ldr	r3, [pc, #80]	; (800ee38 <HAL_DMA2D_Init+0xc4>)
 800ede8:	4013      	ands	r3, r2
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	68d1      	ldr	r1, [r2, #12]
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	6812      	ldr	r2, [r2, #0]
 800edf2:	430b      	orrs	r3, r1
 800edf4:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edfc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	691b      	ldr	r3, [r3, #16]
 800ee04:	051a      	lsls	r2, r3, #20
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	695b      	ldr	r3, [r3, #20]
 800ee0a:	055b      	lsls	r3, r3, #21
 800ee0c:	431a      	orrs	r2, r3
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	430a      	orrs	r2, r1
 800ee14:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	fff8ffbf 	.word	0xfff8ffbf
 800ee34:	fffffef8 	.word	0xfffffef8
 800ee38:	ffff0000 	.word	0xffff0000

0800ee3c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f003 0301 	and.w	r3, r3, #1
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d026      	beq.n	800eeac <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d021      	beq.n	800eeac <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ee76:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee7c:	f043 0201 	orr.w	r2, r3, #1
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2204      	movs	r2, #4
 800ee90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d003      	beq.n	800eeac <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f003 0320 	and.w	r3, r3, #32
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d026      	beq.n	800ef04 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d021      	beq.n	800ef04 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	681a      	ldr	r2, [r3, #0]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eece:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	2220      	movs	r2, #32
 800eed6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eedc:	f043 0202 	orr.w	r2, r3, #2
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2204      	movs	r2, #4
 800eee8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d003      	beq.n	800ef04 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f003 0308 	and.w	r3, r3, #8
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d026      	beq.n	800ef5c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d021      	beq.n	800ef5c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef26:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2208      	movs	r2, #8
 800ef2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef34:	f043 0204 	orr.w	r2, r3, #4
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2204      	movs	r2, #4
 800ef40:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2200      	movs	r2, #0
 800ef48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d003      	beq.n	800ef5c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f003 0304 	and.w	r3, r3, #4
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d013      	beq.n	800ef8e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00e      	beq.n	800ef8e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef7e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2204      	movs	r2, #4
 800ef86:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 f853 	bl	800f034 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f003 0302 	and.w	r3, r3, #2
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d024      	beq.n	800efe2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d01f      	beq.n	800efe2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800efb0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2202      	movs	r2, #2
 800efb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2201      	movs	r2, #1
 800efc6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6a1b      	ldr	r3, [r3, #32]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d003      	beq.n	800efe2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6a1b      	ldr	r3, [r3, #32]
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f003 0310 	and.w	r3, r3, #16
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d01f      	beq.n	800f02c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d01a      	beq.n	800f02c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f004:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2210      	movs	r2, #16
 800f00c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2201      	movs	r2, #1
 800f01a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f000 f80e 	bl	800f048 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800f02c:	bf00      	nop
 800f02e:	3710      	adds	r7, #16
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800f03c:	bf00      	nop
 800f03e:	370c      	adds	r7, #12
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr

0800f048 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800f048:	b480      	push	{r7}
 800f04a:	b083      	sub	sp, #12
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800f050:	bf00      	nop
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr

0800f05c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b089      	sub	sp, #36	; 0x24
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f066:	2300      	movs	r3, #0
 800f068:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800f06a:	4b89      	ldr	r3, [pc, #548]	; (800f290 <HAL_GPIO_Init+0x234>)
 800f06c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800f06e:	e194      	b.n	800f39a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	2101      	movs	r1, #1
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	fa01 f303 	lsl.w	r3, r1, r3
 800f07c:	4013      	ands	r3, r2
 800f07e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	2b00      	cmp	r3, #0
 800f084:	f000 8186 	beq.w	800f394 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	f003 0303 	and.w	r3, r3, #3
 800f090:	2b01      	cmp	r3, #1
 800f092:	d005      	beq.n	800f0a0 <HAL_GPIO_Init+0x44>
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	f003 0303 	and.w	r3, r3, #3
 800f09c:	2b02      	cmp	r3, #2
 800f09e:	d130      	bne.n	800f102 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	005b      	lsls	r3, r3, #1
 800f0aa:	2203      	movs	r2, #3
 800f0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800f0b0:	43db      	mvns	r3, r3
 800f0b2:	69ba      	ldr	r2, [r7, #24]
 800f0b4:	4013      	ands	r3, r2
 800f0b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	68da      	ldr	r2, [r3, #12]
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	005b      	lsls	r3, r3, #1
 800f0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800f0c4:	69ba      	ldr	r2, [r7, #24]
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	69ba      	ldr	r2, [r7, #24]
 800f0ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	69fb      	ldr	r3, [r7, #28]
 800f0da:	fa02 f303 	lsl.w	r3, r2, r3
 800f0de:	43db      	mvns	r3, r3
 800f0e0:	69ba      	ldr	r2, [r7, #24]
 800f0e2:	4013      	ands	r3, r2
 800f0e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	091b      	lsrs	r3, r3, #4
 800f0ec:	f003 0201 	and.w	r2, r3, #1
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f0f6:	69ba      	ldr	r2, [r7, #24]
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	69ba      	ldr	r2, [r7, #24]
 800f100:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	f003 0303 	and.w	r3, r3, #3
 800f10a:	2b03      	cmp	r3, #3
 800f10c:	d017      	beq.n	800f13e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	68db      	ldr	r3, [r3, #12]
 800f112:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	005b      	lsls	r3, r3, #1
 800f118:	2203      	movs	r2, #3
 800f11a:	fa02 f303 	lsl.w	r3, r2, r3
 800f11e:	43db      	mvns	r3, r3
 800f120:	69ba      	ldr	r2, [r7, #24]
 800f122:	4013      	ands	r3, r2
 800f124:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	689a      	ldr	r2, [r3, #8]
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	005b      	lsls	r3, r3, #1
 800f12e:	fa02 f303 	lsl.w	r3, r2, r3
 800f132:	69ba      	ldr	r2, [r7, #24]
 800f134:	4313      	orrs	r3, r2
 800f136:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	69ba      	ldr	r2, [r7, #24]
 800f13c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	f003 0303 	and.w	r3, r3, #3
 800f146:	2b02      	cmp	r3, #2
 800f148:	d123      	bne.n	800f192 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	08da      	lsrs	r2, r3, #3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	3208      	adds	r2, #8
 800f152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	f003 0307 	and.w	r3, r3, #7
 800f15e:	009b      	lsls	r3, r3, #2
 800f160:	220f      	movs	r2, #15
 800f162:	fa02 f303 	lsl.w	r3, r2, r3
 800f166:	43db      	mvns	r3, r3
 800f168:	69ba      	ldr	r2, [r7, #24]
 800f16a:	4013      	ands	r3, r2
 800f16c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	691a      	ldr	r2, [r3, #16]
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	f003 0307 	and.w	r3, r3, #7
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	fa02 f303 	lsl.w	r3, r2, r3
 800f17e:	69ba      	ldr	r2, [r7, #24]
 800f180:	4313      	orrs	r3, r2
 800f182:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	08da      	lsrs	r2, r3, #3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	3208      	adds	r2, #8
 800f18c:	69b9      	ldr	r1, [r7, #24]
 800f18e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	005b      	lsls	r3, r3, #1
 800f19c:	2203      	movs	r2, #3
 800f19e:	fa02 f303 	lsl.w	r3, r2, r3
 800f1a2:	43db      	mvns	r3, r3
 800f1a4:	69ba      	ldr	r2, [r7, #24]
 800f1a6:	4013      	ands	r3, r2
 800f1a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	f003 0203 	and.w	r2, r3, #3
 800f1b2:	69fb      	ldr	r3, [r7, #28]
 800f1b4:	005b      	lsls	r3, r3, #1
 800f1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800f1ba:	69ba      	ldr	r2, [r7, #24]
 800f1bc:	4313      	orrs	r3, r2
 800f1be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	69ba      	ldr	r2, [r7, #24]
 800f1c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f000 80e0 	beq.w	800f394 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f1d4:	4b2f      	ldr	r3, [pc, #188]	; (800f294 <HAL_GPIO_Init+0x238>)
 800f1d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f1da:	4a2e      	ldr	r2, [pc, #184]	; (800f294 <HAL_GPIO_Init+0x238>)
 800f1dc:	f043 0302 	orr.w	r3, r3, #2
 800f1e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800f1e4:	4b2b      	ldr	r3, [pc, #172]	; (800f294 <HAL_GPIO_Init+0x238>)
 800f1e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f1ea:	f003 0302 	and.w	r3, r3, #2
 800f1ee:	60fb      	str	r3, [r7, #12]
 800f1f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f1f2:	4a29      	ldr	r2, [pc, #164]	; (800f298 <HAL_GPIO_Init+0x23c>)
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	089b      	lsrs	r3, r3, #2
 800f1f8:	3302      	adds	r3, #2
 800f1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	f003 0303 	and.w	r3, r3, #3
 800f206:	009b      	lsls	r3, r3, #2
 800f208:	220f      	movs	r2, #15
 800f20a:	fa02 f303 	lsl.w	r3, r2, r3
 800f20e:	43db      	mvns	r3, r3
 800f210:	69ba      	ldr	r2, [r7, #24]
 800f212:	4013      	ands	r3, r2
 800f214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	4a20      	ldr	r2, [pc, #128]	; (800f29c <HAL_GPIO_Init+0x240>)
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d052      	beq.n	800f2c4 <HAL_GPIO_Init+0x268>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	4a1f      	ldr	r2, [pc, #124]	; (800f2a0 <HAL_GPIO_Init+0x244>)
 800f222:	4293      	cmp	r3, r2
 800f224:	d031      	beq.n	800f28a <HAL_GPIO_Init+0x22e>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	4a1e      	ldr	r2, [pc, #120]	; (800f2a4 <HAL_GPIO_Init+0x248>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d02b      	beq.n	800f286 <HAL_GPIO_Init+0x22a>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	4a1d      	ldr	r2, [pc, #116]	; (800f2a8 <HAL_GPIO_Init+0x24c>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d025      	beq.n	800f282 <HAL_GPIO_Init+0x226>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4a1c      	ldr	r2, [pc, #112]	; (800f2ac <HAL_GPIO_Init+0x250>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d01f      	beq.n	800f27e <HAL_GPIO_Init+0x222>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4a1b      	ldr	r2, [pc, #108]	; (800f2b0 <HAL_GPIO_Init+0x254>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d019      	beq.n	800f27a <HAL_GPIO_Init+0x21e>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	4a1a      	ldr	r2, [pc, #104]	; (800f2b4 <HAL_GPIO_Init+0x258>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d013      	beq.n	800f276 <HAL_GPIO_Init+0x21a>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4a19      	ldr	r2, [pc, #100]	; (800f2b8 <HAL_GPIO_Init+0x25c>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d00d      	beq.n	800f272 <HAL_GPIO_Init+0x216>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	4a18      	ldr	r2, [pc, #96]	; (800f2bc <HAL_GPIO_Init+0x260>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d007      	beq.n	800f26e <HAL_GPIO_Init+0x212>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4a17      	ldr	r2, [pc, #92]	; (800f2c0 <HAL_GPIO_Init+0x264>)
 800f262:	4293      	cmp	r3, r2
 800f264:	d101      	bne.n	800f26a <HAL_GPIO_Init+0x20e>
 800f266:	2309      	movs	r3, #9
 800f268:	e02d      	b.n	800f2c6 <HAL_GPIO_Init+0x26a>
 800f26a:	230a      	movs	r3, #10
 800f26c:	e02b      	b.n	800f2c6 <HAL_GPIO_Init+0x26a>
 800f26e:	2308      	movs	r3, #8
 800f270:	e029      	b.n	800f2c6 <HAL_GPIO_Init+0x26a>
 800f272:	2307      	movs	r3, #7
 800f274:	e027      	b.n	800f2c6 <HAL_GPIO_Init+0x26a>
 800f276:	2306      	movs	r3, #6
 800f278:	e025      	b.n	800f2c6 <HAL_GPIO_Init+0x26a>
 800f27a:	2305      	movs	r3, #5
 800f27c:	e023      	b.n	800f2c6 <HAL_GPIO_Init+0x26a>
 800f27e:	2304      	movs	r3, #4
 800f280:	e021      	b.n	800f2c6 <HAL_GPIO_Init+0x26a>
 800f282:	2303      	movs	r3, #3
 800f284:	e01f      	b.n	800f2c6 <HAL_GPIO_Init+0x26a>
 800f286:	2302      	movs	r3, #2
 800f288:	e01d      	b.n	800f2c6 <HAL_GPIO_Init+0x26a>
 800f28a:	2301      	movs	r3, #1
 800f28c:	e01b      	b.n	800f2c6 <HAL_GPIO_Init+0x26a>
 800f28e:	bf00      	nop
 800f290:	58000080 	.word	0x58000080
 800f294:	58024400 	.word	0x58024400
 800f298:	58000400 	.word	0x58000400
 800f29c:	58020000 	.word	0x58020000
 800f2a0:	58020400 	.word	0x58020400
 800f2a4:	58020800 	.word	0x58020800
 800f2a8:	58020c00 	.word	0x58020c00
 800f2ac:	58021000 	.word	0x58021000
 800f2b0:	58021400 	.word	0x58021400
 800f2b4:	58021800 	.word	0x58021800
 800f2b8:	58021c00 	.word	0x58021c00
 800f2bc:	58022000 	.word	0x58022000
 800f2c0:	58022400 	.word	0x58022400
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	69fa      	ldr	r2, [r7, #28]
 800f2c8:	f002 0203 	and.w	r2, r2, #3
 800f2cc:	0092      	lsls	r2, r2, #2
 800f2ce:	4093      	lsls	r3, r2
 800f2d0:	69ba      	ldr	r2, [r7, #24]
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f2d6:	4938      	ldr	r1, [pc, #224]	; (800f3b8 <HAL_GPIO_Init+0x35c>)
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	089b      	lsrs	r3, r3, #2
 800f2dc:	3302      	adds	r3, #2
 800f2de:	69ba      	ldr	r2, [r7, #24]
 800f2e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f2e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	43db      	mvns	r3, r3
 800f2f0:	69ba      	ldr	r2, [r7, #24]
 800f2f2:	4013      	ands	r3, r2
 800f2f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d003      	beq.n	800f30a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800f302:	69ba      	ldr	r2, [r7, #24]
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	4313      	orrs	r3, r2
 800f308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800f30a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800f312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	43db      	mvns	r3, r3
 800f31e:	69ba      	ldr	r2, [r7, #24]
 800f320:	4013      	ands	r3, r2
 800f322:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d003      	beq.n	800f338 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800f330:	69ba      	ldr	r2, [r7, #24]
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	4313      	orrs	r3, r2
 800f336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800f338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f33c:	69bb      	ldr	r3, [r7, #24]
 800f33e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	43db      	mvns	r3, r3
 800f34a:	69ba      	ldr	r2, [r7, #24]
 800f34c:	4013      	ands	r3, r2
 800f34e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d003      	beq.n	800f364 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800f35c:	69ba      	ldr	r2, [r7, #24]
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	4313      	orrs	r3, r2
 800f362:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	69ba      	ldr	r2, [r7, #24]
 800f368:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	43db      	mvns	r3, r3
 800f374:	69ba      	ldr	r2, [r7, #24]
 800f376:	4013      	ands	r3, r2
 800f378:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f382:	2b00      	cmp	r3, #0
 800f384:	d003      	beq.n	800f38e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800f386:	69ba      	ldr	r2, [r7, #24]
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	4313      	orrs	r3, r2
 800f38c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	69ba      	ldr	r2, [r7, #24]
 800f392:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	3301      	adds	r3, #1
 800f398:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	681a      	ldr	r2, [r3, #0]
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	f47f ae63 	bne.w	800f070 <HAL_GPIO_Init+0x14>
  }
}
 800f3aa:	bf00      	nop
 800f3ac:	bf00      	nop
 800f3ae:	3724      	adds	r7, #36	; 0x24
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b6:	4770      	bx	lr
 800f3b8:	58000400 	.word	0x58000400

0800f3bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b087      	sub	sp, #28
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800f3ca:	4b75      	ldr	r3, [pc, #468]	; (800f5a0 <HAL_GPIO_DeInit+0x1e4>)
 800f3cc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800f3ce:	e0d9      	b.n	800f584 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800f3d8:	683a      	ldr	r2, [r7, #0]
 800f3da:	4013      	ands	r3, r2
 800f3dc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f000 80cc 	beq.w	800f57e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800f3e6:	4a6f      	ldr	r2, [pc, #444]	; (800f5a4 <HAL_GPIO_DeInit+0x1e8>)
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	089b      	lsrs	r3, r3, #2
 800f3ec:	3302      	adds	r3, #2
 800f3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3f2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	f003 0303 	and.w	r3, r3, #3
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	220f      	movs	r2, #15
 800f3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800f402:	68ba      	ldr	r2, [r7, #8]
 800f404:	4013      	ands	r3, r2
 800f406:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4a67      	ldr	r2, [pc, #412]	; (800f5a8 <HAL_GPIO_DeInit+0x1ec>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d037      	beq.n	800f480 <HAL_GPIO_DeInit+0xc4>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4a66      	ldr	r2, [pc, #408]	; (800f5ac <HAL_GPIO_DeInit+0x1f0>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d031      	beq.n	800f47c <HAL_GPIO_DeInit+0xc0>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	4a65      	ldr	r2, [pc, #404]	; (800f5b0 <HAL_GPIO_DeInit+0x1f4>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d02b      	beq.n	800f478 <HAL_GPIO_DeInit+0xbc>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4a64      	ldr	r2, [pc, #400]	; (800f5b4 <HAL_GPIO_DeInit+0x1f8>)
 800f424:	4293      	cmp	r3, r2
 800f426:	d025      	beq.n	800f474 <HAL_GPIO_DeInit+0xb8>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4a63      	ldr	r2, [pc, #396]	; (800f5b8 <HAL_GPIO_DeInit+0x1fc>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d01f      	beq.n	800f470 <HAL_GPIO_DeInit+0xb4>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	4a62      	ldr	r2, [pc, #392]	; (800f5bc <HAL_GPIO_DeInit+0x200>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d019      	beq.n	800f46c <HAL_GPIO_DeInit+0xb0>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4a61      	ldr	r2, [pc, #388]	; (800f5c0 <HAL_GPIO_DeInit+0x204>)
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d013      	beq.n	800f468 <HAL_GPIO_DeInit+0xac>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	4a60      	ldr	r2, [pc, #384]	; (800f5c4 <HAL_GPIO_DeInit+0x208>)
 800f444:	4293      	cmp	r3, r2
 800f446:	d00d      	beq.n	800f464 <HAL_GPIO_DeInit+0xa8>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4a5f      	ldr	r2, [pc, #380]	; (800f5c8 <HAL_GPIO_DeInit+0x20c>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d007      	beq.n	800f460 <HAL_GPIO_DeInit+0xa4>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	4a5e      	ldr	r2, [pc, #376]	; (800f5cc <HAL_GPIO_DeInit+0x210>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d101      	bne.n	800f45c <HAL_GPIO_DeInit+0xa0>
 800f458:	2309      	movs	r3, #9
 800f45a:	e012      	b.n	800f482 <HAL_GPIO_DeInit+0xc6>
 800f45c:	230a      	movs	r3, #10
 800f45e:	e010      	b.n	800f482 <HAL_GPIO_DeInit+0xc6>
 800f460:	2308      	movs	r3, #8
 800f462:	e00e      	b.n	800f482 <HAL_GPIO_DeInit+0xc6>
 800f464:	2307      	movs	r3, #7
 800f466:	e00c      	b.n	800f482 <HAL_GPIO_DeInit+0xc6>
 800f468:	2306      	movs	r3, #6
 800f46a:	e00a      	b.n	800f482 <HAL_GPIO_DeInit+0xc6>
 800f46c:	2305      	movs	r3, #5
 800f46e:	e008      	b.n	800f482 <HAL_GPIO_DeInit+0xc6>
 800f470:	2304      	movs	r3, #4
 800f472:	e006      	b.n	800f482 <HAL_GPIO_DeInit+0xc6>
 800f474:	2303      	movs	r3, #3
 800f476:	e004      	b.n	800f482 <HAL_GPIO_DeInit+0xc6>
 800f478:	2302      	movs	r3, #2
 800f47a:	e002      	b.n	800f482 <HAL_GPIO_DeInit+0xc6>
 800f47c:	2301      	movs	r3, #1
 800f47e:	e000      	b.n	800f482 <HAL_GPIO_DeInit+0xc6>
 800f480:	2300      	movs	r3, #0
 800f482:	697a      	ldr	r2, [r7, #20]
 800f484:	f002 0203 	and.w	r2, r2, #3
 800f488:	0092      	lsls	r2, r2, #2
 800f48a:	4093      	lsls	r3, r2
 800f48c:	68ba      	ldr	r2, [r7, #8]
 800f48e:	429a      	cmp	r2, r3
 800f490:	d136      	bne.n	800f500 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	681a      	ldr	r2, [r3, #0]
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	43db      	mvns	r3, r3
 800f49a:	401a      	ands	r2, r3
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	685a      	ldr	r2, [r3, #4]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	43db      	mvns	r3, r3
 800f4a8:	401a      	ands	r2, r3
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800f4ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4b2:	685a      	ldr	r2, [r3, #4]
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	43db      	mvns	r3, r3
 800f4b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f4bc:	4013      	ands	r3, r2
 800f4be:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800f4c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	43db      	mvns	r3, r3
 800f4ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f4ce:	4013      	ands	r3, r2
 800f4d0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	f003 0303 	and.w	r3, r3, #3
 800f4d8:	009b      	lsls	r3, r3, #2
 800f4da:	220f      	movs	r2, #15
 800f4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f4e0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800f4e2:	4a30      	ldr	r2, [pc, #192]	; (800f5a4 <HAL_GPIO_DeInit+0x1e8>)
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	089b      	lsrs	r3, r3, #2
 800f4e8:	3302      	adds	r3, #2
 800f4ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	43da      	mvns	r2, r3
 800f4f2:	482c      	ldr	r0, [pc, #176]	; (800f5a4 <HAL_GPIO_DeInit+0x1e8>)
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	089b      	lsrs	r3, r3, #2
 800f4f8:	400a      	ands	r2, r1
 800f4fa:	3302      	adds	r3, #2
 800f4fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681a      	ldr	r2, [r3, #0]
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	005b      	lsls	r3, r3, #1
 800f508:	2103      	movs	r1, #3
 800f50a:	fa01 f303 	lsl.w	r3, r1, r3
 800f50e:	431a      	orrs	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	08da      	lsrs	r2, r3, #3
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	3208      	adds	r2, #8
 800f51c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	f003 0307 	and.w	r3, r3, #7
 800f526:	009b      	lsls	r3, r3, #2
 800f528:	220f      	movs	r2, #15
 800f52a:	fa02 f303 	lsl.w	r3, r2, r3
 800f52e:	43db      	mvns	r3, r3
 800f530:	697a      	ldr	r2, [r7, #20]
 800f532:	08d2      	lsrs	r2, r2, #3
 800f534:	4019      	ands	r1, r3
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	3208      	adds	r2, #8
 800f53a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	68da      	ldr	r2, [r3, #12]
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	005b      	lsls	r3, r3, #1
 800f546:	2103      	movs	r1, #3
 800f548:	fa01 f303 	lsl.w	r3, r1, r3
 800f54c:	43db      	mvns	r3, r3
 800f54e:	401a      	ands	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	685a      	ldr	r2, [r3, #4]
 800f558:	2101      	movs	r1, #1
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	fa01 f303 	lsl.w	r3, r1, r3
 800f560:	43db      	mvns	r3, r3
 800f562:	401a      	ands	r2, r3
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	689a      	ldr	r2, [r3, #8]
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	005b      	lsls	r3, r3, #1
 800f570:	2103      	movs	r1, #3
 800f572:	fa01 f303 	lsl.w	r3, r1, r3
 800f576:	43db      	mvns	r3, r3
 800f578:	401a      	ands	r2, r3
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	3301      	adds	r3, #1
 800f582:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800f584:	683a      	ldr	r2, [r7, #0]
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	fa22 f303 	lsr.w	r3, r2, r3
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	f47f af1f 	bne.w	800f3d0 <HAL_GPIO_DeInit+0x14>
  }
}
 800f592:	bf00      	nop
 800f594:	bf00      	nop
 800f596:	371c      	adds	r7, #28
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr
 800f5a0:	58000080 	.word	0x58000080
 800f5a4:	58000400 	.word	0x58000400
 800f5a8:	58020000 	.word	0x58020000
 800f5ac:	58020400 	.word	0x58020400
 800f5b0:	58020800 	.word	0x58020800
 800f5b4:	58020c00 	.word	0x58020c00
 800f5b8:	58021000 	.word	0x58021000
 800f5bc:	58021400 	.word	0x58021400
 800f5c0:	58021800 	.word	0x58021800
 800f5c4:	58021c00 	.word	0x58021c00
 800f5c8:	58022000 	.word	0x58022000
 800f5cc:	58022400 	.word	0x58022400

0800f5d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	807b      	strh	r3, [r7, #2]
 800f5dc:	4613      	mov	r3, r2
 800f5de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f5e0:	787b      	ldrb	r3, [r7, #1]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d003      	beq.n	800f5ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f5e6:	887a      	ldrh	r2, [r7, #2]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800f5ec:	e003      	b.n	800f5f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800f5ee:	887b      	ldrh	r3, [r7, #2]
 800f5f0:	041a      	lsls	r2, r3, #16
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	619a      	str	r2, [r3, #24]
}
 800f5f6:	bf00      	nop
 800f5f8:	370c      	adds	r7, #12
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr
	...

0800f604 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800f60c:	4a08      	ldr	r2, [pc, #32]	; (800f630 <HAL_HSEM_FastTake+0x2c>)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	3320      	adds	r3, #32
 800f612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f616:	4a07      	ldr	r2, [pc, #28]	; (800f634 <HAL_HSEM_FastTake+0x30>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d101      	bne.n	800f620 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800f61c:	2300      	movs	r3, #0
 800f61e:	e000      	b.n	800f622 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800f620:	2301      	movs	r3, #1
}
 800f622:	4618      	mov	r0, r3
 800f624:	370c      	adds	r7, #12
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr
 800f62e:	bf00      	nop
 800f630:	58026400 	.word	0x58026400
 800f634:	80000300 	.word	0x80000300

0800f638 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800f642:	4906      	ldr	r1, [pc, #24]	; (800f65c <HAL_HSEM_Release+0x24>)
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800f650:	bf00      	nop
 800f652:	370c      	adds	r7, #12
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	58026400 	.word	0x58026400

0800f660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d101      	bne.n	800f672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f66e:	2301      	movs	r3, #1
 800f670:	e07f      	b.n	800f772 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f678:	b2db      	uxtb	r3, r3
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d106      	bne.n	800f68c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2200      	movs	r2, #0
 800f682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 f8a9 	bl	800f7de <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2224      	movs	r2, #36	; 0x24
 800f690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f022 0201 	bic.w	r2, r2, #1
 800f6a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	685a      	ldr	r2, [r3, #4]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f6b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	689a      	ldr	r2, [r3, #8]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f6c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	2b01      	cmp	r3, #1
 800f6c8:	d107      	bne.n	800f6da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	689a      	ldr	r2, [r3, #8]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f6d6:	609a      	str	r2, [r3, #8]
 800f6d8:	e006      	b.n	800f6e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	689a      	ldr	r2, [r3, #8]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800f6e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	2b02      	cmp	r3, #2
 800f6ee:	d104      	bne.n	800f6fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f6f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	6859      	ldr	r1, [r3, #4]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681a      	ldr	r2, [r3, #0]
 800f704:	4b1d      	ldr	r3, [pc, #116]	; (800f77c <HAL_I2C_Init+0x11c>)
 800f706:	430b      	orrs	r3, r1
 800f708:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	68da      	ldr	r2, [r3, #12]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f718:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	691a      	ldr	r2, [r3, #16]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	695b      	ldr	r3, [r3, #20]
 800f722:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	699b      	ldr	r3, [r3, #24]
 800f72a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	430a      	orrs	r2, r1
 800f732:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	69d9      	ldr	r1, [r3, #28]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6a1a      	ldr	r2, [r3, #32]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	430a      	orrs	r2, r1
 800f742:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f042 0201 	orr.w	r2, r2, #1
 800f752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2220      	movs	r2, #32
 800f75e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2200      	movs	r2, #0
 800f76c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800f770:	2300      	movs	r3, #0
}
 800f772:	4618      	mov	r0, r3
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	02008000 	.word	0x02008000

0800f780 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d101      	bne.n	800f792 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800f78e:	2301      	movs	r3, #1
 800f790:	e021      	b.n	800f7d6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2224      	movs	r2, #36	; 0x24
 800f796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f022 0201 	bic.w	r2, r2, #1
 800f7a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 f821 	bl	800f7f2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800f7de:	b480      	push	{r7}
 800f7e0:	b083      	sub	sp, #12
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800f7e6:	bf00      	nop
 800f7e8:	370c      	adds	r7, #12
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr

0800f7f2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800f7f2:	b480      	push	{r7}
 800f7f4:	b083      	sub	sp, #12
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800f7fa:	bf00      	nop
 800f7fc:	370c      	adds	r7, #12
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr
	...

0800f808 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b088      	sub	sp, #32
 800f80c:	af02      	add	r7, sp, #8
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	4608      	mov	r0, r1
 800f812:	4611      	mov	r1, r2
 800f814:	461a      	mov	r2, r3
 800f816:	4603      	mov	r3, r0
 800f818:	817b      	strh	r3, [r7, #10]
 800f81a:	460b      	mov	r3, r1
 800f81c:	813b      	strh	r3, [r7, #8]
 800f81e:	4613      	mov	r3, r2
 800f820:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	2b20      	cmp	r3, #32
 800f82c:	f040 80f9 	bne.w	800fa22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f830:	6a3b      	ldr	r3, [r7, #32]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d002      	beq.n	800f83c <HAL_I2C_Mem_Write+0x34>
 800f836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d105      	bne.n	800f848 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f842:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800f844:	2301      	movs	r3, #1
 800f846:	e0ed      	b.n	800fa24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d101      	bne.n	800f856 <HAL_I2C_Mem_Write+0x4e>
 800f852:	2302      	movs	r3, #2
 800f854:	e0e6      	b.n	800fa24 <HAL_I2C_Mem_Write+0x21c>
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	2201      	movs	r2, #1
 800f85a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f85e:	f7fe ffd5 	bl	800e80c <HAL_GetTick>
 800f862:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	2319      	movs	r3, #25
 800f86a:	2201      	movs	r2, #1
 800f86c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f870:	68f8      	ldr	r0, [r7, #12]
 800f872:	f000 fadd 	bl	800fe30 <I2C_WaitOnFlagUntilTimeout>
 800f876:	4603      	mov	r3, r0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d001      	beq.n	800f880 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800f87c:	2301      	movs	r3, #1
 800f87e:	e0d1      	b.n	800fa24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2221      	movs	r2, #33	; 0x21
 800f884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2240      	movs	r2, #64	; 0x40
 800f88c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2200      	movs	r2, #0
 800f894:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	6a3a      	ldr	r2, [r7, #32]
 800f89a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f8a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800f8a8:	88f8      	ldrh	r0, [r7, #6]
 800f8aa:	893a      	ldrh	r2, [r7, #8]
 800f8ac:	8979      	ldrh	r1, [r7, #10]
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	9301      	str	r3, [sp, #4]
 800f8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b4:	9300      	str	r3, [sp, #0]
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	68f8      	ldr	r0, [r7, #12]
 800f8ba:	f000 f9ed 	bl	800fc98 <I2C_RequestMemoryWrite>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d005      	beq.n	800f8d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	e0a9      	b.n	800fa24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	2bff      	cmp	r3, #255	; 0xff
 800f8d8:	d90e      	bls.n	800f8f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	22ff      	movs	r2, #255	; 0xff
 800f8de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	8979      	ldrh	r1, [r7, #10]
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	9300      	str	r3, [sp, #0]
 800f8ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f8f0:	68f8      	ldr	r0, [r7, #12]
 800f8f2:	f000 fc45 	bl	8010180 <I2C_TransferConfig>
 800f8f6:	e00f      	b.n	800f918 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8fc:	b29a      	uxth	r2, r3
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f906:	b2da      	uxtb	r2, r3
 800f908:	8979      	ldrh	r1, [r7, #10]
 800f90a:	2300      	movs	r3, #0
 800f90c:	9300      	str	r3, [sp, #0]
 800f90e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f912:	68f8      	ldr	r0, [r7, #12]
 800f914:	f000 fc34 	bl	8010180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f918:	697a      	ldr	r2, [r7, #20]
 800f91a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f000 fac7 	bl	800feb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800f922:	4603      	mov	r3, r0
 800f924:	2b00      	cmp	r3, #0
 800f926:	d001      	beq.n	800f92c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800f928:	2301      	movs	r3, #1
 800f92a:	e07b      	b.n	800fa24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f930:	781a      	ldrb	r2, [r3, #0]
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93c:	1c5a      	adds	r2, r3, #1
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f946:	b29b      	uxth	r3, r3
 800f948:	3b01      	subs	r3, #1
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f954:	3b01      	subs	r3, #1
 800f956:	b29a      	uxth	r2, r3
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f960:	b29b      	uxth	r3, r3
 800f962:	2b00      	cmp	r3, #0
 800f964:	d034      	beq.n	800f9d0 <HAL_I2C_Mem_Write+0x1c8>
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d130      	bne.n	800f9d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	9300      	str	r3, [sp, #0]
 800f972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f974:	2200      	movs	r2, #0
 800f976:	2180      	movs	r1, #128	; 0x80
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f000 fa59 	bl	800fe30 <I2C_WaitOnFlagUntilTimeout>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d001      	beq.n	800f988 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800f984:	2301      	movs	r3, #1
 800f986:	e04d      	b.n	800fa24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	2bff      	cmp	r3, #255	; 0xff
 800f990:	d90e      	bls.n	800f9b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	22ff      	movs	r2, #255	; 0xff
 800f996:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f99c:	b2da      	uxtb	r2, r3
 800f99e:	8979      	ldrh	r1, [r7, #10]
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	9300      	str	r3, [sp, #0]
 800f9a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f000 fbe9 	bl	8010180 <I2C_TransferConfig>
 800f9ae:	e00f      	b.n	800f9d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9be:	b2da      	uxtb	r2, r3
 800f9c0:	8979      	ldrh	r1, [r7, #10]
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	9300      	str	r3, [sp, #0]
 800f9c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	f000 fbd8 	bl	8010180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d19e      	bne.n	800f918 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f9da:	697a      	ldr	r2, [r7, #20]
 800f9dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	f000 faa6 	bl	800ff30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d001      	beq.n	800f9ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e01a      	b.n	800fa24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2220      	movs	r2, #32
 800f9f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	6859      	ldr	r1, [r3, #4]
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	4b0a      	ldr	r3, [pc, #40]	; (800fa2c <HAL_I2C_Mem_Write+0x224>)
 800fa02:	400b      	ands	r3, r1
 800fa04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2220      	movs	r2, #32
 800fa0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2200      	movs	r2, #0
 800fa12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	e000      	b.n	800fa24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800fa22:	2302      	movs	r3, #2
  }
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3718      	adds	r7, #24
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	fe00e800 	.word	0xfe00e800

0800fa30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b088      	sub	sp, #32
 800fa34:	af02      	add	r7, sp, #8
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	4608      	mov	r0, r1
 800fa3a:	4611      	mov	r1, r2
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	4603      	mov	r3, r0
 800fa40:	817b      	strh	r3, [r7, #10]
 800fa42:	460b      	mov	r3, r1
 800fa44:	813b      	strh	r3, [r7, #8]
 800fa46:	4613      	mov	r3, r2
 800fa48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	2b20      	cmp	r3, #32
 800fa54:	f040 80fd 	bne.w	800fc52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa58:	6a3b      	ldr	r3, [r7, #32]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d002      	beq.n	800fa64 <HAL_I2C_Mem_Read+0x34>
 800fa5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d105      	bne.n	800fa70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	e0f1      	b.n	800fc54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	d101      	bne.n	800fa7e <HAL_I2C_Mem_Read+0x4e>
 800fa7a:	2302      	movs	r3, #2
 800fa7c:	e0ea      	b.n	800fc54 <HAL_I2C_Mem_Read+0x224>
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2201      	movs	r2, #1
 800fa82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fa86:	f7fe fec1 	bl	800e80c <HAL_GetTick>
 800fa8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	9300      	str	r3, [sp, #0]
 800fa90:	2319      	movs	r3, #25
 800fa92:	2201      	movs	r2, #1
 800fa94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fa98:	68f8      	ldr	r0, [r7, #12]
 800fa9a:	f000 f9c9 	bl	800fe30 <I2C_WaitOnFlagUntilTimeout>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d001      	beq.n	800faa8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800faa4:	2301      	movs	r3, #1
 800faa6:	e0d5      	b.n	800fc54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2222      	movs	r2, #34	; 0x22
 800faac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2240      	movs	r2, #64	; 0x40
 800fab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2200      	movs	r2, #0
 800fabc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	6a3a      	ldr	r2, [r7, #32]
 800fac2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2200      	movs	r2, #0
 800face:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800fad0:	88f8      	ldrh	r0, [r7, #6]
 800fad2:	893a      	ldrh	r2, [r7, #8]
 800fad4:	8979      	ldrh	r1, [r7, #10]
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	9301      	str	r3, [sp, #4]
 800fada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	4603      	mov	r3, r0
 800fae0:	68f8      	ldr	r0, [r7, #12]
 800fae2:	f000 f92d 	bl	800fd40 <I2C_RequestMemoryRead>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d005      	beq.n	800faf8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2200      	movs	r2, #0
 800faf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800faf4:	2301      	movs	r3, #1
 800faf6:	e0ad      	b.n	800fc54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	2bff      	cmp	r3, #255	; 0xff
 800fb00:	d90e      	bls.n	800fb20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	22ff      	movs	r2, #255	; 0xff
 800fb06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb0c:	b2da      	uxtb	r2, r3
 800fb0e:	8979      	ldrh	r1, [r7, #10]
 800fb10:	4b52      	ldr	r3, [pc, #328]	; (800fc5c <HAL_I2C_Mem_Read+0x22c>)
 800fb12:	9300      	str	r3, [sp, #0]
 800fb14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f000 fb31 	bl	8010180 <I2C_TransferConfig>
 800fb1e:	e00f      	b.n	800fb40 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb24:	b29a      	uxth	r2, r3
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb2e:	b2da      	uxtb	r2, r3
 800fb30:	8979      	ldrh	r1, [r7, #10]
 800fb32:	4b4a      	ldr	r3, [pc, #296]	; (800fc5c <HAL_I2C_Mem_Read+0x22c>)
 800fb34:	9300      	str	r3, [sp, #0]
 800fb36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fb3a:	68f8      	ldr	r0, [r7, #12]
 800fb3c:	f000 fb20 	bl	8010180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	9300      	str	r3, [sp, #0]
 800fb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb46:	2200      	movs	r2, #0
 800fb48:	2104      	movs	r1, #4
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f000 f970 	bl	800fe30 <I2C_WaitOnFlagUntilTimeout>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d001      	beq.n	800fb5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800fb56:	2301      	movs	r3, #1
 800fb58:	e07c      	b.n	800fc54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb64:	b2d2      	uxtb	r2, r2
 800fb66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6c:	1c5a      	adds	r2, r3, #1
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb76:	3b01      	subs	r3, #1
 800fb78:	b29a      	uxth	r2, r3
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	3b01      	subs	r3, #1
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d034      	beq.n	800fc00 <HAL_I2C_Mem_Read+0x1d0>
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d130      	bne.n	800fc00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba4:	2200      	movs	r2, #0
 800fba6:	2180      	movs	r1, #128	; 0x80
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f000 f941 	bl	800fe30 <I2C_WaitOnFlagUntilTimeout>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d001      	beq.n	800fbb8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	e04d      	b.n	800fc54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	2bff      	cmp	r3, #255	; 0xff
 800fbc0:	d90e      	bls.n	800fbe0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	22ff      	movs	r2, #255	; 0xff
 800fbc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	8979      	ldrh	r1, [r7, #10]
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f000 fad1 	bl	8010180 <I2C_TransferConfig>
 800fbde:	e00f      	b.n	800fc00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbee:	b2da      	uxtb	r2, r3
 800fbf0:	8979      	ldrh	r1, [r7, #10]
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	9300      	str	r3, [sp, #0]
 800fbf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f000 fac0 	bl	8010180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d19a      	bne.n	800fb40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fc0a:	697a      	ldr	r2, [r7, #20]
 800fc0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc0e:	68f8      	ldr	r0, [r7, #12]
 800fc10:	f000 f98e 	bl	800ff30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d001      	beq.n	800fc1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	e01a      	b.n	800fc54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	2220      	movs	r2, #32
 800fc24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	6859      	ldr	r1, [r3, #4]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681a      	ldr	r2, [r3, #0]
 800fc30:	4b0b      	ldr	r3, [pc, #44]	; (800fc60 <HAL_I2C_Mem_Read+0x230>)
 800fc32:	400b      	ands	r3, r1
 800fc34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2220      	movs	r2, #32
 800fc3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2200      	movs	r2, #0
 800fc42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	e000      	b.n	800fc54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800fc52:	2302      	movs	r3, #2
  }
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3718      	adds	r7, #24
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	80002400 	.word	0x80002400
 800fc60:	fe00e800 	.word	0xfe00e800

0800fc64 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc72:	b2db      	uxtb	r3, r3
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	370c      	adds	r7, #12
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr

0800fc80 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b083      	sub	sp, #12
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	370c      	adds	r7, #12
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr

0800fc98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b086      	sub	sp, #24
 800fc9c:	af02      	add	r7, sp, #8
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	4608      	mov	r0, r1
 800fca2:	4611      	mov	r1, r2
 800fca4:	461a      	mov	r2, r3
 800fca6:	4603      	mov	r3, r0
 800fca8:	817b      	strh	r3, [r7, #10]
 800fcaa:	460b      	mov	r3, r1
 800fcac:	813b      	strh	r3, [r7, #8]
 800fcae:	4613      	mov	r3, r2
 800fcb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800fcb2:	88fb      	ldrh	r3, [r7, #6]
 800fcb4:	b2da      	uxtb	r2, r3
 800fcb6:	8979      	ldrh	r1, [r7, #10]
 800fcb8:	4b20      	ldr	r3, [pc, #128]	; (800fd3c <I2C_RequestMemoryWrite+0xa4>)
 800fcba:	9300      	str	r3, [sp, #0]
 800fcbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fcc0:	68f8      	ldr	r0, [r7, #12]
 800fcc2:	f000 fa5d 	bl	8010180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fcc6:	69fa      	ldr	r2, [r7, #28]
 800fcc8:	69b9      	ldr	r1, [r7, #24]
 800fcca:	68f8      	ldr	r0, [r7, #12]
 800fccc:	f000 f8f0 	bl	800feb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d001      	beq.n	800fcda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	e02c      	b.n	800fd34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fcda:	88fb      	ldrh	r3, [r7, #6]
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d105      	bne.n	800fcec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fce0:	893b      	ldrh	r3, [r7, #8]
 800fce2:	b2da      	uxtb	r2, r3
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	629a      	str	r2, [r3, #40]	; 0x28
 800fcea:	e015      	b.n	800fd18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fcec:	893b      	ldrh	r3, [r7, #8]
 800fcee:	0a1b      	lsrs	r3, r3, #8
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	b2da      	uxtb	r2, r3
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fcfa:	69fa      	ldr	r2, [r7, #28]
 800fcfc:	69b9      	ldr	r1, [r7, #24]
 800fcfe:	68f8      	ldr	r0, [r7, #12]
 800fd00:	f000 f8d6 	bl	800feb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d001      	beq.n	800fd0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	e012      	b.n	800fd34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd0e:	893b      	ldrh	r3, [r7, #8]
 800fd10:	b2da      	uxtb	r2, r3
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fd18:	69fb      	ldr	r3, [r7, #28]
 800fd1a:	9300      	str	r3, [sp, #0]
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	2180      	movs	r1, #128	; 0x80
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f000 f884 	bl	800fe30 <I2C_WaitOnFlagUntilTimeout>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d001      	beq.n	800fd32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	e000      	b.n	800fd34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800fd32:	2300      	movs	r3, #0
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3710      	adds	r7, #16
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	80002000 	.word	0x80002000

0800fd40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af02      	add	r7, sp, #8
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	4608      	mov	r0, r1
 800fd4a:	4611      	mov	r1, r2
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	4603      	mov	r3, r0
 800fd50:	817b      	strh	r3, [r7, #10]
 800fd52:	460b      	mov	r3, r1
 800fd54:	813b      	strh	r3, [r7, #8]
 800fd56:	4613      	mov	r3, r2
 800fd58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fd5a:	88fb      	ldrh	r3, [r7, #6]
 800fd5c:	b2da      	uxtb	r2, r3
 800fd5e:	8979      	ldrh	r1, [r7, #10]
 800fd60:	4b20      	ldr	r3, [pc, #128]	; (800fde4 <I2C_RequestMemoryRead+0xa4>)
 800fd62:	9300      	str	r3, [sp, #0]
 800fd64:	2300      	movs	r3, #0
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f000 fa0a 	bl	8010180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd6c:	69fa      	ldr	r2, [r7, #28]
 800fd6e:	69b9      	ldr	r1, [r7, #24]
 800fd70:	68f8      	ldr	r0, [r7, #12]
 800fd72:	f000 f89d 	bl	800feb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d001      	beq.n	800fd80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	e02c      	b.n	800fdda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fd80:	88fb      	ldrh	r3, [r7, #6]
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d105      	bne.n	800fd92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd86:	893b      	ldrh	r3, [r7, #8]
 800fd88:	b2da      	uxtb	r2, r3
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	629a      	str	r2, [r3, #40]	; 0x28
 800fd90:	e015      	b.n	800fdbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fd92:	893b      	ldrh	r3, [r7, #8]
 800fd94:	0a1b      	lsrs	r3, r3, #8
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	b2da      	uxtb	r2, r3
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fda0:	69fa      	ldr	r2, [r7, #28]
 800fda2:	69b9      	ldr	r1, [r7, #24]
 800fda4:	68f8      	ldr	r0, [r7, #12]
 800fda6:	f000 f883 	bl	800feb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d001      	beq.n	800fdb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	e012      	b.n	800fdda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fdb4:	893b      	ldrh	r3, [r7, #8]
 800fdb6:	b2da      	uxtb	r2, r3
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	2140      	movs	r1, #64	; 0x40
 800fdc8:	68f8      	ldr	r0, [r7, #12]
 800fdca:	f000 f831 	bl	800fe30 <I2C_WaitOnFlagUntilTimeout>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d001      	beq.n	800fdd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	e000      	b.n	800fdda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fdd8:	2300      	movs	r3, #0
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3710      	adds	r7, #16
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	80002000 	.word	0x80002000

0800fde8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	699b      	ldr	r3, [r3, #24]
 800fdf6:	f003 0302 	and.w	r3, r3, #2
 800fdfa:	2b02      	cmp	r3, #2
 800fdfc:	d103      	bne.n	800fe06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2200      	movs	r2, #0
 800fe04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	699b      	ldr	r3, [r3, #24]
 800fe0c:	f003 0301 	and.w	r3, r3, #1
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d007      	beq.n	800fe24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	699a      	ldr	r2, [r3, #24]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f042 0201 	orr.w	r2, r2, #1
 800fe22:	619a      	str	r2, [r3, #24]
  }
}
 800fe24:	bf00      	nop
 800fe26:	370c      	adds	r7, #12
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	603b      	str	r3, [r7, #0]
 800fe3c:	4613      	mov	r3, r2
 800fe3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fe40:	e022      	b.n	800fe88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe48:	d01e      	beq.n	800fe88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe4a:	f7fe fcdf 	bl	800e80c <HAL_GetTick>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	1ad3      	subs	r3, r2, r3
 800fe54:	683a      	ldr	r2, [r7, #0]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d302      	bcc.n	800fe60 <I2C_WaitOnFlagUntilTimeout+0x30>
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d113      	bne.n	800fe88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe64:	f043 0220 	orr.w	r2, r3, #32
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2220      	movs	r2, #32
 800fe70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2200      	movs	r2, #0
 800fe78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800fe84:	2301      	movs	r3, #1
 800fe86:	e00f      	b.n	800fea8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	699a      	ldr	r2, [r3, #24]
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	4013      	ands	r3, r2
 800fe92:	68ba      	ldr	r2, [r7, #8]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	bf0c      	ite	eq
 800fe98:	2301      	moveq	r3, #1
 800fe9a:	2300      	movne	r3, #0
 800fe9c:	b2db      	uxtb	r3, r3
 800fe9e:	461a      	mov	r2, r3
 800fea0:	79fb      	ldrb	r3, [r7, #7]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d0cd      	beq.n	800fe42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fea6:	2300      	movs	r3, #0
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3710      	adds	r7, #16
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	60f8      	str	r0, [r7, #12]
 800feb8:	60b9      	str	r1, [r7, #8]
 800feba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800febc:	e02c      	b.n	800ff18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	68b9      	ldr	r1, [r7, #8]
 800fec2:	68f8      	ldr	r0, [r7, #12]
 800fec4:	f000 f870 	bl	800ffa8 <I2C_IsErrorOccurred>
 800fec8:	4603      	mov	r3, r0
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d001      	beq.n	800fed2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fece:	2301      	movs	r3, #1
 800fed0:	e02a      	b.n	800ff28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fed8:	d01e      	beq.n	800ff18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800feda:	f7fe fc97 	bl	800e80c <HAL_GetTick>
 800fede:	4602      	mov	r2, r0
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	1ad3      	subs	r3, r2, r3
 800fee4:	68ba      	ldr	r2, [r7, #8]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d302      	bcc.n	800fef0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d113      	bne.n	800ff18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fef4:	f043 0220 	orr.w	r2, r3, #32
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2220      	movs	r2, #32
 800ff00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2200      	movs	r2, #0
 800ff08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ff14:	2301      	movs	r3, #1
 800ff16:	e007      	b.n	800ff28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	699b      	ldr	r3, [r3, #24]
 800ff1e:	f003 0302 	and.w	r3, r3, #2
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	d1cb      	bne.n	800febe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ff26:	2300      	movs	r3, #0
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3710      	adds	r7, #16
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ff3c:	e028      	b.n	800ff90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	68b9      	ldr	r1, [r7, #8]
 800ff42:	68f8      	ldr	r0, [r7, #12]
 800ff44:	f000 f830 	bl	800ffa8 <I2C_IsErrorOccurred>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d001      	beq.n	800ff52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ff4e:	2301      	movs	r3, #1
 800ff50:	e026      	b.n	800ffa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff52:	f7fe fc5b 	bl	800e80c <HAL_GetTick>
 800ff56:	4602      	mov	r2, r0
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	1ad3      	subs	r3, r2, r3
 800ff5c:	68ba      	ldr	r2, [r7, #8]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d302      	bcc.n	800ff68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d113      	bne.n	800ff90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff6c:	f043 0220 	orr.w	r2, r3, #32
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2220      	movs	r2, #32
 800ff78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2200      	movs	r2, #0
 800ff88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e007      	b.n	800ffa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	699b      	ldr	r3, [r3, #24]
 800ff96:	f003 0320 	and.w	r3, r3, #32
 800ff9a:	2b20      	cmp	r3, #32
 800ff9c:	d1cf      	bne.n	800ff3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3710      	adds	r7, #16
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b08a      	sub	sp, #40	; 0x28
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	699b      	ldr	r3, [r3, #24]
 800ffc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ffca:	69bb      	ldr	r3, [r7, #24]
 800ffcc:	f003 0310 	and.w	r3, r3, #16
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d075      	beq.n	80100c0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2210      	movs	r2, #16
 800ffda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ffdc:	e056      	b.n	801008c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffe4:	d052      	beq.n	801008c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ffe6:	f7fe fc11 	bl	800e80c <HAL_GetTick>
 800ffea:	4602      	mov	r2, r0
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	1ad3      	subs	r3, r2, r3
 800fff0:	68ba      	ldr	r2, [r7, #8]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d302      	bcc.n	800fffc <I2C_IsErrorOccurred+0x54>
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d147      	bne.n	801008c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010006:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801000e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	699b      	ldr	r3, [r3, #24]
 8010016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801001a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801001e:	d12e      	bne.n	801007e <I2C_IsErrorOccurred+0xd6>
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010026:	d02a      	beq.n	801007e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8010028:	7cfb      	ldrb	r3, [r7, #19]
 801002a:	2b20      	cmp	r3, #32
 801002c:	d027      	beq.n	801007e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	685a      	ldr	r2, [r3, #4]
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801003c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801003e:	f7fe fbe5 	bl	800e80c <HAL_GetTick>
 8010042:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010044:	e01b      	b.n	801007e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010046:	f7fe fbe1 	bl	800e80c <HAL_GetTick>
 801004a:	4602      	mov	r2, r0
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	1ad3      	subs	r3, r2, r3
 8010050:	2b19      	cmp	r3, #25
 8010052:	d914      	bls.n	801007e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010058:	f043 0220 	orr.w	r2, r3, #32
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2220      	movs	r2, #32
 8010064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2200      	movs	r2, #0
 801006c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	2200      	movs	r2, #0
 8010074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8010078:	2301      	movs	r3, #1
 801007a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	699b      	ldr	r3, [r3, #24]
 8010084:	f003 0320 	and.w	r3, r3, #32
 8010088:	2b20      	cmp	r3, #32
 801008a:	d1dc      	bne.n	8010046 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	699b      	ldr	r3, [r3, #24]
 8010092:	f003 0320 	and.w	r3, r3, #32
 8010096:	2b20      	cmp	r3, #32
 8010098:	d003      	beq.n	80100a2 <I2C_IsErrorOccurred+0xfa>
 801009a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d09d      	beq.n	800ffde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80100a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d103      	bne.n	80100b2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	2220      	movs	r2, #32
 80100b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80100b2:	6a3b      	ldr	r3, [r7, #32]
 80100b4:	f043 0304 	orr.w	r3, r3, #4
 80100b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80100ba:	2301      	movs	r3, #1
 80100bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	699b      	ldr	r3, [r3, #24]
 80100c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80100c8:	69bb      	ldr	r3, [r7, #24]
 80100ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00b      	beq.n	80100ea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80100d2:	6a3b      	ldr	r3, [r7, #32]
 80100d4:	f043 0301 	orr.w	r3, r3, #1
 80100d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80100e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80100e4:	2301      	movs	r3, #1
 80100e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80100ea:	69bb      	ldr	r3, [r7, #24]
 80100ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d00b      	beq.n	801010c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80100f4:	6a3b      	ldr	r3, [r7, #32]
 80100f6:	f043 0308 	orr.w	r3, r3, #8
 80100fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010104:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010106:	2301      	movs	r3, #1
 8010108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801010c:	69bb      	ldr	r3, [r7, #24]
 801010e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010112:	2b00      	cmp	r3, #0
 8010114:	d00b      	beq.n	801012e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010116:	6a3b      	ldr	r3, [r7, #32]
 8010118:	f043 0302 	orr.w	r3, r3, #2
 801011c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010126:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010128:	2301      	movs	r3, #1
 801012a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801012e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010132:	2b00      	cmp	r3, #0
 8010134:	d01c      	beq.n	8010170 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010136:	68f8      	ldr	r0, [r7, #12]
 8010138:	f7ff fe56 	bl	800fde8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	6859      	ldr	r1, [r3, #4]
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	4b0d      	ldr	r3, [pc, #52]	; (801017c <I2C_IsErrorOccurred+0x1d4>)
 8010148:	400b      	ands	r3, r1
 801014a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010150:	6a3b      	ldr	r3, [r7, #32]
 8010152:	431a      	orrs	r2, r3
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2220      	movs	r2, #32
 801015c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2200      	movs	r2, #0
 8010164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2200      	movs	r2, #0
 801016c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8010170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010174:	4618      	mov	r0, r3
 8010176:	3728      	adds	r7, #40	; 0x28
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	fe00e800 	.word	0xfe00e800

08010180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010180:	b480      	push	{r7}
 8010182:	b087      	sub	sp, #28
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	607b      	str	r3, [r7, #4]
 801018a:	460b      	mov	r3, r1
 801018c:	817b      	strh	r3, [r7, #10]
 801018e:	4613      	mov	r3, r2
 8010190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010192:	897b      	ldrh	r3, [r7, #10]
 8010194:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010198:	7a7b      	ldrb	r3, [r7, #9]
 801019a:	041b      	lsls	r3, r3, #16
 801019c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80101a0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80101a6:	6a3b      	ldr	r3, [r7, #32]
 80101a8:	4313      	orrs	r3, r2
 80101aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80101ae:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	685a      	ldr	r2, [r3, #4]
 80101b6:	6a3b      	ldr	r3, [r7, #32]
 80101b8:	0d5b      	lsrs	r3, r3, #21
 80101ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80101be:	4b08      	ldr	r3, [pc, #32]	; (80101e0 <I2C_TransferConfig+0x60>)
 80101c0:	430b      	orrs	r3, r1
 80101c2:	43db      	mvns	r3, r3
 80101c4:	ea02 0103 	and.w	r1, r2, r3
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	697a      	ldr	r2, [r7, #20]
 80101ce:	430a      	orrs	r2, r1
 80101d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80101d2:	bf00      	nop
 80101d4:	371c      	adds	r7, #28
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr
 80101de:	bf00      	nop
 80101e0:	03ff63ff 	.word	0x03ff63ff

080101e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80101e4:	b480      	push	{r7}
 80101e6:	b083      	sub	sp, #12
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	2b20      	cmp	r3, #32
 80101f8:	d138      	bne.n	801026c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010200:	2b01      	cmp	r3, #1
 8010202:	d101      	bne.n	8010208 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010204:	2302      	movs	r3, #2
 8010206:	e032      	b.n	801026e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2201      	movs	r2, #1
 801020c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2224      	movs	r2, #36	; 0x24
 8010214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	681a      	ldr	r2, [r3, #0]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f022 0201 	bic.w	r2, r2, #1
 8010226:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010236:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	6819      	ldr	r1, [r3, #0]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	683a      	ldr	r2, [r7, #0]
 8010244:	430a      	orrs	r2, r1
 8010246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	f042 0201 	orr.w	r2, r2, #1
 8010256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2220      	movs	r2, #32
 801025c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2200      	movs	r2, #0
 8010264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010268:	2300      	movs	r3, #0
 801026a:	e000      	b.n	801026e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801026c:	2302      	movs	r3, #2
  }
}
 801026e:	4618      	mov	r0, r3
 8010270:	370c      	adds	r7, #12
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr

0801027a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801027a:	b480      	push	{r7}
 801027c:	b085      	sub	sp, #20
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
 8010282:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801028a:	b2db      	uxtb	r3, r3
 801028c:	2b20      	cmp	r3, #32
 801028e:	d139      	bne.n	8010304 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010296:	2b01      	cmp	r3, #1
 8010298:	d101      	bne.n	801029e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801029a:	2302      	movs	r3, #2
 801029c:	e033      	b.n	8010306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2201      	movs	r2, #1
 80102a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2224      	movs	r2, #36	; 0x24
 80102aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f022 0201 	bic.w	r2, r2, #1
 80102bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80102cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	021b      	lsls	r3, r3, #8
 80102d2:	68fa      	ldr	r2, [r7, #12]
 80102d4:	4313      	orrs	r3, r2
 80102d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	68fa      	ldr	r2, [r7, #12]
 80102de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	f042 0201 	orr.w	r2, r2, #1
 80102ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2220      	movs	r2, #32
 80102f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2200      	movs	r2, #0
 80102fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010300:	2300      	movs	r3, #0
 8010302:	e000      	b.n	8010306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010304:	2302      	movs	r3, #2
  }
}
 8010306:	4618      	mov	r0, r3
 8010308:	3714      	adds	r7, #20
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr
	...

08010314 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d101      	bne.n	8010326 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8010322:	2301      	movs	r3, #1
 8010324:	e0bf      	b.n	80104a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801032c:	b2db      	uxtb	r3, r3
 801032e:	2b00      	cmp	r3, #0
 8010330:	d106      	bne.n	8010340 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2200      	movs	r2, #0
 8010336:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7f1 ffe0 	bl	8002300 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2202      	movs	r2, #2
 8010344:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	699a      	ldr	r2, [r3, #24]
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8010356:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	6999      	ldr	r1, [r3, #24]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	685a      	ldr	r2, [r3, #4]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	689b      	ldr	r3, [r3, #8]
 8010366:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801036c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	691b      	ldr	r3, [r3, #16]
 8010372:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	430a      	orrs	r2, r1
 801037a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	6899      	ldr	r1, [r3, #8]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681a      	ldr	r2, [r3, #0]
 8010386:	4b4a      	ldr	r3, [pc, #296]	; (80104b0 <HAL_LTDC_Init+0x19c>)
 8010388:	400b      	ands	r3, r1
 801038a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	695b      	ldr	r3, [r3, #20]
 8010390:	041b      	lsls	r3, r3, #16
 8010392:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	6899      	ldr	r1, [r3, #8]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	699a      	ldr	r2, [r3, #24]
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	431a      	orrs	r2, r3
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	430a      	orrs	r2, r1
 80103a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	68d9      	ldr	r1, [r3, #12]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	4b3e      	ldr	r3, [pc, #248]	; (80104b0 <HAL_LTDC_Init+0x19c>)
 80103b6:	400b      	ands	r3, r1
 80103b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	69db      	ldr	r3, [r3, #28]
 80103be:	041b      	lsls	r3, r3, #16
 80103c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	68d9      	ldr	r1, [r3, #12]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6a1a      	ldr	r2, [r3, #32]
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	431a      	orrs	r2, r3
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	430a      	orrs	r2, r1
 80103d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	6919      	ldr	r1, [r3, #16]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	4b33      	ldr	r3, [pc, #204]	; (80104b0 <HAL_LTDC_Init+0x19c>)
 80103e4:	400b      	ands	r3, r1
 80103e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ec:	041b      	lsls	r3, r3, #16
 80103ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	6919      	ldr	r1, [r3, #16]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	431a      	orrs	r2, r3
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	430a      	orrs	r2, r1
 8010404:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	6959      	ldr	r1, [r3, #20]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	4b27      	ldr	r3, [pc, #156]	; (80104b0 <HAL_LTDC_Init+0x19c>)
 8010412:	400b      	ands	r3, r1
 8010414:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801041a:	041b      	lsls	r3, r3, #16
 801041c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	6959      	ldr	r1, [r3, #20]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	431a      	orrs	r2, r3
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	430a      	orrs	r2, r1
 8010432:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801043a:	021b      	lsls	r3, r3, #8
 801043c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010444:	041b      	lsls	r3, r3, #16
 8010446:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8010456:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801045e:	68ba      	ldr	r2, [r7, #8]
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	4313      	orrs	r3, r2
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 801046a:	431a      	orrs	r2, r3
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	430a      	orrs	r2, r1
 8010472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	f042 0206 	orr.w	r2, r2, #6
 8010482:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	699a      	ldr	r2, [r3, #24]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f042 0201 	orr.w	r2, r2, #1
 8010492:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2200      	movs	r2, #0
 8010498:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2201      	movs	r2, #1
 80104a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80104a4:	2300      	movs	r3, #0
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3710      	adds	r7, #16
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
 80104ae:	bf00      	nop
 80104b0:	f000f800 	.word	0xf000f800

080104b4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104ca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f003 0304 	and.w	r3, r3, #4
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d023      	beq.n	801051e <HAL_LTDC_IRQHandler+0x6a>
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	f003 0304 	and.w	r3, r3, #4
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d01e      	beq.n	801051e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f022 0204 	bic.w	r2, r2, #4
 80104ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2204      	movs	r2, #4
 80104f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80104fe:	f043 0201 	orr.w	r2, r3, #1
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2204      	movs	r2, #4
 801050c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2200      	movs	r2, #0
 8010514:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f000 f86f 	bl	80105fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f003 0302 	and.w	r3, r3, #2
 8010524:	2b00      	cmp	r3, #0
 8010526:	d023      	beq.n	8010570 <HAL_LTDC_IRQHandler+0xbc>
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	f003 0302 	and.w	r3, r3, #2
 801052e:	2b00      	cmp	r3, #0
 8010530:	d01e      	beq.n	8010570 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f022 0202 	bic.w	r2, r2, #2
 8010540:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	2202      	movs	r2, #2
 8010548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010550:	f043 0202 	orr.w	r2, r3, #2
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2204      	movs	r2, #4
 801055e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2200      	movs	r2, #0
 8010566:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f000 f846 	bl	80105fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f003 0301 	and.w	r3, r3, #1
 8010576:	2b00      	cmp	r3, #0
 8010578:	d01b      	beq.n	80105b2 <HAL_LTDC_IRQHandler+0xfe>
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	f003 0301 	and.w	r3, r3, #1
 8010580:	2b00      	cmp	r3, #0
 8010582:	d016      	beq.n	80105b2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	f022 0201 	bic.w	r2, r2, #1
 8010592:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2201      	movs	r2, #1
 801059a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2201      	movs	r2, #1
 80105a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2200      	movs	r2, #0
 80105a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f7f4 fdb3 	bl	8005118 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f003 0308 	and.w	r3, r3, #8
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d01b      	beq.n	80105f4 <HAL_LTDC_IRQHandler+0x140>
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	f003 0308 	and.w	r3, r3, #8
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d016      	beq.n	80105f4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	f022 0208 	bic.w	r2, r2, #8
 80105d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2208      	movs	r2, #8
 80105dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2201      	movs	r2, #1
 80105e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2200      	movs	r2, #0
 80105ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f000 f80e 	bl	8010610 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80105f4:	bf00      	nop
 80105f6:	3710      	adds	r7, #16
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80105fc:	b480      	push	{r7}
 80105fe:	b083      	sub	sp, #12
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8010604:	bf00      	nop
 8010606:	370c      	adds	r7, #12
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8010618:	bf00      	nop
 801061a:	370c      	adds	r7, #12
 801061c:	46bd      	mov	sp, r7
 801061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010622:	4770      	bx	lr

08010624 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8010624:	b5b0      	push	{r4, r5, r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8010636:	2b01      	cmp	r3, #1
 8010638:	d101      	bne.n	801063e <HAL_LTDC_ConfigLayer+0x1a>
 801063a:	2302      	movs	r3, #2
 801063c:	e02c      	b.n	8010698 <HAL_LTDC_ConfigLayer+0x74>
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2201      	movs	r2, #1
 8010642:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2202      	movs	r2, #2
 801064a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801064e:	68fa      	ldr	r2, [r7, #12]
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2134      	movs	r1, #52	; 0x34
 8010654:	fb01 f303 	mul.w	r3, r1, r3
 8010658:	4413      	add	r3, r2
 801065a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	4614      	mov	r4, r2
 8010662:	461d      	mov	r5, r3
 8010664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010670:	682b      	ldr	r3, [r5, #0]
 8010672:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	68b9      	ldr	r1, [r7, #8]
 8010678:	68f8      	ldr	r0, [r7, #12]
 801067a:	f000 f849 	bl	8010710 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	2201      	movs	r2, #1
 8010684:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	2201      	movs	r2, #1
 801068a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2200      	movs	r2, #0
 8010692:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8010696:	2300      	movs	r3, #0
}
 8010698:	4618      	mov	r0, r3
 801069a:	3710      	adds	r7, #16
 801069c:	46bd      	mov	sp, r7
 801069e:	bdb0      	pop	{r4, r5, r7, pc}

080106a0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80106a0:	b480      	push	{r7}
 80106a2:	b083      	sub	sp, #12
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d101      	bne.n	80106b8 <HAL_LTDC_ProgramLineEvent+0x18>
 80106b4:	2302      	movs	r3, #2
 80106b6:	e023      	b.n	8010700 <HAL_LTDC_ProgramLineEvent+0x60>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2201      	movs	r2, #1
 80106bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2202      	movs	r2, #2
 80106c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f022 0201 	bic.w	r2, r2, #1
 80106d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80106d8:	4a0c      	ldr	r2, [pc, #48]	; (801070c <HAL_LTDC_ProgramLineEvent+0x6c>)
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f042 0201 	orr.w	r2, r2, #1
 80106ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2201      	movs	r2, #1
 80106f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2200      	movs	r2, #0
 80106fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	370c      	adds	r7, #12
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr
 801070c:	50001000 	.word	0x50001000

08010710 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8010710:	b480      	push	{r7}
 8010712:	b089      	sub	sp, #36	; 0x24
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	685a      	ldr	r2, [r3, #4]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	0c1b      	lsrs	r3, r3, #16
 8010728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801072c:	4413      	add	r3, r2
 801072e:	041b      	lsls	r3, r3, #16
 8010730:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	01db      	lsls	r3, r3, #7
 801073c:	4413      	add	r3, r2
 801073e:	3384      	adds	r3, #132	; 0x84
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	68fa      	ldr	r2, [r7, #12]
 8010744:	6812      	ldr	r2, [r2, #0]
 8010746:	4611      	mov	r1, r2
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	01d2      	lsls	r2, r2, #7
 801074c:	440a      	add	r2, r1
 801074e:	3284      	adds	r2, #132	; 0x84
 8010750:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8010754:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	681a      	ldr	r2, [r3, #0]
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	0c1b      	lsrs	r3, r3, #16
 8010762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010766:	4413      	add	r3, r2
 8010768:	1c5a      	adds	r2, r3, #1
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	4619      	mov	r1, r3
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	01db      	lsls	r3, r3, #7
 8010774:	440b      	add	r3, r1
 8010776:	3384      	adds	r3, #132	; 0x84
 8010778:	4619      	mov	r1, r3
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	4313      	orrs	r3, r2
 801077e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	68da      	ldr	r2, [r3, #12]
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801078e:	4413      	add	r3, r2
 8010790:	041b      	lsls	r3, r3, #16
 8010792:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	461a      	mov	r2, r3
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	01db      	lsls	r3, r3, #7
 801079e:	4413      	add	r3, r2
 80107a0:	3384      	adds	r3, #132	; 0x84
 80107a2:	689b      	ldr	r3, [r3, #8]
 80107a4:	68fa      	ldr	r2, [r7, #12]
 80107a6:	6812      	ldr	r2, [r2, #0]
 80107a8:	4611      	mov	r1, r2
 80107aa:	687a      	ldr	r2, [r7, #4]
 80107ac:	01d2      	lsls	r2, r2, #7
 80107ae:	440a      	add	r2, r1
 80107b0:	3284      	adds	r2, #132	; 0x84
 80107b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80107b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	689a      	ldr	r2, [r3, #8]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	68db      	ldr	r3, [r3, #12]
 80107c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107c6:	4413      	add	r3, r2
 80107c8:	1c5a      	adds	r2, r3, #1
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	4619      	mov	r1, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	01db      	lsls	r3, r3, #7
 80107d4:	440b      	add	r3, r1
 80107d6:	3384      	adds	r3, #132	; 0x84
 80107d8:	4619      	mov	r1, r3
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	4313      	orrs	r3, r2
 80107de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	461a      	mov	r2, r3
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	01db      	lsls	r3, r3, #7
 80107ea:	4413      	add	r3, r2
 80107ec:	3384      	adds	r3, #132	; 0x84
 80107ee:	691b      	ldr	r3, [r3, #16]
 80107f0:	68fa      	ldr	r2, [r7, #12]
 80107f2:	6812      	ldr	r2, [r2, #0]
 80107f4:	4611      	mov	r1, r2
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	01d2      	lsls	r2, r2, #7
 80107fa:	440a      	add	r2, r1
 80107fc:	3284      	adds	r2, #132	; 0x84
 80107fe:	f023 0307 	bic.w	r3, r3, #7
 8010802:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	461a      	mov	r2, r3
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	01db      	lsls	r3, r3, #7
 801080e:	4413      	add	r3, r2
 8010810:	3384      	adds	r3, #132	; 0x84
 8010812:	461a      	mov	r2, r3
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	691b      	ldr	r3, [r3, #16]
 8010818:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010820:	021b      	lsls	r3, r3, #8
 8010822:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801082a:	041b      	lsls	r3, r3, #16
 801082c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	699b      	ldr	r3, [r3, #24]
 8010832:	061b      	lsls	r3, r3, #24
 8010834:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	461a      	mov	r2, r3
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	01db      	lsls	r3, r3, #7
 8010840:	4413      	add	r3, r2
 8010842:	3384      	adds	r3, #132	; 0x84
 8010844:	699b      	ldr	r3, [r3, #24]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	461a      	mov	r2, r3
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	01db      	lsls	r3, r3, #7
 8010850:	4413      	add	r3, r2
 8010852:	3384      	adds	r3, #132	; 0x84
 8010854:	461a      	mov	r2, r3
 8010856:	2300      	movs	r3, #0
 8010858:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010860:	461a      	mov	r2, r3
 8010862:	69fb      	ldr	r3, [r7, #28]
 8010864:	431a      	orrs	r2, r3
 8010866:	69bb      	ldr	r3, [r7, #24]
 8010868:	431a      	orrs	r2, r3
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	4619      	mov	r1, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	01db      	lsls	r3, r3, #7
 8010874:	440b      	add	r3, r1
 8010876:	3384      	adds	r3, #132	; 0x84
 8010878:	4619      	mov	r1, r3
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	4313      	orrs	r3, r2
 801087e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	461a      	mov	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	01db      	lsls	r3, r3, #7
 801088a:	4413      	add	r3, r2
 801088c:	3384      	adds	r3, #132	; 0x84
 801088e:	695b      	ldr	r3, [r3, #20]
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	6812      	ldr	r2, [r2, #0]
 8010894:	4611      	mov	r1, r2
 8010896:	687a      	ldr	r2, [r7, #4]
 8010898:	01d2      	lsls	r2, r2, #7
 801089a:	440a      	add	r2, r1
 801089c:	3284      	adds	r2, #132	; 0x84
 801089e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80108a2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	461a      	mov	r2, r3
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	01db      	lsls	r3, r3, #7
 80108ae:	4413      	add	r3, r2
 80108b0:	3384      	adds	r3, #132	; 0x84
 80108b2:	461a      	mov	r2, r3
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	695b      	ldr	r3, [r3, #20]
 80108b8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	461a      	mov	r2, r3
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	01db      	lsls	r3, r3, #7
 80108c4:	4413      	add	r3, r2
 80108c6:	3384      	adds	r3, #132	; 0x84
 80108c8:	69da      	ldr	r2, [r3, #28]
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	4619      	mov	r1, r3
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	01db      	lsls	r3, r3, #7
 80108d4:	440b      	add	r3, r1
 80108d6:	3384      	adds	r3, #132	; 0x84
 80108d8:	4619      	mov	r1, r3
 80108da:	4b58      	ldr	r3, [pc, #352]	; (8010a3c <LTDC_SetConfig+0x32c>)
 80108dc:	4013      	ands	r3, r2
 80108de:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	69da      	ldr	r2, [r3, #28]
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	6a1b      	ldr	r3, [r3, #32]
 80108e8:	68f9      	ldr	r1, [r7, #12]
 80108ea:	6809      	ldr	r1, [r1, #0]
 80108ec:	4608      	mov	r0, r1
 80108ee:	6879      	ldr	r1, [r7, #4]
 80108f0:	01c9      	lsls	r1, r1, #7
 80108f2:	4401      	add	r1, r0
 80108f4:	3184      	adds	r1, #132	; 0x84
 80108f6:	4313      	orrs	r3, r2
 80108f8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	461a      	mov	r2, r3
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	01db      	lsls	r3, r3, #7
 8010904:	4413      	add	r3, r2
 8010906:	3384      	adds	r3, #132	; 0x84
 8010908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	461a      	mov	r2, r3
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	01db      	lsls	r3, r3, #7
 8010914:	4413      	add	r3, r2
 8010916:	3384      	adds	r3, #132	; 0x84
 8010918:	461a      	mov	r2, r3
 801091a:	2300      	movs	r3, #0
 801091c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	461a      	mov	r2, r3
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	01db      	lsls	r3, r3, #7
 8010928:	4413      	add	r3, r2
 801092a:	3384      	adds	r3, #132	; 0x84
 801092c:	461a      	mov	r2, r3
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010932:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	691b      	ldr	r3, [r3, #16]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d102      	bne.n	8010942 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 801093c:	2304      	movs	r3, #4
 801093e:	61fb      	str	r3, [r7, #28]
 8010940:	e01b      	b.n	801097a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	691b      	ldr	r3, [r3, #16]
 8010946:	2b01      	cmp	r3, #1
 8010948:	d102      	bne.n	8010950 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 801094a:	2303      	movs	r3, #3
 801094c:	61fb      	str	r3, [r7, #28]
 801094e:	e014      	b.n	801097a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	691b      	ldr	r3, [r3, #16]
 8010954:	2b04      	cmp	r3, #4
 8010956:	d00b      	beq.n	8010970 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 801095c:	2b02      	cmp	r3, #2
 801095e:	d007      	beq.n	8010970 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8010964:	2b03      	cmp	r3, #3
 8010966:	d003      	beq.n	8010970 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 801096c:	2b07      	cmp	r3, #7
 801096e:	d102      	bne.n	8010976 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8010970:	2302      	movs	r3, #2
 8010972:	61fb      	str	r3, [r7, #28]
 8010974:	e001      	b.n	801097a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8010976:	2301      	movs	r3, #1
 8010978:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	461a      	mov	r2, r3
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	01db      	lsls	r3, r3, #7
 8010984:	4413      	add	r3, r2
 8010986:	3384      	adds	r3, #132	; 0x84
 8010988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801098a:	68fa      	ldr	r2, [r7, #12]
 801098c:	6812      	ldr	r2, [r2, #0]
 801098e:	4611      	mov	r1, r2
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	01d2      	lsls	r2, r2, #7
 8010994:	440a      	add	r2, r1
 8010996:	3284      	adds	r2, #132	; 0x84
 8010998:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 801099c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109a2:	69fa      	ldr	r2, [r7, #28]
 80109a4:	fb02 f303 	mul.w	r3, r2, r3
 80109a8:	041a      	lsls	r2, r3, #16
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	6859      	ldr	r1, [r3, #4]
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	1acb      	subs	r3, r1, r3
 80109b4:	69f9      	ldr	r1, [r7, #28]
 80109b6:	fb01 f303 	mul.w	r3, r1, r3
 80109ba:	3307      	adds	r3, #7
 80109bc:	68f9      	ldr	r1, [r7, #12]
 80109be:	6809      	ldr	r1, [r1, #0]
 80109c0:	4608      	mov	r0, r1
 80109c2:	6879      	ldr	r1, [r7, #4]
 80109c4:	01c9      	lsls	r1, r1, #7
 80109c6:	4401      	add	r1, r0
 80109c8:	3184      	adds	r1, #132	; 0x84
 80109ca:	4313      	orrs	r3, r2
 80109cc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	461a      	mov	r2, r3
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	01db      	lsls	r3, r3, #7
 80109d8:	4413      	add	r3, r2
 80109da:	3384      	adds	r3, #132	; 0x84
 80109dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4619      	mov	r1, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	01db      	lsls	r3, r3, #7
 80109e8:	440b      	add	r3, r1
 80109ea:	3384      	adds	r3, #132	; 0x84
 80109ec:	4619      	mov	r1, r3
 80109ee:	4b14      	ldr	r3, [pc, #80]	; (8010a40 <LTDC_SetConfig+0x330>)
 80109f0:	4013      	ands	r3, r2
 80109f2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	461a      	mov	r2, r3
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	01db      	lsls	r3, r3, #7
 80109fe:	4413      	add	r3, r2
 8010a00:	3384      	adds	r3, #132	; 0x84
 8010a02:	461a      	mov	r2, r3
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a08:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	461a      	mov	r2, r3
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	01db      	lsls	r3, r3, #7
 8010a14:	4413      	add	r3, r2
 8010a16:	3384      	adds	r3, #132	; 0x84
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	68fa      	ldr	r2, [r7, #12]
 8010a1c:	6812      	ldr	r2, [r2, #0]
 8010a1e:	4611      	mov	r1, r2
 8010a20:	687a      	ldr	r2, [r7, #4]
 8010a22:	01d2      	lsls	r2, r2, #7
 8010a24:	440a      	add	r2, r1
 8010a26:	3284      	adds	r2, #132	; 0x84
 8010a28:	f043 0301 	orr.w	r3, r3, #1
 8010a2c:	6013      	str	r3, [r2, #0]
}
 8010a2e:	bf00      	nop
 8010a30:	3724      	adds	r7, #36	; 0x24
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	fffff8f8 	.word	0xfffff8f8
 8010a40:	fffff800 	.word	0xfffff800

08010a44 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010a4c:	f7fd fede 	bl	800e80c <HAL_GetTick>
 8010a50:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d101      	bne.n	8010a5c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8010a58:	2301      	movs	r3, #1
 8010a5a:	e03b      	b.n	8010ad4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2202      	movs	r2, #2
 8010a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	68da      	ldr	r2, [r3, #12]
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	f022 0201 	bic.w	r2, r2, #1
 8010a7a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8010a7c:	e00f      	b.n	8010a9e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8010a7e:	f7fd fec5 	bl	800e80c <HAL_GetTick>
 8010a82:	4602      	mov	r2, r0
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	1ad3      	subs	r3, r2, r3
 8010a88:	2b05      	cmp	r3, #5
 8010a8a:	d908      	bls.n	8010a9e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2240      	movs	r2, #64	; 0x40
 8010a90:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2203      	movs	r2, #3
 8010a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	e01a      	b.n	8010ad4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	f003 0301 	and.w	r3, r3, #1
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d1e8      	bne.n	8010a7e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f000 f894 	bl	8010bda <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2200      	movs	r2, #0
 8010abc:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2201      	movs	r2, #1
 8010ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010ad2:	2300      	movs	r3, #0
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3710      	adds	r7, #16
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}

08010adc <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d101      	bne.n	8010aee <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8010aea:	2301      	movs	r3, #1
 8010aec:	e048      	b.n	8010b80 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	68da      	ldr	r2, [r3, #12]
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f022 0201 	bic.w	r2, r2, #1
 8010afc:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2200      	movs	r2, #0
 8010b04:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	2200      	movs	r2, #0
 8010b14:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	2200      	movs	r2, #0
 8010b24:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2200      	movs	r2, #0
 8010b34:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	2200      	movs	r2, #0
 8010b44:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	221f      	movs	r2, #31
 8010b54:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2200      	movs	r2, #0
 8010b66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2200      	movs	r2, #0
 8010b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010b7e:	2300      	movs	r3, #0
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	370c      	adds	r7, #12
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr

08010b8c <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b083      	sub	sp, #12
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d101      	bne.n	8010b9e <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	e017      	b.n	8010bce <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ba4:	b2db      	uxtb	r3, r3
 8010ba6:	2b02      	cmp	r3, #2
 8010ba8:	d004      	beq.n	8010bb4 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2280      	movs	r2, #128	; 0x80
 8010bae:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	e00c      	b.n	8010bce <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2204      	movs	r2, #4
 8010bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	68da      	ldr	r2, [r3, #12]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f022 0201 	bic.w	r2, r2, #1
 8010bca:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8010bcc:	2300      	movs	r3, #0
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	370c      	adds	r7, #12
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr

08010bda <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8010bda:	b480      	push	{r7}
 8010bdc:	b085      	sub	sp, #20
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	68d9      	ldr	r1, [r3, #12]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	691a      	ldr	r2, [r3, #16]
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	430a      	orrs	r2, r1
 8010bf0:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	695a      	ldr	r2, [r3, #20]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	699b      	ldr	r3, [r3, #24]
 8010bfa:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8010c00:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6a1b      	ldr	r3, [r3, #32]
 8010c06:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8010c0c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c12:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8010c18:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c1e:	3b01      	subs	r3, #1
 8010c20:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8010c22:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8010c2e:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8010c30:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c3a:	d107      	bne.n	8010c4c <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	691a      	ldr	r2, [r3, #16]
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8010c4a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	2200      	movs	r2, #0
 8010c52:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	da11      	bge.n	8010c80 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	695a      	ldr	r2, [r3, #20]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8010c6a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c70:	425b      	negs	r3, r3
 8010c72:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	68fa      	ldr	r2, [r7, #12]
 8010c7a:	b292      	uxth	r2, r2
 8010c7c:	621a      	str	r2, [r3, #32]
 8010c7e:	e006      	b.n	8010c8e <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c84:	461a      	mov	r2, r3
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	b292      	uxth	r2, r2
 8010c8c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	da15      	bge.n	8010cc2 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	695a      	ldr	r2, [r3, #20]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8010ca4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010caa:	425b      	negs	r3, r3
 8010cac:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	6a19      	ldr	r1, [r3, #32]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	041a      	lsls	r2, r3, #16
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	430a      	orrs	r2, r1
 8010cbe:	621a      	str	r2, [r3, #32]
 8010cc0:	e009      	b.n	8010cd6 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	6a19      	ldr	r1, [r3, #32]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ccc:	041a      	lsls	r2, r3, #16
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	430a      	orrs	r2, r1
 8010cd4:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010cde:	d006      	beq.n	8010cee <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	685a      	ldr	r2, [r3, #4]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	b2d2      	uxtb	r2, r2
 8010cea:	629a      	str	r2, [r3, #40]	; 0x28
 8010cec:	e003      	b.n	8010cf6 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010cfe:	bf00      	nop
 8010d00:	3714      	adds	r7, #20
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr
	...

08010d0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8010d14:	4b29      	ldr	r3, [pc, #164]	; (8010dbc <HAL_PWREx_ConfigSupply+0xb0>)
 8010d16:	68db      	ldr	r3, [r3, #12]
 8010d18:	f003 0307 	and.w	r3, r3, #7
 8010d1c:	2b06      	cmp	r3, #6
 8010d1e:	d00a      	beq.n	8010d36 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8010d20:	4b26      	ldr	r3, [pc, #152]	; (8010dbc <HAL_PWREx_ConfigSupply+0xb0>)
 8010d22:	68db      	ldr	r3, [r3, #12]
 8010d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d001      	beq.n	8010d32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8010d2e:	2301      	movs	r3, #1
 8010d30:	e040      	b.n	8010db4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8010d32:	2300      	movs	r3, #0
 8010d34:	e03e      	b.n	8010db4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8010d36:	4b21      	ldr	r3, [pc, #132]	; (8010dbc <HAL_PWREx_ConfigSupply+0xb0>)
 8010d38:	68db      	ldr	r3, [r3, #12]
 8010d3a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8010d3e:	491f      	ldr	r1, [pc, #124]	; (8010dbc <HAL_PWREx_ConfigSupply+0xb0>)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	4313      	orrs	r3, r2
 8010d44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8010d46:	f7fd fd61 	bl	800e80c <HAL_GetTick>
 8010d4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010d4c:	e009      	b.n	8010d62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8010d4e:	f7fd fd5d 	bl	800e80c <HAL_GetTick>
 8010d52:	4602      	mov	r2, r0
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	1ad3      	subs	r3, r2, r3
 8010d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010d5c:	d901      	bls.n	8010d62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	e028      	b.n	8010db4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010d62:	4b16      	ldr	r3, [pc, #88]	; (8010dbc <HAL_PWREx_ConfigSupply+0xb0>)
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d6e:	d1ee      	bne.n	8010d4e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2b1e      	cmp	r3, #30
 8010d74:	d008      	beq.n	8010d88 <HAL_PWREx_ConfigSupply+0x7c>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2b2e      	cmp	r3, #46	; 0x2e
 8010d7a:	d005      	beq.n	8010d88 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2b1d      	cmp	r3, #29
 8010d80:	d002      	beq.n	8010d88 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2b2d      	cmp	r3, #45	; 0x2d
 8010d86:	d114      	bne.n	8010db2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8010d88:	f7fd fd40 	bl	800e80c <HAL_GetTick>
 8010d8c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8010d8e:	e009      	b.n	8010da4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8010d90:	f7fd fd3c 	bl	800e80c <HAL_GetTick>
 8010d94:	4602      	mov	r2, r0
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010d9e:	d901      	bls.n	8010da4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8010da0:	2301      	movs	r3, #1
 8010da2:	e007      	b.n	8010db4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8010da4:	4b05      	ldr	r3, [pc, #20]	; (8010dbc <HAL_PWREx_ConfigSupply+0xb0>)
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010db0:	d1ee      	bne.n	8010d90 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8010db2:	2300      	movs	r3, #0
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3710      	adds	r7, #16
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	58024800 	.word	0x58024800

08010dc0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b086      	sub	sp, #24
 8010dc4:	af02      	add	r7, sp, #8
 8010dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010dc8:	f7fd fd20 	bl	800e80c <HAL_GetTick>
 8010dcc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d101      	bne.n	8010dd8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	e05f      	b.n	8010e98 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d107      	bne.n	8010df4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f7f1 fb7d 	bl	80024e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8010dea:	f241 3188 	movw	r1, #5000	; 0x1388
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f000 fcca 	bl	8011788 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	689b      	ldr	r3, [r3, #8]
 8010e02:	3b01      	subs	r3, #1
 8010e04:	021a      	lsls	r2, r3, #8
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	430a      	orrs	r2, r1
 8010e0c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e12:	9300      	str	r3, [sp, #0]
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	2200      	movs	r2, #0
 8010e18:	2120      	movs	r1, #32
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 fcf5 	bl	801180a <QSPI_WaitFlagStateUntilTimeout>
 8010e20:	4603      	mov	r3, r0
 8010e22:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8010e24:	7afb      	ldrb	r3, [r7, #11]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d135      	bne.n	8010e96 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	681a      	ldr	r2, [r3, #0]
 8010e30:	4b1b      	ldr	r3, [pc, #108]	; (8010ea0 <HAL_QSPI_Init+0xe0>)
 8010e32:	4013      	ands	r3, r2
 8010e34:	687a      	ldr	r2, [r7, #4]
 8010e36:	6852      	ldr	r2, [r2, #4]
 8010e38:	0611      	lsls	r1, r2, #24
 8010e3a:	687a      	ldr	r2, [r7, #4]
 8010e3c:	68d2      	ldr	r2, [r2, #12]
 8010e3e:	4311      	orrs	r1, r2
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	69d2      	ldr	r2, [r2, #28]
 8010e44:	4311      	orrs	r1, r2
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	6a12      	ldr	r2, [r2, #32]
 8010e4a:	4311      	orrs	r1, r2
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	6812      	ldr	r2, [r2, #0]
 8010e50:	430b      	orrs	r3, r1
 8010e52:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	685a      	ldr	r2, [r3, #4]
 8010e5a:	4b12      	ldr	r3, [pc, #72]	; (8010ea4 <HAL_QSPI_Init+0xe4>)
 8010e5c:	4013      	ands	r3, r2
 8010e5e:	687a      	ldr	r2, [r7, #4]
 8010e60:	6912      	ldr	r2, [r2, #16]
 8010e62:	0411      	lsls	r1, r2, #16
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	6952      	ldr	r2, [r2, #20]
 8010e68:	4311      	orrs	r1, r2
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	6992      	ldr	r2, [r2, #24]
 8010e6e:	4311      	orrs	r1, r2
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	6812      	ldr	r2, [r2, #0]
 8010e74:	430b      	orrs	r3, r1
 8010e76:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f042 0201 	orr.w	r2, r2, #1
 8010e86:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2201      	movs	r2, #1
 8010e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8010e96:	7afb      	ldrb	r3, [r7, #11]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3710      	adds	r7, #16
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}
 8010ea0:	00ffff2f 	.word	0x00ffff2f
 8010ea4:	ffe0f8fe 	.word	0xffe0f8fe

08010ea8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b086      	sub	sp, #24
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	689b      	ldr	r3, [r3, #8]
 8010eb6:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	f003 0304 	and.w	r3, r3, #4
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d064      	beq.n	8010f94 <HAL_QSPI_IRQHandler+0xec>
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d05f      	beq.n	8010f94 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	3320      	adds	r3, #32
 8010eda:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010ee2:	b2db      	uxtb	r3, r3
 8010ee4:	2b12      	cmp	r3, #18
 8010ee6:	d125      	bne.n	8010f34 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8010ee8:	e01c      	b.n	8010f24 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d00f      	beq.n	8010f12 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ef6:	781a      	ldrb	r2, [r3, #0]
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f00:	1c5a      	adds	r2, r3, #1
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f0a:	1e5a      	subs	r2, r3, #1
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8010f10:	e008      	b.n	8010f24 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010f20:	601a      	str	r2, [r3, #0]
          break;
 8010f22:	e033      	b.n	8010f8c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	689b      	ldr	r3, [r3, #8]
 8010f2a:	f003 0304 	and.w	r3, r3, #4
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d1db      	bne.n	8010eea <HAL_QSPI_IRQHandler+0x42>
 8010f32:	e02b      	b.n	8010f8c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010f3a:	b2db      	uxtb	r3, r3
 8010f3c:	2b22      	cmp	r3, #34	; 0x22
 8010f3e:	d125      	bne.n	8010f8c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8010f40:	e01d      	b.n	8010f7e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d010      	beq.n	8010f6c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f4e:	68fa      	ldr	r2, [r7, #12]
 8010f50:	7812      	ldrb	r2, [r2, #0]
 8010f52:	b2d2      	uxtb	r2, r2
 8010f54:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f5a:	1c5a      	adds	r2, r3, #1
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f64:	1e5a      	subs	r2, r3, #1
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	639a      	str	r2, [r3, #56]	; 0x38
 8010f6a:	e008      	b.n	8010f7e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	681a      	ldr	r2, [r3, #0]
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010f7a:	601a      	str	r2, [r3, #0]
          break;
 8010f7c:	e006      	b.n	8010f8c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	689b      	ldr	r3, [r3, #8]
 8010f84:	f003 0304 	and.w	r3, r3, #4
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d1da      	bne.n	8010f42 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 fbdd 	bl	801174c <HAL_QSPI_FifoThresholdCallback>
 8010f92:	e13c      	b.n	801120e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	f003 0302 	and.w	r3, r3, #2
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f000 80b0 	beq.w	8011100 <HAL_QSPI_IRQHandler+0x258>
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	f000 80aa 	beq.w	8011100 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2202      	movs	r2, #2
 8010fb2:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8010fc2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	2b12      	cmp	r3, #18
 8010fce:	d120      	bne.n	8011012 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f003 0304 	and.w	r3, r3, #4
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d011      	beq.n	8011002 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	681a      	ldr	r2, [r3, #0]
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f022 0204 	bic.w	r2, r2, #4
 8010fec:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	68da      	ldr	r2, [r3, #12]
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	f022 0201 	bic.w	r2, r2, #1
 8011000:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2201      	movs	r2, #1
 8011006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f000 fb94 	bl	8011738 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8011010:	e0fa      	b.n	8011208 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011018:	b2db      	uxtb	r3, r3
 801101a:	2b22      	cmp	r3, #34	; 0x22
 801101c:	d143      	bne.n	80110a6 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	f003 0304 	and.w	r3, r3, #4
 8011028:	2b00      	cmp	r3, #0
 801102a:	d012      	beq.n	8011052 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	f022 0204 	bic.w	r2, r2, #4
 801103a:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	68da      	ldr	r2, [r3, #12]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	f022 0201 	bic.w	r2, r2, #1
 801104e:	60da      	str	r2, [r3, #12]
 8011050:	e021      	b.n	8011096 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	3320      	adds	r3, #32
 8011058:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 801105a:	e013      	b.n	8011084 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011060:	2b00      	cmp	r3, #0
 8011062:	d017      	beq.n	8011094 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011068:	68fa      	ldr	r2, [r7, #12]
 801106a:	7812      	ldrb	r2, [r2, #0]
 801106c:	b2d2      	uxtb	r2, r2
 801106e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011074:	1c5a      	adds	r2, r3, #1
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801107e:	1e5a      	subs	r2, r3, #1
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	689b      	ldr	r3, [r3, #8]
 801108a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801108e:	2b00      	cmp	r3, #0
 8011090:	d1e4      	bne.n	801105c <HAL_QSPI_IRQHandler+0x1b4>
 8011092:	e000      	b.n	8011096 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8011094:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2201      	movs	r2, #1
 801109a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f000 fb40 	bl	8011724 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80110a4:	e0b0      	b.n	8011208 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80110ac:	b2db      	uxtb	r3, r3
 80110ae:	2b02      	cmp	r3, #2
 80110b0:	d107      	bne.n	80110c2 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2201      	movs	r2, #1
 80110b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f000 fb28 	bl	8011710 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80110c0:	e0a2      	b.n	8011208 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80110c8:	b2db      	uxtb	r3, r3
 80110ca:	2b08      	cmp	r3, #8
 80110cc:	f040 809c 	bne.w	8011208 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	695a      	ldr	r2, [r3, #20]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80110de:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2201      	movs	r2, #1
 80110e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d103      	bne.n	80110f8 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f000 fb03 	bl	80116fc <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80110f6:	e087      	b.n	8011208 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 faf5 	bl	80116e8 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80110fe:	e083      	b.n	8011208 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	f003 0308 	and.w	r3, r3, #8
 8011106:	2b00      	cmp	r3, #0
 8011108:	d01f      	beq.n	801114a <HAL_QSPI_IRQHandler+0x2a2>
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011110:	2b00      	cmp	r3, #0
 8011112:	d01a      	beq.n	801114a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	2208      	movs	r2, #8
 801111a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011126:	2b00      	cmp	r3, #0
 8011128:	d00b      	beq.n	8011142 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	681a      	ldr	r2, [r3, #0]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8011138:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	2201      	movs	r2, #1
 801113e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f000 fb0c 	bl	8011760 <HAL_QSPI_StatusMatchCallback>
 8011148:	e061      	b.n	801120e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	f003 0301 	and.w	r3, r3, #1
 8011150:	2b00      	cmp	r3, #0
 8011152:	d047      	beq.n	80111e4 <HAL_QSPI_IRQHandler+0x33c>
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801115a:	2b00      	cmp	r3, #0
 801115c:	d042      	beq.n	80111e4 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2201      	movs	r2, #1
 8011164:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	681a      	ldr	r2, [r3, #0]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8011174:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801117a:	f043 0202 	orr.w	r2, r3, #2
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	f003 0304 	and.w	r3, r3, #4
 801118c:	2b00      	cmp	r3, #0
 801118e:	d021      	beq.n	80111d4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	681a      	ldr	r2, [r3, #0]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f022 0204 	bic.w	r2, r2, #4
 801119e:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111a4:	4a1c      	ldr	r2, [pc, #112]	; (8011218 <HAL_QSPI_IRQHandler+0x370>)
 80111a6:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7ff fced 	bl	8010b8c <HAL_MDMA_Abort_IT>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d029      	beq.n	801120c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111bc:	f043 0204 	orr.w	r2, r3, #4
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2201      	movs	r2, #1
 80111c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f000 fa8b 	bl	80116e8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80111d2:	e01b      	b.n	801120c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2201      	movs	r2, #1
 80111d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f000 fa83 	bl	80116e8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80111e2:	e013      	b.n	801120c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	f003 0310 	and.w	r3, r3, #16
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d00f      	beq.n	801120e <HAL_QSPI_IRQHandler+0x366>
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d00a      	beq.n	801120e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	2210      	movs	r2, #16
 80111fe:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f000 fab7 	bl	8011774 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8011206:	e002      	b.n	801120e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8011208:	bf00      	nop
 801120a:	e000      	b.n	801120e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801120c:	bf00      	nop
}
 801120e:	bf00      	nop
 8011210:	3718      	adds	r7, #24
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	080117a5 	.word	0x080117a5

0801121c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b088      	sub	sp, #32
 8011220:	af02      	add	r7, sp, #8
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011228:	f7fd faf0 	bl	800e80c <HAL_GetTick>
 801122c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011234:	b2db      	uxtb	r3, r3
 8011236:	2b01      	cmp	r3, #1
 8011238:	d101      	bne.n	801123e <HAL_QSPI_Command+0x22>
 801123a:	2302      	movs	r3, #2
 801123c:	e048      	b.n	80112d0 <HAL_QSPI_Command+0xb4>
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2201      	movs	r2, #1
 8011242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801124c:	b2db      	uxtb	r3, r3
 801124e:	2b01      	cmp	r3, #1
 8011250:	d137      	bne.n	80112c2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2200      	movs	r2, #0
 8011256:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2202      	movs	r2, #2
 801125c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	9300      	str	r3, [sp, #0]
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	2200      	movs	r2, #0
 8011268:	2120      	movs	r1, #32
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	f000 facd 	bl	801180a <QSPI_WaitFlagStateUntilTimeout>
 8011270:	4603      	mov	r3, r0
 8011272:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8011274:	7dfb      	ldrb	r3, [r7, #23]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d125      	bne.n	80112c6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801127a:	2200      	movs	r2, #0
 801127c:	68b9      	ldr	r1, [r7, #8]
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f000 fafa 	bl	8011878 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011288:	2b00      	cmp	r3, #0
 801128a:	d115      	bne.n	80112b8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	9300      	str	r3, [sp, #0]
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	2201      	movs	r2, #1
 8011294:	2102      	movs	r1, #2
 8011296:	68f8      	ldr	r0, [r7, #12]
 8011298:	f000 fab7 	bl	801180a <QSPI_WaitFlagStateUntilTimeout>
 801129c:	4603      	mov	r3, r0
 801129e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80112a0:	7dfb      	ldrb	r3, [r7, #23]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d10f      	bne.n	80112c6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	2202      	movs	r2, #2
 80112ac:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2201      	movs	r2, #1
 80112b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80112b6:	e006      	b.n	80112c6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	2201      	movs	r2, #1
 80112bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80112c0:	e001      	b.n	80112c6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80112c2:	2302      	movs	r3, #2
 80112c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	2200      	movs	r2, #0
 80112ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80112ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3718      	adds	r7, #24
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b08a      	sub	sp, #40	; 0x28
 80112dc:	af02      	add	r7, sp, #8
 80112de:	60f8      	str	r0, [r7, #12]
 80112e0:	60b9      	str	r1, [r7, #8]
 80112e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80112e8:	f7fd fa90 	bl	800e80c <HAL_GetTick>
 80112ec:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	3320      	adds	r3, #32
 80112f4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d101      	bne.n	8011306 <HAL_QSPI_Transmit+0x2e>
 8011302:	2302      	movs	r3, #2
 8011304:	e076      	b.n	80113f4 <HAL_QSPI_Transmit+0x11c>
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2201      	movs	r2, #1
 801130a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011314:	b2db      	uxtb	r3, r3
 8011316:	2b01      	cmp	r3, #1
 8011318:	d165      	bne.n	80113e6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2200      	movs	r2, #0
 801131e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d056      	beq.n	80113d4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	2212      	movs	r2, #18
 801132a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	691b      	ldr	r3, [r3, #16]
 8011334:	1c5a      	adds	r2, r3, #1
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	691b      	ldr	r3, [r3, #16]
 8011340:	1c5a      	adds	r2, r3, #1
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	68ba      	ldr	r2, [r7, #8]
 801134a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	695a      	ldr	r2, [r3, #20]
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 801135a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 801135c:	e01b      	b.n	8011396 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	9300      	str	r3, [sp, #0]
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	2201      	movs	r2, #1
 8011366:	2104      	movs	r1, #4
 8011368:	68f8      	ldr	r0, [r7, #12]
 801136a:	f000 fa4e 	bl	801180a <QSPI_WaitFlagStateUntilTimeout>
 801136e:	4603      	mov	r3, r0
 8011370:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8011372:	7ffb      	ldrb	r3, [r7, #31]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d113      	bne.n	80113a0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801137c:	781a      	ldrb	r2, [r3, #0]
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011386:	1c5a      	adds	r2, r3, #1
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011390:	1e5a      	subs	r2, r3, #1
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801139a:	2b00      	cmp	r3, #0
 801139c:	d1df      	bne.n	801135e <HAL_QSPI_Transmit+0x86>
 801139e:	e000      	b.n	80113a2 <HAL_QSPI_Transmit+0xca>
          break;
 80113a0:	bf00      	nop
      }

      if (status == HAL_OK)
 80113a2:	7ffb      	ldrb	r3, [r7, #31]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d110      	bne.n	80113ca <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	9300      	str	r3, [sp, #0]
 80113ac:	69bb      	ldr	r3, [r7, #24]
 80113ae:	2201      	movs	r2, #1
 80113b0:	2102      	movs	r1, #2
 80113b2:	68f8      	ldr	r0, [r7, #12]
 80113b4:	f000 fa29 	bl	801180a <QSPI_WaitFlagStateUntilTimeout>
 80113b8:	4603      	mov	r3, r0
 80113ba:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80113bc:	7ffb      	ldrb	r3, [r7, #31]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d103      	bne.n	80113ca <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	2202      	movs	r2, #2
 80113c8:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2201      	movs	r2, #1
 80113ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80113d2:	e00a      	b.n	80113ea <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113d8:	f043 0208 	orr.w	r2, r3, #8
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80113e0:	2301      	movs	r3, #1
 80113e2:	77fb      	strb	r3, [r7, #31]
 80113e4:	e001      	b.n	80113ea <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80113e6:	2302      	movs	r3, #2
 80113e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	2200      	movs	r2, #0
 80113ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80113f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3720      	adds	r7, #32
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b08a      	sub	sp, #40	; 0x28
 8011400:	af02      	add	r7, sp, #8
 8011402:	60f8      	str	r0, [r7, #12]
 8011404:	60b9      	str	r1, [r7, #8]
 8011406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011408:	2300      	movs	r3, #0
 801140a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 801140c:	f7fd f9fe 	bl	800e80c <HAL_GetTick>
 8011410:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	699b      	ldr	r3, [r3, #24]
 8011418:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	3320      	adds	r3, #32
 8011420:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011428:	b2db      	uxtb	r3, r3
 801142a:	2b01      	cmp	r3, #1
 801142c:	d101      	bne.n	8011432 <HAL_QSPI_Receive+0x36>
 801142e:	2302      	movs	r3, #2
 8011430:	e07d      	b.n	801152e <HAL_QSPI_Receive+0x132>
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	2201      	movs	r2, #1
 8011436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011440:	b2db      	uxtb	r3, r3
 8011442:	2b01      	cmp	r3, #1
 8011444:	d16c      	bne.n	8011520 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	2200      	movs	r2, #0
 801144a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d05d      	beq.n	801150e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2222      	movs	r2, #34	; 0x22
 8011456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	691b      	ldr	r3, [r3, #16]
 8011460:	1c5a      	adds	r2, r3, #1
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	691b      	ldr	r3, [r3, #16]
 801146c:	1c5a      	adds	r2, r3, #1
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	68ba      	ldr	r2, [r7, #8]
 8011476:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	695b      	ldr	r3, [r3, #20]
 801147e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801148a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	697a      	ldr	r2, [r7, #20]
 8011492:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8011494:	e01c      	b.n	80114d0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	9300      	str	r3, [sp, #0]
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	2201      	movs	r2, #1
 801149e:	2106      	movs	r1, #6
 80114a0:	68f8      	ldr	r0, [r7, #12]
 80114a2:	f000 f9b2 	bl	801180a <QSPI_WaitFlagStateUntilTimeout>
 80114a6:	4603      	mov	r3, r0
 80114a8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80114aa:	7ffb      	ldrb	r3, [r7, #31]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d114      	bne.n	80114da <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114b4:	693a      	ldr	r2, [r7, #16]
 80114b6:	7812      	ldrb	r2, [r2, #0]
 80114b8:	b2d2      	uxtb	r2, r2
 80114ba:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114c0:	1c5a      	adds	r2, r3, #1
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ca:	1e5a      	subs	r2, r3, #1
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d1de      	bne.n	8011496 <HAL_QSPI_Receive+0x9a>
 80114d8:	e000      	b.n	80114dc <HAL_QSPI_Receive+0xe0>
          break;
 80114da:	bf00      	nop
      }

      if (status == HAL_OK)
 80114dc:	7ffb      	ldrb	r3, [r7, #31]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d110      	bne.n	8011504 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	9300      	str	r3, [sp, #0]
 80114e6:	69bb      	ldr	r3, [r7, #24]
 80114e8:	2201      	movs	r2, #1
 80114ea:	2102      	movs	r1, #2
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f000 f98c 	bl	801180a <QSPI_WaitFlagStateUntilTimeout>
 80114f2:	4603      	mov	r3, r0
 80114f4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80114f6:	7ffb      	ldrb	r3, [r7, #31]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d103      	bne.n	8011504 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	2202      	movs	r2, #2
 8011502:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2201      	movs	r2, #1
 8011508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801150c:	e00a      	b.n	8011524 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011512:	f043 0208 	orr.w	r2, r3, #8
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 801151a:	2301      	movs	r3, #1
 801151c:	77fb      	strb	r3, [r7, #31]
 801151e:	e001      	b.n	8011524 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8011520:	2302      	movs	r3, #2
 8011522:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	2200      	movs	r2, #0
 8011528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 801152c:	7ffb      	ldrb	r3, [r7, #31]
}
 801152e:	4618      	mov	r0, r3
 8011530:	3720      	adds	r7, #32
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}

08011536 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8011536:	b580      	push	{r7, lr}
 8011538:	b088      	sub	sp, #32
 801153a:	af02      	add	r7, sp, #8
 801153c:	60f8      	str	r0, [r7, #12]
 801153e:	60b9      	str	r1, [r7, #8]
 8011540:	607a      	str	r2, [r7, #4]
 8011542:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011544:	f7fd f962 	bl	800e80c <HAL_GetTick>
 8011548:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011550:	b2db      	uxtb	r3, r3
 8011552:	2b01      	cmp	r3, #1
 8011554:	d101      	bne.n	801155a <HAL_QSPI_AutoPolling+0x24>
 8011556:	2302      	movs	r3, #2
 8011558:	e060      	b.n	801161c <HAL_QSPI_AutoPolling+0xe6>
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	2201      	movs	r2, #1
 801155e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011568:	b2db      	uxtb	r3, r3
 801156a:	2b01      	cmp	r3, #1
 801156c:	d14f      	bne.n	801160e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	2200      	movs	r2, #0
 8011572:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	2242      	movs	r2, #66	; 0x42
 8011578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	9300      	str	r3, [sp, #0]
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	2200      	movs	r2, #0
 8011584:	2120      	movs	r1, #32
 8011586:	68f8      	ldr	r0, [r7, #12]
 8011588:	f000 f93f 	bl	801180a <QSPI_WaitFlagStateUntilTimeout>
 801158c:	4603      	mov	r3, r0
 801158e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8011590:	7dfb      	ldrb	r3, [r7, #23]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d13d      	bne.n	8011612 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	6812      	ldr	r2, [r2, #0]
 801159e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	687a      	ldr	r2, [r7, #4]
 80115a6:	6852      	ldr	r2, [r2, #4]
 80115a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	6892      	ldr	r2, [r2, #8]
 80115b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	691b      	ldr	r3, [r3, #16]
 80115c2:	431a      	orrs	r2, r3
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80115cc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	68da      	ldr	r2, [r3, #12]
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80115d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80115da:	68b9      	ldr	r1, [r7, #8]
 80115dc:	68f8      	ldr	r0, [r7, #12]
 80115de:	f000 f94b 	bl	8011878 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	9300      	str	r3, [sp, #0]
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	2201      	movs	r2, #1
 80115ea:	2108      	movs	r1, #8
 80115ec:	68f8      	ldr	r0, [r7, #12]
 80115ee:	f000 f90c 	bl	801180a <QSPI_WaitFlagStateUntilTimeout>
 80115f2:	4603      	mov	r3, r0
 80115f4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80115f6:	7dfb      	ldrb	r3, [r7, #23]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d10a      	bne.n	8011612 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2208      	movs	r2, #8
 8011602:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	2201      	movs	r2, #1
 8011608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801160c:	e001      	b.n	8011612 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 801160e:	2302      	movs	r3, #2
 8011610:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	2200      	movs	r2, #0
 8011616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 801161a:	7dfb      	ldrb	r3, [r7, #23]
}
 801161c:	4618      	mov	r0, r3
 801161e:	3718      	adds	r7, #24
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b088      	sub	sp, #32
 8011628:	af02      	add	r7, sp, #8
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8011630:	f7fd f8ec 	bl	800e80c <HAL_GetTick>
 8011634:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801163c:	b2db      	uxtb	r3, r3
 801163e:	2b01      	cmp	r3, #1
 8011640:	d101      	bne.n	8011646 <HAL_QSPI_MemoryMapped+0x22>
 8011642:	2302      	movs	r3, #2
 8011644:	e04c      	b.n	80116e0 <HAL_QSPI_MemoryMapped+0xbc>
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2201      	movs	r2, #1
 801164a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011654:	b2db      	uxtb	r3, r3
 8011656:	2b01      	cmp	r3, #1
 8011658:	d13b      	bne.n	80116d2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2200      	movs	r2, #0
 801165e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2282      	movs	r2, #130	; 0x82
 8011664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801166c:	9300      	str	r3, [sp, #0]
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	2200      	movs	r2, #0
 8011672:	2120      	movs	r1, #32
 8011674:	68f8      	ldr	r0, [r7, #12]
 8011676:	f000 f8c8 	bl	801180a <QSPI_WaitFlagStateUntilTimeout>
 801167a:	4603      	mov	r3, r0
 801167c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 801167e:	7dfb      	ldrb	r3, [r7, #23]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d128      	bne.n	80116d6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f023 0108 	bic.w	r1, r3, #8
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	685a      	ldr	r2, [r3, #4]
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	430a      	orrs	r2, r1
 8011698:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	2b08      	cmp	r3, #8
 80116a0:	d110      	bne.n	80116c4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	6812      	ldr	r2, [r2, #0]
 80116aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	2210      	movs	r2, #16
 80116b2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80116c2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80116c4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80116c8:	68b9      	ldr	r1, [r7, #8]
 80116ca:	68f8      	ldr	r0, [r7, #12]
 80116cc:	f000 f8d4 	bl	8011878 <QSPI_Config>
 80116d0:	e001      	b.n	80116d6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80116d2:	2302      	movs	r3, #2
 80116d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2200      	movs	r2, #0
 80116da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80116de:	7dfb      	ldrb	r3, [r7, #23]
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3718      	adds	r7, #24
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}

080116e8 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 80116e8:	b480      	push	{r7}
 80116ea:	b083      	sub	sp, #12
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80116f0:	bf00      	nop
 80116f2:	370c      	adds	r7, #12
 80116f4:	46bd      	mov	sp, r7
 80116f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fa:	4770      	bx	lr

080116fc <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80116fc:	b480      	push	{r7}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8011704:	bf00      	nop
 8011706:	370c      	adds	r7, #12
 8011708:	46bd      	mov	sp, r7
 801170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170e:	4770      	bx	lr

08011710 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8011710:	b480      	push	{r7}
 8011712:	b083      	sub	sp, #12
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8011718:	bf00      	nop
 801171a:	370c      	adds	r7, #12
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr

08011724 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8011724:	b480      	push	{r7}
 8011726:	b083      	sub	sp, #12
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 801172c:	bf00      	nop
 801172e:	370c      	adds	r7, #12
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr

08011738 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8011738:	b480      	push	{r7}
 801173a:	b083      	sub	sp, #12
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8011740:	bf00      	nop
 8011742:	370c      	adds	r7, #12
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr

0801174c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8011754:	bf00      	nop
 8011756:	370c      	adds	r7, #12
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8011760:	b480      	push	{r7}
 8011762:	b083      	sub	sp, #12
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8011768:	bf00      	nop
 801176a:	370c      	adds	r7, #12
 801176c:	46bd      	mov	sp, r7
 801176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011772:	4770      	bx	lr

08011774 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8011774:	b480      	push	{r7}
 8011776:	b083      	sub	sp, #12
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 801177c:	bf00      	nop
 801177e:	370c      	adds	r7, #12
 8011780:	46bd      	mov	sp, r7
 8011782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011786:	4770      	bx	lr

08011788 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8011788:	b480      	push	{r7}
 801178a:	b083      	sub	sp, #12
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	683a      	ldr	r2, [r7, #0]
 8011796:	649a      	str	r2, [r3, #72]	; 0x48
}
 8011798:	bf00      	nop
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr

080117a4 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117b0:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	2200      	movs	r2, #0
 80117b6:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	2200      	movs	r2, #0
 80117bc:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	2b08      	cmp	r3, #8
 80117c8:	d114      	bne.n	80117f4 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2202      	movs	r2, #2
 80117d0:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80117e0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f042 0202 	orr.w	r2, r2, #2
 80117f0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 80117f2:	e006      	b.n	8011802 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2201      	movs	r2, #1
 80117f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80117fc:	68f8      	ldr	r0, [r7, #12]
 80117fe:	f7ff ff73 	bl	80116e8 <HAL_QSPI_ErrorCallback>
}
 8011802:	bf00      	nop
 8011804:	3710      	adds	r7, #16
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}

0801180a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801180a:	b580      	push	{r7, lr}
 801180c:	b084      	sub	sp, #16
 801180e:	af00      	add	r7, sp, #0
 8011810:	60f8      	str	r0, [r7, #12]
 8011812:	60b9      	str	r1, [r7, #8]
 8011814:	603b      	str	r3, [r7, #0]
 8011816:	4613      	mov	r3, r2
 8011818:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801181a:	e01a      	b.n	8011852 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801181c:	69bb      	ldr	r3, [r7, #24]
 801181e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011822:	d016      	beq.n	8011852 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011824:	f7fc fff2 	bl	800e80c <HAL_GetTick>
 8011828:	4602      	mov	r2, r0
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	69ba      	ldr	r2, [r7, #24]
 8011830:	429a      	cmp	r2, r3
 8011832:	d302      	bcc.n	801183a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8011834:	69bb      	ldr	r3, [r7, #24]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d10b      	bne.n	8011852 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2204      	movs	r2, #4
 801183e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011846:	f043 0201 	orr.w	r2, r3, #1
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 801184e:	2301      	movs	r3, #1
 8011850:	e00e      	b.n	8011870 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	689a      	ldr	r2, [r3, #8]
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	4013      	ands	r3, r2
 801185c:	2b00      	cmp	r3, #0
 801185e:	bf14      	ite	ne
 8011860:	2301      	movne	r3, #1
 8011862:	2300      	moveq	r3, #0
 8011864:	b2db      	uxtb	r3, r3
 8011866:	461a      	mov	r2, r3
 8011868:	79fb      	ldrb	r3, [r7, #7]
 801186a:	429a      	cmp	r2, r3
 801186c:	d1d6      	bne.n	801181c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801186e:	2300      	movs	r3, #0
}
 8011870:	4618      	mov	r0, r3
 8011872:	3710      	adds	r7, #16
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}

08011878 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8011878:	b480      	push	{r7}
 801187a:	b085      	sub	sp, #20
 801187c:	af00      	add	r7, sp, #0
 801187e:	60f8      	str	r0, [r7, #12]
 8011880:	60b9      	str	r1, [r7, #8]
 8011882:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011888:	2b00      	cmp	r3, #0
 801188a:	d009      	beq.n	80118a0 <QSPI_Config+0x28>
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8011892:	d005      	beq.n	80118a0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	3a01      	subs	r2, #1
 801189e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	699b      	ldr	r3, [r3, #24]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f000 80b9 	beq.w	8011a1c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	6a1b      	ldr	r3, [r3, #32]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d05f      	beq.n	8011972 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	68ba      	ldr	r2, [r7, #8]
 80118b8:	6892      	ldr	r2, [r2, #8]
 80118ba:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	69db      	ldr	r3, [r3, #28]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d031      	beq.n	8011928 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118cc:	431a      	orrs	r2, r3
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118d2:	431a      	orrs	r2, r3
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d8:	431a      	orrs	r2, r3
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	695b      	ldr	r3, [r3, #20]
 80118de:	049b      	lsls	r3, r3, #18
 80118e0:	431a      	orrs	r2, r3
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	691b      	ldr	r3, [r3, #16]
 80118e6:	431a      	orrs	r2, r3
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	6a1b      	ldr	r3, [r3, #32]
 80118ec:	431a      	orrs	r2, r3
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	68db      	ldr	r3, [r3, #12]
 80118f2:	431a      	orrs	r2, r3
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	69db      	ldr	r3, [r3, #28]
 80118f8:	431a      	orrs	r2, r3
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	699b      	ldr	r3, [r3, #24]
 80118fe:	431a      	orrs	r2, r3
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	ea42 0103 	orr.w	r1, r2, r3
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	430a      	orrs	r2, r1
 8011910:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8011918:	f000 812e 	beq.w	8011b78 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	68ba      	ldr	r2, [r7, #8]
 8011922:	6852      	ldr	r2, [r2, #4]
 8011924:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8011926:	e127      	b.n	8011b78 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011930:	431a      	orrs	r2, r3
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011936:	431a      	orrs	r2, r3
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801193c:	431a      	orrs	r2, r3
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	695b      	ldr	r3, [r3, #20]
 8011942:	049b      	lsls	r3, r3, #18
 8011944:	431a      	orrs	r2, r3
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	691b      	ldr	r3, [r3, #16]
 801194a:	431a      	orrs	r2, r3
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	6a1b      	ldr	r3, [r3, #32]
 8011950:	431a      	orrs	r2, r3
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	69db      	ldr	r3, [r3, #28]
 8011956:	431a      	orrs	r2, r3
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	699b      	ldr	r3, [r3, #24]
 801195c:	431a      	orrs	r2, r3
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	ea42 0103 	orr.w	r1, r2, r3
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	430a      	orrs	r2, r1
 801196e:	615a      	str	r2, [r3, #20]
}
 8011970:	e102      	b.n	8011b78 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	69db      	ldr	r3, [r3, #28]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d02e      	beq.n	80119d8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011982:	431a      	orrs	r2, r3
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011988:	431a      	orrs	r2, r3
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801198e:	431a      	orrs	r2, r3
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	695b      	ldr	r3, [r3, #20]
 8011994:	049b      	lsls	r3, r3, #18
 8011996:	431a      	orrs	r2, r3
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	6a1b      	ldr	r3, [r3, #32]
 801199c:	431a      	orrs	r2, r3
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	68db      	ldr	r3, [r3, #12]
 80119a2:	431a      	orrs	r2, r3
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	69db      	ldr	r3, [r3, #28]
 80119a8:	431a      	orrs	r2, r3
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	699b      	ldr	r3, [r3, #24]
 80119ae:	431a      	orrs	r2, r3
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	ea42 0103 	orr.w	r1, r2, r3
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	687a      	ldr	r2, [r7, #4]
 80119be:	430a      	orrs	r2, r1
 80119c0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80119c8:	f000 80d6 	beq.w	8011b78 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	68ba      	ldr	r2, [r7, #8]
 80119d2:	6852      	ldr	r2, [r2, #4]
 80119d4:	619a      	str	r2, [r3, #24]
}
 80119d6:	e0cf      	b.n	8011b78 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119e0:	431a      	orrs	r2, r3
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119e6:	431a      	orrs	r2, r3
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ec:	431a      	orrs	r2, r3
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	695b      	ldr	r3, [r3, #20]
 80119f2:	049b      	lsls	r3, r3, #18
 80119f4:	431a      	orrs	r2, r3
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	6a1b      	ldr	r3, [r3, #32]
 80119fa:	431a      	orrs	r2, r3
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	69db      	ldr	r3, [r3, #28]
 8011a00:	431a      	orrs	r2, r3
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	699b      	ldr	r3, [r3, #24]
 8011a06:	431a      	orrs	r2, r3
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	ea42 0103 	orr.w	r1, r2, r3
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	687a      	ldr	r2, [r7, #4]
 8011a16:	430a      	orrs	r2, r1
 8011a18:	615a      	str	r2, [r3, #20]
}
 8011a1a:	e0ad      	b.n	8011b78 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	6a1b      	ldr	r3, [r3, #32]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d058      	beq.n	8011ad6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	68ba      	ldr	r2, [r7, #8]
 8011a2a:	6892      	ldr	r2, [r2, #8]
 8011a2c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	69db      	ldr	r3, [r3, #28]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d02d      	beq.n	8011a92 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a3e:	431a      	orrs	r2, r3
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a44:	431a      	orrs	r2, r3
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a4a:	431a      	orrs	r2, r3
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	695b      	ldr	r3, [r3, #20]
 8011a50:	049b      	lsls	r3, r3, #18
 8011a52:	431a      	orrs	r2, r3
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	691b      	ldr	r3, [r3, #16]
 8011a58:	431a      	orrs	r2, r3
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	6a1b      	ldr	r3, [r3, #32]
 8011a5e:	431a      	orrs	r2, r3
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	68db      	ldr	r3, [r3, #12]
 8011a64:	431a      	orrs	r2, r3
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	69db      	ldr	r3, [r3, #28]
 8011a6a:	431a      	orrs	r2, r3
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	699b      	ldr	r3, [r3, #24]
 8011a70:	ea42 0103 	orr.w	r1, r2, r3
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	430a      	orrs	r2, r1
 8011a7c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8011a84:	d078      	beq.n	8011b78 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	68ba      	ldr	r2, [r7, #8]
 8011a8c:	6852      	ldr	r2, [r2, #4]
 8011a8e:	619a      	str	r2, [r3, #24]
}
 8011a90:	e072      	b.n	8011b78 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a9a:	431a      	orrs	r2, r3
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aa0:	431a      	orrs	r2, r3
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa6:	431a      	orrs	r2, r3
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	695b      	ldr	r3, [r3, #20]
 8011aac:	049b      	lsls	r3, r3, #18
 8011aae:	431a      	orrs	r2, r3
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	691b      	ldr	r3, [r3, #16]
 8011ab4:	431a      	orrs	r2, r3
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	6a1b      	ldr	r3, [r3, #32]
 8011aba:	431a      	orrs	r2, r3
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	69db      	ldr	r3, [r3, #28]
 8011ac0:	431a      	orrs	r2, r3
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	699b      	ldr	r3, [r3, #24]
 8011ac6:	ea42 0103 	orr.w	r1, r2, r3
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	687a      	ldr	r2, [r7, #4]
 8011ad0:	430a      	orrs	r2, r1
 8011ad2:	615a      	str	r2, [r3, #20]
}
 8011ad4:	e050      	b.n	8011b78 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	69db      	ldr	r3, [r3, #28]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d02a      	beq.n	8011b34 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ae6:	431a      	orrs	r2, r3
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aec:	431a      	orrs	r2, r3
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011af2:	431a      	orrs	r2, r3
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	695b      	ldr	r3, [r3, #20]
 8011af8:	049b      	lsls	r3, r3, #18
 8011afa:	431a      	orrs	r2, r3
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	6a1b      	ldr	r3, [r3, #32]
 8011b00:	431a      	orrs	r2, r3
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	431a      	orrs	r2, r3
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	69db      	ldr	r3, [r3, #28]
 8011b0c:	431a      	orrs	r2, r3
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	699b      	ldr	r3, [r3, #24]
 8011b12:	ea42 0103 	orr.w	r1, r2, r3
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	687a      	ldr	r2, [r7, #4]
 8011b1c:	430a      	orrs	r2, r1
 8011b1e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8011b26:	d027      	beq.n	8011b78 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	68ba      	ldr	r2, [r7, #8]
 8011b2e:	6852      	ldr	r2, [r2, #4]
 8011b30:	619a      	str	r2, [r3, #24]
}
 8011b32:	e021      	b.n	8011b78 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d01d      	beq.n	8011b78 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b44:	431a      	orrs	r2, r3
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b4a:	431a      	orrs	r2, r3
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b50:	431a      	orrs	r2, r3
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	695b      	ldr	r3, [r3, #20]
 8011b56:	049b      	lsls	r3, r3, #18
 8011b58:	431a      	orrs	r2, r3
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	6a1b      	ldr	r3, [r3, #32]
 8011b5e:	431a      	orrs	r2, r3
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	69db      	ldr	r3, [r3, #28]
 8011b64:	431a      	orrs	r2, r3
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	699b      	ldr	r3, [r3, #24]
 8011b6a:	ea42 0103 	orr.w	r1, r2, r3
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	430a      	orrs	r2, r1
 8011b76:	615a      	str	r2, [r3, #20]
}
 8011b78:	bf00      	nop
 8011b7a:	3714      	adds	r7, #20
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr

08011b84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b08c      	sub	sp, #48	; 0x30
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d102      	bne.n	8011b98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011b92:	2301      	movs	r3, #1
 8011b94:	f000 bc1c 	b.w	80123d0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	f003 0301 	and.w	r3, r3, #1
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	f000 8087 	beq.w	8011cb4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011ba6:	4b9e      	ldr	r3, [pc, #632]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011ba8:	691b      	ldr	r3, [r3, #16]
 8011baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011bb0:	4b9b      	ldr	r3, [pc, #620]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8011bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb8:	2b10      	cmp	r3, #16
 8011bba:	d007      	beq.n	8011bcc <HAL_RCC_OscConfig+0x48>
 8011bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bbe:	2b18      	cmp	r3, #24
 8011bc0:	d110      	bne.n	8011be4 <HAL_RCC_OscConfig+0x60>
 8011bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc4:	f003 0303 	and.w	r3, r3, #3
 8011bc8:	2b02      	cmp	r3, #2
 8011bca:	d10b      	bne.n	8011be4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011bcc:	4b94      	ldr	r3, [pc, #592]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d06c      	beq.n	8011cb2 <HAL_RCC_OscConfig+0x12e>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	685b      	ldr	r3, [r3, #4]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d168      	bne.n	8011cb2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8011be0:	2301      	movs	r3, #1
 8011be2:	e3f5      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bec:	d106      	bne.n	8011bfc <HAL_RCC_OscConfig+0x78>
 8011bee:	4b8c      	ldr	r3, [pc, #560]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	4a8b      	ldr	r2, [pc, #556]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011bf8:	6013      	str	r3, [r2, #0]
 8011bfa:	e02e      	b.n	8011c5a <HAL_RCC_OscConfig+0xd6>
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d10c      	bne.n	8011c1e <HAL_RCC_OscConfig+0x9a>
 8011c04:	4b86      	ldr	r3, [pc, #536]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	4a85      	ldr	r2, [pc, #532]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c0e:	6013      	str	r3, [r2, #0]
 8011c10:	4b83      	ldr	r3, [pc, #524]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	4a82      	ldr	r2, [pc, #520]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011c1a:	6013      	str	r3, [r2, #0]
 8011c1c:	e01d      	b.n	8011c5a <HAL_RCC_OscConfig+0xd6>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011c26:	d10c      	bne.n	8011c42 <HAL_RCC_OscConfig+0xbe>
 8011c28:	4b7d      	ldr	r3, [pc, #500]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	4a7c      	ldr	r2, [pc, #496]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011c32:	6013      	str	r3, [r2, #0]
 8011c34:	4b7a      	ldr	r3, [pc, #488]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	4a79      	ldr	r2, [pc, #484]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c3e:	6013      	str	r3, [r2, #0]
 8011c40:	e00b      	b.n	8011c5a <HAL_RCC_OscConfig+0xd6>
 8011c42:	4b77      	ldr	r3, [pc, #476]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	4a76      	ldr	r2, [pc, #472]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c4c:	6013      	str	r3, [r2, #0]
 8011c4e:	4b74      	ldr	r3, [pc, #464]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	4a73      	ldr	r2, [pc, #460]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011c58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d013      	beq.n	8011c8a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011c62:	f7fc fdd3 	bl	800e80c <HAL_GetTick>
 8011c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011c68:	e008      	b.n	8011c7c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011c6a:	f7fc fdcf 	bl	800e80c <HAL_GetTick>
 8011c6e:	4602      	mov	r2, r0
 8011c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c72:	1ad3      	subs	r3, r2, r3
 8011c74:	2b64      	cmp	r3, #100	; 0x64
 8011c76:	d901      	bls.n	8011c7c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8011c78:	2303      	movs	r3, #3
 8011c7a:	e3a9      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011c7c:	4b68      	ldr	r3, [pc, #416]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d0f0      	beq.n	8011c6a <HAL_RCC_OscConfig+0xe6>
 8011c88:	e014      	b.n	8011cb4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011c8a:	f7fc fdbf 	bl	800e80c <HAL_GetTick>
 8011c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011c90:	e008      	b.n	8011ca4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011c92:	f7fc fdbb 	bl	800e80c <HAL_GetTick>
 8011c96:	4602      	mov	r2, r0
 8011c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9a:	1ad3      	subs	r3, r2, r3
 8011c9c:	2b64      	cmp	r3, #100	; 0x64
 8011c9e:	d901      	bls.n	8011ca4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8011ca0:	2303      	movs	r3, #3
 8011ca2:	e395      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011ca4:	4b5e      	ldr	r3, [pc, #376]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d1f0      	bne.n	8011c92 <HAL_RCC_OscConfig+0x10e>
 8011cb0:	e000      	b.n	8011cb4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011cb2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f003 0302 	and.w	r3, r3, #2
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	f000 80ca 	beq.w	8011e56 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011cc2:	4b57      	ldr	r3, [pc, #348]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011cc4:	691b      	ldr	r3, [r3, #16]
 8011cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011cca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011ccc:	4b54      	ldr	r3, [pc, #336]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cd0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011cd2:	6a3b      	ldr	r3, [r7, #32]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d007      	beq.n	8011ce8 <HAL_RCC_OscConfig+0x164>
 8011cd8:	6a3b      	ldr	r3, [r7, #32]
 8011cda:	2b18      	cmp	r3, #24
 8011cdc:	d156      	bne.n	8011d8c <HAL_RCC_OscConfig+0x208>
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	f003 0303 	and.w	r3, r3, #3
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d151      	bne.n	8011d8c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011ce8:	4b4d      	ldr	r3, [pc, #308]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f003 0304 	and.w	r3, r3, #4
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d005      	beq.n	8011d00 <HAL_RCC_OscConfig+0x17c>
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	68db      	ldr	r3, [r3, #12]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d101      	bne.n	8011d00 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	e367      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011d00:	4b47      	ldr	r3, [pc, #284]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f023 0219 	bic.w	r2, r3, #25
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	68db      	ldr	r3, [r3, #12]
 8011d0c:	4944      	ldr	r1, [pc, #272]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011d0e:	4313      	orrs	r3, r2
 8011d10:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011d12:	f7fc fd7b 	bl	800e80c <HAL_GetTick>
 8011d16:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011d18:	e008      	b.n	8011d2c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011d1a:	f7fc fd77 	bl	800e80c <HAL_GetTick>
 8011d1e:	4602      	mov	r2, r0
 8011d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d22:	1ad3      	subs	r3, r2, r3
 8011d24:	2b02      	cmp	r3, #2
 8011d26:	d901      	bls.n	8011d2c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8011d28:	2303      	movs	r3, #3
 8011d2a:	e351      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011d2c:	4b3c      	ldr	r3, [pc, #240]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f003 0304 	and.w	r3, r3, #4
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d0f0      	beq.n	8011d1a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d38:	f7fc fd98 	bl	800e86c <HAL_GetREVID>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8011d42:	4293      	cmp	r3, r2
 8011d44:	d817      	bhi.n	8011d76 <HAL_RCC_OscConfig+0x1f2>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	691b      	ldr	r3, [r3, #16]
 8011d4a:	2b40      	cmp	r3, #64	; 0x40
 8011d4c:	d108      	bne.n	8011d60 <HAL_RCC_OscConfig+0x1dc>
 8011d4e:	4b34      	ldr	r3, [pc, #208]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8011d56:	4a32      	ldr	r2, [pc, #200]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011d5c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011d5e:	e07a      	b.n	8011e56 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d60:	4b2f      	ldr	r3, [pc, #188]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	691b      	ldr	r3, [r3, #16]
 8011d6c:	031b      	lsls	r3, r3, #12
 8011d6e:	492c      	ldr	r1, [pc, #176]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011d70:	4313      	orrs	r3, r2
 8011d72:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011d74:	e06f      	b.n	8011e56 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d76:	4b2a      	ldr	r3, [pc, #168]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	691b      	ldr	r3, [r3, #16]
 8011d82:	061b      	lsls	r3, r3, #24
 8011d84:	4926      	ldr	r1, [pc, #152]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011d86:	4313      	orrs	r3, r2
 8011d88:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011d8a:	e064      	b.n	8011e56 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d047      	beq.n	8011e24 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011d94:	4b22      	ldr	r3, [pc, #136]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f023 0219 	bic.w	r2, r3, #25
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	68db      	ldr	r3, [r3, #12]
 8011da0:	491f      	ldr	r1, [pc, #124]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011da2:	4313      	orrs	r3, r2
 8011da4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011da6:	f7fc fd31 	bl	800e80c <HAL_GetTick>
 8011daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011dac:	e008      	b.n	8011dc0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011dae:	f7fc fd2d 	bl	800e80c <HAL_GetTick>
 8011db2:	4602      	mov	r2, r0
 8011db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db6:	1ad3      	subs	r3, r2, r3
 8011db8:	2b02      	cmp	r3, #2
 8011dba:	d901      	bls.n	8011dc0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8011dbc:	2303      	movs	r3, #3
 8011dbe:	e307      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011dc0:	4b17      	ldr	r3, [pc, #92]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	f003 0304 	and.w	r3, r3, #4
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d0f0      	beq.n	8011dae <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011dcc:	f7fc fd4e 	bl	800e86c <HAL_GetREVID>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	f241 0203 	movw	r2, #4099	; 0x1003
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	d817      	bhi.n	8011e0a <HAL_RCC_OscConfig+0x286>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	691b      	ldr	r3, [r3, #16]
 8011dde:	2b40      	cmp	r3, #64	; 0x40
 8011de0:	d108      	bne.n	8011df4 <HAL_RCC_OscConfig+0x270>
 8011de2:	4b0f      	ldr	r3, [pc, #60]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011de4:	685b      	ldr	r3, [r3, #4]
 8011de6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8011dea:	4a0d      	ldr	r2, [pc, #52]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011df0:	6053      	str	r3, [r2, #4]
 8011df2:	e030      	b.n	8011e56 <HAL_RCC_OscConfig+0x2d2>
 8011df4:	4b0a      	ldr	r3, [pc, #40]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	691b      	ldr	r3, [r3, #16]
 8011e00:	031b      	lsls	r3, r3, #12
 8011e02:	4907      	ldr	r1, [pc, #28]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011e04:	4313      	orrs	r3, r2
 8011e06:	604b      	str	r3, [r1, #4]
 8011e08:	e025      	b.n	8011e56 <HAL_RCC_OscConfig+0x2d2>
 8011e0a:	4b05      	ldr	r3, [pc, #20]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011e0c:	685b      	ldr	r3, [r3, #4]
 8011e0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	691b      	ldr	r3, [r3, #16]
 8011e16:	061b      	lsls	r3, r3, #24
 8011e18:	4901      	ldr	r1, [pc, #4]	; (8011e20 <HAL_RCC_OscConfig+0x29c>)
 8011e1a:	4313      	orrs	r3, r2
 8011e1c:	604b      	str	r3, [r1, #4]
 8011e1e:	e01a      	b.n	8011e56 <HAL_RCC_OscConfig+0x2d2>
 8011e20:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011e24:	4b9e      	ldr	r3, [pc, #632]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	4a9d      	ldr	r2, [pc, #628]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011e2a:	f023 0301 	bic.w	r3, r3, #1
 8011e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e30:	f7fc fcec 	bl	800e80c <HAL_GetTick>
 8011e34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011e36:	e008      	b.n	8011e4a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011e38:	f7fc fce8 	bl	800e80c <HAL_GetTick>
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e40:	1ad3      	subs	r3, r2, r3
 8011e42:	2b02      	cmp	r3, #2
 8011e44:	d901      	bls.n	8011e4a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8011e46:	2303      	movs	r3, #3
 8011e48:	e2c2      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011e4a:	4b95      	ldr	r3, [pc, #596]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	f003 0304 	and.w	r3, r3, #4
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1f0      	bne.n	8011e38 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	f003 0310 	and.w	r3, r3, #16
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	f000 80a9 	beq.w	8011fb6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011e64:	4b8e      	ldr	r3, [pc, #568]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011e66:	691b      	ldr	r3, [r3, #16]
 8011e68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011e6c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011e6e:	4b8c      	ldr	r3, [pc, #560]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e72:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8011e74:	69bb      	ldr	r3, [r7, #24]
 8011e76:	2b08      	cmp	r3, #8
 8011e78:	d007      	beq.n	8011e8a <HAL_RCC_OscConfig+0x306>
 8011e7a:	69bb      	ldr	r3, [r7, #24]
 8011e7c:	2b18      	cmp	r3, #24
 8011e7e:	d13a      	bne.n	8011ef6 <HAL_RCC_OscConfig+0x372>
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	f003 0303 	and.w	r3, r3, #3
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d135      	bne.n	8011ef6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011e8a:	4b85      	ldr	r3, [pc, #532]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d005      	beq.n	8011ea2 <HAL_RCC_OscConfig+0x31e>
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	69db      	ldr	r3, [r3, #28]
 8011e9a:	2b80      	cmp	r3, #128	; 0x80
 8011e9c:	d001      	beq.n	8011ea2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	e296      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011ea2:	f7fc fce3 	bl	800e86c <HAL_GetREVID>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	f241 0203 	movw	r2, #4099	; 0x1003
 8011eac:	4293      	cmp	r3, r2
 8011eae:	d817      	bhi.n	8011ee0 <HAL_RCC_OscConfig+0x35c>
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6a1b      	ldr	r3, [r3, #32]
 8011eb4:	2b20      	cmp	r3, #32
 8011eb6:	d108      	bne.n	8011eca <HAL_RCC_OscConfig+0x346>
 8011eb8:	4b79      	ldr	r3, [pc, #484]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011eba:	685b      	ldr	r3, [r3, #4]
 8011ebc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8011ec0:	4a77      	ldr	r2, [pc, #476]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011ec2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ec6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011ec8:	e075      	b.n	8011fb6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011eca:	4b75      	ldr	r3, [pc, #468]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6a1b      	ldr	r3, [r3, #32]
 8011ed6:	069b      	lsls	r3, r3, #26
 8011ed8:	4971      	ldr	r1, [pc, #452]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011eda:	4313      	orrs	r3, r2
 8011edc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011ede:	e06a      	b.n	8011fb6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011ee0:	4b6f      	ldr	r3, [pc, #444]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6a1b      	ldr	r3, [r3, #32]
 8011eec:	061b      	lsls	r3, r3, #24
 8011eee:	496c      	ldr	r1, [pc, #432]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011ef0:	4313      	orrs	r3, r2
 8011ef2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011ef4:	e05f      	b.n	8011fb6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	69db      	ldr	r3, [r3, #28]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d042      	beq.n	8011f84 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8011efe:	4b68      	ldr	r3, [pc, #416]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	4a67      	ldr	r2, [pc, #412]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011f0a:	f7fc fc7f 	bl	800e80c <HAL_GetTick>
 8011f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011f10:	e008      	b.n	8011f24 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8011f12:	f7fc fc7b 	bl	800e80c <HAL_GetTick>
 8011f16:	4602      	mov	r2, r0
 8011f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	2b02      	cmp	r3, #2
 8011f1e:	d901      	bls.n	8011f24 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8011f20:	2303      	movs	r3, #3
 8011f22:	e255      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011f24:	4b5e      	ldr	r3, [pc, #376]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d0f0      	beq.n	8011f12 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011f30:	f7fc fc9c 	bl	800e86c <HAL_GetREVID>
 8011f34:	4603      	mov	r3, r0
 8011f36:	f241 0203 	movw	r2, #4099	; 0x1003
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	d817      	bhi.n	8011f6e <HAL_RCC_OscConfig+0x3ea>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6a1b      	ldr	r3, [r3, #32]
 8011f42:	2b20      	cmp	r3, #32
 8011f44:	d108      	bne.n	8011f58 <HAL_RCC_OscConfig+0x3d4>
 8011f46:	4b56      	ldr	r3, [pc, #344]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8011f4e:	4a54      	ldr	r2, [pc, #336]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011f50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011f54:	6053      	str	r3, [r2, #4]
 8011f56:	e02e      	b.n	8011fb6 <HAL_RCC_OscConfig+0x432>
 8011f58:	4b51      	ldr	r3, [pc, #324]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6a1b      	ldr	r3, [r3, #32]
 8011f64:	069b      	lsls	r3, r3, #26
 8011f66:	494e      	ldr	r1, [pc, #312]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011f68:	4313      	orrs	r3, r2
 8011f6a:	604b      	str	r3, [r1, #4]
 8011f6c:	e023      	b.n	8011fb6 <HAL_RCC_OscConfig+0x432>
 8011f6e:	4b4c      	ldr	r3, [pc, #304]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011f70:	68db      	ldr	r3, [r3, #12]
 8011f72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6a1b      	ldr	r3, [r3, #32]
 8011f7a:	061b      	lsls	r3, r3, #24
 8011f7c:	4948      	ldr	r1, [pc, #288]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011f7e:	4313      	orrs	r3, r2
 8011f80:	60cb      	str	r3, [r1, #12]
 8011f82:	e018      	b.n	8011fb6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8011f84:	4b46      	ldr	r3, [pc, #280]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	4a45      	ldr	r2, [pc, #276]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011f90:	f7fc fc3c 	bl	800e80c <HAL_GetTick>
 8011f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011f96:	e008      	b.n	8011faa <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8011f98:	f7fc fc38 	bl	800e80c <HAL_GetTick>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa0:	1ad3      	subs	r3, r2, r3
 8011fa2:	2b02      	cmp	r3, #2
 8011fa4:	d901      	bls.n	8011faa <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8011fa6:	2303      	movs	r3, #3
 8011fa8:	e212      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011faa:	4b3d      	ldr	r3, [pc, #244]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d1f0      	bne.n	8011f98 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	f003 0308 	and.w	r3, r3, #8
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d036      	beq.n	8012030 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	695b      	ldr	r3, [r3, #20]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d019      	beq.n	8011ffe <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011fca:	4b35      	ldr	r3, [pc, #212]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fce:	4a34      	ldr	r2, [pc, #208]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011fd0:	f043 0301 	orr.w	r3, r3, #1
 8011fd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011fd6:	f7fc fc19 	bl	800e80c <HAL_GetTick>
 8011fda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011fdc:	e008      	b.n	8011ff0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011fde:	f7fc fc15 	bl	800e80c <HAL_GetTick>
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe6:	1ad3      	subs	r3, r2, r3
 8011fe8:	2b02      	cmp	r3, #2
 8011fea:	d901      	bls.n	8011ff0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8011fec:	2303      	movs	r3, #3
 8011fee:	e1ef      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011ff0:	4b2b      	ldr	r3, [pc, #172]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8011ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ff4:	f003 0302 	and.w	r3, r3, #2
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d0f0      	beq.n	8011fde <HAL_RCC_OscConfig+0x45a>
 8011ffc:	e018      	b.n	8012030 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011ffe:	4b28      	ldr	r3, [pc, #160]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8012000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012002:	4a27      	ldr	r2, [pc, #156]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8012004:	f023 0301 	bic.w	r3, r3, #1
 8012008:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801200a:	f7fc fbff 	bl	800e80c <HAL_GetTick>
 801200e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012010:	e008      	b.n	8012024 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012012:	f7fc fbfb 	bl	800e80c <HAL_GetTick>
 8012016:	4602      	mov	r2, r0
 8012018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801201a:	1ad3      	subs	r3, r2, r3
 801201c:	2b02      	cmp	r3, #2
 801201e:	d901      	bls.n	8012024 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8012020:	2303      	movs	r3, #3
 8012022:	e1d5      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012024:	4b1e      	ldr	r3, [pc, #120]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8012026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012028:	f003 0302 	and.w	r3, r3, #2
 801202c:	2b00      	cmp	r3, #0
 801202e:	d1f0      	bne.n	8012012 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f003 0320 	and.w	r3, r3, #32
 8012038:	2b00      	cmp	r3, #0
 801203a:	d039      	beq.n	80120b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	699b      	ldr	r3, [r3, #24]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d019      	beq.n	8012078 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8012044:	4b16      	ldr	r3, [pc, #88]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	4a15      	ldr	r2, [pc, #84]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 801204a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801204e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8012050:	f7fc fbdc 	bl	800e80c <HAL_GetTick>
 8012054:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8012056:	e008      	b.n	801206a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8012058:	f7fc fbd8 	bl	800e80c <HAL_GetTick>
 801205c:	4602      	mov	r2, r0
 801205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012060:	1ad3      	subs	r3, r2, r3
 8012062:	2b02      	cmp	r3, #2
 8012064:	d901      	bls.n	801206a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8012066:	2303      	movs	r3, #3
 8012068:	e1b2      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801206a:	4b0d      	ldr	r3, [pc, #52]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012072:	2b00      	cmp	r3, #0
 8012074:	d0f0      	beq.n	8012058 <HAL_RCC_OscConfig+0x4d4>
 8012076:	e01b      	b.n	80120b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8012078:	4b09      	ldr	r3, [pc, #36]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	4a08      	ldr	r2, [pc, #32]	; (80120a0 <HAL_RCC_OscConfig+0x51c>)
 801207e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012082:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8012084:	f7fc fbc2 	bl	800e80c <HAL_GetTick>
 8012088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801208a:	e00b      	b.n	80120a4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801208c:	f7fc fbbe 	bl	800e80c <HAL_GetTick>
 8012090:	4602      	mov	r2, r0
 8012092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012094:	1ad3      	subs	r3, r2, r3
 8012096:	2b02      	cmp	r3, #2
 8012098:	d904      	bls.n	80120a4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 801209a:	2303      	movs	r3, #3
 801209c:	e198      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
 801209e:	bf00      	nop
 80120a0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80120a4:	4ba3      	ldr	r3, [pc, #652]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d1ed      	bne.n	801208c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	f003 0304 	and.w	r3, r3, #4
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	f000 8081 	beq.w	80121c0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80120be:	4b9e      	ldr	r3, [pc, #632]	; (8012338 <HAL_RCC_OscConfig+0x7b4>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	4a9d      	ldr	r2, [pc, #628]	; (8012338 <HAL_RCC_OscConfig+0x7b4>)
 80120c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80120c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80120ca:	f7fc fb9f 	bl	800e80c <HAL_GetTick>
 80120ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80120d0:	e008      	b.n	80120e4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80120d2:	f7fc fb9b 	bl	800e80c <HAL_GetTick>
 80120d6:	4602      	mov	r2, r0
 80120d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120da:	1ad3      	subs	r3, r2, r3
 80120dc:	2b64      	cmp	r3, #100	; 0x64
 80120de:	d901      	bls.n	80120e4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80120e0:	2303      	movs	r3, #3
 80120e2:	e175      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80120e4:	4b94      	ldr	r3, [pc, #592]	; (8012338 <HAL_RCC_OscConfig+0x7b4>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d0f0      	beq.n	80120d2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	689b      	ldr	r3, [r3, #8]
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d106      	bne.n	8012106 <HAL_RCC_OscConfig+0x582>
 80120f8:	4b8e      	ldr	r3, [pc, #568]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80120fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120fc:	4a8d      	ldr	r2, [pc, #564]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80120fe:	f043 0301 	orr.w	r3, r3, #1
 8012102:	6713      	str	r3, [r2, #112]	; 0x70
 8012104:	e02d      	b.n	8012162 <HAL_RCC_OscConfig+0x5de>
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	689b      	ldr	r3, [r3, #8]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d10c      	bne.n	8012128 <HAL_RCC_OscConfig+0x5a4>
 801210e:	4b89      	ldr	r3, [pc, #548]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012112:	4a88      	ldr	r2, [pc, #544]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012114:	f023 0301 	bic.w	r3, r3, #1
 8012118:	6713      	str	r3, [r2, #112]	; 0x70
 801211a:	4b86      	ldr	r3, [pc, #536]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 801211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801211e:	4a85      	ldr	r2, [pc, #532]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012120:	f023 0304 	bic.w	r3, r3, #4
 8012124:	6713      	str	r3, [r2, #112]	; 0x70
 8012126:	e01c      	b.n	8012162 <HAL_RCC_OscConfig+0x5de>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	689b      	ldr	r3, [r3, #8]
 801212c:	2b05      	cmp	r3, #5
 801212e:	d10c      	bne.n	801214a <HAL_RCC_OscConfig+0x5c6>
 8012130:	4b80      	ldr	r3, [pc, #512]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012134:	4a7f      	ldr	r2, [pc, #508]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012136:	f043 0304 	orr.w	r3, r3, #4
 801213a:	6713      	str	r3, [r2, #112]	; 0x70
 801213c:	4b7d      	ldr	r3, [pc, #500]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 801213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012140:	4a7c      	ldr	r2, [pc, #496]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012142:	f043 0301 	orr.w	r3, r3, #1
 8012146:	6713      	str	r3, [r2, #112]	; 0x70
 8012148:	e00b      	b.n	8012162 <HAL_RCC_OscConfig+0x5de>
 801214a:	4b7a      	ldr	r3, [pc, #488]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 801214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801214e:	4a79      	ldr	r2, [pc, #484]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012150:	f023 0301 	bic.w	r3, r3, #1
 8012154:	6713      	str	r3, [r2, #112]	; 0x70
 8012156:	4b77      	ldr	r3, [pc, #476]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801215a:	4a76      	ldr	r2, [pc, #472]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 801215c:	f023 0304 	bic.w	r3, r3, #4
 8012160:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	689b      	ldr	r3, [r3, #8]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d015      	beq.n	8012196 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801216a:	f7fc fb4f 	bl	800e80c <HAL_GetTick>
 801216e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012170:	e00a      	b.n	8012188 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012172:	f7fc fb4b 	bl	800e80c <HAL_GetTick>
 8012176:	4602      	mov	r2, r0
 8012178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217a:	1ad3      	subs	r3, r2, r3
 801217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012180:	4293      	cmp	r3, r2
 8012182:	d901      	bls.n	8012188 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8012184:	2303      	movs	r3, #3
 8012186:	e123      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012188:	4b6a      	ldr	r3, [pc, #424]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 801218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801218c:	f003 0302 	and.w	r3, r3, #2
 8012190:	2b00      	cmp	r3, #0
 8012192:	d0ee      	beq.n	8012172 <HAL_RCC_OscConfig+0x5ee>
 8012194:	e014      	b.n	80121c0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012196:	f7fc fb39 	bl	800e80c <HAL_GetTick>
 801219a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801219c:	e00a      	b.n	80121b4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801219e:	f7fc fb35 	bl	800e80c <HAL_GetTick>
 80121a2:	4602      	mov	r2, r0
 80121a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a6:	1ad3      	subs	r3, r2, r3
 80121a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80121ac:	4293      	cmp	r3, r2
 80121ae:	d901      	bls.n	80121b4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80121b0:	2303      	movs	r3, #3
 80121b2:	e10d      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80121b4:	4b5f      	ldr	r3, [pc, #380]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80121b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121b8:	f003 0302 	and.w	r3, r3, #2
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d1ee      	bne.n	801219e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	f000 8102 	beq.w	80123ce <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80121ca:	4b5a      	ldr	r3, [pc, #360]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80121cc:	691b      	ldr	r3, [r3, #16]
 80121ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80121d2:	2b18      	cmp	r3, #24
 80121d4:	f000 80bd 	beq.w	8012352 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121dc:	2b02      	cmp	r3, #2
 80121de:	f040 8095 	bne.w	801230c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80121e2:	4b54      	ldr	r3, [pc, #336]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	4a53      	ldr	r2, [pc, #332]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80121e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80121ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80121ee:	f7fc fb0d 	bl	800e80c <HAL_GetTick>
 80121f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80121f4:	e008      	b.n	8012208 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80121f6:	f7fc fb09 	bl	800e80c <HAL_GetTick>
 80121fa:	4602      	mov	r2, r0
 80121fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121fe:	1ad3      	subs	r3, r2, r3
 8012200:	2b02      	cmp	r3, #2
 8012202:	d901      	bls.n	8012208 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8012204:	2303      	movs	r3, #3
 8012206:	e0e3      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012208:	4b4a      	ldr	r3, [pc, #296]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012210:	2b00      	cmp	r3, #0
 8012212:	d1f0      	bne.n	80121f6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012214:	4b47      	ldr	r3, [pc, #284]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012218:	4b48      	ldr	r3, [pc, #288]	; (801233c <HAL_RCC_OscConfig+0x7b8>)
 801221a:	4013      	ands	r3, r2
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8012220:	687a      	ldr	r2, [r7, #4]
 8012222:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012224:	0112      	lsls	r2, r2, #4
 8012226:	430a      	orrs	r2, r1
 8012228:	4942      	ldr	r1, [pc, #264]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 801222a:	4313      	orrs	r3, r2
 801222c:	628b      	str	r3, [r1, #40]	; 0x28
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012232:	3b01      	subs	r3, #1
 8012234:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801223c:	3b01      	subs	r3, #1
 801223e:	025b      	lsls	r3, r3, #9
 8012240:	b29b      	uxth	r3, r3
 8012242:	431a      	orrs	r2, r3
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012248:	3b01      	subs	r3, #1
 801224a:	041b      	lsls	r3, r3, #16
 801224c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012250:	431a      	orrs	r2, r3
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012256:	3b01      	subs	r3, #1
 8012258:	061b      	lsls	r3, r3, #24
 801225a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801225e:	4935      	ldr	r1, [pc, #212]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012260:	4313      	orrs	r3, r2
 8012262:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8012264:	4b33      	ldr	r3, [pc, #204]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012268:	4a32      	ldr	r2, [pc, #200]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 801226a:	f023 0301 	bic.w	r3, r3, #1
 801226e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012270:	4b30      	ldr	r3, [pc, #192]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012274:	4b32      	ldr	r3, [pc, #200]	; (8012340 <HAL_RCC_OscConfig+0x7bc>)
 8012276:	4013      	ands	r3, r2
 8012278:	687a      	ldr	r2, [r7, #4]
 801227a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801227c:	00d2      	lsls	r2, r2, #3
 801227e:	492d      	ldr	r1, [pc, #180]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012280:	4313      	orrs	r3, r2
 8012282:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8012284:	4b2b      	ldr	r3, [pc, #172]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012288:	f023 020c 	bic.w	r2, r3, #12
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012290:	4928      	ldr	r1, [pc, #160]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012292:	4313      	orrs	r3, r2
 8012294:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8012296:	4b27      	ldr	r3, [pc, #156]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801229a:	f023 0202 	bic.w	r2, r3, #2
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122a2:	4924      	ldr	r1, [pc, #144]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80122a4:	4313      	orrs	r3, r2
 80122a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80122a8:	4b22      	ldr	r3, [pc, #136]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80122aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ac:	4a21      	ldr	r2, [pc, #132]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80122ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80122b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80122b4:	4b1f      	ldr	r3, [pc, #124]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80122b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b8:	4a1e      	ldr	r2, [pc, #120]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80122ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80122be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80122c0:	4b1c      	ldr	r3, [pc, #112]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80122c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122c4:	4a1b      	ldr	r2, [pc, #108]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80122c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80122ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80122cc:	4b19      	ldr	r3, [pc, #100]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80122ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122d0:	4a18      	ldr	r2, [pc, #96]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80122d2:	f043 0301 	orr.w	r3, r3, #1
 80122d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80122d8:	4b16      	ldr	r3, [pc, #88]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4a15      	ldr	r2, [pc, #84]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 80122de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80122e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80122e4:	f7fc fa92 	bl	800e80c <HAL_GetTick>
 80122e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80122ea:	e008      	b.n	80122fe <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80122ec:	f7fc fa8e 	bl	800e80c <HAL_GetTick>
 80122f0:	4602      	mov	r2, r0
 80122f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f4:	1ad3      	subs	r3, r2, r3
 80122f6:	2b02      	cmp	r3, #2
 80122f8:	d901      	bls.n	80122fe <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80122fa:	2303      	movs	r3, #3
 80122fc:	e068      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80122fe:	4b0d      	ldr	r3, [pc, #52]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012306:	2b00      	cmp	r3, #0
 8012308:	d0f0      	beq.n	80122ec <HAL_RCC_OscConfig+0x768>
 801230a:	e060      	b.n	80123ce <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801230c:	4b09      	ldr	r3, [pc, #36]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	4a08      	ldr	r2, [pc, #32]	; (8012334 <HAL_RCC_OscConfig+0x7b0>)
 8012312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012318:	f7fc fa78 	bl	800e80c <HAL_GetTick>
 801231c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801231e:	e011      	b.n	8012344 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012320:	f7fc fa74 	bl	800e80c <HAL_GetTick>
 8012324:	4602      	mov	r2, r0
 8012326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012328:	1ad3      	subs	r3, r2, r3
 801232a:	2b02      	cmp	r3, #2
 801232c:	d90a      	bls.n	8012344 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 801232e:	2303      	movs	r3, #3
 8012330:	e04e      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
 8012332:	bf00      	nop
 8012334:	58024400 	.word	0x58024400
 8012338:	58024800 	.word	0x58024800
 801233c:	fffffc0c 	.word	0xfffffc0c
 8012340:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012344:	4b24      	ldr	r3, [pc, #144]	; (80123d8 <HAL_RCC_OscConfig+0x854>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801234c:	2b00      	cmp	r3, #0
 801234e:	d1e7      	bne.n	8012320 <HAL_RCC_OscConfig+0x79c>
 8012350:	e03d      	b.n	80123ce <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8012352:	4b21      	ldr	r3, [pc, #132]	; (80123d8 <HAL_RCC_OscConfig+0x854>)
 8012354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012356:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8012358:	4b1f      	ldr	r3, [pc, #124]	; (80123d8 <HAL_RCC_OscConfig+0x854>)
 801235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801235c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012362:	2b01      	cmp	r3, #1
 8012364:	d031      	beq.n	80123ca <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	f003 0203 	and.w	r2, r3, #3
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012370:	429a      	cmp	r2, r3
 8012372:	d12a      	bne.n	80123ca <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	091b      	lsrs	r3, r3, #4
 8012378:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012380:	429a      	cmp	r2, r3
 8012382:	d122      	bne.n	80123ca <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801238e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012390:	429a      	cmp	r2, r3
 8012392:	d11a      	bne.n	80123ca <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	0a5b      	lsrs	r3, r3, #9
 8012398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123a0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d111      	bne.n	80123ca <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	0c1b      	lsrs	r3, r3, #16
 80123aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d108      	bne.n	80123ca <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	0e1b      	lsrs	r3, r3, #24
 80123bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d001      	beq.n	80123ce <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80123ca:	2301      	movs	r3, #1
 80123cc:	e000      	b.n	80123d0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80123ce:	2300      	movs	r3, #0
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3730      	adds	r7, #48	; 0x30
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	58024400 	.word	0x58024400

080123dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d101      	bne.n	80123f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80123ec:	2301      	movs	r3, #1
 80123ee:	e19c      	b.n	801272a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80123f0:	4b8a      	ldr	r3, [pc, #552]	; (801261c <HAL_RCC_ClockConfig+0x240>)
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	f003 030f 	and.w	r3, r3, #15
 80123f8:	683a      	ldr	r2, [r7, #0]
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d910      	bls.n	8012420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80123fe:	4b87      	ldr	r3, [pc, #540]	; (801261c <HAL_RCC_ClockConfig+0x240>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	f023 020f 	bic.w	r2, r3, #15
 8012406:	4985      	ldr	r1, [pc, #532]	; (801261c <HAL_RCC_ClockConfig+0x240>)
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	4313      	orrs	r3, r2
 801240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801240e:	4b83      	ldr	r3, [pc, #524]	; (801261c <HAL_RCC_ClockConfig+0x240>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	f003 030f 	and.w	r3, r3, #15
 8012416:	683a      	ldr	r2, [r7, #0]
 8012418:	429a      	cmp	r2, r3
 801241a:	d001      	beq.n	8012420 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801241c:	2301      	movs	r3, #1
 801241e:	e184      	b.n	801272a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	f003 0304 	and.w	r3, r3, #4
 8012428:	2b00      	cmp	r3, #0
 801242a:	d010      	beq.n	801244e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	691a      	ldr	r2, [r3, #16]
 8012430:	4b7b      	ldr	r3, [pc, #492]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 8012432:	699b      	ldr	r3, [r3, #24]
 8012434:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012438:	429a      	cmp	r2, r3
 801243a:	d908      	bls.n	801244e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801243c:	4b78      	ldr	r3, [pc, #480]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 801243e:	699b      	ldr	r3, [r3, #24]
 8012440:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	691b      	ldr	r3, [r3, #16]
 8012448:	4975      	ldr	r1, [pc, #468]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 801244a:	4313      	orrs	r3, r2
 801244c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	f003 0308 	and.w	r3, r3, #8
 8012456:	2b00      	cmp	r3, #0
 8012458:	d010      	beq.n	801247c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	695a      	ldr	r2, [r3, #20]
 801245e:	4b70      	ldr	r3, [pc, #448]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 8012460:	69db      	ldr	r3, [r3, #28]
 8012462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012466:	429a      	cmp	r2, r3
 8012468:	d908      	bls.n	801247c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801246a:	4b6d      	ldr	r3, [pc, #436]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 801246c:	69db      	ldr	r3, [r3, #28]
 801246e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	695b      	ldr	r3, [r3, #20]
 8012476:	496a      	ldr	r1, [pc, #424]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 8012478:	4313      	orrs	r3, r2
 801247a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	f003 0310 	and.w	r3, r3, #16
 8012484:	2b00      	cmp	r3, #0
 8012486:	d010      	beq.n	80124aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	699a      	ldr	r2, [r3, #24]
 801248c:	4b64      	ldr	r3, [pc, #400]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 801248e:	69db      	ldr	r3, [r3, #28]
 8012490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012494:	429a      	cmp	r2, r3
 8012496:	d908      	bls.n	80124aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8012498:	4b61      	ldr	r3, [pc, #388]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 801249a:	69db      	ldr	r3, [r3, #28]
 801249c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	699b      	ldr	r3, [r3, #24]
 80124a4:	495e      	ldr	r1, [pc, #376]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 80124a6:	4313      	orrs	r3, r2
 80124a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	f003 0320 	and.w	r3, r3, #32
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d010      	beq.n	80124d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	69da      	ldr	r2, [r3, #28]
 80124ba:	4b59      	ldr	r3, [pc, #356]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 80124bc:	6a1b      	ldr	r3, [r3, #32]
 80124be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d908      	bls.n	80124d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80124c6:	4b56      	ldr	r3, [pc, #344]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 80124c8:	6a1b      	ldr	r3, [r3, #32]
 80124ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	69db      	ldr	r3, [r3, #28]
 80124d2:	4953      	ldr	r1, [pc, #332]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 80124d4:	4313      	orrs	r3, r2
 80124d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	f003 0302 	and.w	r3, r3, #2
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d010      	beq.n	8012506 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	68da      	ldr	r2, [r3, #12]
 80124e8:	4b4d      	ldr	r3, [pc, #308]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 80124ea:	699b      	ldr	r3, [r3, #24]
 80124ec:	f003 030f 	and.w	r3, r3, #15
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d908      	bls.n	8012506 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80124f4:	4b4a      	ldr	r3, [pc, #296]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 80124f6:	699b      	ldr	r3, [r3, #24]
 80124f8:	f023 020f 	bic.w	r2, r3, #15
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	68db      	ldr	r3, [r3, #12]
 8012500:	4947      	ldr	r1, [pc, #284]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 8012502:	4313      	orrs	r3, r2
 8012504:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f003 0301 	and.w	r3, r3, #1
 801250e:	2b00      	cmp	r3, #0
 8012510:	d055      	beq.n	80125be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8012512:	4b43      	ldr	r3, [pc, #268]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 8012514:	699b      	ldr	r3, [r3, #24]
 8012516:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	689b      	ldr	r3, [r3, #8]
 801251e:	4940      	ldr	r1, [pc, #256]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 8012520:	4313      	orrs	r3, r2
 8012522:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	2b02      	cmp	r3, #2
 801252a:	d107      	bne.n	801253c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801252c:	4b3c      	ldr	r3, [pc, #240]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012534:	2b00      	cmp	r3, #0
 8012536:	d121      	bne.n	801257c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8012538:	2301      	movs	r3, #1
 801253a:	e0f6      	b.n	801272a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	685b      	ldr	r3, [r3, #4]
 8012540:	2b03      	cmp	r3, #3
 8012542:	d107      	bne.n	8012554 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012544:	4b36      	ldr	r3, [pc, #216]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801254c:	2b00      	cmp	r3, #0
 801254e:	d115      	bne.n	801257c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8012550:	2301      	movs	r3, #1
 8012552:	e0ea      	b.n	801272a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	2b01      	cmp	r3, #1
 801255a:	d107      	bne.n	801256c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801255c:	4b30      	ldr	r3, [pc, #192]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012564:	2b00      	cmp	r3, #0
 8012566:	d109      	bne.n	801257c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8012568:	2301      	movs	r3, #1
 801256a:	e0de      	b.n	801272a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801256c:	4b2c      	ldr	r3, [pc, #176]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	f003 0304 	and.w	r3, r3, #4
 8012574:	2b00      	cmp	r3, #0
 8012576:	d101      	bne.n	801257c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8012578:	2301      	movs	r3, #1
 801257a:	e0d6      	b.n	801272a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801257c:	4b28      	ldr	r3, [pc, #160]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 801257e:	691b      	ldr	r3, [r3, #16]
 8012580:	f023 0207 	bic.w	r2, r3, #7
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	4925      	ldr	r1, [pc, #148]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 801258a:	4313      	orrs	r3, r2
 801258c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801258e:	f7fc f93d 	bl	800e80c <HAL_GetTick>
 8012592:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012594:	e00a      	b.n	80125ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012596:	f7fc f939 	bl	800e80c <HAL_GetTick>
 801259a:	4602      	mov	r2, r0
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	1ad3      	subs	r3, r2, r3
 80125a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80125a4:	4293      	cmp	r3, r2
 80125a6:	d901      	bls.n	80125ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80125a8:	2303      	movs	r3, #3
 80125aa:	e0be      	b.n	801272a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80125ac:	4b1c      	ldr	r3, [pc, #112]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 80125ae:	691b      	ldr	r3, [r3, #16]
 80125b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	00db      	lsls	r3, r3, #3
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d1eb      	bne.n	8012596 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	f003 0302 	and.w	r3, r3, #2
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d010      	beq.n	80125ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	68da      	ldr	r2, [r3, #12]
 80125ce:	4b14      	ldr	r3, [pc, #80]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 80125d0:	699b      	ldr	r3, [r3, #24]
 80125d2:	f003 030f 	and.w	r3, r3, #15
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d208      	bcs.n	80125ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80125da:	4b11      	ldr	r3, [pc, #68]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 80125dc:	699b      	ldr	r3, [r3, #24]
 80125de:	f023 020f 	bic.w	r2, r3, #15
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	68db      	ldr	r3, [r3, #12]
 80125e6:	490e      	ldr	r1, [pc, #56]	; (8012620 <HAL_RCC_ClockConfig+0x244>)
 80125e8:	4313      	orrs	r3, r2
 80125ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80125ec:	4b0b      	ldr	r3, [pc, #44]	; (801261c <HAL_RCC_ClockConfig+0x240>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	f003 030f 	and.w	r3, r3, #15
 80125f4:	683a      	ldr	r2, [r7, #0]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d214      	bcs.n	8012624 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80125fa:	4b08      	ldr	r3, [pc, #32]	; (801261c <HAL_RCC_ClockConfig+0x240>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	f023 020f 	bic.w	r2, r3, #15
 8012602:	4906      	ldr	r1, [pc, #24]	; (801261c <HAL_RCC_ClockConfig+0x240>)
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	4313      	orrs	r3, r2
 8012608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801260a:	4b04      	ldr	r3, [pc, #16]	; (801261c <HAL_RCC_ClockConfig+0x240>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	f003 030f 	and.w	r3, r3, #15
 8012612:	683a      	ldr	r2, [r7, #0]
 8012614:	429a      	cmp	r2, r3
 8012616:	d005      	beq.n	8012624 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8012618:	2301      	movs	r3, #1
 801261a:	e086      	b.n	801272a <HAL_RCC_ClockConfig+0x34e>
 801261c:	52002000 	.word	0x52002000
 8012620:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	f003 0304 	and.w	r3, r3, #4
 801262c:	2b00      	cmp	r3, #0
 801262e:	d010      	beq.n	8012652 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	691a      	ldr	r2, [r3, #16]
 8012634:	4b3f      	ldr	r3, [pc, #252]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 8012636:	699b      	ldr	r3, [r3, #24]
 8012638:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801263c:	429a      	cmp	r2, r3
 801263e:	d208      	bcs.n	8012652 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012640:	4b3c      	ldr	r3, [pc, #240]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 8012642:	699b      	ldr	r3, [r3, #24]
 8012644:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	691b      	ldr	r3, [r3, #16]
 801264c:	4939      	ldr	r1, [pc, #228]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 801264e:	4313      	orrs	r3, r2
 8012650:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	f003 0308 	and.w	r3, r3, #8
 801265a:	2b00      	cmp	r3, #0
 801265c:	d010      	beq.n	8012680 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	695a      	ldr	r2, [r3, #20]
 8012662:	4b34      	ldr	r3, [pc, #208]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 8012664:	69db      	ldr	r3, [r3, #28]
 8012666:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801266a:	429a      	cmp	r2, r3
 801266c:	d208      	bcs.n	8012680 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801266e:	4b31      	ldr	r3, [pc, #196]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 8012670:	69db      	ldr	r3, [r3, #28]
 8012672:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	695b      	ldr	r3, [r3, #20]
 801267a:	492e      	ldr	r1, [pc, #184]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 801267c:	4313      	orrs	r3, r2
 801267e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f003 0310 	and.w	r3, r3, #16
 8012688:	2b00      	cmp	r3, #0
 801268a:	d010      	beq.n	80126ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	699a      	ldr	r2, [r3, #24]
 8012690:	4b28      	ldr	r3, [pc, #160]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 8012692:	69db      	ldr	r3, [r3, #28]
 8012694:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012698:	429a      	cmp	r2, r3
 801269a:	d208      	bcs.n	80126ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801269c:	4b25      	ldr	r3, [pc, #148]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 801269e:	69db      	ldr	r3, [r3, #28]
 80126a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	699b      	ldr	r3, [r3, #24]
 80126a8:	4922      	ldr	r1, [pc, #136]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 80126aa:	4313      	orrs	r3, r2
 80126ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	f003 0320 	and.w	r3, r3, #32
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d010      	beq.n	80126dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	69da      	ldr	r2, [r3, #28]
 80126be:	4b1d      	ldr	r3, [pc, #116]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 80126c0:	6a1b      	ldr	r3, [r3, #32]
 80126c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d208      	bcs.n	80126dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80126ca:	4b1a      	ldr	r3, [pc, #104]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 80126cc:	6a1b      	ldr	r3, [r3, #32]
 80126ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	69db      	ldr	r3, [r3, #28]
 80126d6:	4917      	ldr	r1, [pc, #92]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 80126d8:	4313      	orrs	r3, r2
 80126da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80126dc:	f000 f89e 	bl	801281c <HAL_RCC_GetSysClockFreq>
 80126e0:	4602      	mov	r2, r0
 80126e2:	4b14      	ldr	r3, [pc, #80]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 80126e4:	699b      	ldr	r3, [r3, #24]
 80126e6:	0a1b      	lsrs	r3, r3, #8
 80126e8:	f003 030f 	and.w	r3, r3, #15
 80126ec:	4912      	ldr	r1, [pc, #72]	; (8012738 <HAL_RCC_ClockConfig+0x35c>)
 80126ee:	5ccb      	ldrb	r3, [r1, r3]
 80126f0:	f003 031f 	and.w	r3, r3, #31
 80126f4:	fa22 f303 	lsr.w	r3, r2, r3
 80126f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80126fa:	4b0e      	ldr	r3, [pc, #56]	; (8012734 <HAL_RCC_ClockConfig+0x358>)
 80126fc:	699b      	ldr	r3, [r3, #24]
 80126fe:	f003 030f 	and.w	r3, r3, #15
 8012702:	4a0d      	ldr	r2, [pc, #52]	; (8012738 <HAL_RCC_ClockConfig+0x35c>)
 8012704:	5cd3      	ldrb	r3, [r2, r3]
 8012706:	f003 031f 	and.w	r3, r3, #31
 801270a:	693a      	ldr	r2, [r7, #16]
 801270c:	fa22 f303 	lsr.w	r3, r2, r3
 8012710:	4a0a      	ldr	r2, [pc, #40]	; (801273c <HAL_RCC_ClockConfig+0x360>)
 8012712:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012714:	4a0a      	ldr	r2, [pc, #40]	; (8012740 <HAL_RCC_ClockConfig+0x364>)
 8012716:	693b      	ldr	r3, [r7, #16]
 8012718:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 801271a:	4b0a      	ldr	r3, [pc, #40]	; (8012744 <HAL_RCC_ClockConfig+0x368>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	4618      	mov	r0, r3
 8012720:	f7f0 fa0c 	bl	8002b3c <HAL_InitTick>
 8012724:	4603      	mov	r3, r0
 8012726:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8012728:	7bfb      	ldrb	r3, [r7, #15]
}
 801272a:	4618      	mov	r0, r3
 801272c:	3718      	adds	r7, #24
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	58024400 	.word	0x58024400
 8012738:	0802c2e4 	.word	0x0802c2e4
 801273c:	24000030 	.word	0x24000030
 8012740:	2400002c 	.word	0x2400002c
 8012744:	24000064 	.word	0x24000064

08012748 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b08c      	sub	sp, #48	; 0x30
 801274c:	af00      	add	r7, sp, #0
 801274e:	60f8      	str	r0, [r7, #12]
 8012750:	60b9      	str	r1, [r7, #8]
 8012752:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d12a      	bne.n	80127b0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 801275a:	4b2d      	ldr	r3, [pc, #180]	; (8012810 <HAL_RCC_MCOConfig+0xc8>)
 801275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012760:	4a2b      	ldr	r2, [pc, #172]	; (8012810 <HAL_RCC_MCOConfig+0xc8>)
 8012762:	f043 0301 	orr.w	r3, r3, #1
 8012766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801276a:	4b29      	ldr	r3, [pc, #164]	; (8012810 <HAL_RCC_MCOConfig+0xc8>)
 801276c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012770:	f003 0301 	and.w	r3, r3, #1
 8012774:	61bb      	str	r3, [r7, #24]
 8012776:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8012778:	f44f 7380 	mov.w	r3, #256	; 0x100
 801277c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801277e:	2302      	movs	r3, #2
 8012780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012782:	2303      	movs	r3, #3
 8012784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012786:	2300      	movs	r3, #0
 8012788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 801278a:	2300      	movs	r3, #0
 801278c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 801278e:	f107 031c 	add.w	r3, r7, #28
 8012792:	4619      	mov	r1, r3
 8012794:	481f      	ldr	r0, [pc, #124]	; (8012814 <HAL_RCC_MCOConfig+0xcc>)
 8012796:	f7fc fc61 	bl	800f05c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 801279a:	4b1d      	ldr	r3, [pc, #116]	; (8012810 <HAL_RCC_MCOConfig+0xc8>)
 801279c:	691b      	ldr	r3, [r3, #16]
 801279e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80127a2:	68b9      	ldr	r1, [r7, #8]
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	430b      	orrs	r3, r1
 80127a8:	4919      	ldr	r1, [pc, #100]	; (8012810 <HAL_RCC_MCOConfig+0xc8>)
 80127aa:	4313      	orrs	r3, r2
 80127ac:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80127ae:	e02a      	b.n	8012806 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80127b0:	4b17      	ldr	r3, [pc, #92]	; (8012810 <HAL_RCC_MCOConfig+0xc8>)
 80127b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80127b6:	4a16      	ldr	r2, [pc, #88]	; (8012810 <HAL_RCC_MCOConfig+0xc8>)
 80127b8:	f043 0304 	orr.w	r3, r3, #4
 80127bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80127c0:	4b13      	ldr	r3, [pc, #76]	; (8012810 <HAL_RCC_MCOConfig+0xc8>)
 80127c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80127c6:	f003 0304 	and.w	r3, r3, #4
 80127ca:	617b      	str	r3, [r7, #20]
 80127cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80127ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127d4:	2302      	movs	r3, #2
 80127d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80127d8:	2303      	movs	r3, #3
 80127da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127dc:	2300      	movs	r3, #0
 80127de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80127e0:	2300      	movs	r3, #0
 80127e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80127e4:	f107 031c 	add.w	r3, r7, #28
 80127e8:	4619      	mov	r1, r3
 80127ea:	480b      	ldr	r0, [pc, #44]	; (8012818 <HAL_RCC_MCOConfig+0xd0>)
 80127ec:	f7fc fc36 	bl	800f05c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80127f0:	4b07      	ldr	r3, [pc, #28]	; (8012810 <HAL_RCC_MCOConfig+0xc8>)
 80127f2:	691b      	ldr	r3, [r3, #16]
 80127f4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	01d9      	lsls	r1, r3, #7
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	430b      	orrs	r3, r1
 8012800:	4903      	ldr	r1, [pc, #12]	; (8012810 <HAL_RCC_MCOConfig+0xc8>)
 8012802:	4313      	orrs	r3, r2
 8012804:	610b      	str	r3, [r1, #16]
}
 8012806:	bf00      	nop
 8012808:	3730      	adds	r7, #48	; 0x30
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop
 8012810:	58024400 	.word	0x58024400
 8012814:	58020000 	.word	0x58020000
 8012818:	58020800 	.word	0x58020800

0801281c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801281c:	b480      	push	{r7}
 801281e:	b089      	sub	sp, #36	; 0x24
 8012820:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012822:	4bb3      	ldr	r3, [pc, #716]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012824:	691b      	ldr	r3, [r3, #16]
 8012826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801282a:	2b18      	cmp	r3, #24
 801282c:	f200 8155 	bhi.w	8012ada <HAL_RCC_GetSysClockFreq+0x2be>
 8012830:	a201      	add	r2, pc, #4	; (adr r2, 8012838 <HAL_RCC_GetSysClockFreq+0x1c>)
 8012832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012836:	bf00      	nop
 8012838:	0801289d 	.word	0x0801289d
 801283c:	08012adb 	.word	0x08012adb
 8012840:	08012adb 	.word	0x08012adb
 8012844:	08012adb 	.word	0x08012adb
 8012848:	08012adb 	.word	0x08012adb
 801284c:	08012adb 	.word	0x08012adb
 8012850:	08012adb 	.word	0x08012adb
 8012854:	08012adb 	.word	0x08012adb
 8012858:	080128c3 	.word	0x080128c3
 801285c:	08012adb 	.word	0x08012adb
 8012860:	08012adb 	.word	0x08012adb
 8012864:	08012adb 	.word	0x08012adb
 8012868:	08012adb 	.word	0x08012adb
 801286c:	08012adb 	.word	0x08012adb
 8012870:	08012adb 	.word	0x08012adb
 8012874:	08012adb 	.word	0x08012adb
 8012878:	080128c9 	.word	0x080128c9
 801287c:	08012adb 	.word	0x08012adb
 8012880:	08012adb 	.word	0x08012adb
 8012884:	08012adb 	.word	0x08012adb
 8012888:	08012adb 	.word	0x08012adb
 801288c:	08012adb 	.word	0x08012adb
 8012890:	08012adb 	.word	0x08012adb
 8012894:	08012adb 	.word	0x08012adb
 8012898:	080128cf 	.word	0x080128cf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801289c:	4b94      	ldr	r3, [pc, #592]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	f003 0320 	and.w	r3, r3, #32
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d009      	beq.n	80128bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80128a8:	4b91      	ldr	r3, [pc, #580]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	08db      	lsrs	r3, r3, #3
 80128ae:	f003 0303 	and.w	r3, r3, #3
 80128b2:	4a90      	ldr	r2, [pc, #576]	; (8012af4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80128b4:	fa22 f303 	lsr.w	r3, r2, r3
 80128b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80128ba:	e111      	b.n	8012ae0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80128bc:	4b8d      	ldr	r3, [pc, #564]	; (8012af4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80128be:	61bb      	str	r3, [r7, #24]
    break;
 80128c0:	e10e      	b.n	8012ae0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80128c2:	4b8d      	ldr	r3, [pc, #564]	; (8012af8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80128c4:	61bb      	str	r3, [r7, #24]
    break;
 80128c6:	e10b      	b.n	8012ae0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80128c8:	4b8c      	ldr	r3, [pc, #560]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80128ca:	61bb      	str	r3, [r7, #24]
    break;
 80128cc:	e108      	b.n	8012ae0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80128ce:	4b88      	ldr	r3, [pc, #544]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80128d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128d2:	f003 0303 	and.w	r3, r3, #3
 80128d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80128d8:	4b85      	ldr	r3, [pc, #532]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80128da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128dc:	091b      	lsrs	r3, r3, #4
 80128de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80128e4:	4b82      	ldr	r3, [pc, #520]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80128e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e8:	f003 0301 	and.w	r3, r3, #1
 80128ec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80128ee:	4b80      	ldr	r3, [pc, #512]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80128f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128f2:	08db      	lsrs	r3, r3, #3
 80128f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80128f8:	68fa      	ldr	r2, [r7, #12]
 80128fa:	fb02 f303 	mul.w	r3, r2, r3
 80128fe:	ee07 3a90 	vmov	s15, r3
 8012902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012906:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 801290a:	693b      	ldr	r3, [r7, #16]
 801290c:	2b00      	cmp	r3, #0
 801290e:	f000 80e1 	beq.w	8012ad4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	2b02      	cmp	r3, #2
 8012916:	f000 8083 	beq.w	8012a20 <HAL_RCC_GetSysClockFreq+0x204>
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	2b02      	cmp	r3, #2
 801291e:	f200 80a1 	bhi.w	8012a64 <HAL_RCC_GetSysClockFreq+0x248>
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d003      	beq.n	8012930 <HAL_RCC_GetSysClockFreq+0x114>
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	2b01      	cmp	r3, #1
 801292c:	d056      	beq.n	80129dc <HAL_RCC_GetSysClockFreq+0x1c0>
 801292e:	e099      	b.n	8012a64 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012930:	4b6f      	ldr	r3, [pc, #444]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	f003 0320 	and.w	r3, r3, #32
 8012938:	2b00      	cmp	r3, #0
 801293a:	d02d      	beq.n	8012998 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801293c:	4b6c      	ldr	r3, [pc, #432]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	08db      	lsrs	r3, r3, #3
 8012942:	f003 0303 	and.w	r3, r3, #3
 8012946:	4a6b      	ldr	r2, [pc, #428]	; (8012af4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012948:	fa22 f303 	lsr.w	r3, r2, r3
 801294c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	ee07 3a90 	vmov	s15, r3
 8012954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	ee07 3a90 	vmov	s15, r3
 801295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012966:	4b62      	ldr	r3, [pc, #392]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801296a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801296e:	ee07 3a90 	vmov	s15, r3
 8012972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012976:	ed97 6a02 	vldr	s12, [r7, #8]
 801297a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8012b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 801297e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801298a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801298e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012992:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8012996:	e087      	b.n	8012aa8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	ee07 3a90 	vmov	s15, r3
 801299e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8012b04 <HAL_RCC_GetSysClockFreq+0x2e8>
 80129a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80129aa:	4b51      	ldr	r3, [pc, #324]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80129ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129b2:	ee07 3a90 	vmov	s15, r3
 80129b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80129ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80129be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8012b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 80129c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80129c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80129ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80129ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80129da:	e065      	b.n	8012aa8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	ee07 3a90 	vmov	s15, r3
 80129e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8012b08 <HAL_RCC_GetSysClockFreq+0x2ec>
 80129ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80129ee:	4b40      	ldr	r3, [pc, #256]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80129f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129f6:	ee07 3a90 	vmov	s15, r3
 80129fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80129fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8012a02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8012b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012a1e:	e043      	b.n	8012aa8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012a20:	693b      	ldr	r3, [r7, #16]
 8012a22:	ee07 3a90 	vmov	s15, r3
 8012a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8012b0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8012a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a32:	4b2f      	ldr	r3, [pc, #188]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a3a:	ee07 3a90 	vmov	s15, r3
 8012a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8012a46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8012b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012a62:	e021      	b.n	8012aa8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012a64:	693b      	ldr	r3, [r7, #16]
 8012a66:	ee07 3a90 	vmov	s15, r3
 8012a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8012b08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8012a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a76:	4b1e      	ldr	r3, [pc, #120]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a7e:	ee07 3a90 	vmov	s15, r3
 8012a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8012a8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8012b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012aa6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8012aa8:	4b11      	ldr	r3, [pc, #68]	; (8012af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aac:	0a5b      	lsrs	r3, r3, #9
 8012aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ab2:	3301      	adds	r3, #1
 8012ab4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	ee07 3a90 	vmov	s15, r3
 8012abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012ac0:	edd7 6a07 	vldr	s13, [r7, #28]
 8012ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012acc:	ee17 3a90 	vmov	r3, s15
 8012ad0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8012ad2:	e005      	b.n	8012ae0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	61bb      	str	r3, [r7, #24]
    break;
 8012ad8:	e002      	b.n	8012ae0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8012ada:	4b07      	ldr	r3, [pc, #28]	; (8012af8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012adc:	61bb      	str	r3, [r7, #24]
    break;
 8012ade:	bf00      	nop
  }

  return sysclockfreq;
 8012ae0:	69bb      	ldr	r3, [r7, #24]
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3724      	adds	r7, #36	; 0x24
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop
 8012af0:	58024400 	.word	0x58024400
 8012af4:	03d09000 	.word	0x03d09000
 8012af8:	003d0900 	.word	0x003d0900
 8012afc:	017d7840 	.word	0x017d7840
 8012b00:	46000000 	.word	0x46000000
 8012b04:	4c742400 	.word	0x4c742400
 8012b08:	4a742400 	.word	0x4a742400
 8012b0c:	4bbebc20 	.word	0x4bbebc20

08012b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012b16:	f7ff fe81 	bl	801281c <HAL_RCC_GetSysClockFreq>
 8012b1a:	4602      	mov	r2, r0
 8012b1c:	4b10      	ldr	r3, [pc, #64]	; (8012b60 <HAL_RCC_GetHCLKFreq+0x50>)
 8012b1e:	699b      	ldr	r3, [r3, #24]
 8012b20:	0a1b      	lsrs	r3, r3, #8
 8012b22:	f003 030f 	and.w	r3, r3, #15
 8012b26:	490f      	ldr	r1, [pc, #60]	; (8012b64 <HAL_RCC_GetHCLKFreq+0x54>)
 8012b28:	5ccb      	ldrb	r3, [r1, r3]
 8012b2a:	f003 031f 	and.w	r3, r3, #31
 8012b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8012b32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012b34:	4b0a      	ldr	r3, [pc, #40]	; (8012b60 <HAL_RCC_GetHCLKFreq+0x50>)
 8012b36:	699b      	ldr	r3, [r3, #24]
 8012b38:	f003 030f 	and.w	r3, r3, #15
 8012b3c:	4a09      	ldr	r2, [pc, #36]	; (8012b64 <HAL_RCC_GetHCLKFreq+0x54>)
 8012b3e:	5cd3      	ldrb	r3, [r2, r3]
 8012b40:	f003 031f 	and.w	r3, r3, #31
 8012b44:	687a      	ldr	r2, [r7, #4]
 8012b46:	fa22 f303 	lsr.w	r3, r2, r3
 8012b4a:	4a07      	ldr	r2, [pc, #28]	; (8012b68 <HAL_RCC_GetHCLKFreq+0x58>)
 8012b4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012b4e:	4a07      	ldr	r2, [pc, #28]	; (8012b6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012b54:	4b04      	ldr	r3, [pc, #16]	; (8012b68 <HAL_RCC_GetHCLKFreq+0x58>)
 8012b56:	681b      	ldr	r3, [r3, #0]
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3708      	adds	r7, #8
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}
 8012b60:	58024400 	.word	0x58024400
 8012b64:	0802c2e4 	.word	0x0802c2e4
 8012b68:	24000030 	.word	0x24000030
 8012b6c:	2400002c 	.word	0x2400002c

08012b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8012b74:	f7ff ffcc 	bl	8012b10 <HAL_RCC_GetHCLKFreq>
 8012b78:	4602      	mov	r2, r0
 8012b7a:	4b06      	ldr	r3, [pc, #24]	; (8012b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012b7c:	69db      	ldr	r3, [r3, #28]
 8012b7e:	091b      	lsrs	r3, r3, #4
 8012b80:	f003 0307 	and.w	r3, r3, #7
 8012b84:	4904      	ldr	r1, [pc, #16]	; (8012b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012b86:	5ccb      	ldrb	r3, [r1, r3]
 8012b88:	f003 031f 	and.w	r3, r3, #31
 8012b8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	bd80      	pop	{r7, pc}
 8012b94:	58024400 	.word	0x58024400
 8012b98:	0802c2e4 	.word	0x0802c2e4

08012b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8012ba0:	f7ff ffb6 	bl	8012b10 <HAL_RCC_GetHCLKFreq>
 8012ba4:	4602      	mov	r2, r0
 8012ba6:	4b06      	ldr	r3, [pc, #24]	; (8012bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012ba8:	69db      	ldr	r3, [r3, #28]
 8012baa:	0a1b      	lsrs	r3, r3, #8
 8012bac:	f003 0307 	and.w	r3, r3, #7
 8012bb0:	4904      	ldr	r1, [pc, #16]	; (8012bc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012bb2:	5ccb      	ldrb	r3, [r1, r3]
 8012bb4:	f003 031f 	and.w	r3, r3, #31
 8012bb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	bd80      	pop	{r7, pc}
 8012bc0:	58024400 	.word	0x58024400
 8012bc4:	0802c2e4 	.word	0x0802c2e4

08012bc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012bc8:	b480      	push	{r7}
 8012bca:	b083      	sub	sp, #12
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	223f      	movs	r2, #63	; 0x3f
 8012bd6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012bd8:	4b1a      	ldr	r3, [pc, #104]	; (8012c44 <HAL_RCC_GetClockConfig+0x7c>)
 8012bda:	691b      	ldr	r3, [r3, #16]
 8012bdc:	f003 0207 	and.w	r2, r3, #7
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8012be4:	4b17      	ldr	r3, [pc, #92]	; (8012c44 <HAL_RCC_GetClockConfig+0x7c>)
 8012be6:	699b      	ldr	r3, [r3, #24]
 8012be8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8012bf0:	4b14      	ldr	r3, [pc, #80]	; (8012c44 <HAL_RCC_GetClockConfig+0x7c>)
 8012bf2:	699b      	ldr	r3, [r3, #24]
 8012bf4:	f003 020f 	and.w	r2, r3, #15
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8012bfc:	4b11      	ldr	r3, [pc, #68]	; (8012c44 <HAL_RCC_GetClockConfig+0x7c>)
 8012bfe:	699b      	ldr	r3, [r3, #24]
 8012c00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8012c08:	4b0e      	ldr	r3, [pc, #56]	; (8012c44 <HAL_RCC_GetClockConfig+0x7c>)
 8012c0a:	69db      	ldr	r3, [r3, #28]
 8012c0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8012c14:	4b0b      	ldr	r3, [pc, #44]	; (8012c44 <HAL_RCC_GetClockConfig+0x7c>)
 8012c16:	69db      	ldr	r3, [r3, #28]
 8012c18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8012c20:	4b08      	ldr	r3, [pc, #32]	; (8012c44 <HAL_RCC_GetClockConfig+0x7c>)
 8012c22:	6a1b      	ldr	r3, [r3, #32]
 8012c24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012c2c:	4b06      	ldr	r3, [pc, #24]	; (8012c48 <HAL_RCC_GetClockConfig+0x80>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	f003 020f 	and.w	r2, r3, #15
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	601a      	str	r2, [r3, #0]
}
 8012c38:	bf00      	nop
 8012c3a:	370c      	adds	r7, #12
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c42:	4770      	bx	lr
 8012c44:	58024400 	.word	0x58024400
 8012c48:	52002000 	.word	0x52002000

08012c4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b086      	sub	sp, #24
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012c54:	2300      	movs	r3, #0
 8012c56:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8012c58:	2300      	movs	r3, #0
 8012c5a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d03f      	beq.n	8012ce8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012c70:	d02a      	beq.n	8012cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8012c72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012c76:	d824      	bhi.n	8012cc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012c78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012c7c:	d018      	beq.n	8012cb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012c82:	d81e      	bhi.n	8012cc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d003      	beq.n	8012c90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8012c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012c8c:	d007      	beq.n	8012c9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8012c8e:	e018      	b.n	8012cc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012c90:	4bab      	ldr	r3, [pc, #684]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c94:	4aaa      	ldr	r2, [pc, #680]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012c9c:	e015      	b.n	8012cca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	3304      	adds	r3, #4
 8012ca2:	2102      	movs	r1, #2
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f001 f9cf 	bl	8014048 <RCCEx_PLL2_Config>
 8012caa:	4603      	mov	r3, r0
 8012cac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012cae:	e00c      	b.n	8012cca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	3324      	adds	r3, #36	; 0x24
 8012cb4:	2102      	movs	r1, #2
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f001 fa78 	bl	80141ac <RCCEx_PLL3_Config>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012cc0:	e003      	b.n	8012cca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012cc2:	2301      	movs	r3, #1
 8012cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8012cc6:	e000      	b.n	8012cca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8012cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012cca:	7dfb      	ldrb	r3, [r7, #23]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d109      	bne.n	8012ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012cd0:	4b9b      	ldr	r3, [pc, #620]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012cdc:	4998      	ldr	r1, [pc, #608]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012cde:	4313      	orrs	r3, r2
 8012ce0:	650b      	str	r3, [r1, #80]	; 0x50
 8012ce2:	e001      	b.n	8012ce8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ce4:	7dfb      	ldrb	r3, [r7, #23]
 8012ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d03d      	beq.n	8012d70 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cf8:	2b04      	cmp	r3, #4
 8012cfa:	d826      	bhi.n	8012d4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8012cfc:	a201      	add	r2, pc, #4	; (adr r2, 8012d04 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8012cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d02:	bf00      	nop
 8012d04:	08012d19 	.word	0x08012d19
 8012d08:	08012d27 	.word	0x08012d27
 8012d0c:	08012d39 	.word	0x08012d39
 8012d10:	08012d51 	.word	0x08012d51
 8012d14:	08012d51 	.word	0x08012d51
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012d18:	4b89      	ldr	r3, [pc, #548]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d1c:	4a88      	ldr	r2, [pc, #544]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012d22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012d24:	e015      	b.n	8012d52 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	3304      	adds	r3, #4
 8012d2a:	2100      	movs	r1, #0
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f001 f98b 	bl	8014048 <RCCEx_PLL2_Config>
 8012d32:	4603      	mov	r3, r0
 8012d34:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012d36:	e00c      	b.n	8012d52 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	3324      	adds	r3, #36	; 0x24
 8012d3c:	2100      	movs	r1, #0
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f001 fa34 	bl	80141ac <RCCEx_PLL3_Config>
 8012d44:	4603      	mov	r3, r0
 8012d46:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012d48:	e003      	b.n	8012d52 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8012d4e:	e000      	b.n	8012d52 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8012d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012d52:	7dfb      	ldrb	r3, [r7, #23]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d109      	bne.n	8012d6c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012d58:	4b79      	ldr	r3, [pc, #484]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d5c:	f023 0207 	bic.w	r2, r3, #7
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d64:	4976      	ldr	r1, [pc, #472]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012d66:	4313      	orrs	r3, r2
 8012d68:	650b      	str	r3, [r1, #80]	; 0x50
 8012d6a:	e001      	b.n	8012d70 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d6c:	7dfb      	ldrb	r3, [r7, #23]
 8012d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d042      	beq.n	8012e02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d84:	d02b      	beq.n	8012dde <HAL_RCCEx_PeriphCLKConfig+0x192>
 8012d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d8a:	d825      	bhi.n	8012dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012d8c:	2bc0      	cmp	r3, #192	; 0xc0
 8012d8e:	d028      	beq.n	8012de2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8012d90:	2bc0      	cmp	r3, #192	; 0xc0
 8012d92:	d821      	bhi.n	8012dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012d94:	2b80      	cmp	r3, #128	; 0x80
 8012d96:	d016      	beq.n	8012dc6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8012d98:	2b80      	cmp	r3, #128	; 0x80
 8012d9a:	d81d      	bhi.n	8012dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d002      	beq.n	8012da6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8012da0:	2b40      	cmp	r3, #64	; 0x40
 8012da2:	d007      	beq.n	8012db4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8012da4:	e018      	b.n	8012dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012da6:	4b66      	ldr	r3, [pc, #408]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012daa:	4a65      	ldr	r2, [pc, #404]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012db0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012db2:	e017      	b.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	3304      	adds	r3, #4
 8012db8:	2100      	movs	r1, #0
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f001 f944 	bl	8014048 <RCCEx_PLL2_Config>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012dc4:	e00e      	b.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	3324      	adds	r3, #36	; 0x24
 8012dca:	2100      	movs	r1, #0
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f001 f9ed 	bl	80141ac <RCCEx_PLL3_Config>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012dd6:	e005      	b.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012dd8:	2301      	movs	r3, #1
 8012dda:	75fb      	strb	r3, [r7, #23]
      break;
 8012ddc:	e002      	b.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8012dde:	bf00      	nop
 8012de0:	e000      	b.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8012de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012de4:	7dfb      	ldrb	r3, [r7, #23]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d109      	bne.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8012dea:	4b55      	ldr	r3, [pc, #340]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012df6:	4952      	ldr	r1, [pc, #328]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012df8:	4313      	orrs	r3, r2
 8012dfa:	650b      	str	r3, [r1, #80]	; 0x50
 8012dfc:	e001      	b.n	8012e02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012dfe:	7dfb      	ldrb	r3, [r7, #23]
 8012e00:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d049      	beq.n	8012ea2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012e14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012e18:	d030      	beq.n	8012e7c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8012e1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012e1e:	d82a      	bhi.n	8012e76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012e20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012e24:	d02c      	beq.n	8012e80 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8012e26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012e2a:	d824      	bhi.n	8012e76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012e30:	d018      	beq.n	8012e64 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8012e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012e36:	d81e      	bhi.n	8012e76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d003      	beq.n	8012e44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8012e3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012e40:	d007      	beq.n	8012e52 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8012e42:	e018      	b.n	8012e76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012e44:	4b3e      	ldr	r3, [pc, #248]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e48:	4a3d      	ldr	r2, [pc, #244]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012e50:	e017      	b.n	8012e82 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	3304      	adds	r3, #4
 8012e56:	2100      	movs	r1, #0
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f001 f8f5 	bl	8014048 <RCCEx_PLL2_Config>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8012e62:	e00e      	b.n	8012e82 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	3324      	adds	r3, #36	; 0x24
 8012e68:	2100      	movs	r1, #0
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f001 f99e 	bl	80141ac <RCCEx_PLL3_Config>
 8012e70:	4603      	mov	r3, r0
 8012e72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012e74:	e005      	b.n	8012e82 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8012e76:	2301      	movs	r3, #1
 8012e78:	75fb      	strb	r3, [r7, #23]
      break;
 8012e7a:	e002      	b.n	8012e82 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8012e7c:	bf00      	nop
 8012e7e:	e000      	b.n	8012e82 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8012e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012e82:	7dfb      	ldrb	r3, [r7, #23]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d10a      	bne.n	8012e9e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8012e88:	4b2d      	ldr	r3, [pc, #180]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e8c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012e96:	492a      	ldr	r1, [pc, #168]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012e98:	4313      	orrs	r3, r2
 8012e9a:	658b      	str	r3, [r1, #88]	; 0x58
 8012e9c:	e001      	b.n	8012ea2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e9e:	7dfb      	ldrb	r3, [r7, #23]
 8012ea0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d04c      	beq.n	8012f48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012eb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012eb8:	d030      	beq.n	8012f1c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8012eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012ebe:	d82a      	bhi.n	8012f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8012ec0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8012ec4:	d02c      	beq.n	8012f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8012ec6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8012eca:	d824      	bhi.n	8012f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8012ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012ed0:	d018      	beq.n	8012f04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8012ed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012ed6:	d81e      	bhi.n	8012f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d003      	beq.n	8012ee4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8012edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012ee0:	d007      	beq.n	8012ef2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8012ee2:	e018      	b.n	8012f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012ee4:	4b16      	ldr	r3, [pc, #88]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ee8:	4a15      	ldr	r2, [pc, #84]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012ef0:	e017      	b.n	8012f22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	3304      	adds	r3, #4
 8012ef6:	2100      	movs	r1, #0
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f001 f8a5 	bl	8014048 <RCCEx_PLL2_Config>
 8012efe:	4603      	mov	r3, r0
 8012f00:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8012f02:	e00e      	b.n	8012f22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	3324      	adds	r3, #36	; 0x24
 8012f08:	2100      	movs	r1, #0
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f001 f94e 	bl	80141ac <RCCEx_PLL3_Config>
 8012f10:	4603      	mov	r3, r0
 8012f12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012f14:	e005      	b.n	8012f22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8012f16:	2301      	movs	r3, #1
 8012f18:	75fb      	strb	r3, [r7, #23]
      break;
 8012f1a:	e002      	b.n	8012f22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8012f1c:	bf00      	nop
 8012f1e:	e000      	b.n	8012f22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8012f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012f22:	7dfb      	ldrb	r3, [r7, #23]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d10d      	bne.n	8012f44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8012f28:	4b05      	ldr	r3, [pc, #20]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f2c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012f36:	4902      	ldr	r1, [pc, #8]	; (8012f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8012f38:	4313      	orrs	r3, r2
 8012f3a:	658b      	str	r3, [r1, #88]	; 0x58
 8012f3c:	e004      	b.n	8012f48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8012f3e:	bf00      	nop
 8012f40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f44:	7dfb      	ldrb	r3, [r7, #23]
 8012f46:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d032      	beq.n	8012fba <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f58:	2b30      	cmp	r3, #48	; 0x30
 8012f5a:	d01c      	beq.n	8012f96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8012f5c:	2b30      	cmp	r3, #48	; 0x30
 8012f5e:	d817      	bhi.n	8012f90 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8012f60:	2b20      	cmp	r3, #32
 8012f62:	d00c      	beq.n	8012f7e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8012f64:	2b20      	cmp	r3, #32
 8012f66:	d813      	bhi.n	8012f90 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d016      	beq.n	8012f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8012f6c:	2b10      	cmp	r3, #16
 8012f6e:	d10f      	bne.n	8012f90 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012f70:	4baf      	ldr	r3, [pc, #700]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8012f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f74:	4aae      	ldr	r2, [pc, #696]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8012f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8012f7c:	e00e      	b.n	8012f9c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	3304      	adds	r3, #4
 8012f82:	2102      	movs	r1, #2
 8012f84:	4618      	mov	r0, r3
 8012f86:	f001 f85f 	bl	8014048 <RCCEx_PLL2_Config>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8012f8e:	e005      	b.n	8012f9c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8012f90:	2301      	movs	r3, #1
 8012f92:	75fb      	strb	r3, [r7, #23]
      break;
 8012f94:	e002      	b.n	8012f9c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8012f96:	bf00      	nop
 8012f98:	e000      	b.n	8012f9c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8012f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012f9c:	7dfb      	ldrb	r3, [r7, #23]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d109      	bne.n	8012fb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8012fa2:	4ba3      	ldr	r3, [pc, #652]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8012fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fa6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012fae:	49a0      	ldr	r1, [pc, #640]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8012fb0:	4313      	orrs	r3, r2
 8012fb2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8012fb4:	e001      	b.n	8012fba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012fb6:	7dfb      	ldrb	r3, [r7, #23]
 8012fb8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d047      	beq.n	8013056 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012fce:	d030      	beq.n	8013032 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8012fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012fd4:	d82a      	bhi.n	801302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8012fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012fda:	d02c      	beq.n	8013036 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8012fdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012fe0:	d824      	bhi.n	801302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8012fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012fe6:	d018      	beq.n	801301a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8012fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012fec:	d81e      	bhi.n	801302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d003      	beq.n	8012ffa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8012ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ff6:	d007      	beq.n	8013008 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8012ff8:	e018      	b.n	801302c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012ffa:	4b8d      	ldr	r3, [pc, #564]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8012ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ffe:	4a8c      	ldr	r2, [pc, #560]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8013000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013004:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8013006:	e017      	b.n	8013038 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	3304      	adds	r3, #4
 801300c:	2100      	movs	r1, #0
 801300e:	4618      	mov	r0, r3
 8013010:	f001 f81a 	bl	8014048 <RCCEx_PLL2_Config>
 8013014:	4603      	mov	r3, r0
 8013016:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8013018:	e00e      	b.n	8013038 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	3324      	adds	r3, #36	; 0x24
 801301e:	2100      	movs	r1, #0
 8013020:	4618      	mov	r0, r3
 8013022:	f001 f8c3 	bl	80141ac <RCCEx_PLL3_Config>
 8013026:	4603      	mov	r3, r0
 8013028:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801302a:	e005      	b.n	8013038 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801302c:	2301      	movs	r3, #1
 801302e:	75fb      	strb	r3, [r7, #23]
      break;
 8013030:	e002      	b.n	8013038 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8013032:	bf00      	nop
 8013034:	e000      	b.n	8013038 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8013036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013038:	7dfb      	ldrb	r3, [r7, #23]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d109      	bne.n	8013052 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801303e:	4b7c      	ldr	r3, [pc, #496]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8013040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013042:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801304a:	4979      	ldr	r1, [pc, #484]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801304c:	4313      	orrs	r3, r2
 801304e:	650b      	str	r3, [r1, #80]	; 0x50
 8013050:	e001      	b.n	8013056 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013052:	7dfb      	ldrb	r3, [r7, #23]
 8013054:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801305e:	2b00      	cmp	r3, #0
 8013060:	d049      	beq.n	80130f6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013066:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801306a:	d02e      	beq.n	80130ca <HAL_RCCEx_PeriphCLKConfig+0x47e>
 801306c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013070:	d828      	bhi.n	80130c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8013072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013076:	d02a      	beq.n	80130ce <HAL_RCCEx_PeriphCLKConfig+0x482>
 8013078:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801307c:	d822      	bhi.n	80130c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 801307e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013082:	d026      	beq.n	80130d2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8013084:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013088:	d81c      	bhi.n	80130c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 801308a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801308e:	d010      	beq.n	80130b2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8013090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013094:	d816      	bhi.n	80130c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8013096:	2b00      	cmp	r3, #0
 8013098:	d01d      	beq.n	80130d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 801309a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801309e:	d111      	bne.n	80130c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	3304      	adds	r3, #4
 80130a4:	2101      	movs	r1, #1
 80130a6:	4618      	mov	r0, r3
 80130a8:	f000 ffce 	bl	8014048 <RCCEx_PLL2_Config>
 80130ac:	4603      	mov	r3, r0
 80130ae:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80130b0:	e012      	b.n	80130d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	3324      	adds	r3, #36	; 0x24
 80130b6:	2101      	movs	r1, #1
 80130b8:	4618      	mov	r0, r3
 80130ba:	f001 f877 	bl	80141ac <RCCEx_PLL3_Config>
 80130be:	4603      	mov	r3, r0
 80130c0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80130c2:	e009      	b.n	80130d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80130c4:	2301      	movs	r3, #1
 80130c6:	75fb      	strb	r3, [r7, #23]
      break;
 80130c8:	e006      	b.n	80130d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80130ca:	bf00      	nop
 80130cc:	e004      	b.n	80130d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80130ce:	bf00      	nop
 80130d0:	e002      	b.n	80130d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80130d2:	bf00      	nop
 80130d4:	e000      	b.n	80130d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80130d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80130d8:	7dfb      	ldrb	r3, [r7, #23]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d109      	bne.n	80130f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80130de:	4b54      	ldr	r3, [pc, #336]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80130e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80130ea:	4951      	ldr	r1, [pc, #324]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80130ec:	4313      	orrs	r3, r2
 80130ee:	650b      	str	r3, [r1, #80]	; 0x50
 80130f0:	e001      	b.n	80130f6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130f2:	7dfb      	ldrb	r3, [r7, #23]
 80130f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d04b      	beq.n	801319a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801310c:	d02e      	beq.n	801316c <HAL_RCCEx_PeriphCLKConfig+0x520>
 801310e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013112:	d828      	bhi.n	8013166 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8013114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013118:	d02a      	beq.n	8013170 <HAL_RCCEx_PeriphCLKConfig+0x524>
 801311a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801311e:	d822      	bhi.n	8013166 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8013120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013124:	d026      	beq.n	8013174 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8013126:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801312a:	d81c      	bhi.n	8013166 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 801312c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013130:	d010      	beq.n	8013154 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8013132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013136:	d816      	bhi.n	8013166 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8013138:	2b00      	cmp	r3, #0
 801313a:	d01d      	beq.n	8013178 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 801313c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013140:	d111      	bne.n	8013166 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	3304      	adds	r3, #4
 8013146:	2101      	movs	r1, #1
 8013148:	4618      	mov	r0, r3
 801314a:	f000 ff7d 	bl	8014048 <RCCEx_PLL2_Config>
 801314e:	4603      	mov	r3, r0
 8013150:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8013152:	e012      	b.n	801317a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	3324      	adds	r3, #36	; 0x24
 8013158:	2101      	movs	r1, #1
 801315a:	4618      	mov	r0, r3
 801315c:	f001 f826 	bl	80141ac <RCCEx_PLL3_Config>
 8013160:	4603      	mov	r3, r0
 8013162:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8013164:	e009      	b.n	801317a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8013166:	2301      	movs	r3, #1
 8013168:	75fb      	strb	r3, [r7, #23]
      break;
 801316a:	e006      	b.n	801317a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 801316c:	bf00      	nop
 801316e:	e004      	b.n	801317a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8013170:	bf00      	nop
 8013172:	e002      	b.n	801317a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8013174:	bf00      	nop
 8013176:	e000      	b.n	801317a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8013178:	bf00      	nop
    }

    if(ret == HAL_OK)
 801317a:	7dfb      	ldrb	r3, [r7, #23]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d10a      	bne.n	8013196 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8013180:	4b2b      	ldr	r3, [pc, #172]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8013182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013184:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801318e:	4928      	ldr	r1, [pc, #160]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8013190:	4313      	orrs	r3, r2
 8013192:	658b      	str	r3, [r1, #88]	; 0x58
 8013194:	e001      	b.n	801319a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013196:	7dfb      	ldrb	r3, [r7, #23]
 8013198:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d02f      	beq.n	8013206 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80131ae:	d00e      	beq.n	80131ce <HAL_RCCEx_PeriphCLKConfig+0x582>
 80131b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80131b4:	d814      	bhi.n	80131e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d015      	beq.n	80131e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80131ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80131be:	d10f      	bne.n	80131e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80131c0:	4b1b      	ldr	r3, [pc, #108]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80131c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131c4:	4a1a      	ldr	r2, [pc, #104]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80131c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80131ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80131cc:	e00c      	b.n	80131e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	3304      	adds	r3, #4
 80131d2:	2101      	movs	r1, #1
 80131d4:	4618      	mov	r0, r3
 80131d6:	f000 ff37 	bl	8014048 <RCCEx_PLL2_Config>
 80131da:	4603      	mov	r3, r0
 80131dc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80131de:	e003      	b.n	80131e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80131e0:	2301      	movs	r3, #1
 80131e2:	75fb      	strb	r3, [r7, #23]
      break;
 80131e4:	e000      	b.n	80131e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80131e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80131e8:	7dfb      	ldrb	r3, [r7, #23]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d109      	bne.n	8013202 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80131ee:	4b10      	ldr	r3, [pc, #64]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80131f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131fa:	490d      	ldr	r1, [pc, #52]	; (8013230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80131fc:	4313      	orrs	r3, r2
 80131fe:	650b      	str	r3, [r1, #80]	; 0x50
 8013200:	e001      	b.n	8013206 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013202:	7dfb      	ldrb	r3, [r7, #23]
 8013204:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801320e:	2b00      	cmp	r3, #0
 8013210:	d033      	beq.n	801327a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013216:	2b03      	cmp	r3, #3
 8013218:	d81c      	bhi.n	8013254 <HAL_RCCEx_PeriphCLKConfig+0x608>
 801321a:	a201      	add	r2, pc, #4	; (adr r2, 8013220 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 801321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013220:	0801325b 	.word	0x0801325b
 8013224:	08013235 	.word	0x08013235
 8013228:	08013243 	.word	0x08013243
 801322c:	0801325b 	.word	0x0801325b
 8013230:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013234:	4bb8      	ldr	r3, [pc, #736]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8013236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013238:	4ab7      	ldr	r2, [pc, #732]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801323a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801323e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8013240:	e00c      	b.n	801325c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	3304      	adds	r3, #4
 8013246:	2102      	movs	r1, #2
 8013248:	4618      	mov	r0, r3
 801324a:	f000 fefd 	bl	8014048 <RCCEx_PLL2_Config>
 801324e:	4603      	mov	r3, r0
 8013250:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8013252:	e003      	b.n	801325c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8013254:	2301      	movs	r3, #1
 8013256:	75fb      	strb	r3, [r7, #23]
      break;
 8013258:	e000      	b.n	801325c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 801325a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801325c:	7dfb      	ldrb	r3, [r7, #23]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d109      	bne.n	8013276 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8013262:	4bad      	ldr	r3, [pc, #692]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8013264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013266:	f023 0203 	bic.w	r2, r3, #3
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801326e:	49aa      	ldr	r1, [pc, #680]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8013270:	4313      	orrs	r3, r2
 8013272:	64cb      	str	r3, [r1, #76]	; 0x4c
 8013274:	e001      	b.n	801327a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013276:	7dfb      	ldrb	r3, [r7, #23]
 8013278:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013282:	2b00      	cmp	r3, #0
 8013284:	f000 8086 	beq.w	8013394 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013288:	4ba4      	ldr	r3, [pc, #656]	; (801351c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	4aa3      	ldr	r2, [pc, #652]	; (801351c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 801328e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013292:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013294:	f7fb faba 	bl	800e80c <HAL_GetTick>
 8013298:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801329a:	e009      	b.n	80132b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801329c:	f7fb fab6 	bl	800e80c <HAL_GetTick>
 80132a0:	4602      	mov	r2, r0
 80132a2:	693b      	ldr	r3, [r7, #16]
 80132a4:	1ad3      	subs	r3, r2, r3
 80132a6:	2b64      	cmp	r3, #100	; 0x64
 80132a8:	d902      	bls.n	80132b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80132aa:	2303      	movs	r3, #3
 80132ac:	75fb      	strb	r3, [r7, #23]
        break;
 80132ae:	e005      	b.n	80132bc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80132b0:	4b9a      	ldr	r3, [pc, #616]	; (801351c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d0ef      	beq.n	801329c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80132bc:	7dfb      	ldrb	r3, [r7, #23]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d166      	bne.n	8013390 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80132c2:	4b95      	ldr	r3, [pc, #596]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80132c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80132cc:	4053      	eors	r3, r2
 80132ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d013      	beq.n	80132fe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80132d6:	4b90      	ldr	r3, [pc, #576]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80132d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80132de:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80132e0:	4b8d      	ldr	r3, [pc, #564]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80132e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132e4:	4a8c      	ldr	r2, [pc, #560]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80132e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80132ea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80132ec:	4b8a      	ldr	r3, [pc, #552]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80132ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132f0:	4a89      	ldr	r2, [pc, #548]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80132f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80132f6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80132f8:	4a87      	ldr	r2, [pc, #540]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013308:	d115      	bne.n	8013336 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801330a:	f7fb fa7f 	bl	800e80c <HAL_GetTick>
 801330e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013310:	e00b      	b.n	801332a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013312:	f7fb fa7b 	bl	800e80c <HAL_GetTick>
 8013316:	4602      	mov	r2, r0
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	1ad3      	subs	r3, r2, r3
 801331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013320:	4293      	cmp	r3, r2
 8013322:	d902      	bls.n	801332a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8013324:	2303      	movs	r3, #3
 8013326:	75fb      	strb	r3, [r7, #23]
            break;
 8013328:	e005      	b.n	8013336 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801332a:	4b7b      	ldr	r3, [pc, #492]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801332e:	f003 0302 	and.w	r3, r3, #2
 8013332:	2b00      	cmp	r3, #0
 8013334:	d0ed      	beq.n	8013312 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8013336:	7dfb      	ldrb	r3, [r7, #23]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d126      	bne.n	801338a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801334a:	d10d      	bne.n	8013368 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 801334c:	4b72      	ldr	r3, [pc, #456]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801334e:	691b      	ldr	r3, [r3, #16]
 8013350:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801335a:	0919      	lsrs	r1, r3, #4
 801335c:	4b70      	ldr	r3, [pc, #448]	; (8013520 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 801335e:	400b      	ands	r3, r1
 8013360:	496d      	ldr	r1, [pc, #436]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8013362:	4313      	orrs	r3, r2
 8013364:	610b      	str	r3, [r1, #16]
 8013366:	e005      	b.n	8013374 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8013368:	4b6b      	ldr	r3, [pc, #428]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801336a:	691b      	ldr	r3, [r3, #16]
 801336c:	4a6a      	ldr	r2, [pc, #424]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801336e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013372:	6113      	str	r3, [r2, #16]
 8013374:	4b68      	ldr	r3, [pc, #416]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8013376:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801337e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013382:	4965      	ldr	r1, [pc, #404]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8013384:	4313      	orrs	r3, r2
 8013386:	670b      	str	r3, [r1, #112]	; 0x70
 8013388:	e004      	b.n	8013394 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801338a:	7dfb      	ldrb	r3, [r7, #23]
 801338c:	75bb      	strb	r3, [r7, #22]
 801338e:	e001      	b.n	8013394 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013390:	7dfb      	ldrb	r3, [r7, #23]
 8013392:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	f003 0301 	and.w	r3, r3, #1
 801339c:	2b00      	cmp	r3, #0
 801339e:	d07e      	beq.n	801349e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133a4:	2b28      	cmp	r3, #40	; 0x28
 80133a6:	d867      	bhi.n	8013478 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80133a8:	a201      	add	r2, pc, #4	; (adr r2, 80133b0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80133aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ae:	bf00      	nop
 80133b0:	0801347f 	.word	0x0801347f
 80133b4:	08013479 	.word	0x08013479
 80133b8:	08013479 	.word	0x08013479
 80133bc:	08013479 	.word	0x08013479
 80133c0:	08013479 	.word	0x08013479
 80133c4:	08013479 	.word	0x08013479
 80133c8:	08013479 	.word	0x08013479
 80133cc:	08013479 	.word	0x08013479
 80133d0:	08013455 	.word	0x08013455
 80133d4:	08013479 	.word	0x08013479
 80133d8:	08013479 	.word	0x08013479
 80133dc:	08013479 	.word	0x08013479
 80133e0:	08013479 	.word	0x08013479
 80133e4:	08013479 	.word	0x08013479
 80133e8:	08013479 	.word	0x08013479
 80133ec:	08013479 	.word	0x08013479
 80133f0:	08013467 	.word	0x08013467
 80133f4:	08013479 	.word	0x08013479
 80133f8:	08013479 	.word	0x08013479
 80133fc:	08013479 	.word	0x08013479
 8013400:	08013479 	.word	0x08013479
 8013404:	08013479 	.word	0x08013479
 8013408:	08013479 	.word	0x08013479
 801340c:	08013479 	.word	0x08013479
 8013410:	0801347f 	.word	0x0801347f
 8013414:	08013479 	.word	0x08013479
 8013418:	08013479 	.word	0x08013479
 801341c:	08013479 	.word	0x08013479
 8013420:	08013479 	.word	0x08013479
 8013424:	08013479 	.word	0x08013479
 8013428:	08013479 	.word	0x08013479
 801342c:	08013479 	.word	0x08013479
 8013430:	0801347f 	.word	0x0801347f
 8013434:	08013479 	.word	0x08013479
 8013438:	08013479 	.word	0x08013479
 801343c:	08013479 	.word	0x08013479
 8013440:	08013479 	.word	0x08013479
 8013444:	08013479 	.word	0x08013479
 8013448:	08013479 	.word	0x08013479
 801344c:	08013479 	.word	0x08013479
 8013450:	0801347f 	.word	0x0801347f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	3304      	adds	r3, #4
 8013458:	2101      	movs	r1, #1
 801345a:	4618      	mov	r0, r3
 801345c:	f000 fdf4 	bl	8014048 <RCCEx_PLL2_Config>
 8013460:	4603      	mov	r3, r0
 8013462:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8013464:	e00c      	b.n	8013480 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	3324      	adds	r3, #36	; 0x24
 801346a:	2101      	movs	r1, #1
 801346c:	4618      	mov	r0, r3
 801346e:	f000 fe9d 	bl	80141ac <RCCEx_PLL3_Config>
 8013472:	4603      	mov	r3, r0
 8013474:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8013476:	e003      	b.n	8013480 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013478:	2301      	movs	r3, #1
 801347a:	75fb      	strb	r3, [r7, #23]
      break;
 801347c:	e000      	b.n	8013480 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 801347e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013480:	7dfb      	ldrb	r3, [r7, #23]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d109      	bne.n	801349a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8013486:	4b24      	ldr	r3, [pc, #144]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8013488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801348a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013492:	4921      	ldr	r1, [pc, #132]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8013494:	4313      	orrs	r3, r2
 8013496:	654b      	str	r3, [r1, #84]	; 0x54
 8013498:	e001      	b.n	801349e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801349a:	7dfb      	ldrb	r3, [r7, #23]
 801349c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	f003 0302 	and.w	r3, r3, #2
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d03e      	beq.n	8013528 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134ae:	2b05      	cmp	r3, #5
 80134b0:	d820      	bhi.n	80134f4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80134b2:	a201      	add	r2, pc, #4	; (adr r2, 80134b8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80134b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134b8:	080134fb 	.word	0x080134fb
 80134bc:	080134d1 	.word	0x080134d1
 80134c0:	080134e3 	.word	0x080134e3
 80134c4:	080134fb 	.word	0x080134fb
 80134c8:	080134fb 	.word	0x080134fb
 80134cc:	080134fb 	.word	0x080134fb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	3304      	adds	r3, #4
 80134d4:	2101      	movs	r1, #1
 80134d6:	4618      	mov	r0, r3
 80134d8:	f000 fdb6 	bl	8014048 <RCCEx_PLL2_Config>
 80134dc:	4603      	mov	r3, r0
 80134de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80134e0:	e00c      	b.n	80134fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	3324      	adds	r3, #36	; 0x24
 80134e6:	2101      	movs	r1, #1
 80134e8:	4618      	mov	r0, r3
 80134ea:	f000 fe5f 	bl	80141ac <RCCEx_PLL3_Config>
 80134ee:	4603      	mov	r3, r0
 80134f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80134f2:	e003      	b.n	80134fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80134f4:	2301      	movs	r3, #1
 80134f6:	75fb      	strb	r3, [r7, #23]
      break;
 80134f8:	e000      	b.n	80134fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80134fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80134fc:	7dfb      	ldrb	r3, [r7, #23]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d110      	bne.n	8013524 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8013502:	4b05      	ldr	r3, [pc, #20]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8013504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013506:	f023 0207 	bic.w	r2, r3, #7
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801350e:	4902      	ldr	r1, [pc, #8]	; (8013518 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8013510:	4313      	orrs	r3, r2
 8013512:	654b      	str	r3, [r1, #84]	; 0x54
 8013514:	e008      	b.n	8013528 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8013516:	bf00      	nop
 8013518:	58024400 	.word	0x58024400
 801351c:	58024800 	.word	0x58024800
 8013520:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013524:	7dfb      	ldrb	r3, [r7, #23]
 8013526:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	f003 0304 	and.w	r3, r3, #4
 8013530:	2b00      	cmp	r3, #0
 8013532:	d039      	beq.n	80135a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801353a:	2b05      	cmp	r3, #5
 801353c:	d820      	bhi.n	8013580 <HAL_RCCEx_PeriphCLKConfig+0x934>
 801353e:	a201      	add	r2, pc, #4	; (adr r2, 8013544 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8013540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013544:	08013587 	.word	0x08013587
 8013548:	0801355d 	.word	0x0801355d
 801354c:	0801356f 	.word	0x0801356f
 8013550:	08013587 	.word	0x08013587
 8013554:	08013587 	.word	0x08013587
 8013558:	08013587 	.word	0x08013587
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	3304      	adds	r3, #4
 8013560:	2101      	movs	r1, #1
 8013562:	4618      	mov	r0, r3
 8013564:	f000 fd70 	bl	8014048 <RCCEx_PLL2_Config>
 8013568:	4603      	mov	r3, r0
 801356a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801356c:	e00c      	b.n	8013588 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	3324      	adds	r3, #36	; 0x24
 8013572:	2101      	movs	r1, #1
 8013574:	4618      	mov	r0, r3
 8013576:	f000 fe19 	bl	80141ac <RCCEx_PLL3_Config>
 801357a:	4603      	mov	r3, r0
 801357c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801357e:	e003      	b.n	8013588 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013580:	2301      	movs	r3, #1
 8013582:	75fb      	strb	r3, [r7, #23]
      break;
 8013584:	e000      	b.n	8013588 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8013586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013588:	7dfb      	ldrb	r3, [r7, #23]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d10a      	bne.n	80135a4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801358e:	4bb7      	ldr	r3, [pc, #732]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8013590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013592:	f023 0207 	bic.w	r2, r3, #7
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801359c:	49b3      	ldr	r1, [pc, #716]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 801359e:	4313      	orrs	r3, r2
 80135a0:	658b      	str	r3, [r1, #88]	; 0x58
 80135a2:	e001      	b.n	80135a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80135a4:	7dfb      	ldrb	r3, [r7, #23]
 80135a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	f003 0320 	and.w	r3, r3, #32
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d04b      	beq.n	801364c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80135ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80135be:	d02e      	beq.n	801361e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80135c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80135c4:	d828      	bhi.n	8013618 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80135c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80135ca:	d02a      	beq.n	8013622 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80135cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80135d0:	d822      	bhi.n	8013618 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80135d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80135d6:	d026      	beq.n	8013626 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80135d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80135dc:	d81c      	bhi.n	8013618 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80135de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80135e2:	d010      	beq.n	8013606 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80135e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80135e8:	d816      	bhi.n	8013618 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d01d      	beq.n	801362a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80135ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80135f2:	d111      	bne.n	8013618 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	3304      	adds	r3, #4
 80135f8:	2100      	movs	r1, #0
 80135fa:	4618      	mov	r0, r3
 80135fc:	f000 fd24 	bl	8014048 <RCCEx_PLL2_Config>
 8013600:	4603      	mov	r3, r0
 8013602:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8013604:	e012      	b.n	801362c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	3324      	adds	r3, #36	; 0x24
 801360a:	2102      	movs	r1, #2
 801360c:	4618      	mov	r0, r3
 801360e:	f000 fdcd 	bl	80141ac <RCCEx_PLL3_Config>
 8013612:	4603      	mov	r3, r0
 8013614:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8013616:	e009      	b.n	801362c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013618:	2301      	movs	r3, #1
 801361a:	75fb      	strb	r3, [r7, #23]
      break;
 801361c:	e006      	b.n	801362c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 801361e:	bf00      	nop
 8013620:	e004      	b.n	801362c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8013622:	bf00      	nop
 8013624:	e002      	b.n	801362c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8013626:	bf00      	nop
 8013628:	e000      	b.n	801362c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 801362a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801362c:	7dfb      	ldrb	r3, [r7, #23]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d10a      	bne.n	8013648 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013632:	4b8e      	ldr	r3, [pc, #568]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8013634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013636:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013640:	498a      	ldr	r1, [pc, #552]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8013642:	4313      	orrs	r3, r2
 8013644:	654b      	str	r3, [r1, #84]	; 0x54
 8013646:	e001      	b.n	801364c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013648:	7dfb      	ldrb	r3, [r7, #23]
 801364a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013654:	2b00      	cmp	r3, #0
 8013656:	d04b      	beq.n	80136f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801365e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8013662:	d02e      	beq.n	80136c2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8013664:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8013668:	d828      	bhi.n	80136bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 801366a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801366e:	d02a      	beq.n	80136c6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8013670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013674:	d822      	bhi.n	80136bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8013676:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801367a:	d026      	beq.n	80136ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 801367c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013680:	d81c      	bhi.n	80136bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8013682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013686:	d010      	beq.n	80136aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8013688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801368c:	d816      	bhi.n	80136bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 801368e:	2b00      	cmp	r3, #0
 8013690:	d01d      	beq.n	80136ce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8013692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013696:	d111      	bne.n	80136bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	3304      	adds	r3, #4
 801369c:	2100      	movs	r1, #0
 801369e:	4618      	mov	r0, r3
 80136a0:	f000 fcd2 	bl	8014048 <RCCEx_PLL2_Config>
 80136a4:	4603      	mov	r3, r0
 80136a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80136a8:	e012      	b.n	80136d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	3324      	adds	r3, #36	; 0x24
 80136ae:	2102      	movs	r1, #2
 80136b0:	4618      	mov	r0, r3
 80136b2:	f000 fd7b 	bl	80141ac <RCCEx_PLL3_Config>
 80136b6:	4603      	mov	r3, r0
 80136b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80136ba:	e009      	b.n	80136d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80136bc:	2301      	movs	r3, #1
 80136be:	75fb      	strb	r3, [r7, #23]
      break;
 80136c0:	e006      	b.n	80136d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80136c2:	bf00      	nop
 80136c4:	e004      	b.n	80136d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80136c6:	bf00      	nop
 80136c8:	e002      	b.n	80136d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80136ca:	bf00      	nop
 80136cc:	e000      	b.n	80136d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80136ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80136d0:	7dfb      	ldrb	r3, [r7, #23]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d10a      	bne.n	80136ec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80136d6:	4b65      	ldr	r3, [pc, #404]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80136d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80136e4:	4961      	ldr	r1, [pc, #388]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80136e6:	4313      	orrs	r3, r2
 80136e8:	658b      	str	r3, [r1, #88]	; 0x58
 80136ea:	e001      	b.n	80136f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80136ec:	7dfb      	ldrb	r3, [r7, #23]
 80136ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d04b      	beq.n	8013794 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013702:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8013706:	d02e      	beq.n	8013766 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8013708:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801370c:	d828      	bhi.n	8013760 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 801370e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013712:	d02a      	beq.n	801376a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8013714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013718:	d822      	bhi.n	8013760 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 801371a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801371e:	d026      	beq.n	801376e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8013720:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8013724:	d81c      	bhi.n	8013760 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8013726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801372a:	d010      	beq.n	801374e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 801372c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013730:	d816      	bhi.n	8013760 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8013732:	2b00      	cmp	r3, #0
 8013734:	d01d      	beq.n	8013772 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8013736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801373a:	d111      	bne.n	8013760 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	3304      	adds	r3, #4
 8013740:	2100      	movs	r1, #0
 8013742:	4618      	mov	r0, r3
 8013744:	f000 fc80 	bl	8014048 <RCCEx_PLL2_Config>
 8013748:	4603      	mov	r3, r0
 801374a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801374c:	e012      	b.n	8013774 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	3324      	adds	r3, #36	; 0x24
 8013752:	2102      	movs	r1, #2
 8013754:	4618      	mov	r0, r3
 8013756:	f000 fd29 	bl	80141ac <RCCEx_PLL3_Config>
 801375a:	4603      	mov	r3, r0
 801375c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801375e:	e009      	b.n	8013774 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013760:	2301      	movs	r3, #1
 8013762:	75fb      	strb	r3, [r7, #23]
      break;
 8013764:	e006      	b.n	8013774 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8013766:	bf00      	nop
 8013768:	e004      	b.n	8013774 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 801376a:	bf00      	nop
 801376c:	e002      	b.n	8013774 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 801376e:	bf00      	nop
 8013770:	e000      	b.n	8013774 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8013772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013774:	7dfb      	ldrb	r3, [r7, #23]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d10a      	bne.n	8013790 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801377a:	4b3c      	ldr	r3, [pc, #240]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 801377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801377e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013788:	4938      	ldr	r1, [pc, #224]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 801378a:	4313      	orrs	r3, r2
 801378c:	658b      	str	r3, [r1, #88]	; 0x58
 801378e:	e001      	b.n	8013794 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013790:	7dfb      	ldrb	r3, [r7, #23]
 8013792:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f003 0308 	and.w	r3, r3, #8
 801379c:	2b00      	cmp	r3, #0
 801379e:	d01a      	beq.n	80137d6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80137aa:	d10a      	bne.n	80137c2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	3324      	adds	r3, #36	; 0x24
 80137b0:	2102      	movs	r1, #2
 80137b2:	4618      	mov	r0, r3
 80137b4:	f000 fcfa 	bl	80141ac <RCCEx_PLL3_Config>
 80137b8:	4603      	mov	r3, r0
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d001      	beq.n	80137c2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80137be:	2301      	movs	r3, #1
 80137c0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80137c2:	4b2a      	ldr	r3, [pc, #168]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80137c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137d0:	4926      	ldr	r1, [pc, #152]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80137d2:	4313      	orrs	r3, r2
 80137d4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f003 0310 	and.w	r3, r3, #16
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d01a      	beq.n	8013818 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80137e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137ec:	d10a      	bne.n	8013804 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	3324      	adds	r3, #36	; 0x24
 80137f2:	2102      	movs	r1, #2
 80137f4:	4618      	mov	r0, r3
 80137f6:	f000 fcd9 	bl	80141ac <RCCEx_PLL3_Config>
 80137fa:	4603      	mov	r3, r0
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d001      	beq.n	8013804 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8013800:	2301      	movs	r3, #1
 8013802:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8013804:	4b19      	ldr	r3, [pc, #100]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8013806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013812:	4916      	ldr	r1, [pc, #88]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8013814:	4313      	orrs	r3, r2
 8013816:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013820:	2b00      	cmp	r3, #0
 8013822:	d036      	beq.n	8013892 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801382a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801382e:	d01f      	beq.n	8013870 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8013830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013834:	d817      	bhi.n	8013866 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8013836:	2b00      	cmp	r3, #0
 8013838:	d003      	beq.n	8013842 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 801383a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801383e:	d009      	beq.n	8013854 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8013840:	e011      	b.n	8013866 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	3304      	adds	r3, #4
 8013846:	2100      	movs	r1, #0
 8013848:	4618      	mov	r0, r3
 801384a:	f000 fbfd 	bl	8014048 <RCCEx_PLL2_Config>
 801384e:	4603      	mov	r3, r0
 8013850:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8013852:	e00e      	b.n	8013872 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	3324      	adds	r3, #36	; 0x24
 8013858:	2102      	movs	r1, #2
 801385a:	4618      	mov	r0, r3
 801385c:	f000 fca6 	bl	80141ac <RCCEx_PLL3_Config>
 8013860:	4603      	mov	r3, r0
 8013862:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8013864:	e005      	b.n	8013872 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013866:	2301      	movs	r3, #1
 8013868:	75fb      	strb	r3, [r7, #23]
      break;
 801386a:	e002      	b.n	8013872 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 801386c:	58024400 	.word	0x58024400
      break;
 8013870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013872:	7dfb      	ldrb	r3, [r7, #23]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d10a      	bne.n	801388e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8013878:	4b93      	ldr	r3, [pc, #588]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801387c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013886:	4990      	ldr	r1, [pc, #576]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013888:	4313      	orrs	r3, r2
 801388a:	658b      	str	r3, [r1, #88]	; 0x58
 801388c:	e001      	b.n	8013892 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801388e:	7dfb      	ldrb	r3, [r7, #23]
 8013890:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801389a:	2b00      	cmp	r3, #0
 801389c:	d033      	beq.n	8013906 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80138a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80138a8:	d01c      	beq.n	80138e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80138aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80138ae:	d816      	bhi.n	80138de <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80138b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80138b4:	d003      	beq.n	80138be <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80138b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80138ba:	d007      	beq.n	80138cc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80138bc:	e00f      	b.n	80138de <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80138be:	4b82      	ldr	r3, [pc, #520]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80138c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138c2:	4a81      	ldr	r2, [pc, #516]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80138c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80138c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80138ca:	e00c      	b.n	80138e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	3324      	adds	r3, #36	; 0x24
 80138d0:	2101      	movs	r1, #1
 80138d2:	4618      	mov	r0, r3
 80138d4:	f000 fc6a 	bl	80141ac <RCCEx_PLL3_Config>
 80138d8:	4603      	mov	r3, r0
 80138da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80138dc:	e003      	b.n	80138e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80138de:	2301      	movs	r3, #1
 80138e0:	75fb      	strb	r3, [r7, #23]
      break;
 80138e2:	e000      	b.n	80138e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80138e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80138e6:	7dfb      	ldrb	r3, [r7, #23]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d10a      	bne.n	8013902 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80138ec:	4b76      	ldr	r3, [pc, #472]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80138ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80138fa:	4973      	ldr	r1, [pc, #460]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80138fc:	4313      	orrs	r3, r2
 80138fe:	654b      	str	r3, [r1, #84]	; 0x54
 8013900:	e001      	b.n	8013906 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013902:	7dfb      	ldrb	r3, [r7, #23]
 8013904:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801390e:	2b00      	cmp	r3, #0
 8013910:	d029      	beq.n	8013966 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013916:	2b00      	cmp	r3, #0
 8013918:	d003      	beq.n	8013922 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 801391a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801391e:	d007      	beq.n	8013930 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8013920:	e00f      	b.n	8013942 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013922:	4b69      	ldr	r3, [pc, #420]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013926:	4a68      	ldr	r2, [pc, #416]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801392c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801392e:	e00b      	b.n	8013948 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	3304      	adds	r3, #4
 8013934:	2102      	movs	r1, #2
 8013936:	4618      	mov	r0, r3
 8013938:	f000 fb86 	bl	8014048 <RCCEx_PLL2_Config>
 801393c:	4603      	mov	r3, r0
 801393e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8013940:	e002      	b.n	8013948 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8013942:	2301      	movs	r3, #1
 8013944:	75fb      	strb	r3, [r7, #23]
      break;
 8013946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013948:	7dfb      	ldrb	r3, [r7, #23]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d109      	bne.n	8013962 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801394e:	4b5e      	ldr	r3, [pc, #376]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013952:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801395a:	495b      	ldr	r1, [pc, #364]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801395c:	4313      	orrs	r3, r2
 801395e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8013960:	e001      	b.n	8013966 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013962:	7dfb      	ldrb	r3, [r7, #23]
 8013964:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801396e:	2b00      	cmp	r3, #0
 8013970:	d00a      	beq.n	8013988 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	3324      	adds	r3, #36	; 0x24
 8013976:	2102      	movs	r1, #2
 8013978:	4618      	mov	r0, r3
 801397a:	f000 fc17 	bl	80141ac <RCCEx_PLL3_Config>
 801397e:	4603      	mov	r3, r0
 8013980:	2b00      	cmp	r3, #0
 8013982:	d001      	beq.n	8013988 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8013984:	2301      	movs	r3, #1
 8013986:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013990:	2b00      	cmp	r3, #0
 8013992:	d030      	beq.n	80139f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801399c:	d017      	beq.n	80139ce <HAL_RCCEx_PeriphCLKConfig+0xd82>
 801399e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80139a2:	d811      	bhi.n	80139c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80139a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139a8:	d013      	beq.n	80139d2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80139aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139ae:	d80b      	bhi.n	80139c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d010      	beq.n	80139d6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80139b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80139b8:	d106      	bne.n	80139c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80139ba:	4b43      	ldr	r3, [pc, #268]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80139bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139be:	4a42      	ldr	r2, [pc, #264]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80139c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80139c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80139c6:	e007      	b.n	80139d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80139c8:	2301      	movs	r3, #1
 80139ca:	75fb      	strb	r3, [r7, #23]
      break;
 80139cc:	e004      	b.n	80139d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80139ce:	bf00      	nop
 80139d0:	e002      	b.n	80139d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80139d2:	bf00      	nop
 80139d4:	e000      	b.n	80139d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80139d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80139d8:	7dfb      	ldrb	r3, [r7, #23]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d109      	bne.n	80139f2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80139de:	4b3a      	ldr	r3, [pc, #232]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80139e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139ea:	4937      	ldr	r1, [pc, #220]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80139ec:	4313      	orrs	r3, r2
 80139ee:	654b      	str	r3, [r1, #84]	; 0x54
 80139f0:	e001      	b.n	80139f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80139f2:	7dfb      	ldrb	r3, [r7, #23]
 80139f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d008      	beq.n	8013a14 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013a02:	4b31      	ldr	r3, [pc, #196]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a0e:	492e      	ldr	r1, [pc, #184]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013a10:	4313      	orrs	r3, r2
 8013a12:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d009      	beq.n	8013a34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8013a20:	4b29      	ldr	r3, [pc, #164]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013a22:	691b      	ldr	r3, [r3, #16]
 8013a24:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013a2e:	4926      	ldr	r1, [pc, #152]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013a30:	4313      	orrs	r3, r2
 8013a32:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d008      	beq.n	8013a52 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013a40:	4b21      	ldr	r3, [pc, #132]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a4c:	491e      	ldr	r1, [pc, #120]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013a4e:	4313      	orrs	r3, r2
 8013a50:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d00d      	beq.n	8013a7a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013a5e:	4b1a      	ldr	r3, [pc, #104]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013a60:	691b      	ldr	r3, [r3, #16]
 8013a62:	4a19      	ldr	r2, [pc, #100]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013a64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013a68:	6113      	str	r3, [r2, #16]
 8013a6a:	4b17      	ldr	r3, [pc, #92]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013a6c:	691a      	ldr	r2, [r3, #16]
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013a74:	4914      	ldr	r1, [pc, #80]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013a76:	4313      	orrs	r3, r2
 8013a78:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	da08      	bge.n	8013a94 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8013a82:	4b11      	ldr	r3, [pc, #68]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a8e:	490e      	ldr	r1, [pc, #56]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013a90:	4313      	orrs	r3, r2
 8013a92:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d009      	beq.n	8013ab4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013aa0:	4b09      	ldr	r3, [pc, #36]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013aa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013aae:	4906      	ldr	r1, [pc, #24]	; (8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8013ab0:	4313      	orrs	r3, r2
 8013ab2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8013ab4:	7dbb      	ldrb	r3, [r7, #22]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d101      	bne.n	8013abe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8013aba:	2300      	movs	r3, #0
 8013abc:	e000      	b.n	8013ac0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8013abe:	2301      	movs	r3, #1
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3718      	adds	r7, #24
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	58024400 	.word	0x58024400

08013acc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013ad0:	f7ff f81e 	bl	8012b10 <HAL_RCC_GetHCLKFreq>
 8013ad4:	4602      	mov	r2, r0
 8013ad6:	4b06      	ldr	r3, [pc, #24]	; (8013af0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013ad8:	6a1b      	ldr	r3, [r3, #32]
 8013ada:	091b      	lsrs	r3, r3, #4
 8013adc:	f003 0307 	and.w	r3, r3, #7
 8013ae0:	4904      	ldr	r1, [pc, #16]	; (8013af4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013ae2:	5ccb      	ldrb	r3, [r1, r3]
 8013ae4:	f003 031f 	and.w	r3, r3, #31
 8013ae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	bd80      	pop	{r7, pc}
 8013af0:	58024400 	.word	0x58024400
 8013af4:	0802c2e4 	.word	0x0802c2e4

08013af8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8013af8:	b480      	push	{r7}
 8013afa:	b089      	sub	sp, #36	; 0x24
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013b00:	4ba1      	ldr	r3, [pc, #644]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b04:	f003 0303 	and.w	r3, r3, #3
 8013b08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8013b0a:	4b9f      	ldr	r3, [pc, #636]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b0e:	0b1b      	lsrs	r3, r3, #12
 8013b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013b14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013b16:	4b9c      	ldr	r3, [pc, #624]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b1a:	091b      	lsrs	r3, r3, #4
 8013b1c:	f003 0301 	and.w	r3, r3, #1
 8013b20:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8013b22:	4b99      	ldr	r3, [pc, #612]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b26:	08db      	lsrs	r3, r3, #3
 8013b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b2c:	693a      	ldr	r2, [r7, #16]
 8013b2e:	fb02 f303 	mul.w	r3, r2, r3
 8013b32:	ee07 3a90 	vmov	s15, r3
 8013b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013b3e:	697b      	ldr	r3, [r7, #20]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	f000 8111 	beq.w	8013d68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013b46:	69bb      	ldr	r3, [r7, #24]
 8013b48:	2b02      	cmp	r3, #2
 8013b4a:	f000 8083 	beq.w	8013c54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013b4e:	69bb      	ldr	r3, [r7, #24]
 8013b50:	2b02      	cmp	r3, #2
 8013b52:	f200 80a1 	bhi.w	8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013b56:	69bb      	ldr	r3, [r7, #24]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d003      	beq.n	8013b64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013b5c:	69bb      	ldr	r3, [r7, #24]
 8013b5e:	2b01      	cmp	r3, #1
 8013b60:	d056      	beq.n	8013c10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013b62:	e099      	b.n	8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013b64:	4b88      	ldr	r3, [pc, #544]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	f003 0320 	and.w	r3, r3, #32
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d02d      	beq.n	8013bcc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013b70:	4b85      	ldr	r3, [pc, #532]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	08db      	lsrs	r3, r3, #3
 8013b76:	f003 0303 	and.w	r3, r3, #3
 8013b7a:	4a84      	ldr	r2, [pc, #528]	; (8013d8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8013b80:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	ee07 3a90 	vmov	s15, r3
 8013b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	ee07 3a90 	vmov	s15, r3
 8013b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b9a:	4b7b      	ldr	r3, [pc, #492]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ba2:	ee07 3a90 	vmov	s15, r3
 8013ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8013bae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8013d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013bca:	e087      	b.n	8013cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013bcc:	697b      	ldr	r3, [r7, #20]
 8013bce:	ee07 3a90 	vmov	s15, r3
 8013bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8013d94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013bde:	4b6a      	ldr	r3, [pc, #424]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013be6:	ee07 3a90 	vmov	s15, r3
 8013bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8013bf2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8013d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013c0e:	e065      	b.n	8013cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	ee07 3a90 	vmov	s15, r3
 8013c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8013d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c22:	4b59      	ldr	r3, [pc, #356]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c2a:	ee07 3a90 	vmov	s15, r3
 8013c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8013d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013c52:	e043      	b.n	8013cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	ee07 3a90 	vmov	s15, r3
 8013c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8013d9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c66:	4b48      	ldr	r3, [pc, #288]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c6e:	ee07 3a90 	vmov	s15, r3
 8013c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013c96:	e021      	b.n	8013cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013c98:	697b      	ldr	r3, [r7, #20]
 8013c9a:	ee07 3a90 	vmov	s15, r3
 8013c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ca2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013caa:	4b37      	ldr	r3, [pc, #220]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cb2:	ee07 3a90 	vmov	s15, r3
 8013cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8013cbe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8013d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013cd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013cda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8013cdc:	4b2a      	ldr	r3, [pc, #168]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ce0:	0a5b      	lsrs	r3, r3, #9
 8013ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ce6:	ee07 3a90 	vmov	s15, r3
 8013cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8013cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d02:	ee17 2a90 	vmov	r2, s15
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8013d0a:	4b1f      	ldr	r3, [pc, #124]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d0e:	0c1b      	lsrs	r3, r3, #16
 8013d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d14:	ee07 3a90 	vmov	s15, r3
 8013d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013d20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013d24:	edd7 6a07 	vldr	s13, [r7, #28]
 8013d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d30:	ee17 2a90 	vmov	r2, s15
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8013d38:	4b13      	ldr	r3, [pc, #76]	; (8013d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d3c:	0e1b      	lsrs	r3, r3, #24
 8013d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d42:	ee07 3a90 	vmov	s15, r3
 8013d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8013d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d5e:	ee17 2a90 	vmov	r2, s15
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013d66:	e008      	b.n	8013d7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	2200      	movs	r2, #0
 8013d72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2200      	movs	r2, #0
 8013d78:	609a      	str	r2, [r3, #8]
}
 8013d7a:	bf00      	nop
 8013d7c:	3724      	adds	r7, #36	; 0x24
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d84:	4770      	bx	lr
 8013d86:	bf00      	nop
 8013d88:	58024400 	.word	0x58024400
 8013d8c:	03d09000 	.word	0x03d09000
 8013d90:	46000000 	.word	0x46000000
 8013d94:	4c742400 	.word	0x4c742400
 8013d98:	4a742400 	.word	0x4a742400
 8013d9c:	4bbebc20 	.word	0x4bbebc20

08013da0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8013da0:	b480      	push	{r7}
 8013da2:	b089      	sub	sp, #36	; 0x24
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013da8:	4ba1      	ldr	r3, [pc, #644]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dac:	f003 0303 	and.w	r3, r3, #3
 8013db0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8013db2:	4b9f      	ldr	r3, [pc, #636]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013db6:	0d1b      	lsrs	r3, r3, #20
 8013db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013dbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013dbe:	4b9c      	ldr	r3, [pc, #624]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dc2:	0a1b      	lsrs	r3, r3, #8
 8013dc4:	f003 0301 	and.w	r3, r3, #1
 8013dc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8013dca:	4b99      	ldr	r3, [pc, #612]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013dce:	08db      	lsrs	r3, r3, #3
 8013dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013dd4:	693a      	ldr	r2, [r7, #16]
 8013dd6:	fb02 f303 	mul.w	r3, r2, r3
 8013dda:	ee07 3a90 	vmov	s15, r3
 8013dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013de2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	f000 8111 	beq.w	8014010 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8013dee:	69bb      	ldr	r3, [r7, #24]
 8013df0:	2b02      	cmp	r3, #2
 8013df2:	f000 8083 	beq.w	8013efc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013df6:	69bb      	ldr	r3, [r7, #24]
 8013df8:	2b02      	cmp	r3, #2
 8013dfa:	f200 80a1 	bhi.w	8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d003      	beq.n	8013e0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013e04:	69bb      	ldr	r3, [r7, #24]
 8013e06:	2b01      	cmp	r3, #1
 8013e08:	d056      	beq.n	8013eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013e0a:	e099      	b.n	8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013e0c:	4b88      	ldr	r3, [pc, #544]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	f003 0320 	and.w	r3, r3, #32
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d02d      	beq.n	8013e74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013e18:	4b85      	ldr	r3, [pc, #532]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	08db      	lsrs	r3, r3, #3
 8013e1e:	f003 0303 	and.w	r3, r3, #3
 8013e22:	4a84      	ldr	r2, [pc, #528]	; (8014034 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013e24:	fa22 f303 	lsr.w	r3, r2, r3
 8013e28:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	ee07 3a90 	vmov	s15, r3
 8013e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	ee07 3a90 	vmov	s15, r3
 8013e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e42:	4b7b      	ldr	r3, [pc, #492]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e4a:	ee07 3a90 	vmov	s15, r3
 8013e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8014038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013e72:	e087      	b.n	8013f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013e74:	697b      	ldr	r3, [r7, #20]
 8013e76:	ee07 3a90 	vmov	s15, r3
 8013e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801403c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e86:	4b6a      	ldr	r3, [pc, #424]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e8e:	ee07 3a90 	vmov	s15, r3
 8013e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8014038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013eb6:	e065      	b.n	8013f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013eb8:	697b      	ldr	r3, [r7, #20]
 8013eba:	ee07 3a90 	vmov	s15, r3
 8013ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ec2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8014040 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013eca:	4b59      	ldr	r3, [pc, #356]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ed2:	ee07 3a90 	vmov	s15, r3
 8013ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ede:	eddf 5a56 	vldr	s11, [pc, #344]	; 8014038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013efa:	e043      	b.n	8013f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	ee07 3a90 	vmov	s15, r3
 8013f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8014044 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f0e:	4b48      	ldr	r3, [pc, #288]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f16:	ee07 3a90 	vmov	s15, r3
 8013f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8014038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013f3e:	e021      	b.n	8013f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	ee07 3a90 	vmov	s15, r3
 8013f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014040 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f52:	4b37      	ldr	r3, [pc, #220]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f5a:	ee07 3a90 	vmov	s15, r3
 8013f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8014038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013f82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8013f84:	4b2a      	ldr	r3, [pc, #168]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f88:	0a5b      	lsrs	r3, r3, #9
 8013f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f8e:	ee07 3a90 	vmov	s15, r3
 8013f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013faa:	ee17 2a90 	vmov	r2, s15
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8013fb2:	4b1f      	ldr	r3, [pc, #124]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fb6:	0c1b      	lsrs	r3, r3, #16
 8013fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fbc:	ee07 3a90 	vmov	s15, r3
 8013fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8013fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fd8:	ee17 2a90 	vmov	r2, s15
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8013fe0:	4b13      	ldr	r3, [pc, #76]	; (8014030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fe4:	0e1b      	lsrs	r3, r3, #24
 8013fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fea:	ee07 3a90 	vmov	s15, r3
 8013fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8013ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014006:	ee17 2a90 	vmov	r2, s15
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801400e:	e008      	b.n	8014022 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2200      	movs	r2, #0
 8014014:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2200      	movs	r2, #0
 801401a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2200      	movs	r2, #0
 8014020:	609a      	str	r2, [r3, #8]
}
 8014022:	bf00      	nop
 8014024:	3724      	adds	r7, #36	; 0x24
 8014026:	46bd      	mov	sp, r7
 8014028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402c:	4770      	bx	lr
 801402e:	bf00      	nop
 8014030:	58024400 	.word	0x58024400
 8014034:	03d09000 	.word	0x03d09000
 8014038:	46000000 	.word	0x46000000
 801403c:	4c742400 	.word	0x4c742400
 8014040:	4a742400 	.word	0x4a742400
 8014044:	4bbebc20 	.word	0x4bbebc20

08014048 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b084      	sub	sp, #16
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
 8014050:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014052:	2300      	movs	r3, #0
 8014054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014056:	4b53      	ldr	r3, [pc, #332]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 8014058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801405a:	f003 0303 	and.w	r3, r3, #3
 801405e:	2b03      	cmp	r3, #3
 8014060:	d101      	bne.n	8014066 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8014062:	2301      	movs	r3, #1
 8014064:	e099      	b.n	801419a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8014066:	4b4f      	ldr	r3, [pc, #316]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	4a4e      	ldr	r2, [pc, #312]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 801406c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014072:	f7fa fbcb 	bl	800e80c <HAL_GetTick>
 8014076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014078:	e008      	b.n	801408c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801407a:	f7fa fbc7 	bl	800e80c <HAL_GetTick>
 801407e:	4602      	mov	r2, r0
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	1ad3      	subs	r3, r2, r3
 8014084:	2b02      	cmp	r3, #2
 8014086:	d901      	bls.n	801408c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014088:	2303      	movs	r3, #3
 801408a:	e086      	b.n	801419a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801408c:	4b45      	ldr	r3, [pc, #276]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014094:	2b00      	cmp	r3, #0
 8014096:	d1f0      	bne.n	801407a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8014098:	4b42      	ldr	r3, [pc, #264]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 801409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801409c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	031b      	lsls	r3, r3, #12
 80140a6:	493f      	ldr	r1, [pc, #252]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 80140a8:	4313      	orrs	r3, r2
 80140aa:	628b      	str	r3, [r1, #40]	; 0x28
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	685b      	ldr	r3, [r3, #4]
 80140b0:	3b01      	subs	r3, #1
 80140b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	689b      	ldr	r3, [r3, #8]
 80140ba:	3b01      	subs	r3, #1
 80140bc:	025b      	lsls	r3, r3, #9
 80140be:	b29b      	uxth	r3, r3
 80140c0:	431a      	orrs	r2, r3
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	68db      	ldr	r3, [r3, #12]
 80140c6:	3b01      	subs	r3, #1
 80140c8:	041b      	lsls	r3, r3, #16
 80140ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80140ce:	431a      	orrs	r2, r3
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	691b      	ldr	r3, [r3, #16]
 80140d4:	3b01      	subs	r3, #1
 80140d6:	061b      	lsls	r3, r3, #24
 80140d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80140dc:	4931      	ldr	r1, [pc, #196]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 80140de:	4313      	orrs	r3, r2
 80140e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80140e2:	4b30      	ldr	r3, [pc, #192]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 80140e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	695b      	ldr	r3, [r3, #20]
 80140ee:	492d      	ldr	r1, [pc, #180]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 80140f0:	4313      	orrs	r3, r2
 80140f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80140f4:	4b2b      	ldr	r3, [pc, #172]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 80140f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140f8:	f023 0220 	bic.w	r2, r3, #32
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	699b      	ldr	r3, [r3, #24]
 8014100:	4928      	ldr	r1, [pc, #160]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 8014102:	4313      	orrs	r3, r2
 8014104:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8014106:	4b27      	ldr	r3, [pc, #156]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 8014108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801410a:	4a26      	ldr	r2, [pc, #152]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 801410c:	f023 0310 	bic.w	r3, r3, #16
 8014110:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8014112:	4b24      	ldr	r3, [pc, #144]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 8014114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014116:	4b24      	ldr	r3, [pc, #144]	; (80141a8 <RCCEx_PLL2_Config+0x160>)
 8014118:	4013      	ands	r3, r2
 801411a:	687a      	ldr	r2, [r7, #4]
 801411c:	69d2      	ldr	r2, [r2, #28]
 801411e:	00d2      	lsls	r2, r2, #3
 8014120:	4920      	ldr	r1, [pc, #128]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 8014122:	4313      	orrs	r3, r2
 8014124:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8014126:	4b1f      	ldr	r3, [pc, #124]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 8014128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801412a:	4a1e      	ldr	r2, [pc, #120]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 801412c:	f043 0310 	orr.w	r3, r3, #16
 8014130:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d106      	bne.n	8014146 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8014138:	4b1a      	ldr	r3, [pc, #104]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 801413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801413c:	4a19      	ldr	r2, [pc, #100]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 801413e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014142:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014144:	e00f      	b.n	8014166 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	2b01      	cmp	r3, #1
 801414a:	d106      	bne.n	801415a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801414c:	4b15      	ldr	r3, [pc, #84]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 801414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014150:	4a14      	ldr	r2, [pc, #80]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 8014152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014156:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014158:	e005      	b.n	8014166 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801415a:	4b12      	ldr	r3, [pc, #72]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 801415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801415e:	4a11      	ldr	r2, [pc, #68]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 8014160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014164:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8014166:	4b0f      	ldr	r3, [pc, #60]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	4a0e      	ldr	r2, [pc, #56]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 801416c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014172:	f7fa fb4b 	bl	800e80c <HAL_GetTick>
 8014176:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014178:	e008      	b.n	801418c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801417a:	f7fa fb47 	bl	800e80c <HAL_GetTick>
 801417e:	4602      	mov	r2, r0
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	1ad3      	subs	r3, r2, r3
 8014184:	2b02      	cmp	r3, #2
 8014186:	d901      	bls.n	801418c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014188:	2303      	movs	r3, #3
 801418a:	e006      	b.n	801419a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801418c:	4b05      	ldr	r3, [pc, #20]	; (80141a4 <RCCEx_PLL2_Config+0x15c>)
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014194:	2b00      	cmp	r3, #0
 8014196:	d0f0      	beq.n	801417a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8014198:	7bfb      	ldrb	r3, [r7, #15]
}
 801419a:	4618      	mov	r0, r3
 801419c:	3710      	adds	r7, #16
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
 80141a2:	bf00      	nop
 80141a4:	58024400 	.word	0x58024400
 80141a8:	ffff0007 	.word	0xffff0007

080141ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b084      	sub	sp, #16
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
 80141b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80141b6:	2300      	movs	r3, #0
 80141b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80141ba:	4b53      	ldr	r3, [pc, #332]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80141bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141be:	f003 0303 	and.w	r3, r3, #3
 80141c2:	2b03      	cmp	r3, #3
 80141c4:	d101      	bne.n	80141ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80141c6:	2301      	movs	r3, #1
 80141c8:	e099      	b.n	80142fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80141ca:	4b4f      	ldr	r3, [pc, #316]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	4a4e      	ldr	r2, [pc, #312]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80141d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80141d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80141d6:	f7fa fb19 	bl	800e80c <HAL_GetTick>
 80141da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80141dc:	e008      	b.n	80141f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80141de:	f7fa fb15 	bl	800e80c <HAL_GetTick>
 80141e2:	4602      	mov	r2, r0
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	1ad3      	subs	r3, r2, r3
 80141e8:	2b02      	cmp	r3, #2
 80141ea:	d901      	bls.n	80141f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80141ec:	2303      	movs	r3, #3
 80141ee:	e086      	b.n	80142fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80141f0:	4b45      	ldr	r3, [pc, #276]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d1f0      	bne.n	80141de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80141fc:	4b42      	ldr	r3, [pc, #264]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80141fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014200:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	051b      	lsls	r3, r3, #20
 801420a:	493f      	ldr	r1, [pc, #252]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 801420c:	4313      	orrs	r3, r2
 801420e:	628b      	str	r3, [r1, #40]	; 0x28
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	685b      	ldr	r3, [r3, #4]
 8014214:	3b01      	subs	r3, #1
 8014216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	689b      	ldr	r3, [r3, #8]
 801421e:	3b01      	subs	r3, #1
 8014220:	025b      	lsls	r3, r3, #9
 8014222:	b29b      	uxth	r3, r3
 8014224:	431a      	orrs	r2, r3
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	3b01      	subs	r3, #1
 801422c:	041b      	lsls	r3, r3, #16
 801422e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014232:	431a      	orrs	r2, r3
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	691b      	ldr	r3, [r3, #16]
 8014238:	3b01      	subs	r3, #1
 801423a:	061b      	lsls	r3, r3, #24
 801423c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014240:	4931      	ldr	r1, [pc, #196]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 8014242:	4313      	orrs	r3, r2
 8014244:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8014246:	4b30      	ldr	r3, [pc, #192]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 8014248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801424a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	695b      	ldr	r3, [r3, #20]
 8014252:	492d      	ldr	r1, [pc, #180]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 8014254:	4313      	orrs	r3, r2
 8014256:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8014258:	4b2b      	ldr	r3, [pc, #172]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 801425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801425c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	699b      	ldr	r3, [r3, #24]
 8014264:	4928      	ldr	r1, [pc, #160]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 8014266:	4313      	orrs	r3, r2
 8014268:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801426a:	4b27      	ldr	r3, [pc, #156]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 801426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801426e:	4a26      	ldr	r2, [pc, #152]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 8014270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8014276:	4b24      	ldr	r3, [pc, #144]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 8014278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801427a:	4b24      	ldr	r3, [pc, #144]	; (801430c <RCCEx_PLL3_Config+0x160>)
 801427c:	4013      	ands	r3, r2
 801427e:	687a      	ldr	r2, [r7, #4]
 8014280:	69d2      	ldr	r2, [r2, #28]
 8014282:	00d2      	lsls	r2, r2, #3
 8014284:	4920      	ldr	r1, [pc, #128]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 8014286:	4313      	orrs	r3, r2
 8014288:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801428a:	4b1f      	ldr	r3, [pc, #124]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 801428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801428e:	4a1e      	ldr	r2, [pc, #120]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 8014290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014294:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8014296:	683b      	ldr	r3, [r7, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d106      	bne.n	80142aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801429c:	4b1a      	ldr	r3, [pc, #104]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 801429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142a0:	4a19      	ldr	r2, [pc, #100]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80142a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80142a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80142a8:	e00f      	b.n	80142ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	2b01      	cmp	r3, #1
 80142ae:	d106      	bne.n	80142be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80142b0:	4b15      	ldr	r3, [pc, #84]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80142b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142b4:	4a14      	ldr	r2, [pc, #80]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80142b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80142ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80142bc:	e005      	b.n	80142ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80142be:	4b12      	ldr	r3, [pc, #72]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80142c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c2:	4a11      	ldr	r2, [pc, #68]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80142c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80142c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80142ca:	4b0f      	ldr	r3, [pc, #60]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	4a0e      	ldr	r2, [pc, #56]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80142d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80142d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80142d6:	f7fa fa99 	bl	800e80c <HAL_GetTick>
 80142da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80142dc:	e008      	b.n	80142f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80142de:	f7fa fa95 	bl	800e80c <HAL_GetTick>
 80142e2:	4602      	mov	r2, r0
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	1ad3      	subs	r3, r2, r3
 80142e8:	2b02      	cmp	r3, #2
 80142ea:	d901      	bls.n	80142f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80142ec:	2303      	movs	r3, #3
 80142ee:	e006      	b.n	80142fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80142f0:	4b05      	ldr	r3, [pc, #20]	; (8014308 <RCCEx_PLL3_Config+0x15c>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d0f0      	beq.n	80142de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80142fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3710      	adds	r7, #16
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
 8014306:	bf00      	nop
 8014308:	58024400 	.word	0x58024400
 801430c:	ffff0007 	.word	0xffff0007

08014310 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b082      	sub	sp, #8
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d101      	bne.n	8014324 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8014320:	2301      	movs	r3, #1
 8014322:	e02b      	b.n	801437c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801432a:	b2db      	uxtb	r3, r3
 801432c:	2b00      	cmp	r3, #0
 801432e:	d106      	bne.n	801433e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	2200      	movs	r2, #0
 8014334:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f7ee fbb1 	bl	8002aa0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	2202      	movs	r2, #2
 8014342:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	681a      	ldr	r2, [r3, #0]
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	3304      	adds	r3, #4
 801434e:	4619      	mov	r1, r3
 8014350:	4610      	mov	r0, r2
 8014352:	f002 fd37 	bl	8016dc4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	6818      	ldr	r0, [r3, #0]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	685b      	ldr	r3, [r3, #4]
 801435e:	461a      	mov	r2, r3
 8014360:	6839      	ldr	r1, [r7, #0]
 8014362:	f002 fd8b 	bl	8016e7c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8014366:	4b07      	ldr	r3, [pc, #28]	; (8014384 <HAL_SDRAM_Init+0x74>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	4a06      	ldr	r2, [pc, #24]	; (8014384 <HAL_SDRAM_Init+0x74>)
 801436c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014370:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2201      	movs	r2, #1
 8014376:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801437a:	2300      	movs	r3, #0
}
 801437c:	4618      	mov	r0, r3
 801437e:	3708      	adds	r7, #8
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}
 8014384:	52004000 	.word	0x52004000

08014388 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b082      	sub	sp, #8
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8014390:	6878      	ldr	r0, [r7, #4]
 8014392:	f7ee fbc9 	bl	8002b28 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	681a      	ldr	r2, [r3, #0]
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	685b      	ldr	r3, [r3, #4]
 801439e:	4619      	mov	r1, r3
 80143a0:	4610      	mov	r0, r2
 80143a2:	f002 fdd5 	bl	8016f50 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2200      	movs	r2, #0
 80143aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2200      	movs	r2, #0
 80143b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 80143b6:	2300      	movs	r3, #0
}
 80143b8:	4618      	mov	r0, r3
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}

080143c0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b086      	sub	sp, #24
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	60b9      	str	r1, [r7, #8]
 80143ca:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80143d2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80143d4:	7dfb      	ldrb	r3, [r7, #23]
 80143d6:	2b02      	cmp	r3, #2
 80143d8:	d101      	bne.n	80143de <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80143da:	2302      	movs	r3, #2
 80143dc:	e021      	b.n	8014422 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80143de:	7dfb      	ldrb	r3, [r7, #23]
 80143e0:	2b01      	cmp	r3, #1
 80143e2:	d002      	beq.n	80143ea <HAL_SDRAM_SendCommand+0x2a>
 80143e4:	7dfb      	ldrb	r3, [r7, #23]
 80143e6:	2b05      	cmp	r3, #5
 80143e8:	d118      	bne.n	801441c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	2202      	movs	r2, #2
 80143ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	687a      	ldr	r2, [r7, #4]
 80143f8:	68b9      	ldr	r1, [r7, #8]
 80143fa:	4618      	mov	r0, r3
 80143fc:	f002 fdca 	bl	8016f94 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	2b02      	cmp	r3, #2
 8014406:	d104      	bne.n	8014412 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	2205      	movs	r2, #5
 801440c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8014410:	e006      	b.n	8014420 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	2201      	movs	r2, #1
 8014416:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801441a:	e001      	b.n	8014420 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 801441c:	2301      	movs	r3, #1
 801441e:	e000      	b.n	8014422 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8014420:	2300      	movs	r3, #0
}
 8014422:	4618      	mov	r0, r3
 8014424:	3718      	adds	r7, #24
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}

0801442a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801442a:	b580      	push	{r7, lr}
 801442c:	b082      	sub	sp, #8
 801442e:	af00      	add	r7, sp, #0
 8014430:	6078      	str	r0, [r7, #4]
 8014432:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801443a:	b2db      	uxtb	r3, r3
 801443c:	2b02      	cmp	r3, #2
 801443e:	d101      	bne.n	8014444 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8014440:	2302      	movs	r3, #2
 8014442:	e016      	b.n	8014472 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801444a:	b2db      	uxtb	r3, r3
 801444c:	2b01      	cmp	r3, #1
 801444e:	d10f      	bne.n	8014470 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2202      	movs	r2, #2
 8014454:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	6839      	ldr	r1, [r7, #0]
 801445e:	4618      	mov	r0, r3
 8014460:	f002 fdbc 	bl	8016fdc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2201      	movs	r2, #1
 8014468:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801446c:	2300      	movs	r3, #0
 801446e:	e000      	b.n	8014472 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8014470:	2301      	movs	r3, #1
}
 8014472:	4618      	mov	r0, r3
 8014474:	3708      	adds	r7, #8
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}
	...

0801447c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b084      	sub	sp, #16
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d101      	bne.n	801448e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801448a:	2301      	movs	r3, #1
 801448c:	e0f1      	b.n	8014672 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2200      	movs	r2, #0
 8014492:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	4a78      	ldr	r2, [pc, #480]	; (801467c <HAL_SPI_Init+0x200>)
 801449a:	4293      	cmp	r3, r2
 801449c:	d00f      	beq.n	80144be <HAL_SPI_Init+0x42>
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	4a77      	ldr	r2, [pc, #476]	; (8014680 <HAL_SPI_Init+0x204>)
 80144a4:	4293      	cmp	r3, r2
 80144a6:	d00a      	beq.n	80144be <HAL_SPI_Init+0x42>
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	4a75      	ldr	r2, [pc, #468]	; (8014684 <HAL_SPI_Init+0x208>)
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d005      	beq.n	80144be <HAL_SPI_Init+0x42>
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	68db      	ldr	r3, [r3, #12]
 80144b6:	2b0f      	cmp	r3, #15
 80144b8:	d901      	bls.n	80144be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80144ba:	2301      	movs	r3, #1
 80144bc:	e0d9      	b.n	8014672 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f001 f88e 	bl	80155e0 <SPI_GetPacketSize>
 80144c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	4a6c      	ldr	r2, [pc, #432]	; (801467c <HAL_SPI_Init+0x200>)
 80144cc:	4293      	cmp	r3, r2
 80144ce:	d00c      	beq.n	80144ea <HAL_SPI_Init+0x6e>
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	4a6a      	ldr	r2, [pc, #424]	; (8014680 <HAL_SPI_Init+0x204>)
 80144d6:	4293      	cmp	r3, r2
 80144d8:	d007      	beq.n	80144ea <HAL_SPI_Init+0x6e>
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	4a69      	ldr	r2, [pc, #420]	; (8014684 <HAL_SPI_Init+0x208>)
 80144e0:	4293      	cmp	r3, r2
 80144e2:	d002      	beq.n	80144ea <HAL_SPI_Init+0x6e>
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	2b08      	cmp	r3, #8
 80144e8:	d811      	bhi.n	801450e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80144ee:	4a63      	ldr	r2, [pc, #396]	; (801467c <HAL_SPI_Init+0x200>)
 80144f0:	4293      	cmp	r3, r2
 80144f2:	d009      	beq.n	8014508 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	4a61      	ldr	r2, [pc, #388]	; (8014680 <HAL_SPI_Init+0x204>)
 80144fa:	4293      	cmp	r3, r2
 80144fc:	d004      	beq.n	8014508 <HAL_SPI_Init+0x8c>
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	4a60      	ldr	r2, [pc, #384]	; (8014684 <HAL_SPI_Init+0x208>)
 8014504:	4293      	cmp	r3, r2
 8014506:	d104      	bne.n	8014512 <HAL_SPI_Init+0x96>
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	2b10      	cmp	r3, #16
 801450c:	d901      	bls.n	8014512 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801450e:	2301      	movs	r3, #1
 8014510:	e0af      	b.n	8014672 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014518:	b2db      	uxtb	r3, r3
 801451a:	2b00      	cmp	r3, #0
 801451c:	d106      	bne.n	801452c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2200      	movs	r2, #0
 8014522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f7ee f8ea 	bl	8002700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2202      	movs	r2, #2
 8014530:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	681a      	ldr	r2, [r3, #0]
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	f022 0201 	bic.w	r2, r2, #1
 8014542:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	689b      	ldr	r3, [r3, #8]
 801454a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801454e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	699b      	ldr	r3, [r3, #24]
 8014554:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014558:	d119      	bne.n	801458e <HAL_SPI_Init+0x112>
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	685b      	ldr	r3, [r3, #4]
 801455e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014562:	d103      	bne.n	801456c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014568:	2b00      	cmp	r3, #0
 801456a:	d008      	beq.n	801457e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014570:	2b00      	cmp	r3, #0
 8014572:	d10c      	bne.n	801458e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801457c:	d107      	bne.n	801458e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	681a      	ldr	r2, [r3, #0]
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801458c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	69da      	ldr	r2, [r3, #28]
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014596:	431a      	orrs	r2, r3
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	431a      	orrs	r2, r3
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145a0:	ea42 0103 	orr.w	r1, r2, r3
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	68da      	ldr	r2, [r3, #12]
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	430a      	orrs	r2, r1
 80145ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145b8:	431a      	orrs	r2, r3
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145be:	431a      	orrs	r2, r3
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	699b      	ldr	r3, [r3, #24]
 80145c4:	431a      	orrs	r2, r3
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	691b      	ldr	r3, [r3, #16]
 80145ca:	431a      	orrs	r2, r3
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	695b      	ldr	r3, [r3, #20]
 80145d0:	431a      	orrs	r2, r3
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	6a1b      	ldr	r3, [r3, #32]
 80145d6:	431a      	orrs	r2, r3
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	685b      	ldr	r3, [r3, #4]
 80145dc:	431a      	orrs	r2, r3
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145e2:	431a      	orrs	r2, r3
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	689b      	ldr	r3, [r3, #8]
 80145e8:	431a      	orrs	r2, r3
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80145ee:	ea42 0103 	orr.w	r1, r2, r3
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	430a      	orrs	r2, r1
 80145fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d113      	bne.n	801462e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	689b      	ldr	r3, [r3, #8]
 801460c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014618:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	689b      	ldr	r3, [r3, #8]
 8014620:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801462c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	f022 0201 	bic.w	r2, r2, #1
 801463c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	685b      	ldr	r3, [r3, #4]
 8014642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014646:	2b00      	cmp	r3, #0
 8014648:	d00a      	beq.n	8014660 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	68db      	ldr	r3, [r3, #12]
 8014650:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	430a      	orrs	r2, r1
 801465e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2200      	movs	r2, #0
 8014664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2201      	movs	r2, #1
 801466c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8014670:	2300      	movs	r3, #0
}
 8014672:	4618      	mov	r0, r3
 8014674:	3710      	adds	r7, #16
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
 801467a:	bf00      	nop
 801467c:	40013000 	.word	0x40013000
 8014680:	40003800 	.word	0x40003800
 8014684:	40003c00 	.word	0x40003c00

08014688 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b08a      	sub	sp, #40	; 0x28
 801468c:	af02      	add	r7, sp, #8
 801468e:	60f8      	str	r0, [r7, #12]
 8014690:	60b9      	str	r1, [r7, #8]
 8014692:	603b      	str	r3, [r7, #0]
 8014694:	4613      	mov	r3, r2
 8014696:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	3320      	adds	r3, #32
 801469e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80146a0:	2300      	movs	r3, #0
 80146a2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80146aa:	2b01      	cmp	r3, #1
 80146ac:	d101      	bne.n	80146b2 <HAL_SPI_Transmit+0x2a>
 80146ae:	2302      	movs	r3, #2
 80146b0:	e1d7      	b.n	8014a62 <HAL_SPI_Transmit+0x3da>
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	2201      	movs	r2, #1
 80146b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80146ba:	f7fa f8a7 	bl	800e80c <HAL_GetTick>
 80146be:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80146c6:	b2db      	uxtb	r3, r3
 80146c8:	2b01      	cmp	r3, #1
 80146ca:	d007      	beq.n	80146dc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80146cc:	2302      	movs	r3, #2
 80146ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	2200      	movs	r2, #0
 80146d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80146d8:	7efb      	ldrb	r3, [r7, #27]
 80146da:	e1c2      	b.n	8014a62 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d002      	beq.n	80146e8 <HAL_SPI_Transmit+0x60>
 80146e2:	88fb      	ldrh	r3, [r7, #6]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d107      	bne.n	80146f8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80146e8:	2301      	movs	r3, #1
 80146ea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2200      	movs	r2, #0
 80146f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80146f4:	7efb      	ldrb	r3, [r7, #27]
 80146f6:	e1b4      	b.n	8014a62 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	2203      	movs	r2, #3
 80146fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	2200      	movs	r2, #0
 8014704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	68ba      	ldr	r2, [r7, #8]
 801470c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	88fa      	ldrh	r2, [r7, #6]
 8014712:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	88fa      	ldrh	r2, [r7, #6]
 801471a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	2200      	movs	r2, #0
 8014722:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	2200      	movs	r2, #0
 8014728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	2200      	movs	r2, #0
 8014730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	2200      	movs	r2, #0
 8014738:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	2200      	movs	r2, #0
 801473e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	689b      	ldr	r3, [r3, #8]
 8014744:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8014748:	d107      	bne.n	801475a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014758:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	685a      	ldr	r2, [r3, #4]
 8014760:	4b96      	ldr	r3, [pc, #600]	; (80149bc <HAL_SPI_Transmit+0x334>)
 8014762:	4013      	ands	r3, r2
 8014764:	88f9      	ldrh	r1, [r7, #6]
 8014766:	68fa      	ldr	r2, [r7, #12]
 8014768:	6812      	ldr	r2, [r2, #0]
 801476a:	430b      	orrs	r3, r1
 801476c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	681a      	ldr	r2, [r3, #0]
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	f042 0201 	orr.w	r2, r2, #1
 801477c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	685b      	ldr	r3, [r3, #4]
 8014782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014786:	d107      	bne.n	8014798 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	681a      	ldr	r2, [r3, #0]
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014796:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	68db      	ldr	r3, [r3, #12]
 801479c:	2b0f      	cmp	r3, #15
 801479e:	d947      	bls.n	8014830 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80147a0:	e03f      	b.n	8014822 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	695b      	ldr	r3, [r3, #20]
 80147a8:	f003 0302 	and.w	r3, r3, #2
 80147ac:	2b02      	cmp	r3, #2
 80147ae:	d114      	bne.n	80147da <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	6812      	ldr	r2, [r2, #0]
 80147ba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80147c0:	1d1a      	adds	r2, r3, #4
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80147cc:	b29b      	uxth	r3, r3
 80147ce:	3b01      	subs	r3, #1
 80147d0:	b29a      	uxth	r2, r3
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80147d8:	e023      	b.n	8014822 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80147da:	f7fa f817 	bl	800e80c <HAL_GetTick>
 80147de:	4602      	mov	r2, r0
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	1ad3      	subs	r3, r2, r3
 80147e4:	683a      	ldr	r2, [r7, #0]
 80147e6:	429a      	cmp	r2, r3
 80147e8:	d803      	bhi.n	80147f2 <HAL_SPI_Transmit+0x16a>
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147f0:	d102      	bne.n	80147f8 <HAL_SPI_Transmit+0x170>
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d114      	bne.n	8014822 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80147f8:	68f8      	ldr	r0, [r7, #12]
 80147fa:	f000 fe23 	bl	8015444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	2200      	movs	r2, #0
 8014802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801480c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	2201      	movs	r2, #1
 801481a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801481e:	2303      	movs	r3, #3
 8014820:	e11f      	b.n	8014a62 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014828:	b29b      	uxth	r3, r3
 801482a:	2b00      	cmp	r3, #0
 801482c:	d1b9      	bne.n	80147a2 <HAL_SPI_Transmit+0x11a>
 801482e:	e0f2      	b.n	8014a16 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	68db      	ldr	r3, [r3, #12]
 8014834:	2b07      	cmp	r3, #7
 8014836:	f240 80e7 	bls.w	8014a08 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801483a:	e05d      	b.n	80148f8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	695b      	ldr	r3, [r3, #20]
 8014842:	f003 0302 	and.w	r3, r3, #2
 8014846:	2b02      	cmp	r3, #2
 8014848:	d132      	bne.n	80148b0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014850:	b29b      	uxth	r3, r3
 8014852:	2b01      	cmp	r3, #1
 8014854:	d918      	bls.n	8014888 <HAL_SPI_Transmit+0x200>
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801485a:	2b00      	cmp	r3, #0
 801485c:	d014      	beq.n	8014888 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	6812      	ldr	r2, [r2, #0]
 8014868:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801486e:	1d1a      	adds	r2, r3, #4
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801487a:	b29b      	uxth	r3, r3
 801487c:	3b02      	subs	r3, #2
 801487e:	b29a      	uxth	r2, r3
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8014886:	e037      	b.n	80148f8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801488c:	881a      	ldrh	r2, [r3, #0]
 801488e:	69fb      	ldr	r3, [r7, #28]
 8014890:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014896:	1c9a      	adds	r2, r3, #2
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	3b01      	subs	r3, #1
 80148a6:	b29a      	uxth	r2, r3
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80148ae:	e023      	b.n	80148f8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80148b0:	f7f9 ffac 	bl	800e80c <HAL_GetTick>
 80148b4:	4602      	mov	r2, r0
 80148b6:	697b      	ldr	r3, [r7, #20]
 80148b8:	1ad3      	subs	r3, r2, r3
 80148ba:	683a      	ldr	r2, [r7, #0]
 80148bc:	429a      	cmp	r2, r3
 80148be:	d803      	bhi.n	80148c8 <HAL_SPI_Transmit+0x240>
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148c6:	d102      	bne.n	80148ce <HAL_SPI_Transmit+0x246>
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d114      	bne.n	80148f8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80148ce:	68f8      	ldr	r0, [r7, #12]
 80148d0:	f000 fdb8 	bl	8015444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	2200      	movs	r2, #0
 80148d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80148e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	2201      	movs	r2, #1
 80148f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80148f4:	2303      	movs	r3, #3
 80148f6:	e0b4      	b.n	8014a62 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80148fe:	b29b      	uxth	r3, r3
 8014900:	2b00      	cmp	r3, #0
 8014902:	d19b      	bne.n	801483c <HAL_SPI_Transmit+0x1b4>
 8014904:	e087      	b.n	8014a16 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	695b      	ldr	r3, [r3, #20]
 801490c:	f003 0302 	and.w	r3, r3, #2
 8014910:	2b02      	cmp	r3, #2
 8014912:	d155      	bne.n	80149c0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801491a:	b29b      	uxth	r3, r3
 801491c:	2b03      	cmp	r3, #3
 801491e:	d918      	bls.n	8014952 <HAL_SPI_Transmit+0x2ca>
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014924:	2b40      	cmp	r3, #64	; 0x40
 8014926:	d914      	bls.n	8014952 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	6812      	ldr	r2, [r2, #0]
 8014932:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014938:	1d1a      	adds	r2, r3, #4
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014944:	b29b      	uxth	r3, r3
 8014946:	3b04      	subs	r3, #4
 8014948:	b29a      	uxth	r2, r3
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8014950:	e05a      	b.n	8014a08 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014958:	b29b      	uxth	r3, r3
 801495a:	2b01      	cmp	r3, #1
 801495c:	d917      	bls.n	801498e <HAL_SPI_Transmit+0x306>
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014962:	2b00      	cmp	r3, #0
 8014964:	d013      	beq.n	801498e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801496a:	881a      	ldrh	r2, [r3, #0]
 801496c:	69fb      	ldr	r3, [r7, #28]
 801496e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014974:	1c9a      	adds	r2, r3, #2
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014980:	b29b      	uxth	r3, r3
 8014982:	3b02      	subs	r3, #2
 8014984:	b29a      	uxth	r2, r3
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801498c:	e03c      	b.n	8014a08 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	3320      	adds	r3, #32
 8014998:	7812      	ldrb	r2, [r2, #0]
 801499a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80149a0:	1c5a      	adds	r2, r3, #1
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80149ac:	b29b      	uxth	r3, r3
 80149ae:	3b01      	subs	r3, #1
 80149b0:	b29a      	uxth	r2, r3
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80149b8:	e026      	b.n	8014a08 <HAL_SPI_Transmit+0x380>
 80149ba:	bf00      	nop
 80149bc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80149c0:	f7f9 ff24 	bl	800e80c <HAL_GetTick>
 80149c4:	4602      	mov	r2, r0
 80149c6:	697b      	ldr	r3, [r7, #20]
 80149c8:	1ad3      	subs	r3, r2, r3
 80149ca:	683a      	ldr	r2, [r7, #0]
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d803      	bhi.n	80149d8 <HAL_SPI_Transmit+0x350>
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149d6:	d102      	bne.n	80149de <HAL_SPI_Transmit+0x356>
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d114      	bne.n	8014a08 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80149de:	68f8      	ldr	r0, [r7, #12]
 80149e0:	f000 fd30 	bl	8015444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	2200      	movs	r2, #0
 80149e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80149f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	2201      	movs	r2, #1
 8014a00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8014a04:	2303      	movs	r3, #3
 8014a06:	e02c      	b.n	8014a62 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014a0e:	b29b      	uxth	r3, r3
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	f47f af78 	bne.w	8014906 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	9300      	str	r3, [sp, #0]
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	2108      	movs	r1, #8
 8014a20:	68f8      	ldr	r0, [r7, #12]
 8014a22:	f000 fdaf 	bl	8015584 <SPI_WaitOnFlagUntilTimeout>
 8014a26:	4603      	mov	r3, r0
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d007      	beq.n	8014a3c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014a32:	f043 0220 	orr.w	r2, r3, #32
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014a3c:	68f8      	ldr	r0, [r7, #12]
 8014a3e:	f000 fd01 	bl	8015444 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	2200      	movs	r2, #0
 8014a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	2201      	movs	r2, #1
 8014a4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d001      	beq.n	8014a60 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	e000      	b.n	8014a62 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8014a60:	7efb      	ldrb	r3, [r7, #27]
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3720      	adds	r7, #32
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
 8014a6a:	bf00      	nop

08014a6c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b08a      	sub	sp, #40	; 0x28
 8014a70:	af02      	add	r7, sp, #8
 8014a72:	60f8      	str	r0, [r7, #12]
 8014a74:	60b9      	str	r1, [r7, #8]
 8014a76:	603b      	str	r3, [r7, #0]
 8014a78:	4613      	mov	r3, r2
 8014a7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	3330      	adds	r3, #48	; 0x30
 8014a86:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	685b      	ldr	r3, [r3, #4]
 8014a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014a90:	d112      	bne.n	8014ab8 <HAL_SPI_Receive+0x4c>
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	689b      	ldr	r3, [r3, #8]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d10e      	bne.n	8014ab8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	2204      	movs	r2, #4
 8014a9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8014aa2:	88fa      	ldrh	r2, [r7, #6]
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	9300      	str	r3, [sp, #0]
 8014aa8:	4613      	mov	r3, r2
 8014aaa:	68ba      	ldr	r2, [r7, #8]
 8014aac:	68b9      	ldr	r1, [r7, #8]
 8014aae:	68f8      	ldr	r0, [r7, #12]
 8014ab0:	f000 f9ce 	bl	8014e50 <HAL_SPI_TransmitReceive>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	e1c7      	b.n	8014e48 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014abe:	2b01      	cmp	r3, #1
 8014ac0:	d101      	bne.n	8014ac6 <HAL_SPI_Receive+0x5a>
 8014ac2:	2302      	movs	r3, #2
 8014ac4:	e1c0      	b.n	8014e48 <HAL_SPI_Receive+0x3dc>
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2201      	movs	r2, #1
 8014aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014ace:	f7f9 fe9d 	bl	800e80c <HAL_GetTick>
 8014ad2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014ada:	b2db      	uxtb	r3, r3
 8014adc:	2b01      	cmp	r3, #1
 8014ade:	d007      	beq.n	8014af0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8014ae0:	2302      	movs	r3, #2
 8014ae2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014aec:	7ffb      	ldrb	r3, [r7, #31]
 8014aee:	e1ab      	b.n	8014e48 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d002      	beq.n	8014afc <HAL_SPI_Receive+0x90>
 8014af6:	88fb      	ldrh	r3, [r7, #6]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d107      	bne.n	8014b0c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8014afc:	2301      	movs	r3, #1
 8014afe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2200      	movs	r2, #0
 8014b04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014b08:	7ffb      	ldrb	r3, [r7, #31]
 8014b0a:	e19d      	b.n	8014e48 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	2204      	movs	r2, #4
 8014b10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	2200      	movs	r2, #0
 8014b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	68ba      	ldr	r2, [r7, #8]
 8014b20:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	88fa      	ldrh	r2, [r7, #6]
 8014b26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	88fa      	ldrh	r2, [r7, #6]
 8014b2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	2200      	movs	r2, #0
 8014b36:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	2200      	movs	r2, #0
 8014b44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	2200      	movs	r2, #0
 8014b52:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	689b      	ldr	r3, [r3, #8]
 8014b58:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8014b5c:	d107      	bne.n	8014b6e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	681a      	ldr	r2, [r3, #0]
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014b6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	685a      	ldr	r2, [r3, #4]
 8014b74:	4b94      	ldr	r3, [pc, #592]	; (8014dc8 <HAL_SPI_Receive+0x35c>)
 8014b76:	4013      	ands	r3, r2
 8014b78:	88f9      	ldrh	r1, [r7, #6]
 8014b7a:	68fa      	ldr	r2, [r7, #12]
 8014b7c:	6812      	ldr	r2, [r2, #0]
 8014b7e:	430b      	orrs	r3, r1
 8014b80:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	681a      	ldr	r2, [r3, #0]
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	f042 0201 	orr.w	r2, r2, #1
 8014b90:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014b9a:	d107      	bne.n	8014bac <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	681a      	ldr	r2, [r3, #0]
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014baa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	68db      	ldr	r3, [r3, #12]
 8014bb0:	2b0f      	cmp	r3, #15
 8014bb2:	d948      	bls.n	8014c46 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014bb4:	e040      	b.n	8014c38 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	695a      	ldr	r2, [r3, #20]
 8014bbc:	f248 0308 	movw	r3, #32776	; 0x8008
 8014bc0:	4013      	ands	r3, r2
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d014      	beq.n	8014bf0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	681a      	ldr	r2, [r3, #0]
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014bce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8014bd0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014bd6:	1d1a      	adds	r2, r3, #4
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	3b01      	subs	r3, #1
 8014be6:	b29a      	uxth	r2, r3
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014bee:	e023      	b.n	8014c38 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014bf0:	f7f9 fe0c 	bl	800e80c <HAL_GetTick>
 8014bf4:	4602      	mov	r2, r0
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	1ad3      	subs	r3, r2, r3
 8014bfa:	683a      	ldr	r2, [r7, #0]
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	d803      	bhi.n	8014c08 <HAL_SPI_Receive+0x19c>
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c06:	d102      	bne.n	8014c0e <HAL_SPI_Receive+0x1a2>
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d114      	bne.n	8014c38 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014c0e:	68f8      	ldr	r0, [r7, #12]
 8014c10:	f000 fc18 	bl	8015444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	2200      	movs	r2, #0
 8014c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	2201      	movs	r2, #1
 8014c30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8014c34:	2303      	movs	r3, #3
 8014c36:	e107      	b.n	8014e48 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014c3e:	b29b      	uxth	r3, r3
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d1b8      	bne.n	8014bb6 <HAL_SPI_Receive+0x14a>
 8014c44:	e0ed      	b.n	8014e22 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	68db      	ldr	r3, [r3, #12]
 8014c4a:	2b07      	cmp	r3, #7
 8014c4c:	f240 80e2 	bls.w	8014e14 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014c50:	e05b      	b.n	8014d0a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	695b      	ldr	r3, [r3, #20]
 8014c58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d030      	beq.n	8014cc2 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	695b      	ldr	r3, [r3, #20]
 8014c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d014      	beq.n	8014c98 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	681a      	ldr	r2, [r3, #0]
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014c76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8014c78:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014c7e:	1d1a      	adds	r2, r3, #4
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014c8a:	b29b      	uxth	r3, r3
 8014c8c:	3b02      	subs	r3, #2
 8014c8e:	b29a      	uxth	r2, r3
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014c96:	e038      	b.n	8014d0a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014c9c:	69ba      	ldr	r2, [r7, #24]
 8014c9e:	8812      	ldrh	r2, [r2, #0]
 8014ca0:	b292      	uxth	r2, r2
 8014ca2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014ca8:	1c9a      	adds	r2, r3, #2
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014cb4:	b29b      	uxth	r3, r3
 8014cb6:	3b01      	subs	r3, #1
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014cc0:	e023      	b.n	8014d0a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014cc2:	f7f9 fda3 	bl	800e80c <HAL_GetTick>
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	1ad3      	subs	r3, r2, r3
 8014ccc:	683a      	ldr	r2, [r7, #0]
 8014cce:	429a      	cmp	r2, r3
 8014cd0:	d803      	bhi.n	8014cda <HAL_SPI_Receive+0x26e>
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cd8:	d102      	bne.n	8014ce0 <HAL_SPI_Receive+0x274>
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d114      	bne.n	8014d0a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014ce0:	68f8      	ldr	r0, [r7, #12]
 8014ce2:	f000 fbaf 	bl	8015444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014cf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	2201      	movs	r2, #1
 8014d02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8014d06:	2303      	movs	r3, #3
 8014d08:	e09e      	b.n	8014e48 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014d10:	b29b      	uxth	r3, r3
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d19d      	bne.n	8014c52 <HAL_SPI_Receive+0x1e6>
 8014d16:	e084      	b.n	8014e22 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	695b      	ldr	r3, [r3, #20]
 8014d1e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d052      	beq.n	8014dcc <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	695b      	ldr	r3, [r3, #20]
 8014d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d014      	beq.n	8014d5e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	681a      	ldr	r2, [r3, #0]
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014d3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8014d3e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014d44:	1d1a      	adds	r2, r3, #4
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014d50:	b29b      	uxth	r3, r3
 8014d52:	3b04      	subs	r3, #4
 8014d54:	b29a      	uxth	r2, r3
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014d5c:	e05a      	b.n	8014e14 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	695b      	ldr	r3, [r3, #20]
 8014d64:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8014d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014d6c:	d914      	bls.n	8014d98 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014d72:	69ba      	ldr	r2, [r7, #24]
 8014d74:	8812      	ldrh	r2, [r2, #0]
 8014d76:	b292      	uxth	r2, r2
 8014d78:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014d7e:	1c9a      	adds	r2, r3, #2
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014d8a:	b29b      	uxth	r3, r3
 8014d8c:	3b02      	subs	r3, #2
 8014d8e:	b29a      	uxth	r2, r3
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014d96:	e03d      	b.n	8014e14 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014da4:	7812      	ldrb	r2, [r2, #0]
 8014da6:	b2d2      	uxtb	r2, r2
 8014da8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014dae:	1c5a      	adds	r2, r3, #1
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014dba:	b29b      	uxth	r3, r3
 8014dbc:	3b01      	subs	r3, #1
 8014dbe:	b29a      	uxth	r2, r3
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014dc6:	e025      	b.n	8014e14 <HAL_SPI_Receive+0x3a8>
 8014dc8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014dcc:	f7f9 fd1e 	bl	800e80c <HAL_GetTick>
 8014dd0:	4602      	mov	r2, r0
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	1ad3      	subs	r3, r2, r3
 8014dd6:	683a      	ldr	r2, [r7, #0]
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	d803      	bhi.n	8014de4 <HAL_SPI_Receive+0x378>
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014de2:	d102      	bne.n	8014dea <HAL_SPI_Receive+0x37e>
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d114      	bne.n	8014e14 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014dea:	68f8      	ldr	r0, [r7, #12]
 8014dec:	f000 fb2a 	bl	8015444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	2200      	movs	r2, #0
 8014df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014dfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	2201      	movs	r2, #1
 8014e0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8014e10:	2303      	movs	r3, #3
 8014e12:	e019      	b.n	8014e48 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014e1a:	b29b      	uxth	r3, r3
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	f47f af7b 	bne.w	8014d18 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014e22:	68f8      	ldr	r0, [r7, #12]
 8014e24:	f000 fb0e 	bl	8015444 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	2201      	movs	r2, #1
 8014e34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d001      	beq.n	8014e46 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8014e42:	2301      	movs	r3, #1
 8014e44:	e000      	b.n	8014e48 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8014e46:	7ffb      	ldrb	r3, [r7, #31]
}
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3720      	adds	r7, #32
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}

08014e50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b08e      	sub	sp, #56	; 0x38
 8014e54:	af02      	add	r7, sp, #8
 8014e56:	60f8      	str	r0, [r7, #12]
 8014e58:	60b9      	str	r1, [r7, #8]
 8014e5a:	607a      	str	r2, [r7, #4]
 8014e5c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	3320      	adds	r3, #32
 8014e6a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	3330      	adds	r3, #48	; 0x30
 8014e72:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014e7a:	2b01      	cmp	r3, #1
 8014e7c:	d101      	bne.n	8014e82 <HAL_SPI_TransmitReceive+0x32>
 8014e7e:	2302      	movs	r3, #2
 8014e80:	e2ce      	b.n	8015420 <HAL_SPI_TransmitReceive+0x5d0>
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	2201      	movs	r2, #1
 8014e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014e8a:	f7f9 fcbf 	bl	800e80c <HAL_GetTick>
 8014e8e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8014e90:	887b      	ldrh	r3, [r7, #2]
 8014e92:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8014e94:	887b      	ldrh	r3, [r7, #2]
 8014e96:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014e9e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	685b      	ldr	r3, [r3, #4]
 8014ea4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8014ea6:	7efb      	ldrb	r3, [r7, #27]
 8014ea8:	2b01      	cmp	r3, #1
 8014eaa:	d014      	beq.n	8014ed6 <HAL_SPI_TransmitReceive+0x86>
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014eb2:	d106      	bne.n	8014ec2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d102      	bne.n	8014ec2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8014ebc:	7efb      	ldrb	r3, [r7, #27]
 8014ebe:	2b04      	cmp	r3, #4
 8014ec0:	d009      	beq.n	8014ed6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8014ec2:	2302      	movs	r3, #2
 8014ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	2200      	movs	r2, #0
 8014ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014ed4:	e2a4      	b.n	8015420 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d005      	beq.n	8014ee8 <HAL_SPI_TransmitReceive+0x98>
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d002      	beq.n	8014ee8 <HAL_SPI_TransmitReceive+0x98>
 8014ee2:	887b      	ldrh	r3, [r7, #2]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d109      	bne.n	8014efc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8014ee8:	2301      	movs	r3, #1
 8014eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014efa:	e291      	b.n	8015420 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014f02:	b2db      	uxtb	r3, r3
 8014f04:	2b04      	cmp	r3, #4
 8014f06:	d003      	beq.n	8014f10 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	2205      	movs	r2, #5
 8014f0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	2200      	movs	r2, #0
 8014f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	687a      	ldr	r2, [r7, #4]
 8014f1c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	887a      	ldrh	r2, [r7, #2]
 8014f22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	887a      	ldrh	r2, [r7, #2]
 8014f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	68ba      	ldr	r2, [r7, #8]
 8014f32:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	887a      	ldrh	r2, [r7, #2]
 8014f38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	887a      	ldrh	r2, [r7, #2]
 8014f40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2200      	movs	r2, #0
 8014f48:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	685a      	ldr	r2, [r3, #4]
 8014f56:	4b9f      	ldr	r3, [pc, #636]	; (80151d4 <HAL_SPI_TransmitReceive+0x384>)
 8014f58:	4013      	ands	r3, r2
 8014f5a:	8879      	ldrh	r1, [r7, #2]
 8014f5c:	68fa      	ldr	r2, [r7, #12]
 8014f5e:	6812      	ldr	r2, [r2, #0]
 8014f60:	430b      	orrs	r3, r1
 8014f62:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	681a      	ldr	r2, [r3, #0]
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	f042 0201 	orr.w	r2, r2, #1
 8014f72:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014f7c:	d107      	bne.n	8014f8e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	681a      	ldr	r2, [r3, #0]
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014f8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	68db      	ldr	r3, [r3, #12]
 8014f92:	2b0f      	cmp	r3, #15
 8014f94:	d970      	bls.n	8015078 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014f96:	e068      	b.n	801506a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	695b      	ldr	r3, [r3, #20]
 8014f9e:	f003 0302 	and.w	r3, r3, #2
 8014fa2:	2b02      	cmp	r3, #2
 8014fa4:	d11a      	bne.n	8014fdc <HAL_SPI_TransmitReceive+0x18c>
 8014fa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d017      	beq.n	8014fdc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	6812      	ldr	r2, [r2, #0]
 8014fb6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014fbc:	1d1a      	adds	r2, r3, #4
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	3b01      	subs	r3, #1
 8014fcc:	b29a      	uxth	r2, r3
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014fda:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	695a      	ldr	r2, [r3, #20]
 8014fe2:	f248 0308 	movw	r3, #32776	; 0x8008
 8014fe6:	4013      	ands	r3, r2
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d01a      	beq.n	8015022 <HAL_SPI_TransmitReceive+0x1d2>
 8014fec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d017      	beq.n	8015022 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	681a      	ldr	r2, [r3, #0]
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014ffa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8014ffc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015002:	1d1a      	adds	r2, r3, #4
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801500e:	b29b      	uxth	r3, r3
 8015010:	3b01      	subs	r3, #1
 8015012:	b29a      	uxth	r2, r3
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015020:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015022:	f7f9 fbf3 	bl	800e80c <HAL_GetTick>
 8015026:	4602      	mov	r2, r0
 8015028:	69fb      	ldr	r3, [r7, #28]
 801502a:	1ad3      	subs	r3, r2, r3
 801502c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801502e:	429a      	cmp	r2, r3
 8015030:	d803      	bhi.n	801503a <HAL_SPI_TransmitReceive+0x1ea>
 8015032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015038:	d102      	bne.n	8015040 <HAL_SPI_TransmitReceive+0x1f0>
 801503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801503c:	2b00      	cmp	r3, #0
 801503e:	d114      	bne.n	801506a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8015040:	68f8      	ldr	r0, [r7, #12]
 8015042:	f000 f9ff 	bl	8015444 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2200      	movs	r2, #0
 801504a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015054:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	2201      	movs	r2, #1
 8015062:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8015066:	2303      	movs	r3, #3
 8015068:	e1da      	b.n	8015420 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801506a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801506c:	2b00      	cmp	r3, #0
 801506e:	d193      	bne.n	8014f98 <HAL_SPI_TransmitReceive+0x148>
 8015070:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015072:	2b00      	cmp	r3, #0
 8015074:	d190      	bne.n	8014f98 <HAL_SPI_TransmitReceive+0x148>
 8015076:	e1ac      	b.n	80153d2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	68db      	ldr	r3, [r3, #12]
 801507c:	2b07      	cmp	r3, #7
 801507e:	f240 81a0 	bls.w	80153c2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015082:	e0a9      	b.n	80151d8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	695b      	ldr	r3, [r3, #20]
 801508a:	f003 0302 	and.w	r3, r3, #2
 801508e:	2b02      	cmp	r3, #2
 8015090:	d139      	bne.n	8015106 <HAL_SPI_TransmitReceive+0x2b6>
 8015092:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015094:	2b00      	cmp	r3, #0
 8015096:	d036      	beq.n	8015106 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8015098:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801509a:	2b01      	cmp	r3, #1
 801509c:	d91c      	bls.n	80150d8 <HAL_SPI_TransmitReceive+0x288>
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d018      	beq.n	80150d8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	6812      	ldr	r2, [r2, #0]
 80150b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80150b6:	1d1a      	adds	r2, r3, #4
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80150c2:	b29b      	uxth	r3, r3
 80150c4:	3b02      	subs	r3, #2
 80150c6:	b29a      	uxth	r2, r3
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80150d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80150d6:	e016      	b.n	8015106 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80150dc:	881a      	ldrh	r2, [r3, #0]
 80150de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80150e6:	1c9a      	adds	r2, r3, #2
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80150f2:	b29b      	uxth	r3, r3
 80150f4:	3b01      	subs	r3, #1
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015104:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	695b      	ldr	r3, [r3, #20]
 801510c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8015110:	2b00      	cmp	r3, #0
 8015112:	d03a      	beq.n	801518a <HAL_SPI_TransmitReceive+0x33a>
 8015114:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015116:	2b00      	cmp	r3, #0
 8015118:	d037      	beq.n	801518a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	695b      	ldr	r3, [r3, #20]
 8015120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015124:	2b00      	cmp	r3, #0
 8015126:	d018      	beq.n	801515a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	681a      	ldr	r2, [r3, #0]
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015130:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8015132:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015138:	1d1a      	adds	r2, r3, #4
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015144:	b29b      	uxth	r3, r3
 8015146:	3b02      	subs	r3, #2
 8015148:	b29a      	uxth	r2, r3
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015156:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8015158:	e017      	b.n	801518a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801515e:	6a3a      	ldr	r2, [r7, #32]
 8015160:	8812      	ldrh	r2, [r2, #0]
 8015162:	b292      	uxth	r2, r2
 8015164:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801516a:	1c9a      	adds	r2, r3, #2
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015176:	b29b      	uxth	r3, r3
 8015178:	3b01      	subs	r3, #1
 801517a:	b29a      	uxth	r2, r3
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015188:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801518a:	f7f9 fb3f 	bl	800e80c <HAL_GetTick>
 801518e:	4602      	mov	r2, r0
 8015190:	69fb      	ldr	r3, [r7, #28]
 8015192:	1ad3      	subs	r3, r2, r3
 8015194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015196:	429a      	cmp	r2, r3
 8015198:	d803      	bhi.n	80151a2 <HAL_SPI_TransmitReceive+0x352>
 801519a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151a0:	d102      	bne.n	80151a8 <HAL_SPI_TransmitReceive+0x358>
 80151a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d117      	bne.n	80151d8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80151a8:	68f8      	ldr	r0, [r7, #12]
 80151aa:	f000 f94b 	bl	8015444 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	2200      	movs	r2, #0
 80151b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80151bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	2201      	movs	r2, #1
 80151ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80151ce:	2303      	movs	r3, #3
 80151d0:	e126      	b.n	8015420 <HAL_SPI_TransmitReceive+0x5d0>
 80151d2:	bf00      	nop
 80151d4:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80151d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80151da:	2b00      	cmp	r3, #0
 80151dc:	f47f af52 	bne.w	8015084 <HAL_SPI_TransmitReceive+0x234>
 80151e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	f47f af4e 	bne.w	8015084 <HAL_SPI_TransmitReceive+0x234>
 80151e8:	e0f3      	b.n	80153d2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	695b      	ldr	r3, [r3, #20]
 80151f0:	f003 0302 	and.w	r3, r3, #2
 80151f4:	2b02      	cmp	r3, #2
 80151f6:	d15a      	bne.n	80152ae <HAL_SPI_TransmitReceive+0x45e>
 80151f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d057      	beq.n	80152ae <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80151fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015200:	2b03      	cmp	r3, #3
 8015202:	d91c      	bls.n	801523e <HAL_SPI_TransmitReceive+0x3ee>
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015208:	2b40      	cmp	r3, #64	; 0x40
 801520a:	d918      	bls.n	801523e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	6812      	ldr	r2, [r2, #0]
 8015216:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801521c:	1d1a      	adds	r2, r3, #4
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015228:	b29b      	uxth	r3, r3
 801522a:	3b04      	subs	r3, #4
 801522c:	b29a      	uxth	r2, r3
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801523a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801523c:	e037      	b.n	80152ae <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801523e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015240:	2b01      	cmp	r3, #1
 8015242:	d91b      	bls.n	801527c <HAL_SPI_TransmitReceive+0x42c>
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015248:	2b00      	cmp	r3, #0
 801524a:	d017      	beq.n	801527c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015250:	881a      	ldrh	r2, [r3, #0]
 8015252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015254:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801525a:	1c9a      	adds	r2, r3, #2
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015266:	b29b      	uxth	r3, r3
 8015268:	3b02      	subs	r3, #2
 801526a:	b29a      	uxth	r2, r3
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015278:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801527a:	e018      	b.n	80152ae <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	3320      	adds	r3, #32
 8015286:	7812      	ldrb	r2, [r2, #0]
 8015288:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801528e:	1c5a      	adds	r2, r3, #1
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801529a:	b29b      	uxth	r3, r3
 801529c:	3b01      	subs	r3, #1
 801529e:	b29a      	uxth	r2, r3
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80152ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	695b      	ldr	r3, [r3, #20]
 80152b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d05e      	beq.n	801537a <HAL_SPI_TransmitReceive+0x52a>
 80152bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d05b      	beq.n	801537a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	695b      	ldr	r3, [r3, #20]
 80152c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d018      	beq.n	8015302 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	681a      	ldr	r2, [r3, #0]
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80152d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80152da:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80152e0:	1d1a      	adds	r2, r3, #4
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80152ec:	b29b      	uxth	r3, r3
 80152ee:	3b04      	subs	r3, #4
 80152f0:	b29a      	uxth	r2, r3
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80152fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8015300:	e03b      	b.n	801537a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	695b      	ldr	r3, [r3, #20]
 8015308:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 801530c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015310:	d918      	bls.n	8015344 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015316:	6a3a      	ldr	r2, [r7, #32]
 8015318:	8812      	ldrh	r2, [r2, #0]
 801531a:	b292      	uxth	r2, r2
 801531c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015322:	1c9a      	adds	r2, r3, #2
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801532e:	b29b      	uxth	r3, r3
 8015330:	3b02      	subs	r3, #2
 8015332:	b29a      	uxth	r2, r3
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015340:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8015342:	e01a      	b.n	801537a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015350:	7812      	ldrb	r2, [r2, #0]
 8015352:	b2d2      	uxtb	r2, r2
 8015354:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801535a:	1c5a      	adds	r2, r3, #1
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015366:	b29b      	uxth	r3, r3
 8015368:	3b01      	subs	r3, #1
 801536a:	b29a      	uxth	r2, r3
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015378:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801537a:	f7f9 fa47 	bl	800e80c <HAL_GetTick>
 801537e:	4602      	mov	r2, r0
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	1ad3      	subs	r3, r2, r3
 8015384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015386:	429a      	cmp	r2, r3
 8015388:	d803      	bhi.n	8015392 <HAL_SPI_TransmitReceive+0x542>
 801538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015390:	d102      	bne.n	8015398 <HAL_SPI_TransmitReceive+0x548>
 8015392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015394:	2b00      	cmp	r3, #0
 8015396:	d114      	bne.n	80153c2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8015398:	68f8      	ldr	r0, [r7, #12]
 801539a:	f000 f853 	bl	8015444 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	2200      	movs	r2, #0
 80153a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80153ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	2201      	movs	r2, #1
 80153ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80153be:	2303      	movs	r3, #3
 80153c0:	e02e      	b.n	8015420 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80153c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	f47f af10 	bne.w	80151ea <HAL_SPI_TransmitReceive+0x39a>
 80153ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	f47f af0c 	bne.w	80151ea <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80153d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153d4:	9300      	str	r3, [sp, #0]
 80153d6:	69fb      	ldr	r3, [r7, #28]
 80153d8:	2200      	movs	r2, #0
 80153da:	2108      	movs	r1, #8
 80153dc:	68f8      	ldr	r0, [r7, #12]
 80153de:	f000 f8d1 	bl	8015584 <SPI_WaitOnFlagUntilTimeout>
 80153e2:	4603      	mov	r3, r0
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d007      	beq.n	80153f8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80153ee:	f043 0220 	orr.w	r2, r3, #32
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80153f8:	68f8      	ldr	r0, [r7, #12]
 80153fa:	f000 f823 	bl	8015444 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	2200      	movs	r2, #0
 8015402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	2201      	movs	r2, #1
 801540a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015414:	2b00      	cmp	r3, #0
 8015416:	d001      	beq.n	801541c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8015418:	2301      	movs	r3, #1
 801541a:	e001      	b.n	8015420 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 801541c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8015420:	4618      	mov	r0, r3
 8015422:	3730      	adds	r7, #48	; 0x30
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}

08015428 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8015428:	b480      	push	{r7}
 801542a:	b083      	sub	sp, #12
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015436:	b2db      	uxtb	r3, r3
}
 8015438:	4618      	mov	r0, r3
 801543a:	370c      	adds	r7, #12
 801543c:	46bd      	mov	sp, r7
 801543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015442:	4770      	bx	lr

08015444 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8015444:	b480      	push	{r7}
 8015446:	b085      	sub	sp, #20
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	695b      	ldr	r3, [r3, #20]
 8015452:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	699a      	ldr	r2, [r3, #24]
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	f042 0208 	orr.w	r2, r2, #8
 8015462:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	699a      	ldr	r2, [r3, #24]
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	f042 0210 	orr.w	r2, r2, #16
 8015472:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	681a      	ldr	r2, [r3, #0]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	f022 0201 	bic.w	r2, r2, #1
 8015482:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	6919      	ldr	r1, [r3, #16]
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681a      	ldr	r2, [r3, #0]
 801548e:	4b3c      	ldr	r3, [pc, #240]	; (8015580 <SPI_CloseTransfer+0x13c>)
 8015490:	400b      	ands	r3, r1
 8015492:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	689a      	ldr	r2, [r3, #8]
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80154a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80154aa:	b2db      	uxtb	r3, r3
 80154ac:	2b04      	cmp	r3, #4
 80154ae:	d014      	beq.n	80154da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	f003 0320 	and.w	r3, r3, #32
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d00f      	beq.n	80154da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80154c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	699a      	ldr	r2, [r3, #24]
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	f042 0220 	orr.w	r2, r2, #32
 80154d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80154e0:	b2db      	uxtb	r3, r3
 80154e2:	2b03      	cmp	r3, #3
 80154e4:	d014      	beq.n	8015510 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d00f      	beq.n	8015510 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80154f6:	f043 0204 	orr.w	r2, r3, #4
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	699a      	ldr	r2, [r3, #24]
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801550e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015516:	2b00      	cmp	r3, #0
 8015518:	d00f      	beq.n	801553a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015520:	f043 0201 	orr.w	r2, r3, #1
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	699a      	ldr	r2, [r3, #24]
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015538:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015540:	2b00      	cmp	r3, #0
 8015542:	d00f      	beq.n	8015564 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801554a:	f043 0208 	orr.w	r2, r3, #8
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	699a      	ldr	r2, [r3, #24]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015562:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	2200      	movs	r2, #0
 8015568:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2200      	movs	r2, #0
 8015570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8015574:	bf00      	nop
 8015576:	3714      	adds	r7, #20
 8015578:	46bd      	mov	sp, r7
 801557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557e:	4770      	bx	lr
 8015580:	fffffc90 	.word	0xfffffc90

08015584 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b084      	sub	sp, #16
 8015588:	af00      	add	r7, sp, #0
 801558a:	60f8      	str	r0, [r7, #12]
 801558c:	60b9      	str	r1, [r7, #8]
 801558e:	603b      	str	r3, [r7, #0]
 8015590:	4613      	mov	r3, r2
 8015592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015594:	e010      	b.n	80155b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015596:	f7f9 f939 	bl	800e80c <HAL_GetTick>
 801559a:	4602      	mov	r2, r0
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	1ad3      	subs	r3, r2, r3
 80155a0:	69ba      	ldr	r2, [r7, #24]
 80155a2:	429a      	cmp	r2, r3
 80155a4:	d803      	bhi.n	80155ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 80155a6:	69bb      	ldr	r3, [r7, #24]
 80155a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155ac:	d102      	bne.n	80155b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80155ae:	69bb      	ldr	r3, [r7, #24]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d101      	bne.n	80155b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80155b4:	2303      	movs	r3, #3
 80155b6:	e00f      	b.n	80155d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	695a      	ldr	r2, [r3, #20]
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	4013      	ands	r3, r2
 80155c2:	68ba      	ldr	r2, [r7, #8]
 80155c4:	429a      	cmp	r2, r3
 80155c6:	bf0c      	ite	eq
 80155c8:	2301      	moveq	r3, #1
 80155ca:	2300      	movne	r3, #0
 80155cc:	b2db      	uxtb	r3, r3
 80155ce:	461a      	mov	r2, r3
 80155d0:	79fb      	ldrb	r3, [r7, #7]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	d0df      	beq.n	8015596 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80155d6:	2300      	movs	r3, #0
}
 80155d8:	4618      	mov	r0, r3
 80155da:	3710      	adds	r7, #16
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}

080155e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80155e0:	b480      	push	{r7}
 80155e2:	b085      	sub	sp, #20
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80155ec:	095b      	lsrs	r3, r3, #5
 80155ee:	3301      	adds	r3, #1
 80155f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	68db      	ldr	r3, [r3, #12]
 80155f6:	3301      	adds	r3, #1
 80155f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80155fa:	68bb      	ldr	r3, [r7, #8]
 80155fc:	3307      	adds	r3, #7
 80155fe:	08db      	lsrs	r3, r3, #3
 8015600:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8015602:	68bb      	ldr	r3, [r7, #8]
 8015604:	68fa      	ldr	r2, [r7, #12]
 8015606:	fb02 f303 	mul.w	r3, r2, r3
}
 801560a:	4618      	mov	r0, r3
 801560c:	3714      	adds	r7, #20
 801560e:	46bd      	mov	sp, r7
 8015610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015614:	4770      	bx	lr

08015616 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b082      	sub	sp, #8
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d101      	bne.n	8015628 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015624:	2301      	movs	r3, #1
 8015626:	e049      	b.n	80156bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801562e:	b2db      	uxtb	r3, r3
 8015630:	2b00      	cmp	r3, #0
 8015632:	d106      	bne.n	8015642 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	2200      	movs	r2, #0
 8015638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f000 f841 	bl	80156c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	2202      	movs	r2, #2
 8015646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	681a      	ldr	r2, [r3, #0]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	3304      	adds	r3, #4
 8015652:	4619      	mov	r1, r3
 8015654:	4610      	mov	r0, r2
 8015656:	f000 f9ff 	bl	8015a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2201      	movs	r2, #1
 801565e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2201      	movs	r2, #1
 8015666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	2201      	movs	r2, #1
 801566e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	2201      	movs	r2, #1
 8015676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2201      	movs	r2, #1
 801567e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	2201      	movs	r2, #1
 8015686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	2201      	movs	r2, #1
 801568e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2201      	movs	r2, #1
 8015696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	2201      	movs	r2, #1
 801569e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2201      	movs	r2, #1
 80156a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	2201      	movs	r2, #1
 80156ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	2201      	movs	r2, #1
 80156b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80156ba:	2300      	movs	r3, #0
}
 80156bc:	4618      	mov	r0, r3
 80156be:	3708      	adds	r7, #8
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}

080156c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80156c4:	b480      	push	{r7}
 80156c6:	b083      	sub	sp, #12
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80156cc:	bf00      	nop
 80156ce:	370c      	adds	r7, #12
 80156d0:	46bd      	mov	sp, r7
 80156d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d6:	4770      	bx	lr

080156d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80156d8:	b480      	push	{r7}
 80156da:	b085      	sub	sp, #20
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80156e6:	b2db      	uxtb	r3, r3
 80156e8:	2b01      	cmp	r3, #1
 80156ea:	d001      	beq.n	80156f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80156ec:	2301      	movs	r3, #1
 80156ee:	e054      	b.n	801579a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2202      	movs	r2, #2
 80156f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	68da      	ldr	r2, [r3, #12]
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	f042 0201 	orr.w	r2, r2, #1
 8015706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	4a26      	ldr	r2, [pc, #152]	; (80157a8 <HAL_TIM_Base_Start_IT+0xd0>)
 801570e:	4293      	cmp	r3, r2
 8015710:	d022      	beq.n	8015758 <HAL_TIM_Base_Start_IT+0x80>
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801571a:	d01d      	beq.n	8015758 <HAL_TIM_Base_Start_IT+0x80>
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	4a22      	ldr	r2, [pc, #136]	; (80157ac <HAL_TIM_Base_Start_IT+0xd4>)
 8015722:	4293      	cmp	r3, r2
 8015724:	d018      	beq.n	8015758 <HAL_TIM_Base_Start_IT+0x80>
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	4a21      	ldr	r2, [pc, #132]	; (80157b0 <HAL_TIM_Base_Start_IT+0xd8>)
 801572c:	4293      	cmp	r3, r2
 801572e:	d013      	beq.n	8015758 <HAL_TIM_Base_Start_IT+0x80>
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	4a1f      	ldr	r2, [pc, #124]	; (80157b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8015736:	4293      	cmp	r3, r2
 8015738:	d00e      	beq.n	8015758 <HAL_TIM_Base_Start_IT+0x80>
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	4a1e      	ldr	r2, [pc, #120]	; (80157b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8015740:	4293      	cmp	r3, r2
 8015742:	d009      	beq.n	8015758 <HAL_TIM_Base_Start_IT+0x80>
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	4a1c      	ldr	r2, [pc, #112]	; (80157bc <HAL_TIM_Base_Start_IT+0xe4>)
 801574a:	4293      	cmp	r3, r2
 801574c:	d004      	beq.n	8015758 <HAL_TIM_Base_Start_IT+0x80>
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	4a1b      	ldr	r2, [pc, #108]	; (80157c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8015754:	4293      	cmp	r3, r2
 8015756:	d115      	bne.n	8015784 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	689a      	ldr	r2, [r3, #8]
 801575e:	4b19      	ldr	r3, [pc, #100]	; (80157c4 <HAL_TIM_Base_Start_IT+0xec>)
 8015760:	4013      	ands	r3, r2
 8015762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	2b06      	cmp	r3, #6
 8015768:	d015      	beq.n	8015796 <HAL_TIM_Base_Start_IT+0xbe>
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015770:	d011      	beq.n	8015796 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	681a      	ldr	r2, [r3, #0]
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	f042 0201 	orr.w	r2, r2, #1
 8015780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015782:	e008      	b.n	8015796 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	681a      	ldr	r2, [r3, #0]
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	f042 0201 	orr.w	r2, r2, #1
 8015792:	601a      	str	r2, [r3, #0]
 8015794:	e000      	b.n	8015798 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015796:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015798:	2300      	movs	r3, #0
}
 801579a:	4618      	mov	r0, r3
 801579c:	3714      	adds	r7, #20
 801579e:	46bd      	mov	sp, r7
 80157a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a4:	4770      	bx	lr
 80157a6:	bf00      	nop
 80157a8:	40010000 	.word	0x40010000
 80157ac:	40000400 	.word	0x40000400
 80157b0:	40000800 	.word	0x40000800
 80157b4:	40000c00 	.word	0x40000c00
 80157b8:	40010400 	.word	0x40010400
 80157bc:	40001800 	.word	0x40001800
 80157c0:	40014000 	.word	0x40014000
 80157c4:	00010007 	.word	0x00010007

080157c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b082      	sub	sp, #8
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	691b      	ldr	r3, [r3, #16]
 80157d6:	f003 0302 	and.w	r3, r3, #2
 80157da:	2b02      	cmp	r3, #2
 80157dc:	d122      	bne.n	8015824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	68db      	ldr	r3, [r3, #12]
 80157e4:	f003 0302 	and.w	r3, r3, #2
 80157e8:	2b02      	cmp	r3, #2
 80157ea:	d11b      	bne.n	8015824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	f06f 0202 	mvn.w	r2, #2
 80157f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2201      	movs	r2, #1
 80157fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	699b      	ldr	r3, [r3, #24]
 8015802:	f003 0303 	and.w	r3, r3, #3
 8015806:	2b00      	cmp	r3, #0
 8015808:	d003      	beq.n	8015812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f000 f905 	bl	8015a1a <HAL_TIM_IC_CaptureCallback>
 8015810:	e005      	b.n	801581e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	f000 f8f7 	bl	8015a06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015818:	6878      	ldr	r0, [r7, #4]
 801581a:	f000 f908 	bl	8015a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2200      	movs	r2, #0
 8015822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	691b      	ldr	r3, [r3, #16]
 801582a:	f003 0304 	and.w	r3, r3, #4
 801582e:	2b04      	cmp	r3, #4
 8015830:	d122      	bne.n	8015878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	68db      	ldr	r3, [r3, #12]
 8015838:	f003 0304 	and.w	r3, r3, #4
 801583c:	2b04      	cmp	r3, #4
 801583e:	d11b      	bne.n	8015878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	f06f 0204 	mvn.w	r2, #4
 8015848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	2202      	movs	r2, #2
 801584e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	699b      	ldr	r3, [r3, #24]
 8015856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801585a:	2b00      	cmp	r3, #0
 801585c:	d003      	beq.n	8015866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801585e:	6878      	ldr	r0, [r7, #4]
 8015860:	f000 f8db 	bl	8015a1a <HAL_TIM_IC_CaptureCallback>
 8015864:	e005      	b.n	8015872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	f000 f8cd 	bl	8015a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801586c:	6878      	ldr	r0, [r7, #4]
 801586e:	f000 f8de 	bl	8015a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	2200      	movs	r2, #0
 8015876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	691b      	ldr	r3, [r3, #16]
 801587e:	f003 0308 	and.w	r3, r3, #8
 8015882:	2b08      	cmp	r3, #8
 8015884:	d122      	bne.n	80158cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	68db      	ldr	r3, [r3, #12]
 801588c:	f003 0308 	and.w	r3, r3, #8
 8015890:	2b08      	cmp	r3, #8
 8015892:	d11b      	bne.n	80158cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	f06f 0208 	mvn.w	r2, #8
 801589c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	2204      	movs	r2, #4
 80158a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	69db      	ldr	r3, [r3, #28]
 80158aa:	f003 0303 	and.w	r3, r3, #3
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d003      	beq.n	80158ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80158b2:	6878      	ldr	r0, [r7, #4]
 80158b4:	f000 f8b1 	bl	8015a1a <HAL_TIM_IC_CaptureCallback>
 80158b8:	e005      	b.n	80158c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f000 f8a3 	bl	8015a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f000 f8b4 	bl	8015a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	2200      	movs	r2, #0
 80158ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	691b      	ldr	r3, [r3, #16]
 80158d2:	f003 0310 	and.w	r3, r3, #16
 80158d6:	2b10      	cmp	r3, #16
 80158d8:	d122      	bne.n	8015920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	68db      	ldr	r3, [r3, #12]
 80158e0:	f003 0310 	and.w	r3, r3, #16
 80158e4:	2b10      	cmp	r3, #16
 80158e6:	d11b      	bne.n	8015920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	f06f 0210 	mvn.w	r2, #16
 80158f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2208      	movs	r2, #8
 80158f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	69db      	ldr	r3, [r3, #28]
 80158fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015902:	2b00      	cmp	r3, #0
 8015904:	d003      	beq.n	801590e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f000 f887 	bl	8015a1a <HAL_TIM_IC_CaptureCallback>
 801590c:	e005      	b.n	801591a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f000 f879 	bl	8015a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f000 f88a 	bl	8015a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	2200      	movs	r2, #0
 801591e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	691b      	ldr	r3, [r3, #16]
 8015926:	f003 0301 	and.w	r3, r3, #1
 801592a:	2b01      	cmp	r3, #1
 801592c:	d10e      	bne.n	801594c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	68db      	ldr	r3, [r3, #12]
 8015934:	f003 0301 	and.w	r3, r3, #1
 8015938:	2b01      	cmp	r3, #1
 801593a:	d107      	bne.n	801594c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	f06f 0201 	mvn.w	r2, #1
 8015944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f7ec fb56 	bl	8001ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	691b      	ldr	r3, [r3, #16]
 8015952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015956:	2b80      	cmp	r3, #128	; 0x80
 8015958:	d10e      	bne.n	8015978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	68db      	ldr	r3, [r3, #12]
 8015960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015964:	2b80      	cmp	r3, #128	; 0x80
 8015966:	d107      	bne.n	8015978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015972:	6878      	ldr	r0, [r7, #4]
 8015974:	f000 f914 	bl	8015ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	691b      	ldr	r3, [r3, #16]
 801597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015986:	d10e      	bne.n	80159a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	68db      	ldr	r3, [r3, #12]
 801598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015992:	2b80      	cmp	r3, #128	; 0x80
 8015994:	d107      	bne.n	80159a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801599e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80159a0:	6878      	ldr	r0, [r7, #4]
 80159a2:	f000 f907 	bl	8015bb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	691b      	ldr	r3, [r3, #16]
 80159ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80159b0:	2b40      	cmp	r3, #64	; 0x40
 80159b2:	d10e      	bne.n	80159d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	68db      	ldr	r3, [r3, #12]
 80159ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80159be:	2b40      	cmp	r3, #64	; 0x40
 80159c0:	d107      	bne.n	80159d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80159ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80159cc:	6878      	ldr	r0, [r7, #4]
 80159ce:	f000 f838 	bl	8015a42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	691b      	ldr	r3, [r3, #16]
 80159d8:	f003 0320 	and.w	r3, r3, #32
 80159dc:	2b20      	cmp	r3, #32
 80159de:	d10e      	bne.n	80159fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	f003 0320 	and.w	r3, r3, #32
 80159ea:	2b20      	cmp	r3, #32
 80159ec:	d107      	bne.n	80159fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	f06f 0220 	mvn.w	r2, #32
 80159f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f000 f8c7 	bl	8015b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80159fe:	bf00      	nop
 8015a00:	3708      	adds	r7, #8
 8015a02:	46bd      	mov	sp, r7
 8015a04:	bd80      	pop	{r7, pc}

08015a06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015a06:	b480      	push	{r7}
 8015a08:	b083      	sub	sp, #12
 8015a0a:	af00      	add	r7, sp, #0
 8015a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015a0e:	bf00      	nop
 8015a10:	370c      	adds	r7, #12
 8015a12:	46bd      	mov	sp, r7
 8015a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a18:	4770      	bx	lr

08015a1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015a1a:	b480      	push	{r7}
 8015a1c:	b083      	sub	sp, #12
 8015a1e:	af00      	add	r7, sp, #0
 8015a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015a22:	bf00      	nop
 8015a24:	370c      	adds	r7, #12
 8015a26:	46bd      	mov	sp, r7
 8015a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2c:	4770      	bx	lr

08015a2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015a2e:	b480      	push	{r7}
 8015a30:	b083      	sub	sp, #12
 8015a32:	af00      	add	r7, sp, #0
 8015a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015a36:	bf00      	nop
 8015a38:	370c      	adds	r7, #12
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a40:	4770      	bx	lr

08015a42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015a42:	b480      	push	{r7}
 8015a44:	b083      	sub	sp, #12
 8015a46:	af00      	add	r7, sp, #0
 8015a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015a4a:	bf00      	nop
 8015a4c:	370c      	adds	r7, #12
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a54:	4770      	bx	lr
	...

08015a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015a58:	b480      	push	{r7}
 8015a5a:	b085      	sub	sp, #20
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	4a40      	ldr	r2, [pc, #256]	; (8015b6c <TIM_Base_SetConfig+0x114>)
 8015a6c:	4293      	cmp	r3, r2
 8015a6e:	d013      	beq.n	8015a98 <TIM_Base_SetConfig+0x40>
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015a76:	d00f      	beq.n	8015a98 <TIM_Base_SetConfig+0x40>
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	4a3d      	ldr	r2, [pc, #244]	; (8015b70 <TIM_Base_SetConfig+0x118>)
 8015a7c:	4293      	cmp	r3, r2
 8015a7e:	d00b      	beq.n	8015a98 <TIM_Base_SetConfig+0x40>
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	4a3c      	ldr	r2, [pc, #240]	; (8015b74 <TIM_Base_SetConfig+0x11c>)
 8015a84:	4293      	cmp	r3, r2
 8015a86:	d007      	beq.n	8015a98 <TIM_Base_SetConfig+0x40>
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	4a3b      	ldr	r2, [pc, #236]	; (8015b78 <TIM_Base_SetConfig+0x120>)
 8015a8c:	4293      	cmp	r3, r2
 8015a8e:	d003      	beq.n	8015a98 <TIM_Base_SetConfig+0x40>
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	4a3a      	ldr	r2, [pc, #232]	; (8015b7c <TIM_Base_SetConfig+0x124>)
 8015a94:	4293      	cmp	r3, r2
 8015a96:	d108      	bne.n	8015aaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	685b      	ldr	r3, [r3, #4]
 8015aa4:	68fa      	ldr	r2, [r7, #12]
 8015aa6:	4313      	orrs	r3, r2
 8015aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	4a2f      	ldr	r2, [pc, #188]	; (8015b6c <TIM_Base_SetConfig+0x114>)
 8015aae:	4293      	cmp	r3, r2
 8015ab0:	d01f      	beq.n	8015af2 <TIM_Base_SetConfig+0x9a>
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015ab8:	d01b      	beq.n	8015af2 <TIM_Base_SetConfig+0x9a>
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	4a2c      	ldr	r2, [pc, #176]	; (8015b70 <TIM_Base_SetConfig+0x118>)
 8015abe:	4293      	cmp	r3, r2
 8015ac0:	d017      	beq.n	8015af2 <TIM_Base_SetConfig+0x9a>
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	4a2b      	ldr	r2, [pc, #172]	; (8015b74 <TIM_Base_SetConfig+0x11c>)
 8015ac6:	4293      	cmp	r3, r2
 8015ac8:	d013      	beq.n	8015af2 <TIM_Base_SetConfig+0x9a>
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	4a2a      	ldr	r2, [pc, #168]	; (8015b78 <TIM_Base_SetConfig+0x120>)
 8015ace:	4293      	cmp	r3, r2
 8015ad0:	d00f      	beq.n	8015af2 <TIM_Base_SetConfig+0x9a>
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	4a29      	ldr	r2, [pc, #164]	; (8015b7c <TIM_Base_SetConfig+0x124>)
 8015ad6:	4293      	cmp	r3, r2
 8015ad8:	d00b      	beq.n	8015af2 <TIM_Base_SetConfig+0x9a>
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	4a28      	ldr	r2, [pc, #160]	; (8015b80 <TIM_Base_SetConfig+0x128>)
 8015ade:	4293      	cmp	r3, r2
 8015ae0:	d007      	beq.n	8015af2 <TIM_Base_SetConfig+0x9a>
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	4a27      	ldr	r2, [pc, #156]	; (8015b84 <TIM_Base_SetConfig+0x12c>)
 8015ae6:	4293      	cmp	r3, r2
 8015ae8:	d003      	beq.n	8015af2 <TIM_Base_SetConfig+0x9a>
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	4a26      	ldr	r2, [pc, #152]	; (8015b88 <TIM_Base_SetConfig+0x130>)
 8015aee:	4293      	cmp	r3, r2
 8015af0:	d108      	bne.n	8015b04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015afa:	683b      	ldr	r3, [r7, #0]
 8015afc:	68db      	ldr	r3, [r3, #12]
 8015afe:	68fa      	ldr	r2, [r7, #12]
 8015b00:	4313      	orrs	r3, r2
 8015b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015b0a:	683b      	ldr	r3, [r7, #0]
 8015b0c:	695b      	ldr	r3, [r3, #20]
 8015b0e:	4313      	orrs	r3, r2
 8015b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	68fa      	ldr	r2, [r7, #12]
 8015b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015b18:	683b      	ldr	r3, [r7, #0]
 8015b1a:	689a      	ldr	r2, [r3, #8]
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015b20:	683b      	ldr	r3, [r7, #0]
 8015b22:	681a      	ldr	r2, [r3, #0]
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	4a10      	ldr	r2, [pc, #64]	; (8015b6c <TIM_Base_SetConfig+0x114>)
 8015b2c:	4293      	cmp	r3, r2
 8015b2e:	d00f      	beq.n	8015b50 <TIM_Base_SetConfig+0xf8>
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	4a12      	ldr	r2, [pc, #72]	; (8015b7c <TIM_Base_SetConfig+0x124>)
 8015b34:	4293      	cmp	r3, r2
 8015b36:	d00b      	beq.n	8015b50 <TIM_Base_SetConfig+0xf8>
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	4a11      	ldr	r2, [pc, #68]	; (8015b80 <TIM_Base_SetConfig+0x128>)
 8015b3c:	4293      	cmp	r3, r2
 8015b3e:	d007      	beq.n	8015b50 <TIM_Base_SetConfig+0xf8>
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	4a10      	ldr	r2, [pc, #64]	; (8015b84 <TIM_Base_SetConfig+0x12c>)
 8015b44:	4293      	cmp	r3, r2
 8015b46:	d003      	beq.n	8015b50 <TIM_Base_SetConfig+0xf8>
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	4a0f      	ldr	r2, [pc, #60]	; (8015b88 <TIM_Base_SetConfig+0x130>)
 8015b4c:	4293      	cmp	r3, r2
 8015b4e:	d103      	bne.n	8015b58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015b50:	683b      	ldr	r3, [r7, #0]
 8015b52:	691a      	ldr	r2, [r3, #16]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2201      	movs	r2, #1
 8015b5c:	615a      	str	r2, [r3, #20]
}
 8015b5e:	bf00      	nop
 8015b60:	3714      	adds	r7, #20
 8015b62:	46bd      	mov	sp, r7
 8015b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b68:	4770      	bx	lr
 8015b6a:	bf00      	nop
 8015b6c:	40010000 	.word	0x40010000
 8015b70:	40000400 	.word	0x40000400
 8015b74:	40000800 	.word	0x40000800
 8015b78:	40000c00 	.word	0x40000c00
 8015b7c:	40010400 	.word	0x40010400
 8015b80:	40014000 	.word	0x40014000
 8015b84:	40014400 	.word	0x40014400
 8015b88:	40014800 	.word	0x40014800

08015b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015b8c:	b480      	push	{r7}
 8015b8e:	b083      	sub	sp, #12
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015b94:	bf00      	nop
 8015b96:	370c      	adds	r7, #12
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9e:	4770      	bx	lr

08015ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015ba0:	b480      	push	{r7}
 8015ba2:	b083      	sub	sp, #12
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015ba8:	bf00      	nop
 8015baa:	370c      	adds	r7, #12
 8015bac:	46bd      	mov	sp, r7
 8015bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb2:	4770      	bx	lr

08015bb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015bb4:	b480      	push	{r7}
 8015bb6:	b083      	sub	sp, #12
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015bbc:	bf00      	nop
 8015bbe:	370c      	adds	r7, #12
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc6:	4770      	bx	lr

08015bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b082      	sub	sp, #8
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d101      	bne.n	8015bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015bd6:	2301      	movs	r3, #1
 8015bd8:	e042      	b.n	8015c60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d106      	bne.n	8015bf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	2200      	movs	r2, #0
 8015be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f7ec fe39 	bl	8002864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	2224      	movs	r2, #36	; 0x24
 8015bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	681a      	ldr	r2, [r3, #0]
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	f022 0201 	bic.w	r2, r2, #1
 8015c08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f000 f8c2 	bl	8015d94 <UART_SetConfig>
 8015c10:	4603      	mov	r3, r0
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d101      	bne.n	8015c1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8015c16:	2301      	movs	r3, #1
 8015c18:	e022      	b.n	8015c60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d002      	beq.n	8015c28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f000 fe16 	bl	8016854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	685a      	ldr	r2, [r3, #4]
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015c36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	689a      	ldr	r2, [r3, #8]
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015c46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	681a      	ldr	r2, [r3, #0]
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	f042 0201 	orr.w	r2, r2, #1
 8015c56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f000 fe9d 	bl	8016998 <UART_CheckIdleState>
 8015c5e:	4603      	mov	r3, r0
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3708      	adds	r7, #8
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}

08015c68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b08a      	sub	sp, #40	; 0x28
 8015c6c:	af02      	add	r7, sp, #8
 8015c6e:	60f8      	str	r0, [r7, #12]
 8015c70:	60b9      	str	r1, [r7, #8]
 8015c72:	603b      	str	r3, [r7, #0]
 8015c74:	4613      	mov	r3, r2
 8015c76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015c7e:	2b20      	cmp	r3, #32
 8015c80:	f040 8083 	bne.w	8015d8a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d002      	beq.n	8015c90 <HAL_UART_Transmit+0x28>
 8015c8a:	88fb      	ldrh	r3, [r7, #6]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d101      	bne.n	8015c94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8015c90:	2301      	movs	r3, #1
 8015c92:	e07b      	b.n	8015d8c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015c9a:	2b01      	cmp	r3, #1
 8015c9c:	d101      	bne.n	8015ca2 <HAL_UART_Transmit+0x3a>
 8015c9e:	2302      	movs	r3, #2
 8015ca0:	e074      	b.n	8015d8c <HAL_UART_Transmit+0x124>
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	2201      	movs	r2, #1
 8015ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	2200      	movs	r2, #0
 8015cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	2221      	movs	r2, #33	; 0x21
 8015cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015cba:	f7f8 fda7 	bl	800e80c <HAL_GetTick>
 8015cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	88fa      	ldrh	r2, [r7, #6]
 8015cc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	88fa      	ldrh	r2, [r7, #6]
 8015ccc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	689b      	ldr	r3, [r3, #8]
 8015cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015cd8:	d108      	bne.n	8015cec <HAL_UART_Transmit+0x84>
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	691b      	ldr	r3, [r3, #16]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d104      	bne.n	8015cec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015ce6:	68bb      	ldr	r3, [r7, #8]
 8015ce8:	61bb      	str	r3, [r7, #24]
 8015cea:	e003      	b.n	8015cf4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8015cec:	68bb      	ldr	r3, [r7, #8]
 8015cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8015cfc:	e02c      	b.n	8015d58 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	9300      	str	r3, [sp, #0]
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	2200      	movs	r2, #0
 8015d06:	2180      	movs	r1, #128	; 0x80
 8015d08:	68f8      	ldr	r0, [r7, #12]
 8015d0a:	f000 fe90 	bl	8016a2e <UART_WaitOnFlagUntilTimeout>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d001      	beq.n	8015d18 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8015d14:	2303      	movs	r3, #3
 8015d16:	e039      	b.n	8015d8c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8015d18:	69fb      	ldr	r3, [r7, #28]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d10b      	bne.n	8015d36 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015d1e:	69bb      	ldr	r3, [r7, #24]
 8015d20:	881b      	ldrh	r3, [r3, #0]
 8015d22:	461a      	mov	r2, r3
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015d2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8015d2e:	69bb      	ldr	r3, [r7, #24]
 8015d30:	3302      	adds	r3, #2
 8015d32:	61bb      	str	r3, [r7, #24]
 8015d34:	e007      	b.n	8015d46 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015d36:	69fb      	ldr	r3, [r7, #28]
 8015d38:	781a      	ldrb	r2, [r3, #0]
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8015d40:	69fb      	ldr	r3, [r7, #28]
 8015d42:	3301      	adds	r3, #1
 8015d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015d4c:	b29b      	uxth	r3, r3
 8015d4e:	3b01      	subs	r3, #1
 8015d50:	b29a      	uxth	r2, r3
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d1cc      	bne.n	8015cfe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015d64:	683b      	ldr	r3, [r7, #0]
 8015d66:	9300      	str	r3, [sp, #0]
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	2140      	movs	r1, #64	; 0x40
 8015d6e:	68f8      	ldr	r0, [r7, #12]
 8015d70:	f000 fe5d 	bl	8016a2e <UART_WaitOnFlagUntilTimeout>
 8015d74:	4603      	mov	r3, r0
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d001      	beq.n	8015d7e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8015d7a:	2303      	movs	r3, #3
 8015d7c:	e006      	b.n	8015d8c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	2220      	movs	r2, #32
 8015d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8015d86:	2300      	movs	r3, #0
 8015d88:	e000      	b.n	8015d8c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8015d8a:	2302      	movs	r3, #2
  }
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3720      	adds	r7, #32
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015d94:	b5b0      	push	{r4, r5, r7, lr}
 8015d96:	b08e      	sub	sp, #56	; 0x38
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	689a      	ldr	r2, [r3, #8]
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	691b      	ldr	r3, [r3, #16]
 8015daa:	431a      	orrs	r2, r3
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	695b      	ldr	r3, [r3, #20]
 8015db0:	431a      	orrs	r2, r3
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	69db      	ldr	r3, [r3, #28]
 8015db6:	4313      	orrs	r3, r2
 8015db8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	681a      	ldr	r2, [r3, #0]
 8015dc0:	4bbf      	ldr	r3, [pc, #764]	; (80160c0 <UART_SetConfig+0x32c>)
 8015dc2:	4013      	ands	r3, r2
 8015dc4:	687a      	ldr	r2, [r7, #4]
 8015dc6:	6812      	ldr	r2, [r2, #0]
 8015dc8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015dca:	430b      	orrs	r3, r1
 8015dcc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	685b      	ldr	r3, [r3, #4]
 8015dd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	68da      	ldr	r2, [r3, #12]
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	430a      	orrs	r2, r1
 8015de2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	699b      	ldr	r3, [r3, #24]
 8015de8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	4ab5      	ldr	r2, [pc, #724]	; (80160c4 <UART_SetConfig+0x330>)
 8015df0:	4293      	cmp	r3, r2
 8015df2:	d004      	beq.n	8015dfe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	6a1b      	ldr	r3, [r3, #32]
 8015df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015dfa:	4313      	orrs	r3, r2
 8015dfc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	689a      	ldr	r2, [r3, #8]
 8015e04:	4bb0      	ldr	r3, [pc, #704]	; (80160c8 <UART_SetConfig+0x334>)
 8015e06:	4013      	ands	r3, r2
 8015e08:	687a      	ldr	r2, [r7, #4]
 8015e0a:	6812      	ldr	r2, [r2, #0]
 8015e0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015e0e:	430b      	orrs	r3, r1
 8015e10:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e18:	f023 010f 	bic.w	r1, r3, #15
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	430a      	orrs	r2, r1
 8015e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	4aa7      	ldr	r2, [pc, #668]	; (80160cc <UART_SetConfig+0x338>)
 8015e2e:	4293      	cmp	r3, r2
 8015e30:	d176      	bne.n	8015f20 <UART_SetConfig+0x18c>
 8015e32:	4ba7      	ldr	r3, [pc, #668]	; (80160d0 <UART_SetConfig+0x33c>)
 8015e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015e36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015e3a:	2b28      	cmp	r3, #40	; 0x28
 8015e3c:	d86c      	bhi.n	8015f18 <UART_SetConfig+0x184>
 8015e3e:	a201      	add	r2, pc, #4	; (adr r2, 8015e44 <UART_SetConfig+0xb0>)
 8015e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e44:	08015ee9 	.word	0x08015ee9
 8015e48:	08015f19 	.word	0x08015f19
 8015e4c:	08015f19 	.word	0x08015f19
 8015e50:	08015f19 	.word	0x08015f19
 8015e54:	08015f19 	.word	0x08015f19
 8015e58:	08015f19 	.word	0x08015f19
 8015e5c:	08015f19 	.word	0x08015f19
 8015e60:	08015f19 	.word	0x08015f19
 8015e64:	08015ef1 	.word	0x08015ef1
 8015e68:	08015f19 	.word	0x08015f19
 8015e6c:	08015f19 	.word	0x08015f19
 8015e70:	08015f19 	.word	0x08015f19
 8015e74:	08015f19 	.word	0x08015f19
 8015e78:	08015f19 	.word	0x08015f19
 8015e7c:	08015f19 	.word	0x08015f19
 8015e80:	08015f19 	.word	0x08015f19
 8015e84:	08015ef9 	.word	0x08015ef9
 8015e88:	08015f19 	.word	0x08015f19
 8015e8c:	08015f19 	.word	0x08015f19
 8015e90:	08015f19 	.word	0x08015f19
 8015e94:	08015f19 	.word	0x08015f19
 8015e98:	08015f19 	.word	0x08015f19
 8015e9c:	08015f19 	.word	0x08015f19
 8015ea0:	08015f19 	.word	0x08015f19
 8015ea4:	08015f01 	.word	0x08015f01
 8015ea8:	08015f19 	.word	0x08015f19
 8015eac:	08015f19 	.word	0x08015f19
 8015eb0:	08015f19 	.word	0x08015f19
 8015eb4:	08015f19 	.word	0x08015f19
 8015eb8:	08015f19 	.word	0x08015f19
 8015ebc:	08015f19 	.word	0x08015f19
 8015ec0:	08015f19 	.word	0x08015f19
 8015ec4:	08015f09 	.word	0x08015f09
 8015ec8:	08015f19 	.word	0x08015f19
 8015ecc:	08015f19 	.word	0x08015f19
 8015ed0:	08015f19 	.word	0x08015f19
 8015ed4:	08015f19 	.word	0x08015f19
 8015ed8:	08015f19 	.word	0x08015f19
 8015edc:	08015f19 	.word	0x08015f19
 8015ee0:	08015f19 	.word	0x08015f19
 8015ee4:	08015f11 	.word	0x08015f11
 8015ee8:	2301      	movs	r3, #1
 8015eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015eee:	e222      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015ef0:	2304      	movs	r3, #4
 8015ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015ef6:	e21e      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015ef8:	2308      	movs	r3, #8
 8015efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015efe:	e21a      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015f00:	2310      	movs	r3, #16
 8015f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f06:	e216      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015f08:	2320      	movs	r3, #32
 8015f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f0e:	e212      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015f10:	2340      	movs	r3, #64	; 0x40
 8015f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f16:	e20e      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015f18:	2380      	movs	r3, #128	; 0x80
 8015f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f1e:	e20a      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	4a6b      	ldr	r2, [pc, #428]	; (80160d4 <UART_SetConfig+0x340>)
 8015f26:	4293      	cmp	r3, r2
 8015f28:	d130      	bne.n	8015f8c <UART_SetConfig+0x1f8>
 8015f2a:	4b69      	ldr	r3, [pc, #420]	; (80160d0 <UART_SetConfig+0x33c>)
 8015f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f2e:	f003 0307 	and.w	r3, r3, #7
 8015f32:	2b05      	cmp	r3, #5
 8015f34:	d826      	bhi.n	8015f84 <UART_SetConfig+0x1f0>
 8015f36:	a201      	add	r2, pc, #4	; (adr r2, 8015f3c <UART_SetConfig+0x1a8>)
 8015f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f3c:	08015f55 	.word	0x08015f55
 8015f40:	08015f5d 	.word	0x08015f5d
 8015f44:	08015f65 	.word	0x08015f65
 8015f48:	08015f6d 	.word	0x08015f6d
 8015f4c:	08015f75 	.word	0x08015f75
 8015f50:	08015f7d 	.word	0x08015f7d
 8015f54:	2300      	movs	r3, #0
 8015f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f5a:	e1ec      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015f5c:	2304      	movs	r3, #4
 8015f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f62:	e1e8      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015f64:	2308      	movs	r3, #8
 8015f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f6a:	e1e4      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015f6c:	2310      	movs	r3, #16
 8015f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f72:	e1e0      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015f74:	2320      	movs	r3, #32
 8015f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f7a:	e1dc      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015f7c:	2340      	movs	r3, #64	; 0x40
 8015f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f82:	e1d8      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015f84:	2380      	movs	r3, #128	; 0x80
 8015f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f8a:	e1d4      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	4a51      	ldr	r2, [pc, #324]	; (80160d8 <UART_SetConfig+0x344>)
 8015f92:	4293      	cmp	r3, r2
 8015f94:	d130      	bne.n	8015ff8 <UART_SetConfig+0x264>
 8015f96:	4b4e      	ldr	r3, [pc, #312]	; (80160d0 <UART_SetConfig+0x33c>)
 8015f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f9a:	f003 0307 	and.w	r3, r3, #7
 8015f9e:	2b05      	cmp	r3, #5
 8015fa0:	d826      	bhi.n	8015ff0 <UART_SetConfig+0x25c>
 8015fa2:	a201      	add	r2, pc, #4	; (adr r2, 8015fa8 <UART_SetConfig+0x214>)
 8015fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fa8:	08015fc1 	.word	0x08015fc1
 8015fac:	08015fc9 	.word	0x08015fc9
 8015fb0:	08015fd1 	.word	0x08015fd1
 8015fb4:	08015fd9 	.word	0x08015fd9
 8015fb8:	08015fe1 	.word	0x08015fe1
 8015fbc:	08015fe9 	.word	0x08015fe9
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015fc6:	e1b6      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015fc8:	2304      	movs	r3, #4
 8015fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015fce:	e1b2      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015fd0:	2308      	movs	r3, #8
 8015fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015fd6:	e1ae      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015fd8:	2310      	movs	r3, #16
 8015fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015fde:	e1aa      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015fe0:	2320      	movs	r3, #32
 8015fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015fe6:	e1a6      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015fe8:	2340      	movs	r3, #64	; 0x40
 8015fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015fee:	e1a2      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015ff0:	2380      	movs	r3, #128	; 0x80
 8015ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015ff6:	e19e      	b.n	8016336 <UART_SetConfig+0x5a2>
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	4a37      	ldr	r2, [pc, #220]	; (80160dc <UART_SetConfig+0x348>)
 8015ffe:	4293      	cmp	r3, r2
 8016000:	d130      	bne.n	8016064 <UART_SetConfig+0x2d0>
 8016002:	4b33      	ldr	r3, [pc, #204]	; (80160d0 <UART_SetConfig+0x33c>)
 8016004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016006:	f003 0307 	and.w	r3, r3, #7
 801600a:	2b05      	cmp	r3, #5
 801600c:	d826      	bhi.n	801605c <UART_SetConfig+0x2c8>
 801600e:	a201      	add	r2, pc, #4	; (adr r2, 8016014 <UART_SetConfig+0x280>)
 8016010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016014:	0801602d 	.word	0x0801602d
 8016018:	08016035 	.word	0x08016035
 801601c:	0801603d 	.word	0x0801603d
 8016020:	08016045 	.word	0x08016045
 8016024:	0801604d 	.word	0x0801604d
 8016028:	08016055 	.word	0x08016055
 801602c:	2300      	movs	r3, #0
 801602e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016032:	e180      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016034:	2304      	movs	r3, #4
 8016036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801603a:	e17c      	b.n	8016336 <UART_SetConfig+0x5a2>
 801603c:	2308      	movs	r3, #8
 801603e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016042:	e178      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016044:	2310      	movs	r3, #16
 8016046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801604a:	e174      	b.n	8016336 <UART_SetConfig+0x5a2>
 801604c:	2320      	movs	r3, #32
 801604e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016052:	e170      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016054:	2340      	movs	r3, #64	; 0x40
 8016056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801605a:	e16c      	b.n	8016336 <UART_SetConfig+0x5a2>
 801605c:	2380      	movs	r3, #128	; 0x80
 801605e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016062:	e168      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4a1d      	ldr	r2, [pc, #116]	; (80160e0 <UART_SetConfig+0x34c>)
 801606a:	4293      	cmp	r3, r2
 801606c:	d142      	bne.n	80160f4 <UART_SetConfig+0x360>
 801606e:	4b18      	ldr	r3, [pc, #96]	; (80160d0 <UART_SetConfig+0x33c>)
 8016070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016072:	f003 0307 	and.w	r3, r3, #7
 8016076:	2b05      	cmp	r3, #5
 8016078:	d838      	bhi.n	80160ec <UART_SetConfig+0x358>
 801607a:	a201      	add	r2, pc, #4	; (adr r2, 8016080 <UART_SetConfig+0x2ec>)
 801607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016080:	08016099 	.word	0x08016099
 8016084:	080160a1 	.word	0x080160a1
 8016088:	080160a9 	.word	0x080160a9
 801608c:	080160b1 	.word	0x080160b1
 8016090:	080160b9 	.word	0x080160b9
 8016094:	080160e5 	.word	0x080160e5
 8016098:	2300      	movs	r3, #0
 801609a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801609e:	e14a      	b.n	8016336 <UART_SetConfig+0x5a2>
 80160a0:	2304      	movs	r3, #4
 80160a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80160a6:	e146      	b.n	8016336 <UART_SetConfig+0x5a2>
 80160a8:	2308      	movs	r3, #8
 80160aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80160ae:	e142      	b.n	8016336 <UART_SetConfig+0x5a2>
 80160b0:	2310      	movs	r3, #16
 80160b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80160b6:	e13e      	b.n	8016336 <UART_SetConfig+0x5a2>
 80160b8:	2320      	movs	r3, #32
 80160ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80160be:	e13a      	b.n	8016336 <UART_SetConfig+0x5a2>
 80160c0:	cfff69f3 	.word	0xcfff69f3
 80160c4:	58000c00 	.word	0x58000c00
 80160c8:	11fff4ff 	.word	0x11fff4ff
 80160cc:	40011000 	.word	0x40011000
 80160d0:	58024400 	.word	0x58024400
 80160d4:	40004400 	.word	0x40004400
 80160d8:	40004800 	.word	0x40004800
 80160dc:	40004c00 	.word	0x40004c00
 80160e0:	40005000 	.word	0x40005000
 80160e4:	2340      	movs	r3, #64	; 0x40
 80160e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80160ea:	e124      	b.n	8016336 <UART_SetConfig+0x5a2>
 80160ec:	2380      	movs	r3, #128	; 0x80
 80160ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80160f2:	e120      	b.n	8016336 <UART_SetConfig+0x5a2>
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	4acc      	ldr	r2, [pc, #816]	; (801642c <UART_SetConfig+0x698>)
 80160fa:	4293      	cmp	r3, r2
 80160fc:	d176      	bne.n	80161ec <UART_SetConfig+0x458>
 80160fe:	4bcc      	ldr	r3, [pc, #816]	; (8016430 <UART_SetConfig+0x69c>)
 8016100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016106:	2b28      	cmp	r3, #40	; 0x28
 8016108:	d86c      	bhi.n	80161e4 <UART_SetConfig+0x450>
 801610a:	a201      	add	r2, pc, #4	; (adr r2, 8016110 <UART_SetConfig+0x37c>)
 801610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016110:	080161b5 	.word	0x080161b5
 8016114:	080161e5 	.word	0x080161e5
 8016118:	080161e5 	.word	0x080161e5
 801611c:	080161e5 	.word	0x080161e5
 8016120:	080161e5 	.word	0x080161e5
 8016124:	080161e5 	.word	0x080161e5
 8016128:	080161e5 	.word	0x080161e5
 801612c:	080161e5 	.word	0x080161e5
 8016130:	080161bd 	.word	0x080161bd
 8016134:	080161e5 	.word	0x080161e5
 8016138:	080161e5 	.word	0x080161e5
 801613c:	080161e5 	.word	0x080161e5
 8016140:	080161e5 	.word	0x080161e5
 8016144:	080161e5 	.word	0x080161e5
 8016148:	080161e5 	.word	0x080161e5
 801614c:	080161e5 	.word	0x080161e5
 8016150:	080161c5 	.word	0x080161c5
 8016154:	080161e5 	.word	0x080161e5
 8016158:	080161e5 	.word	0x080161e5
 801615c:	080161e5 	.word	0x080161e5
 8016160:	080161e5 	.word	0x080161e5
 8016164:	080161e5 	.word	0x080161e5
 8016168:	080161e5 	.word	0x080161e5
 801616c:	080161e5 	.word	0x080161e5
 8016170:	080161cd 	.word	0x080161cd
 8016174:	080161e5 	.word	0x080161e5
 8016178:	080161e5 	.word	0x080161e5
 801617c:	080161e5 	.word	0x080161e5
 8016180:	080161e5 	.word	0x080161e5
 8016184:	080161e5 	.word	0x080161e5
 8016188:	080161e5 	.word	0x080161e5
 801618c:	080161e5 	.word	0x080161e5
 8016190:	080161d5 	.word	0x080161d5
 8016194:	080161e5 	.word	0x080161e5
 8016198:	080161e5 	.word	0x080161e5
 801619c:	080161e5 	.word	0x080161e5
 80161a0:	080161e5 	.word	0x080161e5
 80161a4:	080161e5 	.word	0x080161e5
 80161a8:	080161e5 	.word	0x080161e5
 80161ac:	080161e5 	.word	0x080161e5
 80161b0:	080161dd 	.word	0x080161dd
 80161b4:	2301      	movs	r3, #1
 80161b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80161ba:	e0bc      	b.n	8016336 <UART_SetConfig+0x5a2>
 80161bc:	2304      	movs	r3, #4
 80161be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80161c2:	e0b8      	b.n	8016336 <UART_SetConfig+0x5a2>
 80161c4:	2308      	movs	r3, #8
 80161c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80161ca:	e0b4      	b.n	8016336 <UART_SetConfig+0x5a2>
 80161cc:	2310      	movs	r3, #16
 80161ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80161d2:	e0b0      	b.n	8016336 <UART_SetConfig+0x5a2>
 80161d4:	2320      	movs	r3, #32
 80161d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80161da:	e0ac      	b.n	8016336 <UART_SetConfig+0x5a2>
 80161dc:	2340      	movs	r3, #64	; 0x40
 80161de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80161e2:	e0a8      	b.n	8016336 <UART_SetConfig+0x5a2>
 80161e4:	2380      	movs	r3, #128	; 0x80
 80161e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80161ea:	e0a4      	b.n	8016336 <UART_SetConfig+0x5a2>
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	4a90      	ldr	r2, [pc, #576]	; (8016434 <UART_SetConfig+0x6a0>)
 80161f2:	4293      	cmp	r3, r2
 80161f4:	d130      	bne.n	8016258 <UART_SetConfig+0x4c4>
 80161f6:	4b8e      	ldr	r3, [pc, #568]	; (8016430 <UART_SetConfig+0x69c>)
 80161f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80161fa:	f003 0307 	and.w	r3, r3, #7
 80161fe:	2b05      	cmp	r3, #5
 8016200:	d826      	bhi.n	8016250 <UART_SetConfig+0x4bc>
 8016202:	a201      	add	r2, pc, #4	; (adr r2, 8016208 <UART_SetConfig+0x474>)
 8016204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016208:	08016221 	.word	0x08016221
 801620c:	08016229 	.word	0x08016229
 8016210:	08016231 	.word	0x08016231
 8016214:	08016239 	.word	0x08016239
 8016218:	08016241 	.word	0x08016241
 801621c:	08016249 	.word	0x08016249
 8016220:	2300      	movs	r3, #0
 8016222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016226:	e086      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016228:	2304      	movs	r3, #4
 801622a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801622e:	e082      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016230:	2308      	movs	r3, #8
 8016232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016236:	e07e      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016238:	2310      	movs	r3, #16
 801623a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801623e:	e07a      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016240:	2320      	movs	r3, #32
 8016242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016246:	e076      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016248:	2340      	movs	r3, #64	; 0x40
 801624a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801624e:	e072      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016250:	2380      	movs	r3, #128	; 0x80
 8016252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016256:	e06e      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	4a76      	ldr	r2, [pc, #472]	; (8016438 <UART_SetConfig+0x6a4>)
 801625e:	4293      	cmp	r3, r2
 8016260:	d130      	bne.n	80162c4 <UART_SetConfig+0x530>
 8016262:	4b73      	ldr	r3, [pc, #460]	; (8016430 <UART_SetConfig+0x69c>)
 8016264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016266:	f003 0307 	and.w	r3, r3, #7
 801626a:	2b05      	cmp	r3, #5
 801626c:	d826      	bhi.n	80162bc <UART_SetConfig+0x528>
 801626e:	a201      	add	r2, pc, #4	; (adr r2, 8016274 <UART_SetConfig+0x4e0>)
 8016270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016274:	0801628d 	.word	0x0801628d
 8016278:	08016295 	.word	0x08016295
 801627c:	0801629d 	.word	0x0801629d
 8016280:	080162a5 	.word	0x080162a5
 8016284:	080162ad 	.word	0x080162ad
 8016288:	080162b5 	.word	0x080162b5
 801628c:	2300      	movs	r3, #0
 801628e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016292:	e050      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016294:	2304      	movs	r3, #4
 8016296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801629a:	e04c      	b.n	8016336 <UART_SetConfig+0x5a2>
 801629c:	2308      	movs	r3, #8
 801629e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80162a2:	e048      	b.n	8016336 <UART_SetConfig+0x5a2>
 80162a4:	2310      	movs	r3, #16
 80162a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80162aa:	e044      	b.n	8016336 <UART_SetConfig+0x5a2>
 80162ac:	2320      	movs	r3, #32
 80162ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80162b2:	e040      	b.n	8016336 <UART_SetConfig+0x5a2>
 80162b4:	2340      	movs	r3, #64	; 0x40
 80162b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80162ba:	e03c      	b.n	8016336 <UART_SetConfig+0x5a2>
 80162bc:	2380      	movs	r3, #128	; 0x80
 80162be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80162c2:	e038      	b.n	8016336 <UART_SetConfig+0x5a2>
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	4a5c      	ldr	r2, [pc, #368]	; (801643c <UART_SetConfig+0x6a8>)
 80162ca:	4293      	cmp	r3, r2
 80162cc:	d130      	bne.n	8016330 <UART_SetConfig+0x59c>
 80162ce:	4b58      	ldr	r3, [pc, #352]	; (8016430 <UART_SetConfig+0x69c>)
 80162d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162d2:	f003 0307 	and.w	r3, r3, #7
 80162d6:	2b05      	cmp	r3, #5
 80162d8:	d826      	bhi.n	8016328 <UART_SetConfig+0x594>
 80162da:	a201      	add	r2, pc, #4	; (adr r2, 80162e0 <UART_SetConfig+0x54c>)
 80162dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162e0:	080162f9 	.word	0x080162f9
 80162e4:	08016301 	.word	0x08016301
 80162e8:	08016309 	.word	0x08016309
 80162ec:	08016311 	.word	0x08016311
 80162f0:	08016319 	.word	0x08016319
 80162f4:	08016321 	.word	0x08016321
 80162f8:	2302      	movs	r3, #2
 80162fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80162fe:	e01a      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016300:	2304      	movs	r3, #4
 8016302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016306:	e016      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016308:	2308      	movs	r3, #8
 801630a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801630e:	e012      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016310:	2310      	movs	r3, #16
 8016312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016316:	e00e      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016318:	2320      	movs	r3, #32
 801631a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801631e:	e00a      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016320:	2340      	movs	r3, #64	; 0x40
 8016322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016326:	e006      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016328:	2380      	movs	r3, #128	; 0x80
 801632a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801632e:	e002      	b.n	8016336 <UART_SetConfig+0x5a2>
 8016330:	2380      	movs	r3, #128	; 0x80
 8016332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	4a40      	ldr	r2, [pc, #256]	; (801643c <UART_SetConfig+0x6a8>)
 801633c:	4293      	cmp	r3, r2
 801633e:	f040 80ef 	bne.w	8016520 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016342:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016346:	2b20      	cmp	r3, #32
 8016348:	dc46      	bgt.n	80163d8 <UART_SetConfig+0x644>
 801634a:	2b02      	cmp	r3, #2
 801634c:	f2c0 8081 	blt.w	8016452 <UART_SetConfig+0x6be>
 8016350:	3b02      	subs	r3, #2
 8016352:	2b1e      	cmp	r3, #30
 8016354:	d87d      	bhi.n	8016452 <UART_SetConfig+0x6be>
 8016356:	a201      	add	r2, pc, #4	; (adr r2, 801635c <UART_SetConfig+0x5c8>)
 8016358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801635c:	080163df 	.word	0x080163df
 8016360:	08016453 	.word	0x08016453
 8016364:	080163e7 	.word	0x080163e7
 8016368:	08016453 	.word	0x08016453
 801636c:	08016453 	.word	0x08016453
 8016370:	08016453 	.word	0x08016453
 8016374:	080163f7 	.word	0x080163f7
 8016378:	08016453 	.word	0x08016453
 801637c:	08016453 	.word	0x08016453
 8016380:	08016453 	.word	0x08016453
 8016384:	08016453 	.word	0x08016453
 8016388:	08016453 	.word	0x08016453
 801638c:	08016453 	.word	0x08016453
 8016390:	08016453 	.word	0x08016453
 8016394:	08016407 	.word	0x08016407
 8016398:	08016453 	.word	0x08016453
 801639c:	08016453 	.word	0x08016453
 80163a0:	08016453 	.word	0x08016453
 80163a4:	08016453 	.word	0x08016453
 80163a8:	08016453 	.word	0x08016453
 80163ac:	08016453 	.word	0x08016453
 80163b0:	08016453 	.word	0x08016453
 80163b4:	08016453 	.word	0x08016453
 80163b8:	08016453 	.word	0x08016453
 80163bc:	08016453 	.word	0x08016453
 80163c0:	08016453 	.word	0x08016453
 80163c4:	08016453 	.word	0x08016453
 80163c8:	08016453 	.word	0x08016453
 80163cc:	08016453 	.word	0x08016453
 80163d0:	08016453 	.word	0x08016453
 80163d4:	08016445 	.word	0x08016445
 80163d8:	2b40      	cmp	r3, #64	; 0x40
 80163da:	d036      	beq.n	801644a <UART_SetConfig+0x6b6>
 80163dc:	e039      	b.n	8016452 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80163de:	f7fd fb75 	bl	8013acc <HAL_RCCEx_GetD3PCLK1Freq>
 80163e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80163e4:	e03b      	b.n	801645e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80163e6:	f107 0314 	add.w	r3, r7, #20
 80163ea:	4618      	mov	r0, r3
 80163ec:	f7fd fb84 	bl	8013af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80163f0:	69bb      	ldr	r3, [r7, #24]
 80163f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80163f4:	e033      	b.n	801645e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80163f6:	f107 0308 	add.w	r3, r7, #8
 80163fa:	4618      	mov	r0, r3
 80163fc:	f7fd fcd0 	bl	8013da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8016404:	e02b      	b.n	801645e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016406:	4b0a      	ldr	r3, [pc, #40]	; (8016430 <UART_SetConfig+0x69c>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	f003 0320 	and.w	r3, r3, #32
 801640e:	2b00      	cmp	r3, #0
 8016410:	d009      	beq.n	8016426 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016412:	4b07      	ldr	r3, [pc, #28]	; (8016430 <UART_SetConfig+0x69c>)
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	08db      	lsrs	r3, r3, #3
 8016418:	f003 0303 	and.w	r3, r3, #3
 801641c:	4a08      	ldr	r2, [pc, #32]	; (8016440 <UART_SetConfig+0x6ac>)
 801641e:	fa22 f303 	lsr.w	r3, r2, r3
 8016422:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016424:	e01b      	b.n	801645e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8016426:	4b06      	ldr	r3, [pc, #24]	; (8016440 <UART_SetConfig+0x6ac>)
 8016428:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801642a:	e018      	b.n	801645e <UART_SetConfig+0x6ca>
 801642c:	40011400 	.word	0x40011400
 8016430:	58024400 	.word	0x58024400
 8016434:	40007800 	.word	0x40007800
 8016438:	40007c00 	.word	0x40007c00
 801643c:	58000c00 	.word	0x58000c00
 8016440:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016444:	4bc4      	ldr	r3, [pc, #784]	; (8016758 <UART_SetConfig+0x9c4>)
 8016446:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8016448:	e009      	b.n	801645e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801644a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801644e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8016450:	e005      	b.n	801645e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8016452:	2300      	movs	r3, #0
 8016454:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8016456:	2301      	movs	r3, #1
 8016458:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801645c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016460:	2b00      	cmp	r3, #0
 8016462:	f000 81da 	beq.w	801681a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801646a:	4abc      	ldr	r2, [pc, #752]	; (801675c <UART_SetConfig+0x9c8>)
 801646c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016470:	461a      	mov	r2, r3
 8016472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016474:	fbb3 f3f2 	udiv	r3, r3, r2
 8016478:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	685a      	ldr	r2, [r3, #4]
 801647e:	4613      	mov	r3, r2
 8016480:	005b      	lsls	r3, r3, #1
 8016482:	4413      	add	r3, r2
 8016484:	6a3a      	ldr	r2, [r7, #32]
 8016486:	429a      	cmp	r2, r3
 8016488:	d305      	bcc.n	8016496 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016490:	6a3a      	ldr	r2, [r7, #32]
 8016492:	429a      	cmp	r2, r3
 8016494:	d903      	bls.n	801649e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8016496:	2301      	movs	r3, #1
 8016498:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801649c:	e1bd      	b.n	801681a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a0:	4618      	mov	r0, r3
 80164a2:	f04f 0100 	mov.w	r1, #0
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164aa:	4aac      	ldr	r2, [pc, #688]	; (801675c <UART_SetConfig+0x9c8>)
 80164ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80164b0:	b29a      	uxth	r2, r3
 80164b2:	f04f 0300 	mov.w	r3, #0
 80164b6:	f7e9 ff6b 	bl	8000390 <__aeabi_uldivmod>
 80164ba:	4602      	mov	r2, r0
 80164bc:	460b      	mov	r3, r1
 80164be:	4610      	mov	r0, r2
 80164c0:	4619      	mov	r1, r3
 80164c2:	f04f 0200 	mov.w	r2, #0
 80164c6:	f04f 0300 	mov.w	r3, #0
 80164ca:	020b      	lsls	r3, r1, #8
 80164cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80164d0:	0202      	lsls	r2, r0, #8
 80164d2:	6879      	ldr	r1, [r7, #4]
 80164d4:	6849      	ldr	r1, [r1, #4]
 80164d6:	0849      	lsrs	r1, r1, #1
 80164d8:	4608      	mov	r0, r1
 80164da:	f04f 0100 	mov.w	r1, #0
 80164de:	1814      	adds	r4, r2, r0
 80164e0:	eb43 0501 	adc.w	r5, r3, r1
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	685b      	ldr	r3, [r3, #4]
 80164e8:	461a      	mov	r2, r3
 80164ea:	f04f 0300 	mov.w	r3, #0
 80164ee:	4620      	mov	r0, r4
 80164f0:	4629      	mov	r1, r5
 80164f2:	f7e9 ff4d 	bl	8000390 <__aeabi_uldivmod>
 80164f6:	4602      	mov	r2, r0
 80164f8:	460b      	mov	r3, r1
 80164fa:	4613      	mov	r3, r2
 80164fc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80164fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016504:	d308      	bcc.n	8016518 <UART_SetConfig+0x784>
 8016506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801650c:	d204      	bcs.n	8016518 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016514:	60da      	str	r2, [r3, #12]
 8016516:	e180      	b.n	801681a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8016518:	2301      	movs	r3, #1
 801651a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801651e:	e17c      	b.n	801681a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	69db      	ldr	r3, [r3, #28]
 8016524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016528:	f040 80be 	bne.w	80166a8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 801652c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016530:	2b20      	cmp	r3, #32
 8016532:	dc49      	bgt.n	80165c8 <UART_SetConfig+0x834>
 8016534:	2b00      	cmp	r3, #0
 8016536:	db7c      	blt.n	8016632 <UART_SetConfig+0x89e>
 8016538:	2b20      	cmp	r3, #32
 801653a:	d87a      	bhi.n	8016632 <UART_SetConfig+0x89e>
 801653c:	a201      	add	r2, pc, #4	; (adr r2, 8016544 <UART_SetConfig+0x7b0>)
 801653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016542:	bf00      	nop
 8016544:	080165cf 	.word	0x080165cf
 8016548:	080165d7 	.word	0x080165d7
 801654c:	08016633 	.word	0x08016633
 8016550:	08016633 	.word	0x08016633
 8016554:	080165df 	.word	0x080165df
 8016558:	08016633 	.word	0x08016633
 801655c:	08016633 	.word	0x08016633
 8016560:	08016633 	.word	0x08016633
 8016564:	080165ef 	.word	0x080165ef
 8016568:	08016633 	.word	0x08016633
 801656c:	08016633 	.word	0x08016633
 8016570:	08016633 	.word	0x08016633
 8016574:	08016633 	.word	0x08016633
 8016578:	08016633 	.word	0x08016633
 801657c:	08016633 	.word	0x08016633
 8016580:	08016633 	.word	0x08016633
 8016584:	080165ff 	.word	0x080165ff
 8016588:	08016633 	.word	0x08016633
 801658c:	08016633 	.word	0x08016633
 8016590:	08016633 	.word	0x08016633
 8016594:	08016633 	.word	0x08016633
 8016598:	08016633 	.word	0x08016633
 801659c:	08016633 	.word	0x08016633
 80165a0:	08016633 	.word	0x08016633
 80165a4:	08016633 	.word	0x08016633
 80165a8:	08016633 	.word	0x08016633
 80165ac:	08016633 	.word	0x08016633
 80165b0:	08016633 	.word	0x08016633
 80165b4:	08016633 	.word	0x08016633
 80165b8:	08016633 	.word	0x08016633
 80165bc:	08016633 	.word	0x08016633
 80165c0:	08016633 	.word	0x08016633
 80165c4:	08016625 	.word	0x08016625
 80165c8:	2b40      	cmp	r3, #64	; 0x40
 80165ca:	d02e      	beq.n	801662a <UART_SetConfig+0x896>
 80165cc:	e031      	b.n	8016632 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80165ce:	f7fc facf 	bl	8012b70 <HAL_RCC_GetPCLK1Freq>
 80165d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80165d4:	e033      	b.n	801663e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80165d6:	f7fc fae1 	bl	8012b9c <HAL_RCC_GetPCLK2Freq>
 80165da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80165dc:	e02f      	b.n	801663e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80165de:	f107 0314 	add.w	r3, r7, #20
 80165e2:	4618      	mov	r0, r3
 80165e4:	f7fd fa88 	bl	8013af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80165e8:	69bb      	ldr	r3, [r7, #24]
 80165ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80165ec:	e027      	b.n	801663e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80165ee:	f107 0308 	add.w	r3, r7, #8
 80165f2:	4618      	mov	r0, r3
 80165f4:	f7fd fbd4 	bl	8013da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80165fc:	e01f      	b.n	801663e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80165fe:	4b58      	ldr	r3, [pc, #352]	; (8016760 <UART_SetConfig+0x9cc>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	f003 0320 	and.w	r3, r3, #32
 8016606:	2b00      	cmp	r3, #0
 8016608:	d009      	beq.n	801661e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801660a:	4b55      	ldr	r3, [pc, #340]	; (8016760 <UART_SetConfig+0x9cc>)
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	08db      	lsrs	r3, r3, #3
 8016610:	f003 0303 	and.w	r3, r3, #3
 8016614:	4a53      	ldr	r2, [pc, #332]	; (8016764 <UART_SetConfig+0x9d0>)
 8016616:	fa22 f303 	lsr.w	r3, r2, r3
 801661a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801661c:	e00f      	b.n	801663e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 801661e:	4b51      	ldr	r3, [pc, #324]	; (8016764 <UART_SetConfig+0x9d0>)
 8016620:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8016622:	e00c      	b.n	801663e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016624:	4b4c      	ldr	r3, [pc, #304]	; (8016758 <UART_SetConfig+0x9c4>)
 8016626:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8016628:	e009      	b.n	801663e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801662a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801662e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8016630:	e005      	b.n	801663e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8016632:	2300      	movs	r3, #0
 8016634:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8016636:	2301      	movs	r3, #1
 8016638:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801663c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801663e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016640:	2b00      	cmp	r3, #0
 8016642:	f000 80ea 	beq.w	801681a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801664a:	4a44      	ldr	r2, [pc, #272]	; (801675c <UART_SetConfig+0x9c8>)
 801664c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016650:	461a      	mov	r2, r3
 8016652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016654:	fbb3 f3f2 	udiv	r3, r3, r2
 8016658:	005a      	lsls	r2, r3, #1
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	685b      	ldr	r3, [r3, #4]
 801665e:	085b      	lsrs	r3, r3, #1
 8016660:	441a      	add	r2, r3
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	685b      	ldr	r3, [r3, #4]
 8016666:	fbb2 f3f3 	udiv	r3, r2, r3
 801666a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801666e:	2b0f      	cmp	r3, #15
 8016670:	d916      	bls.n	80166a0 <UART_SetConfig+0x90c>
 8016672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016678:	d212      	bcs.n	80166a0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801667c:	b29b      	uxth	r3, r3
 801667e:	f023 030f 	bic.w	r3, r3, #15
 8016682:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016686:	085b      	lsrs	r3, r3, #1
 8016688:	b29b      	uxth	r3, r3
 801668a:	f003 0307 	and.w	r3, r3, #7
 801668e:	b29a      	uxth	r2, r3
 8016690:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016692:	4313      	orrs	r3, r2
 8016694:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801669c:	60da      	str	r2, [r3, #12]
 801669e:	e0bc      	b.n	801681a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80166a0:	2301      	movs	r3, #1
 80166a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80166a6:	e0b8      	b.n	801681a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80166a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80166ac:	2b20      	cmp	r3, #32
 80166ae:	dc4b      	bgt.n	8016748 <UART_SetConfig+0x9b4>
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	f2c0 8087 	blt.w	80167c4 <UART_SetConfig+0xa30>
 80166b6:	2b20      	cmp	r3, #32
 80166b8:	f200 8084 	bhi.w	80167c4 <UART_SetConfig+0xa30>
 80166bc:	a201      	add	r2, pc, #4	; (adr r2, 80166c4 <UART_SetConfig+0x930>)
 80166be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166c2:	bf00      	nop
 80166c4:	0801674f 	.word	0x0801674f
 80166c8:	08016769 	.word	0x08016769
 80166cc:	080167c5 	.word	0x080167c5
 80166d0:	080167c5 	.word	0x080167c5
 80166d4:	08016771 	.word	0x08016771
 80166d8:	080167c5 	.word	0x080167c5
 80166dc:	080167c5 	.word	0x080167c5
 80166e0:	080167c5 	.word	0x080167c5
 80166e4:	08016781 	.word	0x08016781
 80166e8:	080167c5 	.word	0x080167c5
 80166ec:	080167c5 	.word	0x080167c5
 80166f0:	080167c5 	.word	0x080167c5
 80166f4:	080167c5 	.word	0x080167c5
 80166f8:	080167c5 	.word	0x080167c5
 80166fc:	080167c5 	.word	0x080167c5
 8016700:	080167c5 	.word	0x080167c5
 8016704:	08016791 	.word	0x08016791
 8016708:	080167c5 	.word	0x080167c5
 801670c:	080167c5 	.word	0x080167c5
 8016710:	080167c5 	.word	0x080167c5
 8016714:	080167c5 	.word	0x080167c5
 8016718:	080167c5 	.word	0x080167c5
 801671c:	080167c5 	.word	0x080167c5
 8016720:	080167c5 	.word	0x080167c5
 8016724:	080167c5 	.word	0x080167c5
 8016728:	080167c5 	.word	0x080167c5
 801672c:	080167c5 	.word	0x080167c5
 8016730:	080167c5 	.word	0x080167c5
 8016734:	080167c5 	.word	0x080167c5
 8016738:	080167c5 	.word	0x080167c5
 801673c:	080167c5 	.word	0x080167c5
 8016740:	080167c5 	.word	0x080167c5
 8016744:	080167b7 	.word	0x080167b7
 8016748:	2b40      	cmp	r3, #64	; 0x40
 801674a:	d037      	beq.n	80167bc <UART_SetConfig+0xa28>
 801674c:	e03a      	b.n	80167c4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801674e:	f7fc fa0f 	bl	8012b70 <HAL_RCC_GetPCLK1Freq>
 8016752:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8016754:	e03c      	b.n	80167d0 <UART_SetConfig+0xa3c>
 8016756:	bf00      	nop
 8016758:	003d0900 	.word	0x003d0900
 801675c:	0802c380 	.word	0x0802c380
 8016760:	58024400 	.word	0x58024400
 8016764:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016768:	f7fc fa18 	bl	8012b9c <HAL_RCC_GetPCLK2Freq>
 801676c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801676e:	e02f      	b.n	80167d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016770:	f107 0314 	add.w	r3, r7, #20
 8016774:	4618      	mov	r0, r3
 8016776:	f7fd f9bf 	bl	8013af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801677a:	69bb      	ldr	r3, [r7, #24]
 801677c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801677e:	e027      	b.n	80167d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016780:	f107 0308 	add.w	r3, r7, #8
 8016784:	4618      	mov	r0, r3
 8016786:	f7fd fb0b 	bl	8013da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801678e:	e01f      	b.n	80167d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016790:	4b2c      	ldr	r3, [pc, #176]	; (8016844 <UART_SetConfig+0xab0>)
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	f003 0320 	and.w	r3, r3, #32
 8016798:	2b00      	cmp	r3, #0
 801679a:	d009      	beq.n	80167b0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801679c:	4b29      	ldr	r3, [pc, #164]	; (8016844 <UART_SetConfig+0xab0>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	08db      	lsrs	r3, r3, #3
 80167a2:	f003 0303 	and.w	r3, r3, #3
 80167a6:	4a28      	ldr	r2, [pc, #160]	; (8016848 <UART_SetConfig+0xab4>)
 80167a8:	fa22 f303 	lsr.w	r3, r2, r3
 80167ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80167ae:	e00f      	b.n	80167d0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80167b0:	4b25      	ldr	r3, [pc, #148]	; (8016848 <UART_SetConfig+0xab4>)
 80167b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80167b4:	e00c      	b.n	80167d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80167b6:	4b25      	ldr	r3, [pc, #148]	; (801684c <UART_SetConfig+0xab8>)
 80167b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80167ba:	e009      	b.n	80167d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80167bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80167c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80167c2:	e005      	b.n	80167d0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80167c4:	2300      	movs	r3, #0
 80167c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80167c8:	2301      	movs	r3, #1
 80167ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80167ce:	bf00      	nop
    }

    if (pclk != 0U)
 80167d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d021      	beq.n	801681a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167da:	4a1d      	ldr	r2, [pc, #116]	; (8016850 <UART_SetConfig+0xabc>)
 80167dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80167e0:	461a      	mov	r2, r3
 80167e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	685b      	ldr	r3, [r3, #4]
 80167ec:	085b      	lsrs	r3, r3, #1
 80167ee:	441a      	add	r2, r3
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	685b      	ldr	r3, [r3, #4]
 80167f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80167f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80167fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167fc:	2b0f      	cmp	r3, #15
 80167fe:	d909      	bls.n	8016814 <UART_SetConfig+0xa80>
 8016800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016806:	d205      	bcs.n	8016814 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801680a:	b29a      	uxth	r2, r3
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	60da      	str	r2, [r3, #12]
 8016812:	e002      	b.n	801681a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8016814:	2301      	movs	r3, #1
 8016816:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2201      	movs	r2, #1
 801681e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	2201      	movs	r2, #1
 8016826:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	2200      	movs	r2, #0
 801682e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2200      	movs	r2, #0
 8016834:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8016836:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801683a:	4618      	mov	r0, r3
 801683c:	3738      	adds	r7, #56	; 0x38
 801683e:	46bd      	mov	sp, r7
 8016840:	bdb0      	pop	{r4, r5, r7, pc}
 8016842:	bf00      	nop
 8016844:	58024400 	.word	0x58024400
 8016848:	03d09000 	.word	0x03d09000
 801684c:	003d0900 	.word	0x003d0900
 8016850:	0802c380 	.word	0x0802c380

08016854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016854:	b480      	push	{r7}
 8016856:	b083      	sub	sp, #12
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016860:	f003 0301 	and.w	r3, r3, #1
 8016864:	2b00      	cmp	r3, #0
 8016866:	d00a      	beq.n	801687e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	685b      	ldr	r3, [r3, #4]
 801686e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	430a      	orrs	r2, r1
 801687c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016882:	f003 0302 	and.w	r3, r3, #2
 8016886:	2b00      	cmp	r3, #0
 8016888:	d00a      	beq.n	80168a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	685b      	ldr	r3, [r3, #4]
 8016890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	430a      	orrs	r2, r1
 801689e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168a4:	f003 0304 	and.w	r3, r3, #4
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d00a      	beq.n	80168c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	685b      	ldr	r3, [r3, #4]
 80168b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	430a      	orrs	r2, r1
 80168c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168c6:	f003 0308 	and.w	r3, r3, #8
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d00a      	beq.n	80168e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	685b      	ldr	r3, [r3, #4]
 80168d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	430a      	orrs	r2, r1
 80168e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168e8:	f003 0310 	and.w	r3, r3, #16
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d00a      	beq.n	8016906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	689b      	ldr	r3, [r3, #8]
 80168f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	430a      	orrs	r2, r1
 8016904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801690a:	f003 0320 	and.w	r3, r3, #32
 801690e:	2b00      	cmp	r3, #0
 8016910:	d00a      	beq.n	8016928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	689b      	ldr	r3, [r3, #8]
 8016918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	430a      	orrs	r2, r1
 8016926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801692c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016930:	2b00      	cmp	r3, #0
 8016932:	d01a      	beq.n	801696a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	685b      	ldr	r3, [r3, #4]
 801693a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	430a      	orrs	r2, r1
 8016948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801694e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016952:	d10a      	bne.n	801696a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	685b      	ldr	r3, [r3, #4]
 801695a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	430a      	orrs	r2, r1
 8016968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801696e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016972:	2b00      	cmp	r3, #0
 8016974:	d00a      	beq.n	801698c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	685b      	ldr	r3, [r3, #4]
 801697c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	430a      	orrs	r2, r1
 801698a:	605a      	str	r2, [r3, #4]
  }
}
 801698c:	bf00      	nop
 801698e:	370c      	adds	r7, #12
 8016990:	46bd      	mov	sp, r7
 8016992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016996:	4770      	bx	lr

08016998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b086      	sub	sp, #24
 801699c:	af02      	add	r7, sp, #8
 801699e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	2200      	movs	r2, #0
 80169a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80169a8:	f7f7 ff30 	bl	800e80c <HAL_GetTick>
 80169ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	f003 0308 	and.w	r3, r3, #8
 80169b8:	2b08      	cmp	r3, #8
 80169ba:	d10e      	bne.n	80169da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80169bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80169c0:	9300      	str	r3, [sp, #0]
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	2200      	movs	r2, #0
 80169c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f000 f82f 	bl	8016a2e <UART_WaitOnFlagUntilTimeout>
 80169d0:	4603      	mov	r3, r0
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d001      	beq.n	80169da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80169d6:	2303      	movs	r3, #3
 80169d8:	e025      	b.n	8016a26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	f003 0304 	and.w	r3, r3, #4
 80169e4:	2b04      	cmp	r3, #4
 80169e6:	d10e      	bne.n	8016a06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80169e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80169ec:	9300      	str	r3, [sp, #0]
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	2200      	movs	r2, #0
 80169f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80169f6:	6878      	ldr	r0, [r7, #4]
 80169f8:	f000 f819 	bl	8016a2e <UART_WaitOnFlagUntilTimeout>
 80169fc:	4603      	mov	r3, r0
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d001      	beq.n	8016a06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016a02:	2303      	movs	r3, #3
 8016a04:	e00f      	b.n	8016a26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	2220      	movs	r2, #32
 8016a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	2220      	movs	r2, #32
 8016a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2200      	movs	r2, #0
 8016a1a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8016a24:	2300      	movs	r3, #0
}
 8016a26:	4618      	mov	r0, r3
 8016a28:	3710      	adds	r7, #16
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	bd80      	pop	{r7, pc}

08016a2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016a2e:	b580      	push	{r7, lr}
 8016a30:	b09c      	sub	sp, #112	; 0x70
 8016a32:	af00      	add	r7, sp, #0
 8016a34:	60f8      	str	r0, [r7, #12]
 8016a36:	60b9      	str	r1, [r7, #8]
 8016a38:	603b      	str	r3, [r7, #0]
 8016a3a:	4613      	mov	r3, r2
 8016a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016a3e:	e0a9      	b.n	8016b94 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a46:	f000 80a5 	beq.w	8016b94 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016a4a:	f7f7 fedf 	bl	800e80c <HAL_GetTick>
 8016a4e:	4602      	mov	r2, r0
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	1ad3      	subs	r3, r2, r3
 8016a54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016a56:	429a      	cmp	r2, r3
 8016a58:	d302      	bcc.n	8016a60 <UART_WaitOnFlagUntilTimeout+0x32>
 8016a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d140      	bne.n	8016ae2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a68:	e853 3f00 	ldrex	r3, [r3]
 8016a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016a70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8016a74:	667b      	str	r3, [r7, #100]	; 0x64
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	461a      	mov	r2, r3
 8016a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016a80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016a84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016a86:	e841 2300 	strex	r3, r2, [r1]
 8016a8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8016a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d1e6      	bne.n	8016a60 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	3308      	adds	r3, #8
 8016a98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a9c:	e853 3f00 	ldrex	r3, [r3]
 8016aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aa4:	f023 0301 	bic.w	r3, r3, #1
 8016aa8:	663b      	str	r3, [r7, #96]	; 0x60
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	3308      	adds	r3, #8
 8016ab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016ab2:	64ba      	str	r2, [r7, #72]	; 0x48
 8016ab4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ab6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016aba:	e841 2300 	strex	r3, r2, [r1]
 8016abe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d1e5      	bne.n	8016a92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	2220      	movs	r2, #32
 8016aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	2220      	movs	r2, #32
 8016ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	2200      	movs	r2, #0
 8016ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8016ade:	2303      	movs	r3, #3
 8016ae0:	e069      	b.n	8016bb6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	f003 0304 	and.w	r3, r3, #4
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d051      	beq.n	8016b94 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	69db      	ldr	r3, [r3, #28]
 8016af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016afe:	d149      	bne.n	8016b94 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016b08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b12:	e853 3f00 	ldrex	r3, [r3]
 8016b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8016b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	461a      	mov	r2, r3
 8016b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016b28:	637b      	str	r3, [r7, #52]	; 0x34
 8016b2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016b30:	e841 2300 	strex	r3, r2, [r1]
 8016b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8016b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d1e6      	bne.n	8016b0a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	3308      	adds	r3, #8
 8016b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b44:	697b      	ldr	r3, [r7, #20]
 8016b46:	e853 3f00 	ldrex	r3, [r3]
 8016b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8016b4c:	693b      	ldr	r3, [r7, #16]
 8016b4e:	f023 0301 	bic.w	r3, r3, #1
 8016b52:	66bb      	str	r3, [r7, #104]	; 0x68
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	3308      	adds	r3, #8
 8016b5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016b5c:	623a      	str	r2, [r7, #32]
 8016b5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b60:	69f9      	ldr	r1, [r7, #28]
 8016b62:	6a3a      	ldr	r2, [r7, #32]
 8016b64:	e841 2300 	strex	r3, r2, [r1]
 8016b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8016b6a:	69bb      	ldr	r3, [r7, #24]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d1e5      	bne.n	8016b3c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	2220      	movs	r2, #32
 8016b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	2220      	movs	r2, #32
 8016b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	2220      	movs	r2, #32
 8016b84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8016b90:	2303      	movs	r3, #3
 8016b92:	e010      	b.n	8016bb6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	69da      	ldr	r2, [r3, #28]
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	4013      	ands	r3, r2
 8016b9e:	68ba      	ldr	r2, [r7, #8]
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	bf0c      	ite	eq
 8016ba4:	2301      	moveq	r3, #1
 8016ba6:	2300      	movne	r3, #0
 8016ba8:	b2db      	uxtb	r3, r3
 8016baa:	461a      	mov	r2, r3
 8016bac:	79fb      	ldrb	r3, [r7, #7]
 8016bae:	429a      	cmp	r2, r3
 8016bb0:	f43f af46 	beq.w	8016a40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016bb4:	2300      	movs	r3, #0
}
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	3770      	adds	r7, #112	; 0x70
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd80      	pop	{r7, pc}

08016bbe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016bbe:	b480      	push	{r7}
 8016bc0:	b085      	sub	sp, #20
 8016bc2:	af00      	add	r7, sp, #0
 8016bc4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8016bcc:	2b01      	cmp	r3, #1
 8016bce:	d101      	bne.n	8016bd4 <HAL_UARTEx_DisableFifoMode+0x16>
 8016bd0:	2302      	movs	r3, #2
 8016bd2:	e027      	b.n	8016c24 <HAL_UARTEx_DisableFifoMode+0x66>
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	2201      	movs	r2, #1
 8016bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2224      	movs	r2, #36	; 0x24
 8016be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	681a      	ldr	r2, [r3, #0]
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	f022 0201 	bic.w	r2, r2, #1
 8016bfa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016c02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	2200      	movs	r2, #0
 8016c08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	68fa      	ldr	r2, [r7, #12]
 8016c10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	2220      	movs	r2, #32
 8016c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8016c22:	2300      	movs	r3, #0
}
 8016c24:	4618      	mov	r0, r3
 8016c26:	3714      	adds	r7, #20
 8016c28:	46bd      	mov	sp, r7
 8016c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2e:	4770      	bx	lr

08016c30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b084      	sub	sp, #16
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
 8016c38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8016c40:	2b01      	cmp	r3, #1
 8016c42:	d101      	bne.n	8016c48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016c44:	2302      	movs	r3, #2
 8016c46:	e02d      	b.n	8016ca4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	2201      	movs	r2, #1
 8016c4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2224      	movs	r2, #36	; 0x24
 8016c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	f022 0201 	bic.w	r2, r2, #1
 8016c6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	689b      	ldr	r3, [r3, #8]
 8016c76:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	683a      	ldr	r2, [r7, #0]
 8016c80:	430a      	orrs	r2, r1
 8016c82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016c84:	6878      	ldr	r0, [r7, #4]
 8016c86:	f000 f84f 	bl	8016d28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	68fa      	ldr	r2, [r7, #12]
 8016c90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	2220      	movs	r2, #32
 8016c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8016ca2:	2300      	movs	r3, #0
}
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	3710      	adds	r7, #16
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bd80      	pop	{r7, pc}

08016cac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b084      	sub	sp, #16
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
 8016cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8016cbc:	2b01      	cmp	r3, #1
 8016cbe:	d101      	bne.n	8016cc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016cc0:	2302      	movs	r3, #2
 8016cc2:	e02d      	b.n	8016d20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	2201      	movs	r2, #1
 8016cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	2224      	movs	r2, #36	; 0x24
 8016cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	681a      	ldr	r2, [r3, #0]
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	f022 0201 	bic.w	r2, r2, #1
 8016cea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	689b      	ldr	r3, [r3, #8]
 8016cf2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	683a      	ldr	r2, [r7, #0]
 8016cfc:	430a      	orrs	r2, r1
 8016cfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	f000 f811 	bl	8016d28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	68fa      	ldr	r2, [r7, #12]
 8016d0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	2220      	movs	r2, #32
 8016d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	2200      	movs	r2, #0
 8016d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8016d1e:	2300      	movs	r3, #0
}
 8016d20:	4618      	mov	r0, r3
 8016d22:	3710      	adds	r7, #16
 8016d24:	46bd      	mov	sp, r7
 8016d26:	bd80      	pop	{r7, pc}

08016d28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016d28:	b480      	push	{r7}
 8016d2a:	b085      	sub	sp, #20
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d108      	bne.n	8016d4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	2201      	movs	r2, #1
 8016d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	2201      	movs	r2, #1
 8016d44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016d48:	e031      	b.n	8016dae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016d4a:	2310      	movs	r3, #16
 8016d4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016d4e:	2310      	movs	r3, #16
 8016d50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	689b      	ldr	r3, [r3, #8]
 8016d58:	0e5b      	lsrs	r3, r3, #25
 8016d5a:	b2db      	uxtb	r3, r3
 8016d5c:	f003 0307 	and.w	r3, r3, #7
 8016d60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	689b      	ldr	r3, [r3, #8]
 8016d68:	0f5b      	lsrs	r3, r3, #29
 8016d6a:	b2db      	uxtb	r3, r3
 8016d6c:	f003 0307 	and.w	r3, r3, #7
 8016d70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016d72:	7bbb      	ldrb	r3, [r7, #14]
 8016d74:	7b3a      	ldrb	r2, [r7, #12]
 8016d76:	4911      	ldr	r1, [pc, #68]	; (8016dbc <UARTEx_SetNbDataToProcess+0x94>)
 8016d78:	5c8a      	ldrb	r2, [r1, r2]
 8016d7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016d7e:	7b3a      	ldrb	r2, [r7, #12]
 8016d80:	490f      	ldr	r1, [pc, #60]	; (8016dc0 <UARTEx_SetNbDataToProcess+0x98>)
 8016d82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016d84:	fb93 f3f2 	sdiv	r3, r3, r2
 8016d88:	b29a      	uxth	r2, r3
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016d90:	7bfb      	ldrb	r3, [r7, #15]
 8016d92:	7b7a      	ldrb	r2, [r7, #13]
 8016d94:	4909      	ldr	r1, [pc, #36]	; (8016dbc <UARTEx_SetNbDataToProcess+0x94>)
 8016d96:	5c8a      	ldrb	r2, [r1, r2]
 8016d98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016d9c:	7b7a      	ldrb	r2, [r7, #13]
 8016d9e:	4908      	ldr	r1, [pc, #32]	; (8016dc0 <UARTEx_SetNbDataToProcess+0x98>)
 8016da0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016da2:	fb93 f3f2 	sdiv	r3, r3, r2
 8016da6:	b29a      	uxth	r2, r3
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016dae:	bf00      	nop
 8016db0:	3714      	adds	r7, #20
 8016db2:	46bd      	mov	sp, r7
 8016db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db8:	4770      	bx	lr
 8016dba:	bf00      	nop
 8016dbc:	0802c398 	.word	0x0802c398
 8016dc0:	0802c3a0 	.word	0x0802c3a0

08016dc4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8016dc4:	b480      	push	{r7}
 8016dc6:	b083      	sub	sp, #12
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
 8016dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8016dce:	683b      	ldr	r3, [r7, #0]
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d121      	bne.n	8016e1a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681a      	ldr	r2, [r3, #0]
 8016dda:	4b27      	ldr	r3, [pc, #156]	; (8016e78 <FMC_SDRAM_Init+0xb4>)
 8016ddc:	4013      	ands	r3, r2
 8016dde:	683a      	ldr	r2, [r7, #0]
 8016de0:	6851      	ldr	r1, [r2, #4]
 8016de2:	683a      	ldr	r2, [r7, #0]
 8016de4:	6892      	ldr	r2, [r2, #8]
 8016de6:	4311      	orrs	r1, r2
 8016de8:	683a      	ldr	r2, [r7, #0]
 8016dea:	68d2      	ldr	r2, [r2, #12]
 8016dec:	4311      	orrs	r1, r2
 8016dee:	683a      	ldr	r2, [r7, #0]
 8016df0:	6912      	ldr	r2, [r2, #16]
 8016df2:	4311      	orrs	r1, r2
 8016df4:	683a      	ldr	r2, [r7, #0]
 8016df6:	6952      	ldr	r2, [r2, #20]
 8016df8:	4311      	orrs	r1, r2
 8016dfa:	683a      	ldr	r2, [r7, #0]
 8016dfc:	6992      	ldr	r2, [r2, #24]
 8016dfe:	4311      	orrs	r1, r2
 8016e00:	683a      	ldr	r2, [r7, #0]
 8016e02:	69d2      	ldr	r2, [r2, #28]
 8016e04:	4311      	orrs	r1, r2
 8016e06:	683a      	ldr	r2, [r7, #0]
 8016e08:	6a12      	ldr	r2, [r2, #32]
 8016e0a:	4311      	orrs	r1, r2
 8016e0c:	683a      	ldr	r2, [r7, #0]
 8016e0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016e10:	430a      	orrs	r2, r1
 8016e12:	431a      	orrs	r2, r3
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	601a      	str	r2, [r3, #0]
 8016e18:	e026      	b.n	8016e68 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	69d9      	ldr	r1, [r3, #28]
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	6a1b      	ldr	r3, [r3, #32]
 8016e2a:	4319      	orrs	r1, r3
 8016e2c:	683b      	ldr	r3, [r7, #0]
 8016e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e30:	430b      	orrs	r3, r1
 8016e32:	431a      	orrs	r2, r3
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	685a      	ldr	r2, [r3, #4]
 8016e3c:	4b0e      	ldr	r3, [pc, #56]	; (8016e78 <FMC_SDRAM_Init+0xb4>)
 8016e3e:	4013      	ands	r3, r2
 8016e40:	683a      	ldr	r2, [r7, #0]
 8016e42:	6851      	ldr	r1, [r2, #4]
 8016e44:	683a      	ldr	r2, [r7, #0]
 8016e46:	6892      	ldr	r2, [r2, #8]
 8016e48:	4311      	orrs	r1, r2
 8016e4a:	683a      	ldr	r2, [r7, #0]
 8016e4c:	68d2      	ldr	r2, [r2, #12]
 8016e4e:	4311      	orrs	r1, r2
 8016e50:	683a      	ldr	r2, [r7, #0]
 8016e52:	6912      	ldr	r2, [r2, #16]
 8016e54:	4311      	orrs	r1, r2
 8016e56:	683a      	ldr	r2, [r7, #0]
 8016e58:	6952      	ldr	r2, [r2, #20]
 8016e5a:	4311      	orrs	r1, r2
 8016e5c:	683a      	ldr	r2, [r7, #0]
 8016e5e:	6992      	ldr	r2, [r2, #24]
 8016e60:	430a      	orrs	r2, r1
 8016e62:	431a      	orrs	r2, r3
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8016e68:	2300      	movs	r3, #0
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	370c      	adds	r7, #12
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e74:	4770      	bx	lr
 8016e76:	bf00      	nop
 8016e78:	ffff8000 	.word	0xffff8000

08016e7c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8016e7c:	b480      	push	{r7}
 8016e7e:	b085      	sub	sp, #20
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	60f8      	str	r0, [r7, #12]
 8016e84:	60b9      	str	r1, [r7, #8]
 8016e86:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d128      	bne.n	8016ee0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	689b      	ldr	r3, [r3, #8]
 8016e92:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8016e96:	68bb      	ldr	r3, [r7, #8]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	1e59      	subs	r1, r3, #1
 8016e9c:	68bb      	ldr	r3, [r7, #8]
 8016e9e:	685b      	ldr	r3, [r3, #4]
 8016ea0:	3b01      	subs	r3, #1
 8016ea2:	011b      	lsls	r3, r3, #4
 8016ea4:	4319      	orrs	r1, r3
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	689b      	ldr	r3, [r3, #8]
 8016eaa:	3b01      	subs	r3, #1
 8016eac:	021b      	lsls	r3, r3, #8
 8016eae:	4319      	orrs	r1, r3
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	68db      	ldr	r3, [r3, #12]
 8016eb4:	3b01      	subs	r3, #1
 8016eb6:	031b      	lsls	r3, r3, #12
 8016eb8:	4319      	orrs	r1, r3
 8016eba:	68bb      	ldr	r3, [r7, #8]
 8016ebc:	691b      	ldr	r3, [r3, #16]
 8016ebe:	3b01      	subs	r3, #1
 8016ec0:	041b      	lsls	r3, r3, #16
 8016ec2:	4319      	orrs	r1, r3
 8016ec4:	68bb      	ldr	r3, [r7, #8]
 8016ec6:	695b      	ldr	r3, [r3, #20]
 8016ec8:	3b01      	subs	r3, #1
 8016eca:	051b      	lsls	r3, r3, #20
 8016ecc:	4319      	orrs	r1, r3
 8016ece:	68bb      	ldr	r3, [r7, #8]
 8016ed0:	699b      	ldr	r3, [r3, #24]
 8016ed2:	3b01      	subs	r3, #1
 8016ed4:	061b      	lsls	r3, r3, #24
 8016ed6:	430b      	orrs	r3, r1
 8016ed8:	431a      	orrs	r2, r3
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	609a      	str	r2, [r3, #8]
 8016ede:	e02d      	b.n	8016f3c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	689a      	ldr	r2, [r3, #8]
 8016ee4:	4b19      	ldr	r3, [pc, #100]	; (8016f4c <FMC_SDRAM_Timing_Init+0xd0>)
 8016ee6:	4013      	ands	r3, r2
 8016ee8:	68ba      	ldr	r2, [r7, #8]
 8016eea:	68d2      	ldr	r2, [r2, #12]
 8016eec:	3a01      	subs	r2, #1
 8016eee:	0311      	lsls	r1, r2, #12
 8016ef0:	68ba      	ldr	r2, [r7, #8]
 8016ef2:	6952      	ldr	r2, [r2, #20]
 8016ef4:	3a01      	subs	r2, #1
 8016ef6:	0512      	lsls	r2, r2, #20
 8016ef8:	430a      	orrs	r2, r1
 8016efa:	431a      	orrs	r2, r3
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	68db      	ldr	r3, [r3, #12]
 8016f04:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8016f08:	68bb      	ldr	r3, [r7, #8]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	1e59      	subs	r1, r3, #1
 8016f0e:	68bb      	ldr	r3, [r7, #8]
 8016f10:	685b      	ldr	r3, [r3, #4]
 8016f12:	3b01      	subs	r3, #1
 8016f14:	011b      	lsls	r3, r3, #4
 8016f16:	4319      	orrs	r1, r3
 8016f18:	68bb      	ldr	r3, [r7, #8]
 8016f1a:	689b      	ldr	r3, [r3, #8]
 8016f1c:	3b01      	subs	r3, #1
 8016f1e:	021b      	lsls	r3, r3, #8
 8016f20:	4319      	orrs	r1, r3
 8016f22:	68bb      	ldr	r3, [r7, #8]
 8016f24:	691b      	ldr	r3, [r3, #16]
 8016f26:	3b01      	subs	r3, #1
 8016f28:	041b      	lsls	r3, r3, #16
 8016f2a:	4319      	orrs	r1, r3
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	699b      	ldr	r3, [r3, #24]
 8016f30:	3b01      	subs	r3, #1
 8016f32:	061b      	lsls	r3, r3, #24
 8016f34:	430b      	orrs	r3, r1
 8016f36:	431a      	orrs	r2, r3
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8016f3c:	2300      	movs	r3, #0
}
 8016f3e:	4618      	mov	r0, r3
 8016f40:	3714      	adds	r7, #20
 8016f42:	46bd      	mov	sp, r7
 8016f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f48:	4770      	bx	lr
 8016f4a:	bf00      	nop
 8016f4c:	ff0f0fff 	.word	0xff0f0fff

08016f50 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8016f50:	b480      	push	{r7}
 8016f52:	b083      	sub	sp, #12
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	683a      	ldr	r2, [r7, #0]
 8016f5e:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8016f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	683a      	ldr	r2, [r7, #0]
 8016f6a:	3202      	adds	r2, #2
 8016f6c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8016f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	2200      	movs	r2, #0
 8016f78:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	2200      	movs	r2, #0
 8016f84:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8016f86:	2300      	movs	r3, #0
}
 8016f88:	4618      	mov	r0, r3
 8016f8a:	370c      	adds	r7, #12
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f92:	4770      	bx	lr

08016f94 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8016f94:	b480      	push	{r7}
 8016f96:	b085      	sub	sp, #20
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	60f8      	str	r0, [r7, #12]
 8016f9c:	60b9      	str	r1, [r7, #8]
 8016f9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	691a      	ldr	r2, [r3, #16]
 8016fa4:	4b0c      	ldr	r3, [pc, #48]	; (8016fd8 <FMC_SDRAM_SendCommand+0x44>)
 8016fa6:	4013      	ands	r3, r2
 8016fa8:	68ba      	ldr	r2, [r7, #8]
 8016faa:	6811      	ldr	r1, [r2, #0]
 8016fac:	68ba      	ldr	r2, [r7, #8]
 8016fae:	6852      	ldr	r2, [r2, #4]
 8016fb0:	4311      	orrs	r1, r2
 8016fb2:	68ba      	ldr	r2, [r7, #8]
 8016fb4:	6892      	ldr	r2, [r2, #8]
 8016fb6:	3a01      	subs	r2, #1
 8016fb8:	0152      	lsls	r2, r2, #5
 8016fba:	4311      	orrs	r1, r2
 8016fbc:	68ba      	ldr	r2, [r7, #8]
 8016fbe:	68d2      	ldr	r2, [r2, #12]
 8016fc0:	0252      	lsls	r2, r2, #9
 8016fc2:	430a      	orrs	r2, r1
 8016fc4:	431a      	orrs	r2, r3
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8016fca:	2300      	movs	r3, #0
}
 8016fcc:	4618      	mov	r0, r3
 8016fce:	3714      	adds	r7, #20
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd6:	4770      	bx	lr
 8016fd8:	ffc00000 	.word	0xffc00000

08016fdc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8016fdc:	b480      	push	{r7}
 8016fde:	b083      	sub	sp, #12
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
 8016fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	695a      	ldr	r2, [r3, #20]
 8016fea:	4b07      	ldr	r3, [pc, #28]	; (8017008 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8016fec:	4013      	ands	r3, r2
 8016fee:	683a      	ldr	r2, [r7, #0]
 8016ff0:	0052      	lsls	r2, r2, #1
 8016ff2:	431a      	orrs	r2, r3
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8016ff8:	2300      	movs	r3, #0
}
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	370c      	adds	r7, #12
 8016ffe:	46bd      	mov	sp, r7
 8017000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017004:	4770      	bx	lr
 8017006:	bf00      	nop
 8017008:	ffffc001 	.word	0xffffc001

0801700c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801700c:	8880      	ldrh	r0, [r0, #4]
 801700e:	4770      	bx	lr

08017010 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8017010:	2300      	movs	r3, #0
 8017012:	8083      	strh	r3, [r0, #4]
 8017014:	4770      	bx	lr
	...

08017018 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801701a:	6803      	ldr	r3, [r0, #0]
 801701c:	460e      	mov	r6, r1
 801701e:	2100      	movs	r1, #0
 8017020:	4605      	mov	r5, r0
 8017022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017024:	4798      	blx	r3
 8017026:	4604      	mov	r4, r0
 8017028:	682b      	ldr	r3, [r5, #0]
 801702a:	4628      	mov	r0, r5
 801702c:	1b34      	subs	r4, r6, r4
 801702e:	6a1b      	ldr	r3, [r3, #32]
 8017030:	b2a4      	uxth	r4, r4
 8017032:	4798      	blx	r3
 8017034:	88ab      	ldrh	r3, [r5, #4]
 8017036:	fbb4 f4f0 	udiv	r4, r4, r0
 801703a:	42a3      	cmp	r3, r4
 801703c:	d805      	bhi.n	801704a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801703e:	4b0e      	ldr	r3, [pc, #56]	; (8017078 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8017040:	211e      	movs	r1, #30
 8017042:	4a0e      	ldr	r2, [pc, #56]	; (801707c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017044:	480e      	ldr	r0, [pc, #56]	; (8017080 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8017046:	f012 fe53 	bl	8029cf0 <__assert_func>
 801704a:	682b      	ldr	r3, [r5, #0]
 801704c:	2100      	movs	r1, #0
 801704e:	4628      	mov	r0, r5
 8017050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017052:	4798      	blx	r3
 8017054:	682b      	ldr	r3, [r5, #0]
 8017056:	4607      	mov	r7, r0
 8017058:	4628      	mov	r0, r5
 801705a:	6a1b      	ldr	r3, [r3, #32]
 801705c:	4798      	blx	r3
 801705e:	1bf3      	subs	r3, r6, r7
 8017060:	b29b      	uxth	r3, r3
 8017062:	fbb3 f2f0 	udiv	r2, r3, r0
 8017066:	fb02 3010 	mls	r0, r2, r0, r3
 801706a:	b118      	cbz	r0, 8017074 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801706c:	4b05      	ldr	r3, [pc, #20]	; (8017084 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801706e:	211f      	movs	r1, #31
 8017070:	4a02      	ldr	r2, [pc, #8]	; (801707c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017072:	e7e7      	b.n	8017044 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8017074:	4620      	mov	r0, r4
 8017076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017078:	0802c3a8 	.word	0x0802c3a8
 801707c:	0802c516 	.word	0x0802c516
 8017080:	0802c3bd 	.word	0x0802c3bd
 8017084:	0802c3eb 	.word	0x0802c3eb

08017088 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017088:	b538      	push	{r3, r4, r5, lr}
 801708a:	6803      	ldr	r3, [r0, #0]
 801708c:	460d      	mov	r5, r1
 801708e:	4604      	mov	r4, r0
 8017090:	6a1b      	ldr	r3, [r3, #32]
 8017092:	4798      	blx	r3
 8017094:	4285      	cmp	r5, r0
 8017096:	d905      	bls.n	80170a4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8017098:	4b0c      	ldr	r3, [pc, #48]	; (80170cc <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801709a:	2130      	movs	r1, #48	; 0x30
 801709c:	4a0c      	ldr	r2, [pc, #48]	; (80170d0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801709e:	480d      	ldr	r0, [pc, #52]	; (80170d4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80170a0:	f012 fe26 	bl	8029cf0 <__assert_func>
 80170a4:	6823      	ldr	r3, [r4, #0]
 80170a6:	4620      	mov	r0, r4
 80170a8:	88a5      	ldrh	r5, [r4, #4]
 80170aa:	69db      	ldr	r3, [r3, #28]
 80170ac:	4798      	blx	r3
 80170ae:	4285      	cmp	r5, r0
 80170b0:	d303      	bcc.n	80170ba <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80170b2:	4b09      	ldr	r3, [pc, #36]	; (80170d8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80170b4:	2131      	movs	r1, #49	; 0x31
 80170b6:	4a06      	ldr	r2, [pc, #24]	; (80170d0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80170b8:	e7f1      	b.n	801709e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80170ba:	6823      	ldr	r3, [r4, #0]
 80170bc:	4620      	mov	r0, r4
 80170be:	88a1      	ldrh	r1, [r4, #4]
 80170c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170c2:	4798      	blx	r3
 80170c4:	88a3      	ldrh	r3, [r4, #4]
 80170c6:	3301      	adds	r3, #1
 80170c8:	80a3      	strh	r3, [r4, #4]
 80170ca:	bd38      	pop	{r3, r4, r5, pc}
 80170cc:	0802c465 	.word	0x0802c465
 80170d0:	0802c559 	.word	0x0802c559
 80170d4:	0802c3bd 	.word	0x0802c3bd
 80170d8:	0802c47c 	.word	0x0802c47c

080170dc <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80170dc:	b570      	push	{r4, r5, r6, lr}
 80170de:	6803      	ldr	r3, [r0, #0]
 80170e0:	4616      	mov	r6, r2
 80170e2:	4604      	mov	r4, r0
 80170e4:	460d      	mov	r5, r1
 80170e6:	6a1b      	ldr	r3, [r3, #32]
 80170e8:	4798      	blx	r3
 80170ea:	4286      	cmp	r6, r0
 80170ec:	d905      	bls.n	80170fa <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80170ee:	4b06      	ldr	r3, [pc, #24]	; (8017108 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80170f0:	213a      	movs	r1, #58	; 0x3a
 80170f2:	4a06      	ldr	r2, [pc, #24]	; (801710c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80170f4:	4806      	ldr	r0, [pc, #24]	; (8017110 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80170f6:	f012 fdfb 	bl	8029cf0 <__assert_func>
 80170fa:	6823      	ldr	r3, [r4, #0]
 80170fc:	4629      	mov	r1, r5
 80170fe:	4620      	mov	r0, r4
 8017100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017106:	4718      	bx	r3
 8017108:	0802c465 	.word	0x0802c465
 801710c:	0802c4cc 	.word	0x0802c4cc
 8017110:	0802c3bd 	.word	0x0802c3bd

08017114 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017114:	4770      	bx	lr
	...

08017118 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017118:	4a02      	ldr	r2, [pc, #8]	; (8017124 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801711a:	6002      	str	r2, [r0, #0]
 801711c:	2200      	movs	r2, #0
 801711e:	8082      	strh	r2, [r0, #4]
 8017120:	4770      	bx	lr
 8017122:	bf00      	nop
 8017124:	0802c4a0 	.word	0x0802c4a0

08017128 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017128:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801712a:	2000      	movs	r0, #0
 801712c:	b12b      	cbz	r3, 801713a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801712e:	b920      	cbnz	r0, 801713a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017130:	1a5a      	subs	r2, r3, r1
 8017132:	699b      	ldr	r3, [r3, #24]
 8017134:	4250      	negs	r0, r2
 8017136:	4150      	adcs	r0, r2
 8017138:	e7f8      	b.n	801712c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801713a:	4770      	bx	lr

0801713c <_ZN8touchgfx9Container9removeAllEv>:
 801713c:	2200      	movs	r2, #0
 801713e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017140:	b123      	cbz	r3, 801714c <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017142:	6999      	ldr	r1, [r3, #24]
 8017144:	6281      	str	r1, [r0, #40]	; 0x28
 8017146:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801714a:	e7f8      	b.n	801713e <_ZN8touchgfx9Container9removeAllEv+0x2>
 801714c:	4770      	bx	lr

0801714e <_ZN8touchgfx9Container6unlinkEv>:
 801714e:	2300      	movs	r3, #0
 8017150:	6283      	str	r3, [r0, #40]	; 0x28
 8017152:	4770      	bx	lr

08017154 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017154:	2200      	movs	r2, #0
 8017156:	8002      	strh	r2, [r0, #0]
 8017158:	8042      	strh	r2, [r0, #2]
 801715a:	8082      	strh	r2, [r0, #4]
 801715c:	80c2      	strh	r2, [r0, #6]
 801715e:	4770      	bx	lr

08017160 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017160:	b570      	push	{r4, r5, r6, lr}
 8017162:	460d      	mov	r5, r1
 8017164:	4616      	mov	r6, r2
 8017166:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017168:	b13c      	cbz	r4, 801717a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801716a:	6823      	ldr	r3, [r4, #0]
 801716c:	4620      	mov	r0, r4
 801716e:	4632      	mov	r2, r6
 8017170:	4629      	mov	r1, r5
 8017172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017174:	4798      	blx	r3
 8017176:	69a4      	ldr	r4, [r4, #24]
 8017178:	e7f6      	b.n	8017168 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801717a:	bd70      	pop	{r4, r5, r6, pc}

0801717c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801717c:	b538      	push	{r3, r4, r5, lr}
 801717e:	460d      	mov	r5, r1
 8017180:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017182:	b134      	cbz	r4, 8017192 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017184:	682b      	ldr	r3, [r5, #0]
 8017186:	4621      	mov	r1, r4
 8017188:	4628      	mov	r0, r5
 801718a:	689b      	ldr	r3, [r3, #8]
 801718c:	4798      	blx	r3
 801718e:	69a4      	ldr	r4, [r4, #24]
 8017190:	e7f7      	b.n	8017182 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017192:	bd38      	pop	{r3, r4, r5, pc}

08017194 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017194:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017196:	b19b      	cbz	r3, 80171c0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017198:	428b      	cmp	r3, r1
 801719a:	d109      	bne.n	80171b0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801719c:	699a      	ldr	r2, [r3, #24]
 801719e:	2100      	movs	r1, #0
 80171a0:	6159      	str	r1, [r3, #20]
 80171a2:	6282      	str	r2, [r0, #40]	; 0x28
 80171a4:	b902      	cbnz	r2, 80171a8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80171a6:	4770      	bx	lr
 80171a8:	6199      	str	r1, [r3, #24]
 80171aa:	4770      	bx	lr
 80171ac:	4613      	mov	r3, r2
 80171ae:	b13a      	cbz	r2, 80171c0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80171b0:	699a      	ldr	r2, [r3, #24]
 80171b2:	428a      	cmp	r2, r1
 80171b4:	d1fa      	bne.n	80171ac <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80171b6:	698a      	ldr	r2, [r1, #24]
 80171b8:	619a      	str	r2, [r3, #24]
 80171ba:	2300      	movs	r3, #0
 80171bc:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80171c0:	4770      	bx	lr

080171c2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80171c2:	b410      	push	{r4}
 80171c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80171c6:	4604      	mov	r4, r0
 80171c8:	b92b      	cbnz	r3, 80171d6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80171ca:	6803      	ldr	r3, [r0, #0]
 80171cc:	4611      	mov	r1, r2
 80171ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80171d4:	4718      	bx	r3
 80171d6:	b941      	cbnz	r1, 80171ea <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80171d8:	6193      	str	r3, [r2, #24]
 80171da:	6282      	str	r2, [r0, #40]	; 0x28
 80171dc:	6154      	str	r4, [r2, #20]
 80171de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171e2:	4770      	bx	lr
 80171e4:	4603      	mov	r3, r0
 80171e6:	2800      	cmp	r0, #0
 80171e8:	d0f9      	beq.n	80171de <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80171ea:	4299      	cmp	r1, r3
 80171ec:	6998      	ldr	r0, [r3, #24]
 80171ee:	d1f9      	bne.n	80171e4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80171f0:	6190      	str	r0, [r2, #24]
 80171f2:	618a      	str	r2, [r1, #24]
 80171f4:	e7f2      	b.n	80171dc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080171f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80171f8:	4288      	cmp	r0, r1
 80171fa:	b508      	push	{r3, lr}
 80171fc:	d105      	bne.n	801720a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80171fe:	4b11      	ldr	r3, [pc, #68]	; (8017244 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8017200:	2123      	movs	r1, #35	; 0x23
 8017202:	4a11      	ldr	r2, [pc, #68]	; (8017248 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017204:	4811      	ldr	r0, [pc, #68]	; (801724c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8017206:	f012 fd73 	bl	8029cf0 <__assert_func>
 801720a:	694b      	ldr	r3, [r1, #20]
 801720c:	b11b      	cbz	r3, 8017216 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801720e:	4b10      	ldr	r3, [pc, #64]	; (8017250 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8017210:	2124      	movs	r1, #36	; 0x24
 8017212:	4a0d      	ldr	r2, [pc, #52]	; (8017248 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017214:	e7f6      	b.n	8017204 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017216:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801721a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801721c:	b913      	cbnz	r3, 8017224 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801721e:	6281      	str	r1, [r0, #40]	; 0x28
 8017220:	bd08      	pop	{r3, pc}
 8017222:	4613      	mov	r3, r2
 8017224:	699a      	ldr	r2, [r3, #24]
 8017226:	b12a      	cbz	r2, 8017234 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8017228:	428b      	cmp	r3, r1
 801722a:	d1fa      	bne.n	8017222 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 801722c:	4b09      	ldr	r3, [pc, #36]	; (8017254 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801722e:	2135      	movs	r1, #53	; 0x35
 8017230:	4a05      	ldr	r2, [pc, #20]	; (8017248 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017232:	e7e7      	b.n	8017204 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017234:	428b      	cmp	r3, r1
 8017236:	d103      	bne.n	8017240 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8017238:	4b06      	ldr	r3, [pc, #24]	; (8017254 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801723a:	2138      	movs	r1, #56	; 0x38
 801723c:	4a02      	ldr	r2, [pc, #8]	; (8017248 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801723e:	e7e1      	b.n	8017204 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017240:	6199      	str	r1, [r3, #24]
 8017242:	e7ed      	b.n	8017220 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8017244:	0802c597 	.word	0x0802c597
 8017248:	0802c6ec 	.word	0x0802c6ec
 801724c:	0802c5c3 	.word	0x0802c5c3
 8017250:	0802c5f6 	.word	0x0802c5f6
 8017254:	0802c62c 	.word	0x0802c62c

08017258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801725c:	461f      	mov	r7, r3
 801725e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8017262:	460d      	mov	r5, r1
 8017264:	4616      	mov	r6, r2
 8017266:	b103      	cbz	r3, 801726a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017268:	6038      	str	r0, [r7, #0]
 801726a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801726c:	b314      	cbz	r4, 80172b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801726e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017272:	b1eb      	cbz	r3, 80172b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017274:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017278:	428d      	cmp	r5, r1
 801727a:	db19      	blt.n	80172b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801727c:	b289      	uxth	r1, r1
 801727e:	8923      	ldrh	r3, [r4, #8]
 8017280:	440b      	add	r3, r1
 8017282:	b21b      	sxth	r3, r3
 8017284:	429d      	cmp	r5, r3
 8017286:	da13      	bge.n	80172b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017288:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801728c:	4296      	cmp	r6, r2
 801728e:	db0f      	blt.n	80172b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017290:	b292      	uxth	r2, r2
 8017292:	8963      	ldrh	r3, [r4, #10]
 8017294:	4413      	add	r3, r2
 8017296:	b21b      	sxth	r3, r3
 8017298:	429e      	cmp	r6, r3
 801729a:	da09      	bge.n	80172b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801729c:	6823      	ldr	r3, [r4, #0]
 801729e:	1ab2      	subs	r2, r6, r2
 80172a0:	1a69      	subs	r1, r5, r1
 80172a2:	4620      	mov	r0, r4
 80172a4:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80172a8:	b212      	sxth	r2, r2
 80172aa:	463b      	mov	r3, r7
 80172ac:	b209      	sxth	r1, r1
 80172ae:	47c0      	blx	r8
 80172b0:	69a4      	ldr	r4, [r4, #24]
 80172b2:	e7db      	b.n	801726c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80172b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080172b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80172b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172bc:	4c6d      	ldr	r4, [pc, #436]	; (8017474 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80172be:	b0a1      	sub	sp, #132	; 0x84
 80172c0:	4606      	mov	r6, r0
 80172c2:	6824      	ldr	r4, [r4, #0]
 80172c4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80172c6:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80172ca:	2400      	movs	r4, #0
 80172cc:	9303      	str	r3, [sp, #12]
 80172ce:	802c      	strh	r4, [r5, #0]
 80172d0:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80172d2:	802c      	strh	r4, [r5, #0]
 80172d4:	601c      	str	r4, [r3, #0]
 80172d6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80172da:	f7ff ffbd 	bl	8017258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80172de:	f1b9 0f03 	cmp.w	r9, #3
 80172e2:	f340 80c1 	ble.w	8017468 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80172e6:	4631      	mov	r1, r6
 80172e8:	a80c      	add	r0, sp, #48	; 0x30
 80172ea:	f005 f83f 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80172ee:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80172f2:	9306      	str	r3, [sp, #24]
 80172f4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80172f8:	9307      	str	r3, [sp, #28]
 80172fa:	9b03      	ldr	r3, [sp, #12]
 80172fc:	f8d3 a000 	ldr.w	sl, [r3]
 8017300:	f1ba 0f00 	cmp.w	sl, #0
 8017304:	f000 80b3 	beq.w	801746e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017308:	4651      	mov	r1, sl
 801730a:	a810      	add	r0, sp, #64	; 0x40
 801730c:	f005 f82e 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017310:	2002      	movs	r0, #2
 8017312:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8017316:	9b01      	ldr	r3, [sp, #4]
 8017318:	9a06      	ldr	r2, [sp, #24]
 801731a:	fb91 f1f0 	sdiv	r1, r1, r0
 801731e:	189d      	adds	r5, r3, r2
 8017320:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8017324:	9a07      	ldr	r2, [sp, #28]
 8017326:	4419      	add	r1, r3
 8017328:	9b02      	ldr	r3, [sp, #8]
 801732a:	4413      	add	r3, r2
 801732c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8017330:	1a6d      	subs	r5, r5, r1
 8017332:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017336:	fb92 f2f0 	sdiv	r2, r2, r0
 801733a:	440a      	add	r2, r1
 801733c:	1a9b      	subs	r3, r3, r2
 801733e:	435b      	muls	r3, r3
 8017340:	fb05 3505 	mla	r5, r5, r5, r3
 8017344:	4f4c      	ldr	r7, [pc, #304]	; (8017478 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8017346:	ac10      	add	r4, sp, #64	; 0x40
 8017348:	f1b9 0f0c 	cmp.w	r9, #12
 801734c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801734e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017350:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017354:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017358:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801735c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017360:	f04f 0303 	mov.w	r3, #3
 8017364:	bfd8      	it	le
 8017366:	f109 32ff 	addle.w	r2, r9, #4294967295
 801736a:	f04f 0400 	mov.w	r4, #0
 801736e:	f8cd 9000 	str.w	r9, [sp]
 8017372:	bfcc      	ite	gt
 8017374:	4698      	movgt	r8, r3
 8017376:	fb92 f8f3 	sdivle	r8, r2, r3
 801737a:	1c63      	adds	r3, r4, #1
 801737c:	aa10      	add	r2, sp, #64	; 0x40
 801737e:	f004 0401 	and.w	r4, r4, #1
 8017382:	f04f 0b00 	mov.w	fp, #0
 8017386:	9308      	str	r3, [sp, #32]
 8017388:	9b00      	ldr	r3, [sp, #0]
 801738a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 801738e:	fb93 f3f8 	sdiv	r3, r3, r8
 8017392:	3404      	adds	r4, #4
 8017394:	b29b      	uxth	r3, r3
 8017396:	9304      	str	r3, [sp, #16]
 8017398:	9a04      	ldr	r2, [sp, #16]
 801739a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801739e:	fb13 f302 	smulbb	r3, r3, r2
 80173a2:	9a01      	ldr	r2, [sp, #4]
 80173a4:	b29b      	uxth	r3, r3
 80173a6:	1899      	adds	r1, r3, r2
 80173a8:	9305      	str	r3, [sp, #20]
 80173aa:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80173ae:	b209      	sxth	r1, r1
 80173b0:	4299      	cmp	r1, r3
 80173b2:	db4d      	blt.n	8017450 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80173b4:	8932      	ldrh	r2, [r6, #8]
 80173b6:	4413      	add	r3, r2
 80173b8:	b21b      	sxth	r3, r3
 80173ba:	4299      	cmp	r1, r3
 80173bc:	da48      	bge.n	8017450 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80173be:	9b04      	ldr	r3, [sp, #16]
 80173c0:	6827      	ldr	r7, [r4, #0]
 80173c2:	fb17 f703 	smulbb	r7, r7, r3
 80173c6:	9b02      	ldr	r3, [sp, #8]
 80173c8:	b2bf      	uxth	r7, r7
 80173ca:	18fa      	adds	r2, r7, r3
 80173cc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80173d0:	b212      	sxth	r2, r2
 80173d2:	429a      	cmp	r2, r3
 80173d4:	db3c      	blt.n	8017450 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80173d6:	8970      	ldrh	r0, [r6, #10]
 80173d8:	4403      	add	r3, r0
 80173da:	b21b      	sxth	r3, r3
 80173dc:	429a      	cmp	r2, r3
 80173de:	da37      	bge.n	8017450 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80173e0:	2300      	movs	r3, #0
 80173e2:	4630      	mov	r0, r6
 80173e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80173e6:	ab0b      	add	r3, sp, #44	; 0x2c
 80173e8:	f7ff ff36 	bl	8017258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80173ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80173ee:	b37a      	cbz	r2, 8017450 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80173f0:	4552      	cmp	r2, sl
 80173f2:	d02d      	beq.n	8017450 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80173f4:	4611      	mov	r1, r2
 80173f6:	a80e      	add	r0, sp, #56	; 0x38
 80173f8:	9209      	str	r2, [sp, #36]	; 0x24
 80173fa:	f004 ffb7 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80173fe:	f04f 0e02 	mov.w	lr, #2
 8017402:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8017406:	9a06      	ldr	r2, [sp, #24]
 8017408:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801740c:	9b01      	ldr	r3, [sp, #4]
 801740e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8017412:	4413      	add	r3, r2
 8017414:	9a07      	ldr	r2, [sp, #28]
 8017416:	fb91 f1fe 	sdiv	r1, r1, lr
 801741a:	fb9c fcfe 	sdiv	ip, ip, lr
 801741e:	4401      	add	r1, r0
 8017420:	1a58      	subs	r0, r3, r1
 8017422:	9b02      	ldr	r3, [sp, #8]
 8017424:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8017428:	4413      	add	r3, r2
 801742a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801742c:	448c      	add	ip, r1
 801742e:	eba3 030c 	sub.w	r3, r3, ip
 8017432:	435b      	muls	r3, r3
 8017434:	fb00 3300 	mla	r3, r0, r0, r3
 8017438:	42ab      	cmp	r3, r5
 801743a:	d208      	bcs.n	801744e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 801743c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801743e:	461d      	mov	r5, r3
 8017440:	9803      	ldr	r0, [sp, #12]
 8017442:	6001      	str	r1, [r0, #0]
 8017444:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8017446:	9805      	ldr	r0, [sp, #20]
 8017448:	8008      	strh	r0, [r1, #0]
 801744a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801744c:	800f      	strh	r7, [r1, #0]
 801744e:	4692      	mov	sl, r2
 8017450:	f10b 0b01 	add.w	fp, fp, #1
 8017454:	3408      	adds	r4, #8
 8017456:	f1bb 0f04 	cmp.w	fp, #4
 801745a:	d19d      	bne.n	8017398 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 801745c:	9b00      	ldr	r3, [sp, #0]
 801745e:	9c08      	ldr	r4, [sp, #32]
 8017460:	444b      	add	r3, r9
 8017462:	4544      	cmp	r4, r8
 8017464:	9300      	str	r3, [sp, #0]
 8017466:	d188      	bne.n	801737a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017468:	b021      	add	sp, #132	; 0x84
 801746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801746e:	f04f 35ff 	mov.w	r5, #4294967295
 8017472:	e767      	b.n	8017344 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8017474:	2400af44 	.word	0x2400af44
 8017478:	0802b84c 	.word	0x0802b84c

0801747c <_ZN8touchgfx4RectaNERKS0_>:
 801747c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017480:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017484:	888c      	ldrh	r4, [r1, #4]
 8017486:	f9b0 9000 	ldrsh.w	r9, [r0]
 801748a:	443c      	add	r4, r7
 801748c:	b2a4      	uxth	r4, r4
 801748e:	fa0f f884 	sxth.w	r8, r4
 8017492:	45c1      	cmp	r9, r8
 8017494:	da2f      	bge.n	80174f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017496:	8882      	ldrh	r2, [r0, #4]
 8017498:	444a      	add	r2, r9
 801749a:	b292      	uxth	r2, r2
 801749c:	fa0f fe82 	sxth.w	lr, r2
 80174a0:	4577      	cmp	r7, lr
 80174a2:	da28      	bge.n	80174f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80174a4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80174a8:	88cb      	ldrh	r3, [r1, #6]
 80174aa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80174ae:	442b      	add	r3, r5
 80174b0:	b21b      	sxth	r3, r3
 80174b2:	429e      	cmp	r6, r3
 80174b4:	da1f      	bge.n	80174f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80174b6:	88c3      	ldrh	r3, [r0, #6]
 80174b8:	4433      	add	r3, r6
 80174ba:	b29b      	uxth	r3, r3
 80174bc:	fa0f fc83 	sxth.w	ip, r3
 80174c0:	4565      	cmp	r5, ip
 80174c2:	da18      	bge.n	80174f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80174c4:	454f      	cmp	r7, r9
 80174c6:	bfb8      	it	lt
 80174c8:	464f      	movlt	r7, r9
 80174ca:	42b5      	cmp	r5, r6
 80174cc:	bfb8      	it	lt
 80174ce:	4635      	movlt	r5, r6
 80174d0:	45f0      	cmp	r8, lr
 80174d2:	bfd8      	it	le
 80174d4:	4622      	movle	r2, r4
 80174d6:	1bd2      	subs	r2, r2, r7
 80174d8:	8082      	strh	r2, [r0, #4]
 80174da:	884a      	ldrh	r2, [r1, #2]
 80174dc:	88c9      	ldrh	r1, [r1, #6]
 80174de:	8007      	strh	r7, [r0, #0]
 80174e0:	440a      	add	r2, r1
 80174e2:	8045      	strh	r5, [r0, #2]
 80174e4:	b292      	uxth	r2, r2
 80174e6:	b211      	sxth	r1, r2
 80174e8:	458c      	cmp	ip, r1
 80174ea:	bfa8      	it	ge
 80174ec:	4613      	movge	r3, r2
 80174ee:	1b5b      	subs	r3, r3, r5
 80174f0:	80c3      	strh	r3, [r0, #6]
 80174f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174f6:	2300      	movs	r3, #0
 80174f8:	8003      	strh	r3, [r0, #0]
 80174fa:	8043      	strh	r3, [r0, #2]
 80174fc:	8083      	strh	r3, [r0, #4]
 80174fe:	80c3      	strh	r3, [r0, #6]
 8017500:	e7f7      	b.n	80174f2 <_ZN8touchgfx4RectaNERKS0_+0x76>

08017502 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8017502:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017506:	2b00      	cmp	r3, #0
 8017508:	dd06      	ble.n	8017518 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801750a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801750e:	2800      	cmp	r0, #0
 8017510:	bfcc      	ite	gt
 8017512:	2000      	movgt	r0, #0
 8017514:	2001      	movle	r0, #1
 8017516:	4770      	bx	lr
 8017518:	2001      	movs	r0, #1
 801751a:	4770      	bx	lr

0801751c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801751c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017520:	2300      	movs	r3, #0
 8017522:	4604      	mov	r4, r0
 8017524:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017526:	8003      	strh	r3, [r0, #0]
 8017528:	8043      	strh	r3, [r0, #2]
 801752a:	8083      	strh	r3, [r0, #4]
 801752c:	80c3      	strh	r3, [r0, #6]
 801752e:	2d00      	cmp	r5, #0
 8017530:	d040      	beq.n	80175b4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017532:	1d28      	adds	r0, r5, #4
 8017534:	f7ff ffe5 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017538:	b988      	cbnz	r0, 801755e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801753a:	4620      	mov	r0, r4
 801753c:	f7ff ffe1 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017540:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017544:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017548:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801754c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017550:	b138      	cbz	r0, 8017562 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017552:	8022      	strh	r2, [r4, #0]
 8017554:	8063      	strh	r3, [r4, #2]
 8017556:	f8a4 e004 	strh.w	lr, [r4, #4]
 801755a:	f8a4 c006 	strh.w	ip, [r4, #6]
 801755e:	69ad      	ldr	r5, [r5, #24]
 8017560:	e7e5      	b.n	801752e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017562:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017566:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801756a:	4290      	cmp	r0, r2
 801756c:	4607      	mov	r7, r0
 801756e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017572:	460e      	mov	r6, r1
 8017574:	bfa8      	it	ge
 8017576:	4617      	movge	r7, r2
 8017578:	4299      	cmp	r1, r3
 801757a:	4472      	add	r2, lr
 801757c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017580:	bfa8      	it	ge
 8017582:	461e      	movge	r6, r3
 8017584:	4440      	add	r0, r8
 8017586:	4471      	add	r1, lr
 8017588:	4463      	add	r3, ip
 801758a:	b200      	sxth	r0, r0
 801758c:	8027      	strh	r7, [r4, #0]
 801758e:	b212      	sxth	r2, r2
 8017590:	8066      	strh	r6, [r4, #2]
 8017592:	b209      	sxth	r1, r1
 8017594:	b21b      	sxth	r3, r3
 8017596:	4290      	cmp	r0, r2
 8017598:	bfac      	ite	ge
 801759a:	ebc7 0200 	rsbge	r2, r7, r0
 801759e:	ebc7 0202 	rsblt	r2, r7, r2
 80175a2:	4299      	cmp	r1, r3
 80175a4:	bfac      	ite	ge
 80175a6:	ebc6 0301 	rsbge	r3, r6, r1
 80175aa:	ebc6 0303 	rsblt	r3, r6, r3
 80175ae:	80a2      	strh	r2, [r4, #4]
 80175b0:	80e3      	strh	r3, [r4, #6]
 80175b2:	e7d4      	b.n	801755e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80175b4:	4620      	mov	r0, r4
 80175b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080175ba <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80175ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80175be:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80175c2:	b383      	cbz	r3, 8017626 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80175c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80175c6:	b374      	cbz	r4, 8017626 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80175c8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80175cc:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80175d0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80175d4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80175d8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80175dc:	b303      	cbz	r3, 8017620 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80175de:	4668      	mov	r0, sp
 80175e0:	1d21      	adds	r1, r4, #4
 80175e2:	f8ad 5000 	strh.w	r5, [sp]
 80175e6:	f8ad 6002 	strh.w	r6, [sp, #2]
 80175ea:	f8ad 7004 	strh.w	r7, [sp, #4]
 80175ee:	f8ad 8006 	strh.w	r8, [sp, #6]
 80175f2:	f7ff ff43 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 80175f6:	4668      	mov	r0, sp
 80175f8:	f7ff ff83 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 80175fc:	b980      	cbnz	r0, 8017620 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80175fe:	f8bd 3000 	ldrh.w	r3, [sp]
 8017602:	4669      	mov	r1, sp
 8017604:	88a2      	ldrh	r2, [r4, #4]
 8017606:	4620      	mov	r0, r4
 8017608:	1a9b      	subs	r3, r3, r2
 801760a:	88e2      	ldrh	r2, [r4, #6]
 801760c:	f8ad 3000 	strh.w	r3, [sp]
 8017610:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017614:	1a9b      	subs	r3, r3, r2
 8017616:	f8ad 3002 	strh.w	r3, [sp, #2]
 801761a:	6823      	ldr	r3, [r4, #0]
 801761c:	689b      	ldr	r3, [r3, #8]
 801761e:	4798      	blx	r3
 8017620:	69a4      	ldr	r4, [r4, #24]
 8017622:	2c00      	cmp	r4, #0
 8017624:	d1d8      	bne.n	80175d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017626:	b002      	add	sp, #8
 8017628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801762c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801762c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801762e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017632:	460d      	mov	r5, r1
 8017634:	4616      	mov	r6, r2
 8017636:	b323      	cbz	r3, 8017682 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017638:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801763a:	b314      	cbz	r4, 8017682 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801763c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017640:	b1eb      	cbz	r3, 801767e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017642:	6828      	ldr	r0, [r5, #0]
 8017644:	466b      	mov	r3, sp
 8017646:	6869      	ldr	r1, [r5, #4]
 8017648:	c303      	stmia	r3!, {r0, r1}
 801764a:	4668      	mov	r0, sp
 801764c:	1d21      	adds	r1, r4, #4
 801764e:	f7ff ff15 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 8017652:	4668      	mov	r0, sp
 8017654:	f7ff ff55 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017658:	b988      	cbnz	r0, 801767e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801765a:	f8bd 3000 	ldrh.w	r3, [sp]
 801765e:	4669      	mov	r1, sp
 8017660:	88a2      	ldrh	r2, [r4, #4]
 8017662:	4620      	mov	r0, r4
 8017664:	1a9b      	subs	r3, r3, r2
 8017666:	88e2      	ldrh	r2, [r4, #6]
 8017668:	f8ad 3000 	strh.w	r3, [sp]
 801766c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017670:	1a9b      	subs	r3, r3, r2
 8017672:	4632      	mov	r2, r6
 8017674:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017678:	6823      	ldr	r3, [r4, #0]
 801767a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801767c:	4798      	blx	r3
 801767e:	69a4      	ldr	r4, [r4, #24]
 8017680:	e7db      	b.n	801763a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017682:	b002      	add	sp, #8
 8017684:	bd70      	pop	{r4, r5, r6, pc}

08017686 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8017686:	2000      	movs	r0, #0
 8017688:	4770      	bx	lr

0801768a <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801768a:	2001      	movs	r0, #1
 801768c:	4770      	bx	lr

0801768e <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 801768e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017690:	6803      	ldr	r3, [r0, #0]
 8017692:	4604      	mov	r4, r0
 8017694:	460e      	mov	r6, r1
 8017696:	4601      	mov	r1, r0
 8017698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801769a:	4668      	mov	r0, sp
 801769c:	4615      	mov	r5, r2
 801769e:	4798      	blx	r3
 80176a0:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80176a4:	b13b      	cbz	r3, 80176b6 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x28>
 80176a6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80176aa:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80176ae:	4293      	cmp	r3, r2
 80176b0:	bfac      	ite	ge
 80176b2:	2300      	movge	r3, #0
 80176b4:	2301      	movlt	r3, #1
 80176b6:	7033      	strb	r3, [r6, #0]
 80176b8:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80176bc:	b13b      	cbz	r3, 80176ce <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x40>
 80176be:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80176c2:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80176c6:	4293      	cmp	r3, r2
 80176c8:	bfac      	ite	ge
 80176ca:	2300      	movge	r3, #0
 80176cc:	2301      	movlt	r3, #1
 80176ce:	702b      	strb	r3, [r5, #0]
 80176d0:	b002      	add	sp, #8
 80176d2:	bd70      	pop	{r4, r5, r6, pc}

080176d4 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 80176d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176d8:	4604      	mov	r4, r0
 80176da:	460f      	mov	r7, r1
 80176dc:	4616      	mov	r6, r2
 80176de:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80176e0:	f100 0838 	add.w	r8, r0, #56	; 0x38
 80176e4:	f100 0964 	add.w	r9, r0, #100	; 0x64
 80176e8:	b15d      	cbz	r5, 8017702 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 80176ea:	4545      	cmp	r5, r8
 80176ec:	d007      	beq.n	80176fe <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 80176ee:	454d      	cmp	r5, r9
 80176f0:	d005      	beq.n	80176fe <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 80176f2:	682b      	ldr	r3, [r5, #0]
 80176f4:	4632      	mov	r2, r6
 80176f6:	4639      	mov	r1, r7
 80176f8:	4628      	mov	r0, r5
 80176fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176fc:	4798      	blx	r3
 80176fe:	69ad      	ldr	r5, [r5, #24]
 8017700:	e7f2      	b.n	80176e8 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 8017702:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8017706:	441f      	add	r7, r3
 8017708:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 801770c:	441e      	add	r6, r3
 801770e:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
 8017712:	f8a4 609a 	strh.w	r6, [r4, #154]	; 0x9a
 8017716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801771a <_ZN8touchgfx9DragEventD1Ev>:
 801771a:	4770      	bx	lr

0801771c <_ZN8touchgfx10ClickEventD1Ev>:
 801771c:	4770      	bx	lr

0801771e <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 801771e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017720:	4605      	mov	r5, r0
 8017722:	f100 0638 	add.w	r6, r0, #56	; 0x38
 8017726:	4604      	mov	r4, r0
 8017728:	460f      	mov	r7, r1
 801772a:	f855 3b64 	ldr.w	r3, [r5], #100
 801772e:	4631      	mov	r1, r6
 8017730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017732:	4798      	blx	r3
 8017734:	6823      	ldr	r3, [r4, #0]
 8017736:	4629      	mov	r1, r5
 8017738:	4620      	mov	r0, r4
 801773a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801773c:	4798      	blx	r3
 801773e:	4639      	mov	r1, r7
 8017740:	4620      	mov	r0, r4
 8017742:	f7ff fd59 	bl	80171f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017746:	4631      	mov	r1, r6
 8017748:	4620      	mov	r0, r4
 801774a:	f7ff fd55 	bl	80171f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801774e:	4629      	mov	r1, r5
 8017750:	4620      	mov	r0, r4
 8017752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017756:	f7ff bd4f 	b.w	80171f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>

0801775a <_ZN8touchgfx10ClickEventD0Ev>:
 801775a:	b510      	push	{r4, lr}
 801775c:	4604      	mov	r4, r0
 801775e:	210c      	movs	r1, #12
 8017760:	f012 fa97 	bl	8029c92 <_ZdlPvj>
 8017764:	4620      	mov	r0, r4
 8017766:	bd10      	pop	{r4, pc}

08017768 <_ZN8touchgfx9DragEventD0Ev>:
 8017768:	b510      	push	{r4, lr}
 801776a:	4604      	mov	r4, r0
 801776c:	2110      	movs	r1, #16
 801776e:	f012 fa90 	bl	8029c92 <_ZdlPvj>
 8017772:	4620      	mov	r0, r4
 8017774:	bd10      	pop	{r4, pc}
	...

08017778 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 8017778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801777c:	b08b      	sub	sp, #44	; 0x2c
 801777e:	2300      	movs	r3, #0
 8017780:	4604      	mov	r4, r0
 8017782:	f9b1 9006 	ldrsh.w	r9, [r1, #6]
 8017786:	aa0a      	add	r2, sp, #40	; 0x28
 8017788:	f88d 3006 	strb.w	r3, [sp, #6]
 801778c:	f9b1 8008 	ldrsh.w	r8, [r1, #8]
 8017790:	460d      	mov	r5, r1
 8017792:	f802 3d21 	strb.w	r3, [r2, #-33]!
 8017796:	6803      	ldr	r3, [r0, #0]
 8017798:	f9b1 700a 	ldrsh.w	r7, [r1, #10]
 801779c:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 80177a0:	f10d 0106 	add.w	r1, sp, #6
 80177a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80177a8:	4798      	blx	r3
 80177aa:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80177ae:	2900      	cmp	r1, #0
 80177b0:	d03d      	beq.n	801782e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 80177b2:	42a1      	cmp	r1, r4
 80177b4:	d03b      	beq.n	801782e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 80177b6:	a802      	add	r0, sp, #8
 80177b8:	f004 fdd8 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177bc:	4621      	mov	r1, r4
 80177be:	a804      	add	r0, sp, #16
 80177c0:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 80177c4:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 80177c8:	f004 fdd0 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177cc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80177d0:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 80177d4:	eba3 030b 	sub.w	r3, r3, fp
 80177d8:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 80177dc:	88e9      	ldrh	r1, [r5, #6]
 80177de:	4413      	add	r3, r2
 80177e0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80177e4:	f89d c006 	ldrb.w	ip, [sp, #6]
 80177e8:	eba2 020a 	sub.w	r2, r2, sl
 80177ec:	b29b      	uxth	r3, r3
 80177ee:	4402      	add	r2, r0
 80177f0:	8928      	ldrh	r0, [r5, #8]
 80177f2:	4419      	add	r1, r3
 80177f4:	b292      	uxth	r2, r2
 80177f6:	b209      	sxth	r1, r1
 80177f8:	4410      	add	r0, r2
 80177fa:	b200      	sxth	r0, r0
 80177fc:	f1bc 0f00 	cmp.w	ip, #0
 8017800:	f040 808f 	bne.w	8017922 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 8017804:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 8017808:	4473      	add	r3, lr
 801780a:	b21b      	sxth	r3, r3
 801780c:	f89d e007 	ldrb.w	lr, [sp, #7]
 8017810:	f1be 0f00 	cmp.w	lr, #0
 8017814:	f040 80b3 	bne.w	801797e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x206>
 8017818:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 801781c:	4472      	add	r2, lr
 801781e:	b212      	sxth	r2, r2
 8017820:	f1bc 0f00 	cmp.w	ip, #0
 8017824:	f000 80ca 	beq.w	80179bc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x244>
 8017828:	4290      	cmp	r0, r2
 801782a:	f040 80b0 	bne.w	801798e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x216>
 801782e:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 8017832:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8017836:	2b00      	cmp	r3, #0
 8017838:	f040 809b 	bne.w	8017972 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 801783c:	896e      	ldrh	r6, [r5, #10]
 801783e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8017842:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 8017846:	89ad      	ldrh	r5, [r5, #12]
 8017848:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
 801784c:	f8b4 80a0 	ldrh.w	r8, [r4, #160]	; 0xa0
 8017850:	4419      	add	r1, r3
 8017852:	4433      	add	r3, r6
 8017854:	4490      	add	r8, r2
 8017856:	442a      	add	r2, r5
 8017858:	b29b      	uxth	r3, r3
 801785a:	f89d 5006 	ldrb.w	r5, [sp, #6]
 801785e:	b292      	uxth	r2, r2
 8017860:	b289      	uxth	r1, r1
 8017862:	fa1f f888 	uxth.w	r8, r8
 8017866:	b21f      	sxth	r7, r3
 8017868:	b216      	sxth	r6, r2
 801786a:	b165      	cbz	r5, 8017886 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10e>
 801786c:	1a5b      	subs	r3, r3, r1
 801786e:	b29b      	uxth	r3, r3
 8017870:	b21d      	sxth	r5, r3
 8017872:	2d00      	cmp	r5, #0
 8017874:	bfbc      	itt	lt
 8017876:	425b      	neglt	r3, r3
 8017878:	b21d      	sxthlt	r5, r3
 801787a:	f9b4 309c 	ldrsh.w	r3, [r4, #156]	; 0x9c
 801787e:	42ab      	cmp	r3, r5
 8017880:	bfac      	ite	ge
 8017882:	2500      	movge	r5, #0
 8017884:	2501      	movlt	r5, #1
 8017886:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801788a:	b15b      	cbz	r3, 80178a4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 801788c:	eba2 0308 	sub.w	r3, r2, r8
 8017890:	b29b      	uxth	r3, r3
 8017892:	b21a      	sxth	r2, r3
 8017894:	2a00      	cmp	r2, #0
 8017896:	bfbc      	itt	lt
 8017898:	425b      	neglt	r3, r3
 801789a:	b21a      	sxthlt	r2, r3
 801789c:	f9b4 309c 	ldrsh.w	r3, [r4, #156]	; 0x9c
 80178a0:	4293      	cmp	r3, r2
 80178a2:	db01      	blt.n	80178a8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x130>
 80178a4:	2d00      	cmp	r5, #0
 80178a6:	d03e      	beq.n	8017926 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1ae>
 80178a8:	2501      	movs	r5, #1
 80178aa:	fa0f f981 	sxth.w	r9, r1
 80178ae:	fa0f f888 	sxth.w	r8, r8
 80178b2:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 80178b6:	b1a0      	cbz	r0, 80178e2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x16a>
 80178b8:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 80178bc:	b98b      	cbnz	r3, 80178e2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x16a>
 80178be:	4a41      	ldr	r2, [pc, #260]	; (80179c4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>)
 80178c0:	a906      	add	r1, sp, #24
 80178c2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80178c6:	9206      	str	r2, [sp, #24]
 80178c8:	2202      	movs	r2, #2
 80178ca:	f8ad 3020 	strh.w	r3, [sp, #32]
 80178ce:	f88d 201c 	strb.w	r2, [sp, #28]
 80178d2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80178d6:	6803      	ldr	r3, [r0, #0]
 80178d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178da:	4798      	blx	r3
 80178dc:	2301      	movs	r3, #1
 80178de:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 80178e2:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 80178e6:	b149      	cbz	r1, 80178fc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x184>
 80178e8:	eba7 0109 	sub.w	r1, r7, r9
 80178ec:	b209      	sxth	r1, r1
 80178ee:	b12d      	cbz	r5, 80178fc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x184>
 80178f0:	2900      	cmp	r1, #0
 80178f2:	dc40      	bgt.n	8017976 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 80178f4:	bf14      	ite	ne
 80178f6:	f04f 31ff 	movne.w	r1, #4294967295
 80178fa:	2100      	moveq	r1, #0
 80178fc:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8017900:	b14a      	cbz	r2, 8017916 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 8017902:	eba6 0608 	sub.w	r6, r6, r8
 8017906:	b232      	sxth	r2, r6
 8017908:	b12d      	cbz	r5, 8017916 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 801790a:	2a00      	cmp	r2, #0
 801790c:	dc35      	bgt.n	801797a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 801790e:	bf14      	ite	ne
 8017910:	f04f 32ff 	movne.w	r2, #4294967295
 8017914:	2200      	moveq	r2, #0
 8017916:	6823      	ldr	r3, [r4, #0]
 8017918:	4620      	mov	r0, r4
 801791a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801791e:	4798      	blx	r3
 8017920:	e024      	b.n	801796c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 8017922:	460b      	mov	r3, r1
 8017924:	e772      	b.n	801780c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 8017926:	b308      	cbz	r0, 801796c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 8017928:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 801792c:	b9f3      	cbnz	r3, 801796c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 801792e:	ab0a      	add	r3, sp, #40	; 0x28
 8017930:	4620      	mov	r0, r4
 8017932:	4632      	mov	r2, r6
 8017934:	4639      	mov	r1, r7
 8017936:	f843 5d18 	str.w	r5, [r3, #-24]!
 801793a:	f7ff fc8d 	bl	8017258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801793e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8017942:	9b04      	ldr	r3, [sp, #16]
 8017944:	4298      	cmp	r0, r3
 8017946:	d011      	beq.n	801796c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 8017948:	4b1e      	ldr	r3, [pc, #120]	; (80179c4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>)
 801794a:	a906      	add	r1, sp, #24
 801794c:	f8ad 501e 	strh.w	r5, [sp, #30]
 8017950:	9306      	str	r3, [sp, #24]
 8017952:	2302      	movs	r3, #2
 8017954:	f8ad 5020 	strh.w	r5, [sp, #32]
 8017958:	f88d 301c 	strb.w	r3, [sp, #28]
 801795c:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8017960:	6803      	ldr	r3, [r0, #0]
 8017962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017964:	4798      	blx	r3
 8017966:	2301      	movs	r3, #1
 8017968:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 801796c:	b00b      	add	sp, #44	; 0x2c
 801796e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017972:	2500      	movs	r5, #0
 8017974:	e79f      	b.n	80178b6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13e>
 8017976:	2101      	movs	r1, #1
 8017978:	e7c0      	b.n	80178fc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x184>
 801797a:	2201      	movs	r2, #1
 801797c:	e7cb      	b.n	8017916 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 801797e:	f1bc 0f00 	cmp.w	ip, #0
 8017982:	f47f af54 	bne.w	801782e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8017986:	428b      	cmp	r3, r1
 8017988:	f43f af51 	beq.w	801782e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801798c:	4602      	mov	r2, r0
 801798e:	f8df c038 	ldr.w	ip, [pc, #56]	; 80179c8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x250>
 8017992:	f8ad 0020 	strh.w	r0, [sp, #32]
 8017996:	f8cd c018 	str.w	ip, [sp, #24]
 801799a:	f04f 0c00 	mov.w	ip, #0
 801799e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80179a2:	f8ad 101e 	strh.w	r1, [sp, #30]
 80179a6:	a906      	add	r1, sp, #24
 80179a8:	f88d c01c 	strb.w	ip, [sp, #28]
 80179ac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80179b0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80179b4:	6803      	ldr	r3, [r0, #0]
 80179b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80179b8:	4798      	blx	r3
 80179ba:	e738      	b.n	801782e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 80179bc:	428b      	cmp	r3, r1
 80179be:	f43f af33 	beq.w	8017828 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 80179c2:	e7e4      	b.n	801798e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x216>
 80179c4:	0802c730 	.word	0x0802c730
 80179c8:	0802c744 	.word	0x0802c744

080179cc <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 80179cc:	b570      	push	{r4, r5, r6, lr}
 80179ce:	b086      	sub	sp, #24
 80179d0:	2300      	movs	r3, #0
 80179d2:	460c      	mov	r4, r1
 80179d4:	4605      	mov	r5, r0
 80179d6:	aa06      	add	r2, sp, #24
 80179d8:	f88d 3002 	strb.w	r3, [sp, #2]
 80179dc:	f10d 0102 	add.w	r1, sp, #2
 80179e0:	f802 3d15 	strb.w	r3, [r2, #-21]!
 80179e4:	6803      	ldr	r3, [r0, #0]
 80179e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80179ea:	4798      	blx	r3
 80179ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80179f0:	b10b      	cbz	r3, 80179f6 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 80179f2:	7923      	ldrb	r3, [r4, #4]
 80179f4:	b133      	cbz	r3, 8017a04 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 80179f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d067      	beq.n	8017ace <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 80179fe:	7923      	ldrb	r3, [r4, #4]
 8017a00:	2b01      	cmp	r3, #1
 8017a02:	d164      	bne.n	8017ace <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8017a04:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	bfbc      	itt	lt
 8017a0c:	425a      	neglt	r2, r3
 8017a0e:	b213      	sxthlt	r3, r2
 8017a10:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	; 0x9c
 8017a14:	429a      	cmp	r2, r3
 8017a16:	dc5a      	bgt.n	8017ace <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8017a18:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 8017a1a:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	; 0xb8
 8017a1e:	429a      	cmp	r2, r3
 8017a20:	bfa8      	it	ge
 8017a22:	461a      	movge	r2, r3
 8017a24:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	; 0xba
 8017a28:	b212      	sxth	r2, r2
 8017a2a:	2a05      	cmp	r2, #5
 8017a2c:	bfb8      	it	lt
 8017a2e:	2205      	movlt	r2, #5
 8017a30:	4351      	muls	r1, r2
 8017a32:	3a04      	subs	r2, #4
 8017a34:	fb91 f1f3 	sdiv	r1, r1, r3
 8017a38:	b288      	uxth	r0, r1
 8017a3a:	4629      	mov	r1, r5
 8017a3c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8017a40:	f8a5 00a8 	strh.w	r0, [r5, #168]	; 0xa8
 8017a44:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a4e:	bfcc      	ite	gt
 8017a50:	2601      	movgt	r6, #1
 8017a52:	461e      	movle	r6, r3
 8017a54:	00d3      	lsls	r3, r2, #3
 8017a56:	fb13 f306 	smulbb	r3, r3, r6
 8017a5a:	b29b      	uxth	r3, r3
 8017a5c:	b21a      	sxth	r2, r3
 8017a5e:	2a00      	cmp	r2, #0
 8017a60:	f8a5 20ac 	strh.w	r2, [r5, #172]	; 0xac
 8017a64:	bfbc      	itt	lt
 8017a66:	425b      	neglt	r3, r3
 8017a68:	b21a      	sxthlt	r2, r3
 8017a6a:	682b      	ldr	r3, [r5, #0]
 8017a6c:	4282      	cmp	r2, r0
 8017a6e:	bfd8      	it	le
 8017a70:	b290      	uxthle	r0, r2
 8017a72:	f8a5 00a8 	strh.w	r0, [r5, #168]	; 0xa8
 8017a76:	7922      	ldrb	r2, [r4, #4]
 8017a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017a7a:	2a01      	cmp	r2, #1
 8017a7c:	d129      	bne.n	8017ad2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x106>
 8017a7e:	a801      	add	r0, sp, #4
 8017a80:	4798      	blx	r3
 8017a82:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8017a86:	2601      	movs	r6, #1
 8017a88:	f8a5 30aa 	strh.w	r3, [r5, #170]	; 0xaa
 8017a8c:	f885 60b0 	strb.w	r6, [r5, #176]	; 0xb0
 8017a90:	f003 fc0a 	bl	801b2a8 <_ZN8touchgfx11Application11getInstanceEv>
 8017a94:	4629      	mov	r1, r5
 8017a96:	f003 fc0d 	bl	801b2b4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8017a9a:	7923      	ldrb	r3, [r4, #4]
 8017a9c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8017aa0:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8017aa4:	b198      	cbz	r0, 8017ace <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8017aa6:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 8017aaa:	b983      	cbnz	r3, 8017ace <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8017aac:	4a0b      	ldr	r2, [pc, #44]	; (8017adc <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x110>)
 8017aae:	a903      	add	r1, sp, #12
 8017ab0:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017ab4:	9203      	str	r2, [sp, #12]
 8017ab6:	2202      	movs	r2, #2
 8017ab8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017abc:	f88d 2010 	strb.w	r2, [sp, #16]
 8017ac0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017ac4:	6803      	ldr	r3, [r0, #0]
 8017ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ac8:	4798      	blx	r3
 8017aca:	f885 60b6 	strb.w	r6, [r5, #182]	; 0xb6
 8017ace:	b006      	add	sp, #24
 8017ad0:	bd70      	pop	{r4, r5, r6, pc}
 8017ad2:	a803      	add	r0, sp, #12
 8017ad4:	4798      	blx	r3
 8017ad6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017ada:	e7d4      	b.n	8017a86 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 8017adc:	0802c730 	.word	0x0802c730

08017ae0 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 8017ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017ae2:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8017ae6:	4604      	mov	r4, r0
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d046      	beq.n	8017b7a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9a>
 8017aec:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
 8017af0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8017af4:	3001      	adds	r0, #1
 8017af6:	b280      	uxth	r0, r0
 8017af8:	4298      	cmp	r0, r3
 8017afa:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
 8017afe:	d840      	bhi.n	8017b82 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa2>
 8017b00:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8017b04:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8017b08:	f004 ffcc 	bl	801caa4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8017b0c:	4605      	mov	r5, r0
 8017b0e:	b282      	uxth	r2, r0
 8017b10:	f012 0301 	ands.w	r3, r2, #1
 8017b14:	d006      	beq.n	8017b24 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 8017b16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017b1a:	2800      	cmp	r0, #0
 8017b1c:	bfd8      	it	le
 8017b1e:	460b      	movle	r3, r1
 8017b20:	18d5      	adds	r5, r2, r3
 8017b22:	b22d      	sxth	r5, r5
 8017b24:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8017b28:	2b01      	cmp	r3, #1
 8017b2a:	d028      	beq.n	8017b7e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 8017b2c:	6823      	ldr	r3, [r4, #0]
 8017b2e:	4621      	mov	r1, r4
 8017b30:	4668      	mov	r0, sp
 8017b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017b34:	4798      	blx	r3
 8017b36:	f8bd 6000 	ldrh.w	r6, [sp]
 8017b3a:	1bae      	subs	r6, r5, r6
 8017b3c:	b236      	sxth	r6, r6
 8017b3e:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8017b42:	b142      	cbz	r2, 8017b56 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x76>
 8017b44:	6823      	ldr	r3, [r4, #0]
 8017b46:	4621      	mov	r1, r4
 8017b48:	4668      	mov	r0, sp
 8017b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017b4c:	4798      	blx	r3
 8017b4e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017b52:	1aad      	subs	r5, r5, r2
 8017b54:	b22a      	sxth	r2, r5
 8017b56:	6823      	ldr	r3, [r4, #0]
 8017b58:	4631      	mov	r1, r6
 8017b5a:	4620      	mov	r0, r4
 8017b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017b60:	4798      	blx	r3
 8017b62:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
 8017b66:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
 8017b6a:	b935      	cbnz	r5, 8017b7a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9a>
 8017b6c:	f003 fb9c 	bl	801b2a8 <_ZN8touchgfx11Application11getInstanceEv>
 8017b70:	4621      	mov	r1, r4
 8017b72:	f003 fbd1 	bl	801b318 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8017b76:	f8a4 50ae 	strh.w	r5, [r4, #174]	; 0xae
 8017b7a:	b002      	add	sp, #8
 8017b7c:	bd70      	pop	{r4, r5, r6, pc}
 8017b7e:	2600      	movs	r6, #0
 8017b80:	e7dd      	b.n	8017b3e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x5e>
 8017b82:	2300      	movs	r3, #0
 8017b84:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 8017b88:	e7ed      	b.n	8017b66 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x86>

08017b8a <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 8017b8a:	b470      	push	{r4, r5, r6}
 8017b8c:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 8017b90:	461d      	mov	r5, r3
 8017b92:	b11e      	cbz	r6, 8017b9c <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 8017b94:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
 8017b98:	b116      	cbz	r6, 8017ba0 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 8017b9a:	6028      	str	r0, [r5, #0]
 8017b9c:	bc70      	pop	{r4, r5, r6}
 8017b9e:	4770      	bx	lr
 8017ba0:	bc70      	pop	{r4, r5, r6}
 8017ba2:	f7ff bb59 	b.w	8017258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>

08017ba6 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8017ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ba8:	4604      	mov	r4, r0
 8017baa:	4608      	mov	r0, r1
 8017bac:	460d      	mov	r5, r1
 8017bae:	f7ff fca8 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017bb2:	b978      	cbnz	r0, 8017bd4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	f7ff fca4 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017bba:	f9b5 6000 	ldrsh.w	r6, [r5]
 8017bbe:	b150      	cbz	r0, 8017bd6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8017bc0:	8026      	strh	r6, [r4, #0]
 8017bc2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017bc6:	8063      	strh	r3, [r4, #2]
 8017bc8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8017bcc:	80a3      	strh	r3, [r4, #4]
 8017bce:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017bd2:	80e3      	strh	r3, [r4, #6]
 8017bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bd6:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017bda:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017bde:	42b1      	cmp	r1, r6
 8017be0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017be4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8017be8:	460f      	mov	r7, r1
 8017bea:	88ed      	ldrh	r5, [r5, #6]
 8017bec:	bfa8      	it	ge
 8017bee:	4637      	movge	r7, r6
 8017bf0:	4293      	cmp	r3, r2
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	4466      	add	r6, ip
 8017bf6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017bfa:	bfa8      	it	ge
 8017bfc:	4610      	movge	r0, r2
 8017bfe:	442a      	add	r2, r5
 8017c00:	88e5      	ldrh	r5, [r4, #6]
 8017c02:	4461      	add	r1, ip
 8017c04:	b236      	sxth	r6, r6
 8017c06:	8027      	strh	r7, [r4, #0]
 8017c08:	442b      	add	r3, r5
 8017c0a:	b209      	sxth	r1, r1
 8017c0c:	b212      	sxth	r2, r2
 8017c0e:	8060      	strh	r0, [r4, #2]
 8017c10:	b21b      	sxth	r3, r3
 8017c12:	428e      	cmp	r6, r1
 8017c14:	bfac      	ite	ge
 8017c16:	ebc7 0106 	rsbge	r1, r7, r6
 8017c1a:	ebc7 0101 	rsblt	r1, r7, r1
 8017c1e:	429a      	cmp	r2, r3
 8017c20:	bfac      	ite	ge
 8017c22:	ebc0 0202 	rsbge	r2, r0, r2
 8017c26:	ebc0 0203 	rsblt	r2, r0, r3
 8017c2a:	80a1      	strh	r1, [r4, #4]
 8017c2c:	80e2      	strh	r2, [r4, #6]
 8017c2e:	e7d1      	b.n	8017bd4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08017c30 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 8017c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017c32:	4604      	mov	r4, r0
 8017c34:	2200      	movs	r2, #0
 8017c36:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8017c3a:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8017c3e:	680b      	ldr	r3, [r1, #0]
 8017c40:	8022      	strh	r2, [r4, #0]
 8017c42:	8062      	strh	r2, [r4, #2]
 8017c44:	80e0      	strh	r0, [r4, #6]
 8017c46:	4668      	mov	r0, sp
 8017c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c4c:	80a5      	strh	r5, [r4, #4]
 8017c4e:	4798      	blx	r3
 8017c50:	4620      	mov	r0, r4
 8017c52:	4669      	mov	r1, sp
 8017c54:	f7ff ffa7 	bl	8017ba6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017c58:	4620      	mov	r0, r4
 8017c5a:	b003      	add	sp, #12
 8017c5c:	bd30      	pop	{r4, r5, pc}

08017c5e <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 8017c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c60:	2300      	movs	r3, #0
 8017c62:	4605      	mov	r5, r0
 8017c64:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017c66:	f101 0738 	add.w	r7, r1, #56	; 0x38
 8017c6a:	f101 0664 	add.w	r6, r1, #100	; 0x64
 8017c6e:	8003      	strh	r3, [r0, #0]
 8017c70:	8043      	strh	r3, [r0, #2]
 8017c72:	8083      	strh	r3, [r0, #4]
 8017c74:	80c3      	strh	r3, [r0, #6]
 8017c76:	b164      	cbz	r4, 8017c92 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 8017c78:	42bc      	cmp	r4, r7
 8017c7a:	d008      	beq.n	8017c8e <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8017c7c:	42b4      	cmp	r4, r6
 8017c7e:	d006      	beq.n	8017c8e <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8017c80:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017c84:	b11b      	cbz	r3, 8017c8e <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8017c86:	1d21      	adds	r1, r4, #4
 8017c88:	4628      	mov	r0, r5
 8017c8a:	f7ff ff8c 	bl	8017ba6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017c8e:	69a4      	ldr	r4, [r4, #24]
 8017c90:	e7f1      	b.n	8017c76 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 8017c92:	4628      	mov	r0, r5
 8017c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c98 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 8017c98:	b530      	push	{r4, r5, lr}
 8017c9a:	2500      	movs	r5, #0
 8017c9c:	6283      	str	r3, [r0, #40]	; 0x28
 8017c9e:	8101      	strh	r1, [r0, #8]
 8017ca0:	8085      	strh	r5, [r0, #4]
 8017ca2:	80c5      	strh	r5, [r0, #6]
 8017ca4:	8185      	strh	r5, [r0, #12]
 8017ca6:	81c5      	strh	r5, [r0, #14]
 8017ca8:	8205      	strh	r5, [r0, #16]
 8017caa:	8245      	strh	r5, [r0, #18]
 8017cac:	61c5      	str	r5, [r0, #28]
 8017cae:	8405      	strh	r5, [r0, #32]
 8017cb0:	8445      	strh	r5, [r0, #34]	; 0x22
 8017cb2:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8017cb6:	8142      	strh	r2, [r0, #10]
 8017cb8:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8017cbc:	2501      	movs	r5, #1
 8017cbe:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 8017cc2:	4d03      	ldr	r5, [pc, #12]	; (8017cd0 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 8017cc4:	6005      	str	r5, [r0, #0]
 8017cc6:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8017cca:	f880 5026 	strb.w	r5, [r0, #38]	; 0x26
 8017cce:	bd30      	pop	{r4, r5, pc}
 8017cd0:	0802d230 	.word	0x0802d230

08017cd4 <_ZN8touchgfx19ScrollableContainerC1Ev>:
 8017cd4:	4b2f      	ldr	r3, [pc, #188]	; (8017d94 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 8017cd6:	2278      	movs	r2, #120	; 0x78
 8017cd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017cda:	6003      	str	r3, [r0, #0]
 8017cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017ce0:	2500      	movs	r5, #0
 8017ce2:	2601      	movs	r6, #1
 8017ce4:	8583      	strh	r3, [r0, #44]	; 0x2c
 8017ce6:	2111      	movs	r1, #17
 8017ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8017cec:	4604      	mov	r4, r0
 8017cee:	8085      	strh	r5, [r0, #4]
 8017cf0:	80c5      	strh	r5, [r0, #6]
 8017cf2:	8105      	strh	r5, [r0, #8]
 8017cf4:	8145      	strh	r5, [r0, #10]
 8017cf6:	8185      	strh	r5, [r0, #12]
 8017cf8:	81c5      	strh	r5, [r0, #14]
 8017cfa:	8205      	strh	r5, [r0, #16]
 8017cfc:	8245      	strh	r5, [r0, #18]
 8017cfe:	61c5      	str	r5, [r0, #28]
 8017d00:	8405      	strh	r5, [r0, #32]
 8017d02:	8445      	strh	r5, [r0, #34]	; 0x22
 8017d04:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8017d08:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
 8017d0c:	6285      	str	r5, [r0, #40]	; 0x28
 8017d0e:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8017d12:	6303      	str	r3, [r0, #48]	; 0x30
 8017d14:	8681      	strh	r1, [r0, #52]	; 0x34
 8017d16:	4629      	mov	r1, r5
 8017d18:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
 8017d1c:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8017d20:	9200      	str	r2, [sp, #0]
 8017d22:	3038      	adds	r0, #56	; 0x38
 8017d24:	462a      	mov	r2, r5
 8017d26:	f7ff ffb7 	bl	8017c98 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8017d2a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8017d2e:	462a      	mov	r2, r5
 8017d30:	4629      	mov	r1, r5
 8017d32:	9300      	str	r3, [sp, #0]
 8017d34:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8017d38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017d3a:	f7ff ffad 	bl	8017c98 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8017d3e:	2305      	movs	r3, #5
 8017d40:	4620      	mov	r0, r4
 8017d42:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 8017d46:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8017d4a:	4b13      	ldr	r3, [pc, #76]	; (8017d98 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 8017d4c:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8017d50:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 8017d54:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 8017d58:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8017d5c:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
 8017d60:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8017d64:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 8017d68:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8017d6c:	f8a4 50b2 	strh.w	r5, [r4, #178]	; 0xb2
 8017d70:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
 8017d74:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 8017d78:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8017d7c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
 8017d80:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 8017d84:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8017d88:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
 8017d8c:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 8017d90:	b002      	add	sp, #8
 8017d92:	bd70      	pop	{r4, r5, r6, pc}
 8017d94:	0802c758 	.word	0x0802c758
 8017d98:	00010007 	.word	0x00010007

08017d9c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 8017d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d9e:	2600      	movs	r6, #0
 8017da0:	f891 30a4 	ldrb.w	r3, [r1, #164]	; 0xa4
 8017da4:	4605      	mov	r5, r0
 8017da6:	460c      	mov	r4, r1
 8017da8:	8006      	strh	r6, [r0, #0]
 8017daa:	8046      	strh	r6, [r0, #2]
 8017dac:	8086      	strh	r6, [r0, #4]
 8017dae:	80c6      	strh	r6, [r0, #6]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d041      	beq.n	8017e38 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8017db4:	680b      	ldr	r3, [r1, #0]
 8017db6:	4668      	mov	r0, sp
 8017db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017dba:	4798      	blx	r3
 8017dbc:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8017dc0:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d03a      	beq.n	8017e3e <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 8017dc8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8017dcc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017dd0:	429a      	cmp	r2, r3
 8017dd2:	dd05      	ble.n	8017de0 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x44>
 8017dd4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017dd8:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8017ddc:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8017de0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017de4:	42bb      	cmp	r3, r7
 8017de6:	da27      	bge.n	8017e38 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8017de8:	f9bd 1000 	ldrsh.w	r1, [sp]
 8017dec:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017df0:	424a      	negs	r2, r1
 8017df2:	4439      	add	r1, r7
 8017df4:	eba3 0c40 	sub.w	ip, r3, r0, lsl #1
 8017df8:	b209      	sxth	r1, r1
 8017dfa:	435a      	muls	r2, r3
 8017dfc:	ebac 0606 	sub.w	r6, ip, r6
 8017e00:	1ac9      	subs	r1, r1, r3
 8017e02:	434b      	muls	r3, r1
 8017e04:	fb92 f2f7 	sdiv	r2, r2, r7
 8017e08:	fb93 f3f7 	sdiv	r3, r3, r7
 8017e0c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8017e10:	4413      	add	r3, r2
 8017e12:	0079      	lsls	r1, r7, #1
 8017e14:	1af3      	subs	r3, r6, r3
 8017e16:	4299      	cmp	r1, r3
 8017e18:	dd05      	ble.n	8017e26 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 8017e1a:	1acb      	subs	r3, r1, r3
 8017e1c:	4353      	muls	r3, r2
 8017e1e:	fb93 f3f6 	sdiv	r3, r3, r6
 8017e22:	1ad2      	subs	r2, r2, r3
 8017e24:	460b      	mov	r3, r1
 8017e26:	8961      	ldrh	r1, [r4, #10]
 8017e28:	b280      	uxth	r0, r0
 8017e2a:	80ab      	strh	r3, [r5, #4]
 8017e2c:	1bc9      	subs	r1, r1, r7
 8017e2e:	80ef      	strh	r7, [r5, #6]
 8017e30:	1a09      	subs	r1, r1, r0
 8017e32:	4410      	add	r0, r2
 8017e34:	8069      	strh	r1, [r5, #2]
 8017e36:	8028      	strh	r0, [r5, #0]
 8017e38:	4628      	mov	r0, r5
 8017e3a:	b003      	add	sp, #12
 8017e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e3e:	461e      	mov	r6, r3
 8017e40:	e7ce      	b.n	8017de0 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x44>

08017e42 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 8017e42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e44:	2600      	movs	r6, #0
 8017e46:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
 8017e4a:	4605      	mov	r5, r0
 8017e4c:	460c      	mov	r4, r1
 8017e4e:	8006      	strh	r6, [r0, #0]
 8017e50:	8046      	strh	r6, [r0, #2]
 8017e52:	8086      	strh	r6, [r0, #4]
 8017e54:	80c6      	strh	r6, [r0, #6]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d041      	beq.n	8017ede <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8017e5a:	680b      	ldr	r3, [r1, #0]
 8017e5c:	4668      	mov	r0, sp
 8017e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e60:	4798      	blx	r3
 8017e62:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8017e66:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d03a      	beq.n	8017ee4 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 8017e6e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8017e72:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017e76:	429a      	cmp	r2, r3
 8017e78:	dd05      	ble.n	8017e86 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x44>
 8017e7a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017e7e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8017e82:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8017e86:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017e8a:	42bb      	cmp	r3, r7
 8017e8c:	da27      	bge.n	8017ede <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8017e8e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8017e92:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017e96:	424a      	negs	r2, r1
 8017e98:	4439      	add	r1, r7
 8017e9a:	eba3 0c40 	sub.w	ip, r3, r0, lsl #1
 8017e9e:	b209      	sxth	r1, r1
 8017ea0:	435a      	muls	r2, r3
 8017ea2:	ebac 0606 	sub.w	r6, ip, r6
 8017ea6:	1ac9      	subs	r1, r1, r3
 8017ea8:	434b      	muls	r3, r1
 8017eaa:	fb92 f2f7 	sdiv	r2, r2, r7
 8017eae:	fb93 f3f7 	sdiv	r3, r3, r7
 8017eb2:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8017eb6:	4413      	add	r3, r2
 8017eb8:	0079      	lsls	r1, r7, #1
 8017eba:	1af3      	subs	r3, r6, r3
 8017ebc:	4299      	cmp	r1, r3
 8017ebe:	dd05      	ble.n	8017ecc <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 8017ec0:	1acb      	subs	r3, r1, r3
 8017ec2:	4353      	muls	r3, r2
 8017ec4:	fb93 f3f6 	sdiv	r3, r3, r6
 8017ec8:	1ad2      	subs	r2, r2, r3
 8017eca:	460b      	mov	r3, r1
 8017ecc:	8921      	ldrh	r1, [r4, #8]
 8017ece:	b280      	uxth	r0, r0
 8017ed0:	80af      	strh	r7, [r5, #4]
 8017ed2:	1bc9      	subs	r1, r1, r7
 8017ed4:	80eb      	strh	r3, [r5, #6]
 8017ed6:	1a09      	subs	r1, r1, r0
 8017ed8:	4410      	add	r0, r2
 8017eda:	8029      	strh	r1, [r5, #0]
 8017edc:	8068      	strh	r0, [r5, #2]
 8017ede:	4628      	mov	r0, r5
 8017ee0:	b003      	add	sp, #12
 8017ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ee4:	461e      	mov	r6, r3
 8017ee6:	e7ce      	b.n	8017e86 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x44>

08017ee8 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 8017ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eec:	4617      	mov	r7, r2
 8017eee:	2200      	movs	r2, #0
 8017ef0:	4604      	mov	r4, r0
 8017ef2:	460e      	mov	r6, r1
 8017ef4:	8002      	strh	r2, [r0, #0]
 8017ef6:	4698      	mov	r8, r3
 8017ef8:	8042      	strh	r2, [r0, #2]
 8017efa:	8082      	strh	r2, [r0, #4]
 8017efc:	80c2      	strh	r2, [r0, #6]
 8017efe:	4638      	mov	r0, r7
 8017f00:	f7ff faff 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f04:	4605      	mov	r5, r0
 8017f06:	b998      	cbnz	r0, 8017f30 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 8017f08:	4640      	mov	r0, r8
 8017f0a:	f7ff fafa 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f0e:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8017f12:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
 8017f16:	b908      	cbnz	r0, 8017f1c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 8017f18:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8017f1c:	8933      	ldrh	r3, [r6, #8]
 8017f1e:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 8017f22:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017f26:	8022      	strh	r2, [r4, #0]
 8017f28:	8067      	strh	r7, [r4, #2]
 8017f2a:	1b58      	subs	r0, r3, r5
 8017f2c:	80e1      	strh	r1, [r4, #6]
 8017f2e:	80a0      	strh	r0, [r4, #4]
 8017f30:	4620      	mov	r0, r4
 8017f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f36 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 8017f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f3a:	4604      	mov	r4, r0
 8017f3c:	2000      	movs	r0, #0
 8017f3e:	460f      	mov	r7, r1
 8017f40:	4616      	mov	r6, r2
 8017f42:	8020      	strh	r0, [r4, #0]
 8017f44:	4698      	mov	r8, r3
 8017f46:	8060      	strh	r0, [r4, #2]
 8017f48:	80a0      	strh	r0, [r4, #4]
 8017f4a:	80e0      	strh	r0, [r4, #6]
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	f7ff fad8 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f52:	4605      	mov	r5, r0
 8017f54:	b998      	cbnz	r0, 8017f7e <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 8017f56:	4630      	mov	r0, r6
 8017f58:	f7ff fad3 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f5c:	f897 602c 	ldrb.w	r6, [r7, #44]	; 0x2c
 8017f60:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8017f64:	b908      	cbnz	r0, 8017f6a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 8017f66:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 8017f6a:	897a      	ldrh	r2, [r7, #10]
 8017f6c:	f8b8 3000 	ldrh.w	r3, [r8]
 8017f70:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 8017f74:	8066      	strh	r6, [r4, #2]
 8017f76:	8023      	strh	r3, [r4, #0]
 8017f78:	1b50      	subs	r0, r2, r5
 8017f7a:	80a1      	strh	r1, [r4, #4]
 8017f7c:	80e0      	strh	r0, [r4, #6]
 8017f7e:	4620      	mov	r0, r4
 8017f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f84 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 8017f84:	b570      	push	{r4, r5, r6, lr}
 8017f86:	b088      	sub	sp, #32
 8017f88:	4604      	mov	r4, r0
 8017f8a:	4601      	mov	r1, r0
 8017f8c:	4668      	mov	r0, sp
 8017f8e:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8017f92:	f7ff ff03 	bl	8017d9c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 8017f96:	4621      	mov	r1, r4
 8017f98:	a802      	add	r0, sp, #8
 8017f9a:	f7ff ff52 	bl	8017e42 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 8017f9e:	ab02      	add	r3, sp, #8
 8017fa0:	466a      	mov	r2, sp
 8017fa2:	4621      	mov	r1, r4
 8017fa4:	a804      	add	r0, sp, #16
 8017fa6:	f7ff ff9f 	bl	8017ee8 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 8017faa:	ab02      	add	r3, sp, #8
 8017fac:	466a      	mov	r2, sp
 8017fae:	4621      	mov	r1, r4
 8017fb0:	a806      	add	r0, sp, #24
 8017fb2:	f7ff ffc0 	bl	8017f36 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 8017fb6:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8017fba:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	da02      	bge.n	8017fc8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 8017fc2:	4630      	mov	r0, r6
 8017fc4:	f004 f93a 	bl	801c23c <_ZNK8touchgfx8Drawable10invalidateEv>
 8017fc8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8017fcc:	f104 0564 	add.w	r5, r4, #100	; 0x64
 8017fd0:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	da02      	bge.n	8017fde <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 8017fd8:	4628      	mov	r0, r5
 8017fda:	f004 f92f 	bl	801c23c <_ZNK8touchgfx8Drawable10invalidateEv>
 8017fde:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8017fe2:	f8bd 0000 	ldrh.w	r0, [sp]
 8017fe6:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8017fea:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8017fee:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8017ff0:	4630      	mov	r0, r6
 8017ff2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8017ff4:	f7ed ff52 	bl	8005e9c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017ff8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8017ffc:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8018000:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8018004:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8018008:	4628      	mov	r0, r5
 801800a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 801800e:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8018012:	f7ed ff43 	bl	8005e9c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018016:	8922      	ldrh	r2, [r4, #8]
 8018018:	2300      	movs	r3, #0
 801801a:	a804      	add	r0, sp, #16
 801801c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018020:	8962      	ldrh	r2, [r4, #10]
 8018022:	f8ad 3010 	strh.w	r3, [sp, #16]
 8018026:	f8ad 201e 	strh.w	r2, [sp, #30]
 801802a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801802e:	f7ff fa68 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018032:	b920      	cbnz	r0, 801803e <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 8018034:	6823      	ldr	r3, [r4, #0]
 8018036:	a904      	add	r1, sp, #16
 8018038:	4620      	mov	r0, r4
 801803a:	691b      	ldr	r3, [r3, #16]
 801803c:	4798      	blx	r3
 801803e:	a806      	add	r0, sp, #24
 8018040:	f7ff fa5f 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018044:	b920      	cbnz	r0, 8018050 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 8018046:	6823      	ldr	r3, [r4, #0]
 8018048:	a906      	add	r1, sp, #24
 801804a:	4620      	mov	r0, r4
 801804c:	691b      	ldr	r3, [r3, #16]
 801804e:	4798      	blx	r3
 8018050:	b008      	add	sp, #32
 8018052:	bd70      	pop	{r4, r5, r6, pc}

08018054 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 8018054:	b570      	push	{r4, r5, r6, lr}
 8018056:	790b      	ldrb	r3, [r1, #4]
 8018058:	b08a      	sub	sp, #40	; 0x28
 801805a:	4604      	mov	r4, r0
 801805c:	460d      	mov	r5, r1
 801805e:	2b00      	cmp	r3, #0
 8018060:	d17e      	bne.n	8018160 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10c>
 8018062:	2201      	movs	r2, #1
 8018064:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 8018068:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 801806c:	b142      	cbz	r2, 8018080 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2c>
 801806e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8018072:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
 8018076:	f003 f917 	bl	801b2a8 <_ZN8touchgfx11Application11getInstanceEv>
 801807a:	4621      	mov	r1, r4
 801807c:	f003 f94c 	bl	801b318 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8018080:	4623      	mov	r3, r4
 8018082:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018086:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801808a:	f853 0bb4 	ldr.w	r0, [r3], #180
 801808e:	9301      	str	r3, [sp, #4]
 8018090:	f104 03b2 	add.w	r3, r4, #178	; 0xb2
 8018094:	9300      	str	r3, [sp, #0]
 8018096:	f104 0390 	add.w	r3, r4, #144	; 0x90
 801809a:	6f46      	ldr	r6, [r0, #116]	; 0x74
 801809c:	4620      	mov	r0, r4
 801809e:	47b0      	blx	r6
 80180a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80180a4:	42a3      	cmp	r3, r4
 80180a6:	bf04      	itt	eq
 80180a8:	2300      	moveq	r3, #0
 80180aa:	f8c4 3090 	streq.w	r3, [r4, #144]	; 0x90
 80180ae:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80180b2:	2900      	cmp	r1, #0
 80180b4:	d03a      	beq.n	801812c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 80180b6:	2600      	movs	r6, #0
 80180b8:	a803      	add	r0, sp, #12
 80180ba:	f884 60b6 	strb.w	r6, [r4, #182]	; 0xb6
 80180be:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80180c2:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 80180c6:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80180ca:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80180ce:	f004 f94d 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80180d2:	4621      	mov	r1, r4
 80180d4:	a805      	add	r0, sp, #20
 80180d6:	f004 f949 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80180da:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80180de:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80180e2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80180e6:	1ad2      	subs	r2, r2, r3
 80180e8:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80180ec:	7929      	ldrb	r1, [r5, #4]
 80180ee:	441a      	add	r2, r3
 80180f0:	88eb      	ldrh	r3, [r5, #6]
 80180f2:	f88d 1020 	strb.w	r1, [sp, #32]
 80180f6:	a907      	add	r1, sp, #28
 80180f8:	441a      	add	r2, r3
 80180fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80180fe:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8018102:	1a1b      	subs	r3, r3, r0
 8018104:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8018108:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 801810c:	4403      	add	r3, r0
 801810e:	8928      	ldrh	r0, [r5, #8]
 8018110:	4403      	add	r3, r0
 8018112:	482f      	ldr	r0, [pc, #188]	; (80181d0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 8018114:	9007      	str	r0, [sp, #28]
 8018116:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801811a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801811e:	6803      	ldr	r3, [r0, #0]
 8018120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018122:	4798      	blx	r3
 8018124:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8018128:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 801812c:	2300      	movs	r3, #0
 801812e:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 8018132:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8018136:	b112      	cbz	r2, 801813e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xea>
 8018138:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 801813c:	b90b      	cbnz	r3, 8018142 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xee>
 801813e:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8018142:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8018146:	b112      	cbz	r2, 801814e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfa>
 8018148:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 801814c:	b90b      	cbnz	r3, 8018152 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfe>
 801814e:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8018152:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
 8018156:	4620      	mov	r0, r4
 8018158:	f7ff ff14 	bl	8017f84 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 801815c:	b00a      	add	sp, #40	; 0x28
 801815e:	bd70      	pop	{r4, r5, r6, pc}
 8018160:	2b02      	cmp	r3, #2
 8018162:	d0fb      	beq.n	801815c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x108>
 8018164:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 8018168:	b361      	cbz	r1, 80181c4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x170>
 801816a:	a803      	add	r0, sp, #12
 801816c:	f004 f8fe 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018170:	4621      	mov	r1, r4
 8018172:	a805      	add	r0, sp, #20
 8018174:	f004 f8fa 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018178:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801817c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018180:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8018184:	1ad2      	subs	r2, r2, r3
 8018186:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801818a:	7929      	ldrb	r1, [r5, #4]
 801818c:	441a      	add	r2, r3
 801818e:	88eb      	ldrh	r3, [r5, #6]
 8018190:	f88d 1020 	strb.w	r1, [sp, #32]
 8018194:	a907      	add	r1, sp, #28
 8018196:	441a      	add	r2, r3
 8018198:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801819c:	1a1b      	subs	r3, r3, r0
 801819e:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 80181a2:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 80181a6:	4403      	add	r3, r0
 80181a8:	8928      	ldrh	r0, [r5, #8]
 80181aa:	4403      	add	r3, r0
 80181ac:	4808      	ldr	r0, [pc, #32]	; (80181d0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 80181ae:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80181b2:	2300      	movs	r3, #0
 80181b4:	9007      	str	r0, [sp, #28]
 80181b6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80181ba:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80181be:	6803      	ldr	r3, [r0, #0]
 80181c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181c2:	4798      	blx	r3
 80181c4:	2300      	movs	r3, #0
 80181c6:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
 80181ca:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80181ce:	e7ad      	b.n	801812c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 80181d0:	0802c730 	.word	0x0802c730

080181d4 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 80181d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80181d6:	4606      	mov	r6, r0
 80181d8:	4615      	mov	r5, r2
 80181da:	460c      	mov	r4, r1
 80181dc:	b919      	cbnz	r1, 80181e6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 80181de:	b912      	cbnz	r2, 80181e6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 80181e0:	2000      	movs	r0, #0
 80181e2:	b003      	add	sp, #12
 80181e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181e6:	6833      	ldr	r3, [r6, #0]
 80181e8:	4631      	mov	r1, r6
 80181ea:	4668      	mov	r0, sp
 80181ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80181ee:	4798      	blx	r3
 80181f0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80181f4:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 80181f8:	f9bd 2000 	ldrsh.w	r2, [sp]
 80181fc:	4288      	cmp	r0, r1
 80181fe:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8018202:	da2c      	bge.n	801825e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8a>
 8018204:	2c00      	cmp	r4, #0
 8018206:	dd20      	ble.n	801824a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x76>
 8018208:	1913      	adds	r3, r2, r4
 801820a:	2b00      	cmp	r3, #0
 801820c:	dd01      	ble.n	8018212 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801820e:	4252      	negs	r2, r2
 8018210:	b214      	sxth	r4, r2
 8018212:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 8018216:	4297      	cmp	r7, r2
 8018218:	dd2c      	ble.n	8018274 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa0>
 801821a:	2d00      	cmp	r5, #0
 801821c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8018220:	dd1f      	ble.n	8018262 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8e>
 8018222:	195a      	adds	r2, r3, r5
 8018224:	2a00      	cmp	r2, #0
 8018226:	dd04      	ble.n	8018232 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 8018228:	425b      	negs	r3, r3
 801822a:	b21d      	sxth	r5, r3
 801822c:	b90c      	cbnz	r4, 8018232 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 801822e:	2d00      	cmp	r5, #0
 8018230:	d0d6      	beq.n	80181e0 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8018232:	6833      	ldr	r3, [r6, #0]
 8018234:	462a      	mov	r2, r5
 8018236:	4621      	mov	r1, r4
 8018238:	4630      	mov	r0, r6
 801823a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801823e:	4798      	blx	r3
 8018240:	4630      	mov	r0, r6
 8018242:	f7ff fe9f 	bl	8017f84 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8018246:	2001      	movs	r0, #1
 8018248:	e7cb      	b.n	80181e2 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 801824a:	d0e2      	beq.n	8018212 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801824c:	440a      	add	r2, r1
 801824e:	b292      	uxth	r2, r2
 8018250:	fa04 f382 	sxtah	r3, r4, r2
 8018254:	4283      	cmp	r3, r0
 8018256:	dadc      	bge.n	8018212 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 8018258:	1a84      	subs	r4, r0, r2
 801825a:	b224      	sxth	r4, r4
 801825c:	e7d9      	b.n	8018212 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801825e:	2400      	movs	r4, #0
 8018260:	e7d7      	b.n	8018212 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 8018262:	d007      	beq.n	8018274 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa0>
 8018264:	443b      	add	r3, r7
 8018266:	b29b      	uxth	r3, r3
 8018268:	fa05 f183 	sxtah	r1, r5, r3
 801826c:	4291      	cmp	r1, r2
 801826e:	dae0      	bge.n	8018232 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 8018270:	1ad3      	subs	r3, r2, r3
 8018272:	e7da      	b.n	801822a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x56>
 8018274:	2c00      	cmp	r4, #0
 8018276:	d0b3      	beq.n	80181e0 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8018278:	2500      	movs	r5, #0
 801827a:	e7da      	b.n	8018232 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>

0801827c <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 801827c:	b513      	push	{r0, r1, r4, lr}
 801827e:	6803      	ldr	r3, [r0, #0]
 8018280:	4601      	mov	r1, r0
 8018282:	4604      	mov	r4, r0
 8018284:	4668      	mov	r0, sp
 8018286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801828a:	4798      	blx	r3
 801828c:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8018290:	f9bd 1000 	ldrsh.w	r1, [sp]
 8018294:	2800      	cmp	r0, #0
 8018296:	dd20      	ble.n	80182da <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 8018298:	4602      	mov	r2, r0
 801829a:	2900      	cmp	r1, #0
 801829c:	dc0e      	bgt.n	80182bc <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 801829e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80182a2:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80182a6:	440b      	add	r3, r1
 80182a8:	b21b      	sxth	r3, r3
 80182aa:	4298      	cmp	r0, r3
 80182ac:	dd04      	ble.n	80182b8 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 80182ae:	1a1b      	subs	r3, r3, r0
 80182b0:	4299      	cmp	r1, r3
 80182b2:	bfb8      	it	lt
 80182b4:	4619      	movlt	r1, r3
 80182b6:	b909      	cbnz	r1, 80182bc <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 80182b8:	b1f2      	cbz	r2, 80182f8 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 80182ba:	2100      	movs	r1, #0
 80182bc:	6823      	ldr	r3, [r4, #0]
 80182be:	4252      	negs	r2, r2
 80182c0:	4249      	negs	r1, r1
 80182c2:	4620      	mov	r0, r4
 80182c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80182c8:	b212      	sxth	r2, r2
 80182ca:	b209      	sxth	r1, r1
 80182cc:	4798      	blx	r3
 80182ce:	4620      	mov	r0, r4
 80182d0:	b002      	add	sp, #8
 80182d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182d6:	f7ff be55 	b.w	8017f84 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 80182da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80182de:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80182e2:	4403      	add	r3, r0
 80182e4:	b21b      	sxth	r3, r3
 80182e6:	429a      	cmp	r2, r3
 80182e8:	dd04      	ble.n	80182f4 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 80182ea:	1a9a      	subs	r2, r3, r2
 80182ec:	4282      	cmp	r2, r0
 80182ee:	bfb8      	it	lt
 80182f0:	4602      	movlt	r2, r0
 80182f2:	e7d2      	b.n	801829a <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 80182f4:	2200      	movs	r2, #0
 80182f6:	e7d0      	b.n	801829a <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 80182f8:	b002      	add	sp, #8
 80182fa:	bd10      	pop	{r4, pc}

080182fc <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 80182fc:	6301      	str	r1, [r0, #48]	; 0x30
 80182fe:	6601      	str	r1, [r0, #96]	; 0x60
 8018300:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8018304:	4770      	bx	lr

08018306 <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>:
 8018306:	2201      	movs	r2, #1
 8018308:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
 801830c:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
 8018310:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 8018314:	f7ff be36 	b.w	8017f84 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

08018318 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8018318:	4770      	bx	lr

0801831a <_ZN8touchgfx3HAL10FlushCacheEv>:
 801831a:	4770      	bx	lr

0801831c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801831c:	6803      	ldr	r3, [r0, #0]
 801831e:	b513      	push	{r0, r1, r4, lr}
 8018320:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8018324:	2300      	movs	r3, #0
 8018326:	e9cd 3300 	strd	r3, r3, [sp]
 801832a:	466b      	mov	r3, sp
 801832c:	47a0      	blx	r4
 801832e:	b002      	add	sp, #8
 8018330:	bd10      	pop	{r4, pc}

08018332 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8018332:	2301      	movs	r3, #1
 8018334:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018338:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801833c:	4770      	bx	lr

0801833e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801833e:	2301      	movs	r3, #1
 8018340:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018344:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018348:	4770      	bx	lr

0801834a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801834a:	6843      	ldr	r3, [r0, #4]
 801834c:	2201      	movs	r2, #1
 801834e:	725a      	strb	r2, [r3, #9]
 8018350:	6840      	ldr	r0, [r0, #4]
 8018352:	6803      	ldr	r3, [r0, #0]
 8018354:	691b      	ldr	r3, [r3, #16]
 8018356:	4718      	bx	r3

08018358 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018358:	6840      	ldr	r0, [r0, #4]
 801835a:	6803      	ldr	r3, [r0, #0]
 801835c:	689b      	ldr	r3, [r3, #8]
 801835e:	4718      	bx	r3

08018360 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8018360:	b530      	push	{r4, r5, lr}
 8018362:	b08b      	sub	sp, #44	; 0x2c
 8018364:	6804      	ldr	r4, [r0, #0]
 8018366:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801836a:	9509      	str	r5, [sp, #36]	; 0x24
 801836c:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8018370:	9508      	str	r5, [sp, #32]
 8018372:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8018376:	9507      	str	r5, [sp, #28]
 8018378:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801837c:	9506      	str	r5, [sp, #24]
 801837e:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8018382:	9505      	str	r5, [sp, #20]
 8018384:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8018388:	9504      	str	r5, [sp, #16]
 801838a:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801838e:	9503      	str	r5, [sp, #12]
 8018390:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018394:	9502      	str	r5, [sp, #8]
 8018396:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801839a:	e9cd 3500 	strd	r3, r5, [sp]
 801839e:	4613      	mov	r3, r2
 80183a0:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80183a2:	2200      	movs	r2, #0
 80183a4:	47a0      	blx	r4
 80183a6:	b00b      	add	sp, #44	; 0x2c
 80183a8:	bd30      	pop	{r4, r5, pc}
	...

080183ac <_ZN8touchgfx3HAL10beginFrameEv>:
 80183ac:	4b04      	ldr	r3, [pc, #16]	; (80183c0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80183ae:	781b      	ldrb	r3, [r3, #0]
 80183b0:	b123      	cbz	r3, 80183bc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80183b2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80183b6:	f080 0001 	eor.w	r0, r0, #1
 80183ba:	4770      	bx	lr
 80183bc:	2001      	movs	r0, #1
 80183be:	4770      	bx	lr
 80183c0:	2400af42 	.word	0x2400af42

080183c4 <_ZN8touchgfx3HAL8endFrameEv>:
 80183c4:	b510      	push	{r4, lr}
 80183c6:	4604      	mov	r4, r0
 80183c8:	6840      	ldr	r0, [r0, #4]
 80183ca:	6803      	ldr	r3, [r0, #0]
 80183cc:	689b      	ldr	r3, [r3, #8]
 80183ce:	4798      	blx	r3
 80183d0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80183d4:	b113      	cbz	r3, 80183dc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80183d6:	2301      	movs	r3, #1
 80183d8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80183dc:	bd10      	pop	{r4, pc}

080183de <_ZN8touchgfx3HAL10initializeEv>:
 80183de:	b510      	push	{r4, lr}
 80183e0:	4604      	mov	r4, r0
 80183e2:	f7eb f873 	bl	80034cc <_ZN8touchgfx10OSWrappers10initializeEv>
 80183e6:	6860      	ldr	r0, [r4, #4]
 80183e8:	6803      	ldr	r3, [r0, #0]
 80183ea:	68db      	ldr	r3, [r3, #12]
 80183ec:	4798      	blx	r3
 80183ee:	68e0      	ldr	r0, [r4, #12]
 80183f0:	6803      	ldr	r3, [r0, #0]
 80183f2:	689b      	ldr	r3, [r3, #8]
 80183f4:	4798      	blx	r3
 80183f6:	6823      	ldr	r3, [r4, #0]
 80183f8:	4620      	mov	r0, r4
 80183fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80183fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018400:	4718      	bx	r3

08018402 <_ZN8touchgfx3HAL9taskEntryEv>:
 8018402:	b508      	push	{r3, lr}
 8018404:	6803      	ldr	r3, [r0, #0]
 8018406:	4604      	mov	r4, r0
 8018408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801840a:	4798      	blx	r3
 801840c:	6823      	ldr	r3, [r4, #0]
 801840e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018410:	4620      	mov	r0, r4
 8018412:	4798      	blx	r3
 8018414:	f7eb f8d0 	bl	80035b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8018418:	6823      	ldr	r3, [r4, #0]
 801841a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801841c:	e7f8      	b.n	8018410 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08018420 <_ZN8touchgfx3HAL4tickEv>:
 8018420:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018422:	6803      	ldr	r3, [r0, #0]
 8018424:	4604      	mov	r4, r0
 8018426:	4d5c      	ldr	r5, [pc, #368]	; (8018598 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8018428:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801842c:	4798      	blx	r3
 801842e:	2800      	cmp	r0, #0
 8018430:	f000 8097 	beq.w	8018562 <_ZN8touchgfx3HAL4tickEv+0x142>
 8018434:	2001      	movs	r0, #1
 8018436:	2600      	movs	r6, #0
 8018438:	f7ea fd86 	bl	8002f48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801843c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8018440:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8018444:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018448:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801844c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8018450:	b133      	cbz	r3, 8018460 <_ZN8touchgfx3HAL4tickEv+0x40>
 8018452:	6823      	ldr	r3, [r4, #0]
 8018454:	4620      	mov	r0, r4
 8018456:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801845a:	4798      	blx	r3
 801845c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8018460:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8018464:	2601      	movs	r6, #1
 8018466:	6862      	ldr	r2, [r4, #4]
 8018468:	f083 0301 	eor.w	r3, r3, #1
 801846c:	702e      	strb	r6, [r5, #0]
 801846e:	7253      	strb	r3, [r2, #9]
 8018470:	f002 ff1a 	bl	801b2a8 <_ZN8touchgfx11Application11getInstanceEv>
 8018474:	6803      	ldr	r3, [r0, #0]
 8018476:	4631      	mov	r1, r6
 8018478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801847a:	4798      	blx	r3
 801847c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018480:	b90b      	cbnz	r3, 8018486 <_ZN8touchgfx3HAL4tickEv+0x66>
 8018482:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8018486:	f002 ff0f 	bl	801b2a8 <_ZN8touchgfx11Application11getInstanceEv>
 801848a:	6803      	ldr	r3, [r0, #0]
 801848c:	695b      	ldr	r3, [r3, #20]
 801848e:	4798      	blx	r3
 8018490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018492:	6803      	ldr	r3, [r0, #0]
 8018494:	691b      	ldr	r3, [r3, #16]
 8018496:	4798      	blx	r3
 8018498:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801849c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80184a0:	3b01      	subs	r3, #1
 80184a2:	b2db      	uxtb	r3, r3
 80184a4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80184a8:	b10a      	cbz	r2, 80184ae <_ZN8touchgfx3HAL4tickEv+0x8e>
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d1eb      	bne.n	8018486 <_ZN8touchgfx3HAL4tickEv+0x66>
 80184ae:	4a3b      	ldr	r2, [pc, #236]	; (801859c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80184b0:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80184b4:	7813      	ldrb	r3, [r2, #0]
 80184b6:	3301      	adds	r3, #1
 80184b8:	b25b      	sxtb	r3, r3
 80184ba:	4299      	cmp	r1, r3
 80184bc:	7013      	strb	r3, [r2, #0]
 80184be:	dc10      	bgt.n	80184e2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80184c0:	2300      	movs	r3, #0
 80184c2:	68e0      	ldr	r0, [r4, #12]
 80184c4:	a902      	add	r1, sp, #8
 80184c6:	7013      	strb	r3, [r2, #0]
 80184c8:	aa03      	add	r2, sp, #12
 80184ca:	6803      	ldr	r3, [r0, #0]
 80184cc:	68db      	ldr	r3, [r3, #12]
 80184ce:	4798      	blx	r3
 80184d0:	6823      	ldr	r3, [r4, #0]
 80184d2:	2800      	cmp	r0, #0
 80184d4:	d051      	beq.n	801857a <_ZN8touchgfx3HAL4tickEv+0x15a>
 80184d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80184da:	4620      	mov	r0, r4
 80184dc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80184e0:	4798      	blx	r3
 80184e2:	2300      	movs	r3, #0
 80184e4:	6960      	ldr	r0, [r4, #20]
 80184e6:	f88d 3007 	strb.w	r3, [sp, #7]
 80184ea:	b158      	cbz	r0, 8018504 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80184ec:	6803      	ldr	r3, [r0, #0]
 80184ee:	f10d 0107 	add.w	r1, sp, #7
 80184f2:	68db      	ldr	r3, [r3, #12]
 80184f4:	4798      	blx	r3
 80184f6:	b128      	cbz	r0, 8018504 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80184f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80184fa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80184fe:	6803      	ldr	r3, [r0, #0]
 8018500:	68db      	ldr	r3, [r3, #12]
 8018502:	4798      	blx	r3
 8018504:	f104 001c 	add.w	r0, r4, #28
 8018508:	f011 fb0a 	bl	8029b20 <_ZN8touchgfx8Gestures4tickEv>
 801850c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8018510:	b30b      	cbz	r3, 8018556 <_ZN8touchgfx3HAL4tickEv+0x136>
 8018512:	6920      	ldr	r0, [r4, #16]
 8018514:	6803      	ldr	r3, [r0, #0]
 8018516:	691b      	ldr	r3, [r3, #16]
 8018518:	4798      	blx	r3
 801851a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801851c:	4606      	mov	r6, r0
 801851e:	b903      	cbnz	r3, 8018522 <_ZN8touchgfx3HAL4tickEv+0x102>
 8018520:	6720      	str	r0, [r4, #112]	; 0x70
 8018522:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018524:	4a1e      	ldr	r2, [pc, #120]	; (80185a0 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8018526:	1af3      	subs	r3, r6, r3
 8018528:	4293      	cmp	r3, r2
 801852a:	d914      	bls.n	8018556 <_ZN8touchgfx3HAL4tickEv+0x136>
 801852c:	6920      	ldr	r0, [r4, #16]
 801852e:	6803      	ldr	r3, [r0, #0]
 8018530:	699b      	ldr	r3, [r3, #24]
 8018532:	4798      	blx	r3
 8018534:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018536:	2264      	movs	r2, #100	; 0x64
 8018538:	1af3      	subs	r3, r6, r3
 801853a:	fbb3 f3f2 	udiv	r3, r3, r2
 801853e:	fbb0 f0f3 	udiv	r0, r0, r3
 8018542:	2800      	cmp	r0, #0
 8018544:	dc1e      	bgt.n	8018584 <_ZN8touchgfx3HAL4tickEv+0x164>
 8018546:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801854a:	6920      	ldr	r0, [r4, #16]
 801854c:	2100      	movs	r1, #0
 801854e:	6803      	ldr	r3, [r0, #0]
 8018550:	69db      	ldr	r3, [r3, #28]
 8018552:	4798      	blx	r3
 8018554:	6726      	str	r6, [r4, #112]	; 0x70
 8018556:	f002 fea7 	bl	801b2a8 <_ZN8touchgfx11Application11getInstanceEv>
 801855a:	6803      	ldr	r3, [r0, #0]
 801855c:	2100      	movs	r1, #0
 801855e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018560:	4798      	blx	r3
 8018562:	6823      	ldr	r3, [r4, #0]
 8018564:	4620      	mov	r0, r4
 8018566:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801856a:	4798      	blx	r3
 801856c:	2001      	movs	r0, #1
 801856e:	f7ea fd07 	bl	8002f80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018572:	2300      	movs	r3, #0
 8018574:	702b      	strb	r3, [r5, #0]
 8018576:	b004      	add	sp, #16
 8018578:	bd70      	pop	{r4, r5, r6, pc}
 801857a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801857e:	4620      	mov	r0, r4
 8018580:	4798      	blx	r3
 8018582:	e7ae      	b.n	80184e2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018584:	2863      	cmp	r0, #99	; 0x63
 8018586:	bfcb      	itete	gt
 8018588:	2300      	movgt	r3, #0
 801858a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801858e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8018592:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8018596:	e7d8      	b.n	801854a <_ZN8touchgfx3HAL4tickEv+0x12a>
 8018598:	2400af48 	.word	0x2400af48
 801859c:	2400af49 	.word	0x2400af49
 80185a0:	05f5e100 	.word	0x05f5e100

080185a4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80185a4:	f7ea bfd4 	b.w	8003550 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080185a8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80185a8:	6581      	str	r1, [r0, #88]	; 0x58
 80185aa:	301c      	adds	r0, #28
 80185ac:	f011 bab6 	b.w	8029b1c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080185b0 <_ZN8touchgfx3HAL5touchEll>:
 80185b0:	b530      	push	{r4, r5, lr}
 80185b2:	b087      	sub	sp, #28
 80185b4:	4604      	mov	r4, r0
 80185b6:	a804      	add	r0, sp, #16
 80185b8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80185bc:	f002 fc7a 	bl	801aeb4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80185c0:	9b04      	ldr	r3, [sp, #16]
 80185c2:	a906      	add	r1, sp, #24
 80185c4:	a803      	add	r0, sp, #12
 80185c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80185ca:	9b05      	ldr	r3, [sp, #20]
 80185cc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80185d0:	f002 fcc2 	bl	801af58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80185d4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80185d8:	f104 001c 	add.w	r0, r4, #28
 80185dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80185e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80185e4:	b189      	cbz	r1, 801860a <_ZN8touchgfx3HAL5touchEll+0x5a>
 80185e6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80185ea:	9300      	str	r3, [sp, #0]
 80185ec:	4613      	mov	r3, r2
 80185ee:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80185f2:	462a      	mov	r2, r5
 80185f4:	f011 faa2 	bl	8029b3c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80185f8:	b128      	cbz	r0, 8018606 <_ZN8touchgfx3HAL5touchEll+0x56>
 80185fa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80185fe:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018600:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018604:	6623      	str	r3, [r4, #96]	; 0x60
 8018606:	b007      	add	sp, #28
 8018608:	bd30      	pop	{r4, r5, pc}
 801860a:	f011 fadb 	bl	8029bc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801860e:	2301      	movs	r3, #1
 8018610:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018614:	e7f1      	b.n	80185fa <_ZN8touchgfx3HAL5touchEll+0x4a>

08018616 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018616:	b510      	push	{r4, lr}
 8018618:	2b00      	cmp	r3, #0
 801861a:	d046      	beq.n	80186aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801861c:	ea81 0002 	eor.w	r0, r1, r2
 8018620:	07c4      	lsls	r4, r0, #31
 8018622:	d508      	bpl.n	8018636 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018624:	440b      	add	r3, r1
 8018626:	3a01      	subs	r2, #1
 8018628:	428b      	cmp	r3, r1
 801862a:	d93e      	bls.n	80186aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801862c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018630:	f801 0b01 	strb.w	r0, [r1], #1
 8018634:	e7f8      	b.n	8018628 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8018636:	07d0      	lsls	r0, r2, #31
 8018638:	bf42      	ittt	mi
 801863a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801863e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8018642:	f801 0b01 	strbmi.w	r0, [r1], #1
 8018646:	2b01      	cmp	r3, #1
 8018648:	d911      	bls.n	801866e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801864a:	ea81 0402 	eor.w	r4, r1, r2
 801864e:	4610      	mov	r0, r2
 8018650:	07a4      	lsls	r4, r4, #30
 8018652:	d022      	beq.n	801869a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8018654:	f023 0401 	bic.w	r4, r3, #1
 8018658:	440c      	add	r4, r1
 801865a:	428c      	cmp	r4, r1
 801865c:	4602      	mov	r2, r0
 801865e:	d904      	bls.n	801866a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8018660:	8812      	ldrh	r2, [r2, #0]
 8018662:	3002      	adds	r0, #2
 8018664:	f821 2b02 	strh.w	r2, [r1], #2
 8018668:	e7f7      	b.n	801865a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801866a:	f003 0301 	and.w	r3, r3, #1
 801866e:	f023 0003 	bic.w	r0, r3, #3
 8018672:	4408      	add	r0, r1
 8018674:	4288      	cmp	r0, r1
 8018676:	4614      	mov	r4, r2
 8018678:	d904      	bls.n	8018684 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801867a:	6824      	ldr	r4, [r4, #0]
 801867c:	3204      	adds	r2, #4
 801867e:	f841 4b04 	str.w	r4, [r1], #4
 8018682:	e7f7      	b.n	8018674 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8018684:	f003 0303 	and.w	r3, r3, #3
 8018688:	3a01      	subs	r2, #1
 801868a:	440b      	add	r3, r1
 801868c:	428b      	cmp	r3, r1
 801868e:	d90c      	bls.n	80186aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018690:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018694:	f801 0b01 	strb.w	r0, [r1], #1
 8018698:	e7f8      	b.n	801868c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801869a:	0790      	lsls	r0, r2, #30
 801869c:	d0e7      	beq.n	801866e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801869e:	f832 0b02 	ldrh.w	r0, [r2], #2
 80186a2:	3b02      	subs	r3, #2
 80186a4:	f821 0b02 	strh.w	r0, [r1], #2
 80186a8:	e7e1      	b.n	801866e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80186aa:	2001      	movs	r0, #1
 80186ac:	bd10      	pop	{r4, pc}

080186ae <_ZN8touchgfx3HAL7noTouchEv>:
 80186ae:	b510      	push	{r4, lr}
 80186b0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80186b4:	4604      	mov	r4, r0
 80186b6:	b153      	cbz	r3, 80186ce <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80186b8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80186bc:	2101      	movs	r1, #1
 80186be:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80186c2:	301c      	adds	r0, #28
 80186c4:	f011 fa7e 	bl	8029bc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80186c8:	2300      	movs	r3, #0
 80186ca:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80186ce:	bd10      	pop	{r4, pc}

080186d0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80186d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80186d4:	4604      	mov	r4, r0
 80186d6:	6980      	ldr	r0, [r0, #24]
 80186d8:	b085      	sub	sp, #20
 80186da:	460f      	mov	r7, r1
 80186dc:	4690      	mov	r8, r2
 80186de:	4699      	mov	r9, r3
 80186e0:	b930      	cbnz	r0, 80186f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80186e2:	4b1c      	ldr	r3, [pc, #112]	; (8018754 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 80186e4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80186e8:	4a1b      	ldr	r2, [pc, #108]	; (8018758 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80186ea:	481c      	ldr	r0, [pc, #112]	; (801875c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 80186ec:	f011 fb00 	bl	8029cf0 <__assert_func>
 80186f0:	ad04      	add	r5, sp, #16
 80186f2:	2600      	movs	r6, #0
 80186f4:	f845 6d04 	str.w	r6, [r5, #-4]!
 80186f8:	6806      	ldr	r6, [r0, #0]
 80186fa:	9501      	str	r5, [sp, #4]
 80186fc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8018700:	9500      	str	r5, [sp, #0]
 8018702:	6835      	ldr	r5, [r6, #0]
 8018704:	47a8      	blx	r5
 8018706:	4d16      	ldr	r5, [pc, #88]	; (8018760 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8018708:	4606      	mov	r6, r0
 801870a:	f8a5 9000 	strh.w	r9, [r5]
 801870e:	f7ec fe87 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 8018712:	6803      	ldr	r3, [r0, #0]
 8018714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018716:	4798      	blx	r3
 8018718:	2801      	cmp	r0, #1
 801871a:	d012      	beq.n	8018742 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 801871c:	d306      	bcc.n	801872c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 801871e:	280d      	cmp	r0, #13
 8018720:	d80b      	bhi.n	801873a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018722:	4b10      	ldr	r3, [pc, #64]	; (8018764 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018724:	f240 1167 	movw	r1, #359	; 0x167
 8018728:	4a0b      	ldr	r2, [pc, #44]	; (8018758 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801872a:	e7de      	b.n	80186ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801872c:	882b      	ldrh	r3, [r5, #0]
 801872e:	fb08 7203 	mla	r2, r8, r3, r7
 8018732:	9b03      	ldr	r3, [sp, #12]
 8018734:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018738:	63e3      	str	r3, [r4, #60]	; 0x3c
 801873a:	4630      	mov	r0, r6
 801873c:	b005      	add	sp, #20
 801873e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018742:	882a      	ldrh	r2, [r5, #0]
 8018744:	9b03      	ldr	r3, [sp, #12]
 8018746:	fb08 7202 	mla	r2, r8, r2, r7
 801874a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801874e:	1a9a      	subs	r2, r3, r2
 8018750:	63e2      	str	r2, [r4, #60]	; 0x3c
 8018752:	e7f2      	b.n	801873a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018754:	0802c955 	.word	0x0802c955
 8018758:	0802cce3 	.word	0x0802cce3
 801875c:	0802c99a 	.word	0x0802c99a
 8018760:	2400af3e 	.word	0x2400af3e
 8018764:	0802c9c0 	.word	0x0802c9c0

08018768 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801876a:	b08b      	sub	sp, #44	; 0x2c
 801876c:	4617      	mov	r7, r2
 801876e:	4604      	mov	r4, r0
 8018770:	460e      	mov	r6, r1
 8018772:	461d      	mov	r5, r3
 8018774:	f7ec fe54 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 8018778:	6803      	ldr	r3, [r0, #0]
 801877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801877c:	4798      	blx	r3
 801877e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018782:	9007      	str	r0, [sp, #28]
 8018784:	4631      	mov	r1, r6
 8018786:	6822      	ldr	r2, [r4, #0]
 8018788:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801878c:	4b0c      	ldr	r3, [pc, #48]	; (80187c0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801878e:	4620      	mov	r0, r4
 8018790:	881b      	ldrh	r3, [r3, #0]
 8018792:	9306      	str	r3, [sp, #24]
 8018794:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018798:	9305      	str	r3, [sp, #20]
 801879a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801879e:	9304      	str	r3, [sp, #16]
 80187a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80187a4:	9303      	str	r3, [sp, #12]
 80187a6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80187aa:	9302      	str	r3, [sp, #8]
 80187ac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80187b0:	e9cd 5300 	strd	r5, r3, [sp]
 80187b4:	463b      	mov	r3, r7
 80187b6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80187b8:	2200      	movs	r2, #0
 80187ba:	47a8      	blx	r5
 80187bc:	b00b      	add	sp, #44	; 0x2c
 80187be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187c0:	2400af3e 	.word	0x2400af3e

080187c4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80187c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187c8:	4698      	mov	r8, r3
 80187ca:	6803      	ldr	r3, [r0, #0]
 80187cc:	b08b      	sub	sp, #44	; 0x2c
 80187ce:	4617      	mov	r7, r2
 80187d0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80187d2:	460e      	mov	r6, r1
 80187d4:	4b13      	ldr	r3, [pc, #76]	; (8018824 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80187d6:	4604      	mov	r4, r0
 80187d8:	f8b3 9000 	ldrh.w	r9, [r3]
 80187dc:	f7ec fe20 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 80187e0:	6803      	ldr	r3, [r0, #0]
 80187e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187e4:	4798      	blx	r3
 80187e6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80187ea:	2200      	movs	r2, #0
 80187ec:	4631      	mov	r1, r6
 80187ee:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80187f2:	2302      	movs	r3, #2
 80187f4:	4620      	mov	r0, r4
 80187f6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80187fa:	2301      	movs	r3, #1
 80187fc:	9305      	str	r3, [sp, #20]
 80187fe:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018802:	9304      	str	r3, [sp, #16]
 8018804:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018808:	9303      	str	r3, [sp, #12]
 801880a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801880e:	9302      	str	r3, [sp, #8]
 8018810:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018814:	e9cd 8300 	strd	r8, r3, [sp]
 8018818:	463b      	mov	r3, r7
 801881a:	47a8      	blx	r5
 801881c:	b00b      	add	sp, #44	; 0x2c
 801881e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018822:	bf00      	nop
 8018824:	2400af3e 	.word	0x2400af3e

08018828 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8018828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801882c:	4698      	mov	r8, r3
 801882e:	6803      	ldr	r3, [r0, #0]
 8018830:	b087      	sub	sp, #28
 8018832:	460e      	mov	r6, r1
 8018834:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8018836:	4617      	mov	r7, r2
 8018838:	4b0f      	ldr	r3, [pc, #60]	; (8018878 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801883a:	4604      	mov	r4, r0
 801883c:	f8b3 9000 	ldrh.w	r9, [r3]
 8018840:	f7ec fdee 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 8018844:	6803      	ldr	r3, [r0, #0]
 8018846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018848:	4798      	blx	r3
 801884a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801884e:	463a      	mov	r2, r7
 8018850:	4631      	mov	r1, r6
 8018852:	f8cd 900c 	str.w	r9, [sp, #12]
 8018856:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801885a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801885e:	4620      	mov	r0, r4
 8018860:	9302      	str	r3, [sp, #8]
 8018862:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018866:	9301      	str	r3, [sp, #4]
 8018868:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801886c:	9300      	str	r3, [sp, #0]
 801886e:	4643      	mov	r3, r8
 8018870:	47a8      	blx	r5
 8018872:	b007      	add	sp, #28
 8018874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018878:	2400af3e 	.word	0x2400af3e

0801887c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018880:	4604      	mov	r4, r0
 8018882:	b08f      	sub	sp, #60	; 0x3c
 8018884:	4610      	mov	r0, r2
 8018886:	460d      	mov	r5, r1
 8018888:	4691      	mov	r9, r2
 801888a:	461e      	mov	r6, r3
 801888c:	f005 f904 	bl	801da98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018890:	2800      	cmp	r0, #0
 8018892:	f000 809c 	beq.w	80189ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8018896:	6823      	ldr	r3, [r4, #0]
 8018898:	4620      	mov	r0, r4
 801889a:	f8df b194 	ldr.w	fp, [pc, #404]	; 8018a30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 801889e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80188a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188a4:	4798      	blx	r3
 80188a6:	6823      	ldr	r3, [r4, #0]
 80188a8:	4620      	mov	r0, r4
 80188aa:	f8df a188 	ldr.w	sl, [pc, #392]	; 8018a34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80188ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188b0:	4798      	blx	r3
 80188b2:	f8bb 3000 	ldrh.w	r3, [fp]
 80188b6:	4f5b      	ldr	r7, [pc, #364]	; (8018a24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80188b8:	9301      	str	r3, [sp, #4]
 80188ba:	f8ba 3000 	ldrh.w	r3, [sl]
 80188be:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80188c2:	4640      	mov	r0, r8
 80188c4:	9302      	str	r3, [sp, #8]
 80188c6:	883b      	ldrh	r3, [r7, #0]
 80188c8:	9303      	str	r3, [sp, #12]
 80188ca:	4b57      	ldr	r3, [pc, #348]	; (8018a28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80188cc:	881a      	ldrh	r2, [r3, #0]
 80188ce:	9305      	str	r3, [sp, #20]
 80188d0:	9204      	str	r2, [sp, #16]
 80188d2:	f005 f99b 	bl	801dc0c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80188d6:	8038      	strh	r0, [r7, #0]
 80188d8:	4640      	mov	r0, r8
 80188da:	f005 f9d1 	bl	801dc80 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80188de:	9b05      	ldr	r3, [sp, #20]
 80188e0:	8018      	strh	r0, [r3, #0]
 80188e2:	4b52      	ldr	r3, [pc, #328]	; (8018a2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80188e4:	781b      	ldrb	r3, [r3, #0]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d174      	bne.n	80189d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80188ea:	883b      	ldrh	r3, [r7, #0]
 80188ec:	f8aa 0000 	strh.w	r0, [sl]
 80188f0:	f8ab 3000 	strh.w	r3, [fp]
 80188f4:	4648      	mov	r0, r9
 80188f6:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80188fa:	f005 f8cd 	bl	801da98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80188fe:	2200      	movs	r2, #0
 8018900:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8018904:	4611      	mov	r1, r2
 8018906:	4628      	mov	r0, r5
 8018908:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801890c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018910:	f7ed fa68 	bl	8005de4 <_ZN8touchgfx8Drawable5setXYEss>
 8018914:	2301      	movs	r3, #1
 8018916:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801891a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801891e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018922:	2b00      	cmp	r3, #0
 8018924:	dd5c      	ble.n	80189e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018926:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801892a:	2b00      	cmp	r3, #0
 801892c:	dd58      	ble.n	80189e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 801892e:	462a      	mov	r2, r5
 8018930:	ab0a      	add	r3, sp, #40	; 0x28
 8018932:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018936:	6851      	ldr	r1, [r2, #4]
 8018938:	c303      	stmia	r3!, {r0, r1}
 801893a:	4631      	mov	r1, r6
 801893c:	a80a      	add	r0, sp, #40	; 0x28
 801893e:	f7fe fd9d 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 8018942:	4b38      	ldr	r3, [pc, #224]	; (8018a24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018944:	2100      	movs	r1, #0
 8018946:	f9b3 2000 	ldrsh.w	r2, [r3]
 801894a:	4b37      	ldr	r3, [pc, #220]	; (8018a28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801894c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018950:	aa0a      	add	r2, sp, #40	; 0x28
 8018952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018956:	910c      	str	r1, [sp, #48]	; 0x30
 8018958:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801895c:	ab08      	add	r3, sp, #32
 801895e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018962:	e883 0003 	stmia.w	r3, {r0, r1}
 8018966:	4618      	mov	r0, r3
 8018968:	a90c      	add	r1, sp, #48	; 0x30
 801896a:	f7fe fd87 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 801896e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8018970:	2b00      	cmp	r3, #0
 8018972:	d13c      	bne.n	80189ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8018974:	2000      	movs	r0, #0
 8018976:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801897a:	2600      	movs	r6, #0
 801897c:	696b      	ldr	r3, [r5, #20]
 801897e:	a908      	add	r1, sp, #32
 8018980:	682a      	ldr	r2, [r5, #0]
 8018982:	4628      	mov	r0, r5
 8018984:	9305      	str	r3, [sp, #20]
 8018986:	616e      	str	r6, [r5, #20]
 8018988:	6892      	ldr	r2, [r2, #8]
 801898a:	4790      	blx	r2
 801898c:	9b05      	ldr	r3, [sp, #20]
 801898e:	4652      	mov	r2, sl
 8018990:	4649      	mov	r1, r9
 8018992:	616b      	str	r3, [r5, #20]
 8018994:	4628      	mov	r0, r5
 8018996:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801899a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801899e:	f7ed fa21 	bl	8005de4 <_ZN8touchgfx8Drawable5setXYEss>
 80189a2:	9a01      	ldr	r2, [sp, #4]
 80189a4:	4b22      	ldr	r3, [pc, #136]	; (8018a30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80189a6:	4620      	mov	r0, r4
 80189a8:	801a      	strh	r2, [r3, #0]
 80189aa:	9a02      	ldr	r2, [sp, #8]
 80189ac:	4b21      	ldr	r3, [pc, #132]	; (8018a34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80189ae:	801a      	strh	r2, [r3, #0]
 80189b0:	9a03      	ldr	r2, [sp, #12]
 80189b2:	4b1c      	ldr	r3, [pc, #112]	; (8018a24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80189b4:	801a      	strh	r2, [r3, #0]
 80189b6:	4b1c      	ldr	r3, [pc, #112]	; (8018a28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80189b8:	9a04      	ldr	r2, [sp, #16]
 80189ba:	801a      	strh	r2, [r3, #0]
 80189bc:	6823      	ldr	r3, [r4, #0]
 80189be:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80189c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189c4:	4798      	blx	r3
 80189c6:	6823      	ldr	r3, [r4, #0]
 80189c8:	4620      	mov	r0, r4
 80189ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189cc:	4798      	blx	r3
 80189ce:	b00f      	add	sp, #60	; 0x3c
 80189d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189d4:	883b      	ldrh	r3, [r7, #0]
 80189d6:	f8ab 0000 	strh.w	r0, [fp]
 80189da:	f8aa 3000 	strh.w	r3, [sl]
 80189de:	e789      	b.n	80188f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 80189e0:	462a      	mov	r2, r5
 80189e2:	ab0a      	add	r3, sp, #40	; 0x28
 80189e4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80189e8:	6851      	ldr	r1, [r2, #4]
 80189ea:	c303      	stmia	r3!, {r0, r1}
 80189ec:	e7a9      	b.n	8018942 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 80189ee:	a807      	add	r0, sp, #28
 80189f0:	f005 fa9e 	bl	801df30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80189f4:	4606      	mov	r6, r0
 80189f6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80189f8:	6803      	ldr	r3, [r0, #0]
 80189fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189fc:	4798      	blx	r3
 80189fe:	4286      	cmp	r6, r0
 8018a00:	d1b8      	bne.n	8018974 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8018a02:	f7ec fd0d 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 8018a06:	6803      	ldr	r3, [r0, #0]
 8018a08:	4606      	mov	r6, r0
 8018a0a:	a807      	add	r0, sp, #28
 8018a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a0e:	9305      	str	r3, [sp, #20]
 8018a10:	f005 fa8e 	bl	801df30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018a14:	9b05      	ldr	r3, [sp, #20]
 8018a16:	4601      	mov	r1, r0
 8018a18:	4630      	mov	r0, r6
 8018a1a:	4798      	blx	r3
 8018a1c:	f080 0001 	eor.w	r0, r0, #1
 8018a20:	b2c0      	uxtb	r0, r0
 8018a22:	e7a8      	b.n	8018976 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018a24:	2400af38 	.word	0x2400af38
 8018a28:	2400af3a 	.word	0x2400af3a
 8018a2c:	2400af3c 	.word	0x2400af3c
 8018a30:	2400af3e 	.word	0x2400af3e
 8018a34:	2400af40 	.word	0x2400af40

08018a38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018a38:	4b07      	ldr	r3, [pc, #28]	; (8018a58 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018a3a:	b510      	push	{r4, lr}
 8018a3c:	781b      	ldrb	r3, [r3, #0]
 8018a3e:	4604      	mov	r4, r0
 8018a40:	b13b      	cbz	r3, 8018a52 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018a42:	6803      	ldr	r3, [r0, #0]
 8018a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a46:	4798      	blx	r3
 8018a48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018a4a:	4283      	cmp	r3, r0
 8018a4c:	d101      	bne.n	8018a52 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018a4e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018a50:	bd10      	pop	{r4, pc}
 8018a52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018a54:	e7fc      	b.n	8018a50 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018a56:	bf00      	nop
 8018a58:	2400af42 	.word	0x2400af42

08018a5c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a60:	b088      	sub	sp, #32
 8018a62:	4692      	mov	sl, r2
 8018a64:	461d      	mov	r5, r3
 8018a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018a6a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8018a6e:	2400      	movs	r4, #0
 8018a70:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8018a74:	4606      	mov	r6, r0
 8018a76:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8018a7a:	fb09 a505 	mla	r5, r9, r5, sl
 8018a7e:	9403      	str	r4, [sp, #12]
 8018a80:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018a84:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018a88:	f88d 401c 	strb.w	r4, [sp, #28]
 8018a8c:	e9cd 3100 	strd	r3, r1, [sp]
 8018a90:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018a94:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018a98:	f7ff ffce 	bl	8018a38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018a9c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018aa0:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018aa4:	f88d 401e 	strb.w	r4, [sp, #30]
 8018aa8:	9504      	str	r5, [sp, #16]
 8018aaa:	f88d 401d 	strb.w	r4, [sp, #29]
 8018aae:	f88d 401f 	strb.w	r4, [sp, #31]
 8018ab2:	f1b8 0f00 	cmp.w	r8, #0
 8018ab6:	d000      	beq.n	8018aba <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8018ab8:	b937      	cbnz	r7, 8018ac8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8018aba:	4b0d      	ldr	r3, [pc, #52]	; (8018af0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8018abc:	f240 210b 	movw	r1, #523	; 0x20b
 8018ac0:	4a0c      	ldr	r2, [pc, #48]	; (8018af4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8018ac2:	480d      	ldr	r0, [pc, #52]	; (8018af8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8018ac4:	f011 f914 	bl	8029cf0 <__assert_func>
 8018ac8:	6833      	ldr	r3, [r6, #0]
 8018aca:	4630      	mov	r0, r6
 8018acc:	9c00      	ldr	r4, [sp, #0]
 8018ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ad0:	4798      	blx	r3
 8018ad2:	4220      	tst	r0, r4
 8018ad4:	d104      	bne.n	8018ae0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8018ad6:	4b09      	ldr	r3, [pc, #36]	; (8018afc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8018ad8:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8018adc:	4a05      	ldr	r2, [pc, #20]	; (8018af4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8018ade:	e7f0      	b.n	8018ac2 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8018ae0:	6870      	ldr	r0, [r6, #4]
 8018ae2:	4669      	mov	r1, sp
 8018ae4:	6803      	ldr	r3, [r0, #0]
 8018ae6:	685b      	ldr	r3, [r3, #4]
 8018ae8:	4798      	blx	r3
 8018aea:	b008      	add	sp, #32
 8018aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018af0:	0802c7e8 	.word	0x0802c7e8
 8018af4:	0802cb18 	.word	0x0802cb18
 8018af8:	0802c99a 	.word	0x0802c99a
 8018afc:	0802c820 	.word	0x0802c820

08018b00 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8018b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b04:	b089      	sub	sp, #36	; 0x24
 8018b06:	4693      	mov	fp, r2
 8018b08:	461d      	mov	r5, r3
 8018b0a:	2400      	movs	r4, #0
 8018b0c:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8018b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018b14:	468a      	mov	sl, r1
 8018b16:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8018b1a:	fb09 b505 	mla	r5, r9, r5, fp
 8018b1e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8018b22:	4606      	mov	r6, r0
 8018b24:	9403      	str	r4, [sp, #12]
 8018b26:	e9cd 3400 	strd	r3, r4, [sp]
 8018b2a:	f7ff ff85 	bl	8018a38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018b2e:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018b32:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018b36:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018b3a:	f8ad 4018 	strh.w	r4, [sp, #24]
 8018b3e:	9504      	str	r5, [sp, #16]
 8018b40:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018b44:	f8cd a00c 	str.w	sl, [sp, #12]
 8018b48:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018b4c:	f88d 401e 	strb.w	r4, [sp, #30]
 8018b50:	f88d 401f 	strb.w	r4, [sp, #31]
 8018b54:	f1b8 0f00 	cmp.w	r8, #0
 8018b58:	d000      	beq.n	8018b5c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8018b5a:	b937      	cbnz	r7, 8018b6a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8018b5c:	4b0d      	ldr	r3, [pc, #52]	; (8018b94 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8018b5e:	f240 2121 	movw	r1, #545	; 0x221
 8018b62:	4a0d      	ldr	r2, [pc, #52]	; (8018b98 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018b64:	480d      	ldr	r0, [pc, #52]	; (8018b9c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8018b66:	f011 f8c3 	bl	8029cf0 <__assert_func>
 8018b6a:	6833      	ldr	r3, [r6, #0]
 8018b6c:	4630      	mov	r0, r6
 8018b6e:	9c00      	ldr	r4, [sp, #0]
 8018b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b72:	4798      	blx	r3
 8018b74:	4220      	tst	r0, r4
 8018b76:	d104      	bne.n	8018b82 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8018b78:	4b09      	ldr	r3, [pc, #36]	; (8018ba0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8018b7a:	f240 2122 	movw	r1, #546	; 0x222
 8018b7e:	4a06      	ldr	r2, [pc, #24]	; (8018b98 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018b80:	e7f0      	b.n	8018b64 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8018b82:	6870      	ldr	r0, [r6, #4]
 8018b84:	4669      	mov	r1, sp
 8018b86:	6803      	ldr	r3, [r0, #0]
 8018b88:	685b      	ldr	r3, [r3, #4]
 8018b8a:	4798      	blx	r3
 8018b8c:	b009      	add	sp, #36	; 0x24
 8018b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b92:	bf00      	nop
 8018b94:	0802c865 	.word	0x0802c865
 8018b98:	0802cb8e 	.word	0x0802cb8e
 8018b9c:	0802c99a 	.word	0x0802c99a
 8018ba0:	0802c89d 	.word	0x0802c89d

08018ba4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8018ba4:	b508      	push	{r3, lr}
 8018ba6:	290d      	cmp	r1, #13
 8018ba8:	d817      	bhi.n	8018bda <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8018baa:	e8df f001 	tbb	[pc, r1]
 8018bae:	090b      	.short	0x090b
 8018bb0:	0d0d0d07 	.word	0x0d0d0d07
 8018bb4:	1414140d 	.word	0x1414140d
 8018bb8:	0d0d1414 	.word	0x0d0d1414
 8018bbc:	2020      	movs	r0, #32
 8018bbe:	bd08      	pop	{r3, pc}
 8018bc0:	2018      	movs	r0, #24
 8018bc2:	e7fc      	b.n	8018bbe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018bc4:	2010      	movs	r0, #16
 8018bc6:	e7fa      	b.n	8018bbe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018bc8:	4b05      	ldr	r3, [pc, #20]	; (8018be0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8018bca:	f240 2182 	movw	r1, #642	; 0x282
 8018bce:	4a05      	ldr	r2, [pc, #20]	; (8018be4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8018bd0:	4805      	ldr	r0, [pc, #20]	; (8018be8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8018bd2:	f011 f88d 	bl	8029cf0 <__assert_func>
 8018bd6:	2008      	movs	r0, #8
 8018bd8:	e7f1      	b.n	8018bbe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018bda:	2000      	movs	r0, #0
 8018bdc:	e7ef      	b.n	8018bbe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018bde:	bf00      	nop
 8018be0:	0802ca16 	.word	0x0802ca16
 8018be4:	0802ceb9 	.word	0x0802ceb9
 8018be8:	0802c99a 	.word	0x0802c99a

08018bec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8018bec:	b570      	push	{r4, r5, r6, lr}
 8018bee:	460d      	mov	r5, r1
 8018bf0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8018bf4:	4616      	mov	r6, r2
 8018bf6:	461c      	mov	r4, r3
 8018bf8:	f7ff ffd4 	bl	8018ba4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018bfc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018c00:	10c0      	asrs	r0, r0, #3
 8018c02:	fb06 5101 	mla	r1, r6, r1, r5
 8018c06:	fb00 4001 	mla	r0, r0, r1, r4
 8018c0a:	bd70      	pop	{r4, r5, r6, pc}

08018c0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c10:	b08a      	sub	sp, #40	; 0x28
 8018c12:	f04f 0c00 	mov.w	ip, #0
 8018c16:	4604      	mov	r4, r0
 8018c18:	469a      	mov	sl, r3
 8018c1a:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8018c1e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8018c22:	2d0b      	cmp	r5, #11
 8018c24:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8018c28:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018c2c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8018c30:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8018c34:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8018c38:	f8cd c014 	str.w	ip, [sp, #20]
 8018c3c:	d12d      	bne.n	8018c9a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8018c3e:	2080      	movs	r0, #128	; 0x80
 8018c40:	9204      	str	r2, [sp, #16]
 8018c42:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018c46:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018c4a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018c4e:	f8ad 701c 	strh.w	r7, [sp, #28]
 8018c52:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018c56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c5a:	4620      	mov	r0, r4
 8018c5c:	f7ff feec 	bl	8018a38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018c60:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8018c64:	4603      	mov	r3, r0
 8018c66:	4651      	mov	r1, sl
 8018c68:	4620      	mov	r0, r4
 8018c6a:	e9cd 9800 	strd	r9, r8, [sp]
 8018c6e:	f7ff ffbd 	bl	8018bec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018c72:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8018c76:	9006      	str	r0, [sp, #24]
 8018c78:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8018c7c:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018c80:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8018c84:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018c88:	b107      	cbz	r7, 8018c8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8018c8a:	b9d6      	cbnz	r6, 8018cc2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8018c8c:	4b17      	ldr	r3, [pc, #92]	; (8018cec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8018c8e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8018c92:	4a17      	ldr	r2, [pc, #92]	; (8018cf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018c94:	4817      	ldr	r0, [pc, #92]	; (8018cf4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8018c96:	f011 f82b 	bl	8029cf0 <__assert_func>
 8018c9a:	2d02      	cmp	r5, #2
 8018c9c:	d108      	bne.n	8018cb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 8018c9e:	2bff      	cmp	r3, #255	; 0xff
 8018ca0:	d104      	bne.n	8018cac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 8018ca2:	2800      	cmp	r0, #0
 8018ca4:	bf14      	ite	ne
 8018ca6:	2040      	movne	r0, #64	; 0x40
 8018ca8:	2020      	moveq	r0, #32
 8018caa:	e7c9      	b.n	8018c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018cac:	2040      	movs	r0, #64	; 0x40
 8018cae:	e7c7      	b.n	8018c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018cb0:	2bff      	cmp	r3, #255	; 0xff
 8018cb2:	d104      	bne.n	8018cbe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8018cb4:	2800      	cmp	r0, #0
 8018cb6:	bf14      	ite	ne
 8018cb8:	2004      	movne	r0, #4
 8018cba:	2001      	moveq	r0, #1
 8018cbc:	e7c0      	b.n	8018c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018cbe:	2004      	movs	r0, #4
 8018cc0:	e7be      	b.n	8018c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018cc2:	6823      	ldr	r3, [r4, #0]
 8018cc4:	4620      	mov	r0, r4
 8018cc6:	9d02      	ldr	r5, [sp, #8]
 8018cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018cca:	4798      	blx	r3
 8018ccc:	4228      	tst	r0, r5
 8018cce:	d104      	bne.n	8018cda <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8018cd0:	4b09      	ldr	r3, [pc, #36]	; (8018cf8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8018cd2:	f240 11d5 	movw	r1, #469	; 0x1d5
 8018cd6:	4a06      	ldr	r2, [pc, #24]	; (8018cf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018cd8:	e7dc      	b.n	8018c94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8018cda:	6860      	ldr	r0, [r4, #4]
 8018cdc:	a902      	add	r1, sp, #8
 8018cde:	6803      	ldr	r3, [r0, #0]
 8018ce0:	685b      	ldr	r3, [r3, #4]
 8018ce2:	4798      	blx	r3
 8018ce4:	b00a      	add	sp, #40	; 0x28
 8018ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cea:	bf00      	nop
 8018cec:	0802c7e8 	.word	0x0802c7e8
 8018cf0:	0802cd47 	.word	0x0802cd47
 8018cf4:	0802c99a 	.word	0x0802c99a
 8018cf8:	0802c820 	.word	0x0802c820

08018cfc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d00:	b08b      	sub	sp, #44	; 0x2c
 8018d02:	469b      	mov	fp, r3
 8018d04:	4604      	mov	r4, r0
 8018d06:	4692      	mov	sl, r2
 8018d08:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018d0c:	2600      	movs	r6, #0
 8018d0e:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8018d12:	4689      	mov	r9, r1
 8018d14:	2fff      	cmp	r7, #255	; 0xff
 8018d16:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018d1a:	9605      	str	r6, [sp, #20]
 8018d1c:	bf14      	ite	ne
 8018d1e:	2308      	movne	r3, #8
 8018d20:	2302      	moveq	r3, #2
 8018d22:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8018d26:	f7ff fe87 	bl	8018a38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018d2a:	465a      	mov	r2, fp
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	4651      	mov	r1, sl
 8018d30:	4620      	mov	r0, r4
 8018d32:	e9cd 8500 	strd	r8, r5, [sp]
 8018d36:	f7ff ff59 	bl	8018bec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018d3a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018d3e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018d42:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018d46:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018d4a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8018d4e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018d52:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018d56:	9d02      	ldr	r5, [sp, #8]
 8018d58:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018d5c:	6823      	ldr	r3, [r4, #0]
 8018d5e:	9006      	str	r0, [sp, #24]
 8018d60:	4620      	mov	r0, r4
 8018d62:	f8ad 6020 	strh.w	r6, [sp, #32]
 8018d66:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8018d6a:	f8cd 9014 	str.w	r9, [sp, #20]
 8018d6e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8018d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d74:	4798      	blx	r3
 8018d76:	4228      	tst	r0, r5
 8018d78:	d106      	bne.n	8018d88 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8018d7a:	4b07      	ldr	r3, [pc, #28]	; (8018d98 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8018d7c:	f240 2137 	movw	r1, #567	; 0x237
 8018d80:	4a06      	ldr	r2, [pc, #24]	; (8018d9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8018d82:	4807      	ldr	r0, [pc, #28]	; (8018da0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8018d84:	f010 ffb4 	bl	8029cf0 <__assert_func>
 8018d88:	6860      	ldr	r0, [r4, #4]
 8018d8a:	a902      	add	r1, sp, #8
 8018d8c:	6803      	ldr	r3, [r0, #0]
 8018d8e:	685b      	ldr	r3, [r3, #4]
 8018d90:	4798      	blx	r3
 8018d92:	b00b      	add	sp, #44	; 0x2c
 8018d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d98:	0802c820 	.word	0x0802c820
 8018d9c:	0802ce1e 	.word	0x0802ce1e
 8018da0:	0802c99a 	.word	0x0802c99a

08018da4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018da4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018da8:	461f      	mov	r7, r3
 8018daa:	4b0b      	ldr	r3, [pc, #44]	; (8018dd8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018dac:	460d      	mov	r5, r1
 8018dae:	4616      	mov	r6, r2
 8018db0:	f8b3 8000 	ldrh.w	r8, [r3]
 8018db4:	4604      	mov	r4, r0
 8018db6:	f7ec fb33 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 8018dba:	6803      	ldr	r3, [r0, #0]
 8018dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dbe:	4798      	blx	r3
 8018dc0:	463b      	mov	r3, r7
 8018dc2:	4632      	mov	r2, r6
 8018dc4:	4629      	mov	r1, r5
 8018dc6:	e9cd 8000 	strd	r8, r0, [sp]
 8018dca:	4620      	mov	r0, r4
 8018dcc:	f7ff ff0e 	bl	8018bec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018dd0:	b002      	add	sp, #8
 8018dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dd6:	bf00      	nop
 8018dd8:	2400af3e 	.word	0x2400af3e

08018ddc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018de0:	4698      	mov	r8, r3
 8018de2:	b088      	sub	sp, #32
 8018de4:	2300      	movs	r3, #0
 8018de6:	4617      	mov	r7, r2
 8018de8:	4604      	mov	r4, r0
 8018dea:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018dee:	9303      	str	r3, [sp, #12]
 8018df0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018df4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018df8:	f8ad 6014 	strh.w	r6, [sp, #20]
 8018dfc:	f8ad 5016 	strh.w	r5, [sp, #22]
 8018e00:	e9cd 3100 	strd	r3, r1, [sp]
 8018e04:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018e08:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018e0c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018e10:	f88d 301c 	strb.w	r3, [sp, #28]
 8018e14:	f7ff fe10 	bl	8018a38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018e18:	4642      	mov	r2, r8
 8018e1a:	4603      	mov	r3, r0
 8018e1c:	4639      	mov	r1, r7
 8018e1e:	4620      	mov	r0, r4
 8018e20:	f7ff ffc0 	bl	8018da4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018e24:	4b18      	ldr	r3, [pc, #96]	; (8018e88 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8018e26:	9004      	str	r0, [sp, #16]
 8018e28:	881b      	ldrh	r3, [r3, #0]
 8018e2a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018e2e:	f7ec faf7 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 8018e32:	6803      	ldr	r3, [r0, #0]
 8018e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e36:	4798      	blx	r3
 8018e38:	f88d 001e 	strb.w	r0, [sp, #30]
 8018e3c:	f88d 001d 	strb.w	r0, [sp, #29]
 8018e40:	b106      	cbz	r6, 8018e44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8018e42:	b935      	cbnz	r5, 8018e52 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8018e44:	4b11      	ldr	r3, [pc, #68]	; (8018e8c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8018e46:	f240 11f1 	movw	r1, #497	; 0x1f1
 8018e4a:	4a11      	ldr	r2, [pc, #68]	; (8018e90 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018e4c:	4811      	ldr	r0, [pc, #68]	; (8018e94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8018e4e:	f010 ff4f 	bl	8029cf0 <__assert_func>
 8018e52:	6823      	ldr	r3, [r4, #0]
 8018e54:	4620      	mov	r0, r4
 8018e56:	9d00      	ldr	r5, [sp, #0]
 8018e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e5a:	4798      	blx	r3
 8018e5c:	4228      	tst	r0, r5
 8018e5e:	d104      	bne.n	8018e6a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8018e60:	4b0d      	ldr	r3, [pc, #52]	; (8018e98 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 8018e62:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8018e66:	4a0a      	ldr	r2, [pc, #40]	; (8018e90 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018e68:	e7f0      	b.n	8018e4c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8018e6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018e6c:	4669      	mov	r1, sp
 8018e6e:	6860      	ldr	r0, [r4, #4]
 8018e70:	9303      	str	r3, [sp, #12]
 8018e72:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018e76:	f88d 301f 	strb.w	r3, [sp, #31]
 8018e7a:	6803      	ldr	r3, [r0, #0]
 8018e7c:	685b      	ldr	r3, [r3, #4]
 8018e7e:	4798      	blx	r3
 8018e80:	b008      	add	sp, #32
 8018e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e86:	bf00      	nop
 8018e88:	2400af3e 	.word	0x2400af3e
 8018e8c:	0802c7e8 	.word	0x0802c7e8
 8018e90:	0802cbf3 	.word	0x0802cbf3
 8018e94:	0802c99a 	.word	0x0802c99a
 8018e98:	0802c820 	.word	0x0802c820

08018e9c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e9e:	b08b      	sub	sp, #44	; 0x2c
 8018ea0:	4604      	mov	r4, r0
 8018ea2:	466b      	mov	r3, sp
 8018ea4:	e883 0006 	stmia.w	r3, {r1, r2}
 8018ea8:	4b20      	ldr	r3, [pc, #128]	; (8018f2c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8018eaa:	781b      	ldrb	r3, [r3, #0]
 8018eac:	b933      	cbnz	r3, 8018ebc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8018eae:	4b20      	ldr	r3, [pc, #128]	; (8018f30 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8018eb0:	f44f 7112 	mov.w	r1, #584	; 0x248
 8018eb4:	4a1f      	ldr	r2, [pc, #124]	; (8018f34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8018eb6:	4820      	ldr	r0, [pc, #128]	; (8018f38 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8018eb8:	f010 ff1a 	bl	8029cf0 <__assert_func>
 8018ebc:	2301      	movs	r3, #1
 8018ebe:	2500      	movs	r5, #0
 8018ec0:	f8bd 6000 	ldrh.w	r6, [sp]
 8018ec4:	9302      	str	r3, [sp, #8]
 8018ec6:	6803      	ldr	r3, [r0, #0]
 8018ec8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018ecc:	9505      	str	r5, [sp, #20]
 8018ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ed0:	4798      	blx	r3
 8018ed2:	463a      	mov	r2, r7
 8018ed4:	4631      	mov	r1, r6
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	4620      	mov	r0, r4
 8018eda:	f7ff ff63 	bl	8018da4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018ede:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018ee0:	9003      	str	r0, [sp, #12]
 8018ee2:	9306      	str	r3, [sp, #24]
 8018ee4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018ee8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018eec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018ef0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018ef4:	4b11      	ldr	r3, [pc, #68]	; (8018f3c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8018ef6:	881b      	ldrh	r3, [r3, #0]
 8018ef8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018efc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018f00:	f7ec fa8e 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 8018f04:	6803      	ldr	r3, [r0, #0]
 8018f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f08:	4798      	blx	r3
 8018f0a:	23ff      	movs	r3, #255	; 0xff
 8018f0c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018f10:	a902      	add	r1, sp, #8
 8018f12:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018f16:	6860      	ldr	r0, [r4, #4]
 8018f18:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018f1c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 8018f20:	6803      	ldr	r3, [r0, #0]
 8018f22:	685b      	ldr	r3, [r3, #4]
 8018f24:	4798      	blx	r3
 8018f26:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018f28:	b00b      	add	sp, #44	; 0x2c
 8018f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f2c:	2400af43 	.word	0x2400af43
 8018f30:	0802c8e7 	.word	0x0802c8e7
 8018f34:	0802cc9d 	.word	0x0802cc9d
 8018f38:	0802c99a 	.word	0x0802c99a
 8018f3c:	2400af3e 	.word	0x2400af3e

08018f40 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f44:	b08a      	sub	sp, #40	; 0x28
 8018f46:	2600      	movs	r6, #0
 8018f48:	4604      	mov	r4, r0
 8018f4a:	466d      	mov	r5, sp
 8018f4c:	9605      	str	r6, [sp, #20]
 8018f4e:	e885 0006 	stmia.w	r5, {r1, r2}
 8018f52:	461d      	mov	r5, r3
 8018f54:	2301      	movs	r3, #1
 8018f56:	f8bd 7000 	ldrh.w	r7, [sp]
 8018f5a:	9302      	str	r3, [sp, #8]
 8018f5c:	6803      	ldr	r3, [r0, #0]
 8018f5e:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8018f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f64:	4798      	blx	r3
 8018f66:	4642      	mov	r2, r8
 8018f68:	4639      	mov	r1, r7
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	4620      	mov	r0, r4
 8018f6e:	f7ff ff19 	bl	8018da4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018f72:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018f76:	9003      	str	r0, [sp, #12]
 8018f78:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018f7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018f80:	9506      	str	r5, [sp, #24]
 8018f82:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018f86:	4b0f      	ldr	r3, [pc, #60]	; (8018fc4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 8018f88:	881b      	ldrh	r3, [r3, #0]
 8018f8a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018f8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018f90:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018f94:	f7ec fa44 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 8018f98:	6803      	ldr	r3, [r0, #0]
 8018f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f9c:	4798      	blx	r3
 8018f9e:	23ff      	movs	r3, #255	; 0xff
 8018fa0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018fa4:	a902      	add	r1, sp, #8
 8018fa6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018faa:	6860      	ldr	r0, [r4, #4]
 8018fac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018fb0:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8018fb4:	6803      	ldr	r3, [r0, #0]
 8018fb6:	685b      	ldr	r3, [r3, #4]
 8018fb8:	4798      	blx	r3
 8018fba:	4628      	mov	r0, r5
 8018fbc:	b00a      	add	sp, #40	; 0x28
 8018fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fc2:	bf00      	nop
 8018fc4:	2400af3e 	.word	0x2400af3e

08018fc8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018fc8:	b570      	push	{r4, r5, r6, lr}
 8018fca:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8018fce:	4604      	mov	r4, r0
 8018fd0:	b19b      	cbz	r3, 8018ffa <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018fd2:	2002      	movs	r0, #2
 8018fd4:	f7e9 fff0 	bl	8002fb8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018fd8:	2300      	movs	r3, #0
 8018fda:	4620      	mov	r0, r4
 8018fdc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018fe0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8018fe4:	6823      	ldr	r3, [r4, #0]
 8018fe6:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8018fea:	f7ff fd25 	bl	8018a38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018fee:	4601      	mov	r1, r0
 8018ff0:	4620      	mov	r0, r4
 8018ff2:	462b      	mov	r3, r5
 8018ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ff8:	4718      	bx	r3
 8018ffa:	bd70      	pop	{r4, r5, r6, pc}

08018ffc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018ffc:	b538      	push	{r3, r4, r5, lr}
 8018ffe:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8019002:	4604      	mov	r4, r0
 8019004:	460d      	mov	r5, r1
 8019006:	428a      	cmp	r2, r1
 8019008:	d008      	beq.n	801901c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 801900a:	2a01      	cmp	r2, #1
 801900c:	6803      	ldr	r3, [r0, #0]
 801900e:	d106      	bne.n	801901e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8019010:	b929      	cbnz	r1, 801901e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8019012:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019016:	4798      	blx	r3
 8019018:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801901c:	bd38      	pop	{r3, r4, r5, pc}
 801901e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019022:	4620      	mov	r0, r4
 8019024:	e7f7      	b.n	8019016 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08019028 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019028:	4b0d      	ldr	r3, [pc, #52]	; (8019060 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801902a:	b510      	push	{r4, lr}
 801902c:	781b      	ldrb	r3, [r3, #0]
 801902e:	4604      	mov	r4, r0
 8019030:	b95b      	cbnz	r3, 801904a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019032:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8019036:	2b02      	cmp	r3, #2
 8019038:	d007      	beq.n	801904a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801903a:	6840      	ldr	r0, [r0, #4]
 801903c:	f000 f936 	bl	80192ac <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8019040:	b118      	cbz	r0, 801904a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019042:	6862      	ldr	r2, [r4, #4]
 8019044:	7a53      	ldrb	r3, [r2, #9]
 8019046:	2b00      	cmp	r3, #0
 8019048:	d0fc      	beq.n	8019044 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801904a:	f7ea fa73 	bl	8003534 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801904e:	4620      	mov	r0, r4
 8019050:	2100      	movs	r1, #0
 8019052:	f7ff ffd3 	bl	8018ffc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019056:	4620      	mov	r0, r4
 8019058:	f7ff fcee 	bl	8018a38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801905c:	bd10      	pop	{r4, pc}
 801905e:	bf00      	nop
 8019060:	2400af42 	.word	0x2400af42

08019064 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8019064:	4770      	bx	lr

08019066 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8019066:	2000      	movs	r0, #0
 8019068:	4770      	bx	lr

0801906a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801906a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801906e:	1a13      	subs	r3, r2, r0
 8019070:	4258      	negs	r0, r3
 8019072:	4158      	adcs	r0, r3
 8019074:	4770      	bx	lr

08019076 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019076:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801907a:	1a9b      	subs	r3, r3, r2
 801907c:	2b00      	cmp	r3, #0
 801907e:	bfdc      	itt	le
 8019080:	6882      	ldrle	r2, [r0, #8]
 8019082:	189b      	addle	r3, r3, r2
 8019084:	2b01      	cmp	r3, #1
 8019086:	bfcc      	ite	gt
 8019088:	2000      	movgt	r0, #0
 801908a:	2001      	movle	r0, #1
 801908c:	4770      	bx	lr

0801908e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801908e:	6902      	ldr	r2, [r0, #16]
 8019090:	6840      	ldr	r0, [r0, #4]
 8019092:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8019096:	4770      	bx	lr

08019098 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8019098:	6803      	ldr	r3, [r0, #0]
 801909a:	691b      	ldr	r3, [r3, #16]
 801909c:	4718      	bx	r3

0801909e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801909e:	4770      	bx	lr

080190a0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80190a0:	4770      	bx	lr
	...

080190a4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80190a4:	2301      	movs	r3, #1
 80190a6:	b570      	push	{r4, r5, r6, lr}
 80190a8:	7203      	strb	r3, [r0, #8]
 80190aa:	4604      	mov	r4, r0
 80190ac:	6840      	ldr	r0, [r0, #4]
 80190ae:	6803      	ldr	r3, [r0, #0]
 80190b0:	699b      	ldr	r3, [r3, #24]
 80190b2:	4798      	blx	r3
 80190b4:	6803      	ldr	r3, [r0, #0]
 80190b6:	4605      	mov	r5, r0
 80190b8:	2b40      	cmp	r3, #64	; 0x40
 80190ba:	d039      	beq.n	8019130 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80190bc:	d815      	bhi.n	80190ea <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80190be:	2b04      	cmp	r3, #4
 80190c0:	d022      	beq.n	8019108 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80190c2:	d808      	bhi.n	80190d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80190c4:	2b01      	cmp	r3, #1
 80190c6:	d033      	beq.n	8019130 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80190c8:	2b02      	cmp	r3, #2
 80190ca:	d108      	bne.n	80190de <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 80190cc:	6823      	ldr	r3, [r4, #0]
 80190ce:	4620      	mov	r0, r4
 80190d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80190d2:	4798      	blx	r3
 80190d4:	e025      	b.n	8019122 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 80190d6:	2b08      	cmp	r3, #8
 80190d8:	d01e      	beq.n	8019118 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 80190da:	2b20      	cmp	r3, #32
 80190dc:	d028      	beq.n	8019130 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80190de:	4b17      	ldr	r3, [pc, #92]	; (801913c <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 80190e0:	218b      	movs	r1, #139	; 0x8b
 80190e2:	4a17      	ldr	r2, [pc, #92]	; (8019140 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 80190e4:	4817      	ldr	r0, [pc, #92]	; (8019144 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 80190e6:	f010 fe03 	bl	8029cf0 <__assert_func>
 80190ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80190ee:	d01f      	beq.n	8019130 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80190f0:	d804      	bhi.n	80190fc <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 80190f2:	2b80      	cmp	r3, #128	; 0x80
 80190f4:	d01c      	beq.n	8019130 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80190f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80190fa:	e7ef      	b.n	80190dc <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 80190fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019100:	d016      	beq.n	8019130 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019106:	e7e0      	b.n	80190ca <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8019108:	6823      	ldr	r3, [r4, #0]
 801910a:	7f01      	ldrb	r1, [r0, #28]
 801910c:	4620      	mov	r0, r4
 801910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019110:	4798      	blx	r3
 8019112:	6823      	ldr	r3, [r4, #0]
 8019114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019116:	e006      	b.n	8019126 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8019118:	6823      	ldr	r3, [r4, #0]
 801911a:	7f01      	ldrb	r1, [r0, #28]
 801911c:	4620      	mov	r0, r4
 801911e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019120:	4798      	blx	r3
 8019122:	6823      	ldr	r3, [r4, #0]
 8019124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019126:	4629      	mov	r1, r5
 8019128:	4620      	mov	r0, r4
 801912a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801912e:	4718      	bx	r3
 8019130:	6823      	ldr	r3, [r4, #0]
 8019132:	4620      	mov	r0, r4
 8019134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019136:	4798      	blx	r3
 8019138:	e7eb      	b.n	8019112 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801913a:	bf00      	nop
 801913c:	0802cf02 	.word	0x0802cf02
 8019140:	0802d014 	.word	0x0802d014
 8019144:	0802cf27 	.word	0x0802cf27

08019148 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019148:	b570      	push	{r4, r5, r6, lr}
 801914a:	4604      	mov	r4, r0
 801914c:	460e      	mov	r6, r1
 801914e:	6860      	ldr	r0, [r4, #4]
 8019150:	6803      	ldr	r3, [r0, #0]
 8019152:	685b      	ldr	r3, [r3, #4]
 8019154:	4798      	blx	r3
 8019156:	2800      	cmp	r0, #0
 8019158:	d1f9      	bne.n	801914e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801915a:	4d0d      	ldr	r5, [pc, #52]	; (8019190 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801915c:	6828      	ldr	r0, [r5, #0]
 801915e:	6803      	ldr	r3, [r0, #0]
 8019160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019162:	4798      	blx	r3
 8019164:	f7ea fa00 	bl	8003568 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019168:	6828      	ldr	r0, [r5, #0]
 801916a:	2101      	movs	r1, #1
 801916c:	f7ff ff46 	bl	8018ffc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019170:	6860      	ldr	r0, [r4, #4]
 8019172:	4631      	mov	r1, r6
 8019174:	6803      	ldr	r3, [r0, #0]
 8019176:	689b      	ldr	r3, [r3, #8]
 8019178:	4798      	blx	r3
 801917a:	6823      	ldr	r3, [r4, #0]
 801917c:	4620      	mov	r0, r4
 801917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019180:	4798      	blx	r3
 8019182:	6828      	ldr	r0, [r5, #0]
 8019184:	6803      	ldr	r3, [r0, #0]
 8019186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801918a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801918c:	4718      	bx	r3
 801918e:	bf00      	nop
 8019190:	2400af44 	.word	0x2400af44

08019194 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019194:	b508      	push	{r3, lr}
 8019196:	f7ea f9cd 	bl	8003534 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801919a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801919e:	f7ea b9d7 	b.w	8003550 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080191a2 <_ZN8touchgfx13DMA_Interface5startEv>:
 80191a2:	b510      	push	{r4, lr}
 80191a4:	4604      	mov	r4, r0
 80191a6:	6840      	ldr	r0, [r0, #4]
 80191a8:	6803      	ldr	r3, [r0, #0]
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	4798      	blx	r3
 80191ae:	b948      	cbnz	r0, 80191c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80191b0:	7a63      	ldrb	r3, [r4, #9]
 80191b2:	b13b      	cbz	r3, 80191c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80191b4:	7a23      	ldrb	r3, [r4, #8]
 80191b6:	b92b      	cbnz	r3, 80191c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80191b8:	6823      	ldr	r3, [r4, #0]
 80191ba:	4620      	mov	r0, r4
 80191bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191c2:	4718      	bx	r3
 80191c4:	bd10      	pop	{r4, pc}
	...

080191c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80191c8:	b570      	push	{r4, r5, r6, lr}
 80191ca:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80191ce:	4606      	mov	r6, r0
 80191d0:	1a9b      	subs	r3, r3, r2
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	bfdc      	itt	le
 80191d6:	6880      	ldrle	r0, [r0, #8]
 80191d8:	181b      	addle	r3, r3, r0
 80191da:	2b01      	cmp	r3, #1
 80191dc:	dd13      	ble.n	8019206 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 80191de:	6874      	ldr	r4, [r6, #4]
 80191e0:	460d      	mov	r5, r1
 80191e2:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 80191e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80191ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80191ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80191f2:	68f3      	ldr	r3, [r6, #12]
 80191f4:	68b2      	ldr	r2, [r6, #8]
 80191f6:	f3bf 8f5b 	dmb	ish
 80191fa:	3301      	adds	r3, #1
 80191fc:	429a      	cmp	r2, r3
 80191fe:	bfd8      	it	le
 8019200:	1a9b      	suble	r3, r3, r2
 8019202:	60f3      	str	r3, [r6, #12]
 8019204:	bd70      	pop	{r4, r5, r6, pc}
 8019206:	4b03      	ldr	r3, [pc, #12]	; (8019214 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 8019208:	2139      	movs	r1, #57	; 0x39
 801920a:	4a03      	ldr	r2, [pc, #12]	; (8019218 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801920c:	4803      	ldr	r0, [pc, #12]	; (801921c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801920e:	f010 fd6f 	bl	8029cf0 <__assert_func>
 8019212:	bf00      	nop
 8019214:	0802cf4d 	.word	0x0802cf4d
 8019218:	0802d044 	.word	0x0802d044
 801921c:	0802cf27 	.word	0x0802cf27

08019220 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8019220:	b510      	push	{r4, lr}
 8019222:	6803      	ldr	r3, [r0, #0]
 8019224:	4604      	mov	r4, r0
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	4798      	blx	r3
 801922a:	b128      	cbz	r0, 8019238 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801922c:	4b07      	ldr	r3, [pc, #28]	; (801924c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801922e:	213f      	movs	r1, #63	; 0x3f
 8019230:	4a07      	ldr	r2, [pc, #28]	; (8019250 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8019232:	4808      	ldr	r0, [pc, #32]	; (8019254 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019234:	f010 fd5c 	bl	8029cf0 <__assert_func>
 8019238:	6923      	ldr	r3, [r4, #16]
 801923a:	68a2      	ldr	r2, [r4, #8]
 801923c:	f3bf 8f5b 	dmb	ish
 8019240:	3301      	adds	r3, #1
 8019242:	429a      	cmp	r2, r3
 8019244:	bfd8      	it	le
 8019246:	1a9b      	suble	r3, r3, r2
 8019248:	6123      	str	r3, [r4, #16]
 801924a:	bd10      	pop	{r4, pc}
 801924c:	0802cf70 	.word	0x0802cf70
 8019250:	0802d092 	.word	0x0802d092
 8019254:	0802cf27 	.word	0x0802cf27

08019258 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019258:	b570      	push	{r4, r5, r6, lr}
 801925a:	4604      	mov	r4, r0
 801925c:	6840      	ldr	r0, [r0, #4]
 801925e:	6803      	ldr	r3, [r0, #0]
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	4798      	blx	r3
 8019264:	4605      	mov	r5, r0
 8019266:	b930      	cbnz	r0, 8019276 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019268:	7a23      	ldrb	r3, [r4, #8]
 801926a:	b123      	cbz	r3, 8019276 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801926c:	6860      	ldr	r0, [r4, #4]
 801926e:	6803      	ldr	r3, [r0, #0]
 8019270:	695b      	ldr	r3, [r3, #20]
 8019272:	4798      	blx	r3
 8019274:	7225      	strb	r5, [r4, #8]
 8019276:	6860      	ldr	r0, [r4, #4]
 8019278:	6803      	ldr	r3, [r0, #0]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	4798      	blx	r3
 801927e:	b928      	cbnz	r0, 801928c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8019280:	6823      	ldr	r3, [r4, #0]
 8019282:	4620      	mov	r0, r4
 8019284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801928a:	4718      	bx	r3
 801928c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019290:	f7ea b976 	b.w	8003580 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08019294 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019294:	b510      	push	{r4, lr}
 8019296:	6082      	str	r2, [r0, #8]
 8019298:	2200      	movs	r2, #0
 801929a:	4c03      	ldr	r4, [pc, #12]	; (80192a8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801929c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80192a0:	e9c0 4100 	strd	r4, r1, [r0]
 80192a4:	bd10      	pop	{r4, pc}
 80192a6:	bf00      	nop
 80192a8:	0802cff8 	.word	0x0802cff8

080192ac <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80192ac:	6840      	ldr	r0, [r0, #4]
 80192ae:	6803      	ldr	r3, [r0, #0]
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	4718      	bx	r3

080192b4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80192b4:	2200      	movs	r2, #0
 80192b6:	8002      	strh	r2, [r0, #0]
 80192b8:	8042      	strh	r2, [r0, #2]
 80192ba:	8082      	strh	r2, [r0, #4]
 80192bc:	80c2      	strh	r2, [r0, #6]
 80192be:	4770      	bx	lr

080192c0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 80192c0:	b570      	push	{r4, r5, r6, lr}
 80192c2:	6803      	ldr	r3, [r0, #0]
 80192c4:	4604      	mov	r4, r0
 80192c6:	4615      	mov	r5, r2
 80192c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192ca:	4798      	blx	r3
 80192cc:	6823      	ldr	r3, [r4, #0]
 80192ce:	4629      	mov	r1, r5
 80192d0:	4620      	mov	r0, r4
 80192d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192d8:	4718      	bx	r3
	...

080192dc <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80192dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80192de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80192e2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80192e4:	4299      	cmp	r1, r3
 80192e6:	d029      	beq.n	801933c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 80192e8:	4b15      	ldr	r3, [pc, #84]	; (8019340 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	b92b      	cbnz	r3, 80192fa <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 80192ee:	4b15      	ldr	r3, [pc, #84]	; (8019344 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80192f0:	21ae      	movs	r1, #174	; 0xae
 80192f2:	4a15      	ldr	r2, [pc, #84]	; (8019348 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80192f4:	4815      	ldr	r0, [pc, #84]	; (801934c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80192f6:	f010 fcfb 	bl	8029cf0 <__assert_func>
 80192fa:	4a15      	ldr	r2, [pc, #84]	; (8019350 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80192fc:	8812      	ldrh	r2, [r2, #0]
 80192fe:	428a      	cmp	r2, r1
 8019300:	d803      	bhi.n	801930a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8019302:	4b14      	ldr	r3, [pc, #80]	; (8019354 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8019304:	21af      	movs	r1, #175	; 0xaf
 8019306:	4a10      	ldr	r2, [pc, #64]	; (8019348 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019308:	e7f4      	b.n	80192f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801930a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801930e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8019312:	4b11      	ldr	r3, [pc, #68]	; (8019358 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8019314:	7854      	ldrb	r4, [r2, #1]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801931c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8019320:	682b      	ldr	r3, [r5, #0]
 8019322:	69de      	ldr	r6, [r3, #28]
 8019324:	4b0d      	ldr	r3, [pc, #52]	; (801935c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8019326:	6818      	ldr	r0, [r3, #0]
 8019328:	f7ef f82c 	bl	8008384 <_ZNK8touchgfx5Texts7getTextEt>
 801932c:	2300      	movs	r3, #0
 801932e:	4602      	mov	r2, r0
 8019330:	4621      	mov	r1, r4
 8019332:	9300      	str	r3, [sp, #0]
 8019334:	4628      	mov	r0, r5
 8019336:	47b0      	blx	r6
 8019338:	b002      	add	sp, #8
 801933a:	bd70      	pop	{r4, r5, r6, pc}
 801933c:	2000      	movs	r0, #0
 801933e:	e7fb      	b.n	8019338 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8019340:	2400af94 	.word	0x2400af94
 8019344:	0802d0c2 	.word	0x0802d0c2
 8019348:	0802d1f8 	.word	0x0802d1f8
 801934c:	0802d104 	.word	0x0802d104
 8019350:	2400af98 	.word	0x2400af98
 8019354:	0802d12d 	.word	0x0802d12d
 8019358:	2400af9c 	.word	0x2400af9c
 801935c:	2400afa0 	.word	0x2400afa0

08019360 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8019360:	b570      	push	{r4, r5, r6, lr}
 8019362:	6803      	ldr	r3, [r0, #0]
 8019364:	4604      	mov	r4, r0
 8019366:	b28d      	uxth	r5, r1
 8019368:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801936a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 801936c:	4b10      	ldr	r3, [pc, #64]	; (80193b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	b92b      	cbnz	r3, 801937e <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8019372:	4b10      	ldr	r3, [pc, #64]	; (80193b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8019374:	21ae      	movs	r1, #174	; 0xae
 8019376:	4a10      	ldr	r2, [pc, #64]	; (80193b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019378:	4810      	ldr	r0, [pc, #64]	; (80193bc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801937a:	f010 fcb9 	bl	8029cf0 <__assert_func>
 801937e:	4910      	ldr	r1, [pc, #64]	; (80193c0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8019380:	8809      	ldrh	r1, [r1, #0]
 8019382:	4291      	cmp	r1, r2
 8019384:	d803      	bhi.n	801938e <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8019386:	4b0f      	ldr	r3, [pc, #60]	; (80193c4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8019388:	21af      	movs	r1, #175	; 0xaf
 801938a:	4a0b      	ldr	r2, [pc, #44]	; (80193b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801938c:	e7f4      	b.n	8019378 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 801938e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8019392:	4b0d      	ldr	r3, [pc, #52]	; (80193c8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801939a:	6803      	ldr	r3, [r0, #0]
 801939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801939e:	4798      	blx	r3
 80193a0:	1a29      	subs	r1, r5, r0
 80193a2:	4633      	mov	r3, r6
 80193a4:	4620      	mov	r0, r4
 80193a6:	b209      	sxth	r1, r1
 80193a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193ac:	4718      	bx	r3
 80193ae:	bf00      	nop
 80193b0:	2400af94 	.word	0x2400af94
 80193b4:	0802d0c2 	.word	0x0802d0c2
 80193b8:	0802d1f8 	.word	0x0802d1f8
 80193bc:	0802d104 	.word	0x0802d104
 80193c0:	2400af98 	.word	0x2400af98
 80193c4:	0802d12d 	.word	0x0802d12d
 80193c8:	2400af9c 	.word	0x2400af9c

080193cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80193cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80193d4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80193d6:	b08c      	sub	sp, #48	; 0x30
 80193d8:	4604      	mov	r4, r0
 80193da:	4293      	cmp	r3, r2
 80193dc:	4688      	mov	r8, r1
 80193de:	d05f      	beq.n	80194a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80193e0:	4e31      	ldr	r6, [pc, #196]	; (80194a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 80193e2:	6832      	ldr	r2, [r6, #0]
 80193e4:	b92a      	cbnz	r2, 80193f2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 80193e6:	4b31      	ldr	r3, [pc, #196]	; (80194ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 80193e8:	21ae      	movs	r1, #174	; 0xae
 80193ea:	4a31      	ldr	r2, [pc, #196]	; (80194b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80193ec:	4831      	ldr	r0, [pc, #196]	; (80194b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 80193ee:	f010 fc7f 	bl	8029cf0 <__assert_func>
 80193f2:	4d31      	ldr	r5, [pc, #196]	; (80194b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 80193f4:	8829      	ldrh	r1, [r5, #0]
 80193f6:	4299      	cmp	r1, r3
 80193f8:	d803      	bhi.n	8019402 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 80193fa:	4b30      	ldr	r3, [pc, #192]	; (80194bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 80193fc:	21af      	movs	r1, #175	; 0xaf
 80193fe:	4a2c      	ldr	r2, [pc, #176]	; (80194b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019400:	e7f4      	b.n	80193ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8019402:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019406:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801940a:	4b2d      	ldr	r3, [pc, #180]	; (80194c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019412:	2a00      	cmp	r2, #0
 8019414:	d044      	beq.n	80194a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019416:	784b      	ldrb	r3, [r1, #1]
 8019418:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801941c:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019420:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019424:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8019428:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801942c:	4b25      	ldr	r3, [pc, #148]	; (80194c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801942e:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8019438:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801943c:	9207      	str	r2, [sp, #28]
 801943e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019440:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019444:	f88d a020 	strb.w	sl, [sp, #32]
 8019448:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801944c:	9009      	str	r0, [sp, #36]	; 0x24
 801944e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8019452:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8019456:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801945a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801945e:	b10a      	cbz	r2, 8019464 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8019460:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8019462:	b907      	cbnz	r7, 8019466 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8019464:	689f      	ldr	r7, [r3, #8]
 8019466:	f10d 0914 	add.w	r9, sp, #20
 801946a:	4621      	mov	r1, r4
 801946c:	4648      	mov	r0, r9
 801946e:	f002 ff7d 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019472:	6833      	ldr	r3, [r6, #0]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d0b6      	beq.n	80193e6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8019478:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801947a:	882b      	ldrh	r3, [r5, #0]
 801947c:	428b      	cmp	r3, r1
 801947e:	d9bc      	bls.n	80193fa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8019480:	4b11      	ldr	r3, [pc, #68]	; (80194c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8019482:	6818      	ldr	r0, [r3, #0]
 8019484:	f7ee ff7e 	bl	8008384 <_ZNK8touchgfx5Texts7getTextEt>
 8019488:	2300      	movs	r3, #0
 801948a:	9001      	str	r0, [sp, #4]
 801948c:	4638      	mov	r0, r7
 801948e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019492:	ab07      	add	r3, sp, #28
 8019494:	9300      	str	r3, [sp, #0]
 8019496:	4643      	mov	r3, r8
 8019498:	e899 0006 	ldmia.w	r9, {r1, r2}
 801949c:	f7ee ff03 	bl	80082a6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80194a0:	b00c      	add	sp, #48	; 0x30
 80194a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194a6:	bf00      	nop
 80194a8:	2400af94 	.word	0x2400af94
 80194ac:	0802d0c2 	.word	0x0802d0c2
 80194b0:	0802d1f8 	.word	0x0802d1f8
 80194b4:	0802d104 	.word	0x0802d104
 80194b8:	2400af98 	.word	0x2400af98
 80194bc:	0802d12d 	.word	0x0802d12d
 80194c0:	2400af9c 	.word	0x2400af9c
 80194c4:	2400af44 	.word	0x2400af44
 80194c8:	2400afa0 	.word	0x2400afa0

080194cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80194cc:	b40e      	push	{r1, r2, r3}
 80194ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194d6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80194d8:	b09c      	sub	sp, #112	; 0x70
 80194da:	4604      	mov	r4, r0
 80194dc:	4293      	cmp	r3, r2
 80194de:	d06b      	beq.n	80195b8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 80194e0:	aa26      	add	r2, sp, #152	; 0x98
 80194e2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80195cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 80194e6:	9202      	str	r2, [sp, #8]
 80194e8:	f8da 2000 	ldr.w	r2, [sl]
 80194ec:	b92a      	cbnz	r2, 80194fa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 80194ee:	4b33      	ldr	r3, [pc, #204]	; (80195bc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 80194f0:	21ae      	movs	r1, #174	; 0xae
 80194f2:	4a33      	ldr	r2, [pc, #204]	; (80195c0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 80194f4:	4833      	ldr	r0, [pc, #204]	; (80195c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 80194f6:	f010 fbfb 	bl	8029cf0 <__assert_func>
 80194fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80195d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 80194fe:	f8b8 1000 	ldrh.w	r1, [r8]
 8019502:	4299      	cmp	r1, r3
 8019504:	d803      	bhi.n	801950e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8019506:	4b30      	ldr	r3, [pc, #192]	; (80195c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8019508:	21af      	movs	r1, #175	; 0xaf
 801950a:	4a2d      	ldr	r2, [pc, #180]	; (80195c0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801950c:	e7f2      	b.n	80194f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801950e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80195d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 8019512:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019516:	f8d9 3000 	ldr.w	r3, [r9]
 801951a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801951e:	682b      	ldr	r3, [r5, #0]
 8019520:	4628      	mov	r0, r5
 8019522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019524:	4798      	blx	r3
 8019526:	4606      	mov	r6, r0
 8019528:	b207      	sxth	r7, r0
 801952a:	a803      	add	r0, sp, #12
 801952c:	f003 faed 	bl	801cb0a <_ZN8touchgfx12TextProviderC1Ev>
 8019530:	682b      	ldr	r3, [r5, #0]
 8019532:	4628      	mov	r0, r5
 8019534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019536:	4798      	blx	r3
 8019538:	682b      	ldr	r3, [r5, #0]
 801953a:	4683      	mov	fp, r0
 801953c:	4628      	mov	r0, r5
 801953e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019540:	4798      	blx	r3
 8019542:	465b      	mov	r3, fp
 8019544:	9000      	str	r0, [sp, #0]
 8019546:	a803      	add	r0, sp, #12
 8019548:	9925      	ldr	r1, [sp, #148]	; 0x94
 801954a:	9a02      	ldr	r2, [sp, #8]
 801954c:	f003 fb30 	bl	801cbb0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019550:	f8da 3000 	ldr.w	r3, [sl]
 8019554:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8019558:	2b00      	cmp	r3, #0
 801955a:	d0c8      	beq.n	80194ee <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 801955c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801955e:	f8b8 0000 	ldrh.w	r0, [r8]
 8019562:	4290      	cmp	r0, r2
 8019564:	d9cf      	bls.n	8019506 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8019566:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 801956a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801956e:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8019572:	786a      	ldrb	r2, [r5, #1]
 8019574:	8925      	ldrh	r5, [r4, #8]
 8019576:	f8d9 3000 	ldr.w	r3, [r9]
 801957a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801957e:	eba5 050c 	sub.w	r5, r5, ip
 8019582:	b22d      	sxth	r5, r5
 8019584:	9500      	str	r5, [sp, #0]
 8019586:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801958a:	a803      	add	r0, sp, #12
 801958c:	f001 fa2d 	bl	801a9ea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8019590:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8019594:	b203      	sxth	r3, r0
 8019596:	18b9      	adds	r1, r7, r2
 8019598:	2900      	cmp	r1, #0
 801959a:	dd0b      	ble.n	80195b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 801959c:	3b01      	subs	r3, #1
 801959e:	fb13 f302 	smulbb	r3, r3, r2
 80195a2:	fb16 3300 	smlabb	r3, r6, r0, r3
 80195a6:	b21f      	sxth	r7, r3
 80195a8:	4638      	mov	r0, r7
 80195aa:	b01c      	add	sp, #112	; 0x70
 80195ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195b0:	b003      	add	sp, #12
 80195b2:	4770      	bx	lr
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	dcf7      	bgt.n	80195a8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 80195b8:	2700      	movs	r7, #0
 80195ba:	e7f5      	b.n	80195a8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 80195bc:	0802d0c2 	.word	0x0802d0c2
 80195c0:	0802d1f8 	.word	0x0802d1f8
 80195c4:	0802d104 	.word	0x0802d104
 80195c8:	0802d12d 	.word	0x0802d12d
 80195cc:	2400af94 	.word	0x2400af94
 80195d0:	2400af98 	.word	0x2400af98
 80195d4:	2400af9c 	.word	0x2400af9c

080195d8 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80195d8:	b570      	push	{r4, r5, r6, lr}
 80195da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80195de:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80195e0:	4604      	mov	r4, r0
 80195e2:	4299      	cmp	r1, r3
 80195e4:	d01e      	beq.n	8019624 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 80195e6:	6803      	ldr	r3, [r0, #0]
 80195e8:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80195ea:	4b0f      	ldr	r3, [pc, #60]	; (8019628 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	b92b      	cbnz	r3, 80195fc <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 80195f0:	4b0e      	ldr	r3, [pc, #56]	; (801962c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 80195f2:	21ae      	movs	r1, #174	; 0xae
 80195f4:	4a0e      	ldr	r2, [pc, #56]	; (8019630 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80195f6:	480f      	ldr	r0, [pc, #60]	; (8019634 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 80195f8:	f010 fb7a 	bl	8029cf0 <__assert_func>
 80195fc:	4b0e      	ldr	r3, [pc, #56]	; (8019638 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 80195fe:	881b      	ldrh	r3, [r3, #0]
 8019600:	428b      	cmp	r3, r1
 8019602:	d803      	bhi.n	801960c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8019604:	4b0d      	ldr	r3, [pc, #52]	; (801963c <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8019606:	21af      	movs	r1, #175	; 0xaf
 8019608:	4a09      	ldr	r2, [pc, #36]	; (8019630 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801960a:	e7f4      	b.n	80195f6 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 801960c:	4b0c      	ldr	r3, [pc, #48]	; (8019640 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801960e:	6818      	ldr	r0, [r3, #0]
 8019610:	f7ee feb8 	bl	8008384 <_ZNK8touchgfx5Texts7getTextEt>
 8019614:	2300      	movs	r3, #0
 8019616:	4601      	mov	r1, r0
 8019618:	46ac      	mov	ip, r5
 801961a:	4620      	mov	r0, r4
 801961c:	461a      	mov	r2, r3
 801961e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019622:	4760      	bx	ip
 8019624:	2000      	movs	r0, #0
 8019626:	bd70      	pop	{r4, r5, r6, pc}
 8019628:	2400af94 	.word	0x2400af94
 801962c:	0802d0c2 	.word	0x0802d0c2
 8019630:	0802d1f8 	.word	0x0802d1f8
 8019634:	0802d104 	.word	0x0802d104
 8019638:	2400af98 	.word	0x2400af98
 801963c:	0802d12d 	.word	0x0802d12d
 8019640:	2400afa0 	.word	0x2400afa0

08019644 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8019644:	b538      	push	{r3, r4, r5, lr}
 8019646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801964a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801964c:	4604      	mov	r4, r0
 801964e:	429a      	cmp	r2, r3
 8019650:	d014      	beq.n	801967c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8019652:	6803      	ldr	r3, [r0, #0]
 8019654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019656:	4798      	blx	r3
 8019658:	6823      	ldr	r3, [r4, #0]
 801965a:	4605      	mov	r5, r0
 801965c:	4620      	mov	r0, r4
 801965e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019660:	4798      	blx	r3
 8019662:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019666:	b22d      	sxth	r5, r5
 8019668:	4601      	mov	r1, r0
 801966a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801966e:	bf06      	itte	eq
 8019670:	4602      	moveq	r2, r0
 8019672:	4629      	moveq	r1, r5
 8019674:	462a      	movne	r2, r5
 8019676:	4620      	mov	r0, r4
 8019678:	f7ec fc10 	bl	8005e9c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801967c:	bd38      	pop	{r3, r4, r5, pc}

0801967e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801967e:	888a      	ldrh	r2, [r1, #4]
 8019680:	8582      	strh	r2, [r0, #44]	; 0x2c
 8019682:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8019686:	b922      	cbnz	r2, 8019692 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8019688:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801968c:	b90b      	cbnz	r3, 8019692 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801968e:	f7ff bfd9 	b.w	8019644 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8019692:	4770      	bx	lr

08019694 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8019694:	2300      	movs	r3, #0
 8019696:	8083      	strh	r3, [r0, #4]
 8019698:	80c3      	strh	r3, [r0, #6]
 801969a:	8003      	strh	r3, [r0, #0]
 801969c:	8043      	strh	r3, [r0, #2]
 801969e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80196a2:	2bff      	cmp	r3, #255	; 0xff
 80196a4:	bf01      	itttt	eq
 80196a6:	890b      	ldrheq	r3, [r1, #8]
 80196a8:	8083      	strheq	r3, [r0, #4]
 80196aa:	894b      	ldrheq	r3, [r1, #10]
 80196ac:	80c3      	strheq	r3, [r0, #6]
 80196ae:	4770      	bx	lr

080196b0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80196b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80196b2:	4604      	mov	r4, r0
 80196b4:	466b      	mov	r3, sp
 80196b6:	6808      	ldr	r0, [r1, #0]
 80196b8:	6849      	ldr	r1, [r1, #4]
 80196ba:	c303      	stmia	r3!, {r0, r1}
 80196bc:	6823      	ldr	r3, [r4, #0]
 80196be:	4669      	mov	r1, sp
 80196c0:	4620      	mov	r0, r4
 80196c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196c4:	4798      	blx	r3
 80196c6:	4b08      	ldr	r3, [pc, #32]	; (80196e8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80196ce:	b10a      	cbz	r2, 80196d4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80196d0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80196d2:	b900      	cbnz	r0, 80196d6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80196d4:	6898      	ldr	r0, [r3, #8]
 80196d6:	6803      	ldr	r3, [r0, #0]
 80196d8:	4669      	mov	r1, sp
 80196da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80196dc:	699d      	ldr	r5, [r3, #24]
 80196de:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80196e2:	47a8      	blx	r5
 80196e4:	b003      	add	sp, #12
 80196e6:	bd30      	pop	{r4, r5, pc}
 80196e8:	2400af44 	.word	0x2400af44

080196ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 80196ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80196ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80196f2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80196f4:	4606      	mov	r6, r0
 80196f6:	4299      	cmp	r1, r3
 80196f8:	d02a      	beq.n	8019750 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 80196fa:	4b16      	ldr	r3, [pc, #88]	; (8019754 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	b92b      	cbnz	r3, 801970c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8019700:	4b15      	ldr	r3, [pc, #84]	; (8019758 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8019702:	21ae      	movs	r1, #174	; 0xae
 8019704:	4a15      	ldr	r2, [pc, #84]	; (801975c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8019706:	4816      	ldr	r0, [pc, #88]	; (8019760 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8019708:	f010 faf2 	bl	8029cf0 <__assert_func>
 801970c:	4a15      	ldr	r2, [pc, #84]	; (8019764 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801970e:	8812      	ldrh	r2, [r2, #0]
 8019710:	428a      	cmp	r2, r1
 8019712:	d803      	bhi.n	801971c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8019714:	4b14      	ldr	r3, [pc, #80]	; (8019768 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8019716:	21af      	movs	r1, #175	; 0xaf
 8019718:	4a10      	ldr	r2, [pc, #64]	; (801975c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801971a:	e7f4      	b.n	8019706 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 801971c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019720:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8019724:	4b11      	ldr	r3, [pc, #68]	; (801976c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8019726:	7854      	ldrb	r4, [r2, #1]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801972e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8019732:	682b      	ldr	r3, [r5, #0]
 8019734:	69df      	ldr	r7, [r3, #28]
 8019736:	4b0e      	ldr	r3, [pc, #56]	; (8019770 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8019738:	6818      	ldr	r0, [r3, #0]
 801973a:	f7ee fe23 	bl	8008384 <_ZNK8touchgfx5Texts7getTextEt>
 801973e:	2300      	movs	r3, #0
 8019740:	4602      	mov	r2, r0
 8019742:	4621      	mov	r1, r4
 8019744:	9300      	str	r3, [sp, #0]
 8019746:	4628      	mov	r0, r5
 8019748:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801974a:	47b8      	blx	r7
 801974c:	b003      	add	sp, #12
 801974e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019750:	2000      	movs	r0, #0
 8019752:	e7fb      	b.n	801974c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8019754:	2400af94 	.word	0x2400af94
 8019758:	0802d0c2 	.word	0x0802d0c2
 801975c:	0802d304 	.word	0x0802d304
 8019760:	0802d104 	.word	0x0802d104
 8019764:	2400af98 	.word	0x2400af98
 8019768:	0802d12d 	.word	0x0802d12d
 801976c:	2400af9c 	.word	0x2400af9c
 8019770:	2400afa0 	.word	0x2400afa0

08019774 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8019774:	b570      	push	{r4, r5, r6, lr}
 8019776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801977a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801977c:	4604      	mov	r4, r0
 801977e:	4299      	cmp	r1, r3
 8019780:	d01e      	beq.n	80197c0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8019782:	6803      	ldr	r3, [r0, #0]
 8019784:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8019786:	4b0f      	ldr	r3, [pc, #60]	; (80197c4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	b92b      	cbnz	r3, 8019798 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801978c:	4b0e      	ldr	r3, [pc, #56]	; (80197c8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801978e:	21ae      	movs	r1, #174	; 0xae
 8019790:	4a0e      	ldr	r2, [pc, #56]	; (80197cc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8019792:	480f      	ldr	r0, [pc, #60]	; (80197d0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8019794:	f010 faac 	bl	8029cf0 <__assert_func>
 8019798:	4b0e      	ldr	r3, [pc, #56]	; (80197d4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801979a:	881b      	ldrh	r3, [r3, #0]
 801979c:	428b      	cmp	r3, r1
 801979e:	d803      	bhi.n	80197a8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 80197a0:	4b0d      	ldr	r3, [pc, #52]	; (80197d8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 80197a2:	21af      	movs	r1, #175	; 0xaf
 80197a4:	4a09      	ldr	r2, [pc, #36]	; (80197cc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 80197a6:	e7f4      	b.n	8019792 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 80197a8:	4b0c      	ldr	r3, [pc, #48]	; (80197dc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 80197aa:	6818      	ldr	r0, [r3, #0]
 80197ac:	f7ee fdea 	bl	8008384 <_ZNK8touchgfx5Texts7getTextEt>
 80197b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80197b2:	4601      	mov	r1, r0
 80197b4:	46ac      	mov	ip, r5
 80197b6:	4620      	mov	r0, r4
 80197b8:	2300      	movs	r3, #0
 80197ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197be:	4760      	bx	ip
 80197c0:	2000      	movs	r0, #0
 80197c2:	bd70      	pop	{r4, r5, r6, pc}
 80197c4:	2400af94 	.word	0x2400af94
 80197c8:	0802d0c2 	.word	0x0802d0c2
 80197cc:	0802d304 	.word	0x0802d304
 80197d0:	0802d104 	.word	0x0802d104
 80197d4:	2400af98 	.word	0x2400af98
 80197d8:	0802d12d 	.word	0x0802d12d
 80197dc:	2400afa0 	.word	0x2400afa0

080197e0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 80197e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80197e8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80197ea:	b08c      	sub	sp, #48	; 0x30
 80197ec:	4604      	mov	r4, r0
 80197ee:	4293      	cmp	r3, r2
 80197f0:	460e      	mov	r6, r1
 80197f2:	d05d      	beq.n	80198b0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80197f4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80198d4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 80197f8:	f8d8 2000 	ldr.w	r2, [r8]
 80197fc:	b92a      	cbnz	r2, 801980a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 80197fe:	4b2e      	ldr	r3, [pc, #184]	; (80198b8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8019800:	21ae      	movs	r1, #174	; 0xae
 8019802:	4a2e      	ldr	r2, [pc, #184]	; (80198bc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8019804:	482e      	ldr	r0, [pc, #184]	; (80198c0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8019806:	f010 fa73 	bl	8029cf0 <__assert_func>
 801980a:	4f2e      	ldr	r7, [pc, #184]	; (80198c4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801980c:	8839      	ldrh	r1, [r7, #0]
 801980e:	4299      	cmp	r1, r3
 8019810:	d803      	bhi.n	801981a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8019812:	4b2d      	ldr	r3, [pc, #180]	; (80198c8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8019814:	21af      	movs	r1, #175	; 0xaf
 8019816:	4a29      	ldr	r2, [pc, #164]	; (80198bc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8019818:	e7f4      	b.n	8019804 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801981a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801981e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019822:	4b2a      	ldr	r3, [pc, #168]	; (80198cc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801982a:	2a00      	cmp	r2, #0
 801982c:	d040      	beq.n	80198b0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801982e:	784b      	ldrb	r3, [r1, #1]
 8019830:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8019834:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8019838:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801983c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8019840:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019844:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8019848:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801984c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8019850:	ad05      	add	r5, sp, #20
 8019852:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019854:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019858:	9207      	str	r2, [sp, #28]
 801985a:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801985e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8019862:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8019866:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801986a:	f88d a020 	strb.w	sl, [sp, #32]
 801986e:	9009      	str	r0, [sp, #36]	; 0x24
 8019870:	f7eb fdd6 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 8019874:	4621      	mov	r1, r4
 8019876:	4681      	mov	r9, r0
 8019878:	4628      	mov	r0, r5
 801987a:	f002 fd77 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801987e:	f8d8 3000 	ldr.w	r3, [r8]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d0bb      	beq.n	80197fe <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8019886:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019888:	883b      	ldrh	r3, [r7, #0]
 801988a:	428b      	cmp	r3, r1
 801988c:	d9c1      	bls.n	8019812 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801988e:	4b10      	ldr	r3, [pc, #64]	; (80198d0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8019890:	6818      	ldr	r0, [r3, #0]
 8019892:	f7ee fd77 	bl	8008384 <_ZNK8touchgfx5Texts7getTextEt>
 8019896:	2300      	movs	r3, #0
 8019898:	9303      	str	r3, [sp, #12]
 801989a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801989c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80198a0:	ab07      	add	r3, sp, #28
 80198a2:	4648      	mov	r0, r9
 80198a4:	9300      	str	r3, [sp, #0]
 80198a6:	4633      	mov	r3, r6
 80198a8:	e895 0006 	ldmia.w	r5, {r1, r2}
 80198ac:	f7ee fcfb 	bl	80082a6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80198b0:	b00c      	add	sp, #48	; 0x30
 80198b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198b6:	bf00      	nop
 80198b8:	0802d0c2 	.word	0x0802d0c2
 80198bc:	0802d304 	.word	0x0802d304
 80198c0:	0802d104 	.word	0x0802d104
 80198c4:	2400af98 	.word	0x2400af98
 80198c8:	0802d12d 	.word	0x0802d12d
 80198cc:	2400af9c 	.word	0x2400af9c
 80198d0:	2400afa0 	.word	0x2400afa0
 80198d4:	2400af94 	.word	0x2400af94

080198d8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 80198d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198dc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80198de:	4604      	mov	r4, r0
 80198e0:	460e      	mov	r6, r1
 80198e2:	b08e      	sub	sp, #56	; 0x38
 80198e4:	b218      	sxth	r0, r3
 80198e6:	8921      	ldrh	r1, [r4, #8]
 80198e8:	005b      	lsls	r3, r3, #1
 80198ea:	8962      	ldrh	r2, [r4, #10]
 80198ec:	f8ad 0000 	strh.w	r0, [sp]
 80198f0:	b29b      	uxth	r3, r3
 80198f2:	f8ad 0002 	strh.w	r0, [sp, #2]
 80198f6:	1ac9      	subs	r1, r1, r3
 80198f8:	1ad3      	subs	r3, r2, r3
 80198fa:	b209      	sxth	r1, r1
 80198fc:	b21b      	sxth	r3, r3
 80198fe:	2900      	cmp	r1, #0
 8019900:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019904:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019908:	dd5e      	ble.n	80199c8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801990a:	2b00      	cmp	r3, #0
 801990c:	dd5c      	ble.n	80199c8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801990e:	6830      	ldr	r0, [r6, #0]
 8019910:	ab02      	add	r3, sp, #8
 8019912:	6871      	ldr	r1, [r6, #4]
 8019914:	c303      	stmia	r3!, {r0, r1}
 8019916:	4669      	mov	r1, sp
 8019918:	a802      	add	r0, sp, #8
 801991a:	f7fd fdaf 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 801991e:	4620      	mov	r0, r4
 8019920:	a902      	add	r1, sp, #8
 8019922:	f7ff fec5 	bl	80196b0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8019926:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8019928:	2800      	cmp	r0, #0
 801992a:	d05f      	beq.n	80199ec <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801992c:	8963      	ldrh	r3, [r4, #10]
 801992e:	b202      	sxth	r2, r0
 8019930:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8019934:	2500      	movs	r5, #0
 8019936:	1a1f      	subs	r7, r3, r0
 8019938:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 801993c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019940:	b21b      	sxth	r3, r3
 8019942:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8019946:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801994a:	af04      	add	r7, sp, #16
 801994c:	1a09      	subs	r1, r1, r0
 801994e:	9506      	str	r5, [sp, #24]
 8019950:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019954:	f8ad 5020 	strh.w	r5, [sp, #32]
 8019958:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801995c:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8019960:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8019964:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019968:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801996c:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8019970:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8019974:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8019978:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801997c:	ab06      	add	r3, sp, #24
 801997e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019982:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019986:	e887 0003 	stmia.w	r7, {r0, r1}
 801998a:	4631      	mov	r1, r6
 801998c:	4638      	mov	r0, r7
 801998e:	f7fd fd75 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 8019992:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019996:	2b00      	cmp	r3, #0
 8019998:	dd12      	ble.n	80199c0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801999a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	dd0e      	ble.n	80199c0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80199a2:	6823      	ldr	r3, [r4, #0]
 80199a4:	4639      	mov	r1, r7
 80199a6:	4620      	mov	r0, r4
 80199a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199aa:	4798      	blx	r3
 80199ac:	f7eb fd38 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 80199b0:	6803      	ldr	r3, [r0, #0]
 80199b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80199b4:	4639      	mov	r1, r7
 80199b6:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80199ba:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80199be:	47c0      	blx	r8
 80199c0:	3501      	adds	r5, #1
 80199c2:	2d04      	cmp	r5, #4
 80199c4:	d1da      	bne.n	801997c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 80199c6:	e011      	b.n	80199ec <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80199c8:	6830      	ldr	r0, [r6, #0]
 80199ca:	ab06      	add	r3, sp, #24
 80199cc:	6871      	ldr	r1, [r6, #4]
 80199ce:	c303      	stmia	r3!, {r0, r1}
 80199d0:	6823      	ldr	r3, [r4, #0]
 80199d2:	a906      	add	r1, sp, #24
 80199d4:	4620      	mov	r0, r4
 80199d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199d8:	4798      	blx	r3
 80199da:	f7eb fd21 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 80199de:	6803      	ldr	r3, [r0, #0]
 80199e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80199e2:	a906      	add	r1, sp, #24
 80199e4:	699d      	ldr	r5, [r3, #24]
 80199e6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80199ea:	47a8      	blx	r5
 80199ec:	b00e      	add	sp, #56	; 0x38
 80199ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080199f2 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80199f2:	b510      	push	{r4, lr}
 80199f4:	6803      	ldr	r3, [r0, #0]
 80199f6:	460c      	mov	r4, r1
 80199f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199fa:	4798      	blx	r3
 80199fc:	1b03      	subs	r3, r0, r4
 80199fe:	4258      	negs	r0, r3
 8019a00:	4158      	adcs	r0, r3
 8019a02:	bd10      	pop	{r4, pc}

08019a04 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019a04:	4b01      	ldr	r3, [pc, #4]	; (8019a0c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8019a06:	6019      	str	r1, [r3, #0]
 8019a08:	4770      	bx	lr
 8019a0a:	bf00      	nop
 8019a0c:	2400af4c 	.word	0x2400af4c

08019a10 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a14:	4696      	mov	lr, r2
 8019a16:	b097      	sub	sp, #92	; 0x5c
 8019a18:	4605      	mov	r5, r0
 8019a1a:	4614      	mov	r4, r2
 8019a1c:	460e      	mov	r6, r1
 8019a1e:	461f      	mov	r7, r3
 8019a20:	f10d 0c1c 	add.w	ip, sp, #28
 8019a24:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8019a28:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8019a2c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8019a30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019a34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019a38:	f8de 3000 	ldr.w	r3, [lr]
 8019a3c:	f104 0e14 	add.w	lr, r4, #20
 8019a40:	f8cc 3000 	str.w	r3, [ip]
 8019a44:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019a48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019a4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019a50:	f8de 3000 	ldr.w	r3, [lr]
 8019a54:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8019a58:	f8cc 3000 	str.w	r3, [ip]
 8019a5c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019a60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019a64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019a68:	f8de 3000 	ldr.w	r3, [lr]
 8019a6c:	4631      	mov	r1, r6
 8019a6e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019a70:	4628      	mov	r0, r5
 8019a72:	f8cc 3000 	str.w	r3, [ip]
 8019a76:	682b      	ldr	r3, [r5, #0]
 8019a78:	9201      	str	r2, [sp, #4]
 8019a7a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019a7c:	f8cd 8008 	str.w	r8, [sp, #8]
 8019a80:	9200      	str	r2, [sp, #0]
 8019a82:	aa07      	add	r2, sp, #28
 8019a84:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019a88:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 8019a8c:	463b      	mov	r3, r7
 8019a8e:	47d8      	blx	fp
 8019a90:	46a6      	mov	lr, r4
 8019a92:	f10d 0c1c 	add.w	ip, sp, #28
 8019a96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019a9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019a9e:	f8de 3000 	ldr.w	r3, [lr]
 8019aa2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8019aa6:	343c      	adds	r4, #60	; 0x3c
 8019aa8:	f8cc 3000 	str.w	r3, [ip]
 8019aac:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019ab0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019ab4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019ab8:	f8de 3000 	ldr.w	r3, [lr]
 8019abc:	f8cc 3000 	str.w	r3, [ip]
 8019ac0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019ac6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019aca:	6823      	ldr	r3, [r4, #0]
 8019acc:	4631      	mov	r1, r6
 8019ace:	4628      	mov	r0, r5
 8019ad0:	f8cc 3000 	str.w	r3, [ip]
 8019ad4:	682b      	ldr	r3, [r5, #0]
 8019ad6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019ada:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019adc:	f8cd 8008 	str.w	r8, [sp, #8]
 8019ae0:	9201      	str	r2, [sp, #4]
 8019ae2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019ae4:	9200      	str	r2, [sp, #0]
 8019ae6:	aa07      	add	r2, sp, #28
 8019ae8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8019aea:	463b      	mov	r3, r7
 8019aec:	47a0      	blx	r4
 8019aee:	b017      	add	sp, #92	; 0x5c
 8019af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019af4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019af4:	2000      	movs	r0, #0
 8019af6:	4770      	bx	lr

08019af8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019afc:	b08d      	sub	sp, #52	; 0x34
 8019afe:	4688      	mov	r8, r1
 8019b00:	f8d3 c000 	ldr.w	ip, [r3]
 8019b04:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019b06:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8019b0a:	680f      	ldr	r7, [r1, #0]
 8019b0c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8019b10:	eba7 070c 	sub.w	r7, r7, ip
 8019b14:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8019b18:	edd3 6a07 	vldr	s13, [r3, #28]
 8019b1c:	42bc      	cmp	r4, r7
 8019b1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019b20:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8019b24:	bfa8      	it	ge
 8019b26:	463c      	movge	r4, r7
 8019b28:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019b2c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8019b30:	ee07 4a90 	vmov	s15, r4
 8019b34:	eb09 0e0c 	add.w	lr, r9, ip
 8019b38:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8019b3c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019b40:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019b44:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8019b48:	4571      	cmp	r1, lr
 8019b4a:	ee25 4a04 	vmul.f32	s8, s10, s8
 8019b4e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019b52:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019b56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019b5a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8019b5e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019b62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019b66:	ee36 0a84 	vadd.f32	s0, s13, s8
 8019b6a:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019b6e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019b72:	f340 808c 	ble.w	8019c8e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8019b76:	eba1 060e 	sub.w	r6, r1, lr
 8019b7a:	fb96 f5f4 	sdiv	r5, r6, r4
 8019b7e:	ee07 5a10 	vmov	s14, r5
 8019b82:	2d00      	cmp	r5, #0
 8019b84:	fb04 6615 	mls	r6, r4, r5, r6
 8019b88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019b8c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019b90:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019b94:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019b98:	dd12      	ble.n	8019bc0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8019b9a:	ee70 6a44 	vsub.f32	s13, s0, s8
 8019b9e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8019ba2:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019ba6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bae:	bf14      	ite	ne
 8019bb0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019bb4:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019bb8:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019bbc:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019bc0:	fb05 f204 	mul.w	r2, r5, r4
 8019bc4:	1abf      	subs	r7, r7, r2
 8019bc6:	4494      	add	ip, r2
 8019bc8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019bcc:	4411      	add	r1, r2
 8019bce:	eb09 020c 	add.w	r2, r9, ip
 8019bd2:	b209      	sxth	r1, r1
 8019bd4:	443a      	add	r2, r7
 8019bd6:	428a      	cmp	r2, r1
 8019bd8:	bfc4      	itt	gt
 8019bda:	eba1 0209 	subgt.w	r2, r1, r9
 8019bde:	eba2 070c 	subgt.w	r7, r2, ip
 8019be2:	2f00      	cmp	r7, #0
 8019be4:	dd50      	ble.n	8019c88 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8019be6:	fb97 f1f4 	sdiv	r1, r7, r4
 8019bea:	fb04 7211 	mls	r2, r4, r1, r7
 8019bee:	b90a      	cbnz	r2, 8019bf4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8019bf0:	3901      	subs	r1, #1
 8019bf2:	4622      	mov	r2, r4
 8019bf4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019bf8:	6840      	ldr	r0, [r0, #4]
 8019bfa:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8019bfe:	44b6      	add	lr, r6
 8019c00:	f8d0 a000 	ldr.w	sl, [r0]
 8019c04:	2900      	cmp	r1, #0
 8019c06:	bfcc      	ite	gt
 8019c08:	46a1      	movgt	r9, r4
 8019c0a:	4691      	movle	r9, r2
 8019c0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8019c0e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019c10:	fb04 e505 	mla	r5, r4, r5, lr
 8019c14:	eef0 6a42 	vmov.f32	s13, s4
 8019c18:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019c1c:	9008      	str	r0, [sp, #32]
 8019c1e:	eeb0 7a61 	vmov.f32	s14, s3
 8019c22:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019c24:	695b      	ldr	r3, [r3, #20]
 8019c26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019c2a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8019c2e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019c32:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019c34:	445b      	add	r3, fp
 8019c36:	9307      	str	r3, [sp, #28]
 8019c38:	ee16 3a90 	vmov	r3, s13
 8019c3c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019c40:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019c44:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019c48:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019c4c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019c50:	ee17 7a90 	vmov	r7, s15
 8019c54:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019c58:	fb97 f7f4 	sdiv	r7, r7, r4
 8019c5c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019c60:	ee17 ca90 	vmov	ip, s15
 8019c64:	fb9c fcf4 	sdiv	ip, ip, r4
 8019c68:	fb0c 3306 	mla	r3, ip, r6, r3
 8019c6c:	9302      	str	r3, [sp, #8]
 8019c6e:	ee17 3a10 	vmov	r3, s14
 8019c72:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019c76:	fb07 3706 	mla	r7, r7, r6, r3
 8019c7a:	eba9 0306 	sub.w	r3, r9, r6
 8019c7e:	e9cd 4700 	strd	r4, r7, [sp]
 8019c82:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019c86:	47a0      	blx	r4
 8019c88:	b00d      	add	sp, #52	; 0x34
 8019c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c8e:	2500      	movs	r5, #0
 8019c90:	462e      	mov	r6, r5
 8019c92:	e799      	b.n	8019bc8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019c94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c98:	b0db      	sub	sp, #364	; 0x16c
 8019c9a:	461d      	mov	r5, r3
 8019c9c:	4614      	mov	r4, r2
 8019c9e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8019ca2:	910f      	str	r1, [sp, #60]	; 0x3c
 8019ca4:	4629      	mov	r1, r5
 8019ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8019ca8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8019cac:	9009      	str	r0, [sp, #36]	; 0x24
 8019cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8019cb0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8019cb4:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8019cb8:	9310      	str	r3, [sp, #64]	; 0x40
 8019cba:	6803      	ldr	r3, [r0, #0]
 8019cbc:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8019cbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019cc2:	47b8      	blx	r7
 8019cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cc6:	6058      	str	r0, [r3, #4]
 8019cc8:	2800      	cmp	r0, #0
 8019cca:	f000 83a1 	beq.w	801a410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019cce:	682b      	ldr	r3, [r5, #0]
 8019cd0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8019cd4:	ed94 7a02 	vldr	s14, [r4, #8]
 8019cd8:	9314      	str	r3, [sp, #80]	; 0x50
 8019cda:	686b      	ldr	r3, [r5, #4]
 8019cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019ce0:	9315      	str	r3, [sp, #84]	; 0x54
 8019ce2:	4bc1      	ldr	r3, [pc, #772]	; (8019fe8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019ce4:	7819      	ldrb	r1, [r3, #0]
 8019ce6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019cea:	2900      	cmp	r1, #0
 8019cec:	bf16      	itet	ne
 8019cee:	4619      	movne	r1, r3
 8019cf0:	4611      	moveq	r1, r2
 8019cf2:	4613      	movne	r3, r2
 8019cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cf8:	9116      	str	r1, [sp, #88]	; 0x58
 8019cfa:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8019cfe:	f240 8387 	bls.w	801a410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019d02:	ed94 7a07 	vldr	s14, [r4, #28]
 8019d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d0e:	f240 837f 	bls.w	801a410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019d12:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8019d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d1e:	f240 8377 	bls.w	801a410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019d22:	6822      	ldr	r2, [r4, #0]
 8019d24:	4bb1      	ldr	r3, [pc, #708]	; (8019fec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8019d26:	429a      	cmp	r2, r3
 8019d28:	f2c0 8372 	blt.w	801a410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019d2c:	49b0      	ldr	r1, [pc, #704]	; (8019ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8019d2e:	6963      	ldr	r3, [r4, #20]
 8019d30:	428a      	cmp	r2, r1
 8019d32:	f300 836d 	bgt.w	801a410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019d36:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019d3a:	48ae      	ldr	r0, [pc, #696]	; (8019ff4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8019d3c:	33ff      	adds	r3, #255	; 0xff
 8019d3e:	4283      	cmp	r3, r0
 8019d40:	f200 8366 	bhi.w	801a410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019d44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019d46:	4dac      	ldr	r5, [pc, #688]	; (8019ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8019d48:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019d4c:	33ff      	adds	r3, #255	; 0xff
 8019d4e:	42ab      	cmp	r3, r5
 8019d50:	f200 835e 	bhi.w	801a410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019d54:	6862      	ldr	r2, [r4, #4]
 8019d56:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8019d5a:	33ff      	adds	r3, #255	; 0xff
 8019d5c:	4283      	cmp	r3, r0
 8019d5e:	f200 8357 	bhi.w	801a410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019d62:	69a1      	ldr	r1, [r4, #24]
 8019d64:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8019d68:	33ff      	adds	r3, #255	; 0xff
 8019d6a:	4283      	cmp	r3, r0
 8019d6c:	f200 8350 	bhi.w	801a410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019d70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019d72:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8019d76:	30ff      	adds	r0, #255	; 0xff
 8019d78:	42a8      	cmp	r0, r5
 8019d7a:	f200 8349 	bhi.w	801a410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019d7e:	428a      	cmp	r2, r1
 8019d80:	f280 8110 	bge.w	8019fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019d84:	429a      	cmp	r2, r3
 8019d86:	f300 8119 	bgt.w	8019fbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8019d8a:	4299      	cmp	r1, r3
 8019d8c:	f280 811d 	bge.w	8019fca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019d90:	2502      	movs	r5, #2
 8019d92:	2701      	movs	r7, #1
 8019d94:	46a9      	mov	r9, r5
 8019d96:	46b8      	mov	r8, r7
 8019d98:	f04f 0a00 	mov.w	sl, #0
 8019d9c:	4621      	mov	r1, r4
 8019d9e:	a849      	add	r0, sp, #292	; 0x124
 8019da0:	f003 fc82 	bl	801d6a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019da4:	4622      	mov	r2, r4
 8019da6:	4653      	mov	r3, sl
 8019da8:	a949      	add	r1, sp, #292	; 0x124
 8019daa:	f8cd 9000 	str.w	r9, [sp]
 8019dae:	a819      	add	r0, sp, #100	; 0x64
 8019db0:	f003 fdaa 	bl	801d908 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019db4:	4622      	mov	r2, r4
 8019db6:	4653      	mov	r3, sl
 8019db8:	a949      	add	r1, sp, #292	; 0x124
 8019dba:	f8cd 8000 	str.w	r8, [sp]
 8019dbe:	a829      	add	r0, sp, #164	; 0xa4
 8019dc0:	f003 fda2 	bl	801d908 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019dc4:	4643      	mov	r3, r8
 8019dc6:	4622      	mov	r2, r4
 8019dc8:	a949      	add	r1, sp, #292	; 0x124
 8019dca:	f8cd 9000 	str.w	r9, [sp]
 8019dce:	a839      	add	r0, sp, #228	; 0xe4
 8019dd0:	f003 fd9a 	bl	801d908 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019dd4:	42af      	cmp	r7, r5
 8019dd6:	af12      	add	r7, sp, #72	; 0x48
 8019dd8:	bfb7      	itett	lt
 8019dda:	2300      	movlt	r3, #0
 8019ddc:	2301      	movge	r3, #1
 8019dde:	ad29      	addlt	r5, sp, #164	; 0xa4
 8019de0:	ac19      	addlt	r4, sp, #100	; 0x64
 8019de2:	bfb1      	iteee	lt
 8019de4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8019de6:	ad19      	addge	r5, sp, #100	; 0x64
 8019de8:	930e      	strge	r3, [sp, #56]	; 0x38
 8019dea:	ac29      	addge	r4, sp, #164	; 0xa4
 8019dec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019dee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019df2:	e887 0003 	stmia.w	r7, {r0, r1}
 8019df6:	b928      	cbnz	r0, 8019e04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8019df8:	4b80      	ldr	r3, [pc, #512]	; (8019ffc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8019dfa:	6818      	ldr	r0, [r3, #0]
 8019dfc:	6803      	ldr	r3, [r0, #0]
 8019dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e00:	4798      	blx	r3
 8019e02:	6038      	str	r0, [r7, #0]
 8019e04:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019e06:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019e0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019e0e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019e10:	930c      	str	r3, [sp, #48]	; 0x30
 8019e12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019e14:	6963      	ldr	r3, [r4, #20]
 8019e16:	440b      	add	r3, r1
 8019e18:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019e1c:	4408      	add	r0, r1
 8019e1e:	b200      	sxth	r0, r0
 8019e20:	4283      	cmp	r3, r0
 8019e22:	900d      	str	r0, [sp, #52]	; 0x34
 8019e24:	f280 80dd 	bge.w	8019fe2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019e28:	428b      	cmp	r3, r1
 8019e2a:	da08      	bge.n	8019e3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019e2c:	2a00      	cmp	r2, #0
 8019e2e:	dd06      	ble.n	8019e3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019e30:	1acb      	subs	r3, r1, r3
 8019e32:	429a      	cmp	r2, r3
 8019e34:	f2c0 80e4 	blt.w	801a000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	f300 80e2 	bgt.w	801a002 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8019e3e:	6967      	ldr	r7, [r4, #20]
 8019e40:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019e44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019e46:	443b      	add	r3, r7
 8019e48:	461f      	mov	r7, r3
 8019e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e4c:	1bdf      	subs	r7, r3, r7
 8019e4e:	4297      	cmp	r7, r2
 8019e50:	bfa8      	it	ge
 8019e52:	4617      	movge	r7, r2
 8019e54:	2f00      	cmp	r7, #0
 8019e56:	f340 8166 	ble.w	801a126 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8019e5a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019e5c:	6829      	ldr	r1, [r5, #0]
 8019e5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019e62:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019e66:	4411      	add	r1, r2
 8019e68:	6820      	ldr	r0, [r4, #0]
 8019e6a:	4299      	cmp	r1, r3
 8019e6c:	dd1a      	ble.n	8019ea4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019e6e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019e72:	4402      	add	r2, r0
 8019e74:	440b      	add	r3, r1
 8019e76:	b21b      	sxth	r3, r3
 8019e78:	429a      	cmp	r2, r3
 8019e7a:	dc13      	bgt.n	8019ea4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019e7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019e7e:	a912      	add	r1, sp, #72	; 0x48
 8019e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	9206      	str	r2, [sp, #24]
 8019e88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019e8a:	9500      	str	r5, [sp, #0]
 8019e8c:	9205      	str	r2, [sp, #20]
 8019e8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e90:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019e94:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019e96:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019e9a:	aa49      	add	r2, sp, #292	; 0x124
 8019e9c:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8019ea0:	4623      	mov	r3, r4
 8019ea2:	47c8      	blx	r9
 8019ea4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019ea8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019eac:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019eb4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019eb8:	68a1      	ldr	r1, [r4, #8]
 8019eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019ebe:	ed94 6a08 	vldr	s12, [r4, #32]
 8019ec2:	edd4 6a07 	vldr	s13, [r4, #28]
 8019ec6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019eca:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019ece:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019ed2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019ed6:	edc4 6a07 	vstr	s13, [r4, #28]
 8019eda:	441a      	add	r2, r3
 8019edc:	6963      	ldr	r3, [r4, #20]
 8019ede:	3301      	adds	r3, #1
 8019ee0:	6022      	str	r2, [r4, #0]
 8019ee2:	6163      	str	r3, [r4, #20]
 8019ee4:	69a3      	ldr	r3, [r4, #24]
 8019ee6:	3b01      	subs	r3, #1
 8019ee8:	61a3      	str	r3, [r4, #24]
 8019eea:	6923      	ldr	r3, [r4, #16]
 8019eec:	440b      	add	r3, r1
 8019eee:	68e1      	ldr	r1, [r4, #12]
 8019ef0:	428b      	cmp	r3, r1
 8019ef2:	6123      	str	r3, [r4, #16]
 8019ef4:	db15      	blt.n	8019f22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8019ef6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019efa:	3201      	adds	r2, #1
 8019efc:	1a5b      	subs	r3, r3, r1
 8019efe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019f02:	6022      	str	r2, [r4, #0]
 8019f04:	6123      	str	r3, [r4, #16]
 8019f06:	edc4 6a07 	vstr	s13, [r4, #28]
 8019f0a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019f0e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019f12:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019f16:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f1e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019f22:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019f26:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019f2a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019f32:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019f36:	68a9      	ldr	r1, [r5, #8]
 8019f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019f3c:	ed95 6a08 	vldr	s12, [r5, #32]
 8019f40:	edd5 6a07 	vldr	s13, [r5, #28]
 8019f44:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019f48:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019f4c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019f50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019f54:	edc5 6a07 	vstr	s13, [r5, #28]
 8019f58:	441a      	add	r2, r3
 8019f5a:	696b      	ldr	r3, [r5, #20]
 8019f5c:	3301      	adds	r3, #1
 8019f5e:	602a      	str	r2, [r5, #0]
 8019f60:	616b      	str	r3, [r5, #20]
 8019f62:	69ab      	ldr	r3, [r5, #24]
 8019f64:	3b01      	subs	r3, #1
 8019f66:	61ab      	str	r3, [r5, #24]
 8019f68:	692b      	ldr	r3, [r5, #16]
 8019f6a:	440b      	add	r3, r1
 8019f6c:	68e9      	ldr	r1, [r5, #12]
 8019f6e:	428b      	cmp	r3, r1
 8019f70:	612b      	str	r3, [r5, #16]
 8019f72:	db15      	blt.n	8019fa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019f74:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019f78:	3201      	adds	r2, #1
 8019f7a:	1a5b      	subs	r3, r3, r1
 8019f7c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019f80:	602a      	str	r2, [r5, #0]
 8019f82:	612b      	str	r3, [r5, #16]
 8019f84:	edc5 6a07 	vstr	s13, [r5, #28]
 8019f88:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019f8c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019f90:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019f94:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f9c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019fa0:	3f01      	subs	r7, #1
 8019fa2:	e757      	b.n	8019e54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019fa4:	4299      	cmp	r1, r3
 8019fa6:	dc13      	bgt.n	8019fd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019fa8:	429a      	cmp	r2, r3
 8019faa:	da14      	bge.n	8019fd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019fac:	2502      	movs	r5, #2
 8019fae:	2703      	movs	r7, #3
 8019fb0:	f04f 0800 	mov.w	r8, #0
 8019fb4:	46a9      	mov	r9, r5
 8019fb6:	f04f 0a01 	mov.w	sl, #1
 8019fba:	e6ef      	b.n	8019d9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019fbc:	2501      	movs	r5, #1
 8019fbe:	2700      	movs	r7, #0
 8019fc0:	46a9      	mov	r9, r5
 8019fc2:	46b8      	mov	r8, r7
 8019fc4:	f04f 0a02 	mov.w	sl, #2
 8019fc8:	e6e8      	b.n	8019d9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019fca:	2501      	movs	r5, #1
 8019fcc:	2702      	movs	r7, #2
 8019fce:	e6e1      	b.n	8019d94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019fd0:	2500      	movs	r5, #0
 8019fd2:	2701      	movs	r7, #1
 8019fd4:	e7f4      	b.n	8019fc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019fd6:	2702      	movs	r7, #2
 8019fd8:	2503      	movs	r5, #3
 8019fda:	f04f 0900 	mov.w	r9, #0
 8019fde:	46b8      	mov	r8, r7
 8019fe0:	e7e9      	b.n	8019fb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019fe2:	4613      	mov	r3, r2
 8019fe4:	e728      	b.n	8019e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019fe6:	bf00      	nop
 8019fe8:	2400af3c 	.word	0x2400af3c
 8019fec:	fffd8f01 	.word	0xfffd8f01
 8019ff0:	00027100 	.word	0x00027100
 8019ff4:	0004e1ff 	.word	0x0004e1ff
 8019ff8:	0004e1fe 	.word	0x0004e1fe
 8019ffc:	2400af44 	.word	0x2400af44
 801a000:	4613      	mov	r3, r2
 801a002:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a004:	469e      	mov	lr, r3
 801a006:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801a008:	469c      	mov	ip, r3
 801a00a:	9111      	str	r1, [sp, #68]	; 0x44
 801a00c:	f04f 0900 	mov.w	r9, #0
 801a010:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801a014:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801a018:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801a01c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801a020:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801a024:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801a028:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801a02c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801a030:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801a034:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801a038:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801a03c:	f1bc 0f00 	cmp.w	ip, #0
 801a040:	d147      	bne.n	801a0d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801a042:	eb03 0c07 	add.w	ip, r3, r7
 801a046:	1ad7      	subs	r7, r2, r3
 801a048:	f1b9 0f00 	cmp.w	r9, #0
 801a04c:	d009      	beq.n	801a062 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801a04e:	9029      	str	r0, [sp, #164]	; 0xa4
 801a050:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801a054:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801a058:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801a05c:	912d      	str	r1, [sp, #180]	; 0xb4
 801a05e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801a062:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a064:	f04f 0800 	mov.w	r8, #0
 801a068:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a06c:	9111      	str	r1, [sp, #68]	; 0x44
 801a06e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a072:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a076:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a07a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a07e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a082:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a086:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a08a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a08e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a092:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a096:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a09a:	f1be 0f00 	cmp.w	lr, #0
 801a09e:	d031      	beq.n	801a104 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a0a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a0a2:	4450      	add	r0, sl
 801a0a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a0a8:	4431      	add	r1, r6
 801a0aa:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a0ae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a0b2:	4549      	cmp	r1, r9
 801a0b4:	db08      	blt.n	801a0c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a0b6:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a0ba:	3001      	adds	r0, #1
 801a0bc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a0c0:	eba1 0109 	sub.w	r1, r1, r9
 801a0c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a0c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a0cc:	f04f 0801 	mov.w	r8, #1
 801a0d0:	e7e3      	b.n	801a09a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801a0d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a0d4:	4450      	add	r0, sl
 801a0d6:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a0da:	4431      	add	r1, r6
 801a0dc:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a0e0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a0e4:	4541      	cmp	r1, r8
 801a0e6:	db08      	blt.n	801a0fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801a0e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a0ec:	3001      	adds	r0, #1
 801a0ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a0f2:	eba1 0108 	sub.w	r1, r1, r8
 801a0f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a0fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a0fe:	f04f 0901 	mov.w	r9, #1
 801a102:	e79b      	b.n	801a03c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801a104:	449c      	add	ip, r3
 801a106:	1aff      	subs	r7, r7, r3
 801a108:	f1b8 0f00 	cmp.w	r8, #0
 801a10c:	d009      	beq.n	801a122 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801a10e:	9019      	str	r0, [sp, #100]	; 0x64
 801a110:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801a114:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801a118:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a11c:	911d      	str	r1, [sp, #116]	; 0x74
 801a11e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a122:	1ad2      	subs	r2, r2, r3
 801a124:	e68b      	b.n	8019e3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a128:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	f000 80d1 	beq.w	801a2d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801a130:	ad19      	add	r5, sp, #100	; 0x64
 801a132:	ac39      	add	r4, sp, #228	; 0xe4
 801a134:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a136:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a13a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a13e:	930c      	str	r3, [sp, #48]	; 0x30
 801a140:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a142:	6963      	ldr	r3, [r4, #20]
 801a144:	440b      	add	r3, r1
 801a146:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a14a:	4408      	add	r0, r1
 801a14c:	b200      	sxth	r0, r0
 801a14e:	4283      	cmp	r3, r0
 801a150:	900d      	str	r0, [sp, #52]	; 0x34
 801a152:	f280 80c1 	bge.w	801a2d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801a156:	428b      	cmp	r3, r1
 801a158:	da08      	bge.n	801a16c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a15a:	2a00      	cmp	r2, #0
 801a15c:	dd06      	ble.n	801a16c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a15e:	1acb      	subs	r3, r1, r3
 801a160:	429a      	cmp	r2, r3
 801a162:	f2c0 80bb 	blt.w	801a2dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801a166:	2b00      	cmp	r3, #0
 801a168:	f300 80b9 	bgt.w	801a2de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801a16c:	6967      	ldr	r7, [r4, #20]
 801a16e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a174:	443b      	add	r3, r7
 801a176:	461f      	mov	r7, r3
 801a178:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a17a:	1bdf      	subs	r7, r3, r7
 801a17c:	4297      	cmp	r7, r2
 801a17e:	bfa8      	it	ge
 801a180:	4617      	movge	r7, r2
 801a182:	2f00      	cmp	r7, #0
 801a184:	f340 813c 	ble.w	801a400 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801a188:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a18a:	6829      	ldr	r1, [r5, #0]
 801a18c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a190:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a194:	4411      	add	r1, r2
 801a196:	6820      	ldr	r0, [r4, #0]
 801a198:	4299      	cmp	r1, r3
 801a19a:	dd1a      	ble.n	801a1d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a19c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a1a0:	4402      	add	r2, r0
 801a1a2:	440b      	add	r3, r1
 801a1a4:	b21b      	sxth	r3, r3
 801a1a6:	429a      	cmp	r2, r3
 801a1a8:	dc13      	bgt.n	801a1d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a1aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a1ac:	a912      	add	r1, sp, #72	; 0x48
 801a1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	9206      	str	r2, [sp, #24]
 801a1b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a1b8:	9500      	str	r5, [sp, #0]
 801a1ba:	9205      	str	r2, [sp, #20]
 801a1bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a1be:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a1c2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a1c4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a1c8:	aa49      	add	r2, sp, #292	; 0x124
 801a1ca:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801a1ce:	4623      	mov	r3, r4
 801a1d0:	47c8      	blx	r9
 801a1d2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a1d6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a1da:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a1de:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a1e2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a1e6:	68a1      	ldr	r1, [r4, #8]
 801a1e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a1ec:	ed94 6a08 	vldr	s12, [r4, #32]
 801a1f0:	edd4 6a07 	vldr	s13, [r4, #28]
 801a1f4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a1f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a1fc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a200:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a204:	edc4 6a07 	vstr	s13, [r4, #28]
 801a208:	441a      	add	r2, r3
 801a20a:	6963      	ldr	r3, [r4, #20]
 801a20c:	3301      	adds	r3, #1
 801a20e:	6022      	str	r2, [r4, #0]
 801a210:	6163      	str	r3, [r4, #20]
 801a212:	69a3      	ldr	r3, [r4, #24]
 801a214:	3b01      	subs	r3, #1
 801a216:	61a3      	str	r3, [r4, #24]
 801a218:	6923      	ldr	r3, [r4, #16]
 801a21a:	440b      	add	r3, r1
 801a21c:	68e1      	ldr	r1, [r4, #12]
 801a21e:	428b      	cmp	r3, r1
 801a220:	6123      	str	r3, [r4, #16]
 801a222:	db15      	blt.n	801a250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801a224:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a228:	3201      	adds	r2, #1
 801a22a:	1a5b      	subs	r3, r3, r1
 801a22c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a230:	6022      	str	r2, [r4, #0]
 801a232:	6123      	str	r3, [r4, #16]
 801a234:	edc4 6a07 	vstr	s13, [r4, #28]
 801a238:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a23c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a240:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a244:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a248:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a24c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a250:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a254:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a258:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a25c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a260:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a264:	68a9      	ldr	r1, [r5, #8]
 801a266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a26a:	ed95 6a08 	vldr	s12, [r5, #32]
 801a26e:	edd5 6a07 	vldr	s13, [r5, #28]
 801a272:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a276:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a27a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a27e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a282:	edc5 6a07 	vstr	s13, [r5, #28]
 801a286:	441a      	add	r2, r3
 801a288:	696b      	ldr	r3, [r5, #20]
 801a28a:	3301      	adds	r3, #1
 801a28c:	602a      	str	r2, [r5, #0]
 801a28e:	616b      	str	r3, [r5, #20]
 801a290:	69ab      	ldr	r3, [r5, #24]
 801a292:	3b01      	subs	r3, #1
 801a294:	61ab      	str	r3, [r5, #24]
 801a296:	692b      	ldr	r3, [r5, #16]
 801a298:	440b      	add	r3, r1
 801a29a:	68e9      	ldr	r1, [r5, #12]
 801a29c:	428b      	cmp	r3, r1
 801a29e:	612b      	str	r3, [r5, #16]
 801a2a0:	db15      	blt.n	801a2ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801a2a2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a2a6:	3201      	adds	r2, #1
 801a2a8:	1a5b      	subs	r3, r3, r1
 801a2aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a2ae:	602a      	str	r2, [r5, #0]
 801a2b0:	612b      	str	r3, [r5, #16]
 801a2b2:	edc5 6a07 	vstr	s13, [r5, #28]
 801a2b6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a2ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a2be:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a2c2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a2c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a2ca:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a2ce:	3f01      	subs	r7, #1
 801a2d0:	e757      	b.n	801a182 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801a2d2:	ad39      	add	r5, sp, #228	; 0xe4
 801a2d4:	ac19      	add	r4, sp, #100	; 0x64
 801a2d6:	e72d      	b.n	801a134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801a2d8:	4613      	mov	r3, r2
 801a2da:	e744      	b.n	801a166 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801a2dc:	4613      	mov	r3, r2
 801a2de:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801a2e0:	469e      	mov	lr, r3
 801a2e2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801a2e6:	461f      	mov	r7, r3
 801a2e8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801a2ec:	f04f 0900 	mov.w	r9, #0
 801a2f0:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801a2f4:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801a2f8:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801a2fc:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801a300:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801a304:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801a306:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801a30a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801a30e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801a312:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801a316:	960e      	str	r6, [sp, #56]	; 0x38
 801a318:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801a31c:	2f00      	cmp	r7, #0
 801a31e:	d146      	bne.n	801a3ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801a320:	449c      	add	ip, r3
 801a322:	1ad7      	subs	r7, r2, r3
 801a324:	f1b9 0f00 	cmp.w	r9, #0
 801a328:	d009      	beq.n	801a33e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801a32a:	9039      	str	r0, [sp, #228]	; 0xe4
 801a32c:	913d      	str	r1, [sp, #244]	; 0xf4
 801a32e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801a332:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801a336:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801a33a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801a33e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a340:	f04f 0800 	mov.w	r8, #0
 801a344:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a348:	910e      	str	r1, [sp, #56]	; 0x38
 801a34a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a34e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a352:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a356:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a35a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a35e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a362:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a366:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a36a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a36e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a372:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a376:	f1be 0f00 	cmp.w	lr, #0
 801a37a:	d030      	beq.n	801a3de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801a37c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801a37e:	4450      	add	r0, sl
 801a380:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a384:	4431      	add	r1, r6
 801a386:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a38a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a38e:	4549      	cmp	r1, r9
 801a390:	db08      	blt.n	801a3a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801a392:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a396:	3001      	adds	r0, #1
 801a398:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a39c:	eba1 0109 	sub.w	r1, r1, r9
 801a3a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a3a4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a3a8:	f04f 0801 	mov.w	r8, #1
 801a3ac:	e7e3      	b.n	801a376 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801a3ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801a3b0:	4450      	add	r0, sl
 801a3b2:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a3b6:	4431      	add	r1, r6
 801a3b8:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a3bc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a3c0:	4541      	cmp	r1, r8
 801a3c2:	db08      	blt.n	801a3d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801a3c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a3c8:	3001      	adds	r0, #1
 801a3ca:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a3ce:	eba1 0108 	sub.w	r1, r1, r8
 801a3d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a3d6:	3f01      	subs	r7, #1
 801a3d8:	f04f 0901 	mov.w	r9, #1
 801a3dc:	e79e      	b.n	801a31c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801a3de:	449c      	add	ip, r3
 801a3e0:	1aff      	subs	r7, r7, r3
 801a3e2:	f1b8 0f00 	cmp.w	r8, #0
 801a3e6:	d009      	beq.n	801a3fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801a3e8:	9019      	str	r0, [sp, #100]	; 0x64
 801a3ea:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801a3ee:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801a3f2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a3f6:	911d      	str	r1, [sp, #116]	; 0x74
 801a3f8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a3fc:	1ad2      	subs	r2, r2, r3
 801a3fe:	e6b5      	b.n	801a16c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	b923      	cbnz	r3, 801a410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a406:	4b04      	ldr	r3, [pc, #16]	; (801a418 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801a408:	6818      	ldr	r0, [r3, #0]
 801a40a:	6803      	ldr	r3, [r0, #0]
 801a40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a40e:	4798      	blx	r3
 801a410:	b05b      	add	sp, #364	; 0x16c
 801a412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a416:	bf00      	nop
 801a418:	2400af44 	.word	0x2400af44

0801a41c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801a41c:	b570      	push	{r4, r5, r6, lr}
 801a41e:	4604      	mov	r4, r0
 801a420:	2500      	movs	r5, #0
 801a422:	9804      	ldr	r0, [sp, #16]
 801a424:	7223      	strb	r3, [r4, #8]
 801a426:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a42a:	8025      	strh	r5, [r4, #0]
 801a42c:	6061      	str	r1, [r4, #4]
 801a42e:	7263      	strb	r3, [r4, #9]
 801a430:	60e0      	str	r0, [r4, #12]
 801a432:	8222      	strh	r2, [r4, #16]
 801a434:	8265      	strh	r5, [r4, #18]
 801a436:	82a5      	strh	r5, [r4, #20]
 801a438:	82e5      	strh	r5, [r4, #22]
 801a43a:	8325      	strh	r5, [r4, #24]
 801a43c:	8365      	strh	r5, [r4, #26]
 801a43e:	83a5      	strh	r5, [r4, #28]
 801a440:	77a5      	strb	r5, [r4, #30]
 801a442:	6803      	ldr	r3, [r0, #0]
 801a444:	695b      	ldr	r3, [r3, #20]
 801a446:	4798      	blx	r3
 801a448:	4606      	mov	r6, r0
 801a44a:	b1f8      	cbz	r0, 801a48c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801a44c:	68e0      	ldr	r0, [r4, #12]
 801a44e:	4631      	mov	r1, r6
 801a450:	6803      	ldr	r3, [r0, #0]
 801a452:	68db      	ldr	r3, [r3, #12]
 801a454:	4798      	blx	r3
 801a456:	7b43      	ldrb	r3, [r0, #13]
 801a458:	7a82      	ldrb	r2, [r0, #10]
 801a45a:	4605      	mov	r5, r0
 801a45c:	005b      	lsls	r3, r3, #1
 801a45e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a462:	4313      	orrs	r3, r2
 801a464:	83a3      	strh	r3, [r4, #28]
 801a466:	7a63      	ldrb	r3, [r4, #9]
 801a468:	2b04      	cmp	r3, #4
 801a46a:	d10f      	bne.n	801a48c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801a46c:	68e0      	ldr	r0, [r4, #12]
 801a46e:	462a      	mov	r2, r5
 801a470:	4631      	mov	r1, r6
 801a472:	6803      	ldr	r3, [r0, #0]
 801a474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a476:	4798      	blx	r3
 801a478:	7b6b      	ldrb	r3, [r5, #13]
 801a47a:	005b      	lsls	r3, r3, #1
 801a47c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a480:	7aab      	ldrb	r3, [r5, #10]
 801a482:	4313      	orrs	r3, r2
 801a484:	4418      	add	r0, r3
 801a486:	8ba3      	ldrh	r3, [r4, #28]
 801a488:	4418      	add	r0, r3
 801a48a:	83a0      	strh	r0, [r4, #28]
 801a48c:	4620      	mov	r0, r4
 801a48e:	bd70      	pop	{r4, r5, r6, pc}

0801a490 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a494:	2400      	movs	r4, #0
 801a496:	b085      	sub	sp, #20
 801a498:	4681      	mov	r9, r0
 801a49a:	4688      	mov	r8, r1
 801a49c:	4692      	mov	sl, r2
 801a49e:	469b      	mov	fp, r3
 801a4a0:	4627      	mov	r7, r4
 801a4a2:	4625      	mov	r5, r4
 801a4a4:	4626      	mov	r6, r4
 801a4a6:	4554      	cmp	r4, sl
 801a4a8:	da2a      	bge.n	801a500 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a4aa:	2300      	movs	r3, #0
 801a4ac:	9303      	str	r3, [sp, #12]
 801a4ae:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a4b2:	429d      	cmp	r5, r3
 801a4b4:	d004      	beq.n	801a4c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801a4b6:	f242 030b 	movw	r3, #8203	; 0x200b
 801a4ba:	429d      	cmp	r5, r3
 801a4bc:	bf18      	it	ne
 801a4be:	462f      	movne	r7, r5
 801a4c0:	ab03      	add	r3, sp, #12
 801a4c2:	4642      	mov	r2, r8
 801a4c4:	4659      	mov	r1, fp
 801a4c6:	4648      	mov	r0, r9
 801a4c8:	f002 fe72 	bl	801d1b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a4cc:	4605      	mov	r5, r0
 801a4ce:	b1b8      	cbz	r0, 801a500 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a4d0:	280a      	cmp	r0, #10
 801a4d2:	d015      	beq.n	801a500 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a4d4:	9a03      	ldr	r2, [sp, #12]
 801a4d6:	b18a      	cbz	r2, 801a4fc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801a4d8:	7b50      	ldrb	r0, [r2, #13]
 801a4da:	4639      	mov	r1, r7
 801a4dc:	7a93      	ldrb	r3, [r2, #10]
 801a4de:	0040      	lsls	r0, r0, #1
 801a4e0:	8895      	ldrh	r5, [r2, #4]
 801a4e2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a4e6:	4303      	orrs	r3, r0
 801a4e8:	4640      	mov	r0, r8
 801a4ea:	9301      	str	r3, [sp, #4]
 801a4ec:	f8d8 3000 	ldr.w	r3, [r8]
 801a4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4f2:	4798      	blx	r3
 801a4f4:	9b01      	ldr	r3, [sp, #4]
 801a4f6:	4418      	add	r0, r3
 801a4f8:	4406      	add	r6, r0
 801a4fa:	b2b6      	uxth	r6, r6
 801a4fc:	3401      	adds	r4, #1
 801a4fe:	e7d2      	b.n	801a4a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801a500:	4630      	mov	r0, r6
 801a502:	b005      	add	sp, #20
 801a504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a508 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a508:	2a02      	cmp	r2, #2
 801a50a:	b530      	push	{r4, r5, lr}
 801a50c:	d011      	beq.n	801a532 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a50e:	2a03      	cmp	r2, #3
 801a510:	d01c      	beq.n	801a54c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a512:	2a01      	cmp	r2, #1
 801a514:	d10c      	bne.n	801a530 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a516:	888b      	ldrh	r3, [r1, #4]
 801a518:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a51c:	8801      	ldrh	r1, [r0, #0]
 801a51e:	1a9b      	subs	r3, r3, r2
 801a520:	8844      	ldrh	r4, [r0, #2]
 801a522:	1a5b      	subs	r3, r3, r1
 801a524:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a528:	8004      	strh	r4, [r0, #0]
 801a52a:	8043      	strh	r3, [r0, #2]
 801a52c:	8081      	strh	r1, [r0, #4]
 801a52e:	80c2      	strh	r2, [r0, #6]
 801a530:	bd30      	pop	{r4, r5, pc}
 801a532:	88cb      	ldrh	r3, [r1, #6]
 801a534:	88c2      	ldrh	r2, [r0, #6]
 801a536:	1a9b      	subs	r3, r3, r2
 801a538:	8842      	ldrh	r2, [r0, #2]
 801a53a:	1a9b      	subs	r3, r3, r2
 801a53c:	888a      	ldrh	r2, [r1, #4]
 801a53e:	8881      	ldrh	r1, [r0, #4]
 801a540:	8043      	strh	r3, [r0, #2]
 801a542:	1a52      	subs	r2, r2, r1
 801a544:	8801      	ldrh	r1, [r0, #0]
 801a546:	1a52      	subs	r2, r2, r1
 801a548:	8002      	strh	r2, [r0, #0]
 801a54a:	e7f1      	b.n	801a530 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a54c:	88cb      	ldrh	r3, [r1, #6]
 801a54e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a552:	8841      	ldrh	r1, [r0, #2]
 801a554:	1a9b      	subs	r3, r3, r2
 801a556:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a55a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a55e:	1a5b      	subs	r3, r3, r1
 801a560:	8045      	strh	r5, [r0, #2]
 801a562:	8082      	strh	r2, [r0, #4]
 801a564:	8003      	strh	r3, [r0, #0]
 801a566:	80c4      	strh	r4, [r0, #6]
 801a568:	e7e2      	b.n	801a530 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a56a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a56a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a56e:	b09f      	sub	sp, #124	; 0x7c
 801a570:	9116      	str	r1, [sp, #88]	; 0x58
 801a572:	9317      	str	r3, [sp, #92]	; 0x5c
 801a574:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a576:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a578:	8809      	ldrh	r1, [r1, #0]
 801a57a:	889b      	ldrh	r3, [r3, #4]
 801a57c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801a580:	440b      	add	r3, r1
 801a582:	9212      	str	r2, [sp, #72]	; 0x48
 801a584:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801a588:	b21b      	sxth	r3, r3
 801a58a:	9011      	str	r0, [sp, #68]	; 0x44
 801a58c:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801a590:	9310      	str	r3, [sp, #64]	; 0x40
 801a592:	f8d8 3000 	ldr.w	r3, [r8]
 801a596:	7a59      	ldrb	r1, [r3, #9]
 801a598:	7a1b      	ldrb	r3, [r3, #8]
 801a59a:	9114      	str	r1, [sp, #80]	; 0x50
 801a59c:	9315      	str	r3, [sp, #84]	; 0x54
 801a59e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a5a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a5a4:	2a00      	cmp	r2, #0
 801a5a6:	d067      	beq.n	801a678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801a5a8:	f898 3010 	ldrb.w	r3, [r8, #16]
 801a5ac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a5ae:	2b04      	cmp	r3, #4
 801a5b0:	bf14      	ite	ne
 801a5b2:	2301      	movne	r3, #1
 801a5b4:	2302      	moveq	r3, #2
 801a5b6:	4413      	add	r3, r2
 801a5b8:	f04f 0900 	mov.w	r9, #0
 801a5bc:	930f      	str	r3, [sp, #60]	; 0x3c
 801a5be:	464c      	mov	r4, r9
 801a5c0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801a5c4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801a5c8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801a5cc:	4293      	cmp	r3, r2
 801a5ce:	f280 808c 	bge.w	801a6ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a5d2:	2300      	movs	r3, #0
 801a5d4:	931c      	str	r3, [sp, #112]	; 0x70
 801a5d6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a5da:	429c      	cmp	r4, r3
 801a5dc:	d006      	beq.n	801a5ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801a5de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a5e0:	f242 020b 	movw	r2, #8203	; 0x200b
 801a5e4:	4294      	cmp	r4, r2
 801a5e6:	bf18      	it	ne
 801a5e8:	4623      	movne	r3, r4
 801a5ea:	930d      	str	r3, [sp, #52]	; 0x34
 801a5ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a5ee:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801a5f0:	f8d8 2000 	ldr.w	r2, [r8]
 801a5f4:	428b      	cmp	r3, r1
 801a5f6:	db41      	blt.n	801a67c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801a5f8:	6813      	ldr	r3, [r2, #0]
 801a5fa:	4610      	mov	r0, r2
 801a5fc:	695b      	ldr	r3, [r3, #20]
 801a5fe:	4798      	blx	r3
 801a600:	4604      	mov	r4, r0
 801a602:	f8d8 0000 	ldr.w	r0, [r8]
 801a606:	aa1d      	add	r2, sp, #116	; 0x74
 801a608:	4621      	mov	r1, r4
 801a60a:	6803      	ldr	r3, [r0, #0]
 801a60c:	689e      	ldr	r6, [r3, #8]
 801a60e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a612:	47b0      	blx	r6
 801a614:	901c      	str	r0, [sp, #112]	; 0x70
 801a616:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a61a:	429c      	cmp	r4, r3
 801a61c:	f000 80ea 	beq.w	801a7f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a620:	f242 030b 	movw	r3, #8203	; 0x200b
 801a624:	429c      	cmp	r4, r3
 801a626:	f000 80e5 	beq.w	801a7f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a62a:	2c00      	cmp	r4, #0
 801a62c:	f000 80f7 	beq.w	801a81e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a630:	2c0a      	cmp	r4, #10
 801a632:	d060      	beq.n	801a6f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a634:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a636:	b36a      	cbz	r2, 801a694 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801a638:	8894      	ldrh	r4, [r2, #4]
 801a63a:	f1bb 0f00 	cmp.w	fp, #0
 801a63e:	d03b      	beq.n	801a6b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801a640:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a644:	f1bb 0f01 	cmp.w	fp, #1
 801a648:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a64c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801a650:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a654:	ea49 0903 	orr.w	r9, r9, r3
 801a658:	d134      	bne.n	801a6c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801a65a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a65c:	eba5 0509 	sub.w	r5, r5, r9
 801a660:	2b00      	cmp	r3, #0
 801a662:	d14f      	bne.n	801a704 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a666:	eb09 0305 	add.w	r3, r9, r5
 801a66a:	4413      	add	r3, r2
 801a66c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a66e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a672:	4293      	cmp	r3, r2
 801a674:	da51      	bge.n	801a71a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801a676:	e038      	b.n	801a6ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a678:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a67a:	e79d      	b.n	801a5b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801a67c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a680:	4659      	mov	r1, fp
 801a682:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a684:	9301      	str	r3, [sp, #4]
 801a686:	ab1d      	add	r3, sp, #116	; 0x74
 801a688:	9300      	str	r3, [sp, #0]
 801a68a:	ab1c      	add	r3, sp, #112	; 0x70
 801a68c:	f002 fde8 	bl	801d260 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a690:	4604      	mov	r4, r0
 801a692:	e7c0      	b.n	801a616 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801a694:	f8d8 0000 	ldr.w	r0, [r8]
 801a698:	6803      	ldr	r3, [r0, #0]
 801a69a:	691b      	ldr	r3, [r3, #16]
 801a69c:	4798      	blx	r3
 801a69e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a6a2:	4298      	cmp	r0, r3
 801a6a4:	f000 80a6 	beq.w	801a7f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a6a8:	f242 030b 	movw	r3, #8203	; 0x200b
 801a6ac:	4298      	cmp	r0, r3
 801a6ae:	f000 80a1 	beq.w	801a7f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a6b2:	f1bb 0f00 	cmp.w	fp, #0
 801a6b6:	d100      	bne.n	801a6ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801a6b8:	444d      	add	r5, r9
 801a6ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a6bc:	2a00      	cmp	r2, #0
 801a6be:	d1bf      	bne.n	801a640 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801a6c0:	4691      	mov	r9, r2
 801a6c2:	e097      	b.n	801a7f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a6c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	f000 80ab 	beq.w	801a822 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801a6cc:	f1bb 0f00 	cmp.w	fp, #0
 801a6d0:	d118      	bne.n	801a704 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a6d2:	f8d8 0000 	ldr.w	r0, [r8]
 801a6d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a6d8:	6803      	ldr	r3, [r0, #0]
 801a6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a6dc:	4798      	blx	r3
 801a6de:	4405      	add	r5, r0
 801a6e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a6e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a6e4:	1aeb      	subs	r3, r5, r3
 801a6e6:	4293      	cmp	r3, r2
 801a6e8:	dd17      	ble.n	801a71a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801a6ea:	2c00      	cmp	r4, #0
 801a6ec:	f000 8097 	beq.w	801a81e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a6f0:	2c0a      	cmp	r4, #10
 801a6f2:	f040 8085 	bne.w	801a800 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801a6f6:	240a      	movs	r4, #10
 801a6f8:	fab4 f084 	clz	r0, r4
 801a6fc:	0940      	lsrs	r0, r0, #5
 801a6fe:	b01f      	add	sp, #124	; 0x7c
 801a700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a704:	f8d8 0000 	ldr.w	r0, [r8]
 801a708:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a70a:	6803      	ldr	r3, [r0, #0]
 801a70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a70e:	4798      	blx	r3
 801a710:	f1bb 0f01 	cmp.w	fp, #1
 801a714:	eba5 0500 	sub.w	r5, r5, r0
 801a718:	d0a4      	beq.n	801a664 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801a71a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a71c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a71e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a722:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a726:	7b43      	ldrb	r3, [r0, #13]
 801a728:	4429      	add	r1, r5
 801a72a:	015b      	lsls	r3, r3, #5
 801a72c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a730:	7983      	ldrb	r3, [r0, #6]
 801a732:	4313      	orrs	r3, r2
 801a734:	440b      	add	r3, r1
 801a736:	42b3      	cmp	r3, r6
 801a738:	db5c      	blt.n	801a7f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a73a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a73c:	4299      	cmp	r1, r3
 801a73e:	da59      	bge.n	801a7f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a740:	f8d8 0000 	ldr.w	r0, [r8]
 801a744:	42ae      	cmp	r6, r5
 801a746:	6803      	ldr	r3, [r0, #0]
 801a748:	bfcc      	ite	gt
 801a74a:	1b76      	subgt	r6, r6, r5
 801a74c:	2600      	movle	r6, #0
 801a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a750:	bfc8      	it	gt
 801a752:	b2b6      	uxthgt	r6, r6
 801a754:	4798      	blx	r3
 801a756:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a758:	7b5a      	ldrb	r2, [r3, #13]
 801a75a:	00d1      	lsls	r1, r2, #3
 801a75c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801a760:	7a19      	ldrb	r1, [r3, #8]
 801a762:	4339      	orrs	r1, r7
 801a764:	0657      	lsls	r7, r2, #25
 801a766:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801a768:	bf48      	it	mi
 801a76a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801a76e:	4407      	add	r7, r0
 801a770:	bf48      	it	mi
 801a772:	b209      	sxthmi	r1, r1
 801a774:	1a7f      	subs	r7, r7, r1
 801a776:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a778:	b2bf      	uxth	r7, r7
 801a77a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a77e:	fa0f fa87 	sxth.w	sl, r7
 801a782:	4551      	cmp	r1, sl
 801a784:	dd3a      	ble.n	801a7fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801a786:	0112      	lsls	r2, r2, #4
 801a788:	79d8      	ldrb	r0, [r3, #7]
 801a78a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a78e:	4302      	orrs	r2, r0
 801a790:	4492      	add	sl, r2
 801a792:	4551      	cmp	r1, sl
 801a794:	dc2e      	bgt.n	801a7f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a796:	1bcf      	subs	r7, r1, r7
 801a798:	468a      	mov	sl, r1
 801a79a:	b2bf      	uxth	r7, r7
 801a79c:	9319      	str	r3, [sp, #100]	; 0x64
 801a79e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a7a0:	f8d8 0000 	ldr.w	r0, [r8]
 801a7a4:	681a      	ldr	r2, [r3, #0]
 801a7a6:	6801      	ldr	r1, [r0, #0]
 801a7a8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801a7aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a7ac:	9313      	str	r3, [sp, #76]	; 0x4c
 801a7ae:	9218      	str	r2, [sp, #96]	; 0x60
 801a7b0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801a7b2:	4788      	blx	r1
 801a7b4:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a7b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a7ba:	910b      	str	r1, [sp, #44]	; 0x2c
 801a7bc:	f898 100e 	ldrb.w	r1, [r8, #14]
 801a7c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a7c2:	910a      	str	r1, [sp, #40]	; 0x28
 801a7c4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801a7c8:	9109      	str	r1, [sp, #36]	; 0x24
 801a7ca:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a7ce:	9305      	str	r3, [sp, #20]
 801a7d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a7d2:	9206      	str	r2, [sp, #24]
 801a7d4:	e9cd a601 	strd	sl, r6, [sp, #4]
 801a7d8:	442e      	add	r6, r5
 801a7da:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801a7de:	b236      	sxth	r6, r6
 801a7e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a7e2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801a7e6:	9600      	str	r6, [sp, #0]
 801a7e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a7ea:	681a      	ldr	r2, [r3, #0]
 801a7ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a7ee:	685b      	ldr	r3, [r3, #4]
 801a7f0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a7f2:	47b0      	blx	r6
 801a7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a7f6:	3301      	adds	r3, #1
 801a7f8:	930e      	str	r3, [sp, #56]	; 0x38
 801a7fa:	e6e5      	b.n	801a5c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801a7fc:	2700      	movs	r7, #0
 801a7fe:	e7cd      	b.n	801a79c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801a800:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a802:	3501      	adds	r5, #1
 801a804:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a806:	429d      	cmp	r5, r3
 801a808:	f6bf af76 	bge.w	801a6f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a80c:	4659      	mov	r1, fp
 801a80e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a810:	f7ed fc98 	bl	8008144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a814:	4604      	mov	r4, r0
 801a816:	b110      	cbz	r0, 801a81e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a818:	280a      	cmp	r0, #10
 801a81a:	d1f2      	bne.n	801a802 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801a81c:	e76b      	b.n	801a6f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a81e:	2400      	movs	r4, #0
 801a820:	e76a      	b.n	801a6f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a822:	f1bb 0f00 	cmp.w	fp, #0
 801a826:	f43f af5b 	beq.w	801a6e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801a82a:	e776      	b.n	801a71a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801a82c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a82c:	b530      	push	{r4, r5, lr}
 801a82e:	8a44      	ldrh	r4, [r0, #18]
 801a830:	8ac5      	ldrh	r5, [r0, #22]
 801a832:	82c3      	strh	r3, [r0, #22]
 801a834:	442c      	add	r4, r5
 801a836:	1ae4      	subs	r4, r4, r3
 801a838:	8b03      	ldrh	r3, [r0, #24]
 801a83a:	8244      	strh	r4, [r0, #18]
 801a83c:	8a84      	ldrh	r4, [r0, #20]
 801a83e:	4422      	add	r2, r4
 801a840:	440c      	add	r4, r1
 801a842:	1a59      	subs	r1, r3, r1
 801a844:	8342      	strh	r2, [r0, #26]
 801a846:	8284      	strh	r4, [r0, #20]
 801a848:	8301      	strh	r1, [r0, #24]
 801a84a:	bd30      	pop	{r4, r5, pc}

0801a84c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801a84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a850:	7a43      	ldrb	r3, [r0, #9]
 801a852:	b087      	sub	sp, #28
 801a854:	4604      	mov	r4, r0
 801a856:	460f      	mov	r7, r1
 801a858:	1eda      	subs	r2, r3, #3
 801a85a:	b2d2      	uxtb	r2, r2
 801a85c:	2900      	cmp	r1, #0
 801a85e:	d036      	beq.n	801a8ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801a860:	2a01      	cmp	r2, #1
 801a862:	d932      	bls.n	801a8ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801a864:	1e58      	subs	r0, r3, #1
 801a866:	f1d0 0b00 	rsbs	fp, r0, #0
 801a86a:	eb4b 0b00 	adc.w	fp, fp, r0
 801a86e:	1e99      	subs	r1, r3, #2
 801a870:	424b      	negs	r3, r1
 801a872:	414b      	adcs	r3, r1
 801a874:	9303      	str	r3, [sp, #12]
 801a876:	2300      	movs	r3, #0
 801a878:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801a87c:	2500      	movs	r5, #0
 801a87e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801a882:	46a9      	mov	r9, r5
 801a884:	8265      	strh	r5, [r4, #18]
 801a886:	82a5      	strh	r5, [r4, #20]
 801a888:	2300      	movs	r3, #0
 801a88a:	9305      	str	r3, [sp, #20]
 801a88c:	8823      	ldrh	r3, [r4, #0]
 801a88e:	2b20      	cmp	r3, #32
 801a890:	d02b      	beq.n	801a8ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801a892:	eba3 020a 	sub.w	r2, r3, sl
 801a896:	4256      	negs	r6, r2
 801a898:	4156      	adcs	r6, r2
 801a89a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a89e:	4293      	cmp	r3, r2
 801a8a0:	d004      	beq.n	801a8ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a8a2:	4553      	cmp	r3, sl
 801a8a4:	bf16      	itet	ne
 801a8a6:	4699      	movne	r9, r3
 801a8a8:	2601      	moveq	r6, #1
 801a8aa:	2600      	movne	r6, #0
 801a8ac:	ab05      	add	r3, sp, #20
 801a8ae:	68e2      	ldr	r2, [r4, #12]
 801a8b0:	7a21      	ldrb	r1, [r4, #8]
 801a8b2:	6860      	ldr	r0, [r4, #4]
 801a8b4:	f002 fc7c 	bl	801d1b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a8b8:	8020      	strh	r0, [r4, #0]
 801a8ba:	b9c8      	cbnz	r0, 801a8f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801a8bc:	8b22      	ldrh	r2, [r4, #24]
 801a8be:	2300      	movs	r3, #0
 801a8c0:	4611      	mov	r1, r2
 801a8c2:	4620      	mov	r0, r4
 801a8c4:	f7ff ffb2 	bl	801a82c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a8c8:	e066      	b.n	801a998 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a8ca:	468b      	mov	fp, r1
 801a8cc:	e7cf      	b.n	801a86e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801a8ce:	3b01      	subs	r3, #1
 801a8d0:	2a01      	cmp	r2, #1
 801a8d2:	9103      	str	r1, [sp, #12]
 801a8d4:	468b      	mov	fp, r1
 801a8d6:	bf8c      	ite	hi
 801a8d8:	2200      	movhi	r2, #0
 801a8da:	2201      	movls	r2, #1
 801a8dc:	2b01      	cmp	r3, #1
 801a8de:	9202      	str	r2, [sp, #8]
 801a8e0:	bf8c      	ite	hi
 801a8e2:	2300      	movhi	r3, #0
 801a8e4:	2301      	movls	r3, #1
 801a8e6:	9301      	str	r3, [sp, #4]
 801a8e8:	e7c8      	b.n	801a87c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801a8ea:	4699      	mov	r9, r3
 801a8ec:	2601      	movs	r6, #1
 801a8ee:	e7dd      	b.n	801a8ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a8f0:	8ae3      	ldrh	r3, [r4, #22]
 801a8f2:	280a      	cmp	r0, #10
 801a8f4:	f103 0301 	add.w	r3, r3, #1
 801a8f8:	82e3      	strh	r3, [r4, #22]
 801a8fa:	d0df      	beq.n	801a8bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801a8fc:	9a05      	ldr	r2, [sp, #20]
 801a8fe:	bb42      	cbnz	r2, 801a952 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801a900:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a904:	4298      	cmp	r0, r3
 801a906:	d001      	beq.n	801a90c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a908:	4550      	cmp	r0, sl
 801a90a:	d1bd      	bne.n	801a888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a90c:	8823      	ldrh	r3, [r4, #0]
 801a90e:	8b21      	ldrh	r1, [r4, #24]
 801a910:	2b20      	cmp	r3, #32
 801a912:	d001      	beq.n	801a918 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801a914:	4553      	cmp	r3, sl
 801a916:	d131      	bne.n	801a97c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801a918:	2e00      	cmp	r6, #0
 801a91a:	bf0a      	itet	eq
 801a91c:	460d      	moveq	r5, r1
 801a91e:	4630      	movne	r0, r6
 801a920:	2001      	moveq	r0, #1
 801a922:	440a      	add	r2, r1
 801a924:	8aa3      	ldrh	r3, [r4, #20]
 801a926:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a92a:	b292      	uxth	r2, r2
 801a92c:	8322      	strh	r2, [r4, #24]
 801a92e:	4413      	add	r3, r2
 801a930:	2f00      	cmp	r7, #0
 801a932:	d03a      	beq.n	801a9aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801a934:	f1bb 0f00 	cmp.w	fp, #0
 801a938:	d102      	bne.n	801a940 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801a93a:	9903      	ldr	r1, [sp, #12]
 801a93c:	b301      	cbz	r1, 801a980 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a93e:	b1f8      	cbz	r0, 801a980 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a940:	8ba1      	ldrh	r1, [r4, #28]
 801a942:	4419      	add	r1, r3
 801a944:	458c      	cmp	ip, r1
 801a946:	da2a      	bge.n	801a99e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a948:	8a61      	ldrh	r1, [r4, #18]
 801a94a:	b341      	cbz	r1, 801a99e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a94c:	4563      	cmp	r3, ip
 801a94e:	dd9b      	ble.n	801a888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a950:	e01c      	b.n	801a98c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801a952:	8893      	ldrh	r3, [r2, #4]
 801a954:	4649      	mov	r1, r9
 801a956:	8023      	strh	r3, [r4, #0]
 801a958:	f892 800d 	ldrb.w	r8, [r2, #13]
 801a95c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801a960:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801a964:	f892 800a 	ldrb.w	r8, [r2, #10]
 801a968:	ea48 0800 	orr.w	r8, r8, r0
 801a96c:	68e0      	ldr	r0, [r4, #12]
 801a96e:	6803      	ldr	r3, [r0, #0]
 801a970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a972:	4798      	blx	r3
 801a974:	eb08 0200 	add.w	r2, r8, r0
 801a978:	b292      	uxth	r2, r2
 801a97a:	e7c7      	b.n	801a90c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a97c:	2000      	movs	r0, #0
 801a97e:	e7d0      	b.n	801a922 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801a980:	4563      	cmp	r3, ip
 801a982:	dd81      	ble.n	801a888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a984:	8a63      	ldrh	r3, [r4, #18]
 801a986:	2b00      	cmp	r3, #0
 801a988:	f43f af7e 	beq.w	801a888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a98c:	2301      	movs	r3, #1
 801a98e:	8ba2      	ldrh	r2, [r4, #28]
 801a990:	77a3      	strb	r3, [r4, #30]
 801a992:	8b63      	ldrh	r3, [r4, #26]
 801a994:	4413      	add	r3, r2
 801a996:	8363      	strh	r3, [r4, #26]
 801a998:	b007      	add	sp, #28
 801a99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a99e:	2300      	movs	r3, #0
 801a9a0:	4611      	mov	r1, r2
 801a9a2:	4620      	mov	r0, r4
 801a9a4:	f7ff ff42 	bl	801a82c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a9a8:	e76e      	b.n	801a888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a9aa:	4563      	cmp	r3, ip
 801a9ac:	dd14      	ble.n	801a9d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801a9ae:	9b02      	ldr	r3, [sp, #8]
 801a9b0:	b113      	cbz	r3, 801a9b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801a9b2:	2301      	movs	r3, #1
 801a9b4:	460a      	mov	r2, r1
 801a9b6:	e783      	b.n	801a8c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801a9b8:	9b01      	ldr	r3, [sp, #4]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	f43f af64 	beq.w	801a888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a9c0:	2800      	cmp	r0, #0
 801a9c2:	f47f af61 	bne.w	801a888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a9c6:	b116      	cbz	r6, 801a9ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801a9c8:	2301      	movs	r3, #1
 801a9ca:	462a      	mov	r2, r5
 801a9cc:	e779      	b.n	801a8c2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801a9ce:	8a63      	ldrh	r3, [r4, #18]
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	f43f af59 	beq.w	801a888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a9d6:	e7df      	b.n	801a998 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a9d8:	2800      	cmp	r0, #0
 801a9da:	f47f af55 	bne.w	801a888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a9de:	2e00      	cmp	r6, #0
 801a9e0:	f43f af52 	beq.w	801a888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a9e4:	2301      	movs	r3, #1
 801a9e6:	462a      	mov	r2, r5
 801a9e8:	e7db      	b.n	801a9a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801a9ea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a9ea:	b530      	push	{r4, r5, lr}
 801a9ec:	4605      	mov	r5, r0
 801a9ee:	b08b      	sub	sp, #44	; 0x2c
 801a9f0:	b191      	cbz	r1, 801aa18 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801a9f2:	2401      	movs	r4, #1
 801a9f4:	e9cd 3100 	strd	r3, r1, [sp]
 801a9f8:	4613      	mov	r3, r2
 801a9fa:	4601      	mov	r1, r0
 801a9fc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801aa00:	a802      	add	r0, sp, #8
 801aa02:	f7ff fd0b 	bl	801a41c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801aa06:	2100      	movs	r1, #0
 801aa08:	a802      	add	r0, sp, #8
 801aa0a:	f7ff ff1f 	bl	801a84c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801aa0e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801aa12:	b163      	cbz	r3, 801aa2e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801aa14:	3401      	adds	r4, #1
 801aa16:	e7f6      	b.n	801aa06 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801aa18:	2401      	movs	r4, #1
 801aa1a:	f002 fcc3 	bl	801d3a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aa1e:	280a      	cmp	r0, #10
 801aa20:	4628      	mov	r0, r5
 801aa22:	bf08      	it	eq
 801aa24:	3401      	addeq	r4, #1
 801aa26:	f002 fcbd 	bl	801d3a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aa2a:	2800      	cmp	r0, #0
 801aa2c:	d1f7      	bne.n	801aa1e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801aa2e:	b2a0      	uxth	r0, r4
 801aa30:	b00b      	add	sp, #44	; 0x2c
 801aa32:	bd30      	pop	{r4, r5, pc}

0801aa34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801aa34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa38:	b0e5      	sub	sp, #404	; 0x194
 801aa3a:	4689      	mov	r9, r1
 801aa3c:	461c      	mov	r4, r3
 801aa3e:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801aa42:	900a      	str	r0, [sp, #40]	; 0x28
 801aa44:	f1ba 0f00 	cmp.w	sl, #0
 801aa48:	f000 80b4 	beq.w	801abb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	f000 80b0 	beq.w	801abb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801aa54:	7ba3      	ldrb	r3, [r4, #14]
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	f000 80ac 	beq.w	801abb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801aa5c:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801aa60:	6810      	ldr	r0, [r2, #0]
 801aa62:	6851      	ldr	r1, [r2, #4]
 801aa64:	2500      	movs	r5, #0
 801aa66:	4643      	mov	r3, r8
 801aa68:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801aa6c:	950f      	str	r5, [sp, #60]	; 0x3c
 801aa6e:	af19      	add	r7, sp, #100	; 0x64
 801aa70:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801aa74:	79a2      	ldrb	r2, [r4, #6]
 801aa76:	c303      	stmia	r3!, {r0, r1}
 801aa78:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801aa7c:	a90f      	add	r1, sp, #60	; 0x3c
 801aa7e:	4640      	mov	r0, r8
 801aa80:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801aa84:	f7ff fd40 	bl	801a508 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801aa88:	a90f      	add	r1, sp, #60	; 0x3c
 801aa8a:	79a2      	ldrb	r2, [r4, #6]
 801aa8c:	4608      	mov	r0, r1
 801aa8e:	f7ff fd3b 	bl	801a508 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801aa92:	4638      	mov	r0, r7
 801aa94:	f002 f839 	bl	801cb0a <_ZN8touchgfx12TextProviderC1Ev>
 801aa98:	6820      	ldr	r0, [r4, #0]
 801aa9a:	6803      	ldr	r3, [r0, #0]
 801aa9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aa9e:	4798      	blx	r3
 801aaa0:	4606      	mov	r6, r0
 801aaa2:	6820      	ldr	r0, [r4, #0]
 801aaa4:	6803      	ldr	r3, [r0, #0]
 801aaa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aaa8:	4798      	blx	r3
 801aaaa:	4633      	mov	r3, r6
 801aaac:	9000      	str	r0, [sp, #0]
 801aaae:	4651      	mov	r1, sl
 801aab0:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801aab2:	4638      	mov	r0, r7
 801aab4:	f002 f87c 	bl	801cbb0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801aab8:	7923      	ldrb	r3, [r4, #4]
 801aaba:	6820      	ldr	r0, [r4, #0]
 801aabc:	9308      	str	r3, [sp, #32]
 801aabe:	6803      	ldr	r3, [r0, #0]
 801aac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aac2:	4798      	blx	r3
 801aac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aac8:	181e      	adds	r6, r3, r0
 801aaca:	42ae      	cmp	r6, r5
 801aacc:	dd06      	ble.n	801aadc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801aace:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801aad2:	4282      	cmp	r2, r0
 801aad4:	bfa4      	itt	ge
 801aad6:	189d      	addge	r5, r3, r2
 801aad8:	fb95 f5f6 	sdivge	r5, r5, r6
 801aadc:	a832      	add	r0, sp, #200	; 0xc8
 801aade:	f002 f814 	bl	801cb0a <_ZN8touchgfx12TextProviderC1Ev>
 801aae2:	7c23      	ldrb	r3, [r4, #16]
 801aae4:	b17b      	cbz	r3, 801ab06 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801aae6:	6820      	ldr	r0, [r4, #0]
 801aae8:	6803      	ldr	r3, [r0, #0]
 801aaea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aaec:	4798      	blx	r3
 801aaee:	4683      	mov	fp, r0
 801aaf0:	6820      	ldr	r0, [r4, #0]
 801aaf2:	6803      	ldr	r3, [r0, #0]
 801aaf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aaf6:	4798      	blx	r3
 801aaf8:	465b      	mov	r3, fp
 801aafa:	9000      	str	r0, [sp, #0]
 801aafc:	4651      	mov	r1, sl
 801aafe:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801ab00:	a832      	add	r0, sp, #200	; 0xc8
 801ab02:	f002 f855 	bl	801cbb0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ab06:	7be1      	ldrb	r1, [r4, #15]
 801ab08:	a811      	add	r0, sp, #68	; 0x44
 801ab0a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801ab0e:	7963      	ldrb	r3, [r4, #5]
 801ab10:	1a52      	subs	r2, r2, r1
 801ab12:	7c21      	ldrb	r1, [r4, #16]
 801ab14:	9101      	str	r1, [sp, #4]
 801ab16:	b292      	uxth	r2, r2
 801ab18:	6821      	ldr	r1, [r4, #0]
 801ab1a:	9100      	str	r1, [sp, #0]
 801ab1c:	a932      	add	r1, sp, #200	; 0xc8
 801ab1e:	f7ff fc7d 	bl	801a41c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801ab22:	7c23      	ldrb	r3, [r4, #16]
 801ab24:	b9bb      	cbnz	r3, 801ab56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801ab26:	fa1f fa86 	uxth.w	sl, r6
 801ab2a:	2d00      	cmp	r5, #0
 801ab2c:	dd45      	ble.n	801abba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801ab2e:	4638      	mov	r0, r7
 801ab30:	f002 fc38 	bl	801d3a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ab34:	2800      	cmp	r0, #0
 801ab36:	d03d      	beq.n	801abb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ab38:	280a      	cmp	r0, #10
 801ab3a:	d1f6      	bne.n	801ab2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801ab3c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ab40:	3d01      	subs	r5, #1
 801ab42:	4453      	add	r3, sl
 801ab44:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ab48:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801ab4c:	eba3 030a 	sub.w	r3, r3, sl
 801ab50:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ab54:	e7e9      	b.n	801ab2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801ab56:	0073      	lsls	r3, r6, #1
 801ab58:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801ab5c:	fa1f fa86 	uxth.w	sl, r6
 801ab60:	9309      	str	r3, [sp, #36]	; 0x24
 801ab62:	2d00      	cmp	r5, #0
 801ab64:	dd29      	ble.n	801abba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801ab66:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801ab6a:	a811      	add	r0, sp, #68	; 0x44
 801ab6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab6e:	428b      	cmp	r3, r1
 801ab70:	bfd4      	ite	le
 801ab72:	2100      	movle	r1, #0
 801ab74:	2101      	movgt	r1, #1
 801ab76:	f7ff fe69 	bl	801a84c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801ab7a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801ab7e:	3b01      	subs	r3, #1
 801ab80:	b29b      	uxth	r3, r3
 801ab82:	455b      	cmp	r3, fp
 801ab84:	930b      	str	r3, [sp, #44]	; 0x2c
 801ab86:	d005      	beq.n	801ab94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801ab88:	7961      	ldrb	r1, [r4, #5]
 801ab8a:	4638      	mov	r0, r7
 801ab8c:	f7ed fada 	bl	8008144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ab90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab92:	e7f4      	b.n	801ab7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801ab94:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ab98:	3d01      	subs	r5, #1
 801ab9a:	4453      	add	r3, sl
 801ab9c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801aba0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801aba4:	eba3 030a 	sub.w	r3, r3, sl
 801aba8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801abac:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d1d6      	bne.n	801ab62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801abb4:	b065      	add	sp, #404	; 0x194
 801abb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abba:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801abbe:	ad4b      	add	r5, sp, #300	; 0x12c
 801abc0:	f04f 0b00 	mov.w	fp, #0
 801abc4:	7c23      	ldrb	r3, [r4, #16]
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d067      	beq.n	801ac9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801abca:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801abce:	a811      	add	r0, sp, #68	; 0x44
 801abd0:	458a      	cmp	sl, r1
 801abd2:	bfd4      	ite	le
 801abd4:	2100      	movle	r1, #0
 801abd6:	2101      	movgt	r1, #1
 801abd8:	f7ff fe38 	bl	801a84c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801abdc:	9b08      	ldr	r3, [sp, #32]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d056      	beq.n	801ac90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801abe2:	7c23      	ldrb	r3, [r4, #16]
 801abe4:	2264      	movs	r2, #100	; 0x64
 801abe6:	4639      	mov	r1, r7
 801abe8:	4628      	mov	r0, r5
 801abea:	9309      	str	r3, [sp, #36]	; 0x24
 801abec:	f00f f8fe 	bl	8029dec <memcpy>
 801abf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d059      	beq.n	801acaa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801abf6:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801abfa:	7922      	ldrb	r2, [r4, #4]
 801abfc:	2a01      	cmp	r2, #1
 801abfe:	d13d      	bne.n	801ac7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801ac00:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801ac04:	1ac0      	subs	r0, r0, r3
 801ac06:	2302      	movs	r3, #2
 801ac08:	fb90 f0f3 	sdiv	r0, r0, r3
 801ac0c:	b200      	sxth	r0, r0
 801ac0e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801ac12:	4418      	add	r0, r3
 801ac14:	7c23      	ldrb	r3, [r4, #16]
 801ac16:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d03a      	beq.n	801ac94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801ac1e:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801ac22:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801ac26:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801ac2a:	9500      	str	r5, [sp, #0]
 801ac2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ac2e:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801ac32:	e9cd b703 	strd	fp, r7, [sp, #12]
 801ac36:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801ac3a:	464a      	mov	r2, r9
 801ac3c:	2100      	movs	r1, #0
 801ac3e:	f7ff fc94 	bl	801a56a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801ac42:	2800      	cmp	r0, #0
 801ac44:	d1b6      	bne.n	801abb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ac46:	b2b2      	uxth	r2, r6
 801ac48:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ac4c:	4611      	mov	r1, r2
 801ac4e:	4413      	add	r3, r2
 801ac50:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801ac54:	b21b      	sxth	r3, r3
 801ac56:	1a52      	subs	r2, r2, r1
 801ac58:	7c21      	ldrb	r1, [r4, #16]
 801ac5a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ac5e:	b212      	sxth	r2, r2
 801ac60:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801ac64:	b109      	cbz	r1, 801ac6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801ac66:	42b2      	cmp	r2, r6
 801ac68:	dba4      	blt.n	801abb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ac6a:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801ac6e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801ac72:	440a      	add	r2, r1
 801ac74:	b212      	sxth	r2, r2
 801ac76:	4293      	cmp	r3, r2
 801ac78:	dda4      	ble.n	801abc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801ac7a:	e79b      	b.n	801abb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ac7c:	2a02      	cmp	r2, #2
 801ac7e:	d105      	bne.n	801ac8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801ac80:	7be2      	ldrb	r2, [r4, #15]
 801ac82:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801ac86:	1a80      	subs	r0, r0, r2
 801ac88:	1ac0      	subs	r0, r0, r3
 801ac8a:	e7bf      	b.n	801ac0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801ac8c:	2000      	movs	r0, #0
 801ac8e:	e7be      	b.n	801ac0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801ac90:	7be0      	ldrb	r0, [r4, #15]
 801ac92:	e7bc      	b.n	801ac0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801ac94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ac98:	e7c3      	b.n	801ac22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801ac9a:	9b08      	ldr	r3, [sp, #32]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d0f7      	beq.n	801ac90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801aca0:	2264      	movs	r2, #100	; 0x64
 801aca2:	4639      	mov	r1, r7
 801aca4:	4628      	mov	r0, r5
 801aca6:	f00f f8a1 	bl	8029dec <memcpy>
 801acaa:	2300      	movs	r3, #0
 801acac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801acb0:	6821      	ldr	r1, [r4, #0]
 801acb2:	4628      	mov	r0, r5
 801acb4:	f7ff fbec 	bl	801a490 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801acb8:	b203      	sxth	r3, r0
 801acba:	e79e      	b.n	801abfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801acbc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801acbc:	2b02      	cmp	r3, #2
 801acbe:	b510      	push	{r4, lr}
 801acc0:	f9b0 4000 	ldrsh.w	r4, [r0]
 801acc4:	d00b      	beq.n	801acde <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801acc6:	2b03      	cmp	r3, #3
 801acc8:	d00e      	beq.n	801ace8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801acca:	2b01      	cmp	r3, #1
 801accc:	d001      	beq.n	801acd2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801acce:	1860      	adds	r0, r4, r1
 801acd0:	bd10      	pop	{r4, pc}
 801acd2:	8880      	ldrh	r0, [r0, #4]
 801acd4:	4420      	add	r0, r4
 801acd6:	b200      	sxth	r0, r0
 801acd8:	1a80      	subs	r0, r0, r2
 801acda:	3801      	subs	r0, #1
 801acdc:	e7f8      	b.n	801acd0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801acde:	8880      	ldrh	r0, [r0, #4]
 801ace0:	4420      	add	r0, r4
 801ace2:	b200      	sxth	r0, r0
 801ace4:	1a40      	subs	r0, r0, r1
 801ace6:	e7f8      	b.n	801acda <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801ace8:	18a0      	adds	r0, r4, r2
 801acea:	e7f1      	b.n	801acd0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801acec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801acec:	2b02      	cmp	r3, #2
 801acee:	b510      	push	{r4, lr}
 801acf0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801acf4:	d006      	beq.n	801ad04 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801acf6:	2b03      	cmp	r3, #3
 801acf8:	d00a      	beq.n	801ad10 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801acfa:	2b01      	cmp	r3, #1
 801acfc:	bf14      	ite	ne
 801acfe:	18a0      	addne	r0, r4, r2
 801ad00:	1860      	addeq	r0, r4, r1
 801ad02:	bd10      	pop	{r4, pc}
 801ad04:	88c0      	ldrh	r0, [r0, #6]
 801ad06:	4420      	add	r0, r4
 801ad08:	b200      	sxth	r0, r0
 801ad0a:	1a80      	subs	r0, r0, r2
 801ad0c:	3801      	subs	r0, #1
 801ad0e:	e7f8      	b.n	801ad02 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801ad10:	88c0      	ldrh	r0, [r0, #6]
 801ad12:	4420      	add	r0, r4
 801ad14:	b200      	sxth	r0, r0
 801ad16:	1a40      	subs	r0, r0, r1
 801ad18:	e7f8      	b.n	801ad0c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801ad1c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ad1c:	4b01      	ldr	r3, [pc, #4]	; (801ad24 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ad1e:	2200      	movs	r2, #0
 801ad20:	601a      	str	r2, [r3, #0]
 801ad22:	4770      	bx	lr
 801ad24:	2400af4c 	.word	0x2400af4c

0801ad28 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801ad28:	4603      	mov	r3, r0
 801ad2a:	b1c8      	cbz	r0, 801ad60 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801ad2c:	0c02      	lsrs	r2, r0, #16
 801ad2e:	0412      	lsls	r2, r2, #16
 801ad30:	b9a2      	cbnz	r2, 801ad5c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801ad32:	0403      	lsls	r3, r0, #16
 801ad34:	2010      	movs	r0, #16
 801ad36:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ad3a:	bf04      	itt	eq
 801ad3c:	021b      	lsleq	r3, r3, #8
 801ad3e:	3008      	addeq	r0, #8
 801ad40:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ad44:	bf04      	itt	eq
 801ad46:	011b      	lsleq	r3, r3, #4
 801ad48:	3004      	addeq	r0, #4
 801ad4a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ad4e:	bf04      	itt	eq
 801ad50:	009b      	lsleq	r3, r3, #2
 801ad52:	3002      	addeq	r0, #2
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	db04      	blt.n	801ad62 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801ad58:	3001      	adds	r0, #1
 801ad5a:	4770      	bx	lr
 801ad5c:	2000      	movs	r0, #0
 801ad5e:	e7ea      	b.n	801ad36 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801ad60:	2020      	movs	r0, #32
 801ad62:	4770      	bx	lr

0801ad64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad68:	b087      	sub	sp, #28
 801ad6a:	4681      	mov	r9, r0
 801ad6c:	4698      	mov	r8, r3
 801ad6e:	4610      	mov	r0, r2
 801ad70:	460d      	mov	r5, r1
 801ad72:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801ad76:	b981      	cbnz	r1, 801ad9a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801ad78:	b14b      	cbz	r3, 801ad8e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801ad7a:	460b      	mov	r3, r1
 801ad7c:	464a      	mov	r2, r9
 801ad7e:	4641      	mov	r1, r8
 801ad80:	e9cd 4700 	strd	r4, r7, [sp]
 801ad84:	f7ff ffee 	bl	801ad64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ad88:	b007      	add	sp, #28
 801ad8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad8e:	f04f 33ff 	mov.w	r3, #4294967295
 801ad92:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801ad96:	603b      	str	r3, [r7, #0]
 801ad98:	e7f6      	b.n	801ad88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801ad9a:	fa32 fa01 	lsrs.w	sl, r2, r1
 801ad9e:	d107      	bne.n	801adb0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801ada0:	fb09 f602 	mul.w	r6, r9, r2
 801ada4:	fbb6 f0f4 	udiv	r0, r6, r4
 801ada8:	fb04 6610 	mls	r6, r4, r0, r6
 801adac:	603e      	str	r6, [r7, #0]
 801adae:	e7eb      	b.n	801ad88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801adb0:	2601      	movs	r6, #1
 801adb2:	fa09 fb01 	lsl.w	fp, r9, r1
 801adb6:	408e      	lsls	r6, r1
 801adb8:	fbbb f3f4 	udiv	r3, fp, r4
 801adbc:	3e01      	subs	r6, #1
 801adbe:	9302      	str	r3, [sp, #8]
 801adc0:	fb0a f303 	mul.w	r3, sl, r3
 801adc4:	4016      	ands	r6, r2
 801adc6:	9303      	str	r3, [sp, #12]
 801adc8:	4630      	mov	r0, r6
 801adca:	f7ff ffad 	bl	801ad28 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801adce:	464a      	mov	r2, r9
 801add0:	460b      	mov	r3, r1
 801add2:	4601      	mov	r1, r0
 801add4:	4630      	mov	r0, r6
 801add6:	e9cd 4700 	strd	r4, r7, [sp]
 801adda:	f7ff ffc3 	bl	801ad64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801adde:	9b02      	ldr	r3, [sp, #8]
 801ade0:	4606      	mov	r6, r0
 801ade2:	eb05 0108 	add.w	r1, r5, r8
 801ade6:	fb04 bb13 	mls	fp, r4, r3, fp
 801adea:	4658      	mov	r0, fp
 801adec:	f7ff ff9c 	bl	801ad28 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801adf0:	ab05      	add	r3, sp, #20
 801adf2:	465a      	mov	r2, fp
 801adf4:	e9cd 4300 	strd	r4, r3, [sp]
 801adf8:	4603      	mov	r3, r0
 801adfa:	4650      	mov	r0, sl
 801adfc:	f7ff ffb2 	bl	801ad64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ae00:	6839      	ldr	r1, [r7, #0]
 801ae02:	9a05      	ldr	r2, [sp, #20]
 801ae04:	9b03      	ldr	r3, [sp, #12]
 801ae06:	4411      	add	r1, r2
 801ae08:	fbb1 f2f4 	udiv	r2, r1, r4
 801ae0c:	18d3      	adds	r3, r2, r3
 801ae0e:	fb04 1412 	mls	r4, r4, r2, r1
 801ae12:	441e      	add	r6, r3
 801ae14:	603c      	str	r4, [r7, #0]
 801ae16:	4430      	add	r0, r6
 801ae18:	e7b6      	b.n	801ad88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801ae1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801ae1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae1e:	b085      	sub	sp, #20
 801ae20:	f1b0 0900 	subs.w	r9, r0, #0
 801ae24:	461d      	mov	r5, r3
 801ae26:	4617      	mov	r7, r2
 801ae28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ae2a:	bfbb      	ittet	lt
 801ae2c:	f1c9 0900 	rsblt	r9, r9, #0
 801ae30:	f04f 36ff 	movlt.w	r6, #4294967295
 801ae34:	2601      	movge	r6, #1
 801ae36:	6823      	ldrlt	r3, [r4, #0]
 801ae38:	bfbc      	itt	lt
 801ae3a:	425b      	neglt	r3, r3
 801ae3c:	6023      	strlt	r3, [r4, #0]
 801ae3e:	2a00      	cmp	r2, #0
 801ae40:	da04      	bge.n	801ae4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801ae42:	6823      	ldr	r3, [r4, #0]
 801ae44:	4257      	negs	r7, r2
 801ae46:	4276      	negs	r6, r6
 801ae48:	425b      	negs	r3, r3
 801ae4a:	6023      	str	r3, [r4, #0]
 801ae4c:	2d00      	cmp	r5, #0
 801ae4e:	4638      	mov	r0, r7
 801ae50:	bfba      	itte	lt
 801ae52:	426d      	neglt	r5, r5
 801ae54:	f04f 38ff 	movlt.w	r8, #4294967295
 801ae58:	f04f 0801 	movge.w	r8, #1
 801ae5c:	f7ff ff64 	bl	801ad28 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ae60:	ab03      	add	r3, sp, #12
 801ae62:	463a      	mov	r2, r7
 801ae64:	e9cd 5300 	strd	r5, r3, [sp]
 801ae68:	4603      	mov	r3, r0
 801ae6a:	4648      	mov	r0, r9
 801ae6c:	f7ff ff7a 	bl	801ad64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ae70:	6823      	ldr	r3, [r4, #0]
 801ae72:	9a03      	ldr	r2, [sp, #12]
 801ae74:	4546      	cmp	r6, r8
 801ae76:	441a      	add	r2, r3
 801ae78:	fb92 f3f5 	sdiv	r3, r2, r5
 801ae7c:	4418      	add	r0, r3
 801ae7e:	fb05 2313 	mls	r3, r5, r3, r2
 801ae82:	bf18      	it	ne
 801ae84:	4240      	negne	r0, r0
 801ae86:	1c72      	adds	r2, r6, #1
 801ae88:	6023      	str	r3, [r4, #0]
 801ae8a:	d105      	bne.n	801ae98 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	f1c3 0200 	rsb	r2, r3, #0
 801ae92:	db0b      	blt.n	801aeac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801ae94:	6022      	str	r2, [r4, #0]
 801ae96:	e006      	b.n	801aea6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ae98:	2e01      	cmp	r6, #1
 801ae9a:	d104      	bne.n	801aea6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	da02      	bge.n	801aea6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801aea0:	442b      	add	r3, r5
 801aea2:	3801      	subs	r0, #1
 801aea4:	6023      	str	r3, [r4, #0]
 801aea6:	b005      	add	sp, #20
 801aea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aeac:	3801      	subs	r0, #1
 801aeae:	1b52      	subs	r2, r2, r5
 801aeb0:	e7f0      	b.n	801ae94 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801aeb4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801aeb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801aeb8:	4c1c      	ldr	r4, [pc, #112]	; (801af2c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801aeba:	4605      	mov	r5, r0
 801aebc:	6807      	ldr	r7, [r0, #0]
 801aebe:	69a3      	ldr	r3, [r4, #24]
 801aec0:	b92b      	cbnz	r3, 801aece <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801aec2:	6840      	ldr	r0, [r0, #4]
 801aec4:	e9c5 7000 	strd	r7, r0, [r5]
 801aec8:	b004      	add	sp, #16
 801aeca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aece:	f04f 0802 	mov.w	r8, #2
 801aed2:	68a2      	ldr	r2, [r4, #8]
 801aed4:	ae04      	add	r6, sp, #16
 801aed6:	6820      	ldr	r0, [r4, #0]
 801aed8:	fb93 f1f8 	sdiv	r1, r3, r8
 801aedc:	440a      	add	r2, r1
 801aede:	69e1      	ldr	r1, [r4, #28]
 801aee0:	f846 2d04 	str.w	r2, [r6, #-4]!
 801aee4:	463a      	mov	r2, r7
 801aee6:	9600      	str	r6, [sp, #0]
 801aee8:	f7ff ff97 	bl	801ae1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801aeec:	69a3      	ldr	r3, [r4, #24]
 801aeee:	4607      	mov	r7, r0
 801aef0:	686a      	ldr	r2, [r5, #4]
 801aef2:	6a21      	ldr	r1, [r4, #32]
 801aef4:	9600      	str	r6, [sp, #0]
 801aef6:	6860      	ldr	r0, [r4, #4]
 801aef8:	f7ff ff8f 	bl	801ae1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801aefc:	69a3      	ldr	r3, [r4, #24]
 801aefe:	6962      	ldr	r2, [r4, #20]
 801af00:	4407      	add	r7, r0
 801af02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801af04:	9600      	str	r6, [sp, #0]
 801af06:	68e0      	ldr	r0, [r4, #12]
 801af08:	fb93 f8f8 	sdiv	r8, r3, r8
 801af0c:	4442      	add	r2, r8
 801af0e:	9203      	str	r2, [sp, #12]
 801af10:	682a      	ldr	r2, [r5, #0]
 801af12:	f7ff ff82 	bl	801ae1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801af16:	4680      	mov	r8, r0
 801af18:	9600      	str	r6, [sp, #0]
 801af1a:	69a3      	ldr	r3, [r4, #24]
 801af1c:	686a      	ldr	r2, [r5, #4]
 801af1e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801af20:	6920      	ldr	r0, [r4, #16]
 801af22:	f7ff ff7a 	bl	801ae1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801af26:	4440      	add	r0, r8
 801af28:	e7cc      	b.n	801aec4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801af2a:	bf00      	nop
 801af2c:	2400af50 	.word	0x2400af50

0801af30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801af30:	4b07      	ldr	r3, [pc, #28]	; (801af50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801af32:	781b      	ldrb	r3, [r3, #0]
 801af34:	2b01      	cmp	r3, #1
 801af36:	d109      	bne.n	801af4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801af38:	f9b1 3000 	ldrsh.w	r3, [r1]
 801af3c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801af40:	8003      	strh	r3, [r0, #0]
 801af42:	4b04      	ldr	r3, [pc, #16]	; (801af54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801af44:	881b      	ldrh	r3, [r3, #0]
 801af46:	3b01      	subs	r3, #1
 801af48:	1a9b      	subs	r3, r3, r2
 801af4a:	800b      	strh	r3, [r1, #0]
 801af4c:	4770      	bx	lr
 801af4e:	bf00      	nop
 801af50:	2400af3c 	.word	0x2400af3c
 801af54:	2400af40 	.word	0x2400af40

0801af58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801af58:	4b07      	ldr	r3, [pc, #28]	; (801af78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801af5a:	b510      	push	{r4, lr}
 801af5c:	781b      	ldrb	r3, [r3, #0]
 801af5e:	2b01      	cmp	r3, #1
 801af60:	d108      	bne.n	801af74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801af62:	4b06      	ldr	r3, [pc, #24]	; (801af7c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801af64:	880c      	ldrh	r4, [r1, #0]
 801af66:	881b      	ldrh	r3, [r3, #0]
 801af68:	f9b0 2000 	ldrsh.w	r2, [r0]
 801af6c:	3b01      	subs	r3, #1
 801af6e:	1b1b      	subs	r3, r3, r4
 801af70:	8003      	strh	r3, [r0, #0]
 801af72:	800a      	strh	r2, [r1, #0]
 801af74:	bd10      	pop	{r4, pc}
 801af76:	bf00      	nop
 801af78:	2400af3c 	.word	0x2400af3c
 801af7c:	2400af40 	.word	0x2400af40

0801af80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801af80:	4b0a      	ldr	r3, [pc, #40]	; (801afac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801af82:	b510      	push	{r4, lr}
 801af84:	781b      	ldrb	r3, [r3, #0]
 801af86:	2b01      	cmp	r3, #1
 801af88:	d10e      	bne.n	801afa8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801af8a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801af8e:	8843      	ldrh	r3, [r0, #2]
 801af90:	f9b0 4000 	ldrsh.w	r4, [r0]
 801af94:	18ca      	adds	r2, r1, r3
 801af96:	4b06      	ldr	r3, [pc, #24]	; (801afb0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801af98:	8044      	strh	r4, [r0, #2]
 801af9a:	881b      	ldrh	r3, [r3, #0]
 801af9c:	1a9b      	subs	r3, r3, r2
 801af9e:	8003      	strh	r3, [r0, #0]
 801afa0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801afa4:	8081      	strh	r1, [r0, #4]
 801afa6:	80c3      	strh	r3, [r0, #6]
 801afa8:	bd10      	pop	{r4, pc}
 801afaa:	bf00      	nop
 801afac:	2400af3c 	.word	0x2400af3c
 801afb0:	2400af40 	.word	0x2400af40

0801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801afb4:	4b08      	ldr	r3, [pc, #32]	; (801afd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801afb6:	781b      	ldrb	r3, [r3, #0]
 801afb8:	2b01      	cmp	r3, #1
 801afba:	d10c      	bne.n	801afd6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801afbc:	8803      	ldrh	r3, [r0, #0]
 801afbe:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801afc2:	8842      	ldrh	r2, [r0, #2]
 801afc4:	8002      	strh	r2, [r0, #0]
 801afc6:	185a      	adds	r2, r3, r1
 801afc8:	4b04      	ldr	r3, [pc, #16]	; (801afdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801afca:	881b      	ldrh	r3, [r3, #0]
 801afcc:	1a9b      	subs	r3, r3, r2
 801afce:	8043      	strh	r3, [r0, #2]
 801afd0:	88c3      	ldrh	r3, [r0, #6]
 801afd2:	80c1      	strh	r1, [r0, #6]
 801afd4:	8083      	strh	r3, [r0, #4]
 801afd6:	4770      	bx	lr
 801afd8:	2400af3c 	.word	0x2400af3c
 801afdc:	2400af40 	.word	0x2400af40

0801afe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801afe0:	4b07      	ldr	r3, [pc, #28]	; (801b000 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801afe2:	b510      	push	{r4, lr}
 801afe4:	781b      	ldrb	r3, [r3, #0]
 801afe6:	2b01      	cmp	r3, #1
 801afe8:	d108      	bne.n	801affc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801afea:	f9b1 3000 	ldrsh.w	r3, [r1]
 801afee:	f9b0 4000 	ldrsh.w	r4, [r0]
 801aff2:	8003      	strh	r3, [r0, #0]
 801aff4:	8893      	ldrh	r3, [r2, #4]
 801aff6:	3b01      	subs	r3, #1
 801aff8:	1b1b      	subs	r3, r3, r4
 801affa:	800b      	strh	r3, [r1, #0]
 801affc:	bd10      	pop	{r4, pc}
 801affe:	bf00      	nop
 801b000:	2400af3c 	.word	0x2400af3c

0801b004 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b004:	4b0a      	ldr	r3, [pc, #40]	; (801b030 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b006:	460a      	mov	r2, r1
 801b008:	b510      	push	{r4, lr}
 801b00a:	781b      	ldrb	r3, [r3, #0]
 801b00c:	2b01      	cmp	r3, #1
 801b00e:	d10d      	bne.n	801b02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b010:	8881      	ldrh	r1, [r0, #4]
 801b012:	8803      	ldrh	r3, [r0, #0]
 801b014:	440b      	add	r3, r1
 801b016:	4601      	mov	r1, r0
 801b018:	3b01      	subs	r3, #1
 801b01a:	f821 3b02 	strh.w	r3, [r1], #2
 801b01e:	f7ff ffdf 	bl	801afe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b022:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b026:	88c2      	ldrh	r2, [r0, #6]
 801b028:	80c3      	strh	r3, [r0, #6]
 801b02a:	8082      	strh	r2, [r0, #4]
 801b02c:	bd10      	pop	{r4, pc}
 801b02e:	bf00      	nop
 801b030:	2400af3c 	.word	0x2400af3c

0801b034 <_ZN8touchgfx11Application13requestRedrawEv>:
 801b034:	4b06      	ldr	r3, [pc, #24]	; (801b050 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b036:	2100      	movs	r1, #0
 801b038:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b03c:	4b05      	ldr	r3, [pc, #20]	; (801b054 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b03e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801b042:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b046:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801b04a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801b04e:	4770      	bx	lr
 801b050:	2400af38 	.word	0x2400af38
 801b054:	2400af3a 	.word	0x2400af3a

0801b058 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b058:	4b03      	ldr	r3, [pc, #12]	; (801b068 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b05a:	6818      	ldr	r0, [r3, #0]
 801b05c:	b110      	cbz	r0, 801b064 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b05e:	6803      	ldr	r3, [r0, #0]
 801b060:	699b      	ldr	r3, [r3, #24]
 801b062:	4718      	bx	r3
 801b064:	4770      	bx	lr
 801b066:	bf00      	nop
 801b068:	2400af80 	.word	0x2400af80

0801b06c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b06c:	4770      	bx	lr
	...

0801b070 <_ZN8touchgfx11Application4drawEv>:
 801b070:	4b09      	ldr	r3, [pc, #36]	; (801b098 <_ZN8touchgfx11Application4drawEv+0x28>)
 801b072:	b507      	push	{r0, r1, r2, lr}
 801b074:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b078:	2100      	movs	r1, #0
 801b07a:	4b08      	ldr	r3, [pc, #32]	; (801b09c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b07c:	9100      	str	r1, [sp, #0]
 801b07e:	4669      	mov	r1, sp
 801b080:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b084:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b088:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b08c:	6803      	ldr	r3, [r0, #0]
 801b08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b090:	4798      	blx	r3
 801b092:	b003      	add	sp, #12
 801b094:	f85d fb04 	ldr.w	pc, [sp], #4
 801b098:	2400af38 	.word	0x2400af38
 801b09c:	2400af3a 	.word	0x2400af3a

0801b0a0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b0a0:	4b03      	ldr	r3, [pc, #12]	; (801b0b0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b0a2:	6818      	ldr	r0, [r3, #0]
 801b0a4:	b110      	cbz	r0, 801b0ac <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b0a6:	6803      	ldr	r3, [r0, #0]
 801b0a8:	69db      	ldr	r3, [r3, #28]
 801b0aa:	4718      	bx	r3
 801b0ac:	4770      	bx	lr
 801b0ae:	bf00      	nop
 801b0b0:	2400af80 	.word	0x2400af80

0801b0b4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b0b4:	4b03      	ldr	r3, [pc, #12]	; (801b0c4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b0b6:	6818      	ldr	r0, [r3, #0]
 801b0b8:	b110      	cbz	r0, 801b0c0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b0ba:	6803      	ldr	r3, [r0, #0]
 801b0bc:	6a1b      	ldr	r3, [r3, #32]
 801b0be:	4718      	bx	r3
 801b0c0:	4770      	bx	lr
 801b0c2:	bf00      	nop
 801b0c4:	2400af80 	.word	0x2400af80

0801b0c8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b0c8:	4b03      	ldr	r3, [pc, #12]	; (801b0d8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b0ca:	6818      	ldr	r0, [r3, #0]
 801b0cc:	b110      	cbz	r0, 801b0d4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b0ce:	6803      	ldr	r3, [r0, #0]
 801b0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0d2:	4718      	bx	r3
 801b0d4:	4770      	bx	lr
 801b0d6:	bf00      	nop
 801b0d8:	2400af80 	.word	0x2400af80

0801b0dc <_ZN8touchgfx11Application15handleTickEventEv>:
 801b0dc:	b570      	push	{r4, r5, r6, lr}
 801b0de:	4d38      	ldr	r5, [pc, #224]	; (801b1c0 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801b0e0:	4604      	mov	r4, r0
 801b0e2:	6828      	ldr	r0, [r5, #0]
 801b0e4:	b140      	cbz	r0, 801b0f8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b0e6:	7a03      	ldrb	r3, [r0, #8]
 801b0e8:	b933      	cbnz	r3, 801b0f8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b0ea:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801b0ee:	6803      	ldr	r3, [r0, #0]
 801b0f0:	689b      	ldr	r3, [r3, #8]
 801b0f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b0f6:	4718      	bx	r3
 801b0f8:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801b0fc:	b97b      	cbnz	r3, 801b11e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b0fe:	b170      	cbz	r0, 801b11e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b100:	7a03      	ldrb	r3, [r0, #8]
 801b102:	b163      	cbz	r3, 801b11e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b104:	4b2f      	ldr	r3, [pc, #188]	; (801b1c4 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801b106:	6818      	ldr	r0, [r3, #0]
 801b108:	b110      	cbz	r0, 801b110 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b10a:	6803      	ldr	r3, [r0, #0]
 801b10c:	691b      	ldr	r3, [r3, #16]
 801b10e:	4798      	blx	r3
 801b110:	6828      	ldr	r0, [r5, #0]
 801b112:	6803      	ldr	r3, [r0, #0]
 801b114:	68db      	ldr	r3, [r3, #12]
 801b116:	4798      	blx	r3
 801b118:	2301      	movs	r3, #1
 801b11a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801b11e:	2500      	movs	r5, #0
 801b120:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801b124:	42a8      	cmp	r0, r5
 801b126:	dd0c      	ble.n	801b142 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801b128:	1963      	adds	r3, r4, r5
 801b12a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801b12e:	b132      	cbz	r2, 801b13e <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801b130:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801b134:	4413      	add	r3, r2
 801b136:	6858      	ldr	r0, [r3, #4]
 801b138:	6803      	ldr	r3, [r0, #0]
 801b13a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b13c:	4798      	blx	r3
 801b13e:	3501      	adds	r5, #1
 801b140:	e7ee      	b.n	801b120 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801b142:	2300      	movs	r3, #0
 801b144:	461a      	mov	r2, r3
 801b146:	4298      	cmp	r0, r3
 801b148:	d10f      	bne.n	801b16a <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801b14a:	1d25      	adds	r5, r4, #4
 801b14c:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801b150:	4291      	cmp	r1, r2
 801b152:	dd2d      	ble.n	801b1b0 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801b154:	1e48      	subs	r0, r1, #1
 801b156:	b280      	uxth	r0, r0
 801b158:	4288      	cmp	r0, r1
 801b15a:	d31a      	bcc.n	801b192 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801b15c:	4b1a      	ldr	r3, [pc, #104]	; (801b1c8 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801b15e:	f240 11a9 	movw	r1, #425	; 0x1a9
 801b162:	4a1a      	ldr	r2, [pc, #104]	; (801b1cc <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801b164:	481a      	ldr	r0, [pc, #104]	; (801b1d0 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801b166:	f00e fdc3 	bl	8029cf0 <__assert_func>
 801b16a:	18e1      	adds	r1, r4, r3
 801b16c:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801b170:	b16d      	cbz	r5, 801b18e <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801b172:	429a      	cmp	r2, r3
 801b174:	d00a      	beq.n	801b18c <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801b176:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801b17a:	4431      	add	r1, r6
 801b17c:	684e      	ldr	r6, [r1, #4]
 801b17e:	b291      	uxth	r1, r2
 801b180:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b184:	604e      	str	r6, [r1, #4]
 801b186:	18a1      	adds	r1, r4, r2
 801b188:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801b18c:	3201      	adds	r2, #1
 801b18e:	3301      	adds	r3, #1
 801b190:	e7d9      	b.n	801b146 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801b192:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801b196:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801b19a:	3304      	adds	r3, #4
 801b19c:	428b      	cmp	r3, r1
 801b19e:	d004      	beq.n	801b1aa <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801b1a0:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801b1a4:	f843 6c04 	str.w	r6, [r3, #-4]
 801b1a8:	e7f8      	b.n	801b19c <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801b1aa:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801b1ae:	e7cd      	b.n	801b14c <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801b1b0:	4b04      	ldr	r3, [pc, #16]	; (801b1c4 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801b1b2:	6818      	ldr	r0, [r3, #0]
 801b1b4:	b110      	cbz	r0, 801b1bc <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801b1b6:	6803      	ldr	r3, [r0, #0]
 801b1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1ba:	e79a      	b.n	801b0f2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b1bc:	bd70      	pop	{r4, r5, r6, pc}
 801b1be:	bf00      	nop
 801b1c0:	2400af84 	.word	0x2400af84
 801b1c4:	2400af80 	.word	0x2400af80
 801b1c8:	0802d41c 	.word	0x0802d41c
 801b1cc:	0802d675 	.word	0x0802d675
 801b1d0:	0802d42a 	.word	0x0802d42a

0801b1d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b1d4:	b570      	push	{r4, r5, r6, lr}
 801b1d6:	4606      	mov	r6, r0
 801b1d8:	460c      	mov	r4, r1
 801b1da:	b929      	cbnz	r1, 801b1e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801b1dc:	4b0c      	ldr	r3, [pc, #48]	; (801b210 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801b1de:	2167      	movs	r1, #103	; 0x67
 801b1e0:	4a0c      	ldr	r2, [pc, #48]	; (801b214 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801b1e2:	480d      	ldr	r0, [pc, #52]	; (801b218 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801b1e4:	f00e fd84 	bl	8029cf0 <__assert_func>
 801b1e8:	2300      	movs	r3, #0
 801b1ea:	4d0c      	ldr	r5, [pc, #48]	; (801b21c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801b1ec:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801b1f0:	6828      	ldr	r0, [r5, #0]
 801b1f2:	b110      	cbz	r0, 801b1fa <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801b1f4:	6803      	ldr	r3, [r0, #0]
 801b1f6:	695b      	ldr	r3, [r3, #20]
 801b1f8:	4798      	blx	r3
 801b1fa:	602c      	str	r4, [r5, #0]
 801b1fc:	4620      	mov	r0, r4
 801b1fe:	6823      	ldr	r3, [r4, #0]
 801b200:	68db      	ldr	r3, [r3, #12]
 801b202:	4798      	blx	r3
 801b204:	6833      	ldr	r3, [r6, #0]
 801b206:	4630      	mov	r0, r6
 801b208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b20a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b20e:	4718      	bx	r3
 801b210:	0802d3e8 	.word	0x0802d3e8
 801b214:	0802d4f0 	.word	0x0802d4f0
 801b218:	0802d3f2 	.word	0x0802d3f2
 801b21c:	2400af80 	.word	0x2400af80

0801b220 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801b220:	b510      	push	{r4, lr}
 801b222:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b226:	888a      	ldrh	r2, [r1, #4]
 801b228:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b22c:	4422      	add	r2, r4
 801b22e:	b212      	sxth	r2, r2
 801b230:	4293      	cmp	r3, r2
 801b232:	da15      	bge.n	801b260 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b234:	8882      	ldrh	r2, [r0, #4]
 801b236:	4413      	add	r3, r2
 801b238:	b21b      	sxth	r3, r3
 801b23a:	429c      	cmp	r4, r3
 801b23c:	da10      	bge.n	801b260 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b23e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b242:	88c9      	ldrh	r1, [r1, #6]
 801b244:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b248:	4419      	add	r1, r3
 801b24a:	b209      	sxth	r1, r1
 801b24c:	428a      	cmp	r2, r1
 801b24e:	da07      	bge.n	801b260 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b250:	88c0      	ldrh	r0, [r0, #6]
 801b252:	4410      	add	r0, r2
 801b254:	b200      	sxth	r0, r0
 801b256:	4283      	cmp	r3, r0
 801b258:	bfac      	ite	ge
 801b25a:	2000      	movge	r0, #0
 801b25c:	2001      	movlt	r0, #1
 801b25e:	bd10      	pop	{r4, pc}
 801b260:	2000      	movs	r0, #0
 801b262:	e7fc      	b.n	801b25e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b264 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b264:	b570      	push	{r4, r5, r6, lr}
 801b266:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b26a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b26e:	42ac      	cmp	r4, r5
 801b270:	db18      	blt.n	801b2a4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b272:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801b276:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b27a:	429a      	cmp	r2, r3
 801b27c:	db12      	blt.n	801b2a4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b27e:	8886      	ldrh	r6, [r0, #4]
 801b280:	4435      	add	r5, r6
 801b282:	888e      	ldrh	r6, [r1, #4]
 801b284:	4434      	add	r4, r6
 801b286:	b22d      	sxth	r5, r5
 801b288:	b224      	sxth	r4, r4
 801b28a:	42a5      	cmp	r5, r4
 801b28c:	db0a      	blt.n	801b2a4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b28e:	88c0      	ldrh	r0, [r0, #6]
 801b290:	4418      	add	r0, r3
 801b292:	88cb      	ldrh	r3, [r1, #6]
 801b294:	441a      	add	r2, r3
 801b296:	b200      	sxth	r0, r0
 801b298:	b212      	sxth	r2, r2
 801b29a:	4290      	cmp	r0, r2
 801b29c:	bfb4      	ite	lt
 801b29e:	2000      	movlt	r0, #0
 801b2a0:	2001      	movge	r0, #1
 801b2a2:	bd70      	pop	{r4, r5, r6, pc}
 801b2a4:	2000      	movs	r0, #0
 801b2a6:	e7fc      	b.n	801b2a2 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801b2a8 <_ZN8touchgfx11Application11getInstanceEv>:
 801b2a8:	4b01      	ldr	r3, [pc, #4]	; (801b2b0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b2aa:	6818      	ldr	r0, [r3, #0]
 801b2ac:	4770      	bx	lr
 801b2ae:	bf00      	nop
 801b2b0:	2400af90 	.word	0x2400af90

0801b2b4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801b2b4:	b570      	push	{r4, r5, r6, lr}
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801b2bc:	1d04      	adds	r4, r0, #4
 801b2be:	b295      	uxth	r5, r2
 801b2c0:	42ab      	cmp	r3, r5
 801b2c2:	d90e      	bls.n	801b2e2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801b2c4:	f854 6b04 	ldr.w	r6, [r4], #4
 801b2c8:	4615      	mov	r5, r2
 801b2ca:	3201      	adds	r2, #1
 801b2cc:	428e      	cmp	r6, r1
 801b2ce:	d1f6      	bne.n	801b2be <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801b2d0:	4428      	add	r0, r5
 801b2d2:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801b2d6:	2bff      	cmp	r3, #255	; 0xff
 801b2d8:	d002      	beq.n	801b2e0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801b2da:	3301      	adds	r3, #1
 801b2dc:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801b2e0:	bd70      	pop	{r4, r5, r6, pc}
 801b2e2:	2b20      	cmp	r3, #32
 801b2e4:	d106      	bne.n	801b2f4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801b2e6:	4b09      	ldr	r3, [pc, #36]	; (801b30c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801b2e8:	f240 215f 	movw	r1, #607	; 0x25f
 801b2ec:	4a08      	ldr	r2, [pc, #32]	; (801b310 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801b2ee:	4809      	ldr	r0, [pc, #36]	; (801b314 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801b2f0:	f00e fcfe 	bl	8029cf0 <__assert_func>
 801b2f4:	18c2      	adds	r2, r0, r3
 801b2f6:	2401      	movs	r4, #1
 801b2f8:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801b2fc:	191a      	adds	r2, r3, r4
 801b2fe:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801b302:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801b306:	6041      	str	r1, [r0, #4]
 801b308:	e7ea      	b.n	801b2e0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801b30a:	bf00      	nop
 801b30c:	0802d453 	.word	0x0802d453
 801b310:	0802d534 	.word	0x0802d534
 801b314:	0802d3f2 	.word	0x0802d3f2

0801b318 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801b318:	b570      	push	{r4, r5, r6, lr}
 801b31a:	2300      	movs	r3, #0
 801b31c:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801b320:	1d04      	adds	r4, r0, #4
 801b322:	b29a      	uxth	r2, r3
 801b324:	4296      	cmp	r6, r2
 801b326:	d90a      	bls.n	801b33e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801b328:	f854 2b04 	ldr.w	r2, [r4], #4
 801b32c:	428a      	cmp	r2, r1
 801b32e:	d107      	bne.n	801b340 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801b330:	18c5      	adds	r5, r0, r3
 801b332:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801b336:	b11a      	cbz	r2, 801b340 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801b338:	3a01      	subs	r2, #1
 801b33a:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801b33e:	bd70      	pop	{r4, r5, r6, pc}
 801b340:	3301      	adds	r3, #1
 801b342:	e7ee      	b.n	801b322 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801b344 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801b344:	2300      	movs	r3, #0
 801b346:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801b34a:	30a8      	adds	r0, #168	; 0xa8
 801b34c:	f820 3c24 	strh.w	r3, [r0, #-36]
 801b350:	f802 3b01 	strb.w	r3, [r2], #1
 801b354:	4282      	cmp	r2, r0
 801b356:	d1fb      	bne.n	801b350 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801b358:	4770      	bx	lr

0801b35a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b35a:	4603      	mov	r3, r0
 801b35c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801b360:	2200      	movs	r2, #0
 801b362:	801a      	strh	r2, [r3, #0]
 801b364:	3308      	adds	r3, #8
 801b366:	f823 2c06 	strh.w	r2, [r3, #-6]
 801b36a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801b36e:	f823 2c02 	strh.w	r2, [r3, #-2]
 801b372:	428b      	cmp	r3, r1
 801b374:	d1f5      	bne.n	801b362 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b376:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801b37a:	4770      	bx	lr

0801b37c <_ZN8touchgfx11ApplicationC1Ev>:
 801b37c:	b570      	push	{r4, r5, r6, lr}
 801b37e:	4b1a      	ldr	r3, [pc, #104]	; (801b3e8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801b380:	2500      	movs	r5, #0
 801b382:	4604      	mov	r4, r0
 801b384:	30a8      	adds	r0, #168	; 0xa8
 801b386:	f840 3ca8 	str.w	r3, [r0, #-168]
 801b38a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801b38e:	f7ff ffe4 	bl	801b35a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b392:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801b396:	f7ff ffe0 	bl	801b35a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b39a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801b39e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801b3a2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801b3a6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801b3aa:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801b3ae:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801b3b2:	490e      	ldr	r1, [pc, #56]	; (801b3ec <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801b3b4:	480e      	ldr	r0, [pc, #56]	; (801b3f0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801b3b6:	f00e fb5f 	bl	8029a78 <CRC_Lock>
 801b3ba:	4e0e      	ldr	r6, [pc, #56]	; (801b3f4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b3bc:	4b0e      	ldr	r3, [pc, #56]	; (801b3f8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b3be:	b158      	cbz	r0, 801b3d8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801b3c0:	801d      	strh	r5, [r3, #0]
 801b3c2:	2300      	movs	r3, #0
 801b3c4:	4a0d      	ldr	r2, [pc, #52]	; (801b3fc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b3c6:	4620      	mov	r0, r4
 801b3c8:	6013      	str	r3, [r2, #0]
 801b3ca:	4a0d      	ldr	r2, [pc, #52]	; (801b400 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801b3cc:	6033      	str	r3, [r6, #0]
 801b3ce:	6013      	str	r3, [r2, #0]
 801b3d0:	f7ff ffb8 	bl	801b344 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801b3d4:	4620      	mov	r0, r4
 801b3d6:	bd70      	pop	{r4, r5, r6, pc}
 801b3d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b3dc:	2002      	movs	r0, #2
 801b3de:	801a      	strh	r2, [r3, #0]
 801b3e0:	6030      	str	r0, [r6, #0]
 801b3e2:	f001 f9e5 	bl	801c7b0 <_ZN8touchgfx6Screen4drawEv>
 801b3e6:	e7ec      	b.n	801b3c2 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801b3e8:	0802d4b4 	.word	0x0802d4b4
 801b3ec:	b5e8b5cd 	.word	0xb5e8b5cd
 801b3f0:	f407a5c2 	.word	0xf407a5c2
 801b3f4:	2400af80 	.word	0x2400af80
 801b3f8:	2400006a 	.word	0x2400006a
 801b3fc:	2400af90 	.word	0x2400af90
 801b400:	2400af84 	.word	0x2400af84

0801b404 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b404:	b510      	push	{r4, lr}
 801b406:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801b40a:	428b      	cmp	r3, r1
 801b40c:	d806      	bhi.n	801b41c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801b40e:	4b0b      	ldr	r3, [pc, #44]	; (801b43c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801b410:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801b414:	4a0a      	ldr	r2, [pc, #40]	; (801b440 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801b416:	480b      	ldr	r0, [pc, #44]	; (801b444 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801b418:	f00e fc6a 	bl	8029cf0 <__assert_func>
 801b41c:	3b01      	subs	r3, #1
 801b41e:	b29b      	uxth	r3, r3
 801b420:	428b      	cmp	r3, r1
 801b422:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801b426:	d908      	bls.n	801b43a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801b428:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b42c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b430:	681a      	ldr	r2, [r3, #0]
 801b432:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b436:	685a      	ldr	r2, [r3, #4]
 801b438:	6062      	str	r2, [r4, #4]
 801b43a:	bd10      	pop	{r4, pc}
 801b43c:	0802d41c 	.word	0x0802d41c
 801b440:	0802d579 	.word	0x0802d579
 801b444:	0802d42a 	.word	0x0802d42a

0801b448 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801b448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b44a:	466b      	mov	r3, sp
 801b44c:	4604      	mov	r4, r0
 801b44e:	e883 0006 	stmia.w	r3, {r1, r2}
 801b452:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801b456:	2a07      	cmp	r2, #7
 801b458:	d906      	bls.n	801b468 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801b45a:	4b09      	ldr	r3, [pc, #36]	; (801b480 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801b45c:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801b460:	4a08      	ldr	r2, [pc, #32]	; (801b484 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801b462:	4809      	ldr	r0, [pc, #36]	; (801b488 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801b464:	f00e fc44 	bl	8029cf0 <__assert_func>
 801b468:	1c51      	adds	r1, r2, #1
 801b46a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801b46e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801b472:	cb03      	ldmia	r3!, {r0, r1}
 801b474:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801b478:	6069      	str	r1, [r5, #4]
 801b47a:	b003      	add	sp, #12
 801b47c:	bd30      	pop	{r4, r5, pc}
 801b47e:	bf00      	nop
 801b480:	0802d47b 	.word	0x0802d47b
 801b484:	0802d60f 	.word	0x0802d60f
 801b488:	0802d42a 	.word	0x0802d42a

0801b48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b490:	b08d      	sub	sp, #52	; 0x34
 801b492:	4683      	mov	fp, r0
 801b494:	ac08      	add	r4, sp, #32
 801b496:	4620      	mov	r0, r4
 801b498:	e884 0006 	stmia.w	r4, {r1, r2}
 801b49c:	f7fc f831 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b4a0:	2800      	cmp	r0, #0
 801b4a2:	d16a      	bne.n	801b57a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b4a4:	9402      	str	r4, [sp, #8]
 801b4a6:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801b4aa:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b4ae:	2400      	movs	r4, #0
 801b4b0:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801b4b4:	9301      	str	r3, [sp, #4]
 801b4b6:	36a0      	adds	r6, #160	; 0xa0
 801b4b8:	42a5      	cmp	r5, r4
 801b4ba:	d00d      	beq.n	801b4d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801b4bc:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801b4c0:	9802      	ldr	r0, [sp, #8]
 801b4c2:	f7ff fecf 	bl	801b264 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b4c6:	b128      	cbz	r0, 801b4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801b4c8:	1e69      	subs	r1, r5, #1
 801b4ca:	9801      	ldr	r0, [sp, #4]
 801b4cc:	1b09      	subs	r1, r1, r4
 801b4ce:	b289      	uxth	r1, r1
 801b4d0:	f7ff ff98 	bl	801b404 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b4d4:	3401      	adds	r4, #1
 801b4d6:	e7ef      	b.n	801b4b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b4d8:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801b4dc:	1e7b      	subs	r3, r7, #1
 801b4de:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801b4e2:	9703      	str	r7, [sp, #12]
 801b4e4:	9300      	str	r3, [sp, #0]
 801b4e6:	2400      	movs	r4, #0
 801b4e8:	4655      	mov	r5, sl
 801b4ea:	9704      	str	r7, [sp, #16]
 801b4ec:	4626      	mov	r6, r4
 801b4ee:	9b04      	ldr	r3, [sp, #16]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d078      	beq.n	801b5e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801b4f4:	9902      	ldr	r1, [sp, #8]
 801b4f6:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b4fa:	f7ff fe91 	bl	801b220 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b4fe:	b360      	cbz	r0, 801b55a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801b500:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801b504:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801b508:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801b50c:	45e6      	cmp	lr, ip
 801b50e:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801b512:	db35      	blt.n	801b580 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801b514:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801b518:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801b51c:	4472      	add	r2, lr
 801b51e:	4463      	add	r3, ip
 801b520:	b212      	sxth	r2, r2
 801b522:	b21b      	sxth	r3, r3
 801b524:	429a      	cmp	r2, r3
 801b526:	dc2b      	bgt.n	801b580 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801b528:	fa1f f288 	uxth.w	r2, r8
 801b52c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801b530:	45c1      	cmp	r9, r8
 801b532:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801b536:	4413      	add	r3, r2
 801b538:	fa1f fc89 	uxth.w	ip, r9
 801b53c:	b29b      	uxth	r3, r3
 801b53e:	fa0f fe83 	sxth.w	lr, r3
 801b542:	db0f      	blt.n	801b564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801b544:	eba3 030c 	sub.w	r3, r3, ip
 801b548:	1ac9      	subs	r1, r1, r3
 801b54a:	b209      	sxth	r1, r1
 801b54c:	2900      	cmp	r1, #0
 801b54e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b552:	dd12      	ble.n	801b57a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b554:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801b558:	4604      	mov	r4, r0
 801b55a:	9b04      	ldr	r3, [sp, #16]
 801b55c:	3d08      	subs	r5, #8
 801b55e:	3b01      	subs	r3, #1
 801b560:	9304      	str	r3, [sp, #16]
 801b562:	e7c4      	b.n	801b4ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801b564:	4461      	add	r1, ip
 801b566:	b209      	sxth	r1, r1
 801b568:	4571      	cmp	r1, lr
 801b56a:	dc3a      	bgt.n	801b5e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b56c:	eba2 020c 	sub.w	r2, r2, ip
 801b570:	b212      	sxth	r2, r2
 801b572:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801b576:	2a00      	cmp	r2, #0
 801b578:	dcee      	bgt.n	801b558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801b57a:	b00d      	add	sp, #52	; 0x34
 801b57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b580:	45c1      	cmp	r9, r8
 801b582:	db2e      	blt.n	801b5e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b584:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801b588:	4499      	add	r9, r3
 801b58a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801b58e:	4498      	add	r8, r3
 801b590:	fa0f f989 	sxth.w	r9, r9
 801b594:	fa0f f888 	sxth.w	r8, r8
 801b598:	45c1      	cmp	r9, r8
 801b59a:	dc22      	bgt.n	801b5e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b59c:	fa1f f28c 	uxth.w	r2, ip
 801b5a0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801b5a4:	45e6      	cmp	lr, ip
 801b5a6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801b5aa:	4413      	add	r3, r2
 801b5ac:	fa1f f88e 	uxth.w	r8, lr
 801b5b0:	b29b      	uxth	r3, r3
 801b5b2:	fa0f f983 	sxth.w	r9, r3
 801b5b6:	db0a      	blt.n	801b5ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801b5b8:	eba3 0308 	sub.w	r3, r3, r8
 801b5bc:	1ac9      	subs	r1, r1, r3
 801b5be:	b209      	sxth	r1, r1
 801b5c0:	2900      	cmp	r1, #0
 801b5c2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801b5c6:	ddd8      	ble.n	801b57a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b5c8:	f8ad 9020 	strh.w	r9, [sp, #32]
 801b5cc:	e7c4      	b.n	801b558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801b5ce:	4441      	add	r1, r8
 801b5d0:	b209      	sxth	r1, r1
 801b5d2:	4549      	cmp	r1, r9
 801b5d4:	dc05      	bgt.n	801b5e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b5d6:	eba2 0208 	sub.w	r2, r2, r8
 801b5da:	b212      	sxth	r2, r2
 801b5dc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801b5e0:	e7c9      	b.n	801b576 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b5e2:	4606      	mov	r6, r0
 801b5e4:	e7b9      	b.n	801b55a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801b5e6:	2c00      	cmp	r4, #0
 801b5e8:	f47f af7d 	bne.w	801b4e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801b5ec:	2e00      	cmp	r6, #0
 801b5ee:	f000 81dc 	beq.w	801b9aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801b5f2:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801b5f6:	4655      	mov	r5, sl
 801b5f8:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801b5fc:	b2b9      	uxth	r1, r7
 801b5fe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801b602:	b2b3      	uxth	r3, r6
 801b604:	9104      	str	r1, [sp, #16]
 801b606:	9804      	ldr	r0, [sp, #16]
 801b608:	441a      	add	r2, r3
 801b60a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801b60e:	b292      	uxth	r2, r2
 801b610:	4401      	add	r1, r0
 801b612:	fa0f f882 	sxth.w	r8, r2
 801b616:	b289      	uxth	r1, r1
 801b618:	9105      	str	r1, [sp, #20]
 801b61a:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801b61e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b622:	9b03      	ldr	r3, [sp, #12]
 801b624:	2b00      	cmp	r3, #0
 801b626:	d054      	beq.n	801b6d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801b628:	9902      	ldr	r1, [sp, #8]
 801b62a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b62e:	f7ff fdf7 	bl	801b220 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b636:	b1d8      	cbz	r0, 801b670 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b638:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801b63c:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801b640:	4576      	cmp	r6, lr
 801b642:	dc26      	bgt.n	801b692 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b644:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801b648:	44f4      	add	ip, lr
 801b64a:	fa0f fc8c 	sxth.w	ip, ip
 801b64e:	45e0      	cmp	r8, ip
 801b650:	db1f      	blt.n	801b692 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b652:	428f      	cmp	r7, r1
 801b654:	fa1f fc81 	uxth.w	ip, r1
 801b658:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801b65c:	dc0f      	bgt.n	801b67e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801b65e:	9805      	ldr	r0, [sp, #20]
 801b660:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801b664:	eba0 0c0c 	sub.w	ip, r0, ip
 801b668:	eba1 010c 	sub.w	r1, r1, ip
 801b66c:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801b670:	4620      	mov	r0, r4
 801b672:	9903      	ldr	r1, [sp, #12]
 801b674:	3d08      	subs	r5, #8
 801b676:	4604      	mov	r4, r0
 801b678:	3901      	subs	r1, #1
 801b67a:	9103      	str	r1, [sp, #12]
 801b67c:	e7cf      	b.n	801b61e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801b67e:	4461      	add	r1, ip
 801b680:	b209      	sxth	r1, r1
 801b682:	4549      	cmp	r1, r9
 801b684:	dcf5      	bgt.n	801b672 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b686:	9904      	ldr	r1, [sp, #16]
 801b688:	eba1 0c0c 	sub.w	ip, r1, ip
 801b68c:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801b690:	e7ee      	b.n	801b670 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b692:	428f      	cmp	r7, r1
 801b694:	dced      	bgt.n	801b672 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b696:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801b69a:	4461      	add	r1, ip
 801b69c:	b209      	sxth	r1, r1
 801b69e:	4589      	cmp	r9, r1
 801b6a0:	dbe7      	blt.n	801b672 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b6a2:	4576      	cmp	r6, lr
 801b6a4:	fa1f fc8e 	uxth.w	ip, lr
 801b6a8:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801b6ac:	dc08      	bgt.n	801b6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801b6ae:	eba2 0c0c 	sub.w	ip, r2, ip
 801b6b2:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801b6b6:	eba1 010c 	sub.w	r1, r1, ip
 801b6ba:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801b6be:	e7d7      	b.n	801b670 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b6c0:	4461      	add	r1, ip
 801b6c2:	b209      	sxth	r1, r1
 801b6c4:	4588      	cmp	r8, r1
 801b6c6:	dbd4      	blt.n	801b672 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b6c8:	eba3 0c0c 	sub.w	ip, r3, ip
 801b6cc:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801b6d0:	e7ce      	b.n	801b670 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b6d2:	2c00      	cmp	r4, #0
 801b6d4:	f000 8169 	beq.w	801b9aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801b6d8:	9b00      	ldr	r3, [sp, #0]
 801b6da:	3301      	adds	r3, #1
 801b6dc:	f000 8165 	beq.w	801b9aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801b6e0:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801b6e4:	9802      	ldr	r0, [sp, #8]
 801b6e6:	4621      	mov	r1, r4
 801b6e8:	f7ff fdbc 	bl	801b264 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b6ec:	b120      	cbz	r0, 801b6f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801b6ee:	f8bd 1000 	ldrh.w	r1, [sp]
 801b6f2:	9801      	ldr	r0, [sp, #4]
 801b6f4:	f7ff fe86 	bl	801b404 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b6f8:	9902      	ldr	r1, [sp, #8]
 801b6fa:	4620      	mov	r0, r4
 801b6fc:	f7ff fd90 	bl	801b220 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b700:	2800      	cmp	r0, #0
 801b702:	f000 809b 	beq.w	801b83c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801b706:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801b70a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801b70e:	fa1f f288 	uxth.w	r2, r8
 801b712:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801b716:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801b71a:	19d5      	adds	r5, r2, r7
 801b71c:	b2a1      	uxth	r1, r4
 801b71e:	45a0      	cmp	r8, r4
 801b720:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b724:	fa1f f985 	uxth.w	r9, r5
 801b728:	440b      	add	r3, r1
 801b72a:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801b72e:	fa0f f589 	sxth.w	r5, r9
 801b732:	b29b      	uxth	r3, r3
 801b734:	9503      	str	r5, [sp, #12]
 801b736:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801b73a:	9507      	str	r5, [sp, #28]
 801b73c:	f340 809d 	ble.w	801b87a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801b740:	1a52      	subs	r2, r2, r1
 801b742:	4584      	cmp	ip, r0
 801b744:	fa0f fe83 	sxth.w	lr, r3
 801b748:	b292      	uxth	r2, r2
 801b74a:	b215      	sxth	r5, r2
 801b74c:	dd2f      	ble.n	801b7ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801b74e:	9e00      	ldr	r6, [sp, #0]
 801b750:	fa1f fc8c 	uxth.w	ip, ip
 801b754:	b280      	uxth	r0, r0
 801b756:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801b75a:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801b75e:	9e03      	ldr	r6, [sp, #12]
 801b760:	ebac 0300 	sub.w	r3, ip, r0
 801b764:	448c      	add	ip, r1
 801b766:	eba6 060e 	sub.w	r6, r6, lr
 801b76a:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801b76e:	b29b      	uxth	r3, r3
 801b770:	4470      	add	r0, lr
 801b772:	fa0f fc8c 	sxth.w	ip, ip
 801b776:	b21c      	sxth	r4, r3
 801b778:	b200      	sxth	r0, r0
 801b77a:	4366      	muls	r6, r4
 801b77c:	ebac 0000 	sub.w	r0, ip, r0
 801b780:	4368      	muls	r0, r5
 801b782:	4286      	cmp	r6, r0
 801b784:	db09      	blt.n	801b79a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801b786:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801b78a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801b78e:	4417      	add	r7, r2
 801b790:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b794:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801b798:	e685      	b.n	801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b79a:	440b      	add	r3, r1
 801b79c:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801b7a0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b7a4:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801b7a8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b7ac:	e67b      	b.n	801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b7ae:	9e03      	ldr	r6, [sp, #12]
 801b7b0:	45b6      	cmp	lr, r6
 801b7b2:	da28      	bge.n	801b806 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801b7b4:	9b00      	ldr	r3, [sp, #0]
 801b7b6:	eba6 060e 	sub.w	r6, r6, lr
 801b7ba:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801b7be:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801b7c2:	eb04 030c 	add.w	r3, r4, ip
 801b7c6:	fa1f f883 	uxth.w	r8, r3
 801b7ca:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801b7ce:	4403      	add	r3, r0
 801b7d0:	fa0f f988 	sxth.w	r9, r8
 801b7d4:	eba0 000c 	sub.w	r0, r0, ip
 801b7d8:	eba3 0308 	sub.w	r3, r3, r8
 801b7dc:	4368      	muls	r0, r5
 801b7de:	b29b      	uxth	r3, r3
 801b7e0:	fa0f f883 	sxth.w	r8, r3
 801b7e4:	fb08 f606 	mul.w	r6, r8, r6
 801b7e8:	42b0      	cmp	r0, r6
 801b7ea:	dc06      	bgt.n	801b7fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801b7ec:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801b7f0:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801b7f4:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801b7f8:	e7c9      	b.n	801b78e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801b7fa:	4423      	add	r3, r4
 801b7fc:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801b800:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b804:	e64f      	b.n	801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b806:	eba3 0309 	sub.w	r3, r3, r9
 801b80a:	9807      	ldr	r0, [sp, #28]
 801b80c:	b29b      	uxth	r3, r3
 801b80e:	2806      	cmp	r0, #6
 801b810:	fa0f fc83 	sxth.w	ip, r3
 801b814:	d818      	bhi.n	801b848 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801b816:	4652      	mov	r2, sl
 801b818:	ab0a      	add	r3, sp, #40	; 0x28
 801b81a:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801b81e:	6851      	ldr	r1, [r2, #4]
 801b820:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801b824:	c303      	stmia	r3!, {r0, r1}
 801b826:	9b03      	ldr	r3, [sp, #12]
 801b828:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801b82c:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801b830:	ab0a      	add	r3, sp, #40	; 0x28
 801b832:	9801      	ldr	r0, [sp, #4]
 801b834:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b838:	f7ff fe06 	bl	801b448 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b83c:	9b00      	ldr	r3, [sp, #0]
 801b83e:	f1aa 0a08 	sub.w	sl, sl, #8
 801b842:	3b01      	subs	r3, #1
 801b844:	9300      	str	r3, [sp, #0]
 801b846:	e747      	b.n	801b6d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801b848:	9800      	ldr	r0, [sp, #0]
 801b84a:	45ac      	cmp	ip, r5
 801b84c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b850:	db0c      	blt.n	801b86c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801b852:	4417      	add	r7, r2
 801b854:	4458      	add	r0, fp
 801b856:	f8ad 4020 	strh.w	r4, [sp, #32]
 801b85a:	b2bf      	uxth	r7, r7
 801b85c:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801b860:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801b864:	440f      	add	r7, r1
 801b866:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801b86a:	e61c      	b.n	801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b86c:	4458      	add	r0, fp
 801b86e:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801b872:	443b      	add	r3, r7
 801b874:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801b878:	e615      	b.n	801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b87a:	fa1f f18c 	uxth.w	r1, ip
 801b87e:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801b882:	b282      	uxth	r2, r0
 801b884:	4584      	cmp	ip, r0
 801b886:	eb01 0e05 	add.w	lr, r1, r5
 801b88a:	9204      	str	r2, [sp, #16]
 801b88c:	fa1f fe8e 	uxth.w	lr, lr
 801b890:	9e04      	ldr	r6, [sp, #16]
 801b892:	fa0f f28e 	sxth.w	r2, lr
 801b896:	9205      	str	r2, [sp, #20]
 801b898:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801b89c:	4432      	add	r2, r6
 801b89e:	b292      	uxth	r2, r2
 801b8a0:	9206      	str	r2, [sp, #24]
 801b8a2:	da26      	bge.n	801b8f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801b8a4:	eba3 0309 	sub.w	r3, r3, r9
 801b8a8:	eba2 020e 	sub.w	r2, r2, lr
 801b8ac:	eba0 000c 	sub.w	r0, r0, ip
 801b8b0:	eba4 0408 	sub.w	r4, r4, r8
 801b8b4:	b29b      	uxth	r3, r3
 801b8b6:	b292      	uxth	r2, r2
 801b8b8:	fa0f fa83 	sxth.w	sl, r3
 801b8bc:	b211      	sxth	r1, r2
 801b8be:	fb0a f000 	mul.w	r0, sl, r0
 801b8c2:	434c      	muls	r4, r1
 801b8c4:	42a0      	cmp	r0, r4
 801b8c6:	9800      	ldr	r0, [sp, #0]
 801b8c8:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b8cc:	dc06      	bgt.n	801b8dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801b8ce:	4458      	add	r0, fp
 801b8d0:	9a05      	ldr	r2, [sp, #20]
 801b8d2:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801b8d6:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801b8da:	e7ca      	b.n	801b872 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801b8dc:	eb0b 0300 	add.w	r3, fp, r0
 801b8e0:	9903      	ldr	r1, [sp, #12]
 801b8e2:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801b8e6:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801b8ea:	442a      	add	r2, r5
 801b8ec:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801b8f0:	e5d9      	b.n	801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b8f2:	9e04      	ldr	r6, [sp, #16]
 801b8f4:	9a03      	ldr	r2, [sp, #12]
 801b8f6:	1b89      	subs	r1, r1, r6
 801b8f8:	b21e      	sxth	r6, r3
 801b8fa:	b289      	uxth	r1, r1
 801b8fc:	4296      	cmp	r6, r2
 801b8fe:	fa0f fc81 	sxth.w	ip, r1
 801b902:	dd25      	ble.n	801b950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801b904:	eba3 0309 	sub.w	r3, r3, r9
 801b908:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801b90c:	9e05      	ldr	r6, [sp, #20]
 801b90e:	eba4 0408 	sub.w	r4, r4, r8
 801b912:	b29b      	uxth	r3, r3
 801b914:	eba6 0902 	sub.w	r9, r6, r2
 801b918:	fb0c f404 	mul.w	r4, ip, r4
 801b91c:	b218      	sxth	r0, r3
 801b91e:	9a00      	ldr	r2, [sp, #0]
 801b920:	fb00 f909 	mul.w	r9, r0, r9
 801b924:	00d2      	lsls	r2, r2, #3
 801b926:	454c      	cmp	r4, r9
 801b928:	db03      	blt.n	801b932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801b92a:	445a      	add	r2, fp
 801b92c:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801b930:	e79f      	b.n	801b872 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801b932:	eb0b 0302 	add.w	r3, fp, r2
 801b936:	9a03      	ldr	r2, [sp, #12]
 801b938:	4429      	add	r1, r5
 801b93a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801b93e:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801b942:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801b946:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b94a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b94e:	e5aa      	b.n	801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b950:	9b06      	ldr	r3, [sp, #24]
 801b952:	9c07      	ldr	r4, [sp, #28]
 801b954:	eba3 020e 	sub.w	r2, r3, lr
 801b958:	2c06      	cmp	r4, #6
 801b95a:	b292      	uxth	r2, r2
 801b95c:	b213      	sxth	r3, r2
 801b95e:	d80d      	bhi.n	801b97c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801b960:	4651      	mov	r1, sl
 801b962:	aa0a      	add	r2, sp, #40	; 0x28
 801b964:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801b968:	6849      	ldr	r1, [r1, #4]
 801b96a:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801b96e:	9b05      	ldr	r3, [sp, #20]
 801b970:	c203      	stmia	r2!, {r0, r1}
 801b972:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801b976:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801b97a:	e759      	b.n	801b830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801b97c:	9c00      	ldr	r4, [sp, #0]
 801b97e:	4563      	cmp	r3, ip
 801b980:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801b984:	db0d      	blt.n	801b9a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801b986:	4429      	add	r1, r5
 801b988:	9a04      	ldr	r2, [sp, #16]
 801b98a:	445c      	add	r4, fp
 801b98c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b990:	b289      	uxth	r1, r1
 801b992:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801b996:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b99a:	4411      	add	r1, r2
 801b99c:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801b9a0:	e581      	b.n	801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b9a2:	445c      	add	r4, fp
 801b9a4:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801b9a8:	e79f      	b.n	801b8ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801b9aa:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801b9ae:	2f07      	cmp	r7, #7
 801b9b0:	d806      	bhi.n	801b9c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801b9b2:	ab08      	add	r3, sp, #32
 801b9b4:	9801      	ldr	r0, [sp, #4]
 801b9b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b9ba:	f7ff fd45 	bl	801b448 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b9be:	e5dc      	b.n	801b57a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b9c0:	f107 39ff 	add.w	r9, r7, #4294967295
 801b9c4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b9c8:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801b9cc:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801b9d0:	f04f 35ff 	mov.w	r5, #4294967295
 801b9d4:	2400      	movs	r4, #0
 801b9d6:	9304      	str	r3, [sp, #16]
 801b9d8:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801b9dc:	f109 32ff 	add.w	r2, r9, #4294967295
 801b9e0:	9300      	str	r3, [sp, #0]
 801b9e2:	4690      	mov	r8, r2
 801b9e4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801b9e8:	9303      	str	r3, [sp, #12]
 801b9ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b9ee:	f1b8 3fff 	cmp.w	r8, #4294967295
 801b9f2:	6818      	ldr	r0, [r3, #0]
 801b9f4:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801b9f8:	9206      	str	r2, [sp, #24]
 801b9fa:	bf16      	itet	ne
 801b9fc:	9904      	ldrne	r1, [sp, #16]
 801b9fe:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801ba02:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801ba06:	9305      	str	r3, [sp, #20]
 801ba08:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801ba0c:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801ba10:	fb16 f601 	smulbb	r6, r6, r1
 801ba14:	6859      	ldr	r1, [r3, #4]
 801ba16:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ba1a:	4671      	mov	r1, lr
 801ba1c:	a80a      	add	r0, sp, #40	; 0x28
 801ba1e:	f7fc f8c2 	bl	8017ba6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ba22:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801ba26:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ba2a:	9b03      	ldr	r3, [sp, #12]
 801ba2c:	9a00      	ldr	r2, [sp, #0]
 801ba2e:	fb11 f100 	smulbb	r1, r1, r0
 801ba32:	2008      	movs	r0, #8
 801ba34:	fb02 6603 	mla	r6, r2, r3, r6
 801ba38:	1b8e      	subs	r6, r1, r6
 801ba3a:	fb91 f1f0 	sdiv	r1, r1, r0
 801ba3e:	42b1      	cmp	r1, r6
 801ba40:	dc21      	bgt.n	801ba86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801ba42:	4556      	cmp	r6, sl
 801ba44:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801ba48:	da03      	bge.n	801ba52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801ba4a:	b1e6      	cbz	r6, 801ba86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801ba4c:	46b2      	mov	sl, r6
 801ba4e:	4645      	mov	r5, r8
 801ba50:	464c      	mov	r4, r9
 801ba52:	f108 38ff 	add.w	r8, r8, #4294967295
 801ba56:	f118 0f02 	cmn.w	r8, #2
 801ba5a:	d1c8      	bne.n	801b9ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801ba5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ba60:	f1a7 0708 	sub.w	r7, r7, #8
 801ba64:	4691      	mov	r9, r2
 801ba66:	d1b7      	bne.n	801b9d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801ba68:	9b01      	ldr	r3, [sp, #4]
 801ba6a:	b2a6      	uxth	r6, r4
 801ba6c:	00e4      	lsls	r4, r4, #3
 801ba6e:	1918      	adds	r0, r3, r4
 801ba70:	1c6b      	adds	r3, r5, #1
 801ba72:	d10b      	bne.n	801ba8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801ba74:	4601      	mov	r1, r0
 801ba76:	9802      	ldr	r0, [sp, #8]
 801ba78:	f7fc f895 	bl	8017ba6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ba7c:	4631      	mov	r1, r6
 801ba7e:	9801      	ldr	r0, [sp, #4]
 801ba80:	f7ff fcc0 	bl	801b404 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ba84:	e50f      	b.n	801b4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ba86:	4645      	mov	r5, r8
 801ba88:	464c      	mov	r4, r9
 801ba8a:	e7ed      	b.n	801ba68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801ba8c:	9b01      	ldr	r3, [sp, #4]
 801ba8e:	00ed      	lsls	r5, r5, #3
 801ba90:	445c      	add	r4, fp
 801ba92:	1959      	adds	r1, r3, r5
 801ba94:	445d      	add	r5, fp
 801ba96:	f7fc f886 	bl	8017ba6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ba9a:	9b02      	ldr	r3, [sp, #8]
 801ba9c:	cb03      	ldmia	r3!, {r0, r1}
 801ba9e:	9b02      	ldr	r3, [sp, #8]
 801baa0:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801baa4:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801baa8:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801baac:	6861      	ldr	r1, [r4, #4]
 801baae:	c303      	stmia	r3!, {r0, r1}
 801bab0:	e7e4      	b.n	801ba7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801bab4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801bab4:	4b1d      	ldr	r3, [pc, #116]	; (801bb2c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801bab6:	b530      	push	{r4, r5, lr}
 801bab8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801babc:	b085      	sub	sp, #20
 801babe:	4b1c      	ldr	r3, [pc, #112]	; (801bb30 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801bac0:	460c      	mov	r4, r1
 801bac2:	2100      	movs	r1, #0
 801bac4:	4605      	mov	r5, r0
 801bac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801baca:	6820      	ldr	r0, [r4, #0]
 801bacc:	9100      	str	r1, [sp, #0]
 801bace:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bad2:	ab02      	add	r3, sp, #8
 801bad4:	6861      	ldr	r1, [r4, #4]
 801bad6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bada:	c303      	stmia	r3!, {r0, r1}
 801badc:	4669      	mov	r1, sp
 801bade:	a802      	add	r0, sp, #8
 801bae0:	f7fb fccc 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 801bae4:	ab02      	add	r3, sp, #8
 801bae6:	cb03      	ldmia	r3!, {r0, r1}
 801bae8:	4b12      	ldr	r3, [pc, #72]	; (801bb34 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801baea:	6020      	str	r0, [r4, #0]
 801baec:	6818      	ldr	r0, [r3, #0]
 801baee:	6061      	str	r1, [r4, #4]
 801baf0:	b138      	cbz	r0, 801bb02 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801baf2:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801baf6:	b133      	cbz	r3, 801bb06 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801baf8:	6821      	ldr	r1, [r4, #0]
 801bafa:	4628      	mov	r0, r5
 801bafc:	6862      	ldr	r2, [r4, #4]
 801bafe:	f7ff fcc5 	bl	801b48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bb02:	b005      	add	sp, #20
 801bb04:	bd30      	pop	{r4, r5, pc}
 801bb06:	6803      	ldr	r3, [r0, #0]
 801bb08:	4621      	mov	r1, r4
 801bb0a:	689b      	ldr	r3, [r3, #8]
 801bb0c:	4798      	blx	r3
 801bb0e:	4b0a      	ldr	r3, [pc, #40]	; (801bb38 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801bb10:	6818      	ldr	r0, [r3, #0]
 801bb12:	b118      	cbz	r0, 801bb1c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801bb14:	6803      	ldr	r3, [r0, #0]
 801bb16:	4621      	mov	r1, r4
 801bb18:	689b      	ldr	r3, [r3, #8]
 801bb1a:	4798      	blx	r3
 801bb1c:	4b07      	ldr	r3, [pc, #28]	; (801bb3c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801bb1e:	4621      	mov	r1, r4
 801bb20:	6818      	ldr	r0, [r3, #0]
 801bb22:	6803      	ldr	r3, [r0, #0]
 801bb24:	69db      	ldr	r3, [r3, #28]
 801bb26:	4798      	blx	r3
 801bb28:	e7eb      	b.n	801bb02 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801bb2a:	bf00      	nop
 801bb2c:	2400af38 	.word	0x2400af38
 801bb30:	2400af3a 	.word	0x2400af3a
 801bb34:	2400af80 	.word	0x2400af80
 801bb38:	2400af7c 	.word	0x2400af7c
 801bb3c:	2400af44 	.word	0x2400af44

0801bb40 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801bb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb44:	4604      	mov	r4, r0
 801bb46:	b09b      	sub	sp, #108	; 0x6c
 801bb48:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801bb4c:	b129      	cbz	r1, 801bb5a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801bb4e:	2300      	movs	r3, #0
 801bb50:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801bb54:	b01b      	add	sp, #108	; 0x6c
 801bb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb5a:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801bb5e:	4630      	mov	r0, r6
 801bb60:	f7fb fccf 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bb64:	4605      	mov	r5, r0
 801bb66:	b940      	cbnz	r0, 801bb7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801bb68:	4620      	mov	r0, r4
 801bb6a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801bb6e:	f7ff fc8d 	bl	801b48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bb72:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801bb76:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801bb7a:	4ba6      	ldr	r3, [pc, #664]	; (801be14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	b33b      	cbz	r3, 801bbd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801bb80:	4da5      	ldr	r5, [pc, #660]	; (801be18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801bb82:	4628      	mov	r0, r5
 801bb84:	f7fb fcbd 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bb88:	4606      	mov	r6, r0
 801bb8a:	bb08      	cbnz	r0, 801bbd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801bb8c:	4628      	mov	r0, r5
 801bb8e:	f7ff f9f7 	bl	801af80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bb92:	6829      	ldr	r1, [r5, #0]
 801bb94:	686a      	ldr	r2, [r5, #4]
 801bb96:	4620      	mov	r0, r4
 801bb98:	f7ff fc78 	bl	801b48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bb9c:	802e      	strh	r6, [r5, #0]
 801bb9e:	806e      	strh	r6, [r5, #2]
 801bba0:	80ae      	strh	r6, [r5, #4]
 801bba2:	80ee      	strh	r6, [r5, #6]
 801bba4:	4f9d      	ldr	r7, [pc, #628]	; (801be1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801bba6:	a809      	add	r0, sp, #36	; 0x24
 801bba8:	f7ff fbd7 	bl	801b35a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bbac:	883d      	ldrh	r5, [r7, #0]
 801bbae:	462e      	mov	r6, r5
 801bbb0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bbb4:	42b3      	cmp	r3, r6
 801bbb6:	d910      	bls.n	801bbda <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801bbb8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801bbbc:	3601      	adds	r6, #1
 801bbbe:	a809      	add	r0, sp, #36	; 0x24
 801bbc0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801bbc4:	b2b6      	uxth	r6, r6
 801bbc6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801bbca:	f7ff fc3d 	bl	801b448 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801bbce:	e7ef      	b.n	801bbb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801bbd0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d1e5      	bne.n	801bba4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801bbd8:	e7bc      	b.n	801bb54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801bbda:	462e      	mov	r6, r5
 801bbdc:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801bbe0:	42b3      	cmp	r3, r6
 801bbe2:	d90b      	bls.n	801bbfc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801bbe4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801bbe8:	3601      	adds	r6, #1
 801bbea:	4620      	mov	r0, r4
 801bbec:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801bbf0:	b2b6      	uxth	r6, r6
 801bbf2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801bbf6:	f7ff fc49 	bl	801b48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bbfa:	e7ef      	b.n	801bbdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801bbfc:	4a88      	ldr	r2, [pc, #544]	; (801be20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801bbfe:	6813      	ldr	r3, [r2, #0]
 801bc00:	4690      	mov	r8, r2
 801bc02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801bc06:	2b01      	cmp	r3, #1
 801bc08:	f040 8094 	bne.w	801bd34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801bc0c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801bc10:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801bc14:	f04f 0900 	mov.w	r9, #0
 801bc18:	33aa      	adds	r3, #170	; 0xaa
 801bc1a:	42a8      	cmp	r0, r5
 801bc1c:	f103 0308 	add.w	r3, r3, #8
 801bc20:	dd0a      	ble.n	801bc38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801bc22:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801bc26:	3501      	adds	r5, #1
 801bc28:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801bc2c:	440a      	add	r2, r1
 801bc2e:	b212      	sxth	r2, r2
 801bc30:	4591      	cmp	r9, r2
 801bc32:	bfb8      	it	lt
 801bc34:	4691      	movlt	r9, r2
 801bc36:	e7f0      	b.n	801bc1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801bc38:	4b7a      	ldr	r3, [pc, #488]	; (801be24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801bc3a:	4e7b      	ldr	r6, [pc, #492]	; (801be28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801bc3c:	881d      	ldrh	r5, [r3, #0]
 801bc3e:	2300      	movs	r3, #0
 801bc40:	2d0f      	cmp	r5, #15
 801bc42:	bf8c      	ite	hi
 801bc44:	08ed      	lsrhi	r5, r5, #3
 801bc46:	2501      	movls	r5, #1
 801bc48:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801bc4c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801bc50:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801bc54:	f8d8 0000 	ldr.w	r0, [r8]
 801bc58:	440b      	add	r3, r1
 801bc5a:	6802      	ldr	r2, [r0, #0]
 801bc5c:	b21b      	sxth	r3, r3
 801bc5e:	4599      	cmp	r9, r3
 801bc60:	dd4b      	ble.n	801bcfa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801bc62:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801bc66:	4798      	blx	r3
 801bc68:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bc6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801bc70:	4413      	add	r3, r2
 801bc72:	b21b      	sxth	r3, r3
 801bc74:	195a      	adds	r2, r3, r5
 801bc76:	4290      	cmp	r0, r2
 801bc78:	da07      	bge.n	801bc8a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801bc7a:	4581      	cmp	r9, r0
 801bc7c:	dd05      	ble.n	801bc8a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801bc7e:	4298      	cmp	r0, r3
 801bc80:	da33      	bge.n	801bcea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	dd31      	ble.n	801bcea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801bc86:	4648      	mov	r0, r9
 801bc88:	e004      	b.n	801bc94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801bc8a:	4298      	cmp	r0, r3
 801bc8c:	dbfb      	blt.n	801bc86 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801bc8e:	4548      	cmp	r0, r9
 801bc90:	bfa8      	it	ge
 801bc92:	4648      	movge	r0, r9
 801bc94:	f9b6 2000 	ldrsh.w	r2, [r6]
 801bc98:	2100      	movs	r1, #0
 801bc9a:	1ac0      	subs	r0, r0, r3
 801bc9c:	f8b7 a000 	ldrh.w	sl, [r7]
 801bca0:	f8ad 1014 	strh.w	r1, [sp, #20]
 801bca4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bca8:	f8ad 2018 	strh.w	r2, [sp, #24]
 801bcac:	f8ad 001a 	strh.w	r0, [sp, #26]
 801bcb0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bcb4:	4553      	cmp	r3, sl
 801bcb6:	d9c9      	bls.n	801bc4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801bcb8:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801bcbc:	ab07      	add	r3, sp, #28
 801bcbe:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801bcc2:	6851      	ldr	r1, [r2, #4]
 801bcc4:	c303      	stmia	r3!, {r0, r1}
 801bcc6:	a807      	add	r0, sp, #28
 801bcc8:	a905      	add	r1, sp, #20
 801bcca:	f7fb fbd7 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 801bcce:	a807      	add	r0, sp, #28
 801bcd0:	f7fb fc17 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bcd4:	b920      	cbnz	r0, 801bce0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801bcd6:	6823      	ldr	r3, [r4, #0]
 801bcd8:	a907      	add	r1, sp, #28
 801bcda:	4620      	mov	r0, r4
 801bcdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bcde:	4798      	blx	r3
 801bce0:	f10a 0a01 	add.w	sl, sl, #1
 801bce4:	fa1f fa8a 	uxth.w	sl, sl
 801bce8:	e7e2      	b.n	801bcb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801bcea:	f8d8 0000 	ldr.w	r0, [r8]
 801bcee:	2101      	movs	r1, #1
 801bcf0:	6803      	ldr	r3, [r0, #0]
 801bcf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bcf6:	4798      	blx	r3
 801bcf8:	e7a8      	b.n	801bc4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801bcfa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801bcfc:	4798      	blx	r3
 801bcfe:	4b4b      	ldr	r3, [pc, #300]	; (801be2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801bd00:	781b      	ldrb	r3, [r3, #0]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	f43f af26 	beq.w	801bb54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801bd08:	2300      	movs	r3, #0
 801bd0a:	883d      	ldrh	r5, [r7, #0]
 801bd0c:	34ea      	adds	r4, #234	; 0xea
 801bd0e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801bd12:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801bd16:	42ab      	cmp	r3, r5
 801bd18:	f67f af1c 	bls.w	801bb54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801bd1c:	ab1a      	add	r3, sp, #104	; 0x68
 801bd1e:	4620      	mov	r0, r4
 801bd20:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801bd24:	3501      	adds	r5, #1
 801bd26:	3b44      	subs	r3, #68	; 0x44
 801bd28:	b2ad      	uxth	r5, r5
 801bd2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801bd2e:	f7ff fb8b 	bl	801b448 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801bd32:	e7ee      	b.n	801bd12 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801bd34:	2b02      	cmp	r3, #2
 801bd36:	f040 813d 	bne.w	801bfb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801bd3a:	4b3d      	ldr	r3, [pc, #244]	; (801be30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801bd3c:	781b      	ldrb	r3, [r3, #0]
 801bd3e:	2b01      	cmp	r3, #1
 801bd40:	d02c      	beq.n	801bd9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801bd42:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801bd46:	883a      	ldrh	r2, [r7, #0]
 801bd48:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801bd4c:	3201      	adds	r2, #1
 801bd4e:	b292      	uxth	r2, r2
 801bd50:	2900      	cmp	r1, #0
 801bd52:	d0d4      	beq.n	801bcfe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801bd54:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801bd58:	4610      	mov	r0, r2
 801bd5a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801bd5e:	f04f 0a00 	mov.w	sl, #0
 801bd62:	441d      	add	r5, r3
 801bd64:	b22d      	sxth	r5, r5
 801bd66:	b283      	uxth	r3, r0
 801bd68:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801bd6c:	4299      	cmp	r1, r3
 801bd6e:	f240 80c3 	bls.w	801bef8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801bd72:	4426      	add	r6, r4
 801bd74:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801bd78:	4684      	mov	ip, r0
 801bd7a:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801bd7e:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801bd82:	4573      	cmp	r3, lr
 801bd84:	f340 80a5 	ble.w	801bed2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801bd88:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801bd8c:	4475      	add	r5, lr
 801bd8e:	b22d      	sxth	r5, r5
 801bd90:	429d      	cmp	r5, r3
 801bd92:	bfa8      	it	ge
 801bd94:	461d      	movge	r5, r3
 801bd96:	3001      	adds	r0, #1
 801bd98:	46e2      	mov	sl, ip
 801bd9a:	e7e4      	b.n	801bd66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801bd9c:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801bda0:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801bda4:	f1bb 0f00 	cmp.w	fp, #0
 801bda8:	d0a9      	beq.n	801bcfe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801bdaa:	883b      	ldrh	r3, [r7, #0]
 801bdac:	2600      	movs	r6, #0
 801bdae:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801bdb2:	3301      	adds	r3, #1
 801bdb4:	b29b      	uxth	r3, r3
 801bdb6:	b299      	uxth	r1, r3
 801bdb8:	00f5      	lsls	r5, r6, #3
 801bdba:	458b      	cmp	fp, r1
 801bdbc:	d93a      	bls.n	801be34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801bdbe:	4425      	add	r5, r4
 801bdc0:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801bdc4:	469c      	mov	ip, r3
 801bdc6:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801bdca:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801bdce:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801bdd2:	4408      	add	r0, r1
 801bdd4:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801bdd8:	4471      	add	r1, lr
 801bdda:	b200      	sxth	r0, r0
 801bddc:	b209      	sxth	r1, r1
 801bdde:	4288      	cmp	r0, r1
 801bde0:	da06      	bge.n	801bdf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801bde2:	4586      	cmp	lr, r0
 801bde4:	4672      	mov	r2, lr
 801bde6:	bfb8      	it	lt
 801bde8:	4602      	movlt	r2, r0
 801bdea:	3301      	adds	r3, #1
 801bdec:	4666      	mov	r6, ip
 801bdee:	e7e2      	b.n	801bdb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801bdf0:	d10b      	bne.n	801be0a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801bdf2:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801bdf6:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801bdfa:	458c      	cmp	ip, r1
 801bdfc:	bfb4      	ite	lt
 801bdfe:	469c      	movlt	ip, r3
 801be00:	46b4      	movge	ip, r6
 801be02:	4572      	cmp	r2, lr
 801be04:	bfb8      	it	lt
 801be06:	4672      	movlt	r2, lr
 801be08:	e7ef      	b.n	801bdea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801be0a:	428a      	cmp	r2, r1
 801be0c:	46b4      	mov	ip, r6
 801be0e:	bfb8      	it	lt
 801be10:	460a      	movlt	r2, r1
 801be12:	e7ea      	b.n	801bdea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801be14:	2400af7c 	.word	0x2400af7c
 801be18:	2400af88 	.word	0x2400af88
 801be1c:	2400006a 	.word	0x2400006a
 801be20:	2400af44 	.word	0x2400af44
 801be24:	2400af3a 	.word	0x2400af3a
 801be28:	2400af38 	.word	0x2400af38
 801be2c:	2400af42 	.word	0x2400af42
 801be30:	2400af3c 	.word	0x2400af3c
 801be34:	1961      	adds	r1, r4, r5
 801be36:	ab07      	add	r3, sp, #28
 801be38:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801be3c:	6849      	ldr	r1, [r1, #4]
 801be3e:	c303      	stmia	r3!, {r0, r1}
 801be40:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801be44:	a807      	add	r0, sp, #28
 801be46:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801be4a:	2b13      	cmp	r3, #19
 801be4c:	440b      	add	r3, r1
 801be4e:	bfd8      	it	le
 801be50:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801be54:	1a9b      	subs	r3, r3, r2
 801be56:	f8ad 201c 	strh.w	r2, [sp, #28]
 801be5a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801be5e:	f7ff f8a9 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801be62:	a807      	add	r0, sp, #28
 801be64:	f7fb fb4d 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 801be68:	2800      	cmp	r0, #0
 801be6a:	d199      	bne.n	801bda0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801be6c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801be70:	4425      	add	r5, r4
 801be72:	f8d8 0000 	ldr.w	r0, [r8]
 801be76:	f1bc 0f14 	cmp.w	ip, #20
 801be7a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801be7e:	f8d0 e000 	ldr.w	lr, [r0]
 801be82:	bfa8      	it	ge
 801be84:	f04f 0c14 	movge.w	ip, #20
 801be88:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801be8c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801be90:	fa1f fc8c 	uxth.w	ip, ip
 801be94:	f8cd c000 	str.w	ip, [sp]
 801be98:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801be9c:	47d0      	blx	sl
 801be9e:	4682      	mov	sl, r0
 801bea0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801bea4:	a807      	add	r0, sp, #28
 801bea6:	f7ff f86b 	bl	801af80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801beaa:	6823      	ldr	r3, [r4, #0]
 801beac:	4620      	mov	r0, r4
 801beae:	a907      	add	r1, sp, #28
 801beb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801beb2:	4798      	blx	r3
 801beb4:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801beb8:	eba0 000a 	sub.w	r0, r0, sl
 801bebc:	b200      	sxth	r0, r0
 801bebe:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801bec2:	2800      	cmp	r0, #0
 801bec4:	f47f af6c 	bne.w	801bda0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801bec8:	b2b1      	uxth	r1, r6
 801beca:	4648      	mov	r0, r9
 801becc:	f7ff fa9a 	bl	801b404 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bed0:	e766      	b.n	801bda0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801bed2:	d10c      	bne.n	801beee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801bed4:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801bed8:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801bedc:	45b4      	cmp	ip, r6
 801bede:	bfb4      	ite	lt
 801bee0:	4684      	movlt	ip, r0
 801bee2:	46d4      	movge	ip, sl
 801bee4:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801bee8:	4433      	add	r3, r6
 801beea:	b21b      	sxth	r3, r3
 801beec:	e750      	b.n	801bd90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801beee:	4575      	cmp	r5, lr
 801bef0:	46d4      	mov	ip, sl
 801bef2:	bfa8      	it	ge
 801bef4:	4675      	movge	r5, lr
 801bef6:	e74e      	b.n	801bd96 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801bef8:	eb0b 0006 	add.w	r0, fp, r6
 801befc:	4426      	add	r6, r4
 801befe:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801bf02:	f1b9 0f13 	cmp.w	r9, #19
 801bf06:	bfdc      	itt	le
 801bf08:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801bf0c:	444d      	addle	r5, r9
 801bf0e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801bf12:	bfd8      	it	le
 801bf14:	b22d      	sxthle	r5, r5
 801bf16:	f7fb faf4 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf1a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801bf1e:	2800      	cmp	r0, #0
 801bf20:	f47f af16 	bne.w	801bd50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801bf24:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801bf28:	fa1f f989 	uxth.w	r9, r9
 801bf2c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801bf30:	eba5 050c 	sub.w	r5, r5, ip
 801bf34:	fa1f f28c 	uxth.w	r2, ip
 801bf38:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801bf3c:	eb02 0009 	add.w	r0, r2, r9
 801bf40:	2d14      	cmp	r5, #20
 801bf42:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801bf46:	bfa8      	it	ge
 801bf48:	2514      	movge	r5, #20
 801bf4a:	b200      	sxth	r0, r0
 801bf4c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801bf50:	b289      	uxth	r1, r1
 801bf52:	fa1f fe85 	uxth.w	lr, r5
 801bf56:	eba0 000c 	sub.w	r0, r0, ip
 801bf5a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801bf5e:	4586      	cmp	lr, r0
 801bf60:	f8d8 0000 	ldr.w	r0, [r8]
 801bf64:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bf68:	b29b      	uxth	r3, r3
 801bf6a:	bfb8      	it	lt
 801bf6c:	46f1      	movlt	r9, lr
 801bf6e:	6805      	ldr	r5, [r0, #0]
 801bf70:	f8cd 9000 	str.w	r9, [sp]
 801bf74:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801bf78:	47a8      	blx	r5
 801bf7a:	6823      	ldr	r3, [r4, #0]
 801bf7c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801bf80:	a907      	add	r1, sp, #28
 801bf82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bf84:	4620      	mov	r0, r4
 801bf86:	4798      	blx	r3
 801bf88:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801bf8c:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801bf90:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801bf94:	1a5b      	subs	r3, r3, r1
 801bf96:	440a      	add	r2, r1
 801bf98:	b21b      	sxth	r3, r3
 801bf9a:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801bf9e:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	f47f aecf 	bne.w	801bd46 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801bfa8:	fa1f f18a 	uxth.w	r1, sl
 801bfac:	4658      	mov	r0, fp
 801bfae:	f7ff fa29 	bl	801b404 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bfb2:	e6c8      	b.n	801bd46 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801bfb4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bfb8:	42ab      	cmp	r3, r5
 801bfba:	f67f aea0 	bls.w	801bcfe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801bfbe:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801bfc2:	ab07      	add	r3, sp, #28
 801bfc4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801bfc8:	6851      	ldr	r1, [r2, #4]
 801bfca:	c303      	stmia	r3!, {r0, r1}
 801bfcc:	a807      	add	r0, sp, #28
 801bfce:	f7fb fa98 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bfd2:	b920      	cbnz	r0, 801bfde <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801bfd4:	6823      	ldr	r3, [r4, #0]
 801bfd6:	a907      	add	r1, sp, #28
 801bfd8:	4620      	mov	r0, r4
 801bfda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bfdc:	4798      	blx	r3
 801bfde:	3501      	adds	r5, #1
 801bfe0:	b2ad      	uxth	r5, r5
 801bfe2:	e7e7      	b.n	801bfb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801bfe4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801bfe4:	4b03      	ldr	r3, [pc, #12]	; (801bff4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801bfe6:	2200      	movs	r2, #0
 801bfe8:	801a      	strh	r2, [r3, #0]
 801bfea:	805a      	strh	r2, [r3, #2]
 801bfec:	809a      	strh	r2, [r3, #4]
 801bfee:	80da      	strh	r2, [r3, #6]
 801bff0:	4770      	bx	lr
 801bff2:	bf00      	nop
 801bff4:	2400af88 	.word	0x2400af88

0801bff8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bffc:	b09d      	sub	sp, #116	; 0x74
 801bffe:	4606      	mov	r6, r0
 801c000:	4614      	mov	r4, r2
 801c002:	468a      	mov	sl, r1
 801c004:	a803      	add	r0, sp, #12
 801c006:	461d      	mov	r5, r3
 801c008:	f000 fd7f 	bl	801cb0a <_ZN8touchgfx12TextProviderC1Ev>
 801c00c:	6833      	ldr	r3, [r6, #0]
 801c00e:	4630      	mov	r0, r6
 801c010:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801c014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c016:	4798      	blx	r3
 801c018:	6833      	ldr	r3, [r6, #0]
 801c01a:	4607      	mov	r7, r0
 801c01c:	4630      	mov	r0, r6
 801c01e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c020:	4798      	blx	r3
 801c022:	462a      	mov	r2, r5
 801c024:	2500      	movs	r5, #0
 801c026:	4621      	mov	r1, r4
 801c028:	9000      	str	r0, [sp, #0]
 801c02a:	463b      	mov	r3, r7
 801c02c:	462c      	mov	r4, r5
 801c02e:	46a9      	mov	r9, r5
 801c030:	46a8      	mov	r8, r5
 801c032:	a803      	add	r0, sp, #12
 801c034:	f000 fdbc 	bl	801cbb0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c038:	2300      	movs	r3, #0
 801c03a:	9302      	str	r3, [sp, #8]
 801c03c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c040:	429c      	cmp	r4, r3
 801c042:	d002      	beq.n	801c04a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c044:	455c      	cmp	r4, fp
 801c046:	bf18      	it	ne
 801c048:	4625      	movne	r5, r4
 801c04a:	ab02      	add	r3, sp, #8
 801c04c:	4632      	mov	r2, r6
 801c04e:	4651      	mov	r1, sl
 801c050:	a803      	add	r0, sp, #12
 801c052:	f001 f8ad 	bl	801d1b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c056:	4604      	mov	r4, r0
 801c058:	b108      	cbz	r0, 801c05e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c05a:	280a      	cmp	r0, #10
 801c05c:	d10a      	bne.n	801c074 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c05e:	45c1      	cmp	r9, r8
 801c060:	bf38      	it	cc
 801c062:	46c1      	movcc	r9, r8
 801c064:	f04f 0800 	mov.w	r8, #0
 801c068:	2c00      	cmp	r4, #0
 801c06a:	d1e5      	bne.n	801c038 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c06c:	4648      	mov	r0, r9
 801c06e:	b01d      	add	sp, #116	; 0x74
 801c070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c074:	9a02      	ldr	r2, [sp, #8]
 801c076:	2a00      	cmp	r2, #0
 801c078:	d0de      	beq.n	801c038 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c07a:	7b57      	ldrb	r7, [r2, #13]
 801c07c:	4629      	mov	r1, r5
 801c07e:	6833      	ldr	r3, [r6, #0]
 801c080:	007f      	lsls	r7, r7, #1
 801c082:	8894      	ldrh	r4, [r2, #4]
 801c084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c086:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c08a:	7a97      	ldrb	r7, [r2, #10]
 801c08c:	4307      	orrs	r7, r0
 801c08e:	4630      	mov	r0, r6
 801c090:	4798      	blx	r3
 801c092:	4438      	add	r0, r7
 801c094:	4480      	add	r8, r0
 801c096:	fa1f f888 	uxth.w	r8, r8
 801c09a:	e7e5      	b.n	801c068 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c09c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c09c:	b508      	push	{r3, lr}
 801c09e:	6803      	ldr	r3, [r0, #0]
 801c0a0:	68db      	ldr	r3, [r3, #12]
 801c0a2:	4798      	blx	r3
 801c0a4:	b128      	cbz	r0, 801c0b2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c0a6:	7b43      	ldrb	r3, [r0, #13]
 801c0a8:	7a80      	ldrb	r0, [r0, #10]
 801c0aa:	005b      	lsls	r3, r3, #1
 801c0ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c0b0:	4318      	orrs	r0, r3
 801c0b2:	bd08      	pop	{r3, pc}

0801c0b4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c0b4:	b40e      	push	{r1, r2, r3}
 801c0b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0b8:	b09e      	sub	sp, #120	; 0x78
 801c0ba:	4605      	mov	r5, r0
 801c0bc:	ab23      	add	r3, sp, #140	; 0x8c
 801c0be:	a805      	add	r0, sp, #20
 801c0c0:	f853 4b04 	ldr.w	r4, [r3], #4
 801c0c4:	9303      	str	r3, [sp, #12]
 801c0c6:	f000 fd20 	bl	801cb0a <_ZN8touchgfx12TextProviderC1Ev>
 801c0ca:	682b      	ldr	r3, [r5, #0]
 801c0cc:	4628      	mov	r0, r5
 801c0ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0d0:	4798      	blx	r3
 801c0d2:	682b      	ldr	r3, [r5, #0]
 801c0d4:	4606      	mov	r6, r0
 801c0d6:	4628      	mov	r0, r5
 801c0d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c0da:	4798      	blx	r3
 801c0dc:	4633      	mov	r3, r6
 801c0de:	4621      	mov	r1, r4
 801c0e0:	ae1e      	add	r6, sp, #120	; 0x78
 801c0e2:	2400      	movs	r4, #0
 801c0e4:	9000      	str	r0, [sp, #0]
 801c0e6:	9a03      	ldr	r2, [sp, #12]
 801c0e8:	a805      	add	r0, sp, #20
 801c0ea:	f000 fd61 	bl	801cbb0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c0ee:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c0f2:	462a      	mov	r2, r5
 801c0f4:	4633      	mov	r3, r6
 801c0f6:	4621      	mov	r1, r4
 801c0f8:	a805      	add	r0, sp, #20
 801c0fa:	f001 f859 	bl	801d1b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c0fe:	b300      	cbz	r0, 801c142 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801c100:	280a      	cmp	r0, #10
 801c102:	d01a      	beq.n	801c13a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c104:	9f04      	ldr	r7, [sp, #16]
 801c106:	b1c7      	cbz	r7, 801c13a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c108:	7b78      	ldrb	r0, [r7, #13]
 801c10a:	7a3b      	ldrb	r3, [r7, #8]
 801c10c:	00c1      	lsls	r1, r0, #3
 801c10e:	88aa      	ldrh	r2, [r5, #4]
 801c110:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c114:	4319      	orrs	r1, r3
 801c116:	0643      	lsls	r3, r0, #25
 801c118:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c11c:	bf48      	it	mi
 801c11e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801c122:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c126:	bf48      	it	mi
 801c128:	b219      	sxthmi	r1, r3
 801c12a:	79fb      	ldrb	r3, [r7, #7]
 801c12c:	4303      	orrs	r3, r0
 801c12e:	4413      	add	r3, r2
 801c130:	1a5b      	subs	r3, r3, r1
 801c132:	b29b      	uxth	r3, r3
 801c134:	42a3      	cmp	r3, r4
 801c136:	bfc8      	it	gt
 801c138:	b21c      	sxthgt	r4, r3
 801c13a:	4633      	mov	r3, r6
 801c13c:	462a      	mov	r2, r5
 801c13e:	2100      	movs	r1, #0
 801c140:	e7da      	b.n	801c0f8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c142:	b2a0      	uxth	r0, r4
 801c144:	b01e      	add	sp, #120	; 0x78
 801c146:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c14a:	b003      	add	sp, #12
 801c14c:	4770      	bx	lr

0801c14e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c14e:	b40e      	push	{r1, r2, r3}
 801c150:	b570      	push	{r4, r5, r6, lr}
 801c152:	b09d      	sub	sp, #116	; 0x74
 801c154:	4604      	mov	r4, r0
 801c156:	ab21      	add	r3, sp, #132	; 0x84
 801c158:	a803      	add	r0, sp, #12
 801c15a:	f853 5b04 	ldr.w	r5, [r3], #4
 801c15e:	9302      	str	r3, [sp, #8]
 801c160:	f000 fcd3 	bl	801cb0a <_ZN8touchgfx12TextProviderC1Ev>
 801c164:	6823      	ldr	r3, [r4, #0]
 801c166:	4620      	mov	r0, r4
 801c168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c16a:	4798      	blx	r3
 801c16c:	6823      	ldr	r3, [r4, #0]
 801c16e:	4606      	mov	r6, r0
 801c170:	4620      	mov	r0, r4
 801c172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c174:	2401      	movs	r4, #1
 801c176:	4798      	blx	r3
 801c178:	4633      	mov	r3, r6
 801c17a:	9000      	str	r0, [sp, #0]
 801c17c:	4629      	mov	r1, r5
 801c17e:	9a02      	ldr	r2, [sp, #8]
 801c180:	a803      	add	r0, sp, #12
 801c182:	f000 fd15 	bl	801cbb0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c186:	a803      	add	r0, sp, #12
 801c188:	f001 f90c 	bl	801d3a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c18c:	b2a3      	uxth	r3, r4
 801c18e:	b138      	cbz	r0, 801c1a0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801c190:	280a      	cmp	r0, #10
 801c192:	a803      	add	r0, sp, #12
 801c194:	bf04      	itt	eq
 801c196:	3301      	addeq	r3, #1
 801c198:	b21c      	sxtheq	r4, r3
 801c19a:	f001 f903 	bl	801d3a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c19e:	e7f5      	b.n	801c18c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c1a0:	4618      	mov	r0, r3
 801c1a2:	b01d      	add	sp, #116	; 0x74
 801c1a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c1a8:	b003      	add	sp, #12
 801c1aa:	4770      	bx	lr

0801c1ac <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c1ac:	b40e      	push	{r1, r2, r3}
 801c1ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1b0:	b09e      	sub	sp, #120	; 0x78
 801c1b2:	4604      	mov	r4, r0
 801c1b4:	ab23      	add	r3, sp, #140	; 0x8c
 801c1b6:	a805      	add	r0, sp, #20
 801c1b8:	f853 5b04 	ldr.w	r5, [r3], #4
 801c1bc:	9303      	str	r3, [sp, #12]
 801c1be:	f000 fca4 	bl	801cb0a <_ZN8touchgfx12TextProviderC1Ev>
 801c1c2:	6823      	ldr	r3, [r4, #0]
 801c1c4:	4620      	mov	r0, r4
 801c1c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c1c8:	4798      	blx	r3
 801c1ca:	6823      	ldr	r3, [r4, #0]
 801c1cc:	4606      	mov	r6, r0
 801c1ce:	4620      	mov	r0, r4
 801c1d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c1d2:	4798      	blx	r3
 801c1d4:	4633      	mov	r3, r6
 801c1d6:	4629      	mov	r1, r5
 801c1d8:	9000      	str	r0, [sp, #0]
 801c1da:	9a03      	ldr	r2, [sp, #12]
 801c1dc:	a805      	add	r0, sp, #20
 801c1de:	f000 fce7 	bl	801cbb0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c1e2:	ad1e      	add	r5, sp, #120	; 0x78
 801c1e4:	2100      	movs	r1, #0
 801c1e6:	26ff      	movs	r6, #255	; 0xff
 801c1e8:	4622      	mov	r2, r4
 801c1ea:	a805      	add	r0, sp, #20
 801c1ec:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c1f0:	462b      	mov	r3, r5
 801c1f2:	f000 ffdd 	bl	801d1b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c1f6:	b1d8      	cbz	r0, 801c230 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801c1f8:	280a      	cmp	r0, #10
 801c1fa:	d012      	beq.n	801c222 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c1fc:	9804      	ldr	r0, [sp, #16]
 801c1fe:	b180      	cbz	r0, 801c222 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c200:	7b47      	ldrb	r7, [r0, #13]
 801c202:	7922      	ldrb	r2, [r4, #4]
 801c204:	00fb      	lsls	r3, r7, #3
 801c206:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c20a:	7a03      	ldrb	r3, [r0, #8]
 801c20c:	430b      	orrs	r3, r1
 801c20e:	0679      	lsls	r1, r7, #25
 801c210:	bf44      	itt	mi
 801c212:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c216:	b21b      	sxthmi	r3, r3
 801c218:	1ad3      	subs	r3, r2, r3
 801c21a:	b2db      	uxtb	r3, r3
 801c21c:	429e      	cmp	r6, r3
 801c21e:	bf28      	it	cs
 801c220:	461e      	movcs	r6, r3
 801c222:	462b      	mov	r3, r5
 801c224:	4622      	mov	r2, r4
 801c226:	2100      	movs	r1, #0
 801c228:	a805      	add	r0, sp, #20
 801c22a:	f000 ffc1 	bl	801d1b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c22e:	e7e2      	b.n	801c1f6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801c230:	4630      	mov	r0, r6
 801c232:	b01e      	add	sp, #120	; 0x78
 801c234:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c238:	b003      	add	sp, #12
 801c23a:	4770      	bx	lr

0801c23c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c23c:	b513      	push	{r0, r1, r4, lr}
 801c23e:	6803      	ldr	r3, [r0, #0]
 801c240:	2400      	movs	r4, #0
 801c242:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c246:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c24a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c24e:	4669      	mov	r1, sp
 801c250:	691b      	ldr	r3, [r3, #16]
 801c252:	9400      	str	r4, [sp, #0]
 801c254:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c258:	4798      	blx	r3
 801c25a:	b002      	add	sp, #8
 801c25c:	bd10      	pop	{r4, pc}

0801c25e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c25e:	b538      	push	{r3, r4, r5, lr}
 801c260:	680b      	ldr	r3, [r1, #0]
 801c262:	460c      	mov	r4, r1
 801c264:	4605      	mov	r5, r0
 801c266:	68db      	ldr	r3, [r3, #12]
 801c268:	4798      	blx	r3
 801c26a:	6823      	ldr	r3, [r4, #0]
 801c26c:	4620      	mov	r0, r4
 801c26e:	4629      	mov	r1, r5
 801c270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c272:	4798      	blx	r3
 801c274:	4628      	mov	r0, r5
 801c276:	bd38      	pop	{r3, r4, r5, pc}

0801c278 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c278:	b410      	push	{r4}
 801c27a:	880a      	ldrh	r2, [r1, #0]
 801c27c:	8884      	ldrh	r4, [r0, #4]
 801c27e:	4422      	add	r2, r4
 801c280:	800a      	strh	r2, [r1, #0]
 801c282:	884a      	ldrh	r2, [r1, #2]
 801c284:	88c4      	ldrh	r4, [r0, #6]
 801c286:	4422      	add	r2, r4
 801c288:	804a      	strh	r2, [r1, #2]
 801c28a:	6940      	ldr	r0, [r0, #20]
 801c28c:	b120      	cbz	r0, 801c298 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c28e:	6803      	ldr	r3, [r0, #0]
 801c290:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c296:	4718      	bx	r3
 801c298:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c29c:	4770      	bx	lr

0801c29e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c29e:	b570      	push	{r4, r5, r6, lr}
 801c2a0:	8882      	ldrh	r2, [r0, #4]
 801c2a2:	460c      	mov	r4, r1
 801c2a4:	880b      	ldrh	r3, [r1, #0]
 801c2a6:	4605      	mov	r5, r0
 801c2a8:	4413      	add	r3, r2
 801c2aa:	800b      	strh	r3, [r1, #0]
 801c2ac:	884b      	ldrh	r3, [r1, #2]
 801c2ae:	88c2      	ldrh	r2, [r0, #6]
 801c2b0:	4413      	add	r3, r2
 801c2b2:	804b      	strh	r3, [r1, #2]
 801c2b4:	1d01      	adds	r1, r0, #4
 801c2b6:	4620      	mov	r0, r4
 801c2b8:	f7fb f8e0 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 801c2bc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	dd0b      	ble.n	801c2dc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c2c4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	dd07      	ble.n	801c2dc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c2cc:	6968      	ldr	r0, [r5, #20]
 801c2ce:	b128      	cbz	r0, 801c2dc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c2d0:	6803      	ldr	r3, [r0, #0]
 801c2d2:	4621      	mov	r1, r4
 801c2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c2da:	4718      	bx	r3
 801c2dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c2e0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c2e0:	b570      	push	{r4, r5, r6, lr}
 801c2e2:	8882      	ldrh	r2, [r0, #4]
 801c2e4:	460c      	mov	r4, r1
 801c2e6:	880b      	ldrh	r3, [r1, #0]
 801c2e8:	4605      	mov	r5, r0
 801c2ea:	4413      	add	r3, r2
 801c2ec:	800b      	strh	r3, [r1, #0]
 801c2ee:	884b      	ldrh	r3, [r1, #2]
 801c2f0:	88c2      	ldrh	r2, [r0, #6]
 801c2f2:	4413      	add	r3, r2
 801c2f4:	804b      	strh	r3, [r1, #2]
 801c2f6:	1d01      	adds	r1, r0, #4
 801c2f8:	4620      	mov	r0, r4
 801c2fa:	f7fb f8bf 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 801c2fe:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c302:	2b00      	cmp	r3, #0
 801c304:	dd15      	ble.n	801c332 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801c306:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	dd11      	ble.n	801c332 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801c30e:	6968      	ldr	r0, [r5, #20]
 801c310:	b128      	cbz	r0, 801c31e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c312:	6803      	ldr	r3, [r0, #0]
 801c314:	691b      	ldr	r3, [r3, #16]
 801c316:	4621      	mov	r1, r4
 801c318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c31c:	4718      	bx	r3
 801c31e:	4b05      	ldr	r3, [pc, #20]	; (801c334 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	3304      	adds	r3, #4
 801c324:	429d      	cmp	r5, r3
 801c326:	d104      	bne.n	801c332 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801c328:	f7fe ffbe 	bl	801b2a8 <_ZN8touchgfx11Application11getInstanceEv>
 801c32c:	6803      	ldr	r3, [r0, #0]
 801c32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c330:	e7f1      	b.n	801c316 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801c332:	bd70      	pop	{r4, r5, r6, pc}
 801c334:	2400af80 	.word	0x2400af80

0801c338 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c338:	b570      	push	{r4, r5, r6, lr}
 801c33a:	4604      	mov	r4, r0
 801c33c:	4616      	mov	r6, r2
 801c33e:	460d      	mov	r5, r1
 801c340:	b901      	cbnz	r1, 801c344 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c342:	b192      	cbz	r2, 801c36a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c344:	6823      	ldr	r3, [r4, #0]
 801c346:	4620      	mov	r0, r4
 801c348:	695b      	ldr	r3, [r3, #20]
 801c34a:	4798      	blx	r3
 801c34c:	88e2      	ldrh	r2, [r4, #6]
 801c34e:	88a1      	ldrh	r1, [r4, #4]
 801c350:	4620      	mov	r0, r4
 801c352:	4432      	add	r2, r6
 801c354:	4429      	add	r1, r5
 801c356:	b212      	sxth	r2, r2
 801c358:	b209      	sxth	r1, r1
 801c35a:	f7e9 fd43 	bl	8005de4 <_ZN8touchgfx8Drawable5setXYEss>
 801c35e:	6823      	ldr	r3, [r4, #0]
 801c360:	4620      	mov	r0, r4
 801c362:	695b      	ldr	r3, [r3, #20]
 801c364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c368:	4718      	bx	r3
 801c36a:	bd70      	pop	{r4, r5, r6, pc}

0801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c36c:	b510      	push	{r4, lr}
 801c36e:	2300      	movs	r3, #0
 801c370:	4604      	mov	r4, r0
 801c372:	4608      	mov	r0, r1
 801c374:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c378:	8023      	strh	r3, [r4, #0]
 801c37a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c37e:	8063      	strh	r3, [r4, #2]
 801c380:	6803      	ldr	r3, [r0, #0]
 801c382:	80a1      	strh	r1, [r4, #4]
 801c384:	4621      	mov	r1, r4
 801c386:	80e2      	strh	r2, [r4, #6]
 801c388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c38a:	4798      	blx	r3
 801c38c:	4620      	mov	r0, r4
 801c38e:	bd10      	pop	{r4, pc}

0801c390 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801c390:	b530      	push	{r4, r5, lr}
 801c392:	8083      	strh	r3, [r0, #4]
 801c394:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c398:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801c39c:	7183      	strb	r3, [r0, #6]
 801c39e:	79c3      	ldrb	r3, [r0, #7]
 801c3a0:	6101      	str	r1, [r0, #16]
 801c3a2:	f365 0306 	bfi	r3, r5, #0, #7
 801c3a6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c3aa:	8282      	strh	r2, [r0, #20]
 801c3ac:	f365 13c7 	bfi	r3, r5, #7, #1
 801c3b0:	71c3      	strb	r3, [r0, #7]
 801c3b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801c3b6:	7203      	strb	r3, [r0, #8]
 801c3b8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801c3bc:	7243      	strb	r3, [r0, #9]
 801c3be:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c3c2:	8143      	strh	r3, [r0, #10]
 801c3c4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801c3c8:	8183      	strh	r3, [r0, #12]
 801c3ca:	4b01      	ldr	r3, [pc, #4]	; (801c3d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801c3cc:	6003      	str	r3, [r0, #0]
 801c3ce:	bd30      	pop	{r4, r5, pc}
 801c3d0:	0802d778 	.word	0x0802d778

0801c3d4 <_ZNK8touchgfx9ConstFont4findEt>:
 801c3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3d6:	6904      	ldr	r4, [r0, #16]
 801c3d8:	b3bc      	cbz	r4, 801c44a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c3da:	88a3      	ldrh	r3, [r4, #4]
 801c3dc:	8a82      	ldrh	r2, [r0, #20]
 801c3de:	1acb      	subs	r3, r1, r3
 801c3e0:	f102 32ff 	add.w	r2, r2, #4294967295
 801c3e4:	d431      	bmi.n	801c44a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c3e6:	4293      	cmp	r3, r2
 801c3e8:	dd0c      	ble.n	801c404 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c3ea:	230e      	movs	r3, #14
 801c3ec:	fb03 4302 	mla	r3, r3, r2, r4
 801c3f0:	889b      	ldrh	r3, [r3, #4]
 801c3f2:	1a5b      	subs	r3, r3, r1
 801c3f4:	1ad3      	subs	r3, r2, r3
 801c3f6:	429a      	cmp	r2, r3
 801c3f8:	db27      	blt.n	801c44a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	bfbc      	itt	lt
 801c3fe:	2302      	movlt	r3, #2
 801c400:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c404:	2500      	movs	r5, #0
 801c406:	260e      	movs	r6, #14
 801c408:	4295      	cmp	r5, r2
 801c40a:	dc1e      	bgt.n	801c44a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c40c:	fb06 4003 	mla	r0, r6, r3, r4
 801c410:	8887      	ldrh	r7, [r0, #4]
 801c412:	42b9      	cmp	r1, r7
 801c414:	d01a      	beq.n	801c44c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c416:	d20d      	bcs.n	801c434 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c418:	1e5a      	subs	r2, r3, #1
 801c41a:	4295      	cmp	r5, r2
 801c41c:	dc15      	bgt.n	801c44a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c41e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c422:	1a5b      	subs	r3, r3, r1
 801c424:	1ad3      	subs	r3, r2, r3
 801c426:	429a      	cmp	r2, r3
 801c428:	db0f      	blt.n	801c44a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c42a:	429d      	cmp	r5, r3
 801c42c:	ddec      	ble.n	801c408 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c42e:	1953      	adds	r3, r2, r5
 801c430:	105b      	asrs	r3, r3, #1
 801c432:	e7e9      	b.n	801c408 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c434:	1c5d      	adds	r5, r3, #1
 801c436:	42aa      	cmp	r2, r5
 801c438:	db07      	blt.n	801c44a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c43a:	8a43      	ldrh	r3, [r0, #18]
 801c43c:	1acb      	subs	r3, r1, r3
 801c43e:	442b      	add	r3, r5
 801c440:	429d      	cmp	r5, r3
 801c442:	dc02      	bgt.n	801c44a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c444:	429a      	cmp	r2, r3
 801c446:	dadf      	bge.n	801c408 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c448:	e7f1      	b.n	801c42e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c44a:	2000      	movs	r0, #0
 801c44c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c44e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c44e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c450:	4604      	mov	r4, r0
 801c452:	4617      	mov	r7, r2
 801c454:	461e      	mov	r6, r3
 801c456:	b911      	cbnz	r1, 801c45e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c458:	2500      	movs	r5, #0
 801c45a:	4628      	mov	r0, r5
 801c45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c45e:	290a      	cmp	r1, #10
 801c460:	d0fa      	beq.n	801c458 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c462:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c466:	4291      	cmp	r1, r2
 801c468:	d0f6      	beq.n	801c458 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c46a:	f242 020b 	movw	r2, #8203	; 0x200b
 801c46e:	4291      	cmp	r1, r2
 801c470:	d0f2      	beq.n	801c458 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c472:	f7ff ffaf 	bl	801c3d4 <_ZNK8touchgfx9ConstFont4findEt>
 801c476:	4605      	mov	r5, r0
 801c478:	b950      	cbnz	r0, 801c490 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c47a:	6823      	ldr	r3, [r4, #0]
 801c47c:	4620      	mov	r0, r4
 801c47e:	691b      	ldr	r3, [r3, #16]
 801c480:	4798      	blx	r3
 801c482:	4601      	mov	r1, r0
 801c484:	4620      	mov	r0, r4
 801c486:	f7ff ffa5 	bl	801c3d4 <_ZNK8touchgfx9ConstFont4findEt>
 801c48a:	4605      	mov	r5, r0
 801c48c:	2800      	cmp	r0, #0
 801c48e:	d0e3      	beq.n	801c458 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c490:	6823      	ldr	r3, [r4, #0]
 801c492:	4629      	mov	r1, r5
 801c494:	4620      	mov	r0, r4
 801c496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c498:	4798      	blx	r3
 801c49a:	6038      	str	r0, [r7, #0]
 801c49c:	6823      	ldr	r3, [r4, #0]
 801c49e:	4620      	mov	r0, r4
 801c4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c4a2:	4798      	blx	r3
 801c4a4:	7030      	strb	r0, [r6, #0]
 801c4a6:	e7d8      	b.n	801c45a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c4a8 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801c4a8:	2002      	movs	r0, #2
 801c4aa:	4770      	bx	lr

0801c4ac <_ZN8touchgfx12GestureEventD1Ev>:
 801c4ac:	4770      	bx	lr

0801c4ae <_ZN8touchgfx12GestureEventD0Ev>:
 801c4ae:	b510      	push	{r4, lr}
 801c4b0:	4604      	mov	r4, r0
 801c4b2:	210c      	movs	r1, #12
 801c4b4:	f00d fbed 	bl	8029c92 <_ZdlPvj>
 801c4b8:	4620      	mov	r0, r4
 801c4ba:	bd10      	pop	{r4, pc}

0801c4bc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c4bc:	b530      	push	{r4, r5, lr}
 801c4be:	460d      	mov	r5, r1
 801c4c0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c4c2:	b087      	sub	sp, #28
 801c4c4:	4604      	mov	r4, r0
 801c4c6:	b301      	cbz	r1, 801c50a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c4c8:	a801      	add	r0, sp, #4
 801c4ca:	f7ff ff4f 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c4ce:	892a      	ldrh	r2, [r5, #8]
 801c4d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c4d4:	7928      	ldrb	r0, [r5, #4]
 801c4d6:	1ad2      	subs	r2, r2, r3
 801c4d8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c4da:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c4de:	441a      	add	r2, r3
 801c4e0:	896b      	ldrh	r3, [r5, #10]
 801c4e2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c4e6:	f88d 0010 	strb.w	r0, [sp, #16]
 801c4ea:	1b5b      	subs	r3, r3, r5
 801c4ec:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801c4ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c4f0:	442b      	add	r3, r5
 801c4f2:	4d07      	ldr	r5, [pc, #28]	; (801c510 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c4f4:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c4f8:	a903      	add	r1, sp, #12
 801c4fa:	9503      	str	r5, [sp, #12]
 801c4fc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c500:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c504:	6803      	ldr	r3, [r0, #0]
 801c506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c508:	4798      	blx	r3
 801c50a:	b007      	add	sp, #28
 801c50c:	bd30      	pop	{r4, r5, pc}
 801c50e:	bf00      	nop
 801c510:	0802d7d0 	.word	0x0802d7d0

0801c514 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c518:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c51a:	b08a      	sub	sp, #40	; 0x28
 801c51c:	4604      	mov	r4, r0
 801c51e:	460d      	mov	r5, r1
 801c520:	b113      	cbz	r3, 801c528 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801c522:	790b      	ldrb	r3, [r1, #4]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d044      	beq.n	801c5b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c528:	f104 0804 	add.w	r8, r4, #4
 801c52c:	a803      	add	r0, sp, #12
 801c52e:	4641      	mov	r1, r8
 801c530:	f7ff ff1c 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c534:	792b      	ldrb	r3, [r5, #4]
 801c536:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c53a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801c53e:	b983      	cbnz	r3, 801c562 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801c540:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801c544:	892a      	ldrh	r2, [r5, #8]
 801c546:	88e9      	ldrh	r1, [r5, #6]
 801c548:	4640      	mov	r0, r8
 801c54a:	1b92      	subs	r2, r2, r6
 801c54c:	9301      	str	r3, [sp, #4]
 801c54e:	1bc9      	subs	r1, r1, r7
 801c550:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801c554:	b212      	sxth	r2, r2
 801c556:	9300      	str	r3, [sp, #0]
 801c558:	b209      	sxth	r1, r1
 801c55a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801c55e:	f7fa feab 	bl	80172b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801c562:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c564:	b329      	cbz	r1, 801c5b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c566:	a805      	add	r0, sp, #20
 801c568:	f7ff ff00 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c56c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c570:	792b      	ldrb	r3, [r5, #4]
 801c572:	a907      	add	r1, sp, #28
 801c574:	1abf      	subs	r7, r7, r2
 801c576:	88ea      	ldrh	r2, [r5, #6]
 801c578:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c57a:	4417      	add	r7, r2
 801c57c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801c57e:	f88d 3020 	strb.w	r3, [sp, #32]
 801c582:	4417      	add	r7, r2
 801c584:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c588:	1ab6      	subs	r6, r6, r2
 801c58a:	892a      	ldrh	r2, [r5, #8]
 801c58c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801c590:	4416      	add	r6, r2
 801c592:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c594:	4416      	add	r6, r2
 801c596:	4a08      	ldr	r2, [pc, #32]	; (801c5b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c598:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801c59c:	2600      	movs	r6, #0
 801c59e:	9207      	str	r2, [sp, #28]
 801c5a0:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801c5a4:	6803      	ldr	r3, [r0, #0]
 801c5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5a8:	4798      	blx	r3
 801c5aa:	792b      	ldrb	r3, [r5, #4]
 801c5ac:	b10b      	cbz	r3, 801c5b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c5ae:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c5b2:	b00a      	add	sp, #40	; 0x28
 801c5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5b8:	0802c730 	.word	0x0802c730

0801c5bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5c0:	460c      	mov	r4, r1
 801c5c2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c5c4:	b088      	sub	sp, #32
 801c5c6:	4605      	mov	r5, r0
 801c5c8:	2900      	cmp	r1, #0
 801c5ca:	d06d      	beq.n	801c6a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c5cc:	4668      	mov	r0, sp
 801c5ce:	f7ff fecd 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c5d2:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801c5d4:	88e3      	ldrh	r3, [r4, #6]
 801c5d6:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c5da:	440b      	add	r3, r1
 801c5dc:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c5e0:	b21b      	sxth	r3, r3
 801c5e2:	4543      	cmp	r3, r8
 801c5e4:	db31      	blt.n	801c64a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c5e6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c5ea:	44c4      	add	ip, r8
 801c5ec:	fa0f fc8c 	sxth.w	ip, ip
 801c5f0:	4563      	cmp	r3, ip
 801c5f2:	da2a      	bge.n	801c64a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c5f4:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801c5f6:	8926      	ldrh	r6, [r4, #8]
 801c5f8:	4416      	add	r6, r2
 801c5fa:	b236      	sxth	r6, r6
 801c5fc:	42be      	cmp	r6, r7
 801c5fe:	db24      	blt.n	801c64a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c600:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c604:	4438      	add	r0, r7
 801c606:	b200      	sxth	r0, r0
 801c608:	4286      	cmp	r6, r0
 801c60a:	da1e      	bge.n	801c64a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c60c:	8963      	ldrh	r3, [r4, #10]
 801c60e:	4419      	add	r1, r3
 801c610:	b209      	sxth	r1, r1
 801c612:	4541      	cmp	r1, r8
 801c614:	db08      	blt.n	801c628 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c616:	4561      	cmp	r1, ip
 801c618:	da06      	bge.n	801c628 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c61a:	89a3      	ldrh	r3, [r4, #12]
 801c61c:	441a      	add	r2, r3
 801c61e:	b212      	sxth	r2, r2
 801c620:	42ba      	cmp	r2, r7
 801c622:	db01      	blt.n	801c628 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c624:	4282      	cmp	r2, r0
 801c626:	db10      	blt.n	801c64a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c628:	4b21      	ldr	r3, [pc, #132]	; (801c6b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c62a:	a904      	add	r1, sp, #16
 801c62c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c62e:	9304      	str	r3, [sp, #16]
 801c630:	2302      	movs	r3, #2
 801c632:	f88d 3014 	strb.w	r3, [sp, #20]
 801c636:	2300      	movs	r3, #0
 801c638:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c63c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c640:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c644:	6803      	ldr	r3, [r0, #0]
 801c646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c648:	4798      	blx	r3
 801c64a:	1d29      	adds	r1, r5, #4
 801c64c:	a802      	add	r0, sp, #8
 801c64e:	f7ff fe8d 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c652:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c656:	88e0      	ldrh	r0, [r4, #6]
 801c658:	eba3 0808 	sub.w	r8, r3, r8
 801c65c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c660:	7921      	ldrb	r1, [r4, #4]
 801c662:	fa1f f888 	uxth.w	r8, r8
 801c666:	1bdf      	subs	r7, r3, r7
 801c668:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801c66c:	b2bb      	uxth	r3, r7
 801c66e:	4440      	add	r0, r8
 801c670:	8922      	ldrh	r2, [r4, #8]
 801c672:	8967      	ldrh	r7, [r4, #10]
 801c674:	4460      	add	r0, ip
 801c676:	89a4      	ldrh	r4, [r4, #12]
 801c678:	441a      	add	r2, r3
 801c67a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801c67c:	44b8      	add	r8, r7
 801c67e:	4423      	add	r3, r4
 801c680:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c684:	4432      	add	r2, r6
 801c686:	44e0      	add	r8, ip
 801c688:	4433      	add	r3, r6
 801c68a:	4c0a      	ldr	r4, [pc, #40]	; (801c6b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c68c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c68e:	f88d 1014 	strb.w	r1, [sp, #20]
 801c692:	a904      	add	r1, sp, #16
 801c694:	9404      	str	r4, [sp, #16]
 801c696:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c69a:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c69e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c6a2:	6803      	ldr	r3, [r0, #0]
 801c6a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c6a6:	4798      	blx	r3
 801c6a8:	b008      	add	sp, #32
 801c6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6ae:	bf00      	nop
 801c6b0:	0802c730 	.word	0x0802c730
 801c6b4:	0802c744 	.word	0x0802c744

0801c6b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c6ba:	4604      	mov	r4, r0
 801c6bc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c6c0:	3201      	adds	r2, #1
 801c6c2:	d112      	bne.n	801c6ea <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c6c4:	2500      	movs	r5, #0
 801c6c6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c6ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c6ce:	6803      	ldr	r3, [r0, #0]
 801c6d0:	9500      	str	r5, [sp, #0]
 801c6d2:	466d      	mov	r5, sp
 801c6d4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c6d8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c6dc:	4629      	mov	r1, r5
 801c6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6e0:	4798      	blx	r3
 801c6e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c6e6:	e884 0003 	stmia.w	r4, {r0, r1}
 801c6ea:	4620      	mov	r0, r4
 801c6ec:	b003      	add	sp, #12
 801c6ee:	bd30      	pop	{r4, r5, pc}

0801c6f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c6f0:	b513      	push	{r0, r1, r4, lr}
 801c6f2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c6f6:	4604      	mov	r4, r0
 801c6f8:	3301      	adds	r3, #1
 801c6fa:	d109      	bne.n	801c710 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c6fc:	4601      	mov	r1, r0
 801c6fe:	4668      	mov	r0, sp
 801c700:	f7ff fe34 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c704:	f8bd 3000 	ldrh.w	r3, [sp]
 801c708:	8423      	strh	r3, [r4, #32]
 801c70a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c70e:	8463      	strh	r3, [r4, #34]	; 0x22
 801c710:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c714:	b002      	add	sp, #8
 801c716:	bd10      	pop	{r4, pc}

0801c718 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c718:	b513      	push	{r0, r1, r4, lr}
 801c71a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c71e:	4604      	mov	r4, r0
 801c720:	3301      	adds	r3, #1
 801c722:	d109      	bne.n	801c738 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c724:	4601      	mov	r1, r0
 801c726:	4668      	mov	r0, sp
 801c728:	f7ff fe20 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c72c:	f8bd 3000 	ldrh.w	r3, [sp]
 801c730:	8423      	strh	r3, [r4, #32]
 801c732:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c736:	8463      	strh	r3, [r4, #34]	; 0x22
 801c738:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c73c:	b002      	add	sp, #8
 801c73e:	bd10      	pop	{r4, pc}

0801c740 <_ZN8touchgfx6ScreenC1Ev>:
 801c740:	b570      	push	{r4, r5, r6, lr}
 801c742:	4b17      	ldr	r3, [pc, #92]	; (801c7a0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c744:	4605      	mov	r5, r0
 801c746:	4a17      	ldr	r2, [pc, #92]	; (801c7a4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c748:	2101      	movs	r1, #1
 801c74a:	f845 3b04 	str.w	r3, [r5], #4
 801c74e:	2300      	movs	r3, #0
 801c750:	6042      	str	r2, [r0, #4]
 801c752:	4604      	mov	r4, r0
 801c754:	8103      	strh	r3, [r0, #8]
 801c756:	8143      	strh	r3, [r0, #10]
 801c758:	8183      	strh	r3, [r0, #12]
 801c75a:	81c3      	strh	r3, [r0, #14]
 801c75c:	8203      	strh	r3, [r0, #16]
 801c75e:	8243      	strh	r3, [r0, #18]
 801c760:	8283      	strh	r3, [r0, #20]
 801c762:	82c3      	strh	r3, [r0, #22]
 801c764:	6203      	str	r3, [r0, #32]
 801c766:	8483      	strh	r3, [r0, #36]	; 0x24
 801c768:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c76a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801c76e:	6343      	str	r3, [r0, #52]	; 0x34
 801c770:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801c774:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801c778:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c77c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801c780:	4b09      	ldr	r3, [pc, #36]	; (801c7a8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c782:	4628      	mov	r0, r5
 801c784:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c788:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801c78a:	4a08      	ldr	r2, [pc, #32]	; (801c7ac <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c78c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c790:	4798      	blx	r3
 801c792:	6863      	ldr	r3, [r4, #4]
 801c794:	4628      	mov	r0, r5
 801c796:	4631      	mov	r1, r6
 801c798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c79a:	4798      	blx	r3
 801c79c:	4620      	mov	r0, r4
 801c79e:	bd70      	pop	{r4, r5, r6, pc}
 801c7a0:	0802d7e4 	.word	0x0802d7e4
 801c7a4:	0802c668 	.word	0x0802c668
 801c7a8:	2400af3a 	.word	0x2400af3a
 801c7ac:	2400af38 	.word	0x2400af38

0801c7b0 <_ZN8touchgfx6Screen4drawEv>:
 801c7b0:	4b09      	ldr	r3, [pc, #36]	; (801c7d8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c7b2:	b507      	push	{r0, r1, r2, lr}
 801c7b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c7b8:	2100      	movs	r1, #0
 801c7ba:	4b08      	ldr	r3, [pc, #32]	; (801c7dc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c7bc:	9100      	str	r1, [sp, #0]
 801c7be:	4669      	mov	r1, sp
 801c7c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c7c4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c7c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c7cc:	6803      	ldr	r3, [r0, #0]
 801c7ce:	689b      	ldr	r3, [r3, #8]
 801c7d0:	4798      	blx	r3
 801c7d2:	b003      	add	sp, #12
 801c7d4:	f85d fb04 	ldr.w	pc, [sp], #4
 801c7d8:	2400af38 	.word	0x2400af38
 801c7dc:	2400af3a 	.word	0x2400af3a

0801c7e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7e4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c7e8:	b089      	sub	sp, #36	; 0x24
 801c7ea:	4680      	mov	r8, r0
 801c7ec:	460c      	mov	r4, r1
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	4615      	mov	r5, r2
 801c7f2:	dd0e      	ble.n	801c812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c7f4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	dd0a      	ble.n	801c812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c7fc:	4628      	mov	r0, r5
 801c7fe:	f7ff ff5b 	bl	801c6b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c802:	4621      	mov	r1, r4
 801c804:	f7fe fd0c 	bl	801b220 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c808:	69eb      	ldr	r3, [r5, #28]
 801c80a:	b928      	cbnz	r0, 801c818 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c80c:	461d      	mov	r5, r3
 801c80e:	2b00      	cmp	r3, #0
 801c810:	d1f4      	bne.n	801c7fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c812:	b009      	add	sp, #36	; 0x24
 801c814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c818:	ae04      	add	r6, sp, #16
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	f000 80b5 	beq.w	801c98a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c820:	682b      	ldr	r3, [r5, #0]
 801c822:	4629      	mov	r1, r5
 801c824:	a802      	add	r0, sp, #8
 801c826:	68db      	ldr	r3, [r3, #12]
 801c828:	4798      	blx	r3
 801c82a:	4628      	mov	r0, r5
 801c82c:	f7ff ff60 	bl	801c6f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c830:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c834:	4407      	add	r7, r0
 801c836:	4628      	mov	r0, r5
 801c838:	f7ff ff6e 	bl	801c718 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c83c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c840:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c844:	b23f      	sxth	r7, r7
 801c846:	4418      	add	r0, r3
 801c848:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c84c:	4621      	mov	r1, r4
 801c84e:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c852:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c856:	4630      	mov	r0, r6
 801c858:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c85c:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c860:	f7fa fe0c 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 801c864:	4628      	mov	r0, r5
 801c866:	f7ff ff27 	bl	801c6b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c86a:	ab06      	add	r3, sp, #24
 801c86c:	4602      	mov	r2, r0
 801c86e:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c872:	e883 0003 	stmia.w	r3, {r0, r1}
 801c876:	4611      	mov	r1, r2
 801c878:	4618      	mov	r0, r3
 801c87a:	f7fa fdff 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 801c87e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c882:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c886:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c88a:	4299      	cmp	r1, r3
 801c88c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c890:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c894:	d10b      	bne.n	801c8ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c896:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c89a:	4552      	cmp	r2, sl
 801c89c:	d107      	bne.n	801c8ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c89e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c8a2:	455a      	cmp	r2, fp
 801c8a4:	d103      	bne.n	801c8ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c8a6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c8aa:	454a      	cmp	r2, r9
 801c8ac:	d06d      	beq.n	801c98a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c8ae:	f1bb 0f00 	cmp.w	fp, #0
 801c8b2:	dd65      	ble.n	801c980 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c8b4:	f1b9 0f00 	cmp.w	r9, #0
 801c8b8:	dd62      	ble.n	801c980 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c8ba:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c8be:	fa1f f08a 	uxth.w	r0, sl
 801c8c2:	4552      	cmp	r2, sl
 801c8c4:	9000      	str	r0, [sp, #0]
 801c8c6:	da12      	bge.n	801c8ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c8c8:	9301      	str	r3, [sp, #4]
 801c8ca:	9b00      	ldr	r3, [sp, #0]
 801c8cc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c8d0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c8d4:	1a9a      	subs	r2, r3, r2
 801c8d6:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c8da:	4631      	mov	r1, r6
 801c8dc:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c8e0:	4640      	mov	r0, r8
 801c8e2:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c8e6:	69ea      	ldr	r2, [r5, #28]
 801c8e8:	f7ff ff7a 	bl	801c7e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c8ec:	9b01      	ldr	r3, [sp, #4]
 801c8ee:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c8f2:	b29f      	uxth	r7, r3
 801c8f4:	429a      	cmp	r2, r3
 801c8f6:	da0d      	bge.n	801c914 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c8f8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c8fc:	1aba      	subs	r2, r7, r2
 801c8fe:	f8ad a012 	strh.w	sl, [sp, #18]
 801c902:	4631      	mov	r1, r6
 801c904:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c908:	4640      	mov	r0, r8
 801c90a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c90e:	69ea      	ldr	r2, [r5, #28]
 801c910:	f7ff ff66 	bl	801c7e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c914:	8822      	ldrh	r2, [r4, #0]
 801c916:	445f      	add	r7, fp
 801c918:	88a3      	ldrh	r3, [r4, #4]
 801c91a:	b2bf      	uxth	r7, r7
 801c91c:	4413      	add	r3, r2
 801c91e:	b23a      	sxth	r2, r7
 801c920:	b29b      	uxth	r3, r3
 801c922:	b219      	sxth	r1, r3
 801c924:	4291      	cmp	r1, r2
 801c926:	dd0d      	ble.n	801c944 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c928:	1bdb      	subs	r3, r3, r7
 801c92a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c92e:	f8ad a012 	strh.w	sl, [sp, #18]
 801c932:	4631      	mov	r1, r6
 801c934:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c938:	4640      	mov	r0, r8
 801c93a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c93e:	69ea      	ldr	r2, [r5, #28]
 801c940:	f7ff ff4e 	bl	801c7e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c944:	88e2      	ldrh	r2, [r4, #6]
 801c946:	8863      	ldrh	r3, [r4, #2]
 801c948:	4413      	add	r3, r2
 801c94a:	9a00      	ldr	r2, [sp, #0]
 801c94c:	444a      	add	r2, r9
 801c94e:	b29b      	uxth	r3, r3
 801c950:	fa1f f982 	uxth.w	r9, r2
 801c954:	b219      	sxth	r1, r3
 801c956:	fa0f f289 	sxth.w	r2, r9
 801c95a:	428a      	cmp	r2, r1
 801c95c:	da15      	bge.n	801c98a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c95e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c962:	eba3 0309 	sub.w	r3, r3, r9
 801c966:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c96a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c96e:	4631      	mov	r1, r6
 801c970:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c974:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c978:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c97c:	69ea      	ldr	r2, [r5, #28]
 801c97e:	e001      	b.n	801c984 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c980:	69ea      	ldr	r2, [r5, #28]
 801c982:	4621      	mov	r1, r4
 801c984:	4640      	mov	r0, r8
 801c986:	f7ff ff2b 	bl	801c7e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c98a:	4628      	mov	r0, r5
 801c98c:	f7ff fe94 	bl	801c6b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c990:	6861      	ldr	r1, [r4, #4]
 801c992:	4602      	mov	r2, r0
 801c994:	4633      	mov	r3, r6
 801c996:	6820      	ldr	r0, [r4, #0]
 801c998:	c303      	stmia	r3!, {r0, r1}
 801c99a:	4611      	mov	r1, r2
 801c99c:	4630      	mov	r0, r6
 801c99e:	f7fa fd6d 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 801c9a2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	f77f af33 	ble.w	801c812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c9ac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	f77f af2e 	ble.w	801c812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c9b6:	4628      	mov	r0, r5
 801c9b8:	f7ff fe9a 	bl	801c6f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c9bc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c9c0:	1a18      	subs	r0, r3, r0
 801c9c2:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c9c6:	4628      	mov	r0, r5
 801c9c8:	f7ff fea6 	bl	801c718 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c9cc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c9d0:	4631      	mov	r1, r6
 801c9d2:	1a18      	subs	r0, r3, r0
 801c9d4:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c9d8:	4628      	mov	r0, r5
 801c9da:	682b      	ldr	r3, [r5, #0]
 801c9dc:	689b      	ldr	r3, [r3, #8]
 801c9de:	4798      	blx	r3
 801c9e0:	e717      	b.n	801c812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c9e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c9e2:	b570      	push	{r4, r5, r6, lr}
 801c9e4:	1d06      	adds	r6, r0, #4
 801c9e6:	b086      	sub	sp, #24
 801c9e8:	460c      	mov	r4, r1
 801c9ea:	2300      	movs	r3, #0
 801c9ec:	4631      	mov	r1, r6
 801c9ee:	4605      	mov	r5, r0
 801c9f0:	a802      	add	r0, sp, #8
 801c9f2:	9301      	str	r3, [sp, #4]
 801c9f4:	f7ff fcba 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c9f8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c9fc:	8822      	ldrh	r2, [r4, #0]
 801c9fe:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801ca02:	1ad2      	subs	r2, r2, r3
 801ca04:	8863      	ldrh	r3, [r4, #2]
 801ca06:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ca0a:	1a5b      	subs	r3, r3, r1
 801ca0c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801ca10:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ca14:	aa01      	add	r2, sp, #4
 801ca16:	f8ad 0014 	strh.w	r0, [sp, #20]
 801ca1a:	4630      	mov	r0, r6
 801ca1c:	f8ad 1016 	strh.w	r1, [sp, #22]
 801ca20:	a904      	add	r1, sp, #16
 801ca22:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ca26:	f7fa fe01 	bl	801762c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801ca2a:	9a01      	ldr	r2, [sp, #4]
 801ca2c:	b11a      	cbz	r2, 801ca36 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801ca2e:	4621      	mov	r1, r4
 801ca30:	4628      	mov	r0, r5
 801ca32:	f7ff fed5 	bl	801c7e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ca36:	b006      	add	sp, #24
 801ca38:	bd70      	pop	{r4, r5, r6, pc}

0801ca3a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801ca3a:	4602      	mov	r2, r0
 801ca3c:	b530      	push	{r4, r5, lr}
 801ca3e:	4604      	mov	r4, r0
 801ca40:	b085      	sub	sp, #20
 801ca42:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801ca46:	460d      	mov	r5, r1
 801ca48:	466b      	mov	r3, sp
 801ca4a:	6851      	ldr	r1, [r2, #4]
 801ca4c:	c303      	stmia	r3!, {r0, r1}
 801ca4e:	4629      	mov	r1, r5
 801ca50:	4668      	mov	r0, sp
 801ca52:	f7fa fd13 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 801ca56:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ca5a:	b12b      	cbz	r3, 801ca68 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801ca5c:	4669      	mov	r1, sp
 801ca5e:	4620      	mov	r0, r4
 801ca60:	f7ff ffbf 	bl	801c9e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801ca64:	b005      	add	sp, #20
 801ca66:	bd30      	pop	{r4, r5, pc}
 801ca68:	3404      	adds	r4, #4
 801ca6a:	a802      	add	r0, sp, #8
 801ca6c:	4621      	mov	r1, r4
 801ca6e:	f7ff fc7d 	bl	801c36c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca72:	f8bd 3000 	ldrh.w	r3, [sp]
 801ca76:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ca7a:	4669      	mov	r1, sp
 801ca7c:	4620      	mov	r0, r4
 801ca7e:	1a9b      	subs	r3, r3, r2
 801ca80:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ca84:	f8ad 3000 	strh.w	r3, [sp]
 801ca88:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ca8c:	1a9b      	subs	r3, r3, r2
 801ca8e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ca92:	f7fa fd92 	bl	80175ba <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801ca96:	e7e5      	b.n	801ca64 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801ca98 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801ca98:	460b      	mov	r3, r1
 801ca9a:	680a      	ldr	r2, [r1, #0]
 801ca9c:	1d01      	adds	r1, r0, #4
 801ca9e:	6992      	ldr	r2, [r2, #24]
 801caa0:	4618      	mov	r0, r3
 801caa2:	4710      	bx	r2

0801caa4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801caa4:	4298      	cmp	r0, r3
 801caa6:	d200      	bcs.n	801caaa <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801caa8:	b913      	cbnz	r3, 801cab0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801caaa:	440a      	add	r2, r1
 801caac:	b210      	sxth	r0, r2
 801caae:	4770      	bx	lr
 801cab0:	ee07 0a90 	vmov	s15, r0
 801cab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cab8:	ee07 3a90 	vmov	s15, r3
 801cabc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cac4:	ee07 2a90 	vmov	s15, r2
 801cac8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cacc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801cad0:	ee07 1a90 	vmov	s15, r1
 801cad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cad8:	ee37 7a66 	vsub.f32	s14, s14, s13
 801cadc:	ee67 5a07 	vmul.f32	s11, s14, s14
 801cae0:	eee5 6a87 	vfma.f32	s13, s11, s14
 801cae4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801cae8:	eee6 7a26 	vfma.f32	s15, s12, s13
 801caec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801caf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801caf4:	bfcc      	ite	gt
 801caf6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801cafa:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801cafe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb02:	ee17 3a90 	vmov	r3, s15
 801cb06:	b218      	sxth	r0, r3
 801cb08:	4770      	bx	lr

0801cb0a <_ZN8touchgfx12TextProviderC1Ev>:
 801cb0a:	b538      	push	{r3, r4, r5, lr}
 801cb0c:	2500      	movs	r5, #0
 801cb0e:	2302      	movs	r3, #2
 801cb10:	4604      	mov	r4, r0
 801cb12:	220e      	movs	r2, #14
 801cb14:	7403      	strb	r3, [r0, #16]
 801cb16:	4629      	mov	r1, r5
 801cb18:	6145      	str	r5, [r0, #20]
 801cb1a:	7605      	strb	r5, [r0, #24]
 801cb1c:	83c5      	strh	r5, [r0, #30]
 801cb1e:	8405      	strh	r5, [r0, #32]
 801cb20:	86c5      	strh	r5, [r0, #54]	; 0x36
 801cb22:	8705      	strh	r5, [r0, #56]	; 0x38
 801cb24:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801cb26:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801cb2a:	e9c0 5500 	strd	r5, r5, [r0]
 801cb2e:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801cb32:	304c      	adds	r0, #76	; 0x4c
 801cb34:	f00d f968 	bl	8029e08 <memset>
 801cb38:	2301      	movs	r3, #1
 801cb3a:	4620      	mov	r0, r4
 801cb3c:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801cb40:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cb44:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801cb48:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801cb4c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801cb50:	f7eb fb9e 	bl	8008290 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801cb54:	4620      	mov	r0, r4
 801cb56:	bd38      	pop	{r3, r4, r5, pc}

0801cb58 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801cb58:	b530      	push	{r4, r5, lr}
 801cb5a:	2500      	movs	r5, #0
 801cb5c:	2401      	movs	r4, #1
 801cb5e:	6843      	ldr	r3, [r0, #4]
 801cb60:	b913      	cbnz	r3, 801cb68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801cb62:	6803      	ldr	r3, [r0, #0]
 801cb64:	b313      	cbz	r3, 801cbac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cb66:	6043      	str	r3, [r0, #4]
 801cb68:	7e03      	ldrb	r3, [r0, #24]
 801cb6a:	b143      	cbz	r3, 801cb7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801cb6c:	6943      	ldr	r3, [r0, #20]
 801cb6e:	b12b      	cbz	r3, 801cb7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cb70:	881a      	ldrh	r2, [r3, #0]
 801cb72:	b11a      	cbz	r2, 801cb7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cb74:	1c9a      	adds	r2, r3, #2
 801cb76:	6142      	str	r2, [r0, #20]
 801cb78:	8818      	ldrh	r0, [r3, #0]
 801cb7a:	bd30      	pop	{r4, r5, pc}
 801cb7c:	7605      	strb	r5, [r0, #24]
 801cb7e:	6843      	ldr	r3, [r0, #4]
 801cb80:	8819      	ldrh	r1, [r3, #0]
 801cb82:	b199      	cbz	r1, 801cbac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cb84:	1c9a      	adds	r2, r3, #2
 801cb86:	2902      	cmp	r1, #2
 801cb88:	6042      	str	r2, [r0, #4]
 801cb8a:	d1f5      	bne.n	801cb78 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801cb8c:	7c03      	ldrb	r3, [r0, #16]
 801cb8e:	2b01      	cmp	r3, #1
 801cb90:	d8e5      	bhi.n	801cb5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cb92:	1c5a      	adds	r2, r3, #1
 801cb94:	3302      	adds	r3, #2
 801cb96:	7402      	strb	r2, [r0, #16]
 801cb98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801cb9c:	6143      	str	r3, [r0, #20]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d0dd      	beq.n	801cb5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cba2:	881b      	ldrh	r3, [r3, #0]
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d0da      	beq.n	801cb5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cba8:	7604      	strb	r4, [r0, #24]
 801cbaa:	e7d8      	b.n	801cb5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cbac:	2000      	movs	r0, #0
 801cbae:	e7e4      	b.n	801cb7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801cbb0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801cbb0:	b430      	push	{r4, r5}
 801cbb2:	6815      	ldr	r5, [r2, #0]
 801cbb4:	6085      	str	r5, [r0, #8]
 801cbb6:	6852      	ldr	r2, [r2, #4]
 801cbb8:	6443      	str	r3, [r0, #68]	; 0x44
 801cbba:	60c2      	str	r2, [r0, #12]
 801cbbc:	2200      	movs	r2, #0
 801cbbe:	9b02      	ldr	r3, [sp, #8]
 801cbc0:	7402      	strb	r2, [r0, #16]
 801cbc2:	6001      	str	r1, [r0, #0]
 801cbc4:	6483      	str	r3, [r0, #72]	; 0x48
 801cbc6:	6042      	str	r2, [r0, #4]
 801cbc8:	6142      	str	r2, [r0, #20]
 801cbca:	7602      	strb	r2, [r0, #24]
 801cbcc:	8702      	strh	r2, [r0, #56]	; 0x38
 801cbce:	8402      	strh	r2, [r0, #32]
 801cbd0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801cbd4:	bc30      	pop	{r4, r5}
 801cbd6:	f7eb bb5b 	b.w	8008290 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801cbda <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801cbda:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbdc:	4605      	mov	r5, r0
 801cbde:	4608      	mov	r0, r1
 801cbe0:	b1f1      	cbz	r1, 801cc20 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801cbe2:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801cbe6:	460b      	mov	r3, r1
 801cbe8:	f101 0708 	add.w	r7, r1, #8
 801cbec:	4622      	mov	r2, r4
 801cbee:	6818      	ldr	r0, [r3, #0]
 801cbf0:	3308      	adds	r3, #8
 801cbf2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801cbf6:	4626      	mov	r6, r4
 801cbf8:	42bb      	cmp	r3, r7
 801cbfa:	c603      	stmia	r6!, {r0, r1}
 801cbfc:	4634      	mov	r4, r6
 801cbfe:	d1f6      	bne.n	801cbee <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801cc00:	6818      	ldr	r0, [r3, #0]
 801cc02:	6030      	str	r0, [r6, #0]
 801cc04:	4610      	mov	r0, r2
 801cc06:	889b      	ldrh	r3, [r3, #4]
 801cc08:	80b3      	strh	r3, [r6, #4]
 801cc0a:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801cc0e:	015b      	lsls	r3, r3, #5
 801cc10:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cc14:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801cc18:	430b      	orrs	r3, r1
 801cc1a:	425b      	negs	r3, r3
 801cc1c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801cc20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cc22 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801cc22:	b538      	push	{r3, r4, r5, lr}
 801cc24:	460c      	mov	r4, r1
 801cc26:	6811      	ldr	r1, [r2, #0]
 801cc28:	4610      	mov	r0, r2
 801cc2a:	68cd      	ldr	r5, [r1, #12]
 801cc2c:	4619      	mov	r1, r3
 801cc2e:	47a8      	blx	r5
 801cc30:	2800      	cmp	r0, #0
 801cc32:	bf08      	it	eq
 801cc34:	4620      	moveq	r0, r4
 801cc36:	bd38      	pop	{r3, r4, r5, pc}

0801cc38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801cc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc3a:	4604      	mov	r4, r0
 801cc3c:	4615      	mov	r5, r2
 801cc3e:	4608      	mov	r0, r1
 801cc40:	b93a      	cbnz	r2, 801cc52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801cc42:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801cc46:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801cc4a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801cc4e:	4628      	mov	r0, r5
 801cc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc52:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801cc56:	8893      	ldrh	r3, [r2, #4]
 801cc58:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801cc5c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801cc60:	79ee      	ldrb	r6, [r5, #7]
 801cc62:	4316      	orrs	r6, r2
 801cc64:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801cc68:	189a      	adds	r2, r3, r2
 801cc6a:	b2b7      	uxth	r7, r6
 801cc6c:	b291      	uxth	r1, r2
 801cc6e:	291d      	cmp	r1, #29
 801cc70:	f200 8084 	bhi.w	801cd7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801cc74:	2201      	movs	r2, #1
 801cc76:	10f6      	asrs	r6, r6, #3
 801cc78:	408a      	lsls	r2, r1
 801cc7a:	4978      	ldr	r1, [pc, #480]	; (801ce5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801cc7c:	420a      	tst	r2, r1
 801cc7e:	d12e      	bne.n	801ccde <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801cc80:	f412 7f60 	tst.w	r2, #896	; 0x380
 801cc84:	d07a      	beq.n	801cd7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801cc86:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801cc8a:	462b      	mov	r3, r5
 801cc8c:	f105 0e08 	add.w	lr, r5, #8
 801cc90:	4615      	mov	r5, r2
 801cc92:	6818      	ldr	r0, [r3, #0]
 801cc94:	3308      	adds	r3, #8
 801cc96:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801cc9a:	4694      	mov	ip, r2
 801cc9c:	4573      	cmp	r3, lr
 801cc9e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801cca2:	4662      	mov	r2, ip
 801cca4:	d1f5      	bne.n	801cc92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801cca6:	6818      	ldr	r0, [r3, #0]
 801cca8:	f8cc 0000 	str.w	r0, [ip]
 801ccac:	889b      	ldrh	r3, [r3, #4]
 801ccae:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ccb2:	b2b3      	uxth	r3, r6
 801ccb4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801ccb8:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801ccbc:	1aca      	subs	r2, r1, r3
 801ccbe:	1bcf      	subs	r7, r1, r7
 801ccc0:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801ccc4:	b292      	uxth	r2, r2
 801ccc6:	1afb      	subs	r3, r7, r3
 801ccc8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801cccc:	10d2      	asrs	r2, r2, #3
 801ccce:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801ccd2:	4302      	orrs	r2, r0
 801ccd4:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801ccd8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801ccdc:	e7b7      	b.n	801cc4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ccde:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cce0:	b92b      	cbnz	r3, 801ccee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801cce2:	4b5f      	ldr	r3, [pc, #380]	; (801ce60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801cce4:	21c0      	movs	r1, #192	; 0xc0
 801cce6:	4a5f      	ldr	r2, [pc, #380]	; (801ce64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801cce8:	485f      	ldr	r0, [pc, #380]	; (801ce68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801ccea:	f00d f801 	bl	8029cf0 <__assert_func>
 801ccee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ccf0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ccf4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801ccf6:	f640 6333 	movw	r3, #3635	; 0xe33
 801ccfa:	4299      	cmp	r1, r3
 801ccfc:	d110      	bne.n	801cd20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801ccfe:	6803      	ldr	r3, [r0, #0]
 801cd00:	68db      	ldr	r3, [r3, #12]
 801cd02:	4798      	blx	r3
 801cd04:	7b41      	ldrb	r1, [r0, #13]
 801cd06:	00cb      	lsls	r3, r1, #3
 801cd08:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cd0c:	7a03      	ldrb	r3, [r0, #8]
 801cd0e:	0648      	lsls	r0, r1, #25
 801cd10:	ea43 0302 	orr.w	r3, r3, r2
 801cd14:	bf44      	itt	mi
 801cd16:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cd1a:	b21b      	sxthmi	r3, r3
 801cd1c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cd20:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801cd24:	462a      	mov	r2, r5
 801cd26:	f105 0c08 	add.w	ip, r5, #8
 801cd2a:	443b      	add	r3, r7
 801cd2c:	4433      	add	r3, r6
 801cd2e:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801cd32:	b29b      	uxth	r3, r3
 801cd34:	4635      	mov	r5, r6
 801cd36:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cd3a:	6810      	ldr	r0, [r2, #0]
 801cd3c:	3208      	adds	r2, #8
 801cd3e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801cd42:	4637      	mov	r7, r6
 801cd44:	4562      	cmp	r2, ip
 801cd46:	c703      	stmia	r7!, {r0, r1}
 801cd48:	463e      	mov	r6, r7
 801cd4a:	d1f6      	bne.n	801cd3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801cd4c:	6810      	ldr	r0, [r2, #0]
 801cd4e:	6038      	str	r0, [r7, #0]
 801cd50:	8892      	ldrh	r2, [r2, #4]
 801cd52:	80ba      	strh	r2, [r7, #4]
 801cd54:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801cd58:	10db      	asrs	r3, r3, #3
 801cd5a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801cd5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cd62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cd66:	4313      	orrs	r3, r2
 801cd68:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801cd6c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cd70:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801cd74:	1a9b      	subs	r3, r3, r2
 801cd76:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801cd7a:	e768      	b.n	801cc4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801cd7c:	f023 0204 	bic.w	r2, r3, #4
 801cd80:	f640 611b 	movw	r1, #3611	; 0xe1b
 801cd84:	428a      	cmp	r2, r1
 801cd86:	d003      	beq.n	801cd90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801cd88:	f640 621d 	movw	r2, #3613	; 0xe1d
 801cd8c:	4293      	cmp	r3, r2
 801cd8e:	d120      	bne.n	801cdd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801cd90:	3b01      	subs	r3, #1
 801cd92:	4602      	mov	r2, r0
 801cd94:	4629      	mov	r1, r5
 801cd96:	4620      	mov	r0, r4
 801cd98:	b29b      	uxth	r3, r3
 801cd9a:	f7ff ff42 	bl	801cc22 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801cd9e:	7b41      	ldrb	r1, [r0, #13]
 801cda0:	00cb      	lsls	r3, r1, #3
 801cda2:	0649      	lsls	r1, r1, #25
 801cda4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cda8:	7a03      	ldrb	r3, [r0, #8]
 801cdaa:	ea43 0302 	orr.w	r3, r3, r2
 801cdae:	bf44      	itt	mi
 801cdb0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cdb4:	b21b      	sxthmi	r3, r3
 801cdb6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cdba:	7b6b      	ldrb	r3, [r5, #13]
 801cdbc:	7aaa      	ldrb	r2, [r5, #10]
 801cdbe:	005b      	lsls	r3, r3, #1
 801cdc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cdc4:	4313      	orrs	r3, r2
 801cdc6:	115a      	asrs	r2, r3, #5
 801cdc8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801cdcc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801cdd0:	e035      	b.n	801ce3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801cdd2:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801cdd6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801cdda:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801cdde:	7a2a      	ldrb	r2, [r5, #8]
 801cde0:	ea42 0201 	orr.w	r2, r2, r1
 801cde4:	f640 6109 	movw	r1, #3593	; 0xe09
 801cde8:	bf1c      	itt	ne
 801cdea:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801cdee:	b212      	sxthne	r2, r2
 801cdf0:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801cdf4:	f023 0210 	bic.w	r2, r3, #16
 801cdf8:	428a      	cmp	r2, r1
 801cdfa:	d003      	beq.n	801ce04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801cdfc:	f640 6213 	movw	r2, #3603	; 0xe13
 801ce00:	4293      	cmp	r3, r2
 801ce02:	d129      	bne.n	801ce58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801ce04:	7b6e      	ldrb	r6, [r5, #13]
 801ce06:	4629      	mov	r1, r5
 801ce08:	0076      	lsls	r6, r6, #1
 801ce0a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ce0e:	7aae      	ldrb	r6, [r5, #10]
 801ce10:	4316      	orrs	r6, r2
 801ce12:	f640 6213 	movw	r2, #3603	; 0xe13
 801ce16:	4293      	cmp	r3, r2
 801ce18:	4602      	mov	r2, r0
 801ce1a:	4620      	mov	r0, r4
 801ce1c:	bf16      	itet	ne
 801ce1e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801ce22:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801ce26:	b29b      	uxthne	r3, r3
 801ce28:	f7ff fefb 	bl	801cc22 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ce2c:	7b43      	ldrb	r3, [r0, #13]
 801ce2e:	7a82      	ldrb	r2, [r0, #10]
 801ce30:	005b      	lsls	r3, r3, #1
 801ce32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce36:	4313      	orrs	r3, r2
 801ce38:	1af6      	subs	r6, r6, r3
 801ce3a:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801ce3e:	7b69      	ldrb	r1, [r5, #13]
 801ce40:	00cb      	lsls	r3, r1, #3
 801ce42:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ce46:	7a2b      	ldrb	r3, [r5, #8]
 801ce48:	4313      	orrs	r3, r2
 801ce4a:	064a      	lsls	r2, r1, #25
 801ce4c:	bf44      	itt	mi
 801ce4e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ce52:	b21b      	sxthmi	r3, r3
 801ce54:	1bdb      	subs	r3, r3, r7
 801ce56:	e73f      	b.n	801ccd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801ce58:	2300      	movs	r3, #0
 801ce5a:	e7b7      	b.n	801cdcc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801ce5c:	3fc00079 	.word	0x3fc00079
 801ce60:	0802d810 	.word	0x0802d810
 801ce64:	0802da82 	.word	0x0802da82
 801ce68:	0802d819 	.word	0x0802d819

0801ce6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801ce6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ce70:	4604      	mov	r4, r0
 801ce72:	b942      	cbnz	r2, 801ce86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801ce74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ce78:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801ce7c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801ce80:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801ce84:	e046      	b.n	801cf14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801ce86:	7b51      	ldrb	r1, [r2, #13]
 801ce88:	8893      	ldrh	r3, [r2, #4]
 801ce8a:	010f      	lsls	r7, r1, #4
 801ce8c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801ce90:	79d7      	ldrb	r7, [r2, #7]
 801ce92:	4307      	orrs	r7, r0
 801ce94:	2f04      	cmp	r7, #4
 801ce96:	b2bd      	uxth	r5, r7
 801ce98:	bfcc      	ite	gt
 801ce9a:	08bf      	lsrgt	r7, r7, #2
 801ce9c:	2701      	movle	r7, #1
 801ce9e:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801cea2:	f200 80ab 	bhi.w	801cffc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801cea6:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801ceaa:	4283      	cmp	r3, r0
 801ceac:	d216      	bcs.n	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ceae:	f240 605b 	movw	r0, #1627	; 0x65b
 801ceb2:	4283      	cmp	r3, r0
 801ceb4:	d859      	bhi.n	801cf6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801ceb6:	f240 6057 	movw	r0, #1623	; 0x657
 801ceba:	4283      	cmp	r3, r0
 801cebc:	d20e      	bcs.n	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cebe:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801cec2:	d24a      	bcs.n	801cf5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801cec4:	f240 604e 	movw	r0, #1614	; 0x64e
 801cec8:	4283      	cmp	r3, r0
 801ceca:	d207      	bcs.n	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cecc:	f240 601a 	movw	r0, #1562	; 0x61a
 801ced0:	4283      	cmp	r3, r0
 801ced2:	d02a      	beq.n	801cf2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ced4:	d821      	bhi.n	801cf1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801ced6:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801ceda:	d35b      	bcc.n	801cf94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801cedc:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801cee0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cee4:	f040 80d0 	bne.w	801d088 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801cee8:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801ceec:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cef0:	f040 80ca 	bne.w	801d088 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801cef4:	00cb      	lsls	r3, r1, #3
 801cef6:	0649      	lsls	r1, r1, #25
 801cef8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801cefc:	7a13      	ldrb	r3, [r2, #8]
 801cefe:	ea43 0300 	orr.w	r3, r3, r0
 801cf02:	bf44      	itt	mi
 801cf04:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cf08:	b21b      	sxthmi	r3, r3
 801cf0a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cf0e:	1b5d      	subs	r5, r3, r5
 801cf10:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cf14:	4610      	mov	r0, r2
 801cf16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cf1a:	f240 604b 	movw	r0, #1611	; 0x64b
 801cf1e:	4283      	cmp	r3, r0
 801cf20:	d338      	bcc.n	801cf94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801cf22:	f240 604c 	movw	r0, #1612	; 0x64c
 801cf26:	4283      	cmp	r3, r0
 801cf28:	d9d8      	bls.n	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cf2a:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801cf2e:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801cf32:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cf36:	f040 80f2 	bne.w	801d11e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801cf3a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cf3e:	f040 80ee 	bne.w	801d11e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801cf42:	00cb      	lsls	r3, r1, #3
 801cf44:	064e      	lsls	r6, r1, #25
 801cf46:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801cf4a:	7a13      	ldrb	r3, [r2, #8]
 801cf4c:	ea43 0300 	orr.w	r3, r3, r0
 801cf50:	bf44      	itt	mi
 801cf52:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cf56:	b21b      	sxthmi	r3, r3
 801cf58:	e7d9      	b.n	801cf0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801cf5a:	f240 6054 	movw	r0, #1620	; 0x654
 801cf5e:	4283      	cmp	r3, r0
 801cf60:	d8e3      	bhi.n	801cf2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cf62:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801cf66:	d9e0      	bls.n	801cf2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cf68:	e7b8      	b.n	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cf6a:	f240 6074 	movw	r0, #1652	; 0x674
 801cf6e:	4283      	cmp	r3, r0
 801cf70:	d0b4      	beq.n	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cf72:	d82d      	bhi.n	801cfd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801cf74:	f240 605e 	movw	r0, #1630	; 0x65e
 801cf78:	4283      	cmp	r3, r0
 801cf7a:	d804      	bhi.n	801cf86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801cf7c:	f240 605d 	movw	r0, #1629	; 0x65d
 801cf80:	4283      	cmp	r3, r0
 801cf82:	d3d2      	bcc.n	801cf2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cf84:	e7aa      	b.n	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cf86:	f240 605f 	movw	r0, #1631	; 0x65f
 801cf8a:	4283      	cmp	r3, r0
 801cf8c:	d0cd      	beq.n	801cf2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cf8e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801cf92:	d0a3      	beq.n	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cf94:	00cb      	lsls	r3, r1, #3
 801cf96:	0649      	lsls	r1, r1, #25
 801cf98:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801cf9c:	7a13      	ldrb	r3, [r2, #8]
 801cf9e:	ea43 0300 	orr.w	r3, r3, r0
 801cfa2:	bf44      	itt	mi
 801cfa4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cfa8:	b21b      	sxthmi	r3, r3
 801cfaa:	1b5d      	subs	r5, r3, r5
 801cfac:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cfb0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cfb4:	7b53      	ldrb	r3, [r2, #13]
 801cfb6:	015b      	lsls	r3, r3, #5
 801cfb8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cfbc:	7993      	ldrb	r3, [r2, #6]
 801cfbe:	430b      	orrs	r3, r1
 801cfc0:	2105      	movs	r1, #5
 801cfc2:	005b      	lsls	r3, r3, #1
 801cfc4:	fb93 f3f1 	sdiv	r3, r3, r1
 801cfc8:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801cfcc:	440b      	add	r3, r1
 801cfce:	e757      	b.n	801ce80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801cfd0:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801cfd4:	4283      	cmp	r3, r0
 801cfd6:	d809      	bhi.n	801cfec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801cfd8:	f240 60df 	movw	r0, #1759	; 0x6df
 801cfdc:	4283      	cmp	r3, r0
 801cfde:	f4bf af7d 	bcs.w	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cfe2:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801cfe6:	2b05      	cmp	r3, #5
 801cfe8:	d8d4      	bhi.n	801cf94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801cfea:	e777      	b.n	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cfec:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801cff0:	4283      	cmp	r3, r0
 801cff2:	d09a      	beq.n	801cf2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cff4:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801cff8:	4283      	cmp	r3, r0
 801cffa:	e7ca      	b.n	801cf92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801cffc:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801d000:	d22b      	bcs.n	801d05a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801d002:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801d006:	4283      	cmp	r3, r0
 801d008:	d28f      	bcs.n	801cf2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d00a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d00e:	4283      	cmp	r3, r0
 801d010:	d816      	bhi.n	801d040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801d012:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801d016:	4283      	cmp	r3, r0
 801d018:	f4bf af60 	bcs.w	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d01c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801d020:	4283      	cmp	r3, r0
 801d022:	d80a      	bhi.n	801d03a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801d024:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801d028:	4283      	cmp	r3, r0
 801d02a:	f4bf af57 	bcs.w	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d02e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801d032:	4283      	cmp	r3, r0
 801d034:	f43f af79 	beq.w	801cf2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d038:	e7ac      	b.n	801cf94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d03a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801d03e:	e7f8      	b.n	801d032 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801d040:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801d044:	4283      	cmp	r3, r0
 801d046:	d802      	bhi.n	801d04e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801d048:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d04c:	e798      	b.n	801cf80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801d04e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801d052:	4283      	cmp	r3, r0
 801d054:	f47f af42 	bne.w	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d058:	e767      	b.n	801cf2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d05a:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801d05e:	4283      	cmp	r3, r0
 801d060:	f43f af63 	beq.w	801cf2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d064:	d802      	bhi.n	801d06c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801d066:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801d06a:	e7f2      	b.n	801d052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801d06c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801d070:	4283      	cmp	r3, r0
 801d072:	d805      	bhi.n	801d080 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801d074:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801d078:	4283      	cmp	r3, r0
 801d07a:	f4ff af2f 	bcc.w	801cedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d07e:	e754      	b.n	801cf2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d080:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801d084:	4283      	cmp	r3, r0
 801d086:	e7af      	b.n	801cfe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801d088:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d08c:	4617      	mov	r7, r2
 801d08e:	f102 0808 	add.w	r8, r2, #8
 801d092:	4666      	mov	r6, ip
 801d094:	6838      	ldr	r0, [r7, #0]
 801d096:	3708      	adds	r7, #8
 801d098:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d09c:	46e6      	mov	lr, ip
 801d09e:	4547      	cmp	r7, r8
 801d0a0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d0a4:	46f4      	mov	ip, lr
 801d0a6:	d1f5      	bne.n	801d094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801d0a8:	6838      	ldr	r0, [r7, #0]
 801d0aa:	f8ce 0000 	str.w	r0, [lr]
 801d0ae:	88b9      	ldrh	r1, [r7, #4]
 801d0b0:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d0b4:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d0b8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d0bc:	d009      	beq.n	801d0d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801d0be:	7b51      	ldrb	r1, [r2, #13]
 801d0c0:	7992      	ldrb	r2, [r2, #6]
 801d0c2:	0149      	lsls	r1, r1, #5
 801d0c4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d0c8:	4311      	orrs	r1, r2
 801d0ca:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d0ce:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d0d2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d0d6:	d00d      	beq.n	801d0f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801d0d8:	442b      	add	r3, r5
 801d0da:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d0de:	b29b      	uxth	r3, r3
 801d0e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d0e4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d0e8:	10db      	asrs	r3, r3, #3
 801d0ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d0ee:	4313      	orrs	r3, r2
 801d0f0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d0f4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d0f8:	00cb      	lsls	r3, r1, #3
 801d0fa:	064f      	lsls	r7, r1, #25
 801d0fc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d100:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d104:	ea43 0302 	orr.w	r3, r3, r2
 801d108:	bf44      	itt	mi
 801d10a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d10e:	b21b      	sxthmi	r3, r3
 801d110:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d114:	1b5d      	subs	r5, r3, r5
 801d116:	4632      	mov	r2, r6
 801d118:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d11c:	e6fa      	b.n	801cf14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d11e:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801d122:	4694      	mov	ip, r2
 801d124:	f102 0908 	add.w	r9, r2, #8
 801d128:	4676      	mov	r6, lr
 801d12a:	f8dc 0000 	ldr.w	r0, [ip]
 801d12e:	f10c 0c08 	add.w	ip, ip, #8
 801d132:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801d136:	46f0      	mov	r8, lr
 801d138:	45cc      	cmp	ip, r9
 801d13a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d13e:	46c6      	mov	lr, r8
 801d140:	d1f3      	bne.n	801d12a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801d142:	f8dc 0000 	ldr.w	r0, [ip]
 801d146:	f8c8 0000 	str.w	r0, [r8]
 801d14a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801d14e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d152:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d156:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d15a:	d009      	beq.n	801d170 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801d15c:	7b51      	ldrb	r1, [r2, #13]
 801d15e:	7992      	ldrb	r2, [r2, #6]
 801d160:	0149      	lsls	r1, r1, #5
 801d162:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d166:	4311      	orrs	r1, r2
 801d168:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d16c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d170:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d174:	d00d      	beq.n	801d192 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801d176:	1bdb      	subs	r3, r3, r7
 801d178:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d17c:	b29b      	uxth	r3, r3
 801d17e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d182:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d186:	10db      	asrs	r3, r3, #3
 801d188:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d18c:	4313      	orrs	r3, r2
 801d18e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d192:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d196:	00cb      	lsls	r3, r1, #3
 801d198:	0648      	lsls	r0, r1, #25
 801d19a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d19e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d1a2:	ea43 0302 	orr.w	r3, r3, r2
 801d1a6:	bf44      	itt	mi
 801d1a8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d1ac:	b21b      	sxthmi	r3, r3
 801d1ae:	e7b1      	b.n	801d114 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801d1b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1b4:	461e      	mov	r6, r3
 801d1b6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801d1b8:	4604      	mov	r4, r0
 801d1ba:	4617      	mov	r7, r2
 801d1bc:	b92b      	cbnz	r3, 801d1ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801d1be:	4b25      	ldr	r3, [pc, #148]	; (801d254 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801d1c0:	21c0      	movs	r1, #192	; 0xc0
 801d1c2:	4a25      	ldr	r2, [pc, #148]	; (801d258 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801d1c4:	4825      	ldr	r0, [pc, #148]	; (801d25c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801d1c6:	f00c fd93 	bl	8029cf0 <__assert_func>
 801d1ca:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d1cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d1d0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d1d4:	f7ea ffb6 	bl	8008144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d1d8:	4605      	mov	r5, r0
 801d1da:	b918      	cbnz	r0, 801d1e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801d1dc:	6030      	str	r0, [r6, #0]
 801d1de:	4628      	mov	r0, r5
 801d1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1e4:	683b      	ldr	r3, [r7, #0]
 801d1e6:	4601      	mov	r1, r0
 801d1e8:	4638      	mov	r0, r7
 801d1ea:	68db      	ldr	r3, [r3, #12]
 801d1ec:	4798      	blx	r3
 801d1ee:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d1f2:	4602      	mov	r2, r0
 801d1f4:	6030      	str	r0, [r6, #0]
 801d1f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d1fa:	d213      	bcs.n	801d224 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801d1fc:	4643      	mov	r3, r8
 801d1fe:	4639      	mov	r1, r7
 801d200:	4620      	mov	r0, r4
 801d202:	f7ff fe33 	bl	801ce6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d206:	6030      	str	r0, [r6, #0]
 801d208:	6833      	ldr	r3, [r6, #0]
 801d20a:	b143      	cbz	r3, 801d21e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801d20c:	7b5a      	ldrb	r2, [r3, #13]
 801d20e:	7a9b      	ldrb	r3, [r3, #10]
 801d210:	0052      	lsls	r2, r2, #1
 801d212:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d216:	4313      	orrs	r3, r2
 801d218:	bf0c      	ite	eq
 801d21a:	2301      	moveq	r3, #1
 801d21c:	2300      	movne	r3, #0
 801d21e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d222:	e7dc      	b.n	801d1de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801d224:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d228:	b29b      	uxth	r3, r3
 801d22a:	2b7f      	cmp	r3, #127	; 0x7f
 801d22c:	d804      	bhi.n	801d238 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801d22e:	4639      	mov	r1, r7
 801d230:	4620      	mov	r0, r4
 801d232:	f7ff fd01 	bl	801cc38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d236:	e7e6      	b.n	801d206 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801d238:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	d0e3      	beq.n	801d208 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801d240:	f640 1302 	movw	r3, #2306	; 0x902
 801d244:	429d      	cmp	r5, r3
 801d246:	d1df      	bne.n	801d208 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801d248:	4601      	mov	r1, r0
 801d24a:	4620      	mov	r0, r4
 801d24c:	f7ff fcc5 	bl	801cbda <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d250:	e7d9      	b.n	801d206 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801d252:	bf00      	nop
 801d254:	0802d810 	.word	0x0802d810
 801d258:	0802da82 	.word	0x0802da82
 801d25c:	0802d819 	.word	0x0802d819

0801d260 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d264:	461e      	mov	r6, r3
 801d266:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801d268:	4604      	mov	r4, r0
 801d26a:	4617      	mov	r7, r2
 801d26c:	b92b      	cbnz	r3, 801d27a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801d26e:	4b26      	ldr	r3, [pc, #152]	; (801d308 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801d270:	21c0      	movs	r1, #192	; 0xc0
 801d272:	4a26      	ldr	r2, [pc, #152]	; (801d30c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801d274:	4826      	ldr	r0, [pc, #152]	; (801d310 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801d276:	f00c fd3b 	bl	8029cf0 <__assert_func>
 801d27a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d27c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d280:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d284:	f7ea ff5e 	bl	8008144 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d288:	4605      	mov	r5, r0
 801d28a:	b918      	cbnz	r0, 801d294 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801d28c:	6030      	str	r0, [r6, #0]
 801d28e:	4628      	mov	r0, r5
 801d290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d294:	683b      	ldr	r3, [r7, #0]
 801d296:	4601      	mov	r1, r0
 801d298:	4638      	mov	r0, r7
 801d29a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801d29e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d2a2:	47c8      	blx	r9
 801d2a4:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d2a8:	4602      	mov	r2, r0
 801d2aa:	6030      	str	r0, [r6, #0]
 801d2ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d2b0:	d213      	bcs.n	801d2da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801d2b2:	4643      	mov	r3, r8
 801d2b4:	4639      	mov	r1, r7
 801d2b6:	4620      	mov	r0, r4
 801d2b8:	f7ff fdd8 	bl	801ce6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d2bc:	6030      	str	r0, [r6, #0]
 801d2be:	6833      	ldr	r3, [r6, #0]
 801d2c0:	b143      	cbz	r3, 801d2d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801d2c2:	7b5a      	ldrb	r2, [r3, #13]
 801d2c4:	7a9b      	ldrb	r3, [r3, #10]
 801d2c6:	0052      	lsls	r2, r2, #1
 801d2c8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d2cc:	4313      	orrs	r3, r2
 801d2ce:	bf0c      	ite	eq
 801d2d0:	2301      	moveq	r3, #1
 801d2d2:	2300      	movne	r3, #0
 801d2d4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d2d8:	e7d9      	b.n	801d28e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801d2da:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d2de:	b29b      	uxth	r3, r3
 801d2e0:	2b7f      	cmp	r3, #127	; 0x7f
 801d2e2:	d804      	bhi.n	801d2ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801d2e4:	4639      	mov	r1, r7
 801d2e6:	4620      	mov	r0, r4
 801d2e8:	f7ff fca6 	bl	801cc38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d2ec:	e7e6      	b.n	801d2bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801d2ee:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	d0e3      	beq.n	801d2be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801d2f6:	f640 1302 	movw	r3, #2306	; 0x902
 801d2fa:	429d      	cmp	r5, r3
 801d2fc:	d1df      	bne.n	801d2be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801d2fe:	4601      	mov	r1, r0
 801d300:	4620      	mov	r0, r4
 801d302:	f7ff fc6a 	bl	801cbda <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d306:	e7d9      	b.n	801d2bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801d308:	0802d810 	.word	0x0802d810
 801d30c:	0802da82 	.word	0x0802da82
 801d310:	0802d819 	.word	0x0802d819

0801d314 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d314:	b510      	push	{r4, lr}
 801d316:	4604      	mov	r4, r0
 801d318:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801d31c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d31e:	b9d9      	cbnz	r1, 801d358 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801d320:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d322:	2b0a      	cmp	r3, #10
 801d324:	d037      	beq.n	801d396 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801d326:	4620      	mov	r0, r4
 801d328:	f7ff fc16 	bl	801cb58 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d32c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d32e:	2b09      	cmp	r3, #9
 801d330:	d906      	bls.n	801d340 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801d332:	4b19      	ldr	r3, [pc, #100]	; (801d398 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801d334:	f44f 7182 	mov.w	r1, #260	; 0x104
 801d338:	4a18      	ldr	r2, [pc, #96]	; (801d39c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801d33a:	4819      	ldr	r0, [pc, #100]	; (801d3a0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801d33c:	f00c fcd8 	bl	8029cf0 <__assert_func>
 801d340:	1c5a      	adds	r2, r3, #1
 801d342:	8722      	strh	r2, [r4, #56]	; 0x38
 801d344:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d346:	4413      	add	r3, r2
 801d348:	b29b      	uxth	r3, r3
 801d34a:	2b09      	cmp	r3, #9
 801d34c:	bf88      	it	hi
 801d34e:	3b0a      	subhi	r3, #10
 801d350:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d354:	8458      	strh	r0, [r3, #34]	; 0x22
 801d356:	e7e3      	b.n	801d320 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801d358:	2b0a      	cmp	r3, #10
 801d35a:	d01c      	beq.n	801d396 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801d35c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801d35e:	3901      	subs	r1, #1
 801d360:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d364:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801d366:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801d36a:	1c51      	adds	r1, r2, #1
 801d36c:	b289      	uxth	r1, r1
 801d36e:	2901      	cmp	r1, #1
 801d370:	bf8a      	itet	hi
 801d372:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d376:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801d378:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801d37a:	2b09      	cmp	r3, #9
 801d37c:	d8d9      	bhi.n	801d332 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801d37e:	1c5a      	adds	r2, r3, #1
 801d380:	8722      	strh	r2, [r4, #56]	; 0x38
 801d382:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d384:	4413      	add	r3, r2
 801d386:	b29b      	uxth	r3, r3
 801d388:	2b09      	cmp	r3, #9
 801d38a:	bf88      	it	hi
 801d38c:	3b0a      	subhi	r3, #10
 801d38e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d392:	8458      	strh	r0, [r3, #34]	; 0x22
 801d394:	e7c0      	b.n	801d318 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d396:	bd10      	pop	{r4, pc}
 801d398:	0802d845 	.word	0x0802d845
 801d39c:	0802dbd8 	.word	0x0802dbd8
 801d3a0:	0802d819 	.word	0x0802d819

0801d3a4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d3a4:	b538      	push	{r3, r4, r5, lr}
 801d3a6:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801d3a8:	4604      	mov	r4, r0
 801d3aa:	b92a      	cbnz	r2, 801d3b8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801d3ac:	4b13      	ldr	r3, [pc, #76]	; (801d3fc <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801d3ae:	21d5      	movs	r1, #213	; 0xd5
 801d3b0:	4a13      	ldr	r2, [pc, #76]	; (801d400 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801d3b2:	4814      	ldr	r0, [pc, #80]	; (801d404 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801d3b4:	f00c fc9c 	bl	8029cf0 <__assert_func>
 801d3b8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d3ba:	3a01      	subs	r2, #1
 801d3bc:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801d3c0:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801d3c2:	8702      	strh	r2, [r0, #56]	; 0x38
 801d3c4:	1c5a      	adds	r2, r3, #1
 801d3c6:	b292      	uxth	r2, r2
 801d3c8:	2a09      	cmp	r2, #9
 801d3ca:	bf8a      	itet	hi
 801d3cc:	3b09      	subhi	r3, #9
 801d3ce:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801d3d0:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801d3d2:	f7ff ff9f 	bl	801d314 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d3d6:	8c23      	ldrh	r3, [r4, #32]
 801d3d8:	2b01      	cmp	r3, #1
 801d3da:	bf9c      	itt	ls
 801d3dc:	3301      	addls	r3, #1
 801d3de:	8423      	strhls	r3, [r4, #32]
 801d3e0:	8be3      	ldrh	r3, [r4, #30]
 801d3e2:	b90b      	cbnz	r3, 801d3e8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801d3e4:	2302      	movs	r3, #2
 801d3e6:	83e3      	strh	r3, [r4, #30]
 801d3e8:	8be3      	ldrh	r3, [r4, #30]
 801d3ea:	4628      	mov	r0, r5
 801d3ec:	3b01      	subs	r3, #1
 801d3ee:	b29b      	uxth	r3, r3
 801d3f0:	83e3      	strh	r3, [r4, #30]
 801d3f2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d3f6:	8365      	strh	r5, [r4, #26]
 801d3f8:	bd38      	pop	{r3, r4, r5, pc}
 801d3fa:	bf00      	nop
 801d3fc:	0802d810 	.word	0x0802d810
 801d400:	0802db2d 	.word	0x0802db2d
 801d404:	0802d819 	.word	0x0802d819

0801d408 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d408:	428a      	cmp	r2, r1
 801d40a:	b538      	push	{r3, r4, r5, lr}
 801d40c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801d40e:	d90c      	bls.n	801d42a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801d410:	b92c      	cbnz	r4, 801d41e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801d412:	4b1c      	ldr	r3, [pc, #112]	; (801d484 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801d414:	21e1      	movs	r1, #225	; 0xe1
 801d416:	4a1c      	ldr	r2, [pc, #112]	; (801d488 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801d418:	481c      	ldr	r0, [pc, #112]	; (801d48c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801d41a:	f00c fc69 	bl	8029cf0 <__assert_func>
 801d41e:	3c01      	subs	r4, #1
 801d420:	4b1b      	ldr	r3, [pc, #108]	; (801d490 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801d422:	4a1c      	ldr	r2, [pc, #112]	; (801d494 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801d424:	21c5      	movs	r1, #197	; 0xc5
 801d426:	8704      	strh	r4, [r0, #56]	; 0x38
 801d428:	e7f6      	b.n	801d418 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d42a:	428c      	cmp	r4, r1
 801d42c:	d203      	bcs.n	801d436 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801d42e:	4b1a      	ldr	r3, [pc, #104]	; (801d498 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801d430:	21cb      	movs	r1, #203	; 0xcb
 801d432:	4a1a      	ldr	r2, [pc, #104]	; (801d49c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801d434:	e7f0      	b.n	801d418 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d436:	1a64      	subs	r4, r4, r1
 801d438:	250a      	movs	r5, #10
 801d43a:	8704      	strh	r4, [r0, #56]	; 0x38
 801d43c:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801d43e:	4421      	add	r1, r4
 801d440:	b289      	uxth	r1, r1
 801d442:	2909      	cmp	r1, #9
 801d444:	bf88      	it	hi
 801d446:	390a      	subhi	r1, #10
 801d448:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d44a:	b1ba      	cbz	r2, 801d47c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801d44c:	3a01      	subs	r2, #1
 801d44e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801d450:	b292      	uxth	r2, r2
 801d452:	2909      	cmp	r1, #9
 801d454:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d458:	d903      	bls.n	801d462 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801d45a:	4b11      	ldr	r3, [pc, #68]	; (801d4a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801d45c:	21e6      	movs	r1, #230	; 0xe6
 801d45e:	4a11      	ldr	r2, [pc, #68]	; (801d4a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801d460:	e7da      	b.n	801d418 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d462:	3101      	adds	r1, #1
 801d464:	8701      	strh	r1, [r0, #56]	; 0x38
 801d466:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d468:	b901      	cbnz	r1, 801d46c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801d46a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d46c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d46e:	3901      	subs	r1, #1
 801d470:	b289      	uxth	r1, r1
 801d472:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d474:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d478:	844c      	strh	r4, [r1, #34]	; 0x22
 801d47a:	e7e6      	b.n	801d44a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801d47c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d480:	f7ff bf48 	b.w	801d314 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d484:	0802d810 	.word	0x0802d810
 801d488:	0802d906 	.word	0x0802d906
 801d48c:	0802d819 	.word	0x0802d819
 801d490:	0802d851 	.word	0x0802d851
 801d494:	0802d9b0 	.word	0x0802d9b0
 801d498:	0802d85f 	.word	0x0802d85f
 801d49c:	0802dc87 	.word	0x0802dc87
 801d4a0:	0802d86b 	.word	0x0802d86b
 801d4a4:	0802d87e 	.word	0x0802d87e

0801d4a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d4a8:	3a01      	subs	r2, #1
 801d4aa:	b570      	push	{r4, r5, r6, lr}
 801d4ac:	b292      	uxth	r2, r2
 801d4ae:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801d4b2:	42b2      	cmp	r2, r6
 801d4b4:	d019      	beq.n	801d4ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801d4b6:	8c04      	ldrh	r4, [r0, #32]
 801d4b8:	f831 5b02 	ldrh.w	r5, [r1], #2
 801d4bc:	4294      	cmp	r4, r2
 801d4be:	d805      	bhi.n	801d4cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801d4c0:	4b19      	ldr	r3, [pc, #100]	; (801d528 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801d4c2:	4a1a      	ldr	r2, [pc, #104]	; (801d52c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801d4c4:	21c5      	movs	r1, #197	; 0xc5
 801d4c6:	481a      	ldr	r0, [pc, #104]	; (801d530 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801d4c8:	f00c fc12 	bl	8029cf0 <__assert_func>
 801d4cc:	8bc4      	ldrh	r4, [r0, #30]
 801d4ce:	4414      	add	r4, r2
 801d4d0:	3a01      	subs	r2, #1
 801d4d2:	b2a4      	uxth	r4, r4
 801d4d4:	b292      	uxth	r2, r2
 801d4d6:	2c01      	cmp	r4, #1
 801d4d8:	bf88      	it	hi
 801d4da:	3c02      	subhi	r4, #2
 801d4dc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d4e0:	8b64      	ldrh	r4, [r4, #26]
 801d4e2:	42ac      	cmp	r4, r5
 801d4e4:	d0e5      	beq.n	801d4b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801d4e6:	2000      	movs	r0, #0
 801d4e8:	bd70      	pop	{r4, r5, r6, pc}
 801d4ea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d4ee:	2400      	movs	r4, #0
 801d4f0:	4413      	add	r3, r2
 801d4f2:	b2a2      	uxth	r2, r4
 801d4f4:	429a      	cmp	r2, r3
 801d4f6:	da14      	bge.n	801d522 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801d4f8:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801d4fa:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d4fe:	4296      	cmp	r6, r2
 801d500:	d802      	bhi.n	801d508 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801d502:	4b09      	ldr	r3, [pc, #36]	; (801d528 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801d504:	4a0b      	ldr	r2, [pc, #44]	; (801d534 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801d506:	e7dd      	b.n	801d4c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801d508:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801d50a:	3401      	adds	r4, #1
 801d50c:	4432      	add	r2, r6
 801d50e:	b292      	uxth	r2, r2
 801d510:	2a09      	cmp	r2, #9
 801d512:	bf88      	it	hi
 801d514:	3a0a      	subhi	r2, #10
 801d516:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d51a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801d51c:	42aa      	cmp	r2, r5
 801d51e:	d0e8      	beq.n	801d4f2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801d520:	e7e1      	b.n	801d4e6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801d522:	2001      	movs	r0, #1
 801d524:	e7e0      	b.n	801d4e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801d526:	bf00      	nop
 801d528:	0802d851 	.word	0x0802d851
 801d52c:	0802dd0b 	.word	0x0802dd0b
 801d530:	0802d819 	.word	0x0802d819
 801d534:	0802d9b0 	.word	0x0802d9b0

0801d538 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d53c:	4605      	mov	r5, r0
 801d53e:	4616      	mov	r6, r2
 801d540:	1c8c      	adds	r4, r1, #2
 801d542:	8809      	ldrh	r1, [r1, #0]
 801d544:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d548:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d54c:	42b3      	cmp	r3, r6
 801d54e:	d124      	bne.n	801d59a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d550:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d554:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d558:	f001 070f 	and.w	r7, r1, #15
 801d55c:	4652      	mov	r2, sl
 801d55e:	f8cd 8000 	str.w	r8, [sp]
 801d562:	464b      	mov	r3, r9
 801d564:	4621      	mov	r1, r4
 801d566:	4628      	mov	r0, r5
 801d568:	f7ff ff9e 	bl	801d4a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d56c:	4683      	mov	fp, r0
 801d56e:	b168      	cbz	r0, 801d58c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d570:	eb0a 0109 	add.w	r1, sl, r9
 801d574:	463a      	mov	r2, r7
 801d576:	4628      	mov	r0, r5
 801d578:	4441      	add	r1, r8
 801d57a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d57e:	4649      	mov	r1, r9
 801d580:	f7ff ff42 	bl	801d408 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d584:	4658      	mov	r0, fp
 801d586:	b003      	add	sp, #12
 801d588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d58c:	eb07 010a 	add.w	r1, r7, sl
 801d590:	4449      	add	r1, r9
 801d592:	4441      	add	r1, r8
 801d594:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d598:	e7d2      	b.n	801d540 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d59a:	f04f 0b00 	mov.w	fp, #0
 801d59e:	e7f1      	b.n	801d584 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d5a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d5a0:	b570      	push	{r4, r5, r6, lr}
 801d5a2:	8810      	ldrh	r0, [r2, #0]
 801d5a4:	4298      	cmp	r0, r3
 801d5a6:	d817      	bhi.n	801d5d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d5a8:	1e48      	subs	r0, r1, #1
 801d5aa:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d5ae:	4298      	cmp	r0, r3
 801d5b0:	d312      	bcc.n	801d5d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d5b2:	2400      	movs	r4, #0
 801d5b4:	428c      	cmp	r4, r1
 801d5b6:	d20f      	bcs.n	801d5d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d5b8:	1860      	adds	r0, r4, r1
 801d5ba:	1040      	asrs	r0, r0, #1
 801d5bc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d5c0:	0085      	lsls	r5, r0, #2
 801d5c2:	42b3      	cmp	r3, r6
 801d5c4:	d902      	bls.n	801d5cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d5c6:	3001      	adds	r0, #1
 801d5c8:	b284      	uxth	r4, r0
 801d5ca:	e7f3      	b.n	801d5b4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d5cc:	d201      	bcs.n	801d5d2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d5ce:	b281      	uxth	r1, r0
 801d5d0:	e7f0      	b.n	801d5b4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d5d2:	442a      	add	r2, r5
 801d5d4:	8850      	ldrh	r0, [r2, #2]
 801d5d6:	bd70      	pop	{r4, r5, r6, pc}
 801d5d8:	2000      	movs	r0, #0
 801d5da:	e7fc      	b.n	801d5d6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d5dc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5e0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801d5e2:	4604      	mov	r4, r0
 801d5e4:	260b      	movs	r6, #11
 801d5e6:	886f      	ldrh	r7, [r5, #2]
 801d5e8:	087f      	lsrs	r7, r7, #1
 801d5ea:	3e01      	subs	r6, #1
 801d5ec:	d01b      	beq.n	801d626 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d5ee:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d5f0:	b92b      	cbnz	r3, 801d5fe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801d5f2:	4b0e      	ldr	r3, [pc, #56]	; (801d62c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801d5f4:	21c0      	movs	r1, #192	; 0xc0
 801d5f6:	4a0e      	ldr	r2, [pc, #56]	; (801d630 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801d5f8:	480e      	ldr	r0, [pc, #56]	; (801d634 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801d5fa:	f00c fb79 	bl	8029cf0 <__assert_func>
 801d5fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d600:	462a      	mov	r2, r5
 801d602:	4639      	mov	r1, r7
 801d604:	4620      	mov	r0, r4
 801d606:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d60a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d60e:	4643      	mov	r3, r8
 801d610:	f7ff ffc6 	bl	801d5a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d614:	b138      	cbz	r0, 801d626 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d616:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d61a:	4642      	mov	r2, r8
 801d61c:	4620      	mov	r0, r4
 801d61e:	f7ff ff8b 	bl	801d538 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d622:	2800      	cmp	r0, #0
 801d624:	d1e1      	bne.n	801d5ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d62a:	bf00      	nop
 801d62c:	0802d810 	.word	0x0802d810
 801d630:	0802da82 	.word	0x0802da82
 801d634:	0802d819 	.word	0x0802d819

0801d638 <_ZN8touchgfx8ceil28_4El>:
 801d638:	f110 030f 	adds.w	r3, r0, #15
 801d63c:	d401      	bmi.n	801d642 <_ZN8touchgfx8ceil28_4El+0xa>
 801d63e:	1118      	asrs	r0, r3, #4
 801d640:	4770      	bx	lr
 801d642:	2210      	movs	r2, #16
 801d644:	f1c0 0001 	rsb	r0, r0, #1
 801d648:	fb93 f3f2 	sdiv	r3, r3, r2
 801d64c:	f010 000f 	ands.w	r0, r0, #15
 801d650:	bf18      	it	ne
 801d652:	2001      	movne	r0, #1
 801d654:	1a18      	subs	r0, r3, r0
 801d656:	4770      	bx	lr

0801d658 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801d658:	2900      	cmp	r1, #0
 801d65a:	b538      	push	{r3, r4, r5, lr}
 801d65c:	dc05      	bgt.n	801d66a <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801d65e:	4b0f      	ldr	r3, [pc, #60]	; (801d69c <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801d660:	21f7      	movs	r1, #247	; 0xf7
 801d662:	4a0f      	ldr	r2, [pc, #60]	; (801d6a0 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801d664:	480f      	ldr	r0, [pc, #60]	; (801d6a4 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801d666:	f00c fb43 	bl	8029cf0 <__assert_func>
 801d66a:	2800      	cmp	r0, #0
 801d66c:	db06      	blt.n	801d67c <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801d66e:	fb90 f4f1 	sdiv	r4, r0, r1
 801d672:	fb01 0114 	mls	r1, r1, r4, r0
 801d676:	6014      	str	r4, [r2, #0]
 801d678:	6019      	str	r1, [r3, #0]
 801d67a:	bd38      	pop	{r3, r4, r5, pc}
 801d67c:	4240      	negs	r0, r0
 801d67e:	fb90 f4f1 	sdiv	r4, r0, r1
 801d682:	4265      	negs	r5, r4
 801d684:	fb01 0014 	mls	r0, r1, r4, r0
 801d688:	6015      	str	r5, [r2, #0]
 801d68a:	6018      	str	r0, [r3, #0]
 801d68c:	2800      	cmp	r0, #0
 801d68e:	d0f4      	beq.n	801d67a <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801d690:	6810      	ldr	r0, [r2, #0]
 801d692:	3801      	subs	r0, #1
 801d694:	6010      	str	r0, [r2, #0]
 801d696:	6818      	ldr	r0, [r3, #0]
 801d698:	1a09      	subs	r1, r1, r0
 801d69a:	e7ed      	b.n	801d678 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801d69c:	0802dddc 	.word	0x0802dddc
 801d6a0:	0802de1b 	.word	0x0802de1b
 801d6a4:	0802ddec 	.word	0x0802ddec

0801d6a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d6a8:	b570      	push	{r4, r5, r6, lr}
 801d6aa:	694a      	ldr	r2, [r1, #20]
 801d6ac:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801d6ae:	684b      	ldr	r3, [r1, #4]
 801d6b0:	1b54      	subs	r4, r2, r5
 801d6b2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801d6b4:	f000 8106 	beq.w	801d8c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d6b8:	1b9b      	subs	r3, r3, r6
 801d6ba:	d003      	beq.n	801d6c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d6bc:	4363      	muls	r3, r4
 801d6be:	2210      	movs	r2, #16
 801d6c0:	fb93 f3f2 	sdiv	r3, r3, r2
 801d6c4:	680c      	ldr	r4, [r1, #0]
 801d6c6:	698a      	ldr	r2, [r1, #24]
 801d6c8:	1b65      	subs	r5, r4, r5
 801d6ca:	f000 80fd 	beq.w	801d8c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d6ce:	1b92      	subs	r2, r2, r6
 801d6d0:	d003      	beq.n	801d6da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d6d2:	436a      	muls	r2, r5
 801d6d4:	2410      	movs	r4, #16
 801d6d6:	fb92 f2f4 	sdiv	r2, r2, r4
 801d6da:	1a9b      	subs	r3, r3, r2
 801d6dc:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801d904 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d6e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d6e4:	460a      	mov	r2, r1
 801d6e6:	ee07 3a90 	vmov	s15, r3
 801d6ea:	f100 040c 	add.w	r4, r0, #12
 801d6ee:	4603      	mov	r3, r0
 801d6f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d6f4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d6f8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d6fc:	eeb1 6a43 	vneg.f32	s12, s6
 801d700:	edd2 7a02 	vldr	s15, [r2, #8]
 801d704:	3214      	adds	r2, #20
 801d706:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d70a:	ece3 6a01 	vstmia	r3!, {s13}
 801d70e:	429c      	cmp	r4, r3
 801d710:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d714:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d718:	edc3 7a02 	vstr	s15, [r3, #8]
 801d71c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d720:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d724:	edc3 7a05 	vstr	s15, [r3, #20]
 801d728:	d1ea      	bne.n	801d700 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d72a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d72c:	698b      	ldr	r3, [r1, #24]
 801d72e:	edd0 4a02 	vldr	s9, [r0, #8]
 801d732:	1a9b      	subs	r3, r3, r2
 801d734:	edd0 3a00 	vldr	s7, [r0]
 801d738:	edd0 6a01 	vldr	s13, [r0, #4]
 801d73c:	ee07 3a90 	vmov	s15, r3
 801d740:	684b      	ldr	r3, [r1, #4]
 801d742:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d746:	ed90 5a05 	vldr	s10, [r0, #20]
 801d74a:	1a9b      	subs	r3, r3, r2
 801d74c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d750:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d754:	ed90 2a03 	vldr	s4, [r0, #12]
 801d758:	ee07 3a10 	vmov	s14, r3
 801d75c:	edd0 5a04 	vldr	s11, [r0, #16]
 801d760:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d764:	ed90 1a07 	vldr	s2, [r0, #28]
 801d768:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d76c:	edd0 2a06 	vldr	s5, [r0, #24]
 801d770:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d774:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d778:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d77c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d780:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d784:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d788:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801d78c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d78e:	694a      	ldr	r2, [r1, #20]
 801d790:	1b13      	subs	r3, r2, r4
 801d792:	ee07 3a10 	vmov	s14, r3
 801d796:	680b      	ldr	r3, [r1, #0]
 801d798:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d79c:	1b1b      	subs	r3, r3, r4
 801d79e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d7a2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d7a6:	ee07 3a10 	vmov	s14, r3
 801d7aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d7ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d7b2:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d7b6:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d7ba:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801d7be:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d7c0:	698b      	ldr	r3, [r1, #24]
 801d7c2:	1a9b      	subs	r3, r3, r2
 801d7c4:	ee06 3a90 	vmov	s13, r3
 801d7c8:	684b      	ldr	r3, [r1, #4]
 801d7ca:	1a9b      	subs	r3, r3, r2
 801d7cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d7d0:	ee07 3a10 	vmov	s14, r3
 801d7d4:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d7d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d7dc:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d7e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d7e4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d7e8:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d7ec:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801d7f0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d7f2:	694a      	ldr	r2, [r1, #20]
 801d7f4:	1b13      	subs	r3, r2, r4
 801d7f6:	ee07 3a10 	vmov	s14, r3
 801d7fa:	680b      	ldr	r3, [r1, #0]
 801d7fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d800:	1b1b      	subs	r3, r3, r4
 801d802:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d806:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d80a:	ee07 3a10 	vmov	s14, r3
 801d80e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d812:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d816:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d81a:	edd0 5a08 	vldr	s11, [r0, #32]
 801d81e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d822:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d826:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d82a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801d82e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d830:	698b      	ldr	r3, [r1, #24]
 801d832:	1a9b      	subs	r3, r3, r2
 801d834:	ee07 3a10 	vmov	s14, r3
 801d838:	684b      	ldr	r3, [r1, #4]
 801d83a:	1a9b      	subs	r3, r3, r2
 801d83c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d840:	ee01 3a90 	vmov	s3, r3
 801d844:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d848:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d84c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d850:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d854:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d858:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d85c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d860:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d862:	694a      	ldr	r2, [r1, #20]
 801d864:	1b13      	subs	r3, r2, r4
 801d866:	ee03 3a10 	vmov	s6, r3
 801d86a:	680b      	ldr	r3, [r1, #0]
 801d86c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d870:	1b1b      	subs	r3, r3, r4
 801d872:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d876:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d87a:	ee03 3a10 	vmov	s6, r3
 801d87e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d882:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d886:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d88a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d88e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d892:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d896:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d89a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8a2:	dd13      	ble.n	801d8cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d8a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d8a8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d8ac:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d8ae:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d8b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8ba:	dd15      	ble.n	801d8e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d8bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d8c0:	6403      	str	r3, [r0, #64]	; 0x40
 801d8c2:	bd70      	pop	{r4, r5, r6, pc}
 801d8c4:	4623      	mov	r3, r4
 801d8c6:	e6fd      	b.n	801d6c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d8c8:	462a      	mov	r2, r5
 801d8ca:	e706      	b.n	801d6da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d8cc:	d502      	bpl.n	801d8d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d8ce:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d8d2:	e7e9      	b.n	801d8a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d8d4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d8d8:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d8dc:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8e4:	dade      	bge.n	801d8a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d8e6:	e7f2      	b.n	801d8ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d8e8:	d502      	bpl.n	801d8f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d8ea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d8ee:	e7e7      	b.n	801d8c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d8f0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d8f4:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d8f8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d900:	dadc      	bge.n	801d8bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d902:	e7f2      	b.n	801d8ea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d904:	3d800000 	.word	0x3d800000

0801d908 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d90c:	f04f 0814 	mov.w	r8, #20
 801d910:	4604      	mov	r4, r0
 801d912:	4617      	mov	r7, r2
 801d914:	460d      	mov	r5, r1
 801d916:	fb08 f903 	mul.w	r9, r8, r3
 801d91a:	461e      	mov	r6, r3
 801d91c:	eb02 0a09 	add.w	sl, r2, r9
 801d920:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d924:	f7ff fe88 	bl	801d638 <_ZN8touchgfx8ceil28_4El>
 801d928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d92a:	6160      	str	r0, [r4, #20]
 801d92c:	fb08 f803 	mul.w	r8, r8, r3
 801d930:	9001      	str	r0, [sp, #4]
 801d932:	eb07 0b08 	add.w	fp, r7, r8
 801d936:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d93a:	f7ff fe7d 	bl	801d638 <_ZN8touchgfx8ceil28_4El>
 801d93e:	9a01      	ldr	r2, [sp, #4]
 801d940:	1a80      	subs	r0, r0, r2
 801d942:	61a0      	str	r0, [r4, #24]
 801d944:	2800      	cmp	r0, #0
 801d946:	f000 8088 	beq.w	801da5a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801d94a:	f857 3009 	ldr.w	r3, [r7, r9]
 801d94e:	f857 c008 	ldr.w	ip, [r7, r8]
 801d952:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d956:	ebac 0c03 	sub.w	ip, ip, r3
 801d95a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801d95e:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801d962:	1a40      	subs	r0, r0, r1
 801d964:	fb0b f202 	mul.w	r2, fp, r2
 801d968:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801d96c:	fb0c 2211 	mls	r2, ip, r1, r2
 801d970:	4641      	mov	r1, r8
 801d972:	fb00 2003 	mla	r0, r0, r3, r2
 801d976:	f104 0310 	add.w	r3, r4, #16
 801d97a:	4622      	mov	r2, r4
 801d97c:	3801      	subs	r0, #1
 801d97e:	4440      	add	r0, r8
 801d980:	f7ff fe6a 	bl	801d658 <_ZN8touchgfx11floorDivModEllRlS0_>
 801d984:	f104 0308 	add.w	r3, r4, #8
 801d988:	1d22      	adds	r2, r4, #4
 801d98a:	4641      	mov	r1, r8
 801d98c:	4658      	mov	r0, fp
 801d98e:	f7ff fe63 	bl	801d658 <_ZN8touchgfx11floorDivModEllRlS0_>
 801d992:	f8c4 800c 	str.w	r8, [r4, #12]
 801d996:	6962      	ldr	r2, [r4, #20]
 801d998:	f8da 3004 	ldr.w	r3, [sl, #4]
 801d99c:	eddf 6a31 	vldr	s13, [pc, #196]	; 801da64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d9a0:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d9a4:	6822      	ldr	r2, [r4, #0]
 801d9a6:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d9aa:	ee07 3a10 	vmov	s14, r3
 801d9ae:	f857 3009 	ldr.w	r3, [r7, r9]
 801d9b2:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d9b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d9ba:	ee07 3a90 	vmov	s15, r3
 801d9be:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801d9c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d9c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d9ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d9ce:	edd3 6a00 	vldr	s13, [r3]
 801d9d2:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d9d6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d9da:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d9de:	edc4 6a07 	vstr	s13, [r4, #28]
 801d9e2:	edd4 6a01 	vldr	s13, [r4, #4]
 801d9e6:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801d9ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d9ee:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d9f2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d9f6:	ed84 6a08 	vstr	s12, [r4, #32]
 801d9fa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801d9fc:	6262      	str	r2, [r4, #36]	; 0x24
 801d9fe:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801da02:	ed93 6a03 	vldr	s12, [r3, #12]
 801da06:	eea5 6a87 	vfma.f32	s12, s11, s14
 801da0a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801da0e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801da12:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801da16:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801da1a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801da1e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801da22:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801da26:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801da28:	6322      	str	r2, [r4, #48]	; 0x30
 801da2a:	ed93 6a06 	vldr	s12, [r3, #24]
 801da2e:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801da32:	eea5 6a87 	vfma.f32	s12, s11, s14
 801da36:	eeb0 7a46 	vmov.f32	s14, s12
 801da3a:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801da3e:	eea6 7a27 	vfma.f32	s14, s12, s15
 801da42:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801da46:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801da4a:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801da4e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801da52:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801da56:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801da58:	63e3      	str	r3, [r4, #60]	; 0x3c
 801da5a:	4620      	mov	r0, r4
 801da5c:	b003      	add	sp, #12
 801da5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da62:	bf00      	nop
 801da64:	3d800000 	.word	0x3d800000

0801da68 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801da68:	4b01      	ldr	r3, [pc, #4]	; (801da70 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801da6a:	6018      	str	r0, [r3, #0]
 801da6c:	4770      	bx	lr
 801da6e:	bf00      	nop
 801da70:	2400afa4 	.word	0x2400afa4

0801da74 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801da74:	4b06      	ldr	r3, [pc, #24]	; (801da90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801da76:	881a      	ldrh	r2, [r3, #0]
 801da78:	4282      	cmp	r2, r0
 801da7a:	d807      	bhi.n	801da8c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801da7c:	4b05      	ldr	r3, [pc, #20]	; (801da94 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801da7e:	881b      	ldrh	r3, [r3, #0]
 801da80:	4413      	add	r3, r2
 801da82:	4298      	cmp	r0, r3
 801da84:	bfac      	ite	ge
 801da86:	2000      	movge	r0, #0
 801da88:	2001      	movlt	r0, #1
 801da8a:	4770      	bx	lr
 801da8c:	2000      	movs	r0, #0
 801da8e:	4770      	bx	lr
 801da90:	2400afc4 	.word	0x2400afc4
 801da94:	2400afc8 	.word	0x2400afc8

0801da98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801da98:	b508      	push	{r3, lr}
 801da9a:	4601      	mov	r1, r0
 801da9c:	f7ff ffea 	bl	801da74 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801daa0:	b118      	cbz	r0, 801daaa <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801daa2:	4b02      	ldr	r3, [pc, #8]	; (801daac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801daa4:	681b      	ldr	r3, [r3, #0]
 801daa6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801daaa:	bd08      	pop	{r3, pc}
 801daac:	2400afa8 	.word	0x2400afa8

0801dab0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801dab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dab4:	4d28      	ldr	r5, [pc, #160]	; (801db58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801dab6:	682b      	ldr	r3, [r5, #0]
 801dab8:	2b00      	cmp	r3, #0
 801daba:	d04a      	beq.n	801db52 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801dabc:	4a27      	ldr	r2, [pc, #156]	; (801db5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801dabe:	4e28      	ldr	r6, [pc, #160]	; (801db60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801dac0:	8810      	ldrh	r0, [r2, #0]
 801dac2:	f8b6 8000 	ldrh.w	r8, [r6]
 801dac6:	4c27      	ldr	r4, [pc, #156]	; (801db64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801dac8:	4440      	add	r0, r8
 801daca:	4f27      	ldr	r7, [pc, #156]	; (801db68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801dacc:	1c41      	adds	r1, r0, #1
 801dace:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801dad2:	f021 0101 	bic.w	r1, r1, #1
 801dad6:	eb03 020e 	add.w	r2, r3, lr
 801dada:	0409      	lsls	r1, r1, #16
 801dadc:	6022      	str	r2, [r4, #0]
 801dade:	0c09      	lsrs	r1, r1, #16
 801dae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801dae4:	eb0e 010c 	add.w	r1, lr, ip
 801dae8:	185a      	adds	r2, r3, r1
 801daea:	603a      	str	r2, [r7, #0]
 801daec:	220e      	movs	r2, #14
 801daee:	fb02 f208 	mul.w	r2, r2, r8
 801daf2:	3203      	adds	r2, #3
 801daf4:	f022 0203 	bic.w	r2, r2, #3
 801daf8:	4411      	add	r1, r2
 801dafa:	440b      	add	r3, r1
 801dafc:	491b      	ldr	r1, [pc, #108]	; (801db6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801dafe:	600b      	str	r3, [r1, #0]
 801db00:	2300      	movs	r3, #0
 801db02:	491b      	ldr	r1, [pc, #108]	; (801db70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801db04:	800b      	strh	r3, [r1, #0]
 801db06:	491b      	ldr	r1, [pc, #108]	; (801db74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801db08:	6809      	ldr	r1, [r1, #0]
 801db0a:	eba1 010e 	sub.w	r1, r1, lr
 801db0e:	eba1 010c 	sub.w	r1, r1, ip
 801db12:	469c      	mov	ip, r3
 801db14:	1a8a      	subs	r2, r1, r2
 801db16:	4918      	ldr	r1, [pc, #96]	; (801db78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801db18:	600a      	str	r2, [r1, #0]
 801db1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801db1e:	4a17      	ldr	r2, [pc, #92]	; (801db7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801db20:	8013      	strh	r3, [r2, #0]
 801db22:	4283      	cmp	r3, r0
 801db24:	d10d      	bne.n	801db42 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801db26:	8835      	ldrh	r5, [r6, #0]
 801db28:	2300      	movs	r3, #0
 801db2a:	6838      	ldr	r0, [r7, #0]
 801db2c:	240e      	movs	r4, #14
 801db2e:	429d      	cmp	r5, r3
 801db30:	d90f      	bls.n	801db52 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801db32:	fb04 0203 	mla	r2, r4, r3, r0
 801db36:	3301      	adds	r3, #1
 801db38:	7b11      	ldrb	r1, [r2, #12]
 801db3a:	f36f 1145 	bfc	r1, #5, #1
 801db3e:	7311      	strb	r1, [r2, #12]
 801db40:	e7f5      	b.n	801db2e <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801db42:	682a      	ldr	r2, [r5, #0]
 801db44:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801db48:	6822      	ldr	r2, [r4, #0]
 801db4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801db4e:	3301      	adds	r3, #1
 801db50:	e7e7      	b.n	801db22 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801db52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db56:	bf00      	nop
 801db58:	2400afa8 	.word	0x2400afa8
 801db5c:	2400afc4 	.word	0x2400afc4
 801db60:	2400afc8 	.word	0x2400afc8
 801db64:	2400afbc 	.word	0x2400afbc
 801db68:	2400afac 	.word	0x2400afac
 801db6c:	2400afb4 	.word	0x2400afb4
 801db70:	2400afc6 	.word	0x2400afc6
 801db74:	2400afb0 	.word	0x2400afb0
 801db78:	2400afc0 	.word	0x2400afc0
 801db7c:	2400afb8 	.word	0x2400afb8

0801db80 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801db80:	4b10      	ldr	r3, [pc, #64]	; (801dbc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801db82:	b510      	push	{r4, lr}
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	b9db      	cbnz	r3, 801dbc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801db88:	b1d1      	cbz	r1, 801dbc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801db8a:	4b0f      	ldr	r3, [pc, #60]	; (801dbc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801db8c:	240e      	movs	r4, #14
 801db8e:	801a      	strh	r2, [r3, #0]
 801db90:	b292      	uxth	r2, r2
 801db92:	4b0e      	ldr	r3, [pc, #56]	; (801dbcc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801db94:	881b      	ldrh	r3, [r3, #0]
 801db96:	4413      	add	r3, r2
 801db98:	4362      	muls	r2, r4
 801db9a:	2406      	movs	r4, #6
 801db9c:	fb04 2203 	mla	r2, r4, r3, r2
 801dba0:	428a      	cmp	r2, r1
 801dba2:	d305      	bcc.n	801dbb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801dba4:	4b0a      	ldr	r3, [pc, #40]	; (801dbd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801dba6:	2135      	movs	r1, #53	; 0x35
 801dba8:	4a0a      	ldr	r2, [pc, #40]	; (801dbd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801dbaa:	480b      	ldr	r0, [pc, #44]	; (801dbd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801dbac:	f00c f8a0 	bl	8029cf0 <__assert_func>
 801dbb0:	4b0a      	ldr	r3, [pc, #40]	; (801dbdc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801dbb2:	6019      	str	r1, [r3, #0]
 801dbb4:	4b0a      	ldr	r3, [pc, #40]	; (801dbe0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801dbb6:	6018      	str	r0, [r3, #0]
 801dbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbbc:	f7ff bf78 	b.w	801dab0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801dbc0:	bd10      	pop	{r4, pc}
 801dbc2:	bf00      	nop
 801dbc4:	2400afb4 	.word	0x2400afb4
 801dbc8:	2400afc8 	.word	0x2400afc8
 801dbcc:	2400afc4 	.word	0x2400afc4
 801dbd0:	0802deb9 	.word	0x0802deb9
 801dbd4:	0802df4e 	.word	0x0802df4e
 801dbd8:	0802de94 	.word	0x0802de94
 801dbdc:	2400afb0 	.word	0x2400afb0
 801dbe0:	2400afa8 	.word	0x2400afa8

0801dbe4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801dbe4:	b470      	push	{r4, r5, r6}
 801dbe6:	4c07      	ldr	r4, [pc, #28]	; (801dc04 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801dbe8:	4605      	mov	r5, r0
 801dbea:	4610      	mov	r0, r2
 801dbec:	9a03      	ldr	r2, [sp, #12]
 801dbee:	6826      	ldr	r6, [r4, #0]
 801dbf0:	b936      	cbnz	r6, 801dc00 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801dbf2:	6025      	str	r5, [r4, #0]
 801dbf4:	4c04      	ldr	r4, [pc, #16]	; (801dc08 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801dbf6:	8021      	strh	r1, [r4, #0]
 801dbf8:	4619      	mov	r1, r3
 801dbfa:	bc70      	pop	{r4, r5, r6}
 801dbfc:	f7ff bfc0 	b.w	801db80 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801dc00:	bc70      	pop	{r4, r5, r6}
 801dc02:	4770      	bx	lr
 801dc04:	2400afcc 	.word	0x2400afcc
 801dc08:	2400afc4 	.word	0x2400afc4

0801dc0c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801dc0c:	b508      	push	{r3, lr}
 801dc0e:	4b14      	ldr	r3, [pc, #80]	; (801dc60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801dc10:	6819      	ldr	r1, [r3, #0]
 801dc12:	b931      	cbnz	r1, 801dc22 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801dc14:	4b13      	ldr	r3, [pc, #76]	; (801dc64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801dc16:	f240 4185 	movw	r1, #1157	; 0x485
 801dc1a:	4a13      	ldr	r2, [pc, #76]	; (801dc68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801dc1c:	4813      	ldr	r0, [pc, #76]	; (801dc6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801dc1e:	f00c f867 	bl	8029cf0 <__assert_func>
 801dc22:	4a13      	ldr	r2, [pc, #76]	; (801dc70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801dc24:	8803      	ldrh	r3, [r0, #0]
 801dc26:	8812      	ldrh	r2, [r2, #0]
 801dc28:	4293      	cmp	r3, r2
 801dc2a:	d204      	bcs.n	801dc36 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801dc2c:	2214      	movs	r2, #20
 801dc2e:	fb02 1303 	mla	r3, r2, r3, r1
 801dc32:	8918      	ldrh	r0, [r3, #8]
 801dc34:	bd08      	pop	{r3, pc}
 801dc36:	490f      	ldr	r1, [pc, #60]	; (801dc74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801dc38:	8809      	ldrh	r1, [r1, #0]
 801dc3a:	4411      	add	r1, r2
 801dc3c:	428b      	cmp	r3, r1
 801dc3e:	da06      	bge.n	801dc4e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801dc40:	1a9b      	subs	r3, r3, r2
 801dc42:	4a0d      	ldr	r2, [pc, #52]	; (801dc78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801dc44:	210e      	movs	r1, #14
 801dc46:	6812      	ldr	r2, [r2, #0]
 801dc48:	fb01 2303 	mla	r3, r1, r3, r2
 801dc4c:	e7f1      	b.n	801dc32 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801dc4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dc52:	4293      	cmp	r3, r2
 801dc54:	bf0a      	itet	eq
 801dc56:	4b09      	ldreq	r3, [pc, #36]	; (801dc7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801dc58:	2000      	movne	r0, #0
 801dc5a:	8818      	ldrheq	r0, [r3, #0]
 801dc5c:	e7ea      	b.n	801dc34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801dc5e:	bf00      	nop
 801dc60:	2400afcc 	.word	0x2400afcc
 801dc64:	0802df12 	.word	0x0802df12
 801dc68:	0802dffb 	.word	0x0802dffb
 801dc6c:	0802de94 	.word	0x0802de94
 801dc70:	2400afc4 	.word	0x2400afc4
 801dc74:	2400afc8 	.word	0x2400afc8
 801dc78:	2400afac 	.word	0x2400afac
 801dc7c:	2400af38 	.word	0x2400af38

0801dc80 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801dc80:	b508      	push	{r3, lr}
 801dc82:	4b14      	ldr	r3, [pc, #80]	; (801dcd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801dc84:	6819      	ldr	r1, [r3, #0]
 801dc86:	b931      	cbnz	r1, 801dc96 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801dc88:	4b13      	ldr	r3, [pc, #76]	; (801dcd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801dc8a:	f240 4199 	movw	r1, #1177	; 0x499
 801dc8e:	4a13      	ldr	r2, [pc, #76]	; (801dcdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801dc90:	4813      	ldr	r0, [pc, #76]	; (801dce0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801dc92:	f00c f82d 	bl	8029cf0 <__assert_func>
 801dc96:	4a13      	ldr	r2, [pc, #76]	; (801dce4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801dc98:	8803      	ldrh	r3, [r0, #0]
 801dc9a:	8812      	ldrh	r2, [r2, #0]
 801dc9c:	4293      	cmp	r3, r2
 801dc9e:	d204      	bcs.n	801dcaa <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801dca0:	2214      	movs	r2, #20
 801dca2:	fb02 1303 	mla	r3, r2, r3, r1
 801dca6:	8958      	ldrh	r0, [r3, #10]
 801dca8:	bd08      	pop	{r3, pc}
 801dcaa:	490f      	ldr	r1, [pc, #60]	; (801dce8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801dcac:	8809      	ldrh	r1, [r1, #0]
 801dcae:	4411      	add	r1, r2
 801dcb0:	428b      	cmp	r3, r1
 801dcb2:	da06      	bge.n	801dcc2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801dcb4:	1a9b      	subs	r3, r3, r2
 801dcb6:	4a0d      	ldr	r2, [pc, #52]	; (801dcec <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801dcb8:	210e      	movs	r1, #14
 801dcba:	6812      	ldr	r2, [r2, #0]
 801dcbc:	fb01 2303 	mla	r3, r1, r3, r2
 801dcc0:	e7f1      	b.n	801dca6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801dcc2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dcc6:	4293      	cmp	r3, r2
 801dcc8:	bf0a      	itet	eq
 801dcca:	4b09      	ldreq	r3, [pc, #36]	; (801dcf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801dccc:	2000      	movne	r0, #0
 801dcce:	8818      	ldrheq	r0, [r3, #0]
 801dcd0:	e7ea      	b.n	801dca8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801dcd2:	bf00      	nop
 801dcd4:	2400afcc 	.word	0x2400afcc
 801dcd8:	0802df12 	.word	0x0802df12
 801dcdc:	0802e027 	.word	0x0802e027
 801dce0:	0802de94 	.word	0x0802de94
 801dce4:	2400afc4 	.word	0x2400afc4
 801dce8:	2400afc8 	.word	0x2400afc8
 801dcec:	2400afac 	.word	0x2400afac
 801dcf0:	2400af3a 	.word	0x2400af3a

0801dcf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801dcf4:	4b23      	ldr	r3, [pc, #140]	; (801dd84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801dcf6:	b510      	push	{r4, lr}
 801dcf8:	681c      	ldr	r4, [r3, #0]
 801dcfa:	b934      	cbnz	r4, 801dd0a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801dcfc:	4b22      	ldr	r3, [pc, #136]	; (801dd88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801dcfe:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801dd02:	4a22      	ldr	r2, [pc, #136]	; (801dd8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801dd04:	4822      	ldr	r0, [pc, #136]	; (801dd90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801dd06:	f00b fff3 	bl	8029cf0 <__assert_func>
 801dd0a:	4a22      	ldr	r2, [pc, #136]	; (801dd94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801dd0c:	880b      	ldrh	r3, [r1, #0]
 801dd0e:	8812      	ldrh	r2, [r2, #0]
 801dd10:	4293      	cmp	r3, r2
 801dd12:	d211      	bcs.n	801dd38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801dd14:	2214      	movs	r2, #20
 801dd16:	fb02 4303 	mla	r3, r2, r3, r4
 801dd1a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801dd1e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801dd22:	8a1a      	ldrh	r2, [r3, #16]
 801dd24:	8a5b      	ldrh	r3, [r3, #18]
 801dd26:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801dd2a:	8004      	strh	r4, [r0, #0]
 801dd2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dd30:	8041      	strh	r1, [r0, #2]
 801dd32:	8082      	strh	r2, [r0, #4]
 801dd34:	80c3      	strh	r3, [r0, #6]
 801dd36:	e00e      	b.n	801dd56 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801dd38:	4917      	ldr	r1, [pc, #92]	; (801dd98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801dd3a:	8809      	ldrh	r1, [r1, #0]
 801dd3c:	4411      	add	r1, r2
 801dd3e:	428b      	cmp	r3, r1
 801dd40:	da0a      	bge.n	801dd58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801dd42:	1a9b      	subs	r3, r3, r2
 801dd44:	4a15      	ldr	r2, [pc, #84]	; (801dd9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801dd46:	210e      	movs	r1, #14
 801dd48:	6812      	ldr	r2, [r2, #0]
 801dd4a:	fb01 2303 	mla	r3, r1, r3, r2
 801dd4e:	681a      	ldr	r2, [r3, #0]
 801dd50:	6002      	str	r2, [r0, #0]
 801dd52:	685a      	ldr	r2, [r3, #4]
 801dd54:	6042      	str	r2, [r0, #4]
 801dd56:	bd10      	pop	{r4, pc}
 801dd58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dd5c:	4293      	cmp	r3, r2
 801dd5e:	d10b      	bne.n	801dd78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801dd60:	4b0f      	ldr	r3, [pc, #60]	; (801dda0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801dd62:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dd66:	4b0f      	ldr	r3, [pc, #60]	; (801dda4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801dd68:	8081      	strh	r1, [r0, #4]
 801dd6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dd6e:	2300      	movs	r3, #0
 801dd70:	80c2      	strh	r2, [r0, #6]
 801dd72:	8003      	strh	r3, [r0, #0]
 801dd74:	8043      	strh	r3, [r0, #2]
 801dd76:	e7ee      	b.n	801dd56 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801dd78:	2300      	movs	r3, #0
 801dd7a:	8003      	strh	r3, [r0, #0]
 801dd7c:	8043      	strh	r3, [r0, #2]
 801dd7e:	8083      	strh	r3, [r0, #4]
 801dd80:	e7d8      	b.n	801dd34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801dd82:	bf00      	nop
 801dd84:	2400afcc 	.word	0x2400afcc
 801dd88:	0802df12 	.word	0x0802df12
 801dd8c:	0802df94 	.word	0x0802df94
 801dd90:	0802de94 	.word	0x0802de94
 801dd94:	2400afc4 	.word	0x2400afc4
 801dd98:	2400afc8 	.word	0x2400afc8
 801dd9c:	2400afac 	.word	0x2400afac
 801dda0:	2400af38 	.word	0x2400af38
 801dda4:	2400af3a 	.word	0x2400af3a

0801dda8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801dda8:	4b18      	ldr	r3, [pc, #96]	; (801de0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	b34b      	cbz	r3, 801de02 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801ddae:	4a18      	ldr	r2, [pc, #96]	; (801de10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ddb0:	8800      	ldrh	r0, [r0, #0]
 801ddb2:	8812      	ldrh	r2, [r2, #0]
 801ddb4:	4290      	cmp	r0, r2
 801ddb6:	d211      	bcs.n	801dddc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801ddb8:	2214      	movs	r2, #20
 801ddba:	fb02 3300 	mla	r3, r2, r0, r3
 801ddbe:	8a1a      	ldrh	r2, [r3, #16]
 801ddc0:	8919      	ldrh	r1, [r3, #8]
 801ddc2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ddc6:	428a      	cmp	r2, r1
 801ddc8:	db1d      	blt.n	801de06 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ddca:	8a58      	ldrh	r0, [r3, #18]
 801ddcc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ddd0:	895b      	ldrh	r3, [r3, #10]
 801ddd2:	4298      	cmp	r0, r3
 801ddd4:	bfac      	ite	ge
 801ddd6:	2000      	movge	r0, #0
 801ddd8:	2001      	movlt	r0, #1
 801ddda:	4770      	bx	lr
 801dddc:	4b0d      	ldr	r3, [pc, #52]	; (801de14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ddde:	881b      	ldrh	r3, [r3, #0]
 801dde0:	4413      	add	r3, r2
 801dde2:	4298      	cmp	r0, r3
 801dde4:	da0d      	bge.n	801de02 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801dde6:	4b0c      	ldr	r3, [pc, #48]	; (801de18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801dde8:	1a80      	subs	r0, r0, r2
 801ddea:	220e      	movs	r2, #14
 801ddec:	681b      	ldr	r3, [r3, #0]
 801ddee:	fb02 3300 	mla	r3, r2, r0, r3
 801ddf2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ddf6:	891a      	ldrh	r2, [r3, #8]
 801ddf8:	4291      	cmp	r1, r2
 801ddfa:	db04      	blt.n	801de06 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ddfc:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801de00:	e7e6      	b.n	801ddd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801de02:	2000      	movs	r0, #0
 801de04:	4770      	bx	lr
 801de06:	2001      	movs	r0, #1
 801de08:	4770      	bx	lr
 801de0a:	bf00      	nop
 801de0c:	2400afcc 	.word	0x2400afcc
 801de10:	2400afc4 	.word	0x2400afc4
 801de14:	2400afc8 	.word	0x2400afc8
 801de18:	2400afac 	.word	0x2400afac

0801de1c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801de1c:	b508      	push	{r3, lr}
 801de1e:	4b12      	ldr	r3, [pc, #72]	; (801de68 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801de20:	6819      	ldr	r1, [r3, #0]
 801de22:	b931      	cbnz	r1, 801de32 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801de24:	4b11      	ldr	r3, [pc, #68]	; (801de6c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801de26:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801de2a:	4a11      	ldr	r2, [pc, #68]	; (801de70 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801de2c:	4811      	ldr	r0, [pc, #68]	; (801de74 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801de2e:	f00b ff5f 	bl	8029cf0 <__assert_func>
 801de32:	8803      	ldrh	r3, [r0, #0]
 801de34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801de38:	4293      	cmp	r3, r2
 801de3a:	d012      	beq.n	801de62 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801de3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801de40:	4293      	cmp	r3, r2
 801de42:	d103      	bne.n	801de4c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801de44:	4b0c      	ldr	r3, [pc, #48]	; (801de78 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801de46:	681b      	ldr	r3, [r3, #0]
 801de48:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801de4a:	bd08      	pop	{r3, pc}
 801de4c:	4a0b      	ldr	r2, [pc, #44]	; (801de7c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801de4e:	6812      	ldr	r2, [r2, #0]
 801de50:	b11a      	cbz	r2, 801de5a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801de52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801de56:	2800      	cmp	r0, #0
 801de58:	d1f7      	bne.n	801de4a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801de5a:	2214      	movs	r2, #20
 801de5c:	4353      	muls	r3, r2
 801de5e:	58c8      	ldr	r0, [r1, r3]
 801de60:	e7f3      	b.n	801de4a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801de62:	2000      	movs	r0, #0
 801de64:	e7f1      	b.n	801de4a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801de66:	bf00      	nop
 801de68:	2400afcc 	.word	0x2400afcc
 801de6c:	0802df12 	.word	0x0802df12
 801de70:	0802dfca 	.word	0x0802dfca
 801de74:	0802de94 	.word	0x0802de94
 801de78:	2400af44 	.word	0x2400af44
 801de7c:	2400afa8 	.word	0x2400afa8

0801de80 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801de80:	8802      	ldrh	r2, [r0, #0]
 801de82:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801de86:	429a      	cmp	r2, r3
 801de88:	d845      	bhi.n	801df16 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801de8a:	4b24      	ldr	r3, [pc, #144]	; (801df1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801de8c:	8818      	ldrh	r0, [r3, #0]
 801de8e:	4282      	cmp	r2, r0
 801de90:	d221      	bcs.n	801ded6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801de92:	4b23      	ldr	r3, [pc, #140]	; (801df20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801de94:	6819      	ldr	r1, [r3, #0]
 801de96:	2314      	movs	r3, #20
 801de98:	fb03 1302 	mla	r3, r3, r2, r1
 801de9c:	6858      	ldr	r0, [r3, #4]
 801de9e:	2800      	cmp	r0, #0
 801dea0:	d03a      	beq.n	801df18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801dea2:	4920      	ldr	r1, [pc, #128]	; (801df24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801dea4:	6809      	ldr	r1, [r1, #0]
 801dea6:	2900      	cmp	r1, #0
 801dea8:	d036      	beq.n	801df18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801deaa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801deae:	2900      	cmp	r1, #0
 801deb0:	d032      	beq.n	801df18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801deb2:	891a      	ldrh	r2, [r3, #8]
 801deb4:	8958      	ldrh	r0, [r3, #10]
 801deb6:	4350      	muls	r0, r2
 801deb8:	7c5a      	ldrb	r2, [r3, #17]
 801deba:	7cdb      	ldrb	r3, [r3, #19]
 801debc:	0952      	lsrs	r2, r2, #5
 801debe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801dec2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801dec6:	2b0b      	cmp	r3, #11
 801dec8:	bf18      	it	ne
 801deca:	0040      	lslne	r0, r0, #1
 801decc:	3003      	adds	r0, #3
 801dece:	f020 0003 	bic.w	r0, r0, #3
 801ded2:	4408      	add	r0, r1
 801ded4:	4770      	bx	lr
 801ded6:	4b14      	ldr	r3, [pc, #80]	; (801df28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801ded8:	881b      	ldrh	r3, [r3, #0]
 801deda:	4403      	add	r3, r0
 801dedc:	429a      	cmp	r2, r3
 801dede:	da1a      	bge.n	801df16 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801dee0:	4b12      	ldr	r3, [pc, #72]	; (801df2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801dee2:	1a10      	subs	r0, r2, r0
 801dee4:	210e      	movs	r1, #14
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	fb01 3000 	mla	r0, r1, r0, r3
 801deec:	7b03      	ldrb	r3, [r0, #12]
 801deee:	f003 031f 	and.w	r3, r3, #31
 801def2:	2b0b      	cmp	r3, #11
 801def4:	d10b      	bne.n	801df0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801def6:	8903      	ldrh	r3, [r0, #8]
 801def8:	8940      	ldrh	r0, [r0, #10]
 801defa:	4358      	muls	r0, r3
 801defc:	4b09      	ldr	r3, [pc, #36]	; (801df24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801defe:	3003      	adds	r0, #3
 801df00:	6819      	ldr	r1, [r3, #0]
 801df02:	f020 0303 	bic.w	r3, r0, #3
 801df06:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801df0a:	4418      	add	r0, r3
 801df0c:	4770      	bx	lr
 801df0e:	2b0d      	cmp	r3, #13
 801df10:	d101      	bne.n	801df16 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801df12:	300d      	adds	r0, #13
 801df14:	4770      	bx	lr
 801df16:	2000      	movs	r0, #0
 801df18:	4770      	bx	lr
 801df1a:	bf00      	nop
 801df1c:	2400afc4 	.word	0x2400afc4
 801df20:	2400afcc 	.word	0x2400afcc
 801df24:	2400afa8 	.word	0x2400afa8
 801df28:	2400afc8 	.word	0x2400afc8
 801df2c:	2400afac 	.word	0x2400afac

0801df30 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801df30:	4b17      	ldr	r3, [pc, #92]	; (801df90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801df32:	b510      	push	{r4, lr}
 801df34:	6819      	ldr	r1, [r3, #0]
 801df36:	8803      	ldrh	r3, [r0, #0]
 801df38:	b1e9      	cbz	r1, 801df76 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801df3a:	4a16      	ldr	r2, [pc, #88]	; (801df94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801df3c:	8812      	ldrh	r2, [r2, #0]
 801df3e:	429a      	cmp	r2, r3
 801df40:	d90a      	bls.n	801df58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801df42:	2214      	movs	r2, #20
 801df44:	fb02 1303 	mla	r3, r2, r3, r1
 801df48:	7c58      	ldrb	r0, [r3, #17]
 801df4a:	0942      	lsrs	r2, r0, #5
 801df4c:	7cd8      	ldrb	r0, [r3, #19]
 801df4e:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801df52:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801df56:	bd10      	pop	{r4, pc}
 801df58:	490f      	ldr	r1, [pc, #60]	; (801df98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801df5a:	8809      	ldrh	r1, [r1, #0]
 801df5c:	4411      	add	r1, r2
 801df5e:	428b      	cmp	r3, r1
 801df60:	da09      	bge.n	801df76 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801df62:	1a9b      	subs	r3, r3, r2
 801df64:	4a0d      	ldr	r2, [pc, #52]	; (801df9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801df66:	210e      	movs	r1, #14
 801df68:	6812      	ldr	r2, [r2, #0]
 801df6a:	fb01 2303 	mla	r3, r1, r3, r2
 801df6e:	7b18      	ldrb	r0, [r3, #12]
 801df70:	f000 001f 	and.w	r0, r0, #31
 801df74:	e7ef      	b.n	801df56 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801df76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801df7a:	4293      	cmp	r3, r2
 801df7c:	d106      	bne.n	801df8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801df7e:	f7e7 fa4f 	bl	8005420 <_ZN8touchgfx3HAL3lcdEv>
 801df82:	6803      	ldr	r3, [r0, #0]
 801df84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df8a:	4718      	bx	r3
 801df8c:	2000      	movs	r0, #0
 801df8e:	e7e2      	b.n	801df56 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801df90:	2400afcc 	.word	0x2400afcc
 801df94:	2400afc4 	.word	0x2400afc4
 801df98:	2400afc8 	.word	0x2400afc8
 801df9c:	2400afac 	.word	0x2400afac

0801dfa0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801dfa0:	2010      	movs	r0, #16
 801dfa2:	4770      	bx	lr

0801dfa4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801dfa4:	2000      	movs	r0, #0
 801dfa6:	4770      	bx	lr

0801dfa8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801dfa8:	2bff      	cmp	r3, #255	; 0xff
 801dfaa:	d050      	beq.n	801e04e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801dfac:	2a0b      	cmp	r2, #11
 801dfae:	d04a      	beq.n	801e046 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801dfb0:	d80e      	bhi.n	801dfd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801dfb2:	2a03      	cmp	r2, #3
 801dfb4:	d03f      	beq.n	801e036 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801dfb6:	d804      	bhi.n	801dfc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801dfb8:	2a01      	cmp	r2, #1
 801dfba:	d03e      	beq.n	801e03a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801dfbc:	d93f      	bls.n	801e03e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801dfbe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801dfc0:	4770      	bx	lr
 801dfc2:	2a09      	cmp	r2, #9
 801dfc4:	d03f      	beq.n	801e046 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801dfc6:	d83c      	bhi.n	801e042 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801dfc8:	2a08      	cmp	r2, #8
 801dfca:	d03a      	beq.n	801e042 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801dfcc:	2000      	movs	r0, #0
 801dfce:	4770      	bx	lr
 801dfd0:	2a2f      	cmp	r2, #47	; 0x2f
 801dfd2:	d024      	beq.n	801e01e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801dfd4:	d80d      	bhi.n	801dff2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801dfd6:	2a2d      	cmp	r2, #45	; 0x2d
 801dfd8:	d014      	beq.n	801e004 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801dfda:	d826      	bhi.n	801e02a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801dfdc:	2a2c      	cmp	r2, #44	; 0x2c
 801dfde:	d1f5      	bne.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfe0:	684b      	ldr	r3, [r1, #4]
 801dfe2:	781b      	ldrb	r3, [r3, #0]
 801dfe4:	2b01      	cmp	r3, #1
 801dfe6:	d018      	beq.n	801e01a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801dfe8:	d323      	bcc.n	801e032 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801dfea:	2b02      	cmp	r3, #2
 801dfec:	d1ee      	bne.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfee:	6880      	ldr	r0, [r0, #8]
 801dff0:	4770      	bx	lr
 801dff2:	2a31      	cmp	r2, #49	; 0x31
 801dff4:	d004      	beq.n	801e000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801dff6:	d328      	bcc.n	801e04a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801dff8:	2a32      	cmp	r2, #50	; 0x32
 801dffa:	d026      	beq.n	801e04a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801dffc:	2a33      	cmp	r2, #51	; 0x33
 801dffe:	d1e5      	bne.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e000:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801e002:	4770      	bx	lr
 801e004:	684b      	ldr	r3, [r1, #4]
 801e006:	781b      	ldrb	r3, [r3, #0]
 801e008:	2b01      	cmp	r3, #1
 801e00a:	d004      	beq.n	801e016 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e00c:	d30b      	bcc.n	801e026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e00e:	2b02      	cmp	r3, #2
 801e010:	d1dc      	bne.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e012:	6900      	ldr	r0, [r0, #16]
 801e014:	4770      	bx	lr
 801e016:	6a00      	ldr	r0, [r0, #32]
 801e018:	4770      	bx	lr
 801e01a:	6980      	ldr	r0, [r0, #24]
 801e01c:	4770      	bx	lr
 801e01e:	684b      	ldr	r3, [r1, #4]
 801e020:	781b      	ldrb	r3, [r3, #0]
 801e022:	2b00      	cmp	r3, #0
 801e024:	d1d2      	bne.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e026:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e028:	4770      	bx	lr
 801e02a:	684b      	ldr	r3, [r1, #4]
 801e02c:	781b      	ldrb	r3, [r3, #0]
 801e02e:	2b00      	cmp	r3, #0
 801e030:	d1cc      	bne.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e032:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e034:	4770      	bx	lr
 801e036:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e038:	4770      	bx	lr
 801e03a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e03c:	4770      	bx	lr
 801e03e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e040:	4770      	bx	lr
 801e042:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801e044:	4770      	bx	lr
 801e046:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801e048:	4770      	bx	lr
 801e04a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e04c:	4770      	bx	lr
 801e04e:	2a0b      	cmp	r2, #11
 801e050:	d049      	beq.n	801e0e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e052:	d80e      	bhi.n	801e072 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801e054:	2a03      	cmp	r2, #3
 801e056:	d040      	beq.n	801e0da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e058:	d804      	bhi.n	801e064 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801e05a:	2a01      	cmp	r2, #1
 801e05c:	d03f      	beq.n	801e0de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e05e:	d940      	bls.n	801e0e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e060:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e062:	4770      	bx	lr
 801e064:	2a09      	cmp	r2, #9
 801e066:	d03e      	beq.n	801e0e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e068:	d801      	bhi.n	801e06e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801e06a:	2a08      	cmp	r2, #8
 801e06c:	d1ae      	bne.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e06e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e070:	4770      	bx	lr
 801e072:	2a2f      	cmp	r2, #47	; 0x2f
 801e074:	d024      	beq.n	801e0c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801e076:	d80d      	bhi.n	801e094 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e078:	2a2d      	cmp	r2, #45	; 0x2d
 801e07a:	d014      	beq.n	801e0a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801e07c:	d826      	bhi.n	801e0cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801e07e:	2a2c      	cmp	r2, #44	; 0x2c
 801e080:	d1a4      	bne.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e082:	684b      	ldr	r3, [r1, #4]
 801e084:	781b      	ldrb	r3, [r3, #0]
 801e086:	2b01      	cmp	r3, #1
 801e088:	d018      	beq.n	801e0bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801e08a:	d324      	bcc.n	801e0d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e08c:	2b02      	cmp	r3, #2
 801e08e:	d19d      	bne.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e090:	68c0      	ldr	r0, [r0, #12]
 801e092:	4770      	bx	lr
 801e094:	2a31      	cmp	r2, #49	; 0x31
 801e096:	d004      	beq.n	801e0a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801e098:	d327      	bcc.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e09a:	2a32      	cmp	r2, #50	; 0x32
 801e09c:	d025      	beq.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e09e:	2a33      	cmp	r2, #51	; 0x33
 801e0a0:	d194      	bne.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0a2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801e0a4:	4770      	bx	lr
 801e0a6:	684b      	ldr	r3, [r1, #4]
 801e0a8:	781b      	ldrb	r3, [r3, #0]
 801e0aa:	2b01      	cmp	r3, #1
 801e0ac:	d004      	beq.n	801e0b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801e0ae:	d30b      	bcc.n	801e0c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801e0b0:	2b02      	cmp	r3, #2
 801e0b2:	d18b      	bne.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0b4:	6940      	ldr	r0, [r0, #20]
 801e0b6:	4770      	bx	lr
 801e0b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e0ba:	4770      	bx	lr
 801e0bc:	69c0      	ldr	r0, [r0, #28]
 801e0be:	4770      	bx	lr
 801e0c0:	684b      	ldr	r3, [r1, #4]
 801e0c2:	781b      	ldrb	r3, [r3, #0]
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d181      	bne.n	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0c8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e0ca:	4770      	bx	lr
 801e0cc:	684b      	ldr	r3, [r1, #4]
 801e0ce:	781b      	ldrb	r3, [r3, #0]
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	f47f af7b 	bne.w	801dfcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e0d8:	4770      	bx	lr
 801e0da:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e0dc:	4770      	bx	lr
 801e0de:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e0e0:	4770      	bx	lr
 801e0e2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e0e4:	4770      	bx	lr
 801e0e6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e0e8:	4770      	bx	lr
 801e0ea:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801e0ec:	4770      	bx	lr

0801e0ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e0ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0f2:	b087      	sub	sp, #28
 801e0f4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e0f6:	9205      	str	r2, [sp, #20]
 801e0f8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e0fc:	9101      	str	r1, [sp, #4]
 801e0fe:	9202      	str	r2, [sp, #8]
 801e100:	6841      	ldr	r1, [r0, #4]
 801e102:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e106:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e10a:	fb01 2404 	mla	r4, r1, r4, r2
 801e10e:	6802      	ldr	r2, [r0, #0]
 801e110:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e114:	f8de 2000 	ldr.w	r2, [lr]
 801e118:	9203      	str	r2, [sp, #12]
 801e11a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e11e:	3204      	adds	r2, #4
 801e120:	9204      	str	r2, [sp, #16]
 801e122:	9a02      	ldr	r2, [sp, #8]
 801e124:	43d6      	mvns	r6, r2
 801e126:	b2f6      	uxtb	r6, r6
 801e128:	9a01      	ldr	r2, [sp, #4]
 801e12a:	2a00      	cmp	r2, #0
 801e12c:	dc03      	bgt.n	801e136 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e12e:	9a05      	ldr	r2, [sp, #20]
 801e130:	2a00      	cmp	r2, #0
 801e132:	f340 8129 	ble.w	801e388 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e136:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e138:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e13c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e140:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e142:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e146:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	dd0e      	ble.n	801e16c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e14e:	1408      	asrs	r0, r1, #16
 801e150:	d405      	bmi.n	801e15e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e152:	4560      	cmp	r0, ip
 801e154:	da03      	bge.n	801e15e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e156:	1410      	asrs	r0, r2, #16
 801e158:	d401      	bmi.n	801e15e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e15a:	42b8      	cmp	r0, r7
 801e15c:	db07      	blt.n	801e16e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e15e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e160:	3b01      	subs	r3, #1
 801e162:	3402      	adds	r4, #2
 801e164:	4401      	add	r1, r0
 801e166:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e168:	4402      	add	r2, r0
 801e16a:	e7ee      	b.n	801e14a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e16c:	d071      	beq.n	801e252 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e16e:	1e58      	subs	r0, r3, #1
 801e170:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e172:	fb05 1500 	mla	r5, r5, r0, r1
 801e176:	142d      	asrs	r5, r5, #16
 801e178:	d45f      	bmi.n	801e23a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e17a:	4565      	cmp	r5, ip
 801e17c:	da5d      	bge.n	801e23a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e17e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e180:	fb05 2000 	mla	r0, r5, r0, r2
 801e184:	1400      	asrs	r0, r0, #16
 801e186:	d458      	bmi.n	801e23a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e188:	42b8      	cmp	r0, r7
 801e18a:	da56      	bge.n	801e23a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e18c:	4699      	mov	r9, r3
 801e18e:	46a2      	mov	sl, r4
 801e190:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e194:	f1b9 0f00 	cmp.w	r9, #0
 801e198:	dd57      	ble.n	801e24a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e19a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e19e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e1a2:	9803      	ldr	r0, [sp, #12]
 801e1a4:	140d      	asrs	r5, r1, #16
 801e1a6:	f109 39ff 	add.w	r9, r9, #4294967295
 801e1aa:	fb07 000c 	mla	r0, r7, ip, r0
 801e1ae:	5d40      	ldrb	r0, [r0, r5]
 801e1b0:	9d04      	ldr	r5, [sp, #16]
 801e1b2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e1b6:	f8ba 5000 	ldrh.w	r5, [sl]
 801e1ba:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e1be:	122f      	asrs	r7, r5, #8
 801e1c0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e1c4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e1c8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e1cc:	00ed      	lsls	r5, r5, #3
 801e1ce:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e1d2:	fb17 f706 	smulbb	r7, r7, r6
 801e1d6:	b2ed      	uxtb	r5, r5
 801e1d8:	fb18 f806 	smulbb	r8, r8, r6
 801e1dc:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e1e0:	10c7      	asrs	r7, r0, #3
 801e1e2:	fb15 f506 	smulbb	r5, r5, r6
 801e1e6:	00c0      	lsls	r0, r0, #3
 801e1e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e1ec:	fa1f fc8c 	uxth.w	ip, ip
 801e1f0:	b2c0      	uxtb	r0, r0
 801e1f2:	fb07 870b 	mla	r7, r7, fp, r8
 801e1f6:	fb00 500b 	mla	r0, r0, fp, r5
 801e1fa:	f10c 0501 	add.w	r5, ip, #1
 801e1fe:	b2bf      	uxth	r7, r7
 801e200:	b280      	uxth	r0, r0
 801e202:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e206:	f107 0801 	add.w	r8, r7, #1
 801e20a:	1c45      	adds	r5, r0, #1
 801e20c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e210:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e214:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e218:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e21a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e21e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e222:	4401      	add	r1, r0
 801e224:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e228:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e22a:	ea45 0c0c 	orr.w	ip, r5, ip
 801e22e:	4402      	add	r2, r0
 801e230:	ea4c 0c08 	orr.w	ip, ip, r8
 801e234:	f82a cb02 	strh.w	ip, [sl], #2
 801e238:	e7ac      	b.n	801e194 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e23a:	f04f 0800 	mov.w	r8, #0
 801e23e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e242:	eb03 0008 	add.w	r0, r3, r8
 801e246:	2800      	cmp	r0, #0
 801e248:	dc41      	bgt.n	801e2ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e24a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e24e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e252:	9b01      	ldr	r3, [sp, #4]
 801e254:	2b00      	cmp	r3, #0
 801e256:	f340 8097 	ble.w	801e388 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e25a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e25e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e260:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e264:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e268:	eef0 6a62 	vmov.f32	s13, s5
 801e26c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e270:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e274:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e278:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e27c:	eef0 6a43 	vmov.f32	s13, s6
 801e280:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e284:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e288:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e28c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e290:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e294:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e298:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e29c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e2a0:	ee12 2a90 	vmov	r2, s5
 801e2a4:	eef0 2a47 	vmov.f32	s5, s14
 801e2a8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2ac:	ee13 2a10 	vmov	r2, s6
 801e2b0:	9313      	str	r3, [sp, #76]	; 0x4c
 801e2b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e2b4:	eeb0 3a67 	vmov.f32	s6, s15
 801e2b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2bc:	9314      	str	r3, [sp, #80]	; 0x50
 801e2be:	9b01      	ldr	r3, [sp, #4]
 801e2c0:	9a05      	ldr	r2, [sp, #20]
 801e2c2:	3b01      	subs	r3, #1
 801e2c4:	9301      	str	r3, [sp, #4]
 801e2c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e2c8:	bf08      	it	eq
 801e2ca:	4613      	moveq	r3, r2
 801e2cc:	e72c      	b.n	801e128 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e2ce:	140f      	asrs	r7, r1, #16
 801e2d0:	d453      	bmi.n	801e37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e2d2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e2d6:	42bd      	cmp	r5, r7
 801e2d8:	dd4f      	ble.n	801e37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e2da:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e2de:	d44c      	bmi.n	801e37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e2e0:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e2e4:	4560      	cmp	r0, ip
 801e2e6:	dd48      	ble.n	801e37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e2e8:	9803      	ldr	r0, [sp, #12]
 801e2ea:	b22d      	sxth	r5, r5
 801e2ec:	fb0c 0505 	mla	r5, ip, r5, r0
 801e2f0:	5de8      	ldrb	r0, [r5, r7]
 801e2f2:	9d04      	ldr	r5, [sp, #16]
 801e2f4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e2f8:	f06f 0501 	mvn.w	r5, #1
 801e2fc:	fb05 fb08 	mul.w	fp, r5, r8
 801e300:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e304:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e308:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e30c:	122f      	asrs	r7, r5, #8
 801e30e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e312:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e316:	00ed      	lsls	r5, r5, #3
 801e318:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e31c:	fb17 f706 	smulbb	r7, r7, r6
 801e320:	b2ed      	uxtb	r5, r5
 801e322:	fb19 f906 	smulbb	r9, r9, r6
 801e326:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e32a:	10c7      	asrs	r7, r0, #3
 801e32c:	fb15 f506 	smulbb	r5, r5, r6
 801e330:	00c0      	lsls	r0, r0, #3
 801e332:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e336:	fa1f fc8c 	uxth.w	ip, ip
 801e33a:	b2c0      	uxtb	r0, r0
 801e33c:	fb07 970a 	mla	r7, r7, sl, r9
 801e340:	fb00 500a 	mla	r0, r0, sl, r5
 801e344:	f10c 0501 	add.w	r5, ip, #1
 801e348:	b2bf      	uxth	r7, r7
 801e34a:	b280      	uxth	r0, r0
 801e34c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e350:	f107 0901 	add.w	r9, r7, #1
 801e354:	1c45      	adds	r5, r0, #1
 801e356:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e35a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e35e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e362:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e366:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e36a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e36e:	ea45 0c0c 	orr.w	ip, r5, ip
 801e372:	ea4c 0c09 	orr.w	ip, ip, r9
 801e376:	f824 c00b 	strh.w	ip, [r4, fp]
 801e37a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e37c:	f108 38ff 	add.w	r8, r8, #4294967295
 801e380:	4401      	add	r1, r0
 801e382:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e384:	4402      	add	r2, r0
 801e386:	e75c      	b.n	801e242 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e388:	b007      	add	sp, #28
 801e38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e38e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e38e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e392:	b085      	sub	sp, #20
 801e394:	4693      	mov	fp, r2
 801e396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e39a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e39c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e39e:	6870      	ldr	r0, [r6, #4]
 801e3a0:	9100      	str	r1, [sp, #0]
 801e3a2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e3a6:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e3aa:	fb00 2404 	mla	r4, r0, r4, r2
 801e3ae:	6832      	ldr	r2, [r6, #0]
 801e3b0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e3b4:	682a      	ldr	r2, [r5, #0]
 801e3b6:	9201      	str	r2, [sp, #4]
 801e3b8:	686a      	ldr	r2, [r5, #4]
 801e3ba:	3204      	adds	r2, #4
 801e3bc:	9202      	str	r2, [sp, #8]
 801e3be:	9a00      	ldr	r2, [sp, #0]
 801e3c0:	2a00      	cmp	r2, #0
 801e3c2:	dc03      	bgt.n	801e3cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e3c4:	f1bb 0f00 	cmp.w	fp, #0
 801e3c8:	f340 80a0 	ble.w	801e50c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e3cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e3ce:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e3d2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e3d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e3d8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e3dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	dd0c      	ble.n	801e3fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e3e4:	1406      	asrs	r6, r0, #16
 801e3e6:	d405      	bmi.n	801e3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e3e8:	454e      	cmp	r6, r9
 801e3ea:	da03      	bge.n	801e3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e3ec:	1416      	asrs	r6, r2, #16
 801e3ee:	d401      	bmi.n	801e3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e3f0:	4546      	cmp	r6, r8
 801e3f2:	db05      	blt.n	801e400 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e3f4:	4470      	add	r0, lr
 801e3f6:	4462      	add	r2, ip
 801e3f8:	3b01      	subs	r3, #1
 801e3fa:	3402      	adds	r4, #2
 801e3fc:	e7f0      	b.n	801e3e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e3fe:	d00f      	beq.n	801e420 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e400:	1e5e      	subs	r6, r3, #1
 801e402:	fb0e 0706 	mla	r7, lr, r6, r0
 801e406:	143f      	asrs	r7, r7, #16
 801e408:	d541      	bpl.n	801e48e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801e40a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e40e:	4698      	mov	r8, r3
 801e410:	9603      	str	r6, [sp, #12]
 801e412:	f1b8 0f00 	cmp.w	r8, #0
 801e416:	dc59      	bgt.n	801e4cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e418:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e41c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e420:	9b00      	ldr	r3, [sp, #0]
 801e422:	2b00      	cmp	r3, #0
 801e424:	dd72      	ble.n	801e50c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e426:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e42a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e42c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e430:	eeb0 6a62 	vmov.f32	s12, s5
 801e434:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e438:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e43c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e440:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e444:	eeb0 6a43 	vmov.f32	s12, s6
 801e448:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e44c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e450:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e454:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e458:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e45c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e460:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e464:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e468:	ee12 2a90 	vmov	r2, s5
 801e46c:	eef0 2a47 	vmov.f32	s5, s14
 801e470:	fb92 fef3 	sdiv	lr, r2, r3
 801e474:	ee13 2a10 	vmov	r2, s6
 801e478:	eeb0 3a67 	vmov.f32	s6, s15
 801e47c:	fb92 fcf3 	sdiv	ip, r2, r3
 801e480:	9b00      	ldr	r3, [sp, #0]
 801e482:	3b01      	subs	r3, #1
 801e484:	9300      	str	r3, [sp, #0]
 801e486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e488:	bf08      	it	eq
 801e48a:	465b      	moveq	r3, fp
 801e48c:	e797      	b.n	801e3be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e48e:	454f      	cmp	r7, r9
 801e490:	dabb      	bge.n	801e40a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e492:	fb0c 2606 	mla	r6, ip, r6, r2
 801e496:	1436      	asrs	r6, r6, #16
 801e498:	d4b7      	bmi.n	801e40a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e49a:	4546      	cmp	r6, r8
 801e49c:	dab5      	bge.n	801e40a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e49e:	461e      	mov	r6, r3
 801e4a0:	46a0      	mov	r8, r4
 801e4a2:	2e00      	cmp	r6, #0
 801e4a4:	ddb8      	ble.n	801e418 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e4a6:	1417      	asrs	r7, r2, #16
 801e4a8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e4ac:	9901      	ldr	r1, [sp, #4]
 801e4ae:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e4b2:	4462      	add	r2, ip
 801e4b4:	4470      	add	r0, lr
 801e4b6:	fb0a 1707 	mla	r7, sl, r7, r1
 801e4ba:	9902      	ldr	r1, [sp, #8]
 801e4bc:	3e01      	subs	r6, #1
 801e4be:	f817 7009 	ldrb.w	r7, [r7, r9]
 801e4c2:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e4c6:	f828 7b02 	strh.w	r7, [r8], #2
 801e4ca:	e7ea      	b.n	801e4a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e4cc:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e4d0:	d417      	bmi.n	801e502 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e4d2:	68ae      	ldr	r6, [r5, #8]
 801e4d4:	454e      	cmp	r6, r9
 801e4d6:	dd14      	ble.n	801e502 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e4d8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e4dc:	d411      	bmi.n	801e502 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e4de:	68ef      	ldr	r7, [r5, #12]
 801e4e0:	4557      	cmp	r7, sl
 801e4e2:	dd0e      	ble.n	801e502 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e4e4:	9f01      	ldr	r7, [sp, #4]
 801e4e6:	b236      	sxth	r6, r6
 801e4e8:	f06f 0101 	mvn.w	r1, #1
 801e4ec:	fb0a 7606 	mla	r6, sl, r6, r7
 801e4f0:	9f02      	ldr	r7, [sp, #8]
 801e4f2:	f816 6009 	ldrb.w	r6, [r6, r9]
 801e4f6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e4fa:	fb01 f608 	mul.w	r6, r1, r8
 801e4fe:	9903      	ldr	r1, [sp, #12]
 801e500:	538f      	strh	r7, [r1, r6]
 801e502:	4470      	add	r0, lr
 801e504:	4462      	add	r2, ip
 801e506:	f108 38ff 	add.w	r8, r8, #4294967295
 801e50a:	e782      	b.n	801e412 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e50c:	b005      	add	sp, #20
 801e50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e512 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e516:	b087      	sub	sp, #28
 801e518:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e51a:	9205      	str	r2, [sp, #20]
 801e51c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e520:	9102      	str	r1, [sp, #8]
 801e522:	9203      	str	r2, [sp, #12]
 801e524:	6861      	ldr	r1, [r4, #4]
 801e526:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e52a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e52e:	fb01 2000 	mla	r0, r1, r0, r2
 801e532:	6822      	ldr	r2, [r4, #0]
 801e534:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e538:	9200      	str	r2, [sp, #0]
 801e53a:	f8dc 2000 	ldr.w	r2, [ip]
 801e53e:	9204      	str	r2, [sp, #16]
 801e540:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e544:	3204      	adds	r2, #4
 801e546:	9201      	str	r2, [sp, #4]
 801e548:	9a03      	ldr	r2, [sp, #12]
 801e54a:	43d5      	mvns	r5, r2
 801e54c:	b2ed      	uxtb	r5, r5
 801e54e:	9a02      	ldr	r2, [sp, #8]
 801e550:	2a00      	cmp	r2, #0
 801e552:	dc03      	bgt.n	801e55c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e554:	9a05      	ldr	r2, [sp, #20]
 801e556:	2a00      	cmp	r2, #0
 801e558:	f340 812c 	ble.w	801e7b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e55c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e55e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e562:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e566:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e568:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e56c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e570:	2b00      	cmp	r3, #0
 801e572:	dd10      	ble.n	801e596 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e574:	140c      	asrs	r4, r1, #16
 801e576:	d405      	bmi.n	801e584 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e578:	4574      	cmp	r4, lr
 801e57a:	da03      	bge.n	801e584 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e57c:	1414      	asrs	r4, r2, #16
 801e57e:	d401      	bmi.n	801e584 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e580:	42bc      	cmp	r4, r7
 801e582:	db09      	blt.n	801e598 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e584:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e586:	3b01      	subs	r3, #1
 801e588:	9800      	ldr	r0, [sp, #0]
 801e58a:	4421      	add	r1, r4
 801e58c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e58e:	3002      	adds	r0, #2
 801e590:	4422      	add	r2, r4
 801e592:	9000      	str	r0, [sp, #0]
 801e594:	e7ec      	b.n	801e570 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e596:	d071      	beq.n	801e67c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e598:	1e5c      	subs	r4, r3, #1
 801e59a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e59c:	fb06 1604 	mla	r6, r6, r4, r1
 801e5a0:	1436      	asrs	r6, r6, #16
 801e5a2:	d45d      	bmi.n	801e660 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e5a4:	4576      	cmp	r6, lr
 801e5a6:	da5b      	bge.n	801e660 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e5a8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e5aa:	fb06 2404 	mla	r4, r6, r4, r2
 801e5ae:	1424      	asrs	r4, r4, #16
 801e5b0:	d456      	bmi.n	801e660 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e5b2:	42bc      	cmp	r4, r7
 801e5b4:	da54      	bge.n	801e660 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e5b6:	4698      	mov	r8, r3
 801e5b8:	f8dd 9000 	ldr.w	r9, [sp]
 801e5bc:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801e5c0:	f1b8 0f00 	cmp.w	r8, #0
 801e5c4:	dd54      	ble.n	801e670 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e5c6:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e5ca:	1414      	asrs	r4, r2, #16
 801e5cc:	9804      	ldr	r0, [sp, #16]
 801e5ce:	140e      	asrs	r6, r1, #16
 801e5d0:	f108 38ff 	add.w	r8, r8, #4294967295
 801e5d4:	fb07 0404 	mla	r4, r7, r4, r0
 801e5d8:	9801      	ldr	r0, [sp, #4]
 801e5da:	f814 e006 	ldrb.w	lr, [r4, r6]
 801e5de:	f8b9 4000 	ldrh.w	r4, [r9]
 801e5e2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e5e6:	1227      	asrs	r7, r4, #8
 801e5e8:	eb00 0b0e 	add.w	fp, r0, lr
 801e5ec:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801e5f0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e5f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e5f6:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e5fa:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e5fe:	4401      	add	r1, r0
 801e600:	fb16 f60a 	smulbb	r6, r6, sl
 801e604:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e606:	fb1b fb0a 	smulbb	fp, fp, sl
 801e60a:	fb07 6705 	mla	r7, r7, r5, r6
 801e60e:	10e6      	asrs	r6, r4, #3
 801e610:	00e4      	lsls	r4, r4, #3
 801e612:	4402      	add	r2, r0
 801e614:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e618:	b2bf      	uxth	r7, r7
 801e61a:	b2e4      	uxtb	r4, r4
 801e61c:	fb06 b605 	mla	r6, r6, r5, fp
 801e620:	fb14 f405 	smulbb	r4, r4, r5
 801e624:	b2b6      	uxth	r6, r6
 801e626:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801e62a:	1c7c      	adds	r4, r7, #1
 801e62c:	f106 0b01 	add.w	fp, r6, #1
 801e630:	fa1f fe8e 	uxth.w	lr, lr
 801e634:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e638:	f10e 0401 	add.w	r4, lr, #1
 801e63c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e640:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e644:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801e648:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e64c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e650:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e654:	4327      	orrs	r7, r4
 801e656:	ea47 070b 	orr.w	r7, r7, fp
 801e65a:	f829 7b02 	strh.w	r7, [r9], #2
 801e65e:	e7af      	b.n	801e5c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801e660:	f04f 0e00 	mov.w	lr, #0
 801e664:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801e668:	eb03 040e 	add.w	r4, r3, lr
 801e66c:	2c00      	cmp	r4, #0
 801e66e:	dc43      	bgt.n	801e6f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e670:	9a00      	ldr	r2, [sp, #0]
 801e672:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e676:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e67a:	9300      	str	r3, [sp, #0]
 801e67c:	9b02      	ldr	r3, [sp, #8]
 801e67e:	2b00      	cmp	r3, #0
 801e680:	f340 8098 	ble.w	801e7b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e688:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e68a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e68e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e692:	eef0 6a62 	vmov.f32	s13, s5
 801e696:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e69a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e69e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6a2:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e6a6:	eef0 6a43 	vmov.f32	s13, s6
 801e6aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6ae:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e6b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e6b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e6ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e6be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e6c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e6c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e6ca:	ee12 2a90 	vmov	r2, s5
 801e6ce:	eef0 2a47 	vmov.f32	s5, s14
 801e6d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6d6:	ee13 2a10 	vmov	r2, s6
 801e6da:	9313      	str	r3, [sp, #76]	; 0x4c
 801e6dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e6de:	eeb0 3a67 	vmov.f32	s6, s15
 801e6e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6e6:	9314      	str	r3, [sp, #80]	; 0x50
 801e6e8:	9b02      	ldr	r3, [sp, #8]
 801e6ea:	9a05      	ldr	r2, [sp, #20]
 801e6ec:	3b01      	subs	r3, #1
 801e6ee:	9302      	str	r3, [sp, #8]
 801e6f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e6f2:	bf08      	it	eq
 801e6f4:	4613      	moveq	r3, r2
 801e6f6:	e72a      	b.n	801e54e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e6f8:	140f      	asrs	r7, r1, #16
 801e6fa:	d454      	bmi.n	801e7a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e6fc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e700:	42be      	cmp	r6, r7
 801e702:	dd50      	ble.n	801e7a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e704:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e708:	d44d      	bmi.n	801e7a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e70a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801e70e:	4544      	cmp	r4, r8
 801e710:	dd49      	ble.n	801e7a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e712:	9c04      	ldr	r4, [sp, #16]
 801e714:	b236      	sxth	r6, r6
 801e716:	f06f 0001 	mvn.w	r0, #1
 801e71a:	fb08 4606 	mla	r6, r8, r6, r4
 801e71e:	9c01      	ldr	r4, [sp, #4]
 801e720:	fb00 fa0e 	mul.w	sl, r0, lr
 801e724:	9800      	ldr	r0, [sp, #0]
 801e726:	f816 8007 	ldrb.w	r8, [r6, r7]
 801e72a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e72e:	eb04 0b08 	add.w	fp, r4, r8
 801e732:	f830 400a 	ldrh.w	r4, [r0, sl]
 801e736:	9801      	ldr	r0, [sp, #4]
 801e738:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e73c:	1227      	asrs	r7, r4, #8
 801e73e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e742:	fb16 f609 	smulbb	r6, r6, r9
 801e746:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e74a:	f810 8008 	ldrb.w	r8, [r0, r8]
 801e74e:	fb1b fb09 	smulbb	fp, fp, r9
 801e752:	fb07 6705 	mla	r7, r7, r5, r6
 801e756:	10e6      	asrs	r6, r4, #3
 801e758:	00e4      	lsls	r4, r4, #3
 801e75a:	9800      	ldr	r0, [sp, #0]
 801e75c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e760:	b2bf      	uxth	r7, r7
 801e762:	b2e4      	uxtb	r4, r4
 801e764:	fb06 b605 	mla	r6, r6, r5, fp
 801e768:	fb14 f405 	smulbb	r4, r4, r5
 801e76c:	b2b6      	uxth	r6, r6
 801e76e:	fb08 4809 	mla	r8, r8, r9, r4
 801e772:	1c7c      	adds	r4, r7, #1
 801e774:	f106 0b01 	add.w	fp, r6, #1
 801e778:	fa1f f888 	uxth.w	r8, r8
 801e77c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e780:	f108 0401 	add.w	r4, r8, #1
 801e784:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e788:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e78c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801e790:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e794:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e798:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e79c:	4327      	orrs	r7, r4
 801e79e:	ea47 070b 	orr.w	r7, r7, fp
 801e7a2:	f820 700a 	strh.w	r7, [r0, sl]
 801e7a6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e7a8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e7ac:	4401      	add	r1, r0
 801e7ae:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e7b0:	4402      	add	r2, r0
 801e7b2:	e759      	b.n	801e668 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e7b4:	b007      	add	sp, #28
 801e7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e7bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7c0:	b085      	sub	sp, #20
 801e7c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e7c6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e7c8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e7ca:	9203      	str	r2, [sp, #12]
 801e7cc:	6870      	ldr	r0, [r6, #4]
 801e7ce:	686f      	ldr	r7, [r5, #4]
 801e7d0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801e7d4:	3704      	adds	r7, #4
 801e7d6:	9101      	str	r1, [sp, #4]
 801e7d8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e7dc:	fb00 2404 	mla	r4, r0, r4, r2
 801e7e0:	6832      	ldr	r2, [r6, #0]
 801e7e2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e7e6:	682a      	ldr	r2, [r5, #0]
 801e7e8:	9202      	str	r2, [sp, #8]
 801e7ea:	9a01      	ldr	r2, [sp, #4]
 801e7ec:	2a00      	cmp	r2, #0
 801e7ee:	dc03      	bgt.n	801e7f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e7f0:	9a03      	ldr	r2, [sp, #12]
 801e7f2:	2a00      	cmp	r2, #0
 801e7f4:	f340 80cc 	ble.w	801e990 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e7f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e7fa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e7fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e802:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e804:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e808:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e80c:	2b00      	cmp	r3, #0
 801e80e:	dd0d      	ble.n	801e82c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e810:	1406      	asrs	r6, r0, #16
 801e812:	d405      	bmi.n	801e820 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e814:	454e      	cmp	r6, r9
 801e816:	da03      	bge.n	801e820 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e818:	1416      	asrs	r6, r2, #16
 801e81a:	d401      	bmi.n	801e820 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e81c:	4546      	cmp	r6, r8
 801e81e:	db06      	blt.n	801e82e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e820:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e822:	4460      	add	r0, ip
 801e824:	3b01      	subs	r3, #1
 801e826:	3402      	adds	r4, #2
 801e828:	4432      	add	r2, r6
 801e82a:	e7ef      	b.n	801e80c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e82c:	d00f      	beq.n	801e84e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e82e:	1e5e      	subs	r6, r3, #1
 801e830:	fb0c 0e06 	mla	lr, ip, r6, r0
 801e834:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e838:	d543      	bpl.n	801e8c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801e83a:	4698      	mov	r8, r3
 801e83c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801e840:	f1b8 0f00 	cmp.w	r8, #0
 801e844:	dc71      	bgt.n	801e92a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e846:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e84a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e84e:	9b01      	ldr	r3, [sp, #4]
 801e850:	2b00      	cmp	r3, #0
 801e852:	f340 809d 	ble.w	801e990 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e856:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e85a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e85c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e860:	eeb0 6a62 	vmov.f32	s12, s5
 801e864:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e868:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e86c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e870:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e874:	eeb0 6a43 	vmov.f32	s12, s6
 801e878:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e87c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e880:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e884:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e888:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e88c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e890:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e894:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e898:	ee12 2a90 	vmov	r2, s5
 801e89c:	eef0 2a47 	vmov.f32	s5, s14
 801e8a0:	fb92 fcf3 	sdiv	ip, r2, r3
 801e8a4:	ee13 2a10 	vmov	r2, s6
 801e8a8:	eeb0 3a67 	vmov.f32	s6, s15
 801e8ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8b0:	9312      	str	r3, [sp, #72]	; 0x48
 801e8b2:	9b01      	ldr	r3, [sp, #4]
 801e8b4:	9a03      	ldr	r2, [sp, #12]
 801e8b6:	3b01      	subs	r3, #1
 801e8b8:	9301      	str	r3, [sp, #4]
 801e8ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8bc:	bf08      	it	eq
 801e8be:	4613      	moveq	r3, r2
 801e8c0:	e793      	b.n	801e7ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e8c2:	45ce      	cmp	lr, r9
 801e8c4:	dab9      	bge.n	801e83a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e8c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e8c8:	fb01 2606 	mla	r6, r1, r6, r2
 801e8cc:	1436      	asrs	r6, r6, #16
 801e8ce:	d4b4      	bmi.n	801e83a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e8d0:	4546      	cmp	r6, r8
 801e8d2:	dab2      	bge.n	801e83a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e8d4:	4698      	mov	r8, r3
 801e8d6:	46a2      	mov	sl, r4
 801e8d8:	f1b8 0f00 	cmp.w	r8, #0
 801e8dc:	ddb3      	ble.n	801e846 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e8de:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e8e2:	1416      	asrs	r6, r2, #16
 801e8e4:	9902      	ldr	r1, [sp, #8]
 801e8e6:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801e8ea:	f108 38ff 	add.w	r8, r8, #4294967295
 801e8ee:	4460      	add	r0, ip
 801e8f0:	fb09 1606 	mla	r6, r9, r6, r1
 801e8f4:	4928      	ldr	r1, [pc, #160]	; (801e998 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801e8f6:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801e8fa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e8fe:	eb07 0b0e 	add.w	fp, r7, lr
 801e902:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801e906:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e90a:	00f6      	lsls	r6, r6, #3
 801e90c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801e910:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e912:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e916:	440a      	add	r2, r1
 801e918:	ea49 0606 	orr.w	r6, r9, r6
 801e91c:	f817 900e 	ldrb.w	r9, [r7, lr]
 801e920:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801e924:	f82a 6b02 	strh.w	r6, [sl], #2
 801e928:	e7d6      	b.n	801e8d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e92a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e92e:	d429      	bmi.n	801e984 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e930:	68ae      	ldr	r6, [r5, #8]
 801e932:	454e      	cmp	r6, r9
 801e934:	dd26      	ble.n	801e984 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e936:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e93a:	d423      	bmi.n	801e984 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e93c:	68e9      	ldr	r1, [r5, #12]
 801e93e:	4559      	cmp	r1, fp
 801e940:	dd20      	ble.n	801e984 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e942:	fa0f fe86 	sxth.w	lr, r6
 801e946:	9902      	ldr	r1, [sp, #8]
 801e948:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801e94c:	f06f 0101 	mvn.w	r1, #1
 801e950:	f81e e009 	ldrb.w	lr, [lr, r9]
 801e954:	fb01 f908 	mul.w	r9, r1, r8
 801e958:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801e95c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e960:	eb07 060e 	add.w	r6, r7, lr
 801e964:	f896 b002 	ldrb.w	fp, [r6, #2]
 801e968:	7876      	ldrb	r6, [r6, #1]
 801e96a:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801e96e:	00f6      	lsls	r6, r6, #3
 801e970:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e974:	ea4b 0606 	orr.w	r6, fp, r6
 801e978:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801e97c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801e980:	f82a 6009 	strh.w	r6, [sl, r9]
 801e984:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e986:	4460      	add	r0, ip
 801e988:	f108 38ff 	add.w	r8, r8, #4294967295
 801e98c:	440a      	add	r2, r1
 801e98e:	e757      	b.n	801e840 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e990:	b005      	add	sp, #20
 801e992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e996:	bf00      	nop
 801e998:	fffff800 	.word	0xfffff800

0801e99c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9a0:	b087      	sub	sp, #28
 801e9a2:	468b      	mov	fp, r1
 801e9a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e9a8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e9aa:	9204      	str	r2, [sp, #16]
 801e9ac:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e9b0:	6841      	ldr	r1, [r0, #4]
 801e9b2:	9205      	str	r2, [sp, #20]
 801e9b4:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e9b8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e9bc:	fb01 2404 	mla	r4, r1, r4, r2
 801e9c0:	6802      	ldr	r2, [r0, #0]
 801e9c2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e9c6:	f8dc 2000 	ldr.w	r2, [ip]
 801e9ca:	9201      	str	r2, [sp, #4]
 801e9cc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e9d0:	3204      	adds	r2, #4
 801e9d2:	9202      	str	r2, [sp, #8]
 801e9d4:	f1bb 0f00 	cmp.w	fp, #0
 801e9d8:	dc03      	bgt.n	801e9e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e9da:	9a04      	ldr	r2, [sp, #16]
 801e9dc:	2a00      	cmp	r2, #0
 801e9de:	f340 8138 	ble.w	801ec52 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e9e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e9e4:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e9e8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e9ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e9ee:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801e9f2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e9f6:	2b00      	cmp	r3, #0
 801e9f8:	dd0e      	ble.n	801ea18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e9fa:	1402      	asrs	r2, r0, #16
 801e9fc:	d405      	bmi.n	801ea0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e9fe:	42ba      	cmp	r2, r7
 801ea00:	da03      	bge.n	801ea0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ea02:	140a      	asrs	r2, r1, #16
 801ea04:	d401      	bmi.n	801ea0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ea06:	42b2      	cmp	r2, r6
 801ea08:	db07      	blt.n	801ea1a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ea0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ea0c:	3b01      	subs	r3, #1
 801ea0e:	3402      	adds	r4, #2
 801ea10:	4410      	add	r0, r2
 801ea12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea14:	4411      	add	r1, r2
 801ea16:	e7ee      	b.n	801e9f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ea18:	d019      	beq.n	801ea4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ea1a:	1e5a      	subs	r2, r3, #1
 801ea1c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ea1e:	fb05 0502 	mla	r5, r5, r2, r0
 801ea22:	142d      	asrs	r5, r5, #16
 801ea24:	d409      	bmi.n	801ea3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ea26:	42bd      	cmp	r5, r7
 801ea28:	da07      	bge.n	801ea3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ea2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ea2c:	fb05 1202 	mla	r2, r5, r2, r1
 801ea30:	1412      	asrs	r2, r2, #16
 801ea32:	d402      	bmi.n	801ea3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ea34:	42b2      	cmp	r2, r6
 801ea36:	f2c0 80ac 	blt.w	801eb92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801ea3a:	f04f 0e00 	mov.w	lr, #0
 801ea3e:	eb03 020e 	add.w	r2, r3, lr
 801ea42:	2a00      	cmp	r2, #0
 801ea44:	dc3e      	bgt.n	801eac4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ea46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea4a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ea4e:	f1bb 0f00 	cmp.w	fp, #0
 801ea52:	f340 80fe 	ble.w	801ec52 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ea56:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea60:	f1bb 0b01 	subs.w	fp, fp, #1
 801ea64:	eeb0 6a62 	vmov.f32	s12, s5
 801ea68:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ea6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea70:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea74:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ea78:	eeb0 6a43 	vmov.f32	s12, s6
 801ea7c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea80:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ea84:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ea88:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea8c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ea90:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ea94:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ea98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ea9c:	ee12 2a90 	vmov	r2, s5
 801eaa0:	eef0 2a47 	vmov.f32	s5, s14
 801eaa4:	fb92 f3f3 	sdiv	r3, r2, r3
 801eaa8:	ee13 2a10 	vmov	r2, s6
 801eaac:	9313      	str	r3, [sp, #76]	; 0x4c
 801eaae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eab0:	eeb0 3a67 	vmov.f32	s6, s15
 801eab4:	fb92 f3f3 	sdiv	r3, r2, r3
 801eab8:	9a04      	ldr	r2, [sp, #16]
 801eaba:	9314      	str	r3, [sp, #80]	; 0x50
 801eabc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eabe:	bf08      	it	eq
 801eac0:	4613      	moveq	r3, r2
 801eac2:	e787      	b.n	801e9d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801eac4:	1406      	asrs	r6, r0, #16
 801eac6:	d45d      	bmi.n	801eb84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eac8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801eacc:	42b5      	cmp	r5, r6
 801eace:	dd59      	ble.n	801eb84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ead0:	140f      	asrs	r7, r1, #16
 801ead2:	d457      	bmi.n	801eb84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ead4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ead8:	42ba      	cmp	r2, r7
 801eada:	dd53      	ble.n	801eb84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eadc:	9a01      	ldr	r2, [sp, #4]
 801eade:	b22d      	sxth	r5, r5
 801eae0:	fb07 2505 	mla	r5, r7, r5, r2
 801eae4:	5daa      	ldrb	r2, [r5, r6]
 801eae6:	9d02      	ldr	r5, [sp, #8]
 801eae8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801eaec:	0e2e      	lsrs	r6, r5, #24
 801eaee:	d049      	beq.n	801eb84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eaf0:	f06f 0201 	mvn.w	r2, #1
 801eaf4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801eaf8:	fb02 f20e 	mul.w	r2, r2, lr
 801eafc:	f834 8002 	ldrh.w	r8, [r4, r2]
 801eb00:	9203      	str	r2, [sp, #12]
 801eb02:	9a05      	ldr	r2, [sp, #20]
 801eb04:	ea4f 2728 	mov.w	r7, r8, asr #8
 801eb08:	4356      	muls	r6, r2
 801eb0a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eb0e:	1c72      	adds	r2, r6, #1
 801eb10:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801eb14:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801eb18:	b2ed      	uxtb	r5, r5
 801eb1a:	1212      	asrs	r2, r2, #8
 801eb1c:	fa1f f982 	uxth.w	r9, r2
 801eb20:	43d2      	mvns	r2, r2
 801eb22:	fb16 f609 	smulbb	r6, r6, r9
 801eb26:	b2d2      	uxtb	r2, r2
 801eb28:	fb15 f509 	smulbb	r5, r5, r9
 801eb2c:	fb07 6702 	mla	r7, r7, r2, r6
 801eb30:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801eb34:	fb1a fa09 	smulbb	sl, sl, r9
 801eb38:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801eb3c:	b2bf      	uxth	r7, r7
 801eb3e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eb42:	fa5f f888 	uxtb.w	r8, r8
 801eb46:	fb06 a602 	mla	r6, r6, r2, sl
 801eb4a:	fb08 5502 	mla	r5, r8, r2, r5
 801eb4e:	1c7a      	adds	r2, r7, #1
 801eb50:	b2b6      	uxth	r6, r6
 801eb52:	b2ad      	uxth	r5, r5
 801eb54:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801eb58:	9a03      	ldr	r2, [sp, #12]
 801eb5a:	f105 0a01 	add.w	sl, r5, #1
 801eb5e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801eb62:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801eb66:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eb6a:	ea4a 0707 	orr.w	r7, sl, r7
 801eb6e:	f106 0a01 	add.w	sl, r6, #1
 801eb72:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eb76:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eb7a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eb7e:	ea47 070a 	orr.w	r7, r7, sl
 801eb82:	52a7      	strh	r7, [r4, r2]
 801eb84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eb86:	f10e 3eff 	add.w	lr, lr, #4294967295
 801eb8a:	4410      	add	r0, r2
 801eb8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eb8e:	4411      	add	r1, r2
 801eb90:	e755      	b.n	801ea3e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801eb92:	f04f 0800 	mov.w	r8, #0
 801eb96:	eba3 0208 	sub.w	r2, r3, r8
 801eb9a:	2a00      	cmp	r2, #0
 801eb9c:	f77f af53 	ble.w	801ea46 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801eba0:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801eba4:	140a      	asrs	r2, r1, #16
 801eba6:	9f01      	ldr	r7, [sp, #4]
 801eba8:	1405      	asrs	r5, r0, #16
 801ebaa:	fb06 7202 	mla	r2, r6, r2, r7
 801ebae:	5d52      	ldrb	r2, [r2, r5]
 801ebb0:	9d02      	ldr	r5, [sp, #8]
 801ebb2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ebb6:	0e2e      	lsrs	r6, r5, #24
 801ebb8:	d044      	beq.n	801ec44 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ebba:	9a05      	ldr	r2, [sp, #20]
 801ebbc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ebc0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801ebc4:	4356      	muls	r6, r2
 801ebc6:	ea4f 272e 	mov.w	r7, lr, asr #8
 801ebca:	1c72      	adds	r2, r6, #1
 801ebcc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ebd0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ebd4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ebd8:	b2ed      	uxtb	r5, r5
 801ebda:	1212      	asrs	r2, r2, #8
 801ebdc:	fa1f f982 	uxth.w	r9, r2
 801ebe0:	43d2      	mvns	r2, r2
 801ebe2:	fb16 f609 	smulbb	r6, r6, r9
 801ebe6:	b2d2      	uxtb	r2, r2
 801ebe8:	fb15 f509 	smulbb	r5, r5, r9
 801ebec:	fb07 6702 	mla	r7, r7, r2, r6
 801ebf0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ebf4:	fb1a fa09 	smulbb	sl, sl, r9
 801ebf8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ebfc:	b2bf      	uxth	r7, r7
 801ebfe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ec02:	fa5f fe8e 	uxtb.w	lr, lr
 801ec06:	fb06 a602 	mla	r6, r6, r2, sl
 801ec0a:	fb0e 5502 	mla	r5, lr, r2, r5
 801ec0e:	1c7a      	adds	r2, r7, #1
 801ec10:	b2b6      	uxth	r6, r6
 801ec12:	b2ad      	uxth	r5, r5
 801ec14:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ec18:	f105 0a01 	add.w	sl, r5, #1
 801ec1c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ec20:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ec24:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ec28:	ea4a 0707 	orr.w	r7, sl, r7
 801ec2c:	f106 0a01 	add.w	sl, r6, #1
 801ec30:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ec34:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ec38:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ec3c:	ea47 070a 	orr.w	r7, r7, sl
 801ec40:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ec44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ec46:	f108 0801 	add.w	r8, r8, #1
 801ec4a:	4410      	add	r0, r2
 801ec4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ec4e:	4411      	add	r1, r2
 801ec50:	e7a1      	b.n	801eb96 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ec52:	b007      	add	sp, #28
 801ec54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec5c:	b085      	sub	sp, #20
 801ec5e:	468b      	mov	fp, r1
 801ec60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec64:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ec66:	9203      	str	r2, [sp, #12]
 801ec68:	6841      	ldr	r1, [r0, #4]
 801ec6a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801ec6e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ec72:	fb01 2404 	mla	r4, r1, r4, r2
 801ec76:	6802      	ldr	r2, [r0, #0]
 801ec78:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ec7c:	f8de 2000 	ldr.w	r2, [lr]
 801ec80:	9200      	str	r2, [sp, #0]
 801ec82:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ec86:	3204      	adds	r2, #4
 801ec88:	9201      	str	r2, [sp, #4]
 801ec8a:	f1bb 0f00 	cmp.w	fp, #0
 801ec8e:	dc03      	bgt.n	801ec98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ec90:	9a03      	ldr	r2, [sp, #12]
 801ec92:	2a00      	cmp	r2, #0
 801ec94:	f340 8153 	ble.w	801ef3e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ec98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ec9a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ec9e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801eca2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eca4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801eca8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ecac:	2b00      	cmp	r3, #0
 801ecae:	dd0e      	ble.n	801ecce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ecb0:	1408      	asrs	r0, r1, #16
 801ecb2:	d405      	bmi.n	801ecc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ecb4:	42b8      	cmp	r0, r7
 801ecb6:	da03      	bge.n	801ecc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ecb8:	1410      	asrs	r0, r2, #16
 801ecba:	d401      	bmi.n	801ecc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ecbc:	42b0      	cmp	r0, r6
 801ecbe:	db07      	blt.n	801ecd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ecc0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ecc2:	3b01      	subs	r3, #1
 801ecc4:	3402      	adds	r4, #2
 801ecc6:	4401      	add	r1, r0
 801ecc8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ecca:	4402      	add	r2, r0
 801eccc:	e7ee      	b.n	801ecac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ecce:	d017      	beq.n	801ed00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ecd0:	1e58      	subs	r0, r3, #1
 801ecd2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ecd4:	fb05 1500 	mla	r5, r5, r0, r1
 801ecd8:	142d      	asrs	r5, r5, #16
 801ecda:	d409      	bmi.n	801ecf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ecdc:	42bd      	cmp	r5, r7
 801ecde:	da07      	bge.n	801ecf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ece0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ece2:	fb05 2000 	mla	r0, r5, r0, r2
 801ece6:	1400      	asrs	r0, r0, #16
 801ece8:	d402      	bmi.n	801ecf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ecea:	42b0      	cmp	r0, r6
 801ecec:	f2c0 80bc 	blt.w	801ee68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ecf0:	2600      	movs	r6, #0
 801ecf2:	1998      	adds	r0, r3, r6
 801ecf4:	2800      	cmp	r0, #0
 801ecf6:	dc3e      	bgt.n	801ed76 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ecf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ecfc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ed00:	f1bb 0f00 	cmp.w	fp, #0
 801ed04:	f340 811b 	ble.w	801ef3e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ed08:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed12:	f1bb 0b01 	subs.w	fp, fp, #1
 801ed16:	eeb0 6a62 	vmov.f32	s12, s5
 801ed1a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ed1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed26:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ed2a:	eeb0 6a43 	vmov.f32	s12, s6
 801ed2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed32:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ed36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed4e:	ee12 2a90 	vmov	r2, s5
 801ed52:	eef0 2a47 	vmov.f32	s5, s14
 801ed56:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed5a:	ee13 2a10 	vmov	r2, s6
 801ed5e:	9311      	str	r3, [sp, #68]	; 0x44
 801ed60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed62:	eeb0 3a67 	vmov.f32	s6, s15
 801ed66:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed6a:	9a03      	ldr	r2, [sp, #12]
 801ed6c:	9312      	str	r3, [sp, #72]	; 0x48
 801ed6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed70:	bf08      	it	eq
 801ed72:	4613      	moveq	r3, r2
 801ed74:	e789      	b.n	801ec8a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ed76:	140f      	asrs	r7, r1, #16
 801ed78:	d426      	bmi.n	801edc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ed7a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ed7e:	42bd      	cmp	r5, r7
 801ed80:	dd22      	ble.n	801edc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ed82:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ed86:	d41f      	bmi.n	801edc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ed88:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ed8c:	4560      	cmp	r0, ip
 801ed8e:	dd1b      	ble.n	801edc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ed90:	9800      	ldr	r0, [sp, #0]
 801ed92:	b22d      	sxth	r5, r5
 801ed94:	fb0c 0505 	mla	r5, ip, r5, r0
 801ed98:	5de8      	ldrb	r0, [r5, r7]
 801ed9a:	9d01      	ldr	r5, [sp, #4]
 801ed9c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801eda0:	0e07      	lsrs	r7, r0, #24
 801eda2:	2fff      	cmp	r7, #255	; 0xff
 801eda4:	d116      	bne.n	801edd4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801eda6:	f06f 0501 	mvn.w	r5, #1
 801edaa:	fb05 f706 	mul.w	r7, r5, r6
 801edae:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801edb2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801edb6:	0945      	lsrs	r5, r0, #5
 801edb8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801edbc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801edc0:	ea4c 0505 	orr.w	r5, ip, r5
 801edc4:	4305      	orrs	r5, r0
 801edc6:	53e5      	strh	r5, [r4, r7]
 801edc8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801edca:	3e01      	subs	r6, #1
 801edcc:	4401      	add	r1, r0
 801edce:	9812      	ldr	r0, [sp, #72]	; 0x48
 801edd0:	4402      	add	r2, r0
 801edd2:	e78e      	b.n	801ecf2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801edd4:	b2fd      	uxtb	r5, r7
 801edd6:	2f00      	cmp	r7, #0
 801edd8:	d0f6      	beq.n	801edc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801edda:	f06f 0701 	mvn.w	r7, #1
 801edde:	fa1f f985 	uxth.w	r9, r5
 801ede2:	43ed      	mvns	r5, r5
 801ede4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ede8:	4377      	muls	r7, r6
 801edea:	fb1a fa09 	smulbb	sl, sl, r9
 801edee:	b2ed      	uxtb	r5, r5
 801edf0:	f834 8007 	ldrh.w	r8, [r4, r7]
 801edf4:	9702      	str	r7, [sp, #8]
 801edf6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801edfa:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801edfe:	fb17 f709 	smulbb	r7, r7, r9
 801ee02:	b2c0      	uxtb	r0, r0
 801ee04:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ee08:	fb10 f009 	smulbb	r0, r0, r9
 801ee0c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ee10:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801ee14:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ee18:	fa1f fc8c 	uxth.w	ip, ip
 801ee1c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ee20:	fa5f f888 	uxtb.w	r8, r8
 801ee24:	fb07 a705 	mla	r7, r7, r5, sl
 801ee28:	fb08 0005 	mla	r0, r8, r5, r0
 801ee2c:	f10c 0501 	add.w	r5, ip, #1
 801ee30:	b2bf      	uxth	r7, r7
 801ee32:	b280      	uxth	r0, r0
 801ee34:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ee38:	f100 0a01 	add.w	sl, r0, #1
 801ee3c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ee40:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ee44:	9802      	ldr	r0, [sp, #8]
 801ee46:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ee4a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ee4e:	f107 0a01 	add.w	sl, r7, #1
 801ee52:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ee56:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ee5a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ee5e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ee62:	f824 c000 	strh.w	ip, [r4, r0]
 801ee66:	e7af      	b.n	801edc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee68:	f04f 0800 	mov.w	r8, #0
 801ee6c:	eba3 0008 	sub.w	r0, r3, r8
 801ee70:	2800      	cmp	r0, #0
 801ee72:	f77f af41 	ble.w	801ecf8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ee76:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ee7a:	1410      	asrs	r0, r2, #16
 801ee7c:	9f00      	ldr	r7, [sp, #0]
 801ee7e:	140d      	asrs	r5, r1, #16
 801ee80:	fb06 7000 	mla	r0, r6, r0, r7
 801ee84:	5d40      	ldrb	r0, [r0, r5]
 801ee86:	9d01      	ldr	r5, [sp, #4]
 801ee88:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ee8c:	0e2e      	lsrs	r6, r5, #24
 801ee8e:	2eff      	cmp	r6, #255	; 0xff
 801ee90:	d112      	bne.n	801eeb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801ee92:	482c      	ldr	r0, [pc, #176]	; (801ef44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ee94:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ee98:	0968      	lsrs	r0, r5, #5
 801ee9a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ee9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801eea2:	4330      	orrs	r0, r6
 801eea4:	4328      	orrs	r0, r5
 801eea6:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801eeaa:	9811      	ldr	r0, [sp, #68]	; 0x44
 801eeac:	f108 0801 	add.w	r8, r8, #1
 801eeb0:	4401      	add	r1, r0
 801eeb2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801eeb4:	4402      	add	r2, r0
 801eeb6:	e7d9      	b.n	801ee6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801eeb8:	b2f0      	uxtb	r0, r6
 801eeba:	2e00      	cmp	r6, #0
 801eebc:	d0f5      	beq.n	801eeaa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801eebe:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801eec2:	fa1f f980 	uxth.w	r9, r0
 801eec6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801eeca:	43c0      	mvns	r0, r0
 801eecc:	ea4f 272c 	mov.w	r7, ip, asr #8
 801eed0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801eed4:	fb16 f609 	smulbb	r6, r6, r9
 801eed8:	b2c0      	uxtb	r0, r0
 801eeda:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eede:	b2ed      	uxtb	r5, r5
 801eee0:	fb1a fa09 	smulbb	sl, sl, r9
 801eee4:	fb07 6700 	mla	r7, r7, r0, r6
 801eee8:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801eeec:	fb15 f509 	smulbb	r5, r5, r9
 801eef0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801eef4:	b2bf      	uxth	r7, r7
 801eef6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eefa:	fa5f fc8c 	uxtb.w	ip, ip
 801eefe:	fb06 a600 	mla	r6, r6, r0, sl
 801ef02:	fb0c 5500 	mla	r5, ip, r0, r5
 801ef06:	1c78      	adds	r0, r7, #1
 801ef08:	b2b6      	uxth	r6, r6
 801ef0a:	b2ad      	uxth	r5, r5
 801ef0c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ef10:	f105 0a01 	add.w	sl, r5, #1
 801ef14:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ef18:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ef1c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ef20:	ea4a 0707 	orr.w	r7, sl, r7
 801ef24:	f106 0a01 	add.w	sl, r6, #1
 801ef28:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ef2c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ef30:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ef34:	ea47 070a 	orr.w	r7, r7, sl
 801ef38:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ef3c:	e7b5      	b.n	801eeaa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ef3e:	b005      	add	sp, #20
 801ef40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef44:	fffff800 	.word	0xfffff800

0801ef48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef4c:	b087      	sub	sp, #28
 801ef4e:	468b      	mov	fp, r1
 801ef50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef54:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ef56:	9204      	str	r2, [sp, #16]
 801ef58:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ef5c:	6861      	ldr	r1, [r4, #4]
 801ef5e:	9205      	str	r2, [sp, #20]
 801ef60:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801ef64:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801ef68:	fb01 2000 	mla	r0, r1, r0, r2
 801ef6c:	6822      	ldr	r2, [r4, #0]
 801ef6e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ef72:	f8de 2000 	ldr.w	r2, [lr]
 801ef76:	9201      	str	r2, [sp, #4]
 801ef78:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ef7c:	9202      	str	r2, [sp, #8]
 801ef7e:	f1bb 0f00 	cmp.w	fp, #0
 801ef82:	dc03      	bgt.n	801ef8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ef84:	9a04      	ldr	r2, [sp, #16]
 801ef86:	2a00      	cmp	r2, #0
 801ef88:	f340 8142 	ble.w	801f210 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ef8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ef8e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ef92:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ef96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ef98:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ef9c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	dd0e      	ble.n	801efc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801efa4:	140c      	asrs	r4, r1, #16
 801efa6:	d405      	bmi.n	801efb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801efa8:	42bc      	cmp	r4, r7
 801efaa:	da03      	bge.n	801efb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801efac:	1414      	asrs	r4, r2, #16
 801efae:	d401      	bmi.n	801efb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801efb0:	42b4      	cmp	r4, r6
 801efb2:	db07      	blt.n	801efc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801efb4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801efb6:	3b01      	subs	r3, #1
 801efb8:	3002      	adds	r0, #2
 801efba:	4421      	add	r1, r4
 801efbc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801efbe:	4422      	add	r2, r4
 801efc0:	e7ee      	b.n	801efa0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801efc2:	d019      	beq.n	801eff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801efc4:	1e5c      	subs	r4, r3, #1
 801efc6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801efc8:	fb05 1504 	mla	r5, r5, r4, r1
 801efcc:	142d      	asrs	r5, r5, #16
 801efce:	d409      	bmi.n	801efe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801efd0:	42bd      	cmp	r5, r7
 801efd2:	da07      	bge.n	801efe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801efd4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801efd6:	fb05 2404 	mla	r4, r5, r4, r2
 801efda:	1424      	asrs	r4, r4, #16
 801efdc:	d402      	bmi.n	801efe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801efde:	42b4      	cmp	r4, r6
 801efe0:	f2c0 80b1 	blt.w	801f146 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801efe4:	f04f 0800 	mov.w	r8, #0
 801efe8:	eb03 0408 	add.w	r4, r3, r8
 801efec:	2c00      	cmp	r4, #0
 801efee:	dc3e      	bgt.n	801f06e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801eff0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eff4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801eff8:	f1bb 0f00 	cmp.w	fp, #0
 801effc:	f340 8108 	ble.w	801f210 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f000:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f006:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f00a:	f1bb 0b01 	subs.w	fp, fp, #1
 801f00e:	eeb0 6a62 	vmov.f32	s12, s5
 801f012:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f016:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f01a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f01e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f022:	eeb0 6a43 	vmov.f32	s12, s6
 801f026:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f02a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f02e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f032:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f036:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f03a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f03e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f042:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f046:	ee12 2a90 	vmov	r2, s5
 801f04a:	eef0 2a47 	vmov.f32	s5, s14
 801f04e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f052:	ee13 2a10 	vmov	r2, s6
 801f056:	9313      	str	r3, [sp, #76]	; 0x4c
 801f058:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f05a:	eeb0 3a67 	vmov.f32	s6, s15
 801f05e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f062:	9a04      	ldr	r2, [sp, #16]
 801f064:	9314      	str	r3, [sp, #80]	; 0x50
 801f066:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f068:	bf08      	it	eq
 801f06a:	4613      	moveq	r3, r2
 801f06c:	e787      	b.n	801ef7e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f06e:	140e      	asrs	r6, r1, #16
 801f070:	d462      	bmi.n	801f138 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f072:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f076:	42b5      	cmp	r5, r6
 801f078:	dd5e      	ble.n	801f138 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f07a:	1417      	asrs	r7, r2, #16
 801f07c:	d45c      	bmi.n	801f138 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f07e:	f8de 400c 	ldr.w	r4, [lr, #12]
 801f082:	42bc      	cmp	r4, r7
 801f084:	dd58      	ble.n	801f138 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f086:	b22d      	sxth	r5, r5
 801f088:	9c02      	ldr	r4, [sp, #8]
 801f08a:	fb07 6505 	mla	r5, r7, r5, r6
 801f08e:	5d66      	ldrb	r6, [r4, r5]
 801f090:	2e00      	cmp	r6, #0
 801f092:	d051      	beq.n	801f138 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f094:	9c01      	ldr	r4, [sp, #4]
 801f096:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801f09a:	f06f 0401 	mvn.w	r4, #1
 801f09e:	fb04 f408 	mul.w	r4, r4, r8
 801f0a2:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801f0a6:	5b05      	ldrh	r5, [r0, r4]
 801f0a8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f0ac:	9403      	str	r4, [sp, #12]
 801f0ae:	9c05      	ldr	r4, [sp, #20]
 801f0b0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f0b4:	4366      	muls	r6, r4
 801f0b6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f0ba:	1c74      	adds	r4, r6, #1
 801f0bc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f0c0:	122e      	asrs	r6, r5, #8
 801f0c2:	1224      	asrs	r4, r4, #8
 801f0c4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f0c8:	00ed      	lsls	r5, r5, #3
 801f0ca:	b2a7      	uxth	r7, r4
 801f0cc:	43e4      	mvns	r4, r4
 801f0ce:	b2ed      	uxtb	r5, r5
 801f0d0:	b2e4      	uxtb	r4, r4
 801f0d2:	fb16 f604 	smulbb	r6, r6, r4
 801f0d6:	fb15 f504 	smulbb	r5, r5, r4
 801f0da:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f0de:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801f0e2:	fb1a fa04 	smulbb	sl, sl, r4
 801f0e6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f0ea:	fa1f fc8c 	uxth.w	ip, ip
 801f0ee:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f0f2:	fa5f f989 	uxtb.w	r9, r9
 801f0f6:	fb06 a607 	mla	r6, r6, r7, sl
 801f0fa:	f10c 0401 	add.w	r4, ip, #1
 801f0fe:	fb09 5507 	mla	r5, r9, r7, r5
 801f102:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f106:	9c03      	ldr	r4, [sp, #12]
 801f108:	b2ad      	uxth	r5, r5
 801f10a:	b2b6      	uxth	r6, r6
 801f10c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f110:	f105 0a01 	add.w	sl, r5, #1
 801f114:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f118:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f11c:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f120:	f106 0a01 	add.w	sl, r6, #1
 801f124:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f128:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f12c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f130:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f134:	f820 c004 	strh.w	ip, [r0, r4]
 801f138:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f13a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f13e:	4421      	add	r1, r4
 801f140:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f142:	4422      	add	r2, r4
 801f144:	e750      	b.n	801efe8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f146:	f04f 0900 	mov.w	r9, #0
 801f14a:	eba3 0409 	sub.w	r4, r3, r9
 801f14e:	2c00      	cmp	r4, #0
 801f150:	f77f af4e 	ble.w	801eff0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f154:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f158:	140d      	asrs	r5, r1, #16
 801f15a:	1414      	asrs	r4, r2, #16
 801f15c:	fb06 5404 	mla	r4, r6, r4, r5
 801f160:	9d02      	ldr	r5, [sp, #8]
 801f162:	5d2e      	ldrb	r6, [r5, r4]
 801f164:	2e00      	cmp	r6, #0
 801f166:	d04c      	beq.n	801f202 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f168:	9d01      	ldr	r5, [sp, #4]
 801f16a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f16e:	9c05      	ldr	r4, [sp, #20]
 801f170:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f174:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f178:	4366      	muls	r6, r4
 801f17a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f17e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f182:	1c74      	adds	r4, r6, #1
 801f184:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f188:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f18c:	122e      	asrs	r6, r5, #8
 801f18e:	1224      	asrs	r4, r4, #8
 801f190:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f194:	00ed      	lsls	r5, r5, #3
 801f196:	b2a7      	uxth	r7, r4
 801f198:	43e4      	mvns	r4, r4
 801f19a:	b2ed      	uxtb	r5, r5
 801f19c:	b2e4      	uxtb	r4, r4
 801f19e:	fb16 f604 	smulbb	r6, r6, r4
 801f1a2:	fb15 f504 	smulbb	r5, r5, r4
 801f1a6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f1aa:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f1ae:	fb1a fa04 	smulbb	sl, sl, r4
 801f1b2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f1b6:	fa1f fc8c 	uxth.w	ip, ip
 801f1ba:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f1be:	fa5f f888 	uxtb.w	r8, r8
 801f1c2:	fb06 a607 	mla	r6, r6, r7, sl
 801f1c6:	f10c 0401 	add.w	r4, ip, #1
 801f1ca:	fb08 5507 	mla	r5, r8, r7, r5
 801f1ce:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f1d2:	b2ad      	uxth	r5, r5
 801f1d4:	b2b6      	uxth	r6, r6
 801f1d6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f1da:	f105 0a01 	add.w	sl, r5, #1
 801f1de:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f1e2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f1e6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f1ea:	f106 0a01 	add.w	sl, r6, #1
 801f1ee:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f1f2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f1f6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f1fa:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f1fe:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f202:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f204:	f109 0901 	add.w	r9, r9, #1
 801f208:	4421      	add	r1, r4
 801f20a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f20c:	4422      	add	r2, r4
 801f20e:	e79c      	b.n	801f14a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f210:	b007      	add	sp, #28
 801f212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f216 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f216:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f21a:	b085      	sub	sp, #20
 801f21c:	468b      	mov	fp, r1
 801f21e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f222:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f224:	9203      	str	r2, [sp, #12]
 801f226:	6861      	ldr	r1, [r4, #4]
 801f228:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f22c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f230:	fb01 2000 	mla	r0, r1, r0, r2
 801f234:	6822      	ldr	r2, [r4, #0]
 801f236:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f23a:	f8d8 2000 	ldr.w	r2, [r8]
 801f23e:	9200      	str	r2, [sp, #0]
 801f240:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f244:	9201      	str	r2, [sp, #4]
 801f246:	f1bb 0f00 	cmp.w	fp, #0
 801f24a:	dc03      	bgt.n	801f254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f24c:	9a03      	ldr	r2, [sp, #12]
 801f24e:	2a00      	cmp	r2, #0
 801f250:	f340 8146 	ble.w	801f4e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f254:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f256:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f25a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f25e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f260:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f264:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f268:	2b00      	cmp	r3, #0
 801f26a:	dd0e      	ble.n	801f28a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f26c:	140c      	asrs	r4, r1, #16
 801f26e:	d405      	bmi.n	801f27c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f270:	42bc      	cmp	r4, r7
 801f272:	da03      	bge.n	801f27c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f274:	1414      	asrs	r4, r2, #16
 801f276:	d401      	bmi.n	801f27c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f278:	42b4      	cmp	r4, r6
 801f27a:	db07      	blt.n	801f28c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f27c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f27e:	3b01      	subs	r3, #1
 801f280:	3002      	adds	r0, #2
 801f282:	4421      	add	r1, r4
 801f284:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f286:	4422      	add	r2, r4
 801f288:	e7ee      	b.n	801f268 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f28a:	d017      	beq.n	801f2bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f28c:	1e5c      	subs	r4, r3, #1
 801f28e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f290:	fb05 1504 	mla	r5, r5, r4, r1
 801f294:	142d      	asrs	r5, r5, #16
 801f296:	d409      	bmi.n	801f2ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f298:	42bd      	cmp	r5, r7
 801f29a:	da07      	bge.n	801f2ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f29c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f29e:	fb05 2404 	mla	r4, r5, r4, r2
 801f2a2:	1424      	asrs	r4, r4, #16
 801f2a4:	d402      	bmi.n	801f2ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f2a6:	42b4      	cmp	r4, r6
 801f2a8:	f2c0 80b3 	blt.w	801f412 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f2ac:	2600      	movs	r6, #0
 801f2ae:	199c      	adds	r4, r3, r6
 801f2b0:	2c00      	cmp	r4, #0
 801f2b2:	dc3e      	bgt.n	801f332 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f2b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f2b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f2bc:	f1bb 0f00 	cmp.w	fp, #0
 801f2c0:	f340 810e 	ble.w	801f4e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f2c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f2c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f2ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f2ce:	f1bb 0b01 	subs.w	fp, fp, #1
 801f2d2:	eeb0 6a62 	vmov.f32	s12, s5
 801f2d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f2da:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f2de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f2e2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f2e6:	eeb0 6a43 	vmov.f32	s12, s6
 801f2ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f2ee:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f2f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f2f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f2fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f2fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f302:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f306:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f30a:	ee12 2a90 	vmov	r2, s5
 801f30e:	eef0 2a47 	vmov.f32	s5, s14
 801f312:	fb92 f3f3 	sdiv	r3, r2, r3
 801f316:	ee13 2a10 	vmov	r2, s6
 801f31a:	9311      	str	r3, [sp, #68]	; 0x44
 801f31c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f31e:	eeb0 3a67 	vmov.f32	s6, s15
 801f322:	fb92 f3f3 	sdiv	r3, r2, r3
 801f326:	9a03      	ldr	r2, [sp, #12]
 801f328:	9312      	str	r3, [sp, #72]	; 0x48
 801f32a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f32c:	bf08      	it	eq
 801f32e:	4613      	moveq	r3, r2
 801f330:	e789      	b.n	801f246 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f332:	140f      	asrs	r7, r1, #16
 801f334:	d418      	bmi.n	801f368 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f336:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f33a:	42bd      	cmp	r5, r7
 801f33c:	dd14      	ble.n	801f368 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f33e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f342:	d411      	bmi.n	801f368 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f344:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801f348:	4564      	cmp	r4, ip
 801f34a:	dd0d      	ble.n	801f368 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f34c:	b22d      	sxth	r5, r5
 801f34e:	9c01      	ldr	r4, [sp, #4]
 801f350:	fb0c 7505 	mla	r5, ip, r5, r7
 801f354:	5d64      	ldrb	r4, [r4, r5]
 801f356:	2cff      	cmp	r4, #255	; 0xff
 801f358:	d10c      	bne.n	801f374 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f35a:	9c00      	ldr	r4, [sp, #0]
 801f35c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801f360:	f06f 0401 	mvn.w	r4, #1
 801f364:	4374      	muls	r4, r6
 801f366:	5305      	strh	r5, [r0, r4]
 801f368:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f36a:	3e01      	subs	r6, #1
 801f36c:	4421      	add	r1, r4
 801f36e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f370:	4422      	add	r2, r4
 801f372:	e79c      	b.n	801f2ae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f374:	2c00      	cmp	r4, #0
 801f376:	d0f7      	beq.n	801f368 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f378:	9f00      	ldr	r7, [sp, #0]
 801f37a:	fa1f fc84 	uxth.w	ip, r4
 801f37e:	43e4      	mvns	r4, r4
 801f380:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801f384:	f06f 0501 	mvn.w	r5, #1
 801f388:	b2e4      	uxtb	r4, r4
 801f38a:	4375      	muls	r5, r6
 801f38c:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801f390:	9502      	str	r5, [sp, #8]
 801f392:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f396:	5b45      	ldrh	r5, [r0, r5]
 801f398:	122f      	asrs	r7, r5, #8
 801f39a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f39e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f3a2:	00ed      	lsls	r5, r5, #3
 801f3a4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f3a8:	fb17 f704 	smulbb	r7, r7, r4
 801f3ac:	b2ed      	uxtb	r5, r5
 801f3ae:	fb1a fa04 	smulbb	sl, sl, r4
 801f3b2:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801f3b6:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801f3ba:	fb15 f504 	smulbb	r5, r5, r4
 801f3be:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f3c2:	fa1f fe8e 	uxth.w	lr, lr
 801f3c6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f3ca:	fa5f f989 	uxtb.w	r9, r9
 801f3ce:	fb07 a70c 	mla	r7, r7, ip, sl
 801f3d2:	f10e 0401 	add.w	r4, lr, #1
 801f3d6:	fb09 550c 	mla	r5, r9, ip, r5
 801f3da:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801f3de:	9c02      	ldr	r4, [sp, #8]
 801f3e0:	b2ad      	uxth	r5, r5
 801f3e2:	b2bf      	uxth	r7, r7
 801f3e4:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f3e8:	f105 0a01 	add.w	sl, r5, #1
 801f3ec:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f3f0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f3f4:	ea4a 0e0e 	orr.w	lr, sl, lr
 801f3f8:	f107 0a01 	add.w	sl, r7, #1
 801f3fc:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f400:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f404:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f408:	ea4e 0e0a 	orr.w	lr, lr, sl
 801f40c:	f820 e004 	strh.w	lr, [r0, r4]
 801f410:	e7aa      	b.n	801f368 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f412:	f04f 0900 	mov.w	r9, #0
 801f416:	eba3 0409 	sub.w	r4, r3, r9
 801f41a:	2c00      	cmp	r4, #0
 801f41c:	f77f af4a 	ble.w	801f2b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f420:	1414      	asrs	r4, r2, #16
 801f422:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f426:	140d      	asrs	r5, r1, #16
 801f428:	fb06 5504 	mla	r5, r6, r4, r5
 801f42c:	9c01      	ldr	r4, [sp, #4]
 801f42e:	5d64      	ldrb	r4, [r4, r5]
 801f430:	2cff      	cmp	r4, #255	; 0xff
 801f432:	d10b      	bne.n	801f44c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f434:	9c00      	ldr	r4, [sp, #0]
 801f436:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f43a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801f43e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f440:	f109 0901 	add.w	r9, r9, #1
 801f444:	4421      	add	r1, r4
 801f446:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f448:	4422      	add	r2, r4
 801f44a:	e7e4      	b.n	801f416 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f44c:	2c00      	cmp	r4, #0
 801f44e:	d0f6      	beq.n	801f43e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f450:	9e00      	ldr	r6, [sp, #0]
 801f452:	b2a7      	uxth	r7, r4
 801f454:	43e4      	mvns	r4, r4
 801f456:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801f45a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f45e:	b2e4      	uxtb	r4, r4
 801f460:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f464:	122e      	asrs	r6, r5, #8
 801f466:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f46a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f46e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f472:	00ed      	lsls	r5, r5, #3
 801f474:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f478:	fb16 f604 	smulbb	r6, r6, r4
 801f47c:	b2ed      	uxtb	r5, r5
 801f47e:	fb1a fa04 	smulbb	sl, sl, r4
 801f482:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f486:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f48a:	fb15 f504 	smulbb	r5, r5, r4
 801f48e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f492:	fa1f fc8c 	uxth.w	ip, ip
 801f496:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f49a:	fa5f fe8e 	uxtb.w	lr, lr
 801f49e:	fb06 a607 	mla	r6, r6, r7, sl
 801f4a2:	f10c 0401 	add.w	r4, ip, #1
 801f4a6:	fb0e 5507 	mla	r5, lr, r7, r5
 801f4aa:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f4ae:	b2ad      	uxth	r5, r5
 801f4b0:	b2b6      	uxth	r6, r6
 801f4b2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f4b6:	f105 0a01 	add.w	sl, r5, #1
 801f4ba:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f4be:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f4c2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f4c6:	f106 0a01 	add.w	sl, r6, #1
 801f4ca:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f4ce:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f4d2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f4d6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f4da:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f4de:	e7ae      	b.n	801f43e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f4e0:	b005      	add	sp, #20
 801f4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f4e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f4e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4ea:	b085      	sub	sp, #20
 801f4ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f4ee:	9203      	str	r2, [sp, #12]
 801f4f0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f4f4:	9100      	str	r1, [sp, #0]
 801f4f6:	9201      	str	r2, [sp, #4]
 801f4f8:	6841      	ldr	r1, [r0, #4]
 801f4fa:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f4fe:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f502:	fb01 2404 	mla	r4, r1, r4, r2
 801f506:	6802      	ldr	r2, [r0, #0]
 801f508:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f50c:	f8de 2000 	ldr.w	r2, [lr]
 801f510:	9202      	str	r2, [sp, #8]
 801f512:	9a01      	ldr	r2, [sp, #4]
 801f514:	43d6      	mvns	r6, r2
 801f516:	b2f6      	uxtb	r6, r6
 801f518:	9a00      	ldr	r2, [sp, #0]
 801f51a:	2a00      	cmp	r2, #0
 801f51c:	dc03      	bgt.n	801f526 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f51e:	9a03      	ldr	r2, [sp, #12]
 801f520:	2a00      	cmp	r2, #0
 801f522:	f340 8124 	ble.w	801f76e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f528:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f52c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f530:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f532:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f536:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	dd0e      	ble.n	801f55c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f53e:	1408      	asrs	r0, r1, #16
 801f540:	d405      	bmi.n	801f54e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f542:	4560      	cmp	r0, ip
 801f544:	da03      	bge.n	801f54e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f546:	1410      	asrs	r0, r2, #16
 801f548:	d401      	bmi.n	801f54e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f54a:	42b8      	cmp	r0, r7
 801f54c:	db07      	blt.n	801f55e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f54e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f550:	3b01      	subs	r3, #1
 801f552:	3402      	adds	r4, #2
 801f554:	4401      	add	r1, r0
 801f556:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f558:	4402      	add	r2, r0
 801f55a:	e7ee      	b.n	801f53a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f55c:	d06e      	beq.n	801f63c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f55e:	1e58      	subs	r0, r3, #1
 801f560:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f562:	fb05 1500 	mla	r5, r5, r0, r1
 801f566:	142d      	asrs	r5, r5, #16
 801f568:	d45c      	bmi.n	801f624 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f56a:	4565      	cmp	r5, ip
 801f56c:	da5a      	bge.n	801f624 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f56e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f570:	fb05 2000 	mla	r0, r5, r0, r2
 801f574:	1400      	asrs	r0, r0, #16
 801f576:	d455      	bmi.n	801f624 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f578:	42b8      	cmp	r0, r7
 801f57a:	da53      	bge.n	801f624 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f57c:	4699      	mov	r9, r3
 801f57e:	46a2      	mov	sl, r4
 801f580:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801f584:	f1b9 0f00 	cmp.w	r9, #0
 801f588:	dd54      	ble.n	801f634 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f58a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f58e:	140d      	asrs	r5, r1, #16
 801f590:	1410      	asrs	r0, r2, #16
 801f592:	f109 39ff 	add.w	r9, r9, #4294967295
 801f596:	fb07 5000 	mla	r0, r7, r0, r5
 801f59a:	9d02      	ldr	r5, [sp, #8]
 801f59c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f5a0:	f8ba 5000 	ldrh.w	r5, [sl]
 801f5a4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f5a8:	122f      	asrs	r7, r5, #8
 801f5aa:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f5ae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f5b2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f5b6:	00ed      	lsls	r5, r5, #3
 801f5b8:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f5bc:	fb17 f706 	smulbb	r7, r7, r6
 801f5c0:	b2ed      	uxtb	r5, r5
 801f5c2:	fb18 f806 	smulbb	r8, r8, r6
 801f5c6:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f5ca:	10c7      	asrs	r7, r0, #3
 801f5cc:	fb15 f506 	smulbb	r5, r5, r6
 801f5d0:	00c0      	lsls	r0, r0, #3
 801f5d2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f5d6:	fa1f fc8c 	uxth.w	ip, ip
 801f5da:	b2c0      	uxtb	r0, r0
 801f5dc:	fb07 870b 	mla	r7, r7, fp, r8
 801f5e0:	fb00 500b 	mla	r0, r0, fp, r5
 801f5e4:	f10c 0501 	add.w	r5, ip, #1
 801f5e8:	b2bf      	uxth	r7, r7
 801f5ea:	b280      	uxth	r0, r0
 801f5ec:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f5f0:	f107 0801 	add.w	r8, r7, #1
 801f5f4:	1c45      	adds	r5, r0, #1
 801f5f6:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f5fa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f5fe:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f602:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f604:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f608:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f60c:	4401      	add	r1, r0
 801f60e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f612:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f614:	ea45 0c0c 	orr.w	ip, r5, ip
 801f618:	4402      	add	r2, r0
 801f61a:	ea4c 0c08 	orr.w	ip, ip, r8
 801f61e:	f82a cb02 	strh.w	ip, [sl], #2
 801f622:	e7af      	b.n	801f584 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f624:	f04f 0800 	mov.w	r8, #0
 801f628:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801f62c:	eb03 0008 	add.w	r0, r3, r8
 801f630:	2800      	cmp	r0, #0
 801f632:	dc41      	bgt.n	801f6b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f634:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f638:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f63c:	9b00      	ldr	r3, [sp, #0]
 801f63e:	2b00      	cmp	r3, #0
 801f640:	f340 8095 	ble.w	801f76e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f64a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f64e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f652:	eef0 6a62 	vmov.f32	s13, s5
 801f656:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f65a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f65e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f662:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801f666:	eef0 6a43 	vmov.f32	s13, s6
 801f66a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f66e:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801f672:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f676:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f67a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f67e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f682:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f686:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f68a:	ee12 2a90 	vmov	r2, s5
 801f68e:	eef0 2a47 	vmov.f32	s5, s14
 801f692:	fb92 f3f3 	sdiv	r3, r2, r3
 801f696:	ee13 2a10 	vmov	r2, s6
 801f69a:	9311      	str	r3, [sp, #68]	; 0x44
 801f69c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f69e:	eeb0 3a67 	vmov.f32	s6, s15
 801f6a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6a6:	9312      	str	r3, [sp, #72]	; 0x48
 801f6a8:	9b00      	ldr	r3, [sp, #0]
 801f6aa:	9a03      	ldr	r2, [sp, #12]
 801f6ac:	3b01      	subs	r3, #1
 801f6ae:	9300      	str	r3, [sp, #0]
 801f6b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f6b2:	bf08      	it	eq
 801f6b4:	4613      	moveq	r3, r2
 801f6b6:	e72f      	b.n	801f518 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f6b8:	140f      	asrs	r7, r1, #16
 801f6ba:	d451      	bmi.n	801f760 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f6bc:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f6c0:	42bd      	cmp	r5, r7
 801f6c2:	dd4d      	ble.n	801f760 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f6c4:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f6c8:	d44a      	bmi.n	801f760 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f6ca:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f6ce:	4560      	cmp	r0, ip
 801f6d0:	dd46      	ble.n	801f760 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f6d2:	b22d      	sxth	r5, r5
 801f6d4:	9802      	ldr	r0, [sp, #8]
 801f6d6:	fb0c 7505 	mla	r5, ip, r5, r7
 801f6da:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801f6de:	f06f 0501 	mvn.w	r5, #1
 801f6e2:	fb05 fb08 	mul.w	fp, r5, r8
 801f6e6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f6ea:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f6ee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f6f2:	122f      	asrs	r7, r5, #8
 801f6f4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f6f8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f6fc:	00ed      	lsls	r5, r5, #3
 801f6fe:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f702:	fb17 f706 	smulbb	r7, r7, r6
 801f706:	b2ed      	uxtb	r5, r5
 801f708:	fb19 f906 	smulbb	r9, r9, r6
 801f70c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f710:	10c7      	asrs	r7, r0, #3
 801f712:	fb15 f506 	smulbb	r5, r5, r6
 801f716:	00c0      	lsls	r0, r0, #3
 801f718:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f71c:	fa1f fc8c 	uxth.w	ip, ip
 801f720:	b2c0      	uxtb	r0, r0
 801f722:	fb07 970a 	mla	r7, r7, sl, r9
 801f726:	fb00 500a 	mla	r0, r0, sl, r5
 801f72a:	f10c 0501 	add.w	r5, ip, #1
 801f72e:	b2bf      	uxth	r7, r7
 801f730:	b280      	uxth	r0, r0
 801f732:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f736:	f107 0901 	add.w	r9, r7, #1
 801f73a:	1c45      	adds	r5, r0, #1
 801f73c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f740:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f744:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f748:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f74c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f750:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f754:	ea45 0c0c 	orr.w	ip, r5, ip
 801f758:	ea4c 0c09 	orr.w	ip, ip, r9
 801f75c:	f824 c00b 	strh.w	ip, [r4, fp]
 801f760:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f762:	f108 38ff 	add.w	r8, r8, #4294967295
 801f766:	4401      	add	r1, r0
 801f768:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f76a:	4402      	add	r2, r0
 801f76c:	e75e      	b.n	801f62c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f76e:	b005      	add	sp, #20
 801f770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f774 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f778:	b085      	sub	sp, #20
 801f77a:	4693      	mov	fp, r2
 801f77c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f780:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f782:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f784:	6870      	ldr	r0, [r6, #4]
 801f786:	9101      	str	r1, [sp, #4]
 801f788:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f78c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f790:	fb00 2404 	mla	r4, r0, r4, r2
 801f794:	6832      	ldr	r2, [r6, #0]
 801f796:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f79a:	682a      	ldr	r2, [r5, #0]
 801f79c:	9202      	str	r2, [sp, #8]
 801f79e:	9a01      	ldr	r2, [sp, #4]
 801f7a0:	2a00      	cmp	r2, #0
 801f7a2:	dc03      	bgt.n	801f7ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f7a4:	f1bb 0f00 	cmp.w	fp, #0
 801f7a8:	f340 809a 	ble.w	801f8e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f7ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f7ae:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f7b2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f7b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f7b8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f7bc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f7c0:	2b00      	cmp	r3, #0
 801f7c2:	dd0c      	ble.n	801f7de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f7c4:	1406      	asrs	r6, r0, #16
 801f7c6:	d405      	bmi.n	801f7d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f7c8:	454e      	cmp	r6, r9
 801f7ca:	da03      	bge.n	801f7d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f7cc:	1416      	asrs	r6, r2, #16
 801f7ce:	d401      	bmi.n	801f7d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f7d0:	4546      	cmp	r6, r8
 801f7d2:	db05      	blt.n	801f7e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f7d4:	4470      	add	r0, lr
 801f7d6:	4462      	add	r2, ip
 801f7d8:	3b01      	subs	r3, #1
 801f7da:	3402      	adds	r4, #2
 801f7dc:	e7f0      	b.n	801f7c0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f7de:	d00f      	beq.n	801f800 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f7e0:	1e5e      	subs	r6, r3, #1
 801f7e2:	fb0e 0706 	mla	r7, lr, r6, r0
 801f7e6:	143f      	asrs	r7, r7, #16
 801f7e8:	d541      	bpl.n	801f86e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f7ea:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f7ee:	4698      	mov	r8, r3
 801f7f0:	9603      	str	r6, [sp, #12]
 801f7f2:	f1b8 0f00 	cmp.w	r8, #0
 801f7f6:	dc56      	bgt.n	801f8a6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801f7f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f7fc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f800:	9b01      	ldr	r3, [sp, #4]
 801f802:	2b00      	cmp	r3, #0
 801f804:	dd6c      	ble.n	801f8e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f806:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f80c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f810:	eeb0 6a62 	vmov.f32	s12, s5
 801f814:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f818:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f81c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f820:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f824:	eeb0 6a43 	vmov.f32	s12, s6
 801f828:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f82c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f830:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f834:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f838:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f83c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f840:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f844:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f848:	ee12 2a90 	vmov	r2, s5
 801f84c:	eef0 2a47 	vmov.f32	s5, s14
 801f850:	fb92 fef3 	sdiv	lr, r2, r3
 801f854:	ee13 2a10 	vmov	r2, s6
 801f858:	eeb0 3a67 	vmov.f32	s6, s15
 801f85c:	fb92 fcf3 	sdiv	ip, r2, r3
 801f860:	9b01      	ldr	r3, [sp, #4]
 801f862:	3b01      	subs	r3, #1
 801f864:	9301      	str	r3, [sp, #4]
 801f866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f868:	bf08      	it	eq
 801f86a:	465b      	moveq	r3, fp
 801f86c:	e797      	b.n	801f79e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f86e:	454f      	cmp	r7, r9
 801f870:	dabb      	bge.n	801f7ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f872:	fb0c 2606 	mla	r6, ip, r6, r2
 801f876:	1436      	asrs	r6, r6, #16
 801f878:	d4b7      	bmi.n	801f7ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f87a:	4546      	cmp	r6, r8
 801f87c:	dab5      	bge.n	801f7ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f87e:	461e      	mov	r6, r3
 801f880:	46a0      	mov	r8, r4
 801f882:	2e00      	cmp	r6, #0
 801f884:	ddb8      	ble.n	801f7f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f886:	1417      	asrs	r7, r2, #16
 801f888:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f88c:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f890:	9902      	ldr	r1, [sp, #8]
 801f892:	4470      	add	r0, lr
 801f894:	4462      	add	r2, ip
 801f896:	fb0a 9707 	mla	r7, sl, r7, r9
 801f89a:	3e01      	subs	r6, #1
 801f89c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f8a0:	f828 7b02 	strh.w	r7, [r8], #2
 801f8a4:	e7ed      	b.n	801f882 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801f8a6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f8aa:	d414      	bmi.n	801f8d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f8ac:	68ae      	ldr	r6, [r5, #8]
 801f8ae:	454e      	cmp	r6, r9
 801f8b0:	dd11      	ble.n	801f8d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f8b2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f8b6:	d40e      	bmi.n	801f8d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f8b8:	68ef      	ldr	r7, [r5, #12]
 801f8ba:	4557      	cmp	r7, sl
 801f8bc:	dd0b      	ble.n	801f8d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f8be:	b236      	sxth	r6, r6
 801f8c0:	f06f 0101 	mvn.w	r1, #1
 801f8c4:	9f02      	ldr	r7, [sp, #8]
 801f8c6:	fb0a 9606 	mla	r6, sl, r6, r9
 801f8ca:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f8ce:	fb01 f608 	mul.w	r6, r1, r8
 801f8d2:	9903      	ldr	r1, [sp, #12]
 801f8d4:	538f      	strh	r7, [r1, r6]
 801f8d6:	4470      	add	r0, lr
 801f8d8:	4462      	add	r2, ip
 801f8da:	f108 38ff 	add.w	r8, r8, #4294967295
 801f8de:	e788      	b.n	801f7f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f8e0:	b005      	add	sp, #20
 801f8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f8e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f8e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8ea:	b087      	sub	sp, #28
 801f8ec:	468b      	mov	fp, r1
 801f8ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f8f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f8f4:	9203      	str	r2, [sp, #12]
 801f8f6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f8fa:	6841      	ldr	r1, [r0, #4]
 801f8fc:	9204      	str	r2, [sp, #16]
 801f8fe:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801f902:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801f906:	fb01 2505 	mla	r5, r1, r5, r2
 801f90a:	6802      	ldr	r2, [r0, #0]
 801f90c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801f910:	f8d9 2000 	ldr.w	r2, [r9]
 801f914:	9201      	str	r2, [sp, #4]
 801f916:	f1bb 0f00 	cmp.w	fp, #0
 801f91a:	dc03      	bgt.n	801f924 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f91c:	9a03      	ldr	r2, [sp, #12]
 801f91e:	2a00      	cmp	r2, #0
 801f920:	f340 8158 	ble.w	801fbd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801f924:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f926:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801f92a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f92e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f930:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801f934:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f938:	2b00      	cmp	r3, #0
 801f93a:	dd0e      	ble.n	801f95a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f93c:	1402      	asrs	r2, r0, #16
 801f93e:	d405      	bmi.n	801f94c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f940:	42ba      	cmp	r2, r7
 801f942:	da03      	bge.n	801f94c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f944:	140a      	asrs	r2, r1, #16
 801f946:	d401      	bmi.n	801f94c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f948:	42b2      	cmp	r2, r6
 801f94a:	db07      	blt.n	801f95c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f94c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f94e:	3b01      	subs	r3, #1
 801f950:	3502      	adds	r5, #2
 801f952:	4410      	add	r0, r2
 801f954:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f956:	4411      	add	r1, r2
 801f958:	e7ee      	b.n	801f938 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f95a:	d017      	beq.n	801f98c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f95c:	1e5a      	subs	r2, r3, #1
 801f95e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f960:	fb04 0402 	mla	r4, r4, r2, r0
 801f964:	1424      	asrs	r4, r4, #16
 801f966:	d409      	bmi.n	801f97c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f968:	42bc      	cmp	r4, r7
 801f96a:	da07      	bge.n	801f97c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f96c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f96e:	fb04 1202 	mla	r2, r4, r2, r1
 801f972:	1412      	asrs	r2, r2, #16
 801f974:	d402      	bmi.n	801f97c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f976:	42b2      	cmp	r2, r6
 801f978:	f2c0 80bf 	blt.w	801fafa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f97c:	2700      	movs	r7, #0
 801f97e:	19da      	adds	r2, r3, r7
 801f980:	2a00      	cmp	r2, #0
 801f982:	dc3e      	bgt.n	801fa02 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f984:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f988:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801f98c:	f1bb 0f00 	cmp.w	fp, #0
 801f990:	f340 8120 	ble.w	801fbd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801f994:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f998:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f99a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f99e:	f1bb 0b01 	subs.w	fp, fp, #1
 801f9a2:	eeb0 6a62 	vmov.f32	s12, s5
 801f9a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f9aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9b2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f9b6:	eeb0 6a43 	vmov.f32	s12, s6
 801f9ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9be:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f9c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9da:	ee12 2a90 	vmov	r2, s5
 801f9de:	eef0 2a47 	vmov.f32	s5, s14
 801f9e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9e6:	ee13 2a10 	vmov	r2, s6
 801f9ea:	9313      	str	r3, [sp, #76]	; 0x4c
 801f9ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f9ee:	eeb0 3a67 	vmov.f32	s6, s15
 801f9f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9f6:	9a03      	ldr	r2, [sp, #12]
 801f9f8:	9314      	str	r3, [sp, #80]	; 0x50
 801f9fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f9fc:	bf08      	it	eq
 801f9fe:	4613      	moveq	r3, r2
 801fa00:	e789      	b.n	801f916 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801fa02:	1406      	asrs	r6, r0, #16
 801fa04:	d42d      	bmi.n	801fa62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa06:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801fa0a:	42b4      	cmp	r4, r6
 801fa0c:	dd29      	ble.n	801fa62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa0e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801fa12:	d426      	bmi.n	801fa62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa14:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801fa18:	4562      	cmp	r2, ip
 801fa1a:	dd22      	ble.n	801fa62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa1c:	b224      	sxth	r4, r4
 801fa1e:	9a01      	ldr	r2, [sp, #4]
 801fa20:	fb0c 6404 	mla	r4, ip, r4, r6
 801fa24:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801fa28:	0e22      	lsrs	r2, r4, #24
 801fa2a:	d01a      	beq.n	801fa62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa2c:	9e04      	ldr	r6, [sp, #16]
 801fa2e:	4372      	muls	r2, r6
 801fa30:	1c56      	adds	r6, r2, #1
 801fa32:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fa36:	0a26      	lsrs	r6, r4, #8
 801fa38:	1212      	asrs	r2, r2, #8
 801fa3a:	9605      	str	r6, [sp, #20]
 801fa3c:	2aff      	cmp	r2, #255	; 0xff
 801fa3e:	d116      	bne.n	801fa6e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801fa40:	f06f 0201 	mvn.w	r2, #1
 801fa44:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fa48:	fb02 fc07 	mul.w	ip, r2, r7
 801fa4c:	0962      	lsrs	r2, r4, #5
 801fa4e:	f026 0607 	bic.w	r6, r6, #7
 801fa52:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fa56:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fa5a:	4316      	orrs	r6, r2
 801fa5c:	4326      	orrs	r6, r4
 801fa5e:	f825 600c 	strh.w	r6, [r5, ip]
 801fa62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fa64:	3f01      	subs	r7, #1
 801fa66:	4410      	add	r0, r2
 801fa68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fa6a:	4411      	add	r1, r2
 801fa6c:	e787      	b.n	801f97e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fa6e:	f06f 0601 	mvn.w	r6, #1
 801fa72:	fa1f fa82 	uxth.w	sl, r2
 801fa76:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801fa7a:	43d2      	mvns	r2, r2
 801fa7c:	437e      	muls	r6, r7
 801fa7e:	b2e4      	uxtb	r4, r4
 801fa80:	fb1c fc0a 	smulbb	ip, ip, sl
 801fa84:	b2d2      	uxtb	r2, r2
 801fa86:	f835 8006 	ldrh.w	r8, [r5, r6]
 801fa8a:	fb14 f40a 	smulbb	r4, r4, sl
 801fa8e:	9602      	str	r6, [sp, #8]
 801fa90:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801fa94:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801fa98:	fb16 f60a 	smulbb	r6, r6, sl
 801fa9c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801faa0:	fb0e ce02 	mla	lr, lr, r2, ip
 801faa4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801faa8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801faac:	fa1f fe8e 	uxth.w	lr, lr
 801fab0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fab4:	fa5f f888 	uxtb.w	r8, r8
 801fab8:	fb0c 6c02 	mla	ip, ip, r2, r6
 801fabc:	fb08 4402 	mla	r4, r8, r2, r4
 801fac0:	f10e 0201 	add.w	r2, lr, #1
 801fac4:	fa1f fc8c 	uxth.w	ip, ip
 801fac8:	b2a4      	uxth	r4, r4
 801faca:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801face:	9a02      	ldr	r2, [sp, #8]
 801fad0:	1c66      	adds	r6, r4, #1
 801fad2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801fad6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fada:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fade:	ea46 0e0e 	orr.w	lr, r6, lr
 801fae2:	f10c 0601 	add.w	r6, ip, #1
 801fae6:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801faea:	0976      	lsrs	r6, r6, #5
 801faec:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801faf0:	ea4e 0e06 	orr.w	lr, lr, r6
 801faf4:	f825 e002 	strh.w	lr, [r5, r2]
 801faf8:	e7b3      	b.n	801fa62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fafa:	f04f 0800 	mov.w	r8, #0
 801fafe:	eba3 0208 	sub.w	r2, r3, r8
 801fb02:	2a00      	cmp	r2, #0
 801fb04:	f77f af3e 	ble.w	801f984 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fb08:	1404      	asrs	r4, r0, #16
 801fb0a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801fb0e:	140a      	asrs	r2, r1, #16
 801fb10:	fb06 4202 	mla	r2, r6, r2, r4
 801fb14:	9c01      	ldr	r4, [sp, #4]
 801fb16:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801fb1a:	0e22      	lsrs	r2, r4, #24
 801fb1c:	d015      	beq.n	801fb4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fb1e:	9e04      	ldr	r6, [sp, #16]
 801fb20:	4372      	muls	r2, r6
 801fb22:	1c56      	adds	r6, r2, #1
 801fb24:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fb28:	0a26      	lsrs	r6, r4, #8
 801fb2a:	1212      	asrs	r2, r2, #8
 801fb2c:	2aff      	cmp	r2, #255	; 0xff
 801fb2e:	d113      	bne.n	801fb58 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801fb30:	0962      	lsrs	r2, r4, #5
 801fb32:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fb36:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fb3a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fb3e:	f026 0607 	bic.w	r6, r6, #7
 801fb42:	4316      	orrs	r6, r2
 801fb44:	4326      	orrs	r6, r4
 801fb46:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801fb4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fb4c:	f108 0801 	add.w	r8, r8, #1
 801fb50:	4410      	add	r0, r2
 801fb52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb54:	4411      	add	r1, r2
 801fb56:	e7d2      	b.n	801fafe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801fb58:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801fb5c:	fa1f fa82 	uxth.w	sl, r2
 801fb60:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801fb64:	43d2      	mvns	r2, r2
 801fb66:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fb6a:	fb17 f70a 	smulbb	r7, r7, sl
 801fb6e:	b2d2      	uxtb	r2, r2
 801fb70:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fb74:	b2e4      	uxtb	r4, r4
 801fb76:	b2f6      	uxtb	r6, r6
 801fb78:	fb0c 7c02 	mla	ip, ip, r2, r7
 801fb7c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fb80:	fb14 f40a 	smulbb	r4, r4, sl
 801fb84:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fb88:	fa1f fc8c 	uxth.w	ip, ip
 801fb8c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fb90:	fb16 f60a 	smulbb	r6, r6, sl
 801fb94:	fa5f fe8e 	uxtb.w	lr, lr
 801fb98:	fb0e 4402 	mla	r4, lr, r2, r4
 801fb9c:	fb07 6702 	mla	r7, r7, r2, r6
 801fba0:	f10c 0201 	add.w	r2, ip, #1
 801fba4:	b2a4      	uxth	r4, r4
 801fba6:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801fbaa:	1c66      	adds	r6, r4, #1
 801fbac:	b2bf      	uxth	r7, r7
 801fbae:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fbb2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fbb6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fbba:	ea46 0c0c 	orr.w	ip, r6, ip
 801fbbe:	1c7e      	adds	r6, r7, #1
 801fbc0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fbc4:	0976      	lsrs	r6, r6, #5
 801fbc6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fbca:	ea4c 0c06 	orr.w	ip, ip, r6
 801fbce:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801fbd2:	e7ba      	b.n	801fb4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fbd4:	b007      	add	sp, #28
 801fbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fbdc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbe0:	b085      	sub	sp, #20
 801fbe2:	468b      	mov	fp, r1
 801fbe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fbe8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fbea:	9203      	str	r2, [sp, #12]
 801fbec:	6841      	ldr	r1, [r0, #4]
 801fbee:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801fbf2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fbf6:	fb01 2404 	mla	r4, r1, r4, r2
 801fbfa:	6802      	ldr	r2, [r0, #0]
 801fbfc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fc00:	f8d8 2000 	ldr.w	r2, [r8]
 801fc04:	9201      	str	r2, [sp, #4]
 801fc06:	f1bb 0f00 	cmp.w	fp, #0
 801fc0a:	dc03      	bgt.n	801fc14 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fc0c:	9a03      	ldr	r2, [sp, #12]
 801fc0e:	2a00      	cmp	r2, #0
 801fc10:	f340 814f 	ble.w	801feb2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fc14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fc16:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fc1a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fc1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fc20:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fc24:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	dd0e      	ble.n	801fc4a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fc2c:	1408      	asrs	r0, r1, #16
 801fc2e:	d405      	bmi.n	801fc3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fc30:	42b8      	cmp	r0, r7
 801fc32:	da03      	bge.n	801fc3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fc34:	1410      	asrs	r0, r2, #16
 801fc36:	d401      	bmi.n	801fc3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fc38:	42b0      	cmp	r0, r6
 801fc3a:	db07      	blt.n	801fc4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fc3c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fc3e:	3b01      	subs	r3, #1
 801fc40:	3402      	adds	r4, #2
 801fc42:	4401      	add	r1, r0
 801fc44:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fc46:	4402      	add	r2, r0
 801fc48:	e7ee      	b.n	801fc28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fc4a:	d017      	beq.n	801fc7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fc4c:	1e58      	subs	r0, r3, #1
 801fc4e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fc50:	fb05 1500 	mla	r5, r5, r0, r1
 801fc54:	142d      	asrs	r5, r5, #16
 801fc56:	d409      	bmi.n	801fc6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc58:	42bd      	cmp	r5, r7
 801fc5a:	da07      	bge.n	801fc6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc5c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fc5e:	fb05 2000 	mla	r0, r5, r0, r2
 801fc62:	1400      	asrs	r0, r0, #16
 801fc64:	d402      	bmi.n	801fc6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc66:	42b0      	cmp	r0, r6
 801fc68:	f2c0 80ba 	blt.w	801fde0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fc6c:	2600      	movs	r6, #0
 801fc6e:	1998      	adds	r0, r3, r6
 801fc70:	2800      	cmp	r0, #0
 801fc72:	dc3e      	bgt.n	801fcf2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fc74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc78:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fc7c:	f1bb 0f00 	cmp.w	fp, #0
 801fc80:	f340 8117 	ble.w	801feb2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fc84:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc8e:	f1bb 0b01 	subs.w	fp, fp, #1
 801fc92:	eeb0 6a62 	vmov.f32	s12, s5
 801fc96:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fca2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fca6:	eeb0 6a43 	vmov.f32	s12, s6
 801fcaa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fcae:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fcb2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fcb6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fcba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fcbe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fcc2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fcc6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fcca:	ee12 2a90 	vmov	r2, s5
 801fcce:	eef0 2a47 	vmov.f32	s5, s14
 801fcd2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcd6:	ee13 2a10 	vmov	r2, s6
 801fcda:	9311      	str	r3, [sp, #68]	; 0x44
 801fcdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcde:	eeb0 3a67 	vmov.f32	s6, s15
 801fce2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fce6:	9a03      	ldr	r2, [sp, #12]
 801fce8:	9312      	str	r3, [sp, #72]	; 0x48
 801fcea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcec:	bf08      	it	eq
 801fcee:	4613      	moveq	r3, r2
 801fcf0:	e789      	b.n	801fc06 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fcf2:	140f      	asrs	r7, r1, #16
 801fcf4:	d424      	bmi.n	801fd40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fcf6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801fcfa:	42bd      	cmp	r5, r7
 801fcfc:	dd20      	ble.n	801fd40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fcfe:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fd02:	d41d      	bmi.n	801fd40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fd04:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801fd08:	4560      	cmp	r0, ip
 801fd0a:	dd19      	ble.n	801fd40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fd0c:	b22d      	sxth	r5, r5
 801fd0e:	9801      	ldr	r0, [sp, #4]
 801fd10:	fb0c 7505 	mla	r5, ip, r5, r7
 801fd14:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801fd18:	0e07      	lsrs	r7, r0, #24
 801fd1a:	2fff      	cmp	r7, #255	; 0xff
 801fd1c:	d116      	bne.n	801fd4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fd1e:	f06f 0501 	mvn.w	r5, #1
 801fd22:	fb05 f706 	mul.w	r7, r5, r6
 801fd26:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801fd2a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801fd2e:	0945      	lsrs	r5, r0, #5
 801fd30:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fd34:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fd38:	ea4c 0505 	orr.w	r5, ip, r5
 801fd3c:	4305      	orrs	r5, r0
 801fd3e:	53e5      	strh	r5, [r4, r7]
 801fd40:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fd42:	3e01      	subs	r6, #1
 801fd44:	4401      	add	r1, r0
 801fd46:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fd48:	4402      	add	r2, r0
 801fd4a:	e790      	b.n	801fc6e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd4c:	b2fd      	uxtb	r5, r7
 801fd4e:	2f00      	cmp	r7, #0
 801fd50:	d0f6      	beq.n	801fd40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fd52:	f06f 0701 	mvn.w	r7, #1
 801fd56:	fa1f f985 	uxth.w	r9, r5
 801fd5a:	43ed      	mvns	r5, r5
 801fd5c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fd60:	4377      	muls	r7, r6
 801fd62:	fb1a fa09 	smulbb	sl, sl, r9
 801fd66:	b2ed      	uxtb	r5, r5
 801fd68:	f834 e007 	ldrh.w	lr, [r4, r7]
 801fd6c:	9702      	str	r7, [sp, #8]
 801fd6e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801fd72:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fd76:	fb17 f709 	smulbb	r7, r7, r9
 801fd7a:	b2c0      	uxtb	r0, r0
 801fd7c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fd80:	fb10 f009 	smulbb	r0, r0, r9
 801fd84:	fb0c 7c05 	mla	ip, ip, r5, r7
 801fd88:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fd8c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fd90:	fa1f fc8c 	uxth.w	ip, ip
 801fd94:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fd98:	fa5f fe8e 	uxtb.w	lr, lr
 801fd9c:	fb07 a705 	mla	r7, r7, r5, sl
 801fda0:	fb0e 0005 	mla	r0, lr, r5, r0
 801fda4:	f10c 0501 	add.w	r5, ip, #1
 801fda8:	b2bf      	uxth	r7, r7
 801fdaa:	b280      	uxth	r0, r0
 801fdac:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fdb0:	f100 0a01 	add.w	sl, r0, #1
 801fdb4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fdb8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801fdbc:	9802      	ldr	r0, [sp, #8]
 801fdbe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fdc2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fdc6:	f107 0a01 	add.w	sl, r7, #1
 801fdca:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fdce:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fdd2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fdd6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fdda:	f824 c000 	strh.w	ip, [r4, r0]
 801fdde:	e7af      	b.n	801fd40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fde0:	f04f 0e00 	mov.w	lr, #0
 801fde4:	eba3 000e 	sub.w	r0, r3, lr
 801fde8:	2800      	cmp	r0, #0
 801fdea:	f77f af43 	ble.w	801fc74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fdee:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801fdf2:	140d      	asrs	r5, r1, #16
 801fdf4:	1410      	asrs	r0, r2, #16
 801fdf6:	fb06 5000 	mla	r0, r6, r0, r5
 801fdfa:	9d01      	ldr	r5, [sp, #4]
 801fdfc:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801fe00:	0e2e      	lsrs	r6, r5, #24
 801fe02:	2eff      	cmp	r6, #255	; 0xff
 801fe04:	d112      	bne.n	801fe2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801fe06:	482c      	ldr	r0, [pc, #176]	; (801feb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801fe08:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801fe0c:	0968      	lsrs	r0, r5, #5
 801fe0e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801fe12:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fe16:	4330      	orrs	r0, r6
 801fe18:	4328      	orrs	r0, r5
 801fe1a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801fe1e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fe20:	f10e 0e01 	add.w	lr, lr, #1
 801fe24:	4401      	add	r1, r0
 801fe26:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fe28:	4402      	add	r2, r0
 801fe2a:	e7db      	b.n	801fde4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fe2c:	b2f0      	uxtb	r0, r6
 801fe2e:	2e00      	cmp	r6, #0
 801fe30:	d0f5      	beq.n	801fe1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801fe32:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801fe36:	fa1f f980 	uxth.w	r9, r0
 801fe3a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fe3e:	43c0      	mvns	r0, r0
 801fe40:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fe44:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fe48:	fb16 f609 	smulbb	r6, r6, r9
 801fe4c:	b2c0      	uxtb	r0, r0
 801fe4e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fe52:	b2ed      	uxtb	r5, r5
 801fe54:	fb1a fa09 	smulbb	sl, sl, r9
 801fe58:	fb07 6700 	mla	r7, r7, r0, r6
 801fe5c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801fe60:	fb15 f509 	smulbb	r5, r5, r9
 801fe64:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fe68:	b2bf      	uxth	r7, r7
 801fe6a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fe6e:	fa5f fc8c 	uxtb.w	ip, ip
 801fe72:	fb06 a600 	mla	r6, r6, r0, sl
 801fe76:	fb0c 5500 	mla	r5, ip, r0, r5
 801fe7a:	1c78      	adds	r0, r7, #1
 801fe7c:	b2b6      	uxth	r6, r6
 801fe7e:	b2ad      	uxth	r5, r5
 801fe80:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801fe84:	f105 0a01 	add.w	sl, r5, #1
 801fe88:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fe8c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fe90:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fe94:	ea4a 0707 	orr.w	r7, sl, r7
 801fe98:	f106 0a01 	add.w	sl, r6, #1
 801fe9c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fea0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fea4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fea8:	ea47 070a 	orr.w	r7, r7, sl
 801feac:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801feb0:	e7b5      	b.n	801fe1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801feb2:	b005      	add	sp, #20
 801feb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801feb8:	fffff800 	.word	0xfffff800

0801febc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801febc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fec0:	b087      	sub	sp, #28
 801fec2:	468b      	mov	fp, r1
 801fec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fec8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801feca:	9203      	str	r2, [sp, #12]
 801fecc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fed0:	6841      	ldr	r1, [r0, #4]
 801fed2:	9204      	str	r2, [sp, #16]
 801fed4:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801fed8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801fedc:	fb01 2404 	mla	r4, r1, r4, r2
 801fee0:	6802      	ldr	r2, [r0, #0]
 801fee2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fee6:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801feea:	3201      	adds	r2, #1
 801feec:	f022 0201 	bic.w	r2, r2, #1
 801fef0:	9200      	str	r2, [sp, #0]
 801fef2:	f8d9 2000 	ldr.w	r2, [r9]
 801fef6:	9201      	str	r2, [sp, #4]
 801fef8:	f1bb 0f00 	cmp.w	fp, #0
 801fefc:	dc03      	bgt.n	801ff06 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fefe:	9a03      	ldr	r2, [sp, #12]
 801ff00:	2a00      	cmp	r2, #0
 801ff02:	f340 816a 	ble.w	80201da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ff06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ff08:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801ff0c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ff10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ff12:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ff16:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	dd0e      	ble.n	801ff3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ff1e:	1402      	asrs	r2, r0, #16
 801ff20:	d405      	bmi.n	801ff2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff22:	42ba      	cmp	r2, r7
 801ff24:	da03      	bge.n	801ff2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff26:	140a      	asrs	r2, r1, #16
 801ff28:	d401      	bmi.n	801ff2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff2a:	42b2      	cmp	r2, r6
 801ff2c:	db07      	blt.n	801ff3e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ff2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ff30:	3b01      	subs	r3, #1
 801ff32:	3402      	adds	r4, #2
 801ff34:	4410      	add	r0, r2
 801ff36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ff38:	4411      	add	r1, r2
 801ff3a:	e7ee      	b.n	801ff1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ff3c:	d017      	beq.n	801ff6e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ff3e:	1e5a      	subs	r2, r3, #1
 801ff40:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ff42:	fb05 0502 	mla	r5, r5, r2, r0
 801ff46:	142d      	asrs	r5, r5, #16
 801ff48:	d409      	bmi.n	801ff5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ff4a:	42bd      	cmp	r5, r7
 801ff4c:	da07      	bge.n	801ff5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ff4e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ff50:	fb05 1202 	mla	r2, r5, r2, r1
 801ff54:	1412      	asrs	r2, r2, #16
 801ff56:	d402      	bmi.n	801ff5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ff58:	42b2      	cmp	r2, r6
 801ff5a:	f2c0 80c8 	blt.w	80200ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801ff5e:	2700      	movs	r7, #0
 801ff60:	19da      	adds	r2, r3, r7
 801ff62:	2a00      	cmp	r2, #0
 801ff64:	dc3e      	bgt.n	801ffe4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ff66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff6a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ff6e:	f1bb 0f00 	cmp.w	fp, #0
 801ff72:	f340 8132 	ble.w	80201da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ff76:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff80:	f1bb 0b01 	subs.w	fp, fp, #1
 801ff84:	eeb0 6a62 	vmov.f32	s12, s5
 801ff88:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff8c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff90:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff94:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ff98:	eeb0 6a43 	vmov.f32	s12, s6
 801ff9c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ffa0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ffa4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ffa8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ffac:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ffb0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ffb4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ffb8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ffbc:	ee12 2a90 	vmov	r2, s5
 801ffc0:	eef0 2a47 	vmov.f32	s5, s14
 801ffc4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffc8:	ee13 2a10 	vmov	r2, s6
 801ffcc:	9313      	str	r3, [sp, #76]	; 0x4c
 801ffce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ffd0:	eeb0 3a67 	vmov.f32	s6, s15
 801ffd4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffd8:	9a03      	ldr	r2, [sp, #12]
 801ffda:	9314      	str	r3, [sp, #80]	; 0x50
 801ffdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ffde:	bf08      	it	eq
 801ffe0:	4613      	moveq	r3, r2
 801ffe2:	e789      	b.n	801fef8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ffe4:	1405      	asrs	r5, r0, #16
 801ffe6:	d436      	bmi.n	8020056 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ffe8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ffec:	42aa      	cmp	r2, r5
 801ffee:	dd32      	ble.n	8020056 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801fff0:	140e      	asrs	r6, r1, #16
 801fff2:	d430      	bmi.n	8020056 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801fff4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801fff8:	42b2      	cmp	r2, r6
 801fffa:	dd2c      	ble.n	8020056 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801fffc:	9a00      	ldr	r2, [sp, #0]
 801fffe:	fb06 5502 	mla	r5, r6, r2, r5
 8020002:	9e01      	ldr	r6, [sp, #4]
 8020004:	086a      	lsrs	r2, r5, #1
 8020006:	5cb2      	ldrb	r2, [r6, r2]
 8020008:	07ee      	lsls	r6, r5, #31
 802000a:	bf54      	ite	pl
 802000c:	f002 020f 	andpl.w	r2, r2, #15
 8020010:	1112      	asrmi	r2, r2, #4
 8020012:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020016:	b2d2      	uxtb	r2, r2
 8020018:	b1ea      	cbz	r2, 8020056 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802001a:	9d04      	ldr	r5, [sp, #16]
 802001c:	436a      	muls	r2, r5
 802001e:	1c55      	adds	r5, r2, #1
 8020020:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020024:	4d6e      	ldr	r5, [pc, #440]	; (80201e0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020026:	1212      	asrs	r2, r2, #8
 8020028:	682d      	ldr	r5, [r5, #0]
 802002a:	2aff      	cmp	r2, #255	; 0xff
 802002c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8020030:	9605      	str	r6, [sp, #20]
 8020032:	d116      	bne.n	8020062 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020034:	f06f 0201 	mvn.w	r2, #1
 8020038:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802003c:	fb02 fc07 	mul.w	ip, r2, r7
 8020040:	096a      	lsrs	r2, r5, #5
 8020042:	f026 0607 	bic.w	r6, r6, #7
 8020046:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802004a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802004e:	4316      	orrs	r6, r2
 8020050:	432e      	orrs	r6, r5
 8020052:	f824 600c 	strh.w	r6, [r4, ip]
 8020056:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020058:	3f01      	subs	r7, #1
 802005a:	4410      	add	r0, r2
 802005c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802005e:	4411      	add	r1, r2
 8020060:	e77e      	b.n	801ff60 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020062:	f06f 0601 	mvn.w	r6, #1
 8020066:	fa1f fa82 	uxth.w	sl, r2
 802006a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 802006e:	43d2      	mvns	r2, r2
 8020070:	437e      	muls	r6, r7
 8020072:	b2ed      	uxtb	r5, r5
 8020074:	fb1c fc0a 	smulbb	ip, ip, sl
 8020078:	b2d2      	uxtb	r2, r2
 802007a:	f834 8006 	ldrh.w	r8, [r4, r6]
 802007e:	fb15 f50a 	smulbb	r5, r5, sl
 8020082:	9602      	str	r6, [sp, #8]
 8020084:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020088:	f89d 6014 	ldrb.w	r6, [sp, #20]
 802008c:	fb16 f60a 	smulbb	r6, r6, sl
 8020090:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020094:	fb0e ce02 	mla	lr, lr, r2, ip
 8020098:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 802009c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80200a0:	fa1f fe8e 	uxth.w	lr, lr
 80200a4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80200a8:	fa5f f888 	uxtb.w	r8, r8
 80200ac:	fb0c 6c02 	mla	ip, ip, r2, r6
 80200b0:	fb08 5502 	mla	r5, r8, r2, r5
 80200b4:	f10e 0201 	add.w	r2, lr, #1
 80200b8:	fa1f fc8c 	uxth.w	ip, ip
 80200bc:	b2ad      	uxth	r5, r5
 80200be:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80200c2:	9a02      	ldr	r2, [sp, #8]
 80200c4:	1c6e      	adds	r6, r5, #1
 80200c6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80200ca:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80200ce:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80200d2:	ea46 0e0e 	orr.w	lr, r6, lr
 80200d6:	f10c 0601 	add.w	r6, ip, #1
 80200da:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80200de:	0976      	lsrs	r6, r6, #5
 80200e0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80200e4:	ea4e 0e06 	orr.w	lr, lr, r6
 80200e8:	f824 e002 	strh.w	lr, [r4, r2]
 80200ec:	e7b3      	b.n	8020056 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80200ee:	f04f 0800 	mov.w	r8, #0
 80200f2:	eba3 0208 	sub.w	r2, r3, r8
 80200f6:	2a00      	cmp	r2, #0
 80200f8:	f77f af35 	ble.w	801ff66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80200fc:	1402      	asrs	r2, r0, #16
 80200fe:	9e00      	ldr	r6, [sp, #0]
 8020100:	140d      	asrs	r5, r1, #16
 8020102:	fb06 2505 	mla	r5, r6, r5, r2
 8020106:	9e01      	ldr	r6, [sp, #4]
 8020108:	086a      	lsrs	r2, r5, #1
 802010a:	07ed      	lsls	r5, r5, #31
 802010c:	5cb2      	ldrb	r2, [r6, r2]
 802010e:	bf54      	ite	pl
 8020110:	f002 020f 	andpl.w	r2, r2, #15
 8020114:	1112      	asrmi	r2, r2, #4
 8020116:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802011a:	b2d2      	uxtb	r2, r2
 802011c:	b1c2      	cbz	r2, 8020150 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802011e:	9d04      	ldr	r5, [sp, #16]
 8020120:	436a      	muls	r2, r5
 8020122:	1c55      	adds	r5, r2, #1
 8020124:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020128:	4d2d      	ldr	r5, [pc, #180]	; (80201e0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802012a:	1212      	asrs	r2, r2, #8
 802012c:	682e      	ldr	r6, [r5, #0]
 802012e:	2aff      	cmp	r2, #255	; 0xff
 8020130:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8020134:	d113      	bne.n	802015e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020136:	0972      	lsrs	r2, r6, #5
 8020138:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 802013c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020140:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020144:	f025 0507 	bic.w	r5, r5, #7
 8020148:	4315      	orrs	r5, r2
 802014a:	4335      	orrs	r5, r6
 802014c:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8020150:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020152:	f108 0801 	add.w	r8, r8, #1
 8020156:	4410      	add	r0, r2
 8020158:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802015a:	4411      	add	r1, r2
 802015c:	e7c9      	b.n	80200f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802015e:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8020162:	fa1f fa82 	uxth.w	sl, r2
 8020166:	f3c6 4707 	ubfx	r7, r6, #16, #8
 802016a:	43d2      	mvns	r2, r2
 802016c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020170:	fb17 f70a 	smulbb	r7, r7, sl
 8020174:	b2d2      	uxtb	r2, r2
 8020176:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802017a:	b2f6      	uxtb	r6, r6
 802017c:	b2ed      	uxtb	r5, r5
 802017e:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020182:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020186:	fb16 f60a 	smulbb	r6, r6, sl
 802018a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802018e:	fa1f fc8c 	uxth.w	ip, ip
 8020192:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020196:	fb15 f50a 	smulbb	r5, r5, sl
 802019a:	fa5f fe8e 	uxtb.w	lr, lr
 802019e:	fb0e 6602 	mla	r6, lr, r2, r6
 80201a2:	fb07 5702 	mla	r7, r7, r2, r5
 80201a6:	f10c 0201 	add.w	r2, ip, #1
 80201aa:	b2b6      	uxth	r6, r6
 80201ac:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80201b0:	1c75      	adds	r5, r6, #1
 80201b2:	b2bf      	uxth	r7, r7
 80201b4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80201b8:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80201bc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80201c0:	ea45 0c0c 	orr.w	ip, r5, ip
 80201c4:	1c7d      	adds	r5, r7, #1
 80201c6:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80201ca:	096d      	lsrs	r5, r5, #5
 80201cc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80201d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80201d4:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80201d8:	e7ba      	b.n	8020150 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80201da:	b007      	add	sp, #28
 80201dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201e0:	2400af4c 	.word	0x2400af4c

080201e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201e8:	b087      	sub	sp, #28
 80201ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80201ee:	f8df 8308 	ldr.w	r8, [pc, #776]	; 80204f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80201f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80201f4:	9101      	str	r1, [sp, #4]
 80201f6:	9205      	str	r2, [sp, #20]
 80201f8:	6841      	ldr	r1, [r0, #4]
 80201fa:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80201fe:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020202:	fb01 2404 	mla	r4, r1, r4, r2
 8020206:	6802      	ldr	r2, [r0, #0]
 8020208:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802020c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020210:	3201      	adds	r2, #1
 8020212:	f022 0201 	bic.w	r2, r2, #1
 8020216:	9202      	str	r2, [sp, #8]
 8020218:	f8db 2000 	ldr.w	r2, [fp]
 802021c:	9203      	str	r2, [sp, #12]
 802021e:	9a01      	ldr	r2, [sp, #4]
 8020220:	2a00      	cmp	r2, #0
 8020222:	dc03      	bgt.n	802022c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020224:	9a05      	ldr	r2, [sp, #20]
 8020226:	2a00      	cmp	r2, #0
 8020228:	f340 8162 	ble.w	80204f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802022c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802022e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020232:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020236:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020238:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 802023c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020240:	2b00      	cmp	r3, #0
 8020242:	dd0e      	ble.n	8020262 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020244:	1402      	asrs	r2, r0, #16
 8020246:	d405      	bmi.n	8020254 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020248:	42ba      	cmp	r2, r7
 802024a:	da03      	bge.n	8020254 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802024c:	140a      	asrs	r2, r1, #16
 802024e:	d401      	bmi.n	8020254 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020250:	42b2      	cmp	r2, r6
 8020252:	db07      	blt.n	8020264 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020254:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020256:	3b01      	subs	r3, #1
 8020258:	3402      	adds	r4, #2
 802025a:	4410      	add	r0, r2
 802025c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802025e:	4411      	add	r1, r2
 8020260:	e7ee      	b.n	8020240 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020262:	d017      	beq.n	8020294 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020264:	1e5a      	subs	r2, r3, #1
 8020266:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020268:	fb05 0502 	mla	r5, r5, r2, r0
 802026c:	142d      	asrs	r5, r5, #16
 802026e:	d409      	bmi.n	8020284 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020270:	42bd      	cmp	r5, r7
 8020272:	da07      	bge.n	8020284 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020274:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020276:	fb05 1202 	mla	r2, r5, r2, r1
 802027a:	1412      	asrs	r2, r2, #16
 802027c:	d402      	bmi.n	8020284 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802027e:	42b2      	cmp	r2, r6
 8020280:	f2c0 80c3 	blt.w	802040a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8020284:	2500      	movs	r5, #0
 8020286:	195a      	adds	r2, r3, r5
 8020288:	2a00      	cmp	r2, #0
 802028a:	dc3f      	bgt.n	802030c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802028c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020290:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020294:	9b01      	ldr	r3, [sp, #4]
 8020296:	2b00      	cmp	r3, #0
 8020298:	f340 812a 	ble.w	80204f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802029c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80202a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80202a6:	eeb0 6a62 	vmov.f32	s12, s5
 80202aa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80202ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80202b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80202b6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80202ba:	eeb0 6a43 	vmov.f32	s12, s6
 80202be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80202c2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80202c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80202ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202de:	ee12 2a90 	vmov	r2, s5
 80202e2:	eef0 2a47 	vmov.f32	s5, s14
 80202e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80202ea:	ee13 2a10 	vmov	r2, s6
 80202ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80202f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202f2:	eeb0 3a67 	vmov.f32	s6, s15
 80202f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80202fa:	9314      	str	r3, [sp, #80]	; 0x50
 80202fc:	9b01      	ldr	r3, [sp, #4]
 80202fe:	9a05      	ldr	r2, [sp, #20]
 8020300:	3b01      	subs	r3, #1
 8020302:	9301      	str	r3, [sp, #4]
 8020304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020306:	bf08      	it	eq
 8020308:	4613      	moveq	r3, r2
 802030a:	e788      	b.n	802021e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802030c:	1406      	asrs	r6, r0, #16
 802030e:	d42c      	bmi.n	802036a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020310:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020314:	42b2      	cmp	r2, r6
 8020316:	dd28      	ble.n	802036a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020318:	140f      	asrs	r7, r1, #16
 802031a:	d426      	bmi.n	802036a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802031c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020320:	42ba      	cmp	r2, r7
 8020322:	dd22      	ble.n	802036a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020324:	9a02      	ldr	r2, [sp, #8]
 8020326:	fb07 6602 	mla	r6, r7, r2, r6
 802032a:	9f03      	ldr	r7, [sp, #12]
 802032c:	0872      	lsrs	r2, r6, #1
 802032e:	07f6      	lsls	r6, r6, #31
 8020330:	5cba      	ldrb	r2, [r7, r2]
 8020332:	bf54      	ite	pl
 8020334:	f002 020f 	andpl.w	r2, r2, #15
 8020338:	1112      	asrmi	r2, r2, #4
 802033a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802033e:	b2d2      	uxtb	r2, r2
 8020340:	2aff      	cmp	r2, #255	; 0xff
 8020342:	d118      	bne.n	8020376 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020344:	f06f 0601 	mvn.w	r6, #1
 8020348:	f8d8 2000 	ldr.w	r2, [r8]
 802034c:	fb06 f705 	mul.w	r7, r6, r5
 8020350:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8020354:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8020358:	0956      	lsrs	r6, r2, #5
 802035a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802035e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020362:	ea4c 0606 	orr.w	r6, ip, r6
 8020366:	4316      	orrs	r6, r2
 8020368:	53e6      	strh	r6, [r4, r7]
 802036a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802036c:	3d01      	subs	r5, #1
 802036e:	4410      	add	r0, r2
 8020370:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020372:	4411      	add	r1, r2
 8020374:	e787      	b.n	8020286 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020376:	2a00      	cmp	r2, #0
 8020378:	d0f7      	beq.n	802036a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802037a:	f06f 0601 	mvn.w	r6, #1
 802037e:	f8d8 c000 	ldr.w	ip, [r8]
 8020382:	fa1f f982 	uxth.w	r9, r2
 8020386:	43d2      	mvns	r2, r2
 8020388:	436e      	muls	r6, r5
 802038a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 802038e:	b2d2      	uxtb	r2, r2
 8020390:	f834 e006 	ldrh.w	lr, [r4, r6]
 8020394:	fb1a fa09 	smulbb	sl, sl, r9
 8020398:	9604      	str	r6, [sp, #16]
 802039a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 802039e:	ea4f 272e 	mov.w	r7, lr, asr #8
 80203a2:	fb16 f609 	smulbb	r6, r6, r9
 80203a6:	fa5f fc8c 	uxtb.w	ip, ip
 80203aa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80203ae:	fb1c fc09 	smulbb	ip, ip, r9
 80203b2:	fb07 6702 	mla	r7, r7, r2, r6
 80203b6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80203ba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80203be:	b2bf      	uxth	r7, r7
 80203c0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80203c4:	fa5f fe8e 	uxtb.w	lr, lr
 80203c8:	fb06 a602 	mla	r6, r6, r2, sl
 80203cc:	fb0e cc02 	mla	ip, lr, r2, ip
 80203d0:	1c7a      	adds	r2, r7, #1
 80203d2:	b2b6      	uxth	r6, r6
 80203d4:	fa1f fc8c 	uxth.w	ip, ip
 80203d8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80203dc:	9a04      	ldr	r2, [sp, #16]
 80203de:	f10c 0a01 	add.w	sl, ip, #1
 80203e2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80203e6:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80203ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80203ee:	ea4a 0707 	orr.w	r7, sl, r7
 80203f2:	f106 0a01 	add.w	sl, r6, #1
 80203f6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80203fa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80203fe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020402:	ea47 070a 	orr.w	r7, r7, sl
 8020406:	52a7      	strh	r7, [r4, r2]
 8020408:	e7af      	b.n	802036a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802040a:	f04f 0e00 	mov.w	lr, #0
 802040e:	eba3 020e 	sub.w	r2, r3, lr
 8020412:	2a00      	cmp	r2, #0
 8020414:	f77f af3a 	ble.w	802028c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020418:	1402      	asrs	r2, r0, #16
 802041a:	9e02      	ldr	r6, [sp, #8]
 802041c:	140d      	asrs	r5, r1, #16
 802041e:	fb06 2505 	mla	r5, r6, r5, r2
 8020422:	9e03      	ldr	r6, [sp, #12]
 8020424:	086a      	lsrs	r2, r5, #1
 8020426:	07ed      	lsls	r5, r5, #31
 8020428:	5cb2      	ldrb	r2, [r6, r2]
 802042a:	bf54      	ite	pl
 802042c:	f002 020f 	andpl.w	r2, r2, #15
 8020430:	1112      	asrmi	r2, r2, #4
 8020432:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020436:	b2d2      	uxtb	r2, r2
 8020438:	2aff      	cmp	r2, #255	; 0xff
 802043a:	d115      	bne.n	8020468 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802043c:	f8d8 5000 	ldr.w	r5, [r8]
 8020440:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8020444:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8020448:	096a      	lsrs	r2, r5, #5
 802044a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802044e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020452:	4332      	orrs	r2, r6
 8020454:	432a      	orrs	r2, r5
 8020456:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802045a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802045c:	f10e 0e01 	add.w	lr, lr, #1
 8020460:	4410      	add	r0, r2
 8020462:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020464:	4411      	add	r1, r2
 8020466:	e7d2      	b.n	802040e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020468:	2a00      	cmp	r2, #0
 802046a:	d0f6      	beq.n	802045a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802046c:	f8d8 7000 	ldr.w	r7, [r8]
 8020470:	fa1f f982 	uxth.w	r9, r2
 8020474:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020478:	43d2      	mvns	r2, r2
 802047a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 802047e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020482:	ea4f 262c 	mov.w	r6, ip, asr #8
 8020486:	fb15 f509 	smulbb	r5, r5, r9
 802048a:	b2d2      	uxtb	r2, r2
 802048c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020490:	b2ff      	uxtb	r7, r7
 8020492:	fb1a fa09 	smulbb	sl, sl, r9
 8020496:	fb06 5602 	mla	r6, r6, r2, r5
 802049a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802049e:	fb17 f709 	smulbb	r7, r7, r9
 80204a2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80204a6:	b2b6      	uxth	r6, r6
 80204a8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80204ac:	fa5f fc8c 	uxtb.w	ip, ip
 80204b0:	fb05 a502 	mla	r5, r5, r2, sl
 80204b4:	fb0c 7702 	mla	r7, ip, r2, r7
 80204b8:	1c72      	adds	r2, r6, #1
 80204ba:	b2ad      	uxth	r5, r5
 80204bc:	b2bf      	uxth	r7, r7
 80204be:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80204c2:	f107 0a01 	add.w	sl, r7, #1
 80204c6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80204ca:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80204ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80204d2:	ea4a 0606 	orr.w	r6, sl, r6
 80204d6:	f105 0a01 	add.w	sl, r5, #1
 80204da:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80204de:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80204e2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80204e6:	ea46 060a 	orr.w	r6, r6, sl
 80204ea:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80204ee:	e7b4      	b.n	802045a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80204f0:	b007      	add	sp, #28
 80204f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204f6:	bf00      	nop
 80204f8:	2400af4c 	.word	0x2400af4c

080204fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80204fc:	4770      	bx	lr

080204fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80204fe:	4770      	bx	lr

08020500 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020500:	4770      	bx	lr

08020502 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020502:	4770      	bx	lr

08020504 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020504:	4770      	bx	lr

08020506 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020506:	4770      	bx	lr

08020508 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020508:	4770      	bx	lr

0802050a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802050a:	4770      	bx	lr

0802050c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802050c:	4770      	bx	lr

0802050e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 802050e:	4770      	bx	lr

08020510 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020510:	4770      	bx	lr

08020512 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020512:	4770      	bx	lr

08020514 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020514:	4770      	bx	lr

08020516 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020516:	4770      	bx	lr

08020518 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020518:	4770      	bx	lr

0802051a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802051a:	4770      	bx	lr

0802051c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802051c:	4770      	bx	lr

0802051e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802051e:	4770      	bx	lr

08020520 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020520:	4770      	bx	lr

08020522 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020522:	4770      	bx	lr

08020524 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020524:	4770      	bx	lr

08020526 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020526:	4770      	bx	lr

08020528 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020528:	4770      	bx	lr

0802052a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802052a:	4770      	bx	lr

0802052c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802052c:	4770      	bx	lr

0802052e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 802052e:	4770      	bx	lr

08020530 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020530:	4770      	bx	lr

08020532 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020532:	4770      	bx	lr

08020534 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8020534:	b508      	push	{r3, lr}
 8020536:	4b06      	ldr	r3, [pc, #24]	; (8020550 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8020538:	8818      	ldrh	r0, [r3, #0]
 802053a:	b928      	cbnz	r0, 8020548 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 802053c:	4b05      	ldr	r3, [pc, #20]	; (8020554 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 802053e:	2150      	movs	r1, #80	; 0x50
 8020540:	4a05      	ldr	r2, [pc, #20]	; (8020558 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8020542:	4806      	ldr	r0, [pc, #24]	; (802055c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8020544:	f009 fbd4 	bl	8029cf0 <__assert_func>
 8020548:	0040      	lsls	r0, r0, #1
 802054a:	b280      	uxth	r0, r0
 802054c:	bd08      	pop	{r3, pc}
 802054e:	bf00      	nop
 8020550:	2400af3e 	.word	0x2400af3e
 8020554:	0802e3ab 	.word	0x0802e3ab
 8020558:	0802e9a4 	.word	0x0802e9a4
 802055c:	0802e3ed 	.word	0x0802e3ed

08020560 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020564:	b08b      	sub	sp, #44	; 0x2c
 8020566:	460f      	mov	r7, r1
 8020568:	4616      	mov	r6, r2
 802056a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 802056e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8020572:	f1bb 0f00 	cmp.w	fp, #0
 8020576:	d049      	beq.n	802060c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020578:	6810      	ldr	r0, [r2, #0]
 802057a:	ad06      	add	r5, sp, #24
 802057c:	6851      	ldr	r1, [r2, #4]
 802057e:	c503      	stmia	r5!, {r0, r1}
 8020580:	6818      	ldr	r0, [r3, #0]
 8020582:	ad08      	add	r5, sp, #32
 8020584:	6859      	ldr	r1, [r3, #4]
 8020586:	c503      	stmia	r5!, {r0, r1}
 8020588:	a806      	add	r0, sp, #24
 802058a:	f7fa fd13 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802058e:	4631      	mov	r1, r6
 8020590:	a808      	add	r0, sp, #32
 8020592:	f7fa fd37 	bl	801b004 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020596:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802059a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802059e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80205a2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80205a6:	fb16 2103 	smlabb	r1, r6, r3, r2
 80205aa:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80205ae:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80205b2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80205b6:	4f5f      	ldr	r7, [pc, #380]	; (8020734 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80205b8:	440a      	add	r2, r1
 80205ba:	6838      	ldr	r0, [r7, #0]
 80205bc:	46b9      	mov	r9, r7
 80205be:	f8ad 2020 	strh.w	r2, [sp, #32]
 80205c2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80205c6:	4413      	add	r3, r2
 80205c8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80205cc:	6803      	ldr	r3, [r0, #0]
 80205ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80205d0:	4798      	blx	r3
 80205d2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80205d6:	d01c      	beq.n	8020612 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80205d8:	f010 0f04 	tst.w	r0, #4
 80205dc:	d01d      	beq.n	802061a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80205de:	f8d9 0000 	ldr.w	r0, [r9]
 80205e2:	2700      	movs	r7, #0
 80205e4:	b2ad      	uxth	r5, r5
 80205e6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80205ea:	6801      	ldr	r1, [r0, #0]
 80205ec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80205f0:	f8cd b00c 	str.w	fp, [sp, #12]
 80205f4:	9501      	str	r5, [sp, #4]
 80205f6:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80205fa:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80205fe:	9402      	str	r4, [sp, #8]
 8020600:	fa1f f488 	uxth.w	r4, r8
 8020604:	9400      	str	r4, [sp, #0]
 8020606:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8020608:	4631      	mov	r1, r6
 802060a:	47a0      	blx	r4
 802060c:	b00b      	add	sp, #44	; 0x2c
 802060e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020612:	b914      	cbnz	r4, 802061a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8020614:	f010 0f01 	tst.w	r0, #1
 8020618:	e7e0      	b.n	80205dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 802061a:	f8d9 0000 	ldr.w	r0, [r9]
 802061e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8020622:	6803      	ldr	r3, [r0, #0]
 8020624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020626:	4798      	blx	r3
 8020628:	4b43      	ldr	r3, [pc, #268]	; (8020738 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802062a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 802062e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020632:	881a      	ldrh	r2, [r3, #0]
 8020634:	469a      	mov	sl, r3
 8020636:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802063a:	fb05 f502 	mul.w	r5, r5, r2
 802063e:	fb02 1404 	mla	r4, r2, r4, r1
 8020642:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020646:	d059      	beq.n	80206fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8020648:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 802064c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020650:	fa1f f28b 	uxth.w	r2, fp
 8020654:	469e      	mov	lr, r3
 8020656:	fa1f f989 	uxth.w	r9, r9
 802065a:	42ac      	cmp	r4, r5
 802065c:	d264      	bcs.n	8020728 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802065e:	eb04 0a07 	add.w	sl, r4, r7
 8020662:	4554      	cmp	r4, sl
 8020664:	d23d      	bcs.n	80206e2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8020666:	8821      	ldrh	r1, [r4, #0]
 8020668:	f836 3b02 	ldrh.w	r3, [r6], #2
 802066c:	1208      	asrs	r0, r1, #8
 802066e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020672:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020676:	ea4f 0be1 	mov.w	fp, r1, asr #3
 802067a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802067e:	00c9      	lsls	r1, r1, #3
 8020680:	fb10 f009 	smulbb	r0, r0, r9
 8020684:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020688:	b2c9      	uxtb	r1, r1
 802068a:	fb0c 0c02 	mla	ip, ip, r2, r0
 802068e:	10d8      	asrs	r0, r3, #3
 8020690:	fb1b fb09 	smulbb	fp, fp, r9
 8020694:	00db      	lsls	r3, r3, #3
 8020696:	fa1f fc8c 	uxth.w	ip, ip
 802069a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802069e:	fb11 f109 	smulbb	r1, r1, r9
 80206a2:	b2db      	uxtb	r3, r3
 80206a4:	fb00 b002 	mla	r0, r0, r2, fp
 80206a8:	f10c 0b01 	add.w	fp, ip, #1
 80206ac:	fb03 1302 	mla	r3, r3, r2, r1
 80206b0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80206b4:	b29b      	uxth	r3, r3
 80206b6:	b280      	uxth	r0, r0
 80206b8:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80206bc:	f103 0c01 	add.w	ip, r3, #1
 80206c0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80206c4:	1c43      	adds	r3, r0, #1
 80206c6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80206ca:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80206ce:	0940      	lsrs	r0, r0, #5
 80206d0:	ea4c 0c0b 	orr.w	ip, ip, fp
 80206d4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80206d8:	ea4c 0c00 	orr.w	ip, ip, r0
 80206dc:	f824 cb02 	strh.w	ip, [r4], #2
 80206e0:	e7bf      	b.n	8020662 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80206e2:	f8be 3000 	ldrh.w	r3, [lr]
 80206e6:	eba3 0308 	sub.w	r3, r3, r8
 80206ea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80206ee:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80206f2:	eba3 0308 	sub.w	r3, r3, r8
 80206f6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80206fa:	e7ae      	b.n	802065a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80206fc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020700:	f8d9 0000 	ldr.w	r0, [r9]
 8020704:	42ac      	cmp	r4, r5
 8020706:	6803      	ldr	r3, [r0, #0]
 8020708:	d20e      	bcs.n	8020728 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802070a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 802070e:	4632      	mov	r2, r6
 8020710:	463b      	mov	r3, r7
 8020712:	4621      	mov	r1, r4
 8020714:	47c0      	blx	r8
 8020716:	f8ba 3000 	ldrh.w	r3, [sl]
 802071a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802071e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020722:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020726:	e7eb      	b.n	8020700 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8020728:	4b02      	ldr	r3, [pc, #8]	; (8020734 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802072a:	6818      	ldr	r0, [r3, #0]
 802072c:	6803      	ldr	r3, [r0, #0]
 802072e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020730:	4798      	blx	r3
 8020732:	e76b      	b.n	802060c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020734:	2400af44 	.word	0x2400af44
 8020738:	2400af3e 	.word	0x2400af3e

0802073c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802073c:	b510      	push	{r4, lr}
 802073e:	4604      	mov	r4, r0
 8020740:	2104      	movs	r1, #4
 8020742:	f009 faa6 	bl	8029c92 <_ZdlPvj>
 8020746:	4620      	mov	r0, r4
 8020748:	bd10      	pop	{r4, pc}

0802074a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802074a:	b510      	push	{r4, lr}
 802074c:	4604      	mov	r4, r0
 802074e:	2104      	movs	r1, #4
 8020750:	f009 fa9f 	bl	8029c92 <_ZdlPvj>
 8020754:	4620      	mov	r0, r4
 8020756:	bd10      	pop	{r4, pc}

08020758 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020758:	b510      	push	{r4, lr}
 802075a:	4604      	mov	r4, r0
 802075c:	2104      	movs	r1, #4
 802075e:	f009 fa98 	bl	8029c92 <_ZdlPvj>
 8020762:	4620      	mov	r0, r4
 8020764:	bd10      	pop	{r4, pc}

08020766 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020766:	b510      	push	{r4, lr}
 8020768:	4604      	mov	r4, r0
 802076a:	2104      	movs	r1, #4
 802076c:	f009 fa91 	bl	8029c92 <_ZdlPvj>
 8020770:	4620      	mov	r0, r4
 8020772:	bd10      	pop	{r4, pc}

08020774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020774:	b510      	push	{r4, lr}
 8020776:	4604      	mov	r4, r0
 8020778:	2104      	movs	r1, #4
 802077a:	f009 fa8a 	bl	8029c92 <_ZdlPvj>
 802077e:	4620      	mov	r0, r4
 8020780:	bd10      	pop	{r4, pc}

08020782 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020782:	b510      	push	{r4, lr}
 8020784:	4604      	mov	r4, r0
 8020786:	2104      	movs	r1, #4
 8020788:	f009 fa83 	bl	8029c92 <_ZdlPvj>
 802078c:	4620      	mov	r0, r4
 802078e:	bd10      	pop	{r4, pc}

08020790 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020790:	b510      	push	{r4, lr}
 8020792:	4604      	mov	r4, r0
 8020794:	2104      	movs	r1, #4
 8020796:	f009 fa7c 	bl	8029c92 <_ZdlPvj>
 802079a:	4620      	mov	r0, r4
 802079c:	bd10      	pop	{r4, pc}

0802079e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802079e:	b510      	push	{r4, lr}
 80207a0:	4604      	mov	r4, r0
 80207a2:	2104      	movs	r1, #4
 80207a4:	f009 fa75 	bl	8029c92 <_ZdlPvj>
 80207a8:	4620      	mov	r0, r4
 80207aa:	bd10      	pop	{r4, pc}

080207ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80207ac:	b510      	push	{r4, lr}
 80207ae:	4604      	mov	r4, r0
 80207b0:	2104      	movs	r1, #4
 80207b2:	f009 fa6e 	bl	8029c92 <_ZdlPvj>
 80207b6:	4620      	mov	r0, r4
 80207b8:	bd10      	pop	{r4, pc}

080207ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80207ba:	b510      	push	{r4, lr}
 80207bc:	4604      	mov	r4, r0
 80207be:	2104      	movs	r1, #4
 80207c0:	f009 fa67 	bl	8029c92 <_ZdlPvj>
 80207c4:	4620      	mov	r0, r4
 80207c6:	bd10      	pop	{r4, pc}

080207c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80207c8:	b510      	push	{r4, lr}
 80207ca:	4604      	mov	r4, r0
 80207cc:	2104      	movs	r1, #4
 80207ce:	f009 fa60 	bl	8029c92 <_ZdlPvj>
 80207d2:	4620      	mov	r0, r4
 80207d4:	bd10      	pop	{r4, pc}

080207d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80207d6:	b510      	push	{r4, lr}
 80207d8:	4604      	mov	r4, r0
 80207da:	2104      	movs	r1, #4
 80207dc:	f009 fa59 	bl	8029c92 <_ZdlPvj>
 80207e0:	4620      	mov	r0, r4
 80207e2:	bd10      	pop	{r4, pc}

080207e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80207e4:	b510      	push	{r4, lr}
 80207e6:	4604      	mov	r4, r0
 80207e8:	2104      	movs	r1, #4
 80207ea:	f009 fa52 	bl	8029c92 <_ZdlPvj>
 80207ee:	4620      	mov	r0, r4
 80207f0:	bd10      	pop	{r4, pc}

080207f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80207f2:	b510      	push	{r4, lr}
 80207f4:	4604      	mov	r4, r0
 80207f6:	2104      	movs	r1, #4
 80207f8:	f009 fa4b 	bl	8029c92 <_ZdlPvj>
 80207fc:	4620      	mov	r0, r4
 80207fe:	bd10      	pop	{r4, pc}

08020800 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020800:	b510      	push	{r4, lr}
 8020802:	4604      	mov	r4, r0
 8020804:	2104      	movs	r1, #4
 8020806:	f009 fa44 	bl	8029c92 <_ZdlPvj>
 802080a:	4620      	mov	r0, r4
 802080c:	bd10      	pop	{r4, pc}

0802080e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802080e:	b510      	push	{r4, lr}
 8020810:	4604      	mov	r4, r0
 8020812:	2104      	movs	r1, #4
 8020814:	f009 fa3d 	bl	8029c92 <_ZdlPvj>
 8020818:	4620      	mov	r0, r4
 802081a:	bd10      	pop	{r4, pc}

0802081c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 802081c:	b510      	push	{r4, lr}
 802081e:	4604      	mov	r4, r0
 8020820:	2104      	movs	r1, #4
 8020822:	f009 fa36 	bl	8029c92 <_ZdlPvj>
 8020826:	4620      	mov	r0, r4
 8020828:	bd10      	pop	{r4, pc}

0802082a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802082a:	b510      	push	{r4, lr}
 802082c:	4604      	mov	r4, r0
 802082e:	2104      	movs	r1, #4
 8020830:	f009 fa2f 	bl	8029c92 <_ZdlPvj>
 8020834:	4620      	mov	r0, r4
 8020836:	bd10      	pop	{r4, pc}

08020838 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020838:	b510      	push	{r4, lr}
 802083a:	4604      	mov	r4, r0
 802083c:	2104      	movs	r1, #4
 802083e:	f009 fa28 	bl	8029c92 <_ZdlPvj>
 8020842:	4620      	mov	r0, r4
 8020844:	bd10      	pop	{r4, pc}

08020846 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020846:	b510      	push	{r4, lr}
 8020848:	4604      	mov	r4, r0
 802084a:	2104      	movs	r1, #4
 802084c:	f009 fa21 	bl	8029c92 <_ZdlPvj>
 8020850:	4620      	mov	r0, r4
 8020852:	bd10      	pop	{r4, pc}

08020854 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020854:	b510      	push	{r4, lr}
 8020856:	4604      	mov	r4, r0
 8020858:	2104      	movs	r1, #4
 802085a:	f009 fa1a 	bl	8029c92 <_ZdlPvj>
 802085e:	4620      	mov	r0, r4
 8020860:	bd10      	pop	{r4, pc}

08020862 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020862:	b510      	push	{r4, lr}
 8020864:	4604      	mov	r4, r0
 8020866:	2104      	movs	r1, #4
 8020868:	f009 fa13 	bl	8029c92 <_ZdlPvj>
 802086c:	4620      	mov	r0, r4
 802086e:	bd10      	pop	{r4, pc}

08020870 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020870:	b510      	push	{r4, lr}
 8020872:	4604      	mov	r4, r0
 8020874:	2104      	movs	r1, #4
 8020876:	f009 fa0c 	bl	8029c92 <_ZdlPvj>
 802087a:	4620      	mov	r0, r4
 802087c:	bd10      	pop	{r4, pc}

0802087e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802087e:	b510      	push	{r4, lr}
 8020880:	4604      	mov	r4, r0
 8020882:	2104      	movs	r1, #4
 8020884:	f009 fa05 	bl	8029c92 <_ZdlPvj>
 8020888:	4620      	mov	r0, r4
 802088a:	bd10      	pop	{r4, pc}

0802088c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 802088c:	b510      	push	{r4, lr}
 802088e:	4604      	mov	r4, r0
 8020890:	2104      	movs	r1, #4
 8020892:	f009 f9fe 	bl	8029c92 <_ZdlPvj>
 8020896:	4620      	mov	r0, r4
 8020898:	bd10      	pop	{r4, pc}

0802089a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 802089a:	b510      	push	{r4, lr}
 802089c:	4604      	mov	r4, r0
 802089e:	2104      	movs	r1, #4
 80208a0:	f009 f9f7 	bl	8029c92 <_ZdlPvj>
 80208a4:	4620      	mov	r0, r4
 80208a6:	bd10      	pop	{r4, pc}

080208a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80208a8:	b510      	push	{r4, lr}
 80208aa:	4604      	mov	r4, r0
 80208ac:	2104      	movs	r1, #4
 80208ae:	f009 f9f0 	bl	8029c92 <_ZdlPvj>
 80208b2:	4620      	mov	r0, r4
 80208b4:	bd10      	pop	{r4, pc}

080208b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80208b6:	b510      	push	{r4, lr}
 80208b8:	4604      	mov	r4, r0
 80208ba:	2104      	movs	r1, #4
 80208bc:	f009 f9e9 	bl	8029c92 <_ZdlPvj>
 80208c0:	4620      	mov	r0, r4
 80208c2:	bd10      	pop	{r4, pc}

080208c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80208c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80208c6:	4606      	mov	r6, r0
 80208c8:	b087      	sub	sp, #28
 80208ca:	460c      	mov	r4, r1
 80208cc:	4617      	mov	r7, r2
 80208ce:	461d      	mov	r5, r3
 80208d0:	b333      	cbz	r3, 8020920 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80208d2:	4608      	mov	r0, r1
 80208d4:	f7f6 fe15 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 80208d8:	bb10      	cbnz	r0, 8020920 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80208da:	6820      	ldr	r0, [r4, #0]
 80208dc:	ab04      	add	r3, sp, #16
 80208de:	6861      	ldr	r1, [r4, #4]
 80208e0:	4c1b      	ldr	r4, [pc, #108]	; (8020950 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80208e2:	c303      	stmia	r3!, {r0, r1}
 80208e4:	a804      	add	r0, sp, #16
 80208e6:	f7fa fb65 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80208ea:	6820      	ldr	r0, [r4, #0]
 80208ec:	6803      	ldr	r3, [r0, #0]
 80208ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80208f0:	4798      	blx	r3
 80208f2:	2dff      	cmp	r5, #255	; 0xff
 80208f4:	d016      	beq.n	8020924 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80208f6:	f010 0f08 	tst.w	r0, #8
 80208fa:	6820      	ldr	r0, [r4, #0]
 80208fc:	d015      	beq.n	802092a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80208fe:	2400      	movs	r4, #0
 8020900:	6801      	ldr	r1, [r0, #0]
 8020902:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020906:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802090a:	e9cd 5402 	strd	r5, r4, [sp, #8]
 802090e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020912:	9401      	str	r4, [sp, #4]
 8020914:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020918:	9400      	str	r4, [sp, #0]
 802091a:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 802091c:	4639      	mov	r1, r7
 802091e:	47a0      	blx	r4
 8020920:	b007      	add	sp, #28
 8020922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020924:	f010 0f02 	tst.w	r0, #2
 8020928:	e7e7      	b.n	80208fa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 802092a:	6803      	ldr	r3, [r0, #0]
 802092c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802092e:	4798      	blx	r3
 8020930:	4b08      	ldr	r3, [pc, #32]	; (8020954 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020932:	4601      	mov	r1, r0
 8020934:	4630      	mov	r0, r6
 8020936:	881a      	ldrh	r2, [r3, #0]
 8020938:	6833      	ldr	r3, [r6, #0]
 802093a:	e9cd 7500 	strd	r7, r5, [sp]
 802093e:	69dd      	ldr	r5, [r3, #28]
 8020940:	ab04      	add	r3, sp, #16
 8020942:	47a8      	blx	r5
 8020944:	6820      	ldr	r0, [r4, #0]
 8020946:	6803      	ldr	r3, [r0, #0]
 8020948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802094a:	4798      	blx	r3
 802094c:	e7e8      	b.n	8020920 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802094e:	bf00      	nop
 8020950:	2400af44 	.word	0x2400af44
 8020954:	2400af3e 	.word	0x2400af3e

08020958 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802095c:	4f97      	ldr	r7, [pc, #604]	; (8020bbc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 802095e:	4616      	mov	r6, r2
 8020960:	b08f      	sub	sp, #60	; 0x3c
 8020962:	4604      	mov	r4, r0
 8020964:	683a      	ldr	r2, [r7, #0]
 8020966:	4689      	mov	r9, r1
 8020968:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 802096c:	2a02      	cmp	r2, #2
 802096e:	d106      	bne.n	802097e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8020970:	4b93      	ldr	r3, [pc, #588]	; (8020bc0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8020972:	f44f 7159 	mov.w	r1, #868	; 0x364
 8020976:	4a93      	ldr	r2, [pc, #588]	; (8020bc4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020978:	4893      	ldr	r0, [pc, #588]	; (8020bc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 802097a:	f009 f9b9 	bl	8029cf0 <__assert_func>
 802097e:	ad0e      	add	r5, sp, #56	; 0x38
 8020980:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8020984:	4628      	mov	r0, r5
 8020986:	f7fd fad3 	bl	801df30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802098a:	6823      	ldr	r3, [r4, #0]
 802098c:	4680      	mov	r8, r0
 802098e:	4620      	mov	r0, r4
 8020990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020992:	4798      	blx	r3
 8020994:	4580      	cmp	r8, r0
 8020996:	d004      	beq.n	80209a2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8020998:	4b8c      	ldr	r3, [pc, #560]	; (8020bcc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 802099a:	f240 3166 	movw	r1, #870	; 0x366
 802099e:	4a89      	ldr	r2, [pc, #548]	; (8020bc4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80209a0:	e7ea      	b.n	8020978 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80209a2:	4628      	mov	r0, r5
 80209a4:	f7fd fa3a 	bl	801de1c <_ZNK8touchgfx6Bitmap7getDataEv>
 80209a8:	4680      	mov	r8, r0
 80209aa:	b920      	cbnz	r0, 80209b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 80209ac:	4b88      	ldr	r3, [pc, #544]	; (8020bd0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 80209ae:	f44f 715a 	mov.w	r1, #872	; 0x368
 80209b2:	4a84      	ldr	r2, [pc, #528]	; (8020bc4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80209b4:	e7e0      	b.n	8020978 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80209b6:	6830      	ldr	r0, [r6, #0]
 80209b8:	ab06      	add	r3, sp, #24
 80209ba:	6871      	ldr	r1, [r6, #4]
 80209bc:	f10d 0b20 	add.w	fp, sp, #32
 80209c0:	f9b6 a000 	ldrsh.w	sl, [r6]
 80209c4:	c303      	stmia	r3!, {r0, r1}
 80209c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80209ca:	ab08      	add	r3, sp, #32
 80209cc:	f8d9 0000 	ldr.w	r0, [r9]
 80209d0:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80209d4:	c303      	stmia	r3!, {r0, r1}
 80209d6:	4628      	mov	r0, r5
 80209d8:	f7fd f918 	bl	801dc0c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80209dc:	4606      	mov	r6, r0
 80209de:	4628      	mov	r0, r5
 80209e0:	4d7c      	ldr	r5, [pc, #496]	; (8020bd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80209e2:	f7fd f94d 	bl	801dc80 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80209e6:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80209ea:	a806      	add	r0, sp, #24
 80209ec:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80209f0:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80209f4:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 80209f8:	f7fa fadc 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80209fc:	4658      	mov	r0, fp
 80209fe:	f7fa fad9 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a02:	a80a      	add	r0, sp, #40	; 0x28
 8020a04:	f7fa fad6 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a08:	4b73      	ldr	r3, [pc, #460]	; (8020bd8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8020a0a:	2100      	movs	r1, #0
 8020a0c:	f9b5 2000 	ldrsh.w	r2, [r5]
 8020a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020a14:	4658      	mov	r0, fp
 8020a16:	910c      	str	r1, [sp, #48]	; 0x30
 8020a18:	a90c      	add	r1, sp, #48	; 0x30
 8020a1a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8020a1e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020a22:	f7f6 fd2b 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 8020a26:	4658      	mov	r0, fp
 8020a28:	f7f6 fd6b 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020a2c:	2800      	cmp	r0, #0
 8020a2e:	f040 809a 	bne.w	8020b66 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020a32:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8020a36:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8020a3a:	4288      	cmp	r0, r1
 8020a3c:	db38      	blt.n	8020ab0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020a3e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8020a42:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8020a46:	429a      	cmp	r2, r3
 8020a48:	db32      	blt.n	8020ab0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020a4a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8020a4e:	4430      	add	r0, r6
 8020a50:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020a54:	4431      	add	r1, r6
 8020a56:	b200      	sxth	r0, r0
 8020a58:	b209      	sxth	r1, r1
 8020a5a:	4288      	cmp	r0, r1
 8020a5c:	dc28      	bgt.n	8020ab0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020a5e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8020a62:	440a      	add	r2, r1
 8020a64:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8020a68:	440b      	add	r3, r1
 8020a6a:	b212      	sxth	r2, r2
 8020a6c:	b21b      	sxth	r3, r3
 8020a6e:	429a      	cmp	r2, r3
 8020a70:	dc1e      	bgt.n	8020ab0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020a72:	6823      	ldr	r3, [r4, #0]
 8020a74:	4620      	mov	r0, r4
 8020a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a78:	4798      	blx	r3
 8020a7a:	4682      	mov	sl, r0
 8020a7c:	6838      	ldr	r0, [r7, #0]
 8020a7e:	6803      	ldr	r3, [r0, #0]
 8020a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a82:	4798      	blx	r3
 8020a84:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8020a88:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020a8c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8020a90:	1a5b      	subs	r3, r3, r1
 8020a92:	b29b      	uxth	r3, r3
 8020a94:	b21c      	sxth	r4, r3
 8020a96:	2c00      	cmp	r4, #0
 8020a98:	dc0f      	bgt.n	8020aba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8020a9a:	bf18      	it	ne
 8020a9c:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8020aa0:	4644      	mov	r4, r8
 8020aa2:	bf1e      	ittt	ne
 8020aa4:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8020aa8:	185b      	addne	r3, r3, r1
 8020aaa:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8020aae:	e009      	b.n	8020ac4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8020ab0:	4b4a      	ldr	r3, [pc, #296]	; (8020bdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8020ab2:	f240 3176 	movw	r1, #886	; 0x376
 8020ab6:	4a43      	ldr	r2, [pc, #268]	; (8020bc4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020ab8:	e75e      	b.n	8020978 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020aba:	1ad3      	subs	r3, r2, r3
 8020abc:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8020ac0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020ac4:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8020ac8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020acc:	1b9b      	subs	r3, r3, r6
 8020ace:	b29b      	uxth	r3, r3
 8020ad0:	b219      	sxth	r1, r3
 8020ad2:	2900      	cmp	r1, #0
 8020ad4:	dd4b      	ble.n	8020b6e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8020ad6:	4351      	muls	r1, r2
 8020ad8:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8020adc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8020ae0:	1acb      	subs	r3, r1, r3
 8020ae2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8020ae6:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020aea:	2e00      	cmp	r6, #0
 8020aec:	dd3b      	ble.n	8020b66 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020aee:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	dd37      	ble.n	8020b66 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020af6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8020afa:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020afe:	fb0a f90c 	mul.w	r9, sl, ip
 8020b02:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8020b06:	4481      	add	r9, r0
 8020b08:	8828      	ldrh	r0, [r5, #0]
 8020b0a:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8020b0e:	1a41      	subs	r1, r0, r1
 8020b10:	42ae      	cmp	r6, r5
 8020b12:	bfa8      	it	ge
 8020b14:	462e      	movge	r6, r5
 8020b16:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8020b1a:	428e      	cmp	r6, r1
 8020b1c:	bfa8      	it	ge
 8020b1e:	460e      	movge	r6, r1
 8020b20:	429d      	cmp	r5, r3
 8020b22:	bfa8      	it	ge
 8020b24:	461d      	movge	r5, r3
 8020b26:	4b2c      	ldr	r3, [pc, #176]	; (8020bd8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8020b28:	881b      	ldrh	r3, [r3, #0]
 8020b2a:	eba3 030c 	sub.w	r3, r3, ip
 8020b2e:	429d      	cmp	r5, r3
 8020b30:	bfa8      	it	ge
 8020b32:	461d      	movge	r5, r3
 8020b34:	42b0      	cmp	r0, r6
 8020b36:	d12c      	bne.n	8020b92 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8020b38:	4290      	cmp	r0, r2
 8020b3a:	d12a      	bne.n	8020b92 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8020b3c:	6838      	ldr	r0, [r7, #0]
 8020b3e:	9203      	str	r2, [sp, #12]
 8020b40:	6803      	ldr	r3, [r0, #0]
 8020b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020b44:	4798      	blx	r3
 8020b46:	07c3      	lsls	r3, r0, #31
 8020b48:	d51a      	bpl.n	8020b80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020b4a:	9a03      	ldr	r2, [sp, #12]
 8020b4c:	6838      	ldr	r0, [r7, #0]
 8020b4e:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8020b52:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8020b56:	6803      	ldr	r3, [r0, #0]
 8020b58:	9200      	str	r2, [sp, #0]
 8020b5a:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8020b5c:	4623      	mov	r3, r4
 8020b5e:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8020b62:	47a8      	blx	r5
 8020b64:	4680      	mov	r8, r0
 8020b66:	4640      	mov	r0, r8
 8020b68:	b00f      	add	sp, #60	; 0x3c
 8020b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b6e:	bf1f      	itttt	ne
 8020b70:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8020b74:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8020b78:	185b      	addne	r3, r3, r1
 8020b7a:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8020b7e:	e7b2      	b.n	8020ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8020b80:	6838      	ldr	r0, [r7, #0]
 8020b82:	464a      	mov	r2, r9
 8020b84:	4621      	mov	r1, r4
 8020b86:	6803      	ldr	r3, [r0, #0]
 8020b88:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8020b8a:	fb05 f30a 	mul.w	r3, r5, sl
 8020b8e:	47b0      	blx	r6
 8020b90:	e7e9      	b.n	8020b66 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020b92:	4355      	muls	r5, r2
 8020b94:	0076      	lsls	r6, r6, #1
 8020b96:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8020b9a:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8020b9e:	9303      	str	r3, [sp, #12]
 8020ba0:	9b03      	ldr	r3, [sp, #12]
 8020ba2:	429c      	cmp	r4, r3
 8020ba4:	d2df      	bcs.n	8020b66 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020ba6:	6838      	ldr	r0, [r7, #0]
 8020ba8:	464a      	mov	r2, r9
 8020baa:	4621      	mov	r1, r4
 8020bac:	44d1      	add	r9, sl
 8020bae:	6803      	ldr	r3, [r0, #0]
 8020bb0:	445c      	add	r4, fp
 8020bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020bb4:	461d      	mov	r5, r3
 8020bb6:	4633      	mov	r3, r6
 8020bb8:	47a8      	blx	r5
 8020bba:	e7f1      	b.n	8020ba0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8020bbc:	2400af44 	.word	0x2400af44
 8020bc0:	0802e1a3 	.word	0x0802e1a3
 8020bc4:	0802ea54 	.word	0x0802ea54
 8020bc8:	0802e255 	.word	0x0802e255
 8020bcc:	0802e287 	.word	0x0802e287
 8020bd0:	0802e2dc 	.word	0x0802e2dc
 8020bd4:	2400af3e 	.word	0x2400af3e
 8020bd8:	2400af40 	.word	0x2400af40
 8020bdc:	0802e31a 	.word	0x0802e31a

08020be0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020be4:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8020be8:	4688      	mov	r8, r1
 8020bea:	4614      	mov	r4, r2
 8020bec:	461d      	mov	r5, r3
 8020bee:	9e08      	ldr	r6, [sp, #32]
 8020bf0:	2f00      	cmp	r7, #0
 8020bf2:	f000 80b4 	beq.w	8020d5e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020bf6:	4618      	mov	r0, r3
 8020bf8:	f7f6 fc83 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020bfc:	2800      	cmp	r0, #0
 8020bfe:	f040 80ae 	bne.w	8020d5e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020c02:	f9b5 1000 	ldrsh.w	r1, [r5]
 8020c06:	2fff      	cmp	r7, #255	; 0xff
 8020c08:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8020c0c:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8020c10:	fb04 1303 	mla	r3, r4, r3, r1
 8020c14:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8020c18:	eba4 0200 	sub.w	r2, r4, r0
 8020c1c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8020c20:	fb04 f505 	mul.w	r5, r4, r5
 8020c24:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8020c28:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8020c2c:	d04b      	beq.n	8020cc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 8020c2e:	b2bc      	uxth	r4, r7
 8020c30:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8020c34:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8020c38:	fa5f f788 	uxtb.w	r7, r8
 8020c3c:	b2f3      	uxtb	r3, r6
 8020c3e:	0040      	lsls	r0, r0, #1
 8020c40:	fb0e fe04 	mul.w	lr, lr, r4
 8020c44:	4367      	muls	r7, r4
 8020c46:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8020c4a:	4363      	muls	r3, r4
 8020c4c:	fa1f fc8c 	uxth.w	ip, ip
 8020c50:	42a9      	cmp	r1, r5
 8020c52:	f080 8084 	bcs.w	8020d5e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020c56:	eb01 0900 	add.w	r9, r1, r0
 8020c5a:	4549      	cmp	r1, r9
 8020c5c:	d231      	bcs.n	8020cc2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8020c5e:	880a      	ldrh	r2, [r1, #0]
 8020c60:	1214      	asrs	r4, r2, #8
 8020c62:	10d6      	asrs	r6, r2, #3
 8020c64:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020c68:	00d2      	lsls	r2, r2, #3
 8020c6a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020c6e:	b2d2      	uxtb	r2, r2
 8020c70:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020c74:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020c78:	fb14 f40c 	smulbb	r4, r4, ip
 8020c7c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8020c80:	fb12 f20c 	smulbb	r2, r2, ip
 8020c84:	fb16 f60c 	smulbb	r6, r6, ip
 8020c88:	4474      	add	r4, lr
 8020c8a:	441a      	add	r2, r3
 8020c8c:	b2a4      	uxth	r4, r4
 8020c8e:	443e      	add	r6, r7
 8020c90:	b292      	uxth	r2, r2
 8020c92:	f104 0a01 	add.w	sl, r4, #1
 8020c96:	b2b6      	uxth	r6, r6
 8020c98:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020c9c:	f102 0a01 	add.w	sl, r2, #1
 8020ca0:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8020ca4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020ca8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020cac:	4322      	orrs	r2, r4
 8020cae:	1c74      	adds	r4, r6, #1
 8020cb0:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020cb4:	0976      	lsrs	r6, r6, #5
 8020cb6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020cba:	4332      	orrs	r2, r6
 8020cbc:	f821 2b02 	strh.w	r2, [r1], #2
 8020cc0:	e7cb      	b.n	8020c5a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 8020cc2:	4441      	add	r1, r8
 8020cc4:	e7c4      	b.n	8020c50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8020cc6:	0973      	lsrs	r3, r6, #5
 8020cc8:	4f26      	ldr	r7, [pc, #152]	; (8020d64 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8020cca:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020cce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020cd2:	ea08 0707 	and.w	r7, r8, r7
 8020cd6:	433b      	orrs	r3, r7
 8020cd8:	4333      	orrs	r3, r6
 8020cda:	07e6      	lsls	r6, r4, #31
 8020cdc:	b29b      	uxth	r3, r3
 8020cde:	d50b      	bpl.n	8020cf8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8020ce0:	0040      	lsls	r0, r0, #1
 8020ce2:	0052      	lsls	r2, r2, #1
 8020ce4:	42a9      	cmp	r1, r5
 8020ce6:	d23a      	bcs.n	8020d5e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020ce8:	180c      	adds	r4, r1, r0
 8020cea:	42a1      	cmp	r1, r4
 8020cec:	d202      	bcs.n	8020cf4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8020cee:	f821 3b02 	strh.w	r3, [r1], #2
 8020cf2:	e7fa      	b.n	8020cea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8020cf4:	4411      	add	r1, r2
 8020cf6:	e7f5      	b.n	8020ce4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8020cf8:	078f      	lsls	r7, r1, #30
 8020cfa:	d008      	beq.n	8020d0e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8020cfc:	0066      	lsls	r6, r4, #1
 8020cfe:	460a      	mov	r2, r1
 8020d00:	42aa      	cmp	r2, r5
 8020d02:	d202      	bcs.n	8020d0a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8020d04:	8013      	strh	r3, [r2, #0]
 8020d06:	4432      	add	r2, r6
 8020d08:	e7fa      	b.n	8020d00 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8020d0a:	3102      	adds	r1, #2
 8020d0c:	3801      	subs	r0, #1
 8020d0e:	07c6      	lsls	r6, r0, #31
 8020d10:	d50b      	bpl.n	8020d2a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8020d12:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8020d16:	0066      	lsls	r6, r4, #1
 8020d18:	3a01      	subs	r2, #1
 8020d1a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8020d1e:	42aa      	cmp	r2, r5
 8020d20:	d202      	bcs.n	8020d28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8020d22:	8013      	strh	r3, [r2, #0]
 8020d24:	4432      	add	r2, r6
 8020d26:	e7fa      	b.n	8020d1e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8020d28:	3801      	subs	r0, #1
 8020d2a:	b1c0      	cbz	r0, 8020d5e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020d2c:	1040      	asrs	r0, r0, #1
 8020d2e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8020d32:	0080      	lsls	r0, r0, #2
 8020d34:	0064      	lsls	r4, r4, #1
 8020d36:	42a9      	cmp	r1, r5
 8020d38:	d211      	bcs.n	8020d5e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020d3a:	078a      	lsls	r2, r1, #30
 8020d3c:	d006      	beq.n	8020d4c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020d3e:	4b0a      	ldr	r3, [pc, #40]	; (8020d68 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8020d40:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8020d44:	4a09      	ldr	r2, [pc, #36]	; (8020d6c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 8020d46:	480a      	ldr	r0, [pc, #40]	; (8020d70 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 8020d48:	f008 ffd2 	bl	8029cf0 <__assert_func>
 8020d4c:	180e      	adds	r6, r1, r0
 8020d4e:	460a      	mov	r2, r1
 8020d50:	42b2      	cmp	r2, r6
 8020d52:	d202      	bcs.n	8020d5a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 8020d54:	f842 3b04 	str.w	r3, [r2], #4
 8020d58:	e7fa      	b.n	8020d50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 8020d5a:	4421      	add	r1, r4
 8020d5c:	e7eb      	b.n	8020d36 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8020d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d62:	bf00      	nop
 8020d64:	00fff800 	.word	0x00fff800
 8020d68:	0802e054 	.word	0x0802e054
 8020d6c:	0802e6a0 	.word	0x0802e6a0
 8020d70:	0802e255 	.word	0x0802e255

08020d74 <_ZN8touchgfx8LCD16bppC1Ev>:
 8020d74:	2200      	movs	r2, #0
 8020d76:	4910      	ldr	r1, [pc, #64]	; (8020db8 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8020d78:	6042      	str	r2, [r0, #4]
 8020d7a:	6001      	str	r1, [r0, #0]
 8020d7c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020d80:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020d84:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020d88:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020d8c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020d90:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020d94:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020d98:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020d9c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020da0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020da4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8020da8:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8020dac:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8020db0:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8020db4:	4770      	bx	lr
 8020db6:	bf00      	nop
 8020db8:	0802e658 	.word	0x0802e658

08020dbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dc0:	b08d      	sub	sp, #52	; 0x34
 8020dc2:	460d      	mov	r5, r1
 8020dc4:	4604      	mov	r4, r0
 8020dc6:	4699      	mov	r9, r3
 8020dc8:	6808      	ldr	r0, [r1, #0]
 8020dca:	ab08      	add	r3, sp, #32
 8020dcc:	6849      	ldr	r1, [r1, #4]
 8020dce:	c303      	stmia	r3!, {r0, r1}
 8020dd0:	6810      	ldr	r0, [r2, #0]
 8020dd2:	ab0a      	add	r3, sp, #40	; 0x28
 8020dd4:	6851      	ldr	r1, [r2, #4]
 8020dd6:	c303      	stmia	r3!, {r0, r1}
 8020dd8:	a808      	add	r0, sp, #32
 8020dda:	f7fa f8eb 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020dde:	4629      	mov	r1, r5
 8020de0:	a80a      	add	r0, sp, #40	; 0x28
 8020de2:	4d67      	ldr	r5, [pc, #412]	; (8020f80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020de4:	f7fa f90e 	bl	801b004 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020de8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020dec:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020df0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020df4:	6828      	ldr	r0, [r5, #0]
 8020df6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020dfa:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8020dfe:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020e02:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020e06:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020e0a:	440a      	add	r2, r1
 8020e0c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020e10:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020e14:	4413      	add	r3, r2
 8020e16:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020e1a:	6803      	ldr	r3, [r0, #0]
 8020e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e1e:	4798      	blx	r3
 8020e20:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020e24:	d119      	bne.n	8020e5a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8020e26:	f010 0f20 	tst.w	r0, #32
 8020e2a:	6828      	ldr	r0, [r5, #0]
 8020e2c:	d018      	beq.n	8020e60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8020e2e:	2500      	movs	r5, #0
 8020e30:	6801      	ldr	r1, [r0, #0]
 8020e32:	b2b6      	uxth	r6, r6
 8020e34:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020e38:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020e3c:	9601      	str	r6, [sp, #4]
 8020e3e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8020e42:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8020e46:	9502      	str	r5, [sp, #8]
 8020e48:	fa1f f588 	uxth.w	r5, r8
 8020e4c:	9500      	str	r5, [sp, #0]
 8020e4e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8020e50:	4621      	mov	r1, r4
 8020e52:	47a8      	blx	r5
 8020e54:	b00d      	add	sp, #52	; 0x34
 8020e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020e5e:	e7e4      	b.n	8020e2a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020e60:	6803      	ldr	r3, [r0, #0]
 8020e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e64:	4798      	blx	r3
 8020e66:	4947      	ldr	r1, [pc, #284]	; (8020f84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8020e68:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020e6c:	880b      	ldrh	r3, [r1, #0]
 8020e6e:	468a      	mov	sl, r1
 8020e70:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8020e74:	fb03 5202 	mla	r2, r3, r2, r5
 8020e78:	4373      	muls	r3, r6
 8020e7a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020e7e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020e82:	9307      	str	r3, [sp, #28]
 8020e84:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020e88:	9306      	str	r3, [sp, #24]
 8020e8a:	9b07      	ldr	r3, [sp, #28]
 8020e8c:	4298      	cmp	r0, r3
 8020e8e:	d270      	bcs.n	8020f72 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8020e90:	9b06      	ldr	r3, [sp, #24]
 8020e92:	4621      	mov	r1, r4
 8020e94:	eb00 0b03 	add.w	fp, r0, r3
 8020e98:	4558      	cmp	r0, fp
 8020e9a:	d25d      	bcs.n	8020f58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8020e9c:	f851 4b04 	ldr.w	r4, [r1], #4
 8020ea0:	0e23      	lsrs	r3, r4, #24
 8020ea2:	d014      	beq.n	8020ece <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020ea4:	2bff      	cmp	r3, #255	; 0xff
 8020ea6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8020eaa:	d112      	bne.n	8020ed2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020eac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020eb0:	d10f      	bne.n	8020ed2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020eb2:	0963      	lsrs	r3, r4, #5
 8020eb4:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8020eb8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020ebc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020ec0:	f02c 0c07 	bic.w	ip, ip, #7
 8020ec4:	ea43 0c0c 	orr.w	ip, r3, ip
 8020ec8:	ea4c 0404 	orr.w	r4, ip, r4
 8020ecc:	8004      	strh	r4, [r0, #0]
 8020ece:	3002      	adds	r0, #2
 8020ed0:	e7e2      	b.n	8020e98 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8020ed2:	fb09 f303 	mul.w	r3, r9, r3
 8020ed6:	8807      	ldrh	r7, [r0, #0]
 8020ed8:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8020edc:	fa5f fc8c 	uxtb.w	ip, ip
 8020ee0:	1c5a      	adds	r2, r3, #1
 8020ee2:	123e      	asrs	r6, r7, #8
 8020ee4:	10fd      	asrs	r5, r7, #3
 8020ee6:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8020eea:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020eee:	00ff      	lsls	r7, r7, #3
 8020ef0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020ef4:	1212      	asrs	r2, r2, #8
 8020ef6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020efa:	b293      	uxth	r3, r2
 8020efc:	43d2      	mvns	r2, r2
 8020efe:	b2ff      	uxtb	r7, r7
 8020f00:	fb1e fe03 	smulbb	lr, lr, r3
 8020f04:	b2d2      	uxtb	r2, r2
 8020f06:	fb1c fc03 	smulbb	ip, ip, r3
 8020f0a:	b2e4      	uxtb	r4, r4
 8020f0c:	fb06 e602 	mla	r6, r6, r2, lr
 8020f10:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8020f14:	fb14 f403 	smulbb	r4, r4, r3
 8020f18:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8020f1c:	b2b6      	uxth	r6, r6
 8020f1e:	fb05 c502 	mla	r5, r5, r2, ip
 8020f22:	fb07 4702 	mla	r7, r7, r2, r4
 8020f26:	f106 0e01 	add.w	lr, r6, #1
 8020f2a:	b2ad      	uxth	r5, r5
 8020f2c:	b2bf      	uxth	r7, r7
 8020f2e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8020f32:	f105 0c01 	add.w	ip, r5, #1
 8020f36:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8020f3a:	1c7e      	adds	r6, r7, #1
 8020f3c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020f40:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020f44:	096d      	lsrs	r5, r5, #5
 8020f46:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020f4a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020f4e:	ea46 060e 	orr.w	r6, r6, lr
 8020f52:	432e      	orrs	r6, r5
 8020f54:	8006      	strh	r6, [r0, #0]
 8020f56:	e7ba      	b.n	8020ece <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020f58:	f8ba 3000 	ldrh.w	r3, [sl]
 8020f5c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8020f60:	eba3 0308 	sub.w	r3, r3, r8
 8020f64:	eba4 0408 	sub.w	r4, r4, r8
 8020f68:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020f6c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8020f70:	e78b      	b.n	8020e8a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8020f72:	4b03      	ldr	r3, [pc, #12]	; (8020f80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020f74:	6818      	ldr	r0, [r3, #0]
 8020f76:	6803      	ldr	r3, [r0, #0]
 8020f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f7a:	4798      	blx	r3
 8020f7c:	e76a      	b.n	8020e54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8020f7e:	bf00      	nop
 8020f80:	2400af44 	.word	0x2400af44
 8020f84:	2400af3e 	.word	0x2400af3e

08020f88 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8020f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020f8c:	b085      	sub	sp, #20
 8020f8e:	6810      	ldr	r0, [r2, #0]
 8020f90:	460c      	mov	r4, r1
 8020f92:	6851      	ldr	r1, [r2, #4]
 8020f94:	466d      	mov	r5, sp
 8020f96:	4616      	mov	r6, r2
 8020f98:	c503      	stmia	r5!, {r0, r1}
 8020f9a:	6818      	ldr	r0, [r3, #0]
 8020f9c:	6859      	ldr	r1, [r3, #4]
 8020f9e:	c503      	stmia	r5!, {r0, r1}
 8020fa0:	4668      	mov	r0, sp
 8020fa2:	4d2e      	ldr	r5, [pc, #184]	; (802105c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8020fa4:	f7fa f806 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020fa8:	4631      	mov	r1, r6
 8020faa:	a802      	add	r0, sp, #8
 8020fac:	4e2c      	ldr	r6, [pc, #176]	; (8021060 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8020fae:	f7fa f829 	bl	801b004 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020fb2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8020fb6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8020fba:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8020fbe:	6828      	ldr	r0, [r5, #0]
 8020fc0:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020fc4:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8020fc8:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8020fcc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020fd0:	f8bd 1000 	ldrh.w	r1, [sp]
 8020fd4:	440a      	add	r2, r1
 8020fd6:	f8ad 2008 	strh.w	r2, [sp, #8]
 8020fda:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020fde:	4413      	add	r3, r2
 8020fe0:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020fe4:	6803      	ldr	r3, [r0, #0]
 8020fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020fe8:	4798      	blx	r3
 8020fea:	8833      	ldrh	r3, [r6, #0]
 8020fec:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8020ff0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8020ff4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8020ff8:	f8df e068 	ldr.w	lr, [pc, #104]	; 8021064 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8020ffc:	fb03 1202 	mla	r2, r3, r2, r1
 8021000:	fb08 f303 	mul.w	r3, r8, r3
 8021004:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021008:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802100c:	4298      	cmp	r0, r3
 802100e:	d21d      	bcs.n	802104c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8021010:	eb00 080c 	add.w	r8, r0, ip
 8021014:	4540      	cmp	r0, r8
 8021016:	d20f      	bcs.n	8021038 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8021018:	f854 1b04 	ldr.w	r1, [r4], #4
 802101c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8021020:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8021024:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8021028:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802102c:	ea42 0209 	orr.w	r2, r2, r9
 8021030:	430a      	orrs	r2, r1
 8021032:	f820 2b02 	strh.w	r2, [r0], #2
 8021036:	e7ed      	b.n	8021014 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8021038:	8832      	ldrh	r2, [r6, #0]
 802103a:	1bd2      	subs	r2, r2, r7
 802103c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021040:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8021044:	1bd2      	subs	r2, r2, r7
 8021046:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 802104a:	e7df      	b.n	802100c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 802104c:	6828      	ldr	r0, [r5, #0]
 802104e:	6803      	ldr	r3, [r0, #0]
 8021050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021052:	4798      	blx	r3
 8021054:	b005      	add	sp, #20
 8021056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802105a:	bf00      	nop
 802105c:	2400af44 	.word	0x2400af44
 8021060:	2400af3e 	.word	0x2400af3e
 8021064:	fffff800 	.word	0xfffff800

08021068 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8021068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802106c:	b08e      	sub	sp, #56	; 0x38
 802106e:	460e      	mov	r6, r1
 8021070:	4604      	mov	r4, r0
 8021072:	461d      	mov	r5, r3
 8021074:	6808      	ldr	r0, [r1, #0]
 8021076:	ab0a      	add	r3, sp, #40	; 0x28
 8021078:	6849      	ldr	r1, [r1, #4]
 802107a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8021250 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 802107e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8021254 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8021082:	c303      	stmia	r3!, {r0, r1}
 8021084:	6810      	ldr	r0, [r2, #0]
 8021086:	ab0c      	add	r3, sp, #48	; 0x30
 8021088:	6851      	ldr	r1, [r2, #4]
 802108a:	c303      	stmia	r3!, {r0, r1}
 802108c:	a80a      	add	r0, sp, #40	; 0x28
 802108e:	f7f9 ff91 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021092:	4631      	mov	r1, r6
 8021094:	a80c      	add	r0, sp, #48	; 0x30
 8021096:	f7f9 ffb5 	bl	801b004 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802109a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802109e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80210a2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80210a6:	f8d8 0000 	ldr.w	r0, [r8]
 80210aa:	fb11 2103 	smlabb	r1, r1, r3, r2
 80210ae:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80210b2:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 80210b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80210ba:	440c      	add	r4, r1
 80210bc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80210c0:	440a      	add	r2, r1
 80210c2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80210c6:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80210ca:	4413      	add	r3, r2
 80210cc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80210d0:	6803      	ldr	r3, [r0, #0]
 80210d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80210d4:	4798      	blx	r3
 80210d6:	2dff      	cmp	r5, #255	; 0xff
 80210d8:	d124      	bne.n	8021124 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 80210da:	f010 0f01 	tst.w	r0, #1
 80210de:	f8d8 0000 	ldr.w	r0, [r8]
 80210e2:	d022      	beq.n	802112a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 80210e4:	2100      	movs	r1, #0
 80210e6:	f04f 0e01 	mov.w	lr, #1
 80210ea:	f8d0 c000 	ldr.w	ip, [r0]
 80210ee:	b2b6      	uxth	r6, r6
 80210f0:	f8cd e018 	str.w	lr, [sp, #24]
 80210f4:	b2bf      	uxth	r7, r7
 80210f6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80210fa:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80210fe:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8021102:	f8b9 e000 	ldrh.w	lr, [r9]
 8021106:	9503      	str	r5, [sp, #12]
 8021108:	9601      	str	r6, [sp, #4]
 802110a:	9700      	str	r7, [sp, #0]
 802110c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8021110:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021114:	9102      	str	r1, [sp, #8]
 8021116:	4621      	mov	r1, r4
 8021118:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 802111c:	47a8      	blx	r5
 802111e:	b00e      	add	sp, #56	; 0x38
 8021120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021124:	f010 0f04 	tst.w	r0, #4
 8021128:	e7d9      	b.n	80210de <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 802112a:	6803      	ldr	r3, [r0, #0]
 802112c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802112e:	4798      	blx	r3
 8021130:	f8b9 3000 	ldrh.w	r3, [r9]
 8021134:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8021138:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 802113c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021140:	435e      	muls	r6, r3
 8021142:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8021146:	2dff      	cmp	r5, #255	; 0xff
 8021148:	fb03 1202 	mla	r2, r3, r2, r1
 802114c:	ebac 0c07 	sub.w	ip, ip, r7
 8021150:	eba3 0707 	sub.w	r7, r3, r7
 8021154:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021158:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802115c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8021160:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8021164:	d049      	beq.n	80211fa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8021166:	43eb      	mvns	r3, r5
 8021168:	fa1f f985 	uxth.w	r9, r5
 802116c:	b2db      	uxtb	r3, r3
 802116e:	42b0      	cmp	r0, r6
 8021170:	d266      	bcs.n	8021240 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021172:	eb00 0a0e 	add.w	sl, r0, lr
 8021176:	4550      	cmp	r0, sl
 8021178:	4621      	mov	r1, r4
 802117a:	f104 0403 	add.w	r4, r4, #3
 802117e:	d25b      	bcs.n	8021238 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8021180:	8802      	ldrh	r2, [r0, #0]
 8021182:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8021186:	ea4f 2822 	mov.w	r8, r2, asr #8
 802118a:	fb11 f109 	smulbb	r1, r1, r9
 802118e:	10d5      	asrs	r5, r2, #3
 8021190:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8021194:	00d2      	lsls	r2, r2, #3
 8021196:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802119a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802119e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80211a2:	fb08 1803 	mla	r8, r8, r3, r1
 80211a6:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80211aa:	b2d2      	uxtb	r2, r2
 80211ac:	fb11 f109 	smulbb	r1, r1, r9
 80211b0:	fa1f f888 	uxth.w	r8, r8
 80211b4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80211b8:	fb05 1503 	mla	r5, r5, r3, r1
 80211bc:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80211c0:	fb11 f109 	smulbb	r1, r1, r9
 80211c4:	b2ad      	uxth	r5, r5
 80211c6:	fb02 1203 	mla	r2, r2, r3, r1
 80211ca:	f108 0101 	add.w	r1, r8, #1
 80211ce:	b292      	uxth	r2, r2
 80211d0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80211d4:	1c51      	adds	r1, r2, #1
 80211d6:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 80211da:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80211de:	1c69      	adds	r1, r5, #1
 80211e0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80211e4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80211e8:	096d      	lsrs	r5, r5, #5
 80211ea:	ea42 0208 	orr.w	r2, r2, r8
 80211ee:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80211f2:	432a      	orrs	r2, r5
 80211f4:	f820 2b02 	strh.w	r2, [r0], #2
 80211f8:	e7bd      	b.n	8021176 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 80211fa:	4a14      	ldr	r2, [pc, #80]	; (802124c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 80211fc:	42b0      	cmp	r0, r6
 80211fe:	d21f      	bcs.n	8021240 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021200:	eb00 050e 	add.w	r5, r0, lr
 8021204:	42a8      	cmp	r0, r5
 8021206:	4621      	mov	r1, r4
 8021208:	f104 0403 	add.w	r4, r4, #3
 802120c:	d210      	bcs.n	8021230 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802120e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8021212:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8021216:	00db      	lsls	r3, r3, #3
 8021218:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 802121c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021220:	430b      	orrs	r3, r1
 8021222:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8021226:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 802122a:	f820 3b02 	strh.w	r3, [r0], #2
 802122e:	e7e9      	b.n	8021204 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8021230:	4438      	add	r0, r7
 8021232:	eb01 040c 	add.w	r4, r1, ip
 8021236:	e7e1      	b.n	80211fc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8021238:	4438      	add	r0, r7
 802123a:	eb01 040c 	add.w	r4, r1, ip
 802123e:	e796      	b.n	802116e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8021240:	4b03      	ldr	r3, [pc, #12]	; (8021250 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8021242:	6818      	ldr	r0, [r3, #0]
 8021244:	6803      	ldr	r3, [r0, #0]
 8021246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021248:	4798      	blx	r3
 802124a:	e768      	b.n	802111e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 802124c:	fffff800 	.word	0xfffff800
 8021250:	2400af44 	.word	0x2400af44
 8021254:	2400af3e 	.word	0x2400af3e

08021258 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021258:	b570      	push	{r4, r5, r6, lr}
 802125a:	9c04      	ldr	r4, [sp, #16]
 802125c:	4605      	mov	r5, r0
 802125e:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8021262:	4608      	mov	r0, r1
 8021264:	4619      	mov	r1, r3
 8021266:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802126a:	2a0d      	cmp	r2, #13
 802126c:	d825      	bhi.n	80212ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 802126e:	e8df f002 	tbb	[pc, r2]
 8021272:	1807      	.short	0x1807
 8021274:	1d1d1d13 	.word	0x1d1d1d13
 8021278:	1d1d1d1d 	.word	0x1d1d1d1d
 802127c:	1d1d1d1d 	.word	0x1d1d1d1d
 8021280:	682a      	ldr	r2, [r5, #0]
 8021282:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8021286:	68d6      	ldr	r6, [r2, #12]
 8021288:	4623      	mov	r3, r4
 802128a:	460a      	mov	r2, r1
 802128c:	4601      	mov	r1, r0
 802128e:	46b4      	mov	ip, r6
 8021290:	4628      	mov	r0, r5
 8021292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021296:	4760      	bx	ip
 8021298:	4622      	mov	r2, r4
 802129a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802129e:	f7ff bd8d 	b.w	8020dbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80212a2:	4622      	mov	r2, r4
 80212a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80212a8:	f7ff bede 	b.w	8021068 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80212ac:	4b03      	ldr	r3, [pc, #12]	; (80212bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80212ae:	f240 315d 	movw	r1, #861	; 0x35d
 80212b2:	4a03      	ldr	r2, [pc, #12]	; (80212c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80212b4:	4803      	ldr	r0, [pc, #12]	; (80212c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80212b6:	f008 fd1b 	bl	8029cf0 <__assert_func>
 80212ba:	bd70      	pop	{r4, r5, r6, pc}
 80212bc:	0802e37a 	.word	0x0802e37a
 80212c0:	0802eada 	.word	0x0802eada
 80212c4:	0802e255 	.word	0x0802e255

080212c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80212c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212cc:	b093      	sub	sp, #76	; 0x4c
 80212ce:	880e      	ldrh	r6, [r1, #0]
 80212d0:	4681      	mov	r9, r0
 80212d2:	4688      	mov	r8, r1
 80212d4:	4615      	mov	r5, r2
 80212d6:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80212da:	b136      	cbz	r6, 80212ea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 80212dc:	4b70      	ldr	r3, [pc, #448]	; (80214a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80212de:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80212e2:	4a70      	ldr	r2, [pc, #448]	; (80214a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80212e4:	4870      	ldr	r0, [pc, #448]	; (80214a8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80212e6:	f008 fd03 	bl	8029cf0 <__assert_func>
 80212ea:	6810      	ldr	r0, [r2, #0]
 80212ec:	ac0e      	add	r4, sp, #56	; 0x38
 80212ee:	6851      	ldr	r1, [r2, #4]
 80212f0:	4f6e      	ldr	r7, [pc, #440]	; (80214ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80212f2:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 80214b0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 80212f6:	c403      	stmia	r4!, {r0, r1}
 80212f8:	6818      	ldr	r0, [r3, #0]
 80212fa:	ac10      	add	r4, sp, #64	; 0x40
 80212fc:	6859      	ldr	r1, [r3, #4]
 80212fe:	c403      	stmia	r4!, {r0, r1}
 8021300:	a80e      	add	r0, sp, #56	; 0x38
 8021302:	f7f9 fe57 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021306:	4629      	mov	r1, r5
 8021308:	a810      	add	r0, sp, #64	; 0x40
 802130a:	f7f9 fe7b 	bl	801b004 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802130e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021312:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8021316:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802131a:	6838      	ldr	r0, [r7, #0]
 802131c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021320:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8021324:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8021328:	4489      	add	r9, r1
 802132a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 802132e:	440a      	add	r2, r1
 8021330:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021334:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021338:	4413      	add	r3, r2
 802133a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802133e:	6803      	ldr	r3, [r0, #0]
 8021340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021342:	4798      	blx	r3
 8021344:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021348:	6838      	ldr	r0, [r7, #0]
 802134a:	d01d      	beq.n	8021388 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 802134c:	210b      	movs	r1, #11
 802134e:	6802      	ldr	r2, [r0, #0]
 8021350:	b2a4      	uxth	r4, r4
 8021352:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8021356:	9107      	str	r1, [sp, #28]
 8021358:	b2ad      	uxth	r5, r5
 802135a:	e9cd 6608 	strd	r6, r6, [sp, #32]
 802135e:	f8bb 1000 	ldrh.w	r1, [fp]
 8021362:	9502      	str	r5, [sp, #8]
 8021364:	9106      	str	r1, [sp, #24]
 8021366:	2101      	movs	r1, #1
 8021368:	9401      	str	r4, [sp, #4]
 802136a:	e9cd a104 	strd	sl, r1, [sp, #16]
 802136e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021372:	9103      	str	r1, [sp, #12]
 8021374:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8021378:	9100      	str	r1, [sp, #0]
 802137a:	4649      	mov	r1, r9
 802137c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 802137e:	4642      	mov	r2, r8
 8021380:	47a0      	blx	r4
 8021382:	b013      	add	sp, #76	; 0x4c
 8021384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021388:	6803      	ldr	r3, [r0, #0]
 802138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802138c:	4798      	blx	r3
 802138e:	f8bb 3000 	ldrh.w	r3, [fp]
 8021392:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8021396:	f04f 0e04 	mov.w	lr, #4
 802139a:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 802139e:	435d      	muls	r5, r3
 80213a0:	fb03 1202 	mla	r2, r3, r2, r1
 80213a4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80213a8:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80213ac:	920c      	str	r2, [sp, #48]	; 0x30
 80213ae:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80213b2:	1b12      	subs	r2, r2, r4
 80213b4:	920d      	str	r2, [sp, #52]	; 0x34
 80213b6:	0062      	lsls	r2, r4, #1
 80213b8:	1b1c      	subs	r4, r3, r4
 80213ba:	920a      	str	r2, [sp, #40]	; 0x28
 80213bc:	0063      	lsls	r3, r4, #1
 80213be:	930b      	str	r3, [sp, #44]	; 0x2c
 80213c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80213c2:	4298      	cmp	r0, r3
 80213c4:	d266      	bcs.n	8021494 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 80213c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80213c8:	eb00 0b03 	add.w	fp, r0, r3
 80213cc:	4558      	cmp	r0, fp
 80213ce:	d25c      	bcs.n	802148a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 80213d0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80213d4:	fb1e e303 	smlabb	r3, lr, r3, lr
 80213d8:	f858 2003 	ldr.w	r2, [r8, r3]
 80213dc:	0e11      	lsrs	r1, r2, #24
 80213de:	d012      	beq.n	8021406 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80213e0:	29ff      	cmp	r1, #255	; 0xff
 80213e2:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80213e6:	d110      	bne.n	802140a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 80213e8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80213ec:	d10d      	bne.n	802140a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 80213ee:	0953      	lsrs	r3, r2, #5
 80213f0:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80213f4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80213f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80213fc:	f027 0707 	bic.w	r7, r7, #7
 8021400:	431f      	orrs	r7, r3
 8021402:	433a      	orrs	r2, r7
 8021404:	8002      	strh	r2, [r0, #0]
 8021406:	3002      	adds	r0, #2
 8021408:	e7e0      	b.n	80213cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 802140a:	fb0a f101 	mul.w	r1, sl, r1
 802140e:	8806      	ldrh	r6, [r0, #0]
 8021410:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8021414:	b2d2      	uxtb	r2, r2
 8021416:	1c4b      	adds	r3, r1, #1
 8021418:	1235      	asrs	r5, r6, #8
 802141a:	10f4      	asrs	r4, r6, #3
 802141c:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8021420:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021424:	00f6      	lsls	r6, r6, #3
 8021426:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802142a:	121b      	asrs	r3, r3, #8
 802142c:	b2f6      	uxtb	r6, r6
 802142e:	b299      	uxth	r1, r3
 8021430:	43db      	mvns	r3, r3
 8021432:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021436:	fb1c fc01 	smulbb	ip, ip, r1
 802143a:	b2db      	uxtb	r3, r3
 802143c:	fb12 f201 	smulbb	r2, r2, r1
 8021440:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021444:	fb05 c503 	mla	r5, r5, r3, ip
 8021448:	b2ff      	uxtb	r7, r7
 802144a:	fb06 2203 	mla	r2, r6, r3, r2
 802144e:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8021452:	fb17 f701 	smulbb	r7, r7, r1
 8021456:	b2ad      	uxth	r5, r5
 8021458:	b292      	uxth	r2, r2
 802145a:	fb04 7403 	mla	r4, r4, r3, r7
 802145e:	f105 0c01 	add.w	ip, r5, #1
 8021462:	1c57      	adds	r7, r2, #1
 8021464:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021468:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802146c:	b2a4      	uxth	r4, r4
 802146e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021472:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021476:	433d      	orrs	r5, r7
 8021478:	1c67      	adds	r7, r4, #1
 802147a:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802147e:	0964      	lsrs	r4, r4, #5
 8021480:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8021484:	4325      	orrs	r5, r4
 8021486:	8005      	strh	r5, [r0, #0]
 8021488:	e7bd      	b.n	8021406 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 802148a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802148c:	4418      	add	r0, r3
 802148e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021490:	4499      	add	r9, r3
 8021492:	e795      	b.n	80213c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 8021494:	4b05      	ldr	r3, [pc, #20]	; (80214ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8021496:	6818      	ldr	r0, [r3, #0]
 8021498:	6803      	ldr	r3, [r0, #0]
 802149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802149c:	4798      	blx	r3
 802149e:	e770      	b.n	8021382 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 80214a0:	0802e153 	.word	0x0802e153
 80214a4:	0802e8ab 	.word	0x0802e8ab
 80214a8:	0802e255 	.word	0x0802e255
 80214ac:	2400af44 	.word	0x2400af44
 80214b0:	2400af3e 	.word	0x2400af3e

080214b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80214b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214b8:	4614      	mov	r4, r2
 80214ba:	880a      	ldrh	r2, [r1, #0]
 80214bc:	b087      	sub	sp, #28
 80214be:	4680      	mov	r8, r0
 80214c0:	2a02      	cmp	r2, #2
 80214c2:	460d      	mov	r5, r1
 80214c4:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80214c8:	d006      	beq.n	80214d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 80214ca:	4b63      	ldr	r3, [pc, #396]	; (8021658 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 80214cc:	f240 11e1 	movw	r1, #481	; 0x1e1
 80214d0:	4a62      	ldr	r2, [pc, #392]	; (802165c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80214d2:	4863      	ldr	r0, [pc, #396]	; (8021660 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 80214d4:	f008 fc0c 	bl	8029cf0 <__assert_func>
 80214d8:	2e00      	cmp	r6, #0
 80214da:	f000 80b9 	beq.w	8021650 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 80214de:	6820      	ldr	r0, [r4, #0]
 80214e0:	af02      	add	r7, sp, #8
 80214e2:	6861      	ldr	r1, [r4, #4]
 80214e4:	c703      	stmia	r7!, {r0, r1}
 80214e6:	6818      	ldr	r0, [r3, #0]
 80214e8:	af04      	add	r7, sp, #16
 80214ea:	6859      	ldr	r1, [r3, #4]
 80214ec:	c703      	stmia	r7!, {r0, r1}
 80214ee:	a802      	add	r0, sp, #8
 80214f0:	f7f9 fd60 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80214f4:	4621      	mov	r1, r4
 80214f6:	a804      	add	r0, sp, #16
 80214f8:	f7f9 fd84 	bl	801b004 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80214fc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021500:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021504:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8021508:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 802150c:	fb14 2103 	smlabb	r1, r4, r3, r2
 8021510:	eb08 0401 	add.w	r4, r8, r1
 8021514:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021518:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802151c:	440a      	add	r2, r1
 802151e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8021522:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021526:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802152a:	4413      	add	r3, r2
 802152c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021530:	4b4c      	ldr	r3, [pc, #304]	; (8021664 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021532:	6818      	ldr	r0, [r3, #0]
 8021534:	6803      	ldr	r3, [r0, #0]
 8021536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021538:	4798      	blx	r3
 802153a:	4b4b      	ldr	r3, [pc, #300]	; (8021668 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 802153c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021540:	2eff      	cmp	r6, #255	; 0xff
 8021542:	881a      	ldrh	r2, [r3, #0]
 8021544:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8021548:	fb02 c101 	mla	r1, r2, r1, ip
 802154c:	fb02 f207 	mul.w	r2, r2, r7
 8021550:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021554:	f105 0104 	add.w	r1, r5, #4
 8021558:	461d      	mov	r5, r3
 802155a:	d05a      	beq.n	8021612 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 802155c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8021560:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021564:	b2b6      	uxth	r6, r6
 8021566:	9301      	str	r3, [sp, #4]
 8021568:	fa1f fe8e 	uxth.w	lr, lr
 802156c:	4282      	cmp	r2, r0
 802156e:	d96a      	bls.n	8021646 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8021570:	eb00 0b0a 	add.w	fp, r0, sl
 8021574:	4583      	cmp	fp, r0
 8021576:	d940      	bls.n	80215fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 8021578:	8805      	ldrh	r5, [r0, #0]
 802157a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802157e:	122f      	asrs	r7, r5, #8
 8021580:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021584:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8021588:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802158c:	00ed      	lsls	r5, r5, #3
 802158e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8021592:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8021596:	fb17 f70e 	smulbb	r7, r7, lr
 802159a:	b2ed      	uxtb	r5, r5
 802159c:	fb19 f90e 	smulbb	r9, r9, lr
 80215a0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80215a4:	fb15 f50e 	smulbb	r5, r5, lr
 80215a8:	fb0c 7c06 	mla	ip, ip, r6, r7
 80215ac:	10df      	asrs	r7, r3, #3
 80215ae:	00db      	lsls	r3, r3, #3
 80215b0:	fa1f fc8c 	uxth.w	ip, ip
 80215b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80215b8:	b2db      	uxtb	r3, r3
 80215ba:	fb07 9706 	mla	r7, r7, r6, r9
 80215be:	f10c 0901 	add.w	r9, ip, #1
 80215c2:	fb03 5306 	mla	r3, r3, r6, r5
 80215c6:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80215ca:	b29b      	uxth	r3, r3
 80215cc:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80215d0:	b2bf      	uxth	r7, r7
 80215d2:	f103 0c01 	add.w	ip, r3, #1
 80215d6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80215da:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80215de:	ea4c 0c09 	orr.w	ip, ip, r9
 80215e2:	f107 0901 	add.w	r9, r7, #1
 80215e6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80215ea:	097f      	lsrs	r7, r7, #5
 80215ec:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80215f0:	ea4c 0c07 	orr.w	ip, ip, r7
 80215f4:	f820 cb02 	strh.w	ip, [r0], #2
 80215f8:	e7bc      	b.n	8021574 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80215fa:	9b01      	ldr	r3, [sp, #4]
 80215fc:	881b      	ldrh	r3, [r3, #0]
 80215fe:	eba3 0308 	sub.w	r3, r3, r8
 8021602:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021606:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802160a:	eba3 0308 	sub.w	r3, r3, r8
 802160e:	441c      	add	r4, r3
 8021610:	e7ac      	b.n	802156c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 8021612:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021616:	4282      	cmp	r2, r0
 8021618:	d915      	bls.n	8021646 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 802161a:	eb00 060a 	add.w	r6, r0, sl
 802161e:	4286      	cmp	r6, r0
 8021620:	d906      	bls.n	8021630 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 8021622:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021626:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802162a:	f820 3b02 	strh.w	r3, [r0], #2
 802162e:	e7f6      	b.n	802161e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8021630:	882b      	ldrh	r3, [r5, #0]
 8021632:	eba3 0308 	sub.w	r3, r3, r8
 8021636:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802163a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802163e:	eba3 0308 	sub.w	r3, r3, r8
 8021642:	441c      	add	r4, r3
 8021644:	e7e7      	b.n	8021616 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 8021646:	4b07      	ldr	r3, [pc, #28]	; (8021664 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021648:	6818      	ldr	r0, [r3, #0]
 802164a:	6803      	ldr	r3, [r0, #0]
 802164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802164e:	4798      	blx	r3
 8021650:	b007      	add	sp, #28
 8021652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021656:	bf00      	nop
 8021658:	0802e083 	.word	0x0802e083
 802165c:	0802e715 	.word	0x0802e715
 8021660:	0802e255 	.word	0x0802e255
 8021664:	2400af44 	.word	0x2400af44
 8021668:	2400af3e 	.word	0x2400af3e

0802166c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802166c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021670:	f8b1 9000 	ldrh.w	r9, [r1]
 8021674:	b091      	sub	sp, #68	; 0x44
 8021676:	4604      	mov	r4, r0
 8021678:	460f      	mov	r7, r1
 802167a:	f1b9 0f01 	cmp.w	r9, #1
 802167e:	4690      	mov	r8, r2
 8021680:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8021684:	d006      	beq.n	8021694 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 8021686:	4b84      	ldr	r3, [pc, #528]	; (8021898 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 8021688:	f240 212f 	movw	r1, #559	; 0x22f
 802168c:	4a83      	ldr	r2, [pc, #524]	; (802189c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 802168e:	4884      	ldr	r0, [pc, #528]	; (80218a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 8021690:	f008 fb2e 	bl	8029cf0 <__assert_func>
 8021694:	2d00      	cmp	r5, #0
 8021696:	d04f      	beq.n	8021738 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8021698:	6810      	ldr	r0, [r2, #0]
 802169a:	ae0c      	add	r6, sp, #48	; 0x30
 802169c:	6851      	ldr	r1, [r2, #4]
 802169e:	f8df b208 	ldr.w	fp, [pc, #520]	; 80218a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 80216a2:	c603      	stmia	r6!, {r0, r1}
 80216a4:	6818      	ldr	r0, [r3, #0]
 80216a6:	ae0e      	add	r6, sp, #56	; 0x38
 80216a8:	6859      	ldr	r1, [r3, #4]
 80216aa:	c603      	stmia	r6!, {r0, r1}
 80216ac:	a80c      	add	r0, sp, #48	; 0x30
 80216ae:	f7f9 fc81 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80216b2:	4641      	mov	r1, r8
 80216b4:	a80e      	add	r0, sp, #56	; 0x38
 80216b6:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80218ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 80216ba:	f7f9 fca3 	bl	801b004 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80216be:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80216c2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80216c6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80216ca:	f8db 0000 	ldr.w	r0, [fp]
 80216ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 80216d2:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80216d6:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80216da:	440c      	add	r4, r1
 80216dc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80216e0:	440a      	add	r2, r1
 80216e2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80216e6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80216ea:	4413      	add	r3, r2
 80216ec:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80216f0:	6803      	ldr	r3, [r0, #0]
 80216f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80216f4:	4798      	blx	r3
 80216f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80216fa:	f8db 0000 	ldr.w	r0, [fp]
 80216fe:	d01e      	beq.n	802173e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 8021700:	2200      	movs	r2, #0
 8021702:	6801      	ldr	r1, [r0, #0]
 8021704:	b2b6      	uxth	r6, r6
 8021706:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 802170a:	e9cd 2208 	strd	r2, r2, [sp, #32]
 802170e:	220b      	movs	r2, #11
 8021710:	9207      	str	r2, [sp, #28]
 8021712:	f8b8 2000 	ldrh.w	r2, [r8]
 8021716:	9504      	str	r5, [sp, #16]
 8021718:	9601      	str	r6, [sp, #4]
 802171a:	e9cd 9205 	strd	r9, r2, [sp, #20]
 802171e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021722:	9203      	str	r2, [sp, #12]
 8021724:	fa1f f28a 	uxth.w	r2, sl
 8021728:	9202      	str	r2, [sp, #8]
 802172a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802172e:	9200      	str	r2, [sp, #0]
 8021730:	463a      	mov	r2, r7
 8021732:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8021734:	4621      	mov	r1, r4
 8021736:	47a8      	blx	r5
 8021738:	b011      	add	sp, #68	; 0x44
 802173a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802173e:	6803      	ldr	r3, [r0, #0]
 8021740:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8021744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021746:	4798      	blx	r3
 8021748:	f8b8 2000 	ldrh.w	r2, [r8]
 802174c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021750:	2dff      	cmp	r5, #255	; 0xff
 8021752:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8021756:	fb0a fa02 	mul.w	sl, sl, r2
 802175a:	fb02 1303 	mla	r3, r2, r3, r1
 802175e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021762:	d062      	beq.n	802182a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 8021764:	ea6f 0c05 	mvn.w	ip, r5
 8021768:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 802176c:	b2ad      	uxth	r5, r5
 802176e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8021772:	fa5f fc8c 	uxtb.w	ip, ip
 8021776:	930a      	str	r3, [sp, #40]	; 0x28
 8021778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802177a:	4298      	cmp	r0, r3
 802177c:	f080 8085 	bcs.w	802188a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8021780:	eb00 0b09 	add.w	fp, r0, r9
 8021784:	4558      	cmp	r0, fp
 8021786:	d246      	bcs.n	8021816 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8021788:	f814 eb01 	ldrb.w	lr, [r4], #1
 802178c:	2303      	movs	r3, #3
 802178e:	2204      	movs	r2, #4
 8021790:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8021794:	8803      	ldrh	r3, [r0, #0]
 8021796:	eb07 0a0e 	add.w	sl, r7, lr
 802179a:	1219      	asrs	r1, r3, #8
 802179c:	10da      	asrs	r2, r3, #3
 802179e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80217a2:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80217a6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80217aa:	00db      	lsls	r3, r3, #3
 80217ac:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80217b0:	fb18 f805 	smulbb	r8, r8, r5
 80217b4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80217b8:	fb1e fe05 	smulbb	lr, lr, r5
 80217bc:	b2db      	uxtb	r3, r3
 80217be:	fb01 810c 	mla	r1, r1, ip, r8
 80217c2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80217c6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80217ca:	fb18 f805 	smulbb	r8, r8, r5
 80217ce:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80217d2:	b289      	uxth	r1, r1
 80217d4:	fb02 820c 	mla	r2, r2, ip, r8
 80217d8:	fb03 e30c 	mla	r3, r3, ip, lr
 80217dc:	f101 0801 	add.w	r8, r1, #1
 80217e0:	b292      	uxth	r2, r2
 80217e2:	b29b      	uxth	r3, r3
 80217e4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80217e8:	f102 0801 	add.w	r8, r2, #1
 80217ec:	f103 0e01 	add.w	lr, r3, #1
 80217f0:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80217f4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80217f8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80217fc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021800:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8021804:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021808:	ea4e 0101 	orr.w	r1, lr, r1
 802180c:	ea41 0108 	orr.w	r1, r1, r8
 8021810:	f820 1b02 	strh.w	r1, [r0], #2
 8021814:	e7b6      	b.n	8021784 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8021816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021818:	881b      	ldrh	r3, [r3, #0]
 802181a:	1b9b      	subs	r3, r3, r6
 802181c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021820:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021824:	1b9b      	subs	r3, r3, r6
 8021826:	441c      	add	r4, r3
 8021828:	e7a6      	b.n	8021778 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 802182a:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 802182e:	2203      	movs	r2, #3
 8021830:	2504      	movs	r5, #4
 8021832:	491c      	ldr	r1, [pc, #112]	; (80218a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8021834:	4550      	cmp	r0, sl
 8021836:	d228      	bcs.n	802188a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8021838:	eb00 0c09 	add.w	ip, r0, r9
 802183c:	4560      	cmp	r0, ip
 802183e:	4623      	mov	r3, r4
 8021840:	d219      	bcs.n	8021876 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8021842:	f893 e000 	ldrb.w	lr, [r3]
 8021846:	3401      	adds	r4, #1
 8021848:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 802184c:	eb07 0b0e 	add.w	fp, r7, lr
 8021850:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021854:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021858:	f89b b001 	ldrb.w	fp, [fp, #1]
 802185c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8021860:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8021864:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021868:	ea43 030b 	orr.w	r3, r3, fp
 802186c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8021870:	f820 3b02 	strh.w	r3, [r0], #2
 8021874:	e7e2      	b.n	802183c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8021876:	f8b8 3000 	ldrh.w	r3, [r8]
 802187a:	1b9b      	subs	r3, r3, r6
 802187c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021880:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021884:	1b9b      	subs	r3, r3, r6
 8021886:	441c      	add	r4, r3
 8021888:	e7d4      	b.n	8021834 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 802188a:	4b07      	ldr	r3, [pc, #28]	; (80218a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 802188c:	6818      	ldr	r0, [r3, #0]
 802188e:	6803      	ldr	r3, [r0, #0]
 8021890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021892:	4798      	blx	r3
 8021894:	e750      	b.n	8021738 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8021896:	bf00      	nop
 8021898:	0802e0d1 	.word	0x0802e0d1
 802189c:	0802e79e 	.word	0x0802e79e
 80218a0:	0802e255 	.word	0x0802e255
 80218a4:	fffff800 	.word	0xfffff800
 80218a8:	2400af44 	.word	0x2400af44
 80218ac:	2400af3e 	.word	0x2400af3e

080218b0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80218b0:	b430      	push	{r4, r5}
 80218b2:	780d      	ldrb	r5, [r1, #0]
 80218b4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80218b8:	2d01      	cmp	r5, #1
 80218ba:	d00a      	beq.n	80218d2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80218bc:	d305      	bcc.n	80218ca <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80218be:	2d02      	cmp	r5, #2
 80218c0:	d10b      	bne.n	80218da <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80218c2:	9402      	str	r4, [sp, #8]
 80218c4:	bc30      	pop	{r4, r5}
 80218c6:	f7ff bdf5 	b.w	80214b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80218ca:	9402      	str	r4, [sp, #8]
 80218cc:	bc30      	pop	{r4, r5}
 80218ce:	f7ff bcfb 	b.w	80212c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80218d2:	9402      	str	r4, [sp, #8]
 80218d4:	bc30      	pop	{r4, r5}
 80218d6:	f7ff bec9 	b.w	802166c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80218da:	bc30      	pop	{r4, r5}
 80218dc:	4770      	bx	lr
	...

080218e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80218e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218e4:	b087      	sub	sp, #28
 80218e6:	4604      	mov	r4, r0
 80218e8:	460e      	mov	r6, r1
 80218ea:	6810      	ldr	r0, [r2, #0]
 80218ec:	6851      	ldr	r1, [r2, #4]
 80218ee:	ad02      	add	r5, sp, #8
 80218f0:	4617      	mov	r7, r2
 80218f2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80218f6:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8021b28 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80218fa:	c503      	stmia	r5!, {r0, r1}
 80218fc:	6818      	ldr	r0, [r3, #0]
 80218fe:	ad04      	add	r5, sp, #16
 8021900:	6859      	ldr	r1, [r3, #4]
 8021902:	c503      	stmia	r5!, {r0, r1}
 8021904:	a802      	add	r0, sp, #8
 8021906:	f7f9 fb55 	bl	801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802190a:	4639      	mov	r1, r7
 802190c:	a804      	add	r0, sp, #16
 802190e:	f7f9 fb79 	bl	801b004 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021912:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021916:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802191a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802191e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021922:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021926:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 802192a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 802192e:	440e      	add	r6, r1
 8021930:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021934:	440a      	add	r2, r1
 8021936:	f8ad 2010 	strh.w	r2, [sp, #16]
 802193a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802193e:	4413      	add	r3, r2
 8021940:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021944:	4b77      	ldr	r3, [pc, #476]	; (8021b24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021946:	6818      	ldr	r0, [r3, #0]
 8021948:	6803      	ldr	r3, [r0, #0]
 802194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802194c:	4798      	blx	r3
 802194e:	f8b9 b000 	ldrh.w	fp, [r9]
 8021952:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021956:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802195a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802195e:	fb05 f50b 	mul.w	r5, r5, fp
 8021962:	fb0b 2303 	mla	r3, fp, r3, r2
 8021966:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802196a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802196e:	9300      	str	r3, [sp, #0]
 8021970:	d069      	beq.n	8021a46 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8021972:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8021976:	4558      	cmp	r0, fp
 8021978:	f080 80cc 	bcs.w	8021b14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 802197c:	9b00      	ldr	r3, [sp, #0]
 802197e:	4631      	mov	r1, r6
 8021980:	18c3      	adds	r3, r0, r3
 8021982:	9301      	str	r3, [sp, #4]
 8021984:	9b01      	ldr	r3, [sp, #4]
 8021986:	4298      	cmp	r0, r3
 8021988:	d24f      	bcs.n	8021a2a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802198a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802198e:	2a00      	cmp	r2, #0
 8021990:	d048      	beq.n	8021a24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021992:	fb0a f202 	mul.w	r2, sl, r2
 8021996:	1c53      	adds	r3, r2, #1
 8021998:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802199c:	121b      	asrs	r3, r3, #8
 802199e:	d041      	beq.n	8021a24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80219a0:	8802      	ldrh	r2, [r0, #0]
 80219a2:	b29e      	uxth	r6, r3
 80219a4:	f8b4 c000 	ldrh.w	ip, [r4]
 80219a8:	43db      	mvns	r3, r3
 80219aa:	1215      	asrs	r5, r2, #8
 80219ac:	b2db      	uxtb	r3, r3
 80219ae:	ea4f 272c 	mov.w	r7, ip, asr #8
 80219b2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80219b6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80219ba:	fb15 f503 	smulbb	r5, r5, r3
 80219be:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80219c2:	00d2      	lsls	r2, r2, #3
 80219c4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80219c8:	fb07 5706 	mla	r7, r7, r6, r5
 80219cc:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80219d0:	b2d2      	uxtb	r2, r2
 80219d2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80219d6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80219da:	fb1e fe03 	smulbb	lr, lr, r3
 80219de:	b2bf      	uxth	r7, r7
 80219e0:	fb12 f203 	smulbb	r2, r2, r3
 80219e4:	fa5f fc8c 	uxtb.w	ip, ip
 80219e8:	fb05 e506 	mla	r5, r5, r6, lr
 80219ec:	f107 0e01 	add.w	lr, r7, #1
 80219f0:	fb0c 2c06 	mla	ip, ip, r6, r2
 80219f4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80219f8:	fa1f fc8c 	uxth.w	ip, ip
 80219fc:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8021a00:	b2ad      	uxth	r5, r5
 8021a02:	f10c 0701 	add.w	r7, ip, #1
 8021a06:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021a0a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021a0e:	ea47 070e 	orr.w	r7, r7, lr
 8021a12:	f105 0e01 	add.w	lr, r5, #1
 8021a16:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8021a1a:	096d      	lsrs	r5, r5, #5
 8021a1c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021a20:	432f      	orrs	r7, r5
 8021a22:	8007      	strh	r7, [r0, #0]
 8021a24:	3002      	adds	r0, #2
 8021a26:	3402      	adds	r4, #2
 8021a28:	e7ac      	b.n	8021984 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8021a2a:	f8b9 3000 	ldrh.w	r3, [r9]
 8021a2e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021a32:	eba3 0308 	sub.w	r3, r3, r8
 8021a36:	eba6 0608 	sub.w	r6, r6, r8
 8021a3a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021a3e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021a42:	440e      	add	r6, r1
 8021a44:	e797      	b.n	8021976 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8021a46:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8021a4a:	42a8      	cmp	r0, r5
 8021a4c:	d262      	bcs.n	8021b14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021a4e:	9b00      	ldr	r3, [sp, #0]
 8021a50:	4631      	mov	r1, r6
 8021a52:	eb00 0b03 	add.w	fp, r0, r3
 8021a56:	4558      	cmp	r0, fp
 8021a58:	d24e      	bcs.n	8021af8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8021a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021a5e:	b12b      	cbz	r3, 8021a6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021a60:	2bff      	cmp	r3, #255	; 0xff
 8021a62:	f8b4 e000 	ldrh.w	lr, [r4]
 8021a66:	d104      	bne.n	8021a72 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8021a68:	f8a0 e000 	strh.w	lr, [r0]
 8021a6c:	3002      	adds	r0, #2
 8021a6e:	3402      	adds	r4, #2
 8021a70:	e7f1      	b.n	8021a56 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8021a72:	8802      	ldrh	r2, [r0, #0]
 8021a74:	b29f      	uxth	r7, r3
 8021a76:	43db      	mvns	r3, r3
 8021a78:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021a7c:	1216      	asrs	r6, r2, #8
 8021a7e:	b2db      	uxtb	r3, r3
 8021a80:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021a84:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021a88:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8021a8c:	00d2      	lsls	r2, r2, #3
 8021a8e:	fb16 f603 	smulbb	r6, r6, r3
 8021a92:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021a96:	b2d2      	uxtb	r2, r2
 8021a98:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021a9c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021aa0:	fb1a fa03 	smulbb	sl, sl, r3
 8021aa4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021aa8:	fa1f fc8c 	uxth.w	ip, ip
 8021aac:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021ab0:	fb12 f303 	smulbb	r3, r2, r3
 8021ab4:	fa5f fe8e 	uxtb.w	lr, lr
 8021ab8:	fb06 a607 	mla	r6, r6, r7, sl
 8021abc:	f10c 0201 	add.w	r2, ip, #1
 8021ac0:	fb0e 3307 	mla	r3, lr, r7, r3
 8021ac4:	b2b6      	uxth	r6, r6
 8021ac6:	b29b      	uxth	r3, r3
 8021ac8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021acc:	f106 0a01 	add.w	sl, r6, #1
 8021ad0:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8021ad4:	f103 0c01 	add.w	ip, r3, #1
 8021ad8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8021adc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021ae0:	0976      	lsrs	r6, r6, #5
 8021ae2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021ae6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021aea:	ea4c 0c02 	orr.w	ip, ip, r2
 8021aee:	ea4c 0c06 	orr.w	ip, ip, r6
 8021af2:	f8a0 c000 	strh.w	ip, [r0]
 8021af6:	e7b9      	b.n	8021a6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021af8:	f8b9 3000 	ldrh.w	r3, [r9]
 8021afc:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021b00:	eba3 0308 	sub.w	r3, r3, r8
 8021b04:	eba6 0608 	sub.w	r6, r6, r8
 8021b08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021b0c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021b10:	440e      	add	r6, r1
 8021b12:	e79a      	b.n	8021a4a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8021b14:	4b03      	ldr	r3, [pc, #12]	; (8021b24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021b16:	6818      	ldr	r0, [r3, #0]
 8021b18:	6803      	ldr	r3, [r0, #0]
 8021b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b1c:	4798      	blx	r3
 8021b1e:	b007      	add	sp, #28
 8021b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b24:	2400af44 	.word	0x2400af44
 8021b28:	2400af3e 	.word	0x2400af3e

08021b2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b30:	b089      	sub	sp, #36	; 0x24
 8021b32:	4682      	mov	sl, r0
 8021b34:	460f      	mov	r7, r1
 8021b36:	4691      	mov	r9, r2
 8021b38:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8021b3c:	4698      	mov	r8, r3
 8021b3e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021b40:	2e00      	cmp	r6, #0
 8021b42:	d03d      	beq.n	8021bc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021b44:	4608      	mov	r0, r1
 8021b46:	f7fc f861 	bl	801dc0c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021b4a:	4605      	mov	r5, r0
 8021b4c:	4638      	mov	r0, r7
 8021b4e:	f7fc f897 	bl	801dc80 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021b52:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021b56:	4638      	mov	r0, r7
 8021b58:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021b5c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021b60:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021b64:	f7fc f95a 	bl	801de1c <_ZNK8touchgfx6Bitmap7getDataEv>
 8021b68:	4605      	mov	r5, r0
 8021b6a:	4638      	mov	r0, r7
 8021b6c:	f7fc f988 	bl	801de80 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021b70:	4681      	mov	r9, r0
 8021b72:	4638      	mov	r0, r7
 8021b74:	f7fc f9dc 	bl	801df30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021b78:	280b      	cmp	r0, #11
 8021b7a:	f200 816f 	bhi.w	8021e5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 8021b7e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8021b82:	00c3      	.short	0x00c3
 8021b84:	000c00b4 	.word	0x000c00b4
 8021b88:	016d016d 	.word	0x016d016d
 8021b8c:	016d016d 	.word	0x016d016d
 8021b90:	016d016d 	.word	0x016d016d
 8021b94:	016d016d 	.word	0x016d016d
 8021b98:	00bb      	.short	0x00bb
 8021b9a:	4bb3      	ldr	r3, [pc, #716]	; (8021e68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 8021b9c:	6818      	ldr	r0, [r3, #0]
 8021b9e:	6803      	ldr	r3, [r0, #0]
 8021ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021ba2:	4798      	blx	r3
 8021ba4:	2eff      	cmp	r6, #255	; 0xff
 8021ba6:	d121      	bne.n	8021bec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8021ba8:	0683      	lsls	r3, r0, #26
 8021baa:	d41f      	bmi.n	8021bec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8021bac:	4638      	mov	r0, r7
 8021bae:	f7fc f8fb 	bl	801dda8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021bb2:	b940      	cbnz	r0, 8021bc6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8021bb4:	4623      	mov	r3, r4
 8021bb6:	aa02      	add	r2, sp, #8
 8021bb8:	4629      	mov	r1, r5
 8021bba:	4650      	mov	r0, sl
 8021bbc:	f7ff f9e4 	bl	8020f88 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021bc0:	b009      	add	sp, #36	; 0x24
 8021bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bc6:	f10d 0818 	add.w	r8, sp, #24
 8021bca:	4639      	mov	r1, r7
 8021bcc:	af04      	add	r7, sp, #16
 8021bce:	4640      	mov	r0, r8
 8021bd0:	f7fc f890 	bl	801dcf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021bd4:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021bd8:	e887 0003 	stmia.w	r7, {r0, r1}
 8021bdc:	4638      	mov	r0, r7
 8021bde:	4621      	mov	r1, r4
 8021be0:	f7f5 fc4c 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 8021be4:	4638      	mov	r0, r7
 8021be6:	f7f5 fc8c 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021bea:	b130      	cbz	r0, 8021bfa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 8021bec:	4633      	mov	r3, r6
 8021bee:	4622      	mov	r2, r4
 8021bf0:	a902      	add	r1, sp, #8
 8021bf2:	4628      	mov	r0, r5
 8021bf4:	f7ff f8e2 	bl	8020dbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021bf8:	e7e2      	b.n	8021bc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021bfa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021bfe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021c02:	4293      	cmp	r3, r2
 8021c04:	dd12      	ble.n	8021c2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 8021c06:	1a9b      	subs	r3, r3, r2
 8021c08:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021c0c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021c10:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021c14:	4628      	mov	r0, r5
 8021c16:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021c1a:	4642      	mov	r2, r8
 8021c1c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021c20:	a902      	add	r1, sp, #8
 8021c22:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021c26:	4633      	mov	r3, r6
 8021c28:	f7ff f8c8 	bl	8020dbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021c2c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021c30:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021c34:	4293      	cmp	r3, r2
 8021c36:	dd12      	ble.n	8021c5e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 8021c38:	1a9b      	subs	r3, r3, r2
 8021c3a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021c3e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021c42:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021c46:	4642      	mov	r2, r8
 8021c48:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021c4c:	4628      	mov	r0, r5
 8021c4e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021c52:	23ff      	movs	r3, #255	; 0xff
 8021c54:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021c58:	a902      	add	r1, sp, #8
 8021c5a:	f7ff f8af 	bl	8020dbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021c5e:	463b      	mov	r3, r7
 8021c60:	aa02      	add	r2, sp, #8
 8021c62:	4629      	mov	r1, r5
 8021c64:	4650      	mov	r0, sl
 8021c66:	f7ff f98f 	bl	8020f88 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021c6a:	88a2      	ldrh	r2, [r4, #4]
 8021c6c:	8823      	ldrh	r3, [r4, #0]
 8021c6e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021c72:	4413      	add	r3, r2
 8021c74:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021c78:	440a      	add	r2, r1
 8021c7a:	b29b      	uxth	r3, r3
 8021c7c:	b292      	uxth	r2, r2
 8021c7e:	b218      	sxth	r0, r3
 8021c80:	b211      	sxth	r1, r2
 8021c82:	4288      	cmp	r0, r1
 8021c84:	dd12      	ble.n	8021cac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8021c86:	1a9b      	subs	r3, r3, r2
 8021c88:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021c8c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8021c90:	4642      	mov	r2, r8
 8021c92:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021c96:	a902      	add	r1, sp, #8
 8021c98:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021c9c:	23ff      	movs	r3, #255	; 0xff
 8021c9e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021ca2:	4628      	mov	r0, r5
 8021ca4:	f8ad 601a 	strh.w	r6, [sp, #26]
 8021ca8:	f7ff f888 	bl	8020dbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021cac:	88e2      	ldrh	r2, [r4, #6]
 8021cae:	8863      	ldrh	r3, [r4, #2]
 8021cb0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021cb4:	4413      	add	r3, r2
 8021cb6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021cba:	440a      	add	r2, r1
 8021cbc:	b29b      	uxth	r3, r3
 8021cbe:	b292      	uxth	r2, r2
 8021cc0:	b218      	sxth	r0, r3
 8021cc2:	b211      	sxth	r1, r2
 8021cc4:	4288      	cmp	r0, r1
 8021cc6:	f77f af7b 	ble.w	8021bc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021cca:	1a9b      	subs	r3, r3, r2
 8021ccc:	f9b4 6000 	ldrsh.w	r6, [r4]
 8021cd0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021cd4:	4642      	mov	r2, r8
 8021cd6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021cda:	23ff      	movs	r3, #255	; 0xff
 8021cdc:	f8ad 6018 	strh.w	r6, [sp, #24]
 8021ce0:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021ce4:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021ce8:	e782      	b.n	8021bf0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8021cea:	4633      	mov	r3, r6
 8021cec:	4622      	mov	r2, r4
 8021cee:	a902      	add	r1, sp, #8
 8021cf0:	4628      	mov	r0, r5
 8021cf2:	f7ff f9b9 	bl	8021068 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8021cf6:	e763      	b.n	8021bc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021cf8:	9600      	str	r6, [sp, #0]
 8021cfa:	4623      	mov	r3, r4
 8021cfc:	aa02      	add	r2, sp, #8
 8021cfe:	4649      	mov	r1, r9
 8021d00:	4628      	mov	r0, r5
 8021d02:	f7ff fdd5 	bl	80218b0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021d06:	e75b      	b.n	8021bc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021d08:	4638      	mov	r0, r7
 8021d0a:	f7fc f84d 	bl	801dda8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021d0e:	b950      	cbnz	r0, 8021d26 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 8021d10:	f8da 3000 	ldr.w	r3, [sl]
 8021d14:	aa02      	add	r2, sp, #8
 8021d16:	4629      	mov	r1, r5
 8021d18:	e9cd 6000 	strd	r6, r0, [sp]
 8021d1c:	4650      	mov	r0, sl
 8021d1e:	68de      	ldr	r6, [r3, #12]
 8021d20:	4623      	mov	r3, r4
 8021d22:	47b0      	blx	r6
 8021d24:	e74c      	b.n	8021bc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021d26:	f10d 0818 	add.w	r8, sp, #24
 8021d2a:	4639      	mov	r1, r7
 8021d2c:	af04      	add	r7, sp, #16
 8021d2e:	4640      	mov	r0, r8
 8021d30:	f7fb ffe0 	bl	801dcf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021d34:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021d38:	e887 0003 	stmia.w	r7, {r0, r1}
 8021d3c:	4638      	mov	r0, r7
 8021d3e:	4621      	mov	r1, r4
 8021d40:	f7f5 fb9c 	bl	801747c <_ZN8touchgfx4RectaNERKS0_>
 8021d44:	4638      	mov	r0, r7
 8021d46:	f7f5 fbdc 	bl	8017502 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021d4a:	b138      	cbz	r0, 8021d5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8021d4c:	4623      	mov	r3, r4
 8021d4e:	9600      	str	r6, [sp, #0]
 8021d50:	aa02      	add	r2, sp, #8
 8021d52:	4649      	mov	r1, r9
 8021d54:	4628      	mov	r0, r5
 8021d56:	f7ff fdc3 	bl	80218e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021d5a:	e731      	b.n	8021bc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021d5c:	f8da 3000 	ldr.w	r3, [sl]
 8021d60:	aa02      	add	r2, sp, #8
 8021d62:	4629      	mov	r1, r5
 8021d64:	e9cd 6000 	strd	r6, r0, [sp]
 8021d68:	4650      	mov	r0, sl
 8021d6a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8021d6e:	463b      	mov	r3, r7
 8021d70:	47d8      	blx	fp
 8021d72:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021d76:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021d7a:	4293      	cmp	r3, r2
 8021d7c:	dd13      	ble.n	8021da6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 8021d7e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021d82:	1a9b      	subs	r3, r3, r2
 8021d84:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021d88:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021d8c:	4628      	mov	r0, r5
 8021d8e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021d92:	aa02      	add	r2, sp, #8
 8021d94:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021d98:	4649      	mov	r1, r9
 8021d9a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021d9e:	4643      	mov	r3, r8
 8021da0:	9600      	str	r6, [sp, #0]
 8021da2:	f7ff fd9d 	bl	80218e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021da6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021daa:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021dae:	4293      	cmp	r3, r2
 8021db0:	dd13      	ble.n	8021dda <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 8021db2:	1a9b      	subs	r3, r3, r2
 8021db4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021db8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021dbc:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021dc0:	aa02      	add	r2, sp, #8
 8021dc2:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021dc6:	4628      	mov	r0, r5
 8021dc8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021dcc:	4643      	mov	r3, r8
 8021dce:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021dd2:	4649      	mov	r1, r9
 8021dd4:	9600      	str	r6, [sp, #0]
 8021dd6:	f7ff fd83 	bl	80218e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021dda:	88a2      	ldrh	r2, [r4, #4]
 8021ddc:	8823      	ldrh	r3, [r4, #0]
 8021dde:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021de2:	4413      	add	r3, r2
 8021de4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021de8:	440a      	add	r2, r1
 8021dea:	b29b      	uxth	r3, r3
 8021dec:	b292      	uxth	r2, r2
 8021dee:	b218      	sxth	r0, r3
 8021df0:	b211      	sxth	r1, r2
 8021df2:	4288      	cmp	r0, r1
 8021df4:	dd13      	ble.n	8021e1e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 8021df6:	1a9b      	subs	r3, r3, r2
 8021df8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021dfc:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8021e00:	aa02      	add	r2, sp, #8
 8021e02:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021e06:	4649      	mov	r1, r9
 8021e08:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021e0c:	4643      	mov	r3, r8
 8021e0e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021e12:	4628      	mov	r0, r5
 8021e14:	9600      	str	r6, [sp, #0]
 8021e16:	f8ad 701a 	strh.w	r7, [sp, #26]
 8021e1a:	f7ff fd61 	bl	80218e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021e1e:	88e2      	ldrh	r2, [r4, #6]
 8021e20:	8863      	ldrh	r3, [r4, #2]
 8021e22:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021e26:	4413      	add	r3, r2
 8021e28:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021e2c:	440a      	add	r2, r1
 8021e2e:	b29b      	uxth	r3, r3
 8021e30:	b292      	uxth	r2, r2
 8021e32:	b218      	sxth	r0, r3
 8021e34:	b211      	sxth	r1, r2
 8021e36:	4288      	cmp	r0, r1
 8021e38:	f77f aec2 	ble.w	8021bc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021e3c:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021e40:	1a9b      	subs	r3, r3, r2
 8021e42:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021e46:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021e4a:	4643      	mov	r3, r8
 8021e4c:	f8ad 7018 	strh.w	r7, [sp, #24]
 8021e50:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021e54:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021e58:	9600      	str	r6, [sp, #0]
 8021e5a:	e779      	b.n	8021d50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8021e5c:	4b03      	ldr	r3, [pc, #12]	; (8021e6c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8021e5e:	21b4      	movs	r1, #180	; 0xb4
 8021e60:	4a03      	ldr	r2, [pc, #12]	; (8021e70 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 8021e62:	4804      	ldr	r0, [pc, #16]	; (8021e74 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 8021e64:	f007 ff44 	bl	8029cf0 <__assert_func>
 8021e68:	2400af44 	.word	0x2400af44
 8021e6c:	0802e11f 	.word	0x0802e11f
 8021e70:	0802e827 	.word	0x0802e827
 8021e74:	0802e255 	.word	0x0802e255

08021e78 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021e78:	b508      	push	{r3, lr}
 8021e7a:	b180      	cbz	r0, 8021e9e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8021e7c:	2902      	cmp	r1, #2
 8021e7e:	d014      	beq.n	8021eaa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8021e80:	2903      	cmp	r1, #3
 8021e82:	d01d      	beq.n	8021ec0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8021e84:	2901      	cmp	r1, #1
 8021e86:	d101      	bne.n	8021e8c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8021e88:	2001      	movs	r0, #1
 8021e8a:	bd08      	pop	{r3, pc}
 8021e8c:	4b0e      	ldr	r3, [pc, #56]	; (8021ec8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021e8e:	8818      	ldrh	r0, [r3, #0]
 8021e90:	b990      	cbnz	r0, 8021eb8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021e92:	4b0e      	ldr	r3, [pc, #56]	; (8021ecc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8021e94:	2150      	movs	r1, #80	; 0x50
 8021e96:	4a0e      	ldr	r2, [pc, #56]	; (8021ed0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8021e98:	480e      	ldr	r0, [pc, #56]	; (8021ed4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8021e9a:	f007 ff29 	bl	8029cf0 <__assert_func>
 8021e9e:	2902      	cmp	r1, #2
 8021ea0:	d00e      	beq.n	8021ec0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8021ea2:	2903      	cmp	r1, #3
 8021ea4:	d0f2      	beq.n	8021e8c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8021ea6:	2901      	cmp	r1, #1
 8021ea8:	d1ee      	bne.n	8021e88 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8021eaa:	4b07      	ldr	r3, [pc, #28]	; (8021ec8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021eac:	8818      	ldrh	r0, [r3, #0]
 8021eae:	2800      	cmp	r0, #0
 8021eb0:	d0ef      	beq.n	8021e92 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8021eb2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021eb6:	e7e8      	b.n	8021e8a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021eb8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021ebc:	4240      	negs	r0, r0
 8021ebe:	e7e4      	b.n	8021e8a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8021ec4:	e7e1      	b.n	8021e8a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021ec6:	bf00      	nop
 8021ec8:	2400af3e 	.word	0x2400af3e
 8021ecc:	0802e3ab 	.word	0x0802e3ab
 8021ed0:	0802e9a4 	.word	0x0802e9a4
 8021ed4:	0802e3ed 	.word	0x0802e3ed

08021ed8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8021ed8:	b508      	push	{r3, lr}
 8021eda:	b180      	cbz	r0, 8021efe <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8021edc:	2902      	cmp	r1, #2
 8021ede:	d014      	beq.n	8021f0a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8021ee0:	2903      	cmp	r1, #3
 8021ee2:	d018      	beq.n	8021f16 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8021ee4:	2901      	cmp	r1, #1
 8021ee6:	d001      	beq.n	8021eec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8021ee8:	2001      	movs	r0, #1
 8021eea:	e013      	b.n	8021f14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8021eec:	4b0e      	ldr	r3, [pc, #56]	; (8021f28 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021eee:	8818      	ldrh	r0, [r3, #0]
 8021ef0:	b970      	cbnz	r0, 8021f10 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8021ef2:	4b0e      	ldr	r3, [pc, #56]	; (8021f2c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8021ef4:	2150      	movs	r1, #80	; 0x50
 8021ef6:	4a0e      	ldr	r2, [pc, #56]	; (8021f30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8021ef8:	480e      	ldr	r0, [pc, #56]	; (8021f34 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8021efa:	f007 fef9 	bl	8029cf0 <__assert_func>
 8021efe:	2902      	cmp	r1, #2
 8021f00:	d009      	beq.n	8021f16 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8021f02:	2903      	cmp	r1, #3
 8021f04:	d0f0      	beq.n	8021ee8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8021f06:	2901      	cmp	r1, #1
 8021f08:	d1f0      	bne.n	8021eec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8021f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8021f0e:	e001      	b.n	8021f14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8021f10:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021f14:	bd08      	pop	{r3, pc}
 8021f16:	4b04      	ldr	r3, [pc, #16]	; (8021f28 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021f18:	8818      	ldrh	r0, [r3, #0]
 8021f1a:	2800      	cmp	r0, #0
 8021f1c:	d0e9      	beq.n	8021ef2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8021f1e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021f22:	4240      	negs	r0, r0
 8021f24:	e7f6      	b.n	8021f14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8021f26:	bf00      	nop
 8021f28:	2400af3e 	.word	0x2400af3e
 8021f2c:	0802e3ab 	.word	0x0802e3ab
 8021f30:	0802e9a4 	.word	0x0802e9a4
 8021f34:	0802e3ed 	.word	0x0802e3ed

08021f38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f3c:	b099      	sub	sp, #100	; 0x64
 8021f3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8021f40:	a914      	add	r1, sp, #80	; 0x50
 8021f42:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8021f46:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8021f4a:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8021f4e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8021f52:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8021f56:	e881 000c 	stmia.w	r1, {r2, r3}
 8021f5a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8021f5e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8021f62:	930a      	str	r3, [sp, #40]	; 0x28
 8021f64:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021f68:	f891 900d 	ldrb.w	r9, [r1, #13]
 8021f6c:	9311      	str	r3, [sp, #68]	; 0x44
 8021f6e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8021f72:	7988      	ldrb	r0, [r1, #6]
 8021f74:	930c      	str	r3, [sp, #48]	; 0x30
 8021f76:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8021f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021f7e:	4303      	orrs	r3, r0
 8021f80:	9309      	str	r3, [sp, #36]	; 0x24
 8021f82:	f000 81a1 	beq.w	80222c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8021f86:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8021f8a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8021f8e:	f891 9007 	ldrb.w	r9, [r1, #7]
 8021f92:	ea59 0903 	orrs.w	r9, r9, r3
 8021f96:	f000 8197 	beq.w	80222c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8021f9a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8021f9e:	b29b      	uxth	r3, r3
 8021fa0:	2e00      	cmp	r6, #0
 8021fa2:	f000 813a 	beq.w	802221a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8021fa6:	1af6      	subs	r6, r6, r3
 8021fa8:	b2b6      	uxth	r6, r6
 8021faa:	0433      	lsls	r3, r6, #16
 8021fac:	d502      	bpl.n	8021fb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8021fae:	1bad      	subs	r5, r5, r6
 8021fb0:	2600      	movs	r6, #0
 8021fb2:	b22d      	sxth	r5, r5
 8021fb4:	f9b2 1000 	ldrsh.w	r1, [r2]
 8021fb8:	a814      	add	r0, sp, #80	; 0x50
 8021fba:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8021fbe:	428d      	cmp	r5, r1
 8021fc0:	b28b      	uxth	r3, r1
 8021fc2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8021fc6:	bfbf      	itttt	lt
 8021fc8:	18f6      	addlt	r6, r6, r3
 8021fca:	1b75      	sublt	r5, r6, r5
 8021fcc:	b2ae      	uxthlt	r6, r5
 8021fce:	460d      	movlt	r5, r1
 8021fd0:	8891      	ldrh	r1, [r2, #4]
 8021fd2:	440b      	add	r3, r1
 8021fd4:	4629      	mov	r1, r5
 8021fd6:	b21b      	sxth	r3, r3
 8021fd8:	9310      	str	r3, [sp, #64]	; 0x40
 8021fda:	88d3      	ldrh	r3, [r2, #6]
 8021fdc:	8852      	ldrh	r2, [r2, #2]
 8021fde:	4413      	add	r3, r2
 8021fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021fe2:	b21b      	sxth	r3, r3
 8021fe4:	930f      	str	r3, [sp, #60]	; 0x3c
 8021fe6:	4bbd      	ldr	r3, [pc, #756]	; (80222dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8021fe8:	f893 b000 	ldrb.w	fp, [r3]
 8021fec:	f10b 3cff 	add.w	ip, fp, #4294967295
 8021ff0:	f1dc 0300 	rsbs	r3, ip, #0
 8021ff4:	eb43 030c 	adc.w	r3, r3, ip
 8021ff8:	930e      	str	r3, [sp, #56]	; 0x38
 8021ffa:	4653      	mov	r3, sl
 8021ffc:	f7f8 fe5e 	bl	801acbc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022000:	4629      	mov	r1, r5
 8022002:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8022006:	4653      	mov	r3, sl
 8022008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802200a:	a814      	add	r0, sp, #80	; 0x50
 802200c:	f7f8 fe6e 	bl	801acec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022010:	a918      	add	r1, sp, #96	; 0x60
 8022012:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022016:	a817      	add	r0, sp, #92	; 0x5c
 8022018:	f7f8 ff8a 	bl	801af30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802201c:	f1ba 0f00 	cmp.w	sl, #0
 8022020:	f040 80fe 	bne.w	8022220 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8022024:	f1bb 0f01 	cmp.w	fp, #1
 8022028:	f040 8102 	bne.w	8022230 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 802202c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802202e:	b153      	cbz	r3, 8022046 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022030:	2408      	movs	r4, #8
 8022032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022034:	fb94 f3f8 	sdiv	r3, r4, r8
 8022038:	1e5c      	subs	r4, r3, #1
 802203a:	4414      	add	r4, r2
 802203c:	fb94 f4f3 	sdiv	r4, r4, r3
 8022040:	fb14 f403 	smulbb	r4, r4, r3
 8022044:	b2a4      	uxth	r4, r4
 8022046:	b906      	cbnz	r6, 802204a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8022048:	b16f      	cbz	r7, 8022066 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 802204a:	fb07 6304 	mla	r3, r7, r4, r6
 802204e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022050:	463a      	mov	r2, r7
 8022052:	fb08 f303 	mul.w	r3, r8, r3
 8022056:	f003 0707 	and.w	r7, r3, #7
 802205a:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 802205e:	9328      	str	r3, [sp, #160]	; 0xa0
 8022060:	eba9 0302 	sub.w	r3, r9, r2
 8022064:	930d      	str	r3, [sp, #52]	; 0x34
 8022066:	4651      	mov	r1, sl
 8022068:	980e      	ldr	r0, [sp, #56]	; 0x38
 802206a:	f7ff ff05 	bl	8021e78 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 802206e:	4651      	mov	r1, sl
 8022070:	4681      	mov	r9, r0
 8022072:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022074:	f7ff ff30 	bl	8021ed8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802207a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802207c:	4683      	mov	fp, r0
 802207e:	eba3 0a02 	sub.w	sl, r3, r2
 8022082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022084:	459a      	cmp	sl, r3
 8022086:	bfa8      	it	ge
 8022088:	469a      	movge	sl, r3
 802208a:	f1ba 0f00 	cmp.w	sl, #0
 802208e:	f340 811b 	ble.w	80222c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022092:	1bad      	subs	r5, r5, r6
 8022094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022096:	1b5d      	subs	r5, r3, r5
 8022098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802209a:	429d      	cmp	r5, r3
 802209c:	bfd4      	ite	le
 802209e:	ebc6 0605 	rsble	r6, r6, r5
 80220a2:	ebc6 0603 	rsbgt	r6, r6, r3
 80220a6:	2e00      	cmp	r6, #0
 80220a8:	f340 810e 	ble.w	80222c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80220ac:	1ba4      	subs	r4, r4, r6
 80220ae:	fb08 f304 	mul.w	r3, r8, r4
 80220b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80220b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80220b6:	2b00      	cmp	r3, #0
 80220b8:	f040 810b 	bne.w	80222d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80220bc:	4b88      	ldr	r3, [pc, #544]	; (80222e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 80220be:	6818      	ldr	r0, [r3, #0]
 80220c0:	6803      	ldr	r3, [r0, #0]
 80220c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80220c4:	4798      	blx	r3
 80220c6:	2301      	movs	r3, #1
 80220c8:	4a86      	ldr	r2, [pc, #536]	; (80222e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80220ca:	fa03 f308 	lsl.w	r3, r3, r8
 80220ce:	8811      	ldrh	r1, [r2, #0]
 80220d0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80220d4:	3b01      	subs	r3, #1
 80220d6:	b2db      	uxtb	r3, r3
 80220d8:	930e      	str	r3, [sp, #56]	; 0x38
 80220da:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80220de:	fb01 2303 	mla	r3, r1, r3, r2
 80220e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80220e6:	930a      	str	r3, [sp, #40]	; 0x28
 80220e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80220ea:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80220ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80220f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80220f2:	0a19      	lsrs	r1, r3, #8
 80220f4:	b2cb      	uxtb	r3, r1
 80220f6:	9312      	str	r3, [sp, #72]	; 0x48
 80220f8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80220fa:	b2db      	uxtb	r3, r3
 80220fc:	9311      	str	r3, [sp, #68]	; 0x44
 80220fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022100:	095a      	lsrs	r2, r3, #5
 8022102:	4b79      	ldr	r3, [pc, #484]	; (80222e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8022104:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022108:	400b      	ands	r3, r1
 802210a:	4313      	orrs	r3, r2
 802210c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802210e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022112:	4313      	orrs	r3, r2
 8022114:	b29b      	uxth	r3, r3
 8022116:	9310      	str	r3, [sp, #64]	; 0x40
 8022118:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802211a:	781a      	ldrb	r2, [r3, #0]
 802211c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8022120:	fb06 b919 	mls	r9, r6, r9, fp
 8022124:	413a      	asrs	r2, r7
 8022126:	fb03 fb06 	mul.w	fp, r3, r6
 802212a:	930d      	str	r3, [sp, #52]	; 0x34
 802212c:	b2d2      	uxtb	r2, r2
 802212e:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8022132:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8022136:	f0c0 80ea 	bcc.w	802230e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 802213a:	46b6      	mov	lr, r6
 802213c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8022140:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8022144:	f0c0 80d2 	bcc.w	80222ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8022148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802214a:	4013      	ands	r3, r2
 802214c:	d055      	beq.n	80221fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 802214e:	20ff      	movs	r0, #255	; 0xff
 8022150:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022152:	fb90 f1f1 	sdiv	r1, r0, r1
 8022156:	434b      	muls	r3, r1
 8022158:	2bfe      	cmp	r3, #254	; 0xfe
 802215a:	dd03      	ble.n	8022164 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 802215c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802215e:	4281      	cmp	r1, r0
 8022160:	f000 80b9 	beq.w	80222d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8022164:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022166:	f8bc 4000 	ldrh.w	r4, [ip]
 802216a:	fb11 f303 	smulbb	r3, r1, r3
 802216e:	1220      	asrs	r0, r4, #8
 8022170:	b29b      	uxth	r3, r3
 8022172:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022176:	1c59      	adds	r1, r3, #1
 8022178:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802217c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022180:	10e1      	asrs	r1, r4, #3
 8022182:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022186:	00e4      	lsls	r4, r4, #3
 8022188:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802218c:	b29d      	uxth	r5, r3
 802218e:	43db      	mvns	r3, r3
 8022190:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8022194:	b2db      	uxtb	r3, r3
 8022196:	b2e4      	uxtb	r4, r4
 8022198:	9309      	str	r3, [sp, #36]	; 0x24
 802219a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802219c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80221a0:	fb13 f905 	smulbb	r9, r3, r5
 80221a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221a6:	fb00 9003 	mla	r0, r0, r3, r9
 80221aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80221ac:	fb13 f905 	smulbb	r9, r3, r5
 80221b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221b2:	b280      	uxth	r0, r0
 80221b4:	fb01 9103 	mla	r1, r1, r3, r9
 80221b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80221ba:	fb13 f505 	smulbb	r5, r3, r5
 80221be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221c0:	b289      	uxth	r1, r1
 80221c2:	fb04 5403 	mla	r4, r4, r3, r5
 80221c6:	1c43      	adds	r3, r0, #1
 80221c8:	b2a4      	uxth	r4, r4
 80221ca:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80221ce:	f104 0901 	add.w	r9, r4, #1
 80221d2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80221d6:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 80221da:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80221de:	ea49 0000 	orr.w	r0, r9, r0
 80221e2:	f101 0901 	add.w	r9, r1, #1
 80221e6:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 80221ea:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80221ee:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80221f2:	ea40 0009 	orr.w	r0, r0, r9
 80221f6:	f8ac 0000 	strh.w	r0, [ip]
 80221fa:	4447      	add	r7, r8
 80221fc:	b2bf      	uxth	r7, r7
 80221fe:	2f07      	cmp	r7, #7
 8022200:	bf89      	itett	hi
 8022202:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8022204:	fa42 f208 	asrls.w	r2, r2, r8
 8022208:	2700      	movhi	r7, #0
 802220a:	785a      	ldrbhi	r2, [r3, #1]
 802220c:	bf8a      	itet	hi
 802220e:	3301      	addhi	r3, #1
 8022210:	b2d2      	uxtbls	r2, r2
 8022212:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8022214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022216:	449c      	add	ip, r3
 8022218:	e792      	b.n	8022140 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 802221a:	441d      	add	r5, r3
 802221c:	b22d      	sxth	r5, r5
 802221e:	e6c9      	b.n	8021fb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8022220:	f1ba 0f01 	cmp.w	sl, #1
 8022224:	f47f af02 	bne.w	802202c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022228:	f1bb 0f01 	cmp.w	fp, #1
 802222c:	f47f aefe 	bne.w	802202c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022230:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80222e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 8022234:	f8db 0000 	ldr.w	r0, [fp]
 8022238:	6803      	ldr	r3, [r0, #0]
 802223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802223c:	4798      	blx	r3
 802223e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8022242:	465a      	mov	r2, fp
 8022244:	d006      	beq.n	8022254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8022246:	f1b8 0f04 	cmp.w	r8, #4
 802224a:	d140      	bne.n	80222ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 802224c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802224e:	3300      	adds	r3, #0
 8022250:	bf18      	it	ne
 8022252:	2301      	movne	r3, #1
 8022254:	0580      	lsls	r0, r0, #22
 8022256:	d563      	bpl.n	8022320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8022258:	f1b8 0f08 	cmp.w	r8, #8
 802225c:	d160      	bne.n	8022320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 802225e:	2b00      	cmp	r3, #0
 8022260:	bf0c      	ite	eq
 8022262:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8022266:	f44f 7180 	movne.w	r1, #256	; 0x100
 802226a:	2e00      	cmp	r6, #0
 802226c:	f47f aede 	bne.w	802202c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022270:	2f00      	cmp	r7, #0
 8022272:	f47f aedb 	bne.w	802202c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022278:	9810      	ldr	r0, [sp, #64]	; 0x40
 802227a:	18eb      	adds	r3, r5, r3
 802227c:	4283      	cmp	r3, r0
 802227e:	f73f aed5 	bgt.w	802202c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022284:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022286:	444b      	add	r3, r9
 8022288:	4283      	cmp	r3, r0
 802228a:	f73f aecf 	bgt.w	802202c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802228e:	f1b8 0f08 	cmp.w	r8, #8
 8022292:	6810      	ldr	r0, [r2, #0]
 8022294:	f04f 0600 	mov.w	r6, #0
 8022298:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 802229c:	bf18      	it	ne
 802229e:	3401      	addne	r4, #1
 80222a0:	6805      	ldr	r5, [r0, #0]
 80222a2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 80222a6:	bf18      	it	ne
 80222a8:	f024 0401 	bicne.w	r4, r4, #1
 80222ac:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80222b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80222b2:	bf18      	it	ne
 80222b4:	b2a4      	uxthne	r4, r4
 80222b6:	9104      	str	r1, [sp, #16]
 80222b8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80222ba:	e9cd 4900 	strd	r4, r9, [sp]
 80222be:	e9cd 4102 	strd	r4, r1, [sp, #8]
 80222c2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80222c4:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 80222c6:	47a0      	blx	r4
 80222c8:	b019      	add	sp, #100	; 0x64
 80222ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222ce:	2300      	movs	r3, #0
 80222d0:	e7c0      	b.n	8022254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 80222d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80222d4:	e6f7      	b.n	80220c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 80222d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80222d8:	e78d      	b.n	80221f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 80222da:	bf00      	nop
 80222dc:	2400af3c 	.word	0x2400af3c
 80222e0:	2400af44 	.word	0x2400af44
 80222e4:	2400af3e 	.word	0x2400af3e
 80222e8:	00fff800 	.word	0x00fff800
 80222ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80222ee:	b153      	cbz	r3, 8022306 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 80222f0:	441f      	add	r7, r3
 80222f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80222f4:	b2bf      	uxth	r7, r7
 80222f6:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 80222fa:	f007 0707 	and.w	r7, r7, #7
 80222fe:	781a      	ldrb	r2, [r3, #0]
 8022300:	9328      	str	r3, [sp, #160]	; 0xa0
 8022302:	413a      	asrs	r2, r7
 8022304:	b2d2      	uxtb	r2, r2
 8022306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022308:	445b      	add	r3, fp
 802230a:	930a      	str	r3, [sp, #40]	; 0x28
 802230c:	e711      	b.n	8022132 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 802230e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022310:	2b00      	cmp	r3, #0
 8022312:	d1d9      	bne.n	80222c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022314:	4b05      	ldr	r3, [pc, #20]	; (802232c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 8022316:	6818      	ldr	r0, [r3, #0]
 8022318:	6803      	ldr	r3, [r0, #0]
 802231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802231c:	4798      	blx	r3
 802231e:	e7d3      	b.n	80222c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022320:	2b00      	cmp	r3, #0
 8022322:	f43f ae83 	beq.w	802202c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022326:	f44f 7180 	mov.w	r1, #256	; 0x100
 802232a:	e79e      	b.n	802226a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 802232c:	2400af44 	.word	0x2400af44

08022330 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8022330:	b538      	push	{r3, r4, r5, lr}
 8022332:	4c15      	ldr	r4, [pc, #84]	; (8022388 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8022334:	4605      	mov	r5, r0
 8022336:	7823      	ldrb	r3, [r4, #0]
 8022338:	f3bf 8f5b 	dmb	ish
 802233c:	07da      	lsls	r2, r3, #31
 802233e:	d40b      	bmi.n	8022358 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022340:	4620      	mov	r0, r4
 8022342:	f007 fca8 	bl	8029c96 <__cxa_guard_acquire>
 8022346:	b138      	cbz	r0, 8022358 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022348:	4620      	mov	r0, r4
 802234a:	f007 fcb0 	bl	8029cae <__cxa_guard_release>
 802234e:	4a0f      	ldr	r2, [pc, #60]	; (802238c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022350:	490f      	ldr	r1, [pc, #60]	; (8022390 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8022352:	4810      	ldr	r0, [pc, #64]	; (8022394 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022354:	f007 fc98 	bl	8029c88 <__aeabi_atexit>
 8022358:	4c0f      	ldr	r4, [pc, #60]	; (8022398 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802235a:	7823      	ldrb	r3, [r4, #0]
 802235c:	f3bf 8f5b 	dmb	ish
 8022360:	07db      	lsls	r3, r3, #31
 8022362:	d40b      	bmi.n	802237c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022364:	4620      	mov	r0, r4
 8022366:	f007 fc96 	bl	8029c96 <__cxa_guard_acquire>
 802236a:	b138      	cbz	r0, 802237c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 802236c:	4620      	mov	r0, r4
 802236e:	f007 fc9e 	bl	8029cae <__cxa_guard_release>
 8022372:	4a06      	ldr	r2, [pc, #24]	; (802238c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022374:	4909      	ldr	r1, [pc, #36]	; (802239c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8022376:	480a      	ldr	r0, [pc, #40]	; (80223a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022378:	f007 fc86 	bl	8029c88 <__aeabi_atexit>
 802237c:	4b05      	ldr	r3, [pc, #20]	; (8022394 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802237e:	612b      	str	r3, [r5, #16]
 8022380:	4b07      	ldr	r3, [pc, #28]	; (80223a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022382:	616b      	str	r3, [r5, #20]
 8022384:	bd38      	pop	{r3, r4, r5, pc}
 8022386:	bf00      	nop
 8022388:	2400b010 	.word	0x2400b010
 802238c:	24000000 	.word	0x24000000
 8022390:	0802052f 	.word	0x0802052f
 8022394:	240000ac 	.word	0x240000ac
 8022398:	2400b014 	.word	0x2400b014
 802239c:	0802052d 	.word	0x0802052d
 80223a0:	240000b0 	.word	0x240000b0

080223a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80223a4:	b538      	push	{r3, r4, r5, lr}
 80223a6:	4c15      	ldr	r4, [pc, #84]	; (80223fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80223a8:	4605      	mov	r5, r0
 80223aa:	7823      	ldrb	r3, [r4, #0]
 80223ac:	f3bf 8f5b 	dmb	ish
 80223b0:	07da      	lsls	r2, r3, #31
 80223b2:	d40b      	bmi.n	80223cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80223b4:	4620      	mov	r0, r4
 80223b6:	f007 fc6e 	bl	8029c96 <__cxa_guard_acquire>
 80223ba:	b138      	cbz	r0, 80223cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80223bc:	4620      	mov	r0, r4
 80223be:	f007 fc76 	bl	8029cae <__cxa_guard_release>
 80223c2:	4a0f      	ldr	r2, [pc, #60]	; (8022400 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80223c4:	490f      	ldr	r1, [pc, #60]	; (8022404 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80223c6:	4810      	ldr	r0, [pc, #64]	; (8022408 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80223c8:	f007 fc5e 	bl	8029c88 <__aeabi_atexit>
 80223cc:	4c0f      	ldr	r4, [pc, #60]	; (802240c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80223ce:	7823      	ldrb	r3, [r4, #0]
 80223d0:	f3bf 8f5b 	dmb	ish
 80223d4:	07db      	lsls	r3, r3, #31
 80223d6:	d40b      	bmi.n	80223f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80223d8:	4620      	mov	r0, r4
 80223da:	f007 fc5c 	bl	8029c96 <__cxa_guard_acquire>
 80223de:	b138      	cbz	r0, 80223f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80223e0:	4620      	mov	r0, r4
 80223e2:	f007 fc64 	bl	8029cae <__cxa_guard_release>
 80223e6:	4a06      	ldr	r2, [pc, #24]	; (8022400 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80223e8:	4909      	ldr	r1, [pc, #36]	; (8022410 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80223ea:	480a      	ldr	r0, [pc, #40]	; (8022414 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80223ec:	f007 fc4c 	bl	8029c88 <__aeabi_atexit>
 80223f0:	4b05      	ldr	r3, [pc, #20]	; (8022408 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80223f2:	60ab      	str	r3, [r5, #8]
 80223f4:	4b07      	ldr	r3, [pc, #28]	; (8022414 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80223f6:	60eb      	str	r3, [r5, #12]
 80223f8:	bd38      	pop	{r3, r4, r5, pc}
 80223fa:	bf00      	nop
 80223fc:	2400afe8 	.word	0x2400afe8
 8022400:	24000000 	.word	0x24000000
 8022404:	08020533 	.word	0x08020533
 8022408:	24000084 	.word	0x24000084
 802240c:	2400afec 	.word	0x2400afec
 8022410:	08020531 	.word	0x08020531
 8022414:	24000088 	.word	0x24000088

08022418 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8022418:	b510      	push	{r4, lr}
 802241a:	4604      	mov	r4, r0
 802241c:	f7ff ff88 	bl	8022330 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8022420:	4620      	mov	r0, r4
 8022422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022426:	f7ff bfbd 	b.w	80223a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0802242c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802242c:	b538      	push	{r3, r4, r5, lr}
 802242e:	4c15      	ldr	r4, [pc, #84]	; (8022484 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8022430:	4605      	mov	r5, r0
 8022432:	7823      	ldrb	r3, [r4, #0]
 8022434:	f3bf 8f5b 	dmb	ish
 8022438:	07da      	lsls	r2, r3, #31
 802243a:	d40b      	bmi.n	8022454 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802243c:	4620      	mov	r0, r4
 802243e:	f007 fc2a 	bl	8029c96 <__cxa_guard_acquire>
 8022442:	b138      	cbz	r0, 8022454 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022444:	4620      	mov	r0, r4
 8022446:	f007 fc32 	bl	8029cae <__cxa_guard_release>
 802244a:	4a0f      	ldr	r2, [pc, #60]	; (8022488 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802244c:	490f      	ldr	r1, [pc, #60]	; (802248c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802244e:	4810      	ldr	r0, [pc, #64]	; (8022490 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022450:	f007 fc1a 	bl	8029c88 <__aeabi_atexit>
 8022454:	4c0f      	ldr	r4, [pc, #60]	; (8022494 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8022456:	7823      	ldrb	r3, [r4, #0]
 8022458:	f3bf 8f5b 	dmb	ish
 802245c:	07db      	lsls	r3, r3, #31
 802245e:	d40b      	bmi.n	8022478 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022460:	4620      	mov	r0, r4
 8022462:	f007 fc18 	bl	8029c96 <__cxa_guard_acquire>
 8022466:	b138      	cbz	r0, 8022478 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022468:	4620      	mov	r0, r4
 802246a:	f007 fc20 	bl	8029cae <__cxa_guard_release>
 802246e:	4a06      	ldr	r2, [pc, #24]	; (8022488 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022470:	4909      	ldr	r1, [pc, #36]	; (8022498 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8022472:	480a      	ldr	r0, [pc, #40]	; (802249c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022474:	f007 fc08 	bl	8029c88 <__aeabi_atexit>
 8022478:	4b05      	ldr	r3, [pc, #20]	; (8022490 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802247a:	622b      	str	r3, [r5, #32]
 802247c:	4b07      	ldr	r3, [pc, #28]	; (802249c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802247e:	626b      	str	r3, [r5, #36]	; 0x24
 8022480:	bd38      	pop	{r3, r4, r5, pc}
 8022482:	bf00      	nop
 8022484:	2400b018 	.word	0x2400b018
 8022488:	24000000 	.word	0x24000000
 802248c:	08020527 	.word	0x08020527
 8022490:	240000b4 	.word	0x240000b4
 8022494:	2400b01c 	.word	0x2400b01c
 8022498:	08020525 	.word	0x08020525
 802249c:	240000b8 	.word	0x240000b8

080224a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80224a0:	b538      	push	{r3, r4, r5, lr}
 80224a2:	4c15      	ldr	r4, [pc, #84]	; (80224f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80224a4:	4605      	mov	r5, r0
 80224a6:	7823      	ldrb	r3, [r4, #0]
 80224a8:	f3bf 8f5b 	dmb	ish
 80224ac:	07da      	lsls	r2, r3, #31
 80224ae:	d40b      	bmi.n	80224c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80224b0:	4620      	mov	r0, r4
 80224b2:	f007 fbf0 	bl	8029c96 <__cxa_guard_acquire>
 80224b6:	b138      	cbz	r0, 80224c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80224b8:	4620      	mov	r0, r4
 80224ba:	f007 fbf8 	bl	8029cae <__cxa_guard_release>
 80224be:	4a0f      	ldr	r2, [pc, #60]	; (80224fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80224c0:	490f      	ldr	r1, [pc, #60]	; (8022500 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80224c2:	4810      	ldr	r0, [pc, #64]	; (8022504 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80224c4:	f007 fbe0 	bl	8029c88 <__aeabi_atexit>
 80224c8:	4c0f      	ldr	r4, [pc, #60]	; (8022508 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80224ca:	7823      	ldrb	r3, [r4, #0]
 80224cc:	f3bf 8f5b 	dmb	ish
 80224d0:	07db      	lsls	r3, r3, #31
 80224d2:	d40b      	bmi.n	80224ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80224d4:	4620      	mov	r0, r4
 80224d6:	f007 fbde 	bl	8029c96 <__cxa_guard_acquire>
 80224da:	b138      	cbz	r0, 80224ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80224dc:	4620      	mov	r0, r4
 80224de:	f007 fbe6 	bl	8029cae <__cxa_guard_release>
 80224e2:	4a06      	ldr	r2, [pc, #24]	; (80224fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80224e4:	4909      	ldr	r1, [pc, #36]	; (802250c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80224e6:	480a      	ldr	r0, [pc, #40]	; (8022510 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80224e8:	f007 fbce 	bl	8029c88 <__aeabi_atexit>
 80224ec:	4b05      	ldr	r3, [pc, #20]	; (8022504 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80224ee:	61ab      	str	r3, [r5, #24]
 80224f0:	4b07      	ldr	r3, [pc, #28]	; (8022510 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80224f2:	61eb      	str	r3, [r5, #28]
 80224f4:	bd38      	pop	{r3, r4, r5, pc}
 80224f6:	bf00      	nop
 80224f8:	2400aff0 	.word	0x2400aff0
 80224fc:	24000000 	.word	0x24000000
 8022500:	0802052b 	.word	0x0802052b
 8022504:	2400008c 	.word	0x2400008c
 8022508:	2400aff4 	.word	0x2400aff4
 802250c:	08020529 	.word	0x08020529
 8022510:	24000090 	.word	0x24000090

08022514 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8022514:	b510      	push	{r4, lr}
 8022516:	4604      	mov	r4, r0
 8022518:	f7ff ff88 	bl	802242c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 802251c:	4620      	mov	r0, r4
 802251e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022522:	f7ff bfbd 	b.w	80224a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08022528 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8022528:	b538      	push	{r3, r4, r5, lr}
 802252a:	4c15      	ldr	r4, [pc, #84]	; (8022580 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 802252c:	4605      	mov	r5, r0
 802252e:	7823      	ldrb	r3, [r4, #0]
 8022530:	f3bf 8f5b 	dmb	ish
 8022534:	07da      	lsls	r2, r3, #31
 8022536:	d40b      	bmi.n	8022550 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022538:	4620      	mov	r0, r4
 802253a:	f007 fbac 	bl	8029c96 <__cxa_guard_acquire>
 802253e:	b138      	cbz	r0, 8022550 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022540:	4620      	mov	r0, r4
 8022542:	f007 fbb4 	bl	8029cae <__cxa_guard_release>
 8022546:	4a0f      	ldr	r2, [pc, #60]	; (8022584 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022548:	490f      	ldr	r1, [pc, #60]	; (8022588 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802254a:	4810      	ldr	r0, [pc, #64]	; (802258c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802254c:	f007 fb9c 	bl	8029c88 <__aeabi_atexit>
 8022550:	4c0f      	ldr	r4, [pc, #60]	; (8022590 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8022552:	7823      	ldrb	r3, [r4, #0]
 8022554:	f3bf 8f5b 	dmb	ish
 8022558:	07db      	lsls	r3, r3, #31
 802255a:	d40b      	bmi.n	8022574 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802255c:	4620      	mov	r0, r4
 802255e:	f007 fb9a 	bl	8029c96 <__cxa_guard_acquire>
 8022562:	b138      	cbz	r0, 8022574 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022564:	4620      	mov	r0, r4
 8022566:	f007 fba2 	bl	8029cae <__cxa_guard_release>
 802256a:	4a06      	ldr	r2, [pc, #24]	; (8022584 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802256c:	4909      	ldr	r1, [pc, #36]	; (8022594 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802256e:	480a      	ldr	r0, [pc, #40]	; (8022598 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022570:	f007 fb8a 	bl	8029c88 <__aeabi_atexit>
 8022574:	4b05      	ldr	r3, [pc, #20]	; (802258c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022576:	632b      	str	r3, [r5, #48]	; 0x30
 8022578:	4b07      	ldr	r3, [pc, #28]	; (8022598 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802257a:	636b      	str	r3, [r5, #52]	; 0x34
 802257c:	bd38      	pop	{r3, r4, r5, pc}
 802257e:	bf00      	nop
 8022580:	2400b028 	.word	0x2400b028
 8022584:	24000000 	.word	0x24000000
 8022588:	0802051f 	.word	0x0802051f
 802258c:	240000c4 	.word	0x240000c4
 8022590:	2400b02c 	.word	0x2400b02c
 8022594:	0802051d 	.word	0x0802051d
 8022598:	240000c8 	.word	0x240000c8

0802259c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802259c:	b538      	push	{r3, r4, r5, lr}
 802259e:	4c15      	ldr	r4, [pc, #84]	; (80225f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80225a0:	4605      	mov	r5, r0
 80225a2:	7823      	ldrb	r3, [r4, #0]
 80225a4:	f3bf 8f5b 	dmb	ish
 80225a8:	07da      	lsls	r2, r3, #31
 80225aa:	d40b      	bmi.n	80225c4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80225ac:	4620      	mov	r0, r4
 80225ae:	f007 fb72 	bl	8029c96 <__cxa_guard_acquire>
 80225b2:	b138      	cbz	r0, 80225c4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80225b4:	4620      	mov	r0, r4
 80225b6:	f007 fb7a 	bl	8029cae <__cxa_guard_release>
 80225ba:	4a0f      	ldr	r2, [pc, #60]	; (80225f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80225bc:	490f      	ldr	r1, [pc, #60]	; (80225fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80225be:	4810      	ldr	r0, [pc, #64]	; (8022600 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80225c0:	f007 fb62 	bl	8029c88 <__aeabi_atexit>
 80225c4:	4c0f      	ldr	r4, [pc, #60]	; (8022604 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80225c6:	7823      	ldrb	r3, [r4, #0]
 80225c8:	f3bf 8f5b 	dmb	ish
 80225cc:	07db      	lsls	r3, r3, #31
 80225ce:	d40b      	bmi.n	80225e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80225d0:	4620      	mov	r0, r4
 80225d2:	f007 fb60 	bl	8029c96 <__cxa_guard_acquire>
 80225d6:	b138      	cbz	r0, 80225e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80225d8:	4620      	mov	r0, r4
 80225da:	f007 fb68 	bl	8029cae <__cxa_guard_release>
 80225de:	4a06      	ldr	r2, [pc, #24]	; (80225f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80225e0:	4909      	ldr	r1, [pc, #36]	; (8022608 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80225e2:	480a      	ldr	r0, [pc, #40]	; (802260c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80225e4:	f007 fb50 	bl	8029c88 <__aeabi_atexit>
 80225e8:	4b05      	ldr	r3, [pc, #20]	; (8022600 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80225ea:	62ab      	str	r3, [r5, #40]	; 0x28
 80225ec:	4b07      	ldr	r3, [pc, #28]	; (802260c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80225ee:	62eb      	str	r3, [r5, #44]	; 0x2c
 80225f0:	bd38      	pop	{r3, r4, r5, pc}
 80225f2:	bf00      	nop
 80225f4:	2400aff8 	.word	0x2400aff8
 80225f8:	24000000 	.word	0x24000000
 80225fc:	08020523 	.word	0x08020523
 8022600:	24000094 	.word	0x24000094
 8022604:	2400affc 	.word	0x2400affc
 8022608:	08020521 	.word	0x08020521
 802260c:	24000098 	.word	0x24000098

08022610 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022610:	b510      	push	{r4, lr}
 8022612:	4604      	mov	r4, r0
 8022614:	f7ff ff88 	bl	8022528 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8022618:	4620      	mov	r0, r4
 802261a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802261e:	f7ff bfbd 	b.w	802259c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022624 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8022624:	b538      	push	{r3, r4, r5, lr}
 8022626:	4c15      	ldr	r4, [pc, #84]	; (802267c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8022628:	4605      	mov	r5, r0
 802262a:	7823      	ldrb	r3, [r4, #0]
 802262c:	f3bf 8f5b 	dmb	ish
 8022630:	07da      	lsls	r2, r3, #31
 8022632:	d40b      	bmi.n	802264c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022634:	4620      	mov	r0, r4
 8022636:	f007 fb2e 	bl	8029c96 <__cxa_guard_acquire>
 802263a:	b138      	cbz	r0, 802264c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802263c:	4620      	mov	r0, r4
 802263e:	f007 fb36 	bl	8029cae <__cxa_guard_release>
 8022642:	4a0f      	ldr	r2, [pc, #60]	; (8022680 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022644:	490f      	ldr	r1, [pc, #60]	; (8022684 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8022646:	4810      	ldr	r0, [pc, #64]	; (8022688 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022648:	f007 fb1e 	bl	8029c88 <__aeabi_atexit>
 802264c:	4c0f      	ldr	r4, [pc, #60]	; (802268c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802264e:	7823      	ldrb	r3, [r4, #0]
 8022650:	f3bf 8f5b 	dmb	ish
 8022654:	07db      	lsls	r3, r3, #31
 8022656:	d40b      	bmi.n	8022670 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022658:	4620      	mov	r0, r4
 802265a:	f007 fb1c 	bl	8029c96 <__cxa_guard_acquire>
 802265e:	b138      	cbz	r0, 8022670 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022660:	4620      	mov	r0, r4
 8022662:	f007 fb24 	bl	8029cae <__cxa_guard_release>
 8022666:	4a06      	ldr	r2, [pc, #24]	; (8022680 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022668:	4909      	ldr	r1, [pc, #36]	; (8022690 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802266a:	480a      	ldr	r0, [pc, #40]	; (8022694 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802266c:	f007 fb0c 	bl	8029c88 <__aeabi_atexit>
 8022670:	4b05      	ldr	r3, [pc, #20]	; (8022688 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022672:	652b      	str	r3, [r5, #80]	; 0x50
 8022674:	4b07      	ldr	r3, [pc, #28]	; (8022694 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022676:	656b      	str	r3, [r5, #84]	; 0x54
 8022678:	bd38      	pop	{r3, r4, r5, pc}
 802267a:	bf00      	nop
 802267c:	2400b030 	.word	0x2400b030
 8022680:	24000000 	.word	0x24000000
 8022684:	0802050f 	.word	0x0802050f
 8022688:	240000cc 	.word	0x240000cc
 802268c:	2400b034 	.word	0x2400b034
 8022690:	0802050d 	.word	0x0802050d
 8022694:	240000d0 	.word	0x240000d0

08022698 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8022698:	b538      	push	{r3, r4, r5, lr}
 802269a:	4c15      	ldr	r4, [pc, #84]	; (80226f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 802269c:	4605      	mov	r5, r0
 802269e:	7823      	ldrb	r3, [r4, #0]
 80226a0:	f3bf 8f5b 	dmb	ish
 80226a4:	07da      	lsls	r2, r3, #31
 80226a6:	d40b      	bmi.n	80226c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80226a8:	4620      	mov	r0, r4
 80226aa:	f007 faf4 	bl	8029c96 <__cxa_guard_acquire>
 80226ae:	b138      	cbz	r0, 80226c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80226b0:	4620      	mov	r0, r4
 80226b2:	f007 fafc 	bl	8029cae <__cxa_guard_release>
 80226b6:	4a0f      	ldr	r2, [pc, #60]	; (80226f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80226b8:	490f      	ldr	r1, [pc, #60]	; (80226f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80226ba:	4810      	ldr	r0, [pc, #64]	; (80226fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80226bc:	f007 fae4 	bl	8029c88 <__aeabi_atexit>
 80226c0:	4c0f      	ldr	r4, [pc, #60]	; (8022700 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80226c2:	7823      	ldrb	r3, [r4, #0]
 80226c4:	f3bf 8f5b 	dmb	ish
 80226c8:	07db      	lsls	r3, r3, #31
 80226ca:	d40b      	bmi.n	80226e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80226cc:	4620      	mov	r0, r4
 80226ce:	f007 fae2 	bl	8029c96 <__cxa_guard_acquire>
 80226d2:	b138      	cbz	r0, 80226e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80226d4:	4620      	mov	r0, r4
 80226d6:	f007 faea 	bl	8029cae <__cxa_guard_release>
 80226da:	4a06      	ldr	r2, [pc, #24]	; (80226f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80226dc:	4909      	ldr	r1, [pc, #36]	; (8022704 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80226de:	480a      	ldr	r0, [pc, #40]	; (8022708 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80226e0:	f007 fad2 	bl	8029c88 <__aeabi_atexit>
 80226e4:	4b05      	ldr	r3, [pc, #20]	; (80226fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80226e6:	64ab      	str	r3, [r5, #72]	; 0x48
 80226e8:	4b07      	ldr	r3, [pc, #28]	; (8022708 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80226ea:	64eb      	str	r3, [r5, #76]	; 0x4c
 80226ec:	bd38      	pop	{r3, r4, r5, pc}
 80226ee:	bf00      	nop
 80226f0:	2400b038 	.word	0x2400b038
 80226f4:	24000000 	.word	0x24000000
 80226f8:	08020513 	.word	0x08020513
 80226fc:	240000d4 	.word	0x240000d4
 8022700:	2400b03c 	.word	0x2400b03c
 8022704:	08020511 	.word	0x08020511
 8022708:	240000d8 	.word	0x240000d8

0802270c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 802270c:	b538      	push	{r3, r4, r5, lr}
 802270e:	4c15      	ldr	r4, [pc, #84]	; (8022764 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8022710:	4605      	mov	r5, r0
 8022712:	7823      	ldrb	r3, [r4, #0]
 8022714:	f3bf 8f5b 	dmb	ish
 8022718:	07da      	lsls	r2, r3, #31
 802271a:	d40b      	bmi.n	8022734 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802271c:	4620      	mov	r0, r4
 802271e:	f007 faba 	bl	8029c96 <__cxa_guard_acquire>
 8022722:	b138      	cbz	r0, 8022734 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022724:	4620      	mov	r0, r4
 8022726:	f007 fac2 	bl	8029cae <__cxa_guard_release>
 802272a:	4a0f      	ldr	r2, [pc, #60]	; (8022768 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 802272c:	490f      	ldr	r1, [pc, #60]	; (802276c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802272e:	4810      	ldr	r0, [pc, #64]	; (8022770 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022730:	f007 faaa 	bl	8029c88 <__aeabi_atexit>
 8022734:	4c0f      	ldr	r4, [pc, #60]	; (8022774 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8022736:	7823      	ldrb	r3, [r4, #0]
 8022738:	f3bf 8f5b 	dmb	ish
 802273c:	07db      	lsls	r3, r3, #31
 802273e:	d40b      	bmi.n	8022758 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022740:	4620      	mov	r0, r4
 8022742:	f007 faa8 	bl	8029c96 <__cxa_guard_acquire>
 8022746:	b138      	cbz	r0, 8022758 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022748:	4620      	mov	r0, r4
 802274a:	f007 fab0 	bl	8029cae <__cxa_guard_release>
 802274e:	4a06      	ldr	r2, [pc, #24]	; (8022768 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022750:	4909      	ldr	r1, [pc, #36]	; (8022778 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8022752:	480a      	ldr	r0, [pc, #40]	; (802277c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022754:	f007 fa98 	bl	8029c88 <__aeabi_atexit>
 8022758:	4b05      	ldr	r3, [pc, #20]	; (8022770 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802275a:	642b      	str	r3, [r5, #64]	; 0x40
 802275c:	4b07      	ldr	r3, [pc, #28]	; (802277c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802275e:	646b      	str	r3, [r5, #68]	; 0x44
 8022760:	bd38      	pop	{r3, r4, r5, pc}
 8022762:	bf00      	nop
 8022764:	2400b000 	.word	0x2400b000
 8022768:	24000000 	.word	0x24000000
 802276c:	08020517 	.word	0x08020517
 8022770:	2400009c 	.word	0x2400009c
 8022774:	2400b004 	.word	0x2400b004
 8022778:	08020515 	.word	0x08020515
 802277c:	240000a0 	.word	0x240000a0

08022780 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8022780:	b538      	push	{r3, r4, r5, lr}
 8022782:	4c15      	ldr	r4, [pc, #84]	; (80227d8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8022784:	4605      	mov	r5, r0
 8022786:	7823      	ldrb	r3, [r4, #0]
 8022788:	f3bf 8f5b 	dmb	ish
 802278c:	07da      	lsls	r2, r3, #31
 802278e:	d40b      	bmi.n	80227a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022790:	4620      	mov	r0, r4
 8022792:	f007 fa80 	bl	8029c96 <__cxa_guard_acquire>
 8022796:	b138      	cbz	r0, 80227a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022798:	4620      	mov	r0, r4
 802279a:	f007 fa88 	bl	8029cae <__cxa_guard_release>
 802279e:	4a0f      	ldr	r2, [pc, #60]	; (80227dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80227a0:	490f      	ldr	r1, [pc, #60]	; (80227e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80227a2:	4810      	ldr	r0, [pc, #64]	; (80227e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80227a4:	f007 fa70 	bl	8029c88 <__aeabi_atexit>
 80227a8:	4c0f      	ldr	r4, [pc, #60]	; (80227e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80227aa:	7823      	ldrb	r3, [r4, #0]
 80227ac:	f3bf 8f5b 	dmb	ish
 80227b0:	07db      	lsls	r3, r3, #31
 80227b2:	d40b      	bmi.n	80227cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80227b4:	4620      	mov	r0, r4
 80227b6:	f007 fa6e 	bl	8029c96 <__cxa_guard_acquire>
 80227ba:	b138      	cbz	r0, 80227cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80227bc:	4620      	mov	r0, r4
 80227be:	f007 fa76 	bl	8029cae <__cxa_guard_release>
 80227c2:	4a06      	ldr	r2, [pc, #24]	; (80227dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80227c4:	4909      	ldr	r1, [pc, #36]	; (80227ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80227c6:	480a      	ldr	r0, [pc, #40]	; (80227f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80227c8:	f007 fa5e 	bl	8029c88 <__aeabi_atexit>
 80227cc:	4b05      	ldr	r3, [pc, #20]	; (80227e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80227ce:	63ab      	str	r3, [r5, #56]	; 0x38
 80227d0:	4b07      	ldr	r3, [pc, #28]	; (80227f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80227d2:	63eb      	str	r3, [r5, #60]	; 0x3c
 80227d4:	bd38      	pop	{r3, r4, r5, pc}
 80227d6:	bf00      	nop
 80227d8:	2400b020 	.word	0x2400b020
 80227dc:	24000000 	.word	0x24000000
 80227e0:	0802051b 	.word	0x0802051b
 80227e4:	240000bc 	.word	0x240000bc
 80227e8:	2400b024 	.word	0x2400b024
 80227ec:	08020519 	.word	0x08020519
 80227f0:	240000c0 	.word	0x240000c0

080227f4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80227f4:	b510      	push	{r4, lr}
 80227f6:	4604      	mov	r4, r0
 80227f8:	f7ff ff14 	bl	8022624 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80227fc:	4620      	mov	r0, r4
 80227fe:	f7ff ff85 	bl	802270c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8022802:	4620      	mov	r0, r4
 8022804:	f7ff ff48 	bl	8022698 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8022808:	4620      	mov	r0, r4
 802280a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802280e:	f7ff bfb7 	b.w	8022780 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08022814 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022814:	b538      	push	{r3, r4, r5, lr}
 8022816:	4c15      	ldr	r4, [pc, #84]	; (802286c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8022818:	4605      	mov	r5, r0
 802281a:	7823      	ldrb	r3, [r4, #0]
 802281c:	f3bf 8f5b 	dmb	ish
 8022820:	07da      	lsls	r2, r3, #31
 8022822:	d40b      	bmi.n	802283c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022824:	4620      	mov	r0, r4
 8022826:	f007 fa36 	bl	8029c96 <__cxa_guard_acquire>
 802282a:	b138      	cbz	r0, 802283c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802282c:	4620      	mov	r0, r4
 802282e:	f007 fa3e 	bl	8029cae <__cxa_guard_release>
 8022832:	4a0f      	ldr	r2, [pc, #60]	; (8022870 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022834:	490f      	ldr	r1, [pc, #60]	; (8022874 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8022836:	4810      	ldr	r0, [pc, #64]	; (8022878 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022838:	f007 fa26 	bl	8029c88 <__aeabi_atexit>
 802283c:	4c0f      	ldr	r4, [pc, #60]	; (802287c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802283e:	7823      	ldrb	r3, [r4, #0]
 8022840:	f3bf 8f5b 	dmb	ish
 8022844:	07db      	lsls	r3, r3, #31
 8022846:	d40b      	bmi.n	8022860 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022848:	4620      	mov	r0, r4
 802284a:	f007 fa24 	bl	8029c96 <__cxa_guard_acquire>
 802284e:	b138      	cbz	r0, 8022860 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022850:	4620      	mov	r0, r4
 8022852:	f007 fa2c 	bl	8029cae <__cxa_guard_release>
 8022856:	4a06      	ldr	r2, [pc, #24]	; (8022870 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022858:	4909      	ldr	r1, [pc, #36]	; (8022880 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802285a:	480a      	ldr	r0, [pc, #40]	; (8022884 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802285c:	f007 fa14 	bl	8029c88 <__aeabi_atexit>
 8022860:	4b05      	ldr	r3, [pc, #20]	; (8022878 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022862:	662b      	str	r3, [r5, #96]	; 0x60
 8022864:	4b07      	ldr	r3, [pc, #28]	; (8022884 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022866:	666b      	str	r3, [r5, #100]	; 0x64
 8022868:	bd38      	pop	{r3, r4, r5, pc}
 802286a:	bf00      	nop
 802286c:	2400b008 	.word	0x2400b008
 8022870:	24000000 	.word	0x24000000
 8022874:	08020507 	.word	0x08020507
 8022878:	240000a4 	.word	0x240000a4
 802287c:	2400b00c 	.word	0x2400b00c
 8022880:	08020505 	.word	0x08020505
 8022884:	240000a8 	.word	0x240000a8

08022888 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022888:	b538      	push	{r3, r4, r5, lr}
 802288a:	4c15      	ldr	r4, [pc, #84]	; (80228e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802288c:	4605      	mov	r5, r0
 802288e:	7823      	ldrb	r3, [r4, #0]
 8022890:	f3bf 8f5b 	dmb	ish
 8022894:	07da      	lsls	r2, r3, #31
 8022896:	d40b      	bmi.n	80228b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022898:	4620      	mov	r0, r4
 802289a:	f007 f9fc 	bl	8029c96 <__cxa_guard_acquire>
 802289e:	b138      	cbz	r0, 80228b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80228a0:	4620      	mov	r0, r4
 80228a2:	f007 fa04 	bl	8029cae <__cxa_guard_release>
 80228a6:	4a0f      	ldr	r2, [pc, #60]	; (80228e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80228a8:	490f      	ldr	r1, [pc, #60]	; (80228e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80228aa:	4810      	ldr	r0, [pc, #64]	; (80228ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80228ac:	f007 f9ec 	bl	8029c88 <__aeabi_atexit>
 80228b0:	4c0f      	ldr	r4, [pc, #60]	; (80228f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80228b2:	7823      	ldrb	r3, [r4, #0]
 80228b4:	f3bf 8f5b 	dmb	ish
 80228b8:	07db      	lsls	r3, r3, #31
 80228ba:	d40b      	bmi.n	80228d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80228bc:	4620      	mov	r0, r4
 80228be:	f007 f9ea 	bl	8029c96 <__cxa_guard_acquire>
 80228c2:	b138      	cbz	r0, 80228d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80228c4:	4620      	mov	r0, r4
 80228c6:	f007 f9f2 	bl	8029cae <__cxa_guard_release>
 80228ca:	4a06      	ldr	r2, [pc, #24]	; (80228e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80228cc:	4909      	ldr	r1, [pc, #36]	; (80228f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80228ce:	480a      	ldr	r0, [pc, #40]	; (80228f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80228d0:	f007 f9da 	bl	8029c88 <__aeabi_atexit>
 80228d4:	4b05      	ldr	r3, [pc, #20]	; (80228ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80228d6:	65ab      	str	r3, [r5, #88]	; 0x58
 80228d8:	4b07      	ldr	r3, [pc, #28]	; (80228f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80228da:	65eb      	str	r3, [r5, #92]	; 0x5c
 80228dc:	bd38      	pop	{r3, r4, r5, pc}
 80228de:	bf00      	nop
 80228e0:	2400afe0 	.word	0x2400afe0
 80228e4:	24000000 	.word	0x24000000
 80228e8:	0802050b 	.word	0x0802050b
 80228ec:	2400007c 	.word	0x2400007c
 80228f0:	2400afe4 	.word	0x2400afe4
 80228f4:	08020509 	.word	0x08020509
 80228f8:	24000080 	.word	0x24000080

080228fc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80228fc:	b510      	push	{r4, lr}
 80228fe:	4604      	mov	r4, r0
 8022900:	f7ff ff88 	bl	8022814 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8022904:	4620      	mov	r0, r4
 8022906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802290a:	f7ff bfbd 	b.w	8022888 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08022910 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8022910:	b538      	push	{r3, r4, r5, lr}
 8022912:	4c15      	ldr	r4, [pc, #84]	; (8022968 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022914:	4605      	mov	r5, r0
 8022916:	7823      	ldrb	r3, [r4, #0]
 8022918:	f3bf 8f5b 	dmb	ish
 802291c:	07da      	lsls	r2, r3, #31
 802291e:	d40b      	bmi.n	8022938 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022920:	4620      	mov	r0, r4
 8022922:	f007 f9b8 	bl	8029c96 <__cxa_guard_acquire>
 8022926:	b138      	cbz	r0, 8022938 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022928:	4620      	mov	r0, r4
 802292a:	f007 f9c0 	bl	8029cae <__cxa_guard_release>
 802292e:	4a0f      	ldr	r2, [pc, #60]	; (802296c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022930:	490f      	ldr	r1, [pc, #60]	; (8022970 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8022932:	4810      	ldr	r0, [pc, #64]	; (8022974 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022934:	f007 f9a8 	bl	8029c88 <__aeabi_atexit>
 8022938:	4c0f      	ldr	r4, [pc, #60]	; (8022978 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802293a:	7823      	ldrb	r3, [r4, #0]
 802293c:	f3bf 8f5b 	dmb	ish
 8022940:	07db      	lsls	r3, r3, #31
 8022942:	d40b      	bmi.n	802295c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022944:	4620      	mov	r0, r4
 8022946:	f007 f9a6 	bl	8029c96 <__cxa_guard_acquire>
 802294a:	b138      	cbz	r0, 802295c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802294c:	4620      	mov	r0, r4
 802294e:	f007 f9ae 	bl	8029cae <__cxa_guard_release>
 8022952:	4a06      	ldr	r2, [pc, #24]	; (802296c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022954:	4909      	ldr	r1, [pc, #36]	; (802297c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022956:	480a      	ldr	r0, [pc, #40]	; (8022980 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022958:	f007 f996 	bl	8029c88 <__aeabi_atexit>
 802295c:	4b05      	ldr	r3, [pc, #20]	; (8022974 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802295e:	672b      	str	r3, [r5, #112]	; 0x70
 8022960:	4b07      	ldr	r3, [pc, #28]	; (8022980 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022962:	676b      	str	r3, [r5, #116]	; 0x74
 8022964:	bd38      	pop	{r3, r4, r5, pc}
 8022966:	bf00      	nop
 8022968:	2400afd8 	.word	0x2400afd8
 802296c:	24000000 	.word	0x24000000
 8022970:	080204ff 	.word	0x080204ff
 8022974:	24000074 	.word	0x24000074
 8022978:	2400afdc 	.word	0x2400afdc
 802297c:	080204fd 	.word	0x080204fd
 8022980:	24000078 	.word	0x24000078

08022984 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022984:	b538      	push	{r3, r4, r5, lr}
 8022986:	4c15      	ldr	r4, [pc, #84]	; (80229dc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022988:	4605      	mov	r5, r0
 802298a:	7823      	ldrb	r3, [r4, #0]
 802298c:	f3bf 8f5b 	dmb	ish
 8022990:	07da      	lsls	r2, r3, #31
 8022992:	d40b      	bmi.n	80229ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022994:	4620      	mov	r0, r4
 8022996:	f007 f97e 	bl	8029c96 <__cxa_guard_acquire>
 802299a:	b138      	cbz	r0, 80229ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802299c:	4620      	mov	r0, r4
 802299e:	f007 f986 	bl	8029cae <__cxa_guard_release>
 80229a2:	4a0f      	ldr	r2, [pc, #60]	; (80229e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80229a4:	490f      	ldr	r1, [pc, #60]	; (80229e4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80229a6:	4810      	ldr	r0, [pc, #64]	; (80229e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80229a8:	f007 f96e 	bl	8029c88 <__aeabi_atexit>
 80229ac:	4c0f      	ldr	r4, [pc, #60]	; (80229ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80229ae:	7823      	ldrb	r3, [r4, #0]
 80229b0:	f3bf 8f5b 	dmb	ish
 80229b4:	07db      	lsls	r3, r3, #31
 80229b6:	d40b      	bmi.n	80229d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80229b8:	4620      	mov	r0, r4
 80229ba:	f007 f96c 	bl	8029c96 <__cxa_guard_acquire>
 80229be:	b138      	cbz	r0, 80229d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80229c0:	4620      	mov	r0, r4
 80229c2:	f007 f974 	bl	8029cae <__cxa_guard_release>
 80229c6:	4a06      	ldr	r2, [pc, #24]	; (80229e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80229c8:	4909      	ldr	r1, [pc, #36]	; (80229f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80229ca:	480a      	ldr	r0, [pc, #40]	; (80229f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80229cc:	f007 f95c 	bl	8029c88 <__aeabi_atexit>
 80229d0:	4b05      	ldr	r3, [pc, #20]	; (80229e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80229d2:	66ab      	str	r3, [r5, #104]	; 0x68
 80229d4:	4b07      	ldr	r3, [pc, #28]	; (80229f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80229d6:	66eb      	str	r3, [r5, #108]	; 0x6c
 80229d8:	bd38      	pop	{r3, r4, r5, pc}
 80229da:	bf00      	nop
 80229dc:	2400afd0 	.word	0x2400afd0
 80229e0:	24000000 	.word	0x24000000
 80229e4:	08020503 	.word	0x08020503
 80229e8:	2400006c 	.word	0x2400006c
 80229ec:	2400afd4 	.word	0x2400afd4
 80229f0:	08020501 	.word	0x08020501
 80229f4:	24000070 	.word	0x24000070

080229f8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80229f8:	b510      	push	{r4, lr}
 80229fa:	4604      	mov	r4, r0
 80229fc:	f7ff ff88 	bl	8022910 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8022a00:	4620      	mov	r0, r4
 8022a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a06:	f7ff bfbd 	b.w	8022984 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08022a0a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8022a0a:	b510      	push	{r4, lr}
 8022a0c:	4604      	mov	r4, r0
 8022a0e:	f7ff fff3 	bl	80229f8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8022a12:	4620      	mov	r0, r4
 8022a14:	f7ff ff72 	bl	80228fc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8022a18:	4620      	mov	r0, r4
 8022a1a:	f7ff fdf9 	bl	8022610 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8022a1e:	4620      	mov	r0, r4
 8022a20:	f7ff fcfa 	bl	8022418 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8022a24:	4620      	mov	r0, r4
 8022a26:	f7ff fd75 	bl	8022514 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8022a2a:	4620      	mov	r0, r4
 8022a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a30:	f7ff bee0 	b.w	80227f4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08022a34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8022a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a38:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8022a3c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022a40:	f1be 0f00 	cmp.w	lr, #0
 8022a44:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8022a48:	fb0e 4708 	mla	r7, lr, r8, r4
 8022a4c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8022a50:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8022a54:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8022a58:	eb02 0a07 	add.w	sl, r2, r7
 8022a5c:	8808      	ldrh	r0, [r1, #0]
 8022a5e:	db37      	blt.n	8022ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8022a60:	45f3      	cmp	fp, lr
 8022a62:	dd35      	ble.n	8022ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8022a64:	2c00      	cmp	r4, #0
 8022a66:	db31      	blt.n	8022acc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8022a68:	45a0      	cmp	r8, r4
 8022a6a:	dd2f      	ble.n	8022acc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8022a6c:	5dd2      	ldrb	r2, [r2, r7]
 8022a6e:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8022a72:	1c62      	adds	r2, r4, #1
 8022a74:	d42f      	bmi.n	8022ad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022a76:	4590      	cmp	r8, r2
 8022a78:	dd2d      	ble.n	8022ad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022a7a:	b366      	cbz	r6, 8022ad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022a7c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022a80:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8022a84:	f11e 0e01 	adds.w	lr, lr, #1
 8022a88:	d429      	bmi.n	8022ade <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8022a8a:	45f3      	cmp	fp, lr
 8022a8c:	dd27      	ble.n	8022ade <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8022a8e:	f1bc 0f00 	cmp.w	ip, #0
 8022a92:	f000 80a1 	beq.w	8022bd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8022a96:	2c00      	cmp	r4, #0
 8022a98:	db1f      	blt.n	8022ada <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022a9a:	45a0      	cmp	r8, r4
 8022a9c:	dd1d      	ble.n	8022ada <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022a9e:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8022aa2:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8022aa6:	3401      	adds	r4, #1
 8022aa8:	d41c      	bmi.n	8022ae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8022aaa:	45a0      	cmp	r8, r4
 8022aac:	dd1a      	ble.n	8022ae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8022aae:	b1de      	cbz	r6, 8022ae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8022ab0:	44d0      	add	r8, sl
 8022ab2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022ab6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022aba:	2e0f      	cmp	r6, #15
 8022abc:	d915      	bls.n	8022aea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8022abe:	4b49      	ldr	r3, [pc, #292]	; (8022be4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8022ac0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8022ac4:	4a48      	ldr	r2, [pc, #288]	; (8022be8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8022ac6:	4849      	ldr	r0, [pc, #292]	; (8022bec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8022ac8:	f007 f912 	bl	8029cf0 <__assert_func>
 8022acc:	4681      	mov	r9, r0
 8022ace:	e7d0      	b.n	8022a72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8022ad0:	4607      	mov	r7, r0
 8022ad2:	4681      	mov	r9, r0
 8022ad4:	e7d6      	b.n	8022a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8022ad6:	4607      	mov	r7, r0
 8022ad8:	e7d4      	b.n	8022a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8022ada:	4686      	mov	lr, r0
 8022adc:	e7e3      	b.n	8022aa6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8022ade:	4603      	mov	r3, r0
 8022ae0:	4686      	mov	lr, r0
 8022ae2:	e7ea      	b.n	8022aba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8022ae4:	4603      	mov	r3, r0
 8022ae6:	e7e8      	b.n	8022aba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8022ae8:	4603      	mov	r3, r0
 8022aea:	f1bc 0f0f 	cmp.w	ip, #15
 8022aee:	d8e6      	bhi.n	8022abe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8022af0:	fb16 f80c 	smulbb	r8, r6, ip
 8022af4:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8022af8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022afc:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022b00:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022b04:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8022b08:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022b0c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022b10:	ea44 0909 	orr.w	r9, r4, r9
 8022b14:	f1cc 0410 	rsb	r4, ip, #16
 8022b18:	041a      	lsls	r2, r3, #16
 8022b1a:	ea4a 0707 	orr.w	r7, sl, r7
 8022b1e:	1ba4      	subs	r4, r4, r6
 8022b20:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8022b24:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022b28:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022b2c:	4377      	muls	r7, r6
 8022b2e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8022b32:	4313      	orrs	r3, r2
 8022b34:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8022b38:	fb04 7409 	mla	r4, r4, r9, r7
 8022b3c:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8022b40:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022b44:	b2af      	uxth	r7, r5
 8022b46:	fb08 4303 	mla	r3, r8, r3, r4
 8022b4a:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8022b4e:	43ed      	mvns	r5, r5
 8022b50:	10c6      	asrs	r6, r0, #3
 8022b52:	4322      	orrs	r2, r4
 8022b54:	b2ed      	uxtb	r5, r5
 8022b56:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8022b5e:	fb16 f605 	smulbb	r6, r6, r5
 8022b62:	0d53      	lsrs	r3, r2, #21
 8022b64:	0952      	lsrs	r2, r2, #5
 8022b66:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022b6a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022b6e:	431a      	orrs	r2, r3
 8022b70:	b293      	uxth	r3, r2
 8022b72:	1202      	asrs	r2, r0, #8
 8022b74:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022b78:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022b7c:	00dc      	lsls	r4, r3, #3
 8022b7e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022b82:	fb12 f205 	smulbb	r2, r2, r5
 8022b86:	b2e4      	uxtb	r4, r4
 8022b88:	fb0c 2c07 	mla	ip, ip, r7, r2
 8022b8c:	10da      	asrs	r2, r3, #3
 8022b8e:	00c3      	lsls	r3, r0, #3
 8022b90:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022b94:	fa1f fc8c 	uxth.w	ip, ip
 8022b98:	b2db      	uxtb	r3, r3
 8022b9a:	fb02 6207 	mla	r2, r2, r7, r6
 8022b9e:	fb13 f305 	smulbb	r3, r3, r5
 8022ba2:	b296      	uxth	r6, r2
 8022ba4:	fb04 3307 	mla	r3, r4, r7, r3
 8022ba8:	b29a      	uxth	r2, r3
 8022baa:	f10c 0301 	add.w	r3, ip, #1
 8022bae:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022bb2:	1c53      	adds	r3, r2, #1
 8022bb4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022bb8:	1c72      	adds	r2, r6, #1
 8022bba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022bbe:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8022bc2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022bc6:	0952      	lsrs	r2, r2, #5
 8022bc8:	ea43 030c 	orr.w	r3, r3, ip
 8022bcc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022bd0:	4313      	orrs	r3, r2
 8022bd2:	800b      	strh	r3, [r1, #0]
 8022bd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bd8:	2e0f      	cmp	r6, #15
 8022bda:	f63f af70 	bhi.w	8022abe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8022bde:	4603      	mov	r3, r0
 8022be0:	4686      	mov	lr, r0
 8022be2:	e785      	b.n	8022af0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8022be4:	0802e369 	.word	0x0802e369
 8022be8:	0802e9df 	.word	0x0802e9df
 8022bec:	0802e3ed 	.word	0x0802e3ed

08022bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bf4:	ed2d 8b08 	vpush	{d8-d11}
 8022bf8:	b099      	sub	sp, #100	; 0x64
 8022bfa:	eeb0 aa40 	vmov.f32	s20, s0
 8022bfe:	eef0 9a60 	vmov.f32	s19, s1
 8022c02:	9215      	str	r2, [sp, #84]	; 0x54
 8022c04:	eeb0 9a41 	vmov.f32	s18, s2
 8022c08:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022c0a:	eeb0 8a62 	vmov.f32	s16, s5
 8022c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8022c10:	eef0 8a43 	vmov.f32	s17, s6
 8022c14:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8022c18:	eef0 ba44 	vmov.f32	s23, s8
 8022c1c:	9016      	str	r0, [sp, #88]	; 0x58
 8022c1e:	eeb0 ba64 	vmov.f32	s22, s9
 8022c22:	930d      	str	r3, [sp, #52]	; 0x34
 8022c24:	eef0 aa45 	vmov.f32	s21, s10
 8022c28:	6850      	ldr	r0, [r2, #4]
 8022c2a:	910c      	str	r1, [sp, #48]	; 0x30
 8022c2c:	6812      	ldr	r2, [r2, #0]
 8022c2e:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022c32:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8022c36:	fb00 1303 	mla	r3, r0, r3, r1
 8022c3a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8022c3e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022c40:	681b      	ldr	r3, [r3, #0]
 8022c42:	930b      	str	r3, [sp, #44]	; 0x2c
 8022c44:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022c46:	685e      	ldr	r6, [r3, #4]
 8022c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022c4a:	3604      	adds	r6, #4
 8022c4c:	43db      	mvns	r3, r3
 8022c4e:	b2db      	uxtb	r3, r3
 8022c50:	930a      	str	r3, [sp, #40]	; 0x28
 8022c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c54:	2b00      	cmp	r3, #0
 8022c56:	dc03      	bgt.n	8022c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022c58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022c5a:	2b00      	cmp	r3, #0
 8022c5c:	f340 8225 	ble.w	80230aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8022c60:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022c62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022c66:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022c6a:	1e48      	subs	r0, r1, #1
 8022c6c:	1e57      	subs	r7, r2, #1
 8022c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c70:	2b00      	cmp	r3, #0
 8022c72:	f340 80e3 	ble.w	8022e3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8022c76:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8022c7a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022c7e:	d406      	bmi.n	8022c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022c80:	4584      	cmp	ip, r0
 8022c82:	da04      	bge.n	8022c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022c84:	2b00      	cmp	r3, #0
 8022c86:	db02      	blt.n	8022c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022c88:	42bb      	cmp	r3, r7
 8022c8a:	f2c0 80d8 	blt.w	8022e3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8022c8e:	f11c 0c01 	adds.w	ip, ip, #1
 8022c92:	f100 80c9 	bmi.w	8022e28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022c96:	4561      	cmp	r1, ip
 8022c98:	f2c0 80c6 	blt.w	8022e28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022c9c:	3301      	adds	r3, #1
 8022c9e:	f100 80c3 	bmi.w	8022e28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022ca2:	429a      	cmp	r2, r3
 8022ca4:	f2c0 80c0 	blt.w	8022e28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022ca8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022cac:	4647      	mov	r7, r8
 8022cae:	f1bb 0f00 	cmp.w	fp, #0
 8022cb2:	f340 80e3 	ble.w	8022e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8022cb6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8022cb8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022cbc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022cbe:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022cc2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022cc6:	ea5f 422a 	movs.w	r2, sl, asr #16
 8022cca:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022cce:	689b      	ldr	r3, [r3, #8]
 8022cd0:	f100 8121 	bmi.w	8022f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022cd4:	f103 39ff 	add.w	r9, r3, #4294967295
 8022cd8:	454a      	cmp	r2, r9
 8022cda:	f280 811c 	bge.w	8022f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022cde:	f1bc 0f00 	cmp.w	ip, #0
 8022ce2:	f2c0 8118 	blt.w	8022f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022ce6:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022cea:	45cc      	cmp	ip, r9
 8022cec:	f280 8113 	bge.w	8022f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022cf0:	b21b      	sxth	r3, r3
 8022cf2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022cf4:	fb0c 2203 	mla	r2, ip, r3, r2
 8022cf8:	eb04 0902 	add.w	r9, r4, r2
 8022cfc:	5ca2      	ldrb	r2, [r4, r2]
 8022cfe:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8022d02:	2800      	cmp	r0, #0
 8022d04:	f000 80fe 	beq.w	8022f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8022d08:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022d0c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022d10:	9211      	str	r2, [sp, #68]	; 0x44
 8022d12:	b151      	cbz	r1, 8022d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022d14:	eb09 0203 	add.w	r2, r9, r3
 8022d18:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022d1c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022d20:	930f      	str	r3, [sp, #60]	; 0x3c
 8022d22:	7853      	ldrb	r3, [r2, #1]
 8022d24:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022d28:	9312      	str	r3, [sp, #72]	; 0x48
 8022d2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022d2c:	fb10 f201 	smulbb	r2, r0, r1
 8022d30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022d32:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022d36:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022d3a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8022d3e:	10d2      	asrs	r2, r2, #3
 8022d40:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022d44:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8022d48:	ea4c 0c03 	orr.w	ip, ip, r3
 8022d4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022d4e:	041b      	lsls	r3, r3, #16
 8022d50:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022d54:	4323      	orrs	r3, r4
 8022d56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022d58:	4353      	muls	r3, r2
 8022d5a:	fb09 330c 	mla	r3, r9, ip, r3
 8022d5e:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022d62:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022d66:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022d6a:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022d6e:	f1c1 0c10 	rsb	ip, r1, #16
 8022d72:	ebac 0c00 	sub.w	ip, ip, r0
 8022d76:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022d7a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022d7e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022d82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d84:	0418      	lsls	r0, r3, #16
 8022d86:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022d8a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022d8e:	4318      	orrs	r0, r3
 8022d90:	fb02 c200 	mla	r2, r2, r0, ip
 8022d94:	8838      	ldrh	r0, [r7, #0]
 8022d96:	0d53      	lsrs	r3, r2, #21
 8022d98:	0952      	lsrs	r2, r2, #5
 8022d9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022d9e:	1201      	asrs	r1, r0, #8
 8022da0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022da4:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022da8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022dac:	00c0      	lsls	r0, r0, #3
 8022dae:	431a      	orrs	r2, r3
 8022db0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8022db4:	fb11 f104 	smulbb	r1, r1, r4
 8022db8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022dbc:	b292      	uxth	r2, r2
 8022dbe:	fb1e fe04 	smulbb	lr, lr, r4
 8022dc2:	b2c0      	uxtb	r0, r0
 8022dc4:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8022dc8:	fb10 f004 	smulbb	r0, r0, r4
 8022dcc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022dd0:	fb0c 1c03 	mla	ip, ip, r3, r1
 8022dd4:	10d1      	asrs	r1, r2, #3
 8022dd6:	00d2      	lsls	r2, r2, #3
 8022dd8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022ddc:	fa1f fc8c 	uxth.w	ip, ip
 8022de0:	b2d2      	uxtb	r2, r2
 8022de2:	fb01 e103 	mla	r1, r1, r3, lr
 8022de6:	fb02 0303 	mla	r3, r2, r3, r0
 8022dea:	b289      	uxth	r1, r1
 8022dec:	b29a      	uxth	r2, r3
 8022dee:	f10c 0301 	add.w	r3, ip, #1
 8022df2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022df6:	1c53      	adds	r3, r2, #1
 8022df8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022dfc:	1c4a      	adds	r2, r1, #1
 8022dfe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022e02:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022e06:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022e0a:	0949      	lsrs	r1, r1, #5
 8022e0c:	ea43 030c 	orr.w	r3, r3, ip
 8022e10:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022e14:	430b      	orrs	r3, r1
 8022e16:	803b      	strh	r3, [r7, #0]
 8022e18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022e1a:	3702      	adds	r7, #2
 8022e1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022e20:	449a      	add	sl, r3
 8022e22:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022e24:	441d      	add	r5, r3
 8022e26:	e742      	b.n	8022cae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022e28:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022e2a:	f108 0802 	add.w	r8, r8, #2
 8022e2e:	449a      	add	sl, r3
 8022e30:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022e32:	441d      	add	r5, r3
 8022e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e36:	3b01      	subs	r3, #1
 8022e38:	9309      	str	r3, [sp, #36]	; 0x24
 8022e3a:	e718      	b.n	8022c6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8022e3c:	d023      	beq.n	8022e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e40:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8022e42:	3b01      	subs	r3, #1
 8022e44:	fb00 a003 	mla	r0, r0, r3, sl
 8022e48:	1400      	asrs	r0, r0, #16
 8022e4a:	f53f af2d 	bmi.w	8022ca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022e4e:	3901      	subs	r1, #1
 8022e50:	4288      	cmp	r0, r1
 8022e52:	f6bf af29 	bge.w	8022ca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022e56:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022e58:	fb01 5303 	mla	r3, r1, r3, r5
 8022e5c:	141b      	asrs	r3, r3, #16
 8022e5e:	f53f af23 	bmi.w	8022ca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022e62:	3a01      	subs	r2, #1
 8022e64:	4293      	cmp	r3, r2
 8022e66:	f6bf af1f 	bge.w	8022ca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022e6a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022e6e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8022e72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8022e76:	f1be 0f00 	cmp.w	lr, #0
 8022e7a:	dc6c      	bgt.n	8022f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e7e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022e82:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8022e86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e88:	2b00      	cmp	r3, #0
 8022e8a:	f340 810e 	ble.w	80230aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8022e8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022e92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022e94:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022e98:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022e9c:	eef0 6a48 	vmov.f32	s13, s16
 8022ea0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022ea4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022ea8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022eac:	ee16 aa90 	vmov	sl, s13
 8022eb0:	eef0 6a68 	vmov.f32	s13, s17
 8022eb4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022eb8:	ee16 5a90 	vmov	r5, s13
 8022ebc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022ec0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022ec4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022ec8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022ecc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022ed0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022ed4:	ee18 2a10 	vmov	r2, s16
 8022ed8:	eeb0 8a47 	vmov.f32	s16, s14
 8022edc:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ee0:	ee18 2a90 	vmov	r2, s17
 8022ee4:	932d      	str	r3, [sp, #180]	; 0xb4
 8022ee6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022ee8:	eef0 8a67 	vmov.f32	s17, s15
 8022eec:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ef0:	932e      	str	r3, [sp, #184]	; 0xb8
 8022ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ef4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022ef6:	3b01      	subs	r3, #1
 8022ef8:	930c      	str	r3, [sp, #48]	; 0x30
 8022efa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022efc:	bf08      	it	eq
 8022efe:	4613      	moveq	r3, r2
 8022f00:	9309      	str	r3, [sp, #36]	; 0x24
 8022f02:	e6a6      	b.n	8022c52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022f04:	2900      	cmp	r1, #0
 8022f06:	f43f af10 	beq.w	8022d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022f0a:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022f0e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022f12:	930f      	str	r3, [sp, #60]	; 0x3c
 8022f14:	e709      	b.n	8022d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022f16:	f112 0901 	adds.w	r9, r2, #1
 8022f1a:	f53f af7d 	bmi.w	8022e18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022f1e:	454b      	cmp	r3, r9
 8022f20:	f6ff af7a 	blt.w	8022e18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022f24:	f11c 0901 	adds.w	r9, ip, #1
 8022f28:	f53f af76 	bmi.w	8022e18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022f2c:	45ce      	cmp	lr, r9
 8022f2e:	f6ff af73 	blt.w	8022e18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022f32:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022f34:	b21b      	sxth	r3, r3
 8022f36:	9202      	str	r2, [sp, #8]
 8022f38:	fa0f f28e 	sxth.w	r2, lr
 8022f3c:	9300      	str	r3, [sp, #0]
 8022f3e:	4633      	mov	r3, r6
 8022f40:	9201      	str	r2, [sp, #4]
 8022f42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022f44:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022f48:	e9cd c003 	strd	ip, r0, [sp, #12]
 8022f4c:	4639      	mov	r1, r7
 8022f4e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8022f50:	f7ff fd70 	bl	8022a34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8022f54:	e760      	b.n	8022e18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022f56:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022f58:	ea4f 422a 	mov.w	r2, sl, asr #16
 8022f5c:	1429      	asrs	r1, r5, #16
 8022f5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022f60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022f64:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8022f68:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022f6c:	fb03 2101 	mla	r1, r3, r1, r2
 8022f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022f72:	440a      	add	r2, r1
 8022f74:	5c61      	ldrb	r1, [r4, r1]
 8022f76:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8022f7a:	f1bc 0f00 	cmp.w	ip, #0
 8022f7e:	f000 808c 	beq.w	802309a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8022f82:	7857      	ldrb	r7, [r2, #1]
 8022f84:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8022f88:	9413      	str	r4, [sp, #76]	; 0x4c
 8022f8a:	b140      	cbz	r0, 8022f9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8022f8c:	18d7      	adds	r7, r2, r3
 8022f8e:	5cd3      	ldrb	r3, [r2, r3]
 8022f90:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022f94:	9310      	str	r3, [sp, #64]	; 0x40
 8022f96:	787b      	ldrb	r3, [r7, #1]
 8022f98:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022f9c:	9314      	str	r3, [sp, #80]	; 0x50
 8022f9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022fa0:	fb1c f200 	smulbb	r2, ip, r0
 8022fa4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022fa6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022faa:	041f      	lsls	r7, r3, #16
 8022fac:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022fb0:	10d2      	asrs	r2, r2, #3
 8022fb2:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8022fb6:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8022fba:	431f      	orrs	r7, r3
 8022fbc:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8022fc0:	9317      	str	r3, [sp, #92]	; 0x5c
 8022fc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022fc4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022fc6:	041b      	lsls	r3, r3, #16
 8022fc8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022fcc:	ea43 030b 	orr.w	r3, r3, fp
 8022fd0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022fd4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022fd8:	4353      	muls	r3, r2
 8022fda:	fb04 3707 	mla	r7, r4, r7, r3
 8022fde:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022fe2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022fe4:	ea43 0b01 	orr.w	fp, r3, r1
 8022fe8:	f1c0 0110 	rsb	r1, r0, #16
 8022fec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022fee:	eba1 0c0c 	sub.w	ip, r1, ip
 8022ff2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022ff6:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022ffa:	fb0c 770b 	mla	r7, ip, fp, r7
 8022ffe:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023002:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8023006:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802300a:	ea4c 0c0b 	orr.w	ip, ip, fp
 802300e:	fb02 770c 	mla	r7, r2, ip, r7
 8023012:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023014:	0d79      	lsrs	r1, r7, #21
 8023016:	8812      	ldrh	r2, [r2, #0]
 8023018:	097f      	lsrs	r7, r7, #5
 802301a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802301e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023022:	430f      	orrs	r7, r1
 8023024:	1211      	asrs	r1, r2, #8
 8023026:	b2bb      	uxth	r3, r7
 8023028:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802302c:	10d7      	asrs	r7, r2, #3
 802302e:	fb11 f104 	smulbb	r1, r1, r4
 8023032:	1218      	asrs	r0, r3, #8
 8023034:	00d2      	lsls	r2, r2, #3
 8023036:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802303a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802303e:	fb17 f704 	smulbb	r7, r7, r4
 8023042:	b2d2      	uxtb	r2, r2
 8023044:	fb00 1009 	mla	r0, r0, r9, r1
 8023048:	10d9      	asrs	r1, r3, #3
 802304a:	fb12 f204 	smulbb	r2, r2, r4
 802304e:	00db      	lsls	r3, r3, #3
 8023050:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023054:	b280      	uxth	r0, r0
 8023056:	b2db      	uxtb	r3, r3
 8023058:	fb01 7109 	mla	r1, r1, r9, r7
 802305c:	fb03 2309 	mla	r3, r3, r9, r2
 8023060:	1c42      	adds	r2, r0, #1
 8023062:	b289      	uxth	r1, r1
 8023064:	b29b      	uxth	r3, r3
 8023066:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802306a:	1c4f      	adds	r7, r1, #1
 802306c:	1c5a      	adds	r2, r3, #1
 802306e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8023072:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023076:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802307a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802307c:	0949      	lsrs	r1, r1, #5
 802307e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023082:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023086:	4310      	orrs	r0, r2
 8023088:	4308      	orrs	r0, r1
 802308a:	f823 0b02 	strh.w	r0, [r3], #2
 802308e:	930e      	str	r3, [sp, #56]	; 0x38
 8023090:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023092:	449a      	add	sl, r3
 8023094:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023096:	441d      	add	r5, r3
 8023098:	e6ed      	b.n	8022e76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 802309a:	2800      	cmp	r0, #0
 802309c:	f43f af7f 	beq.w	8022f9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80230a0:	5cd3      	ldrb	r3, [r2, r3]
 80230a2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80230a6:	9310      	str	r3, [sp, #64]	; 0x40
 80230a8:	e779      	b.n	8022f9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80230aa:	b019      	add	sp, #100	; 0x64
 80230ac:	ecbd 8b08 	vpop	{d8-d11}
 80230b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080230b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80230b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80230b8:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 80230bc:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80230c0:	2e00      	cmp	r6, #0
 80230c2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80230c6:	fb06 570e 	mla	r7, r6, lr, r5
 80230ca:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80230ce:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80230d2:	eb02 0807 	add.w	r8, r2, r7
 80230d6:	8808      	ldrh	r0, [r1, #0]
 80230d8:	db38      	blt.n	802314c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80230da:	45b1      	cmp	r9, r6
 80230dc:	dd36      	ble.n	802314c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80230de:	2d00      	cmp	r5, #0
 80230e0:	db32      	blt.n	8023148 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80230e2:	45ae      	cmp	lr, r5
 80230e4:	dd30      	ble.n	8023148 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80230e6:	5dd2      	ldrb	r2, [r2, r7]
 80230e8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80230ec:	1c6a      	adds	r2, r5, #1
 80230ee:	d430      	bmi.n	8023152 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80230f0:	4596      	cmp	lr, r2
 80230f2:	dd2e      	ble.n	8023152 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80230f4:	b36c      	cbz	r4, 8023152 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80230f6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80230fa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80230fe:	3601      	adds	r6, #1
 8023100:	d42b      	bmi.n	802315a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8023102:	45b1      	cmp	r9, r6
 8023104:	dd29      	ble.n	802315a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8023106:	f1bc 0f00 	cmp.w	ip, #0
 802310a:	d028      	beq.n	802315e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 802310c:	2d00      	cmp	r5, #0
 802310e:	db22      	blt.n	8023156 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8023110:	45ae      	cmp	lr, r5
 8023112:	dd20      	ble.n	8023156 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8023114:	f818 600e 	ldrb.w	r6, [r8, lr]
 8023118:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 802311c:	3501      	adds	r5, #1
 802311e:	d407      	bmi.n	8023130 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023120:	45ae      	cmp	lr, r5
 8023122:	dd05      	ble.n	8023130 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023124:	b134      	cbz	r4, 8023134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8023126:	44c6      	add	lr, r8
 8023128:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802312c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8023130:	2c0f      	cmp	r4, #15
 8023132:	d802      	bhi.n	802313a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023134:	f1bc 0f0f 	cmp.w	ip, #15
 8023138:	d914      	bls.n	8023164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 802313a:	4b26      	ldr	r3, [pc, #152]	; (80231d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 802313c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8023140:	4a25      	ldr	r2, [pc, #148]	; (80231d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8023142:	4826      	ldr	r0, [pc, #152]	; (80231dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8023144:	f006 fdd4 	bl	8029cf0 <__assert_func>
 8023148:	4607      	mov	r7, r0
 802314a:	e7cf      	b.n	80230ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 802314c:	4602      	mov	r2, r0
 802314e:	4607      	mov	r7, r0
 8023150:	e7d5      	b.n	80230fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8023152:	4602      	mov	r2, r0
 8023154:	e7d3      	b.n	80230fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8023156:	4606      	mov	r6, r0
 8023158:	e7e0      	b.n	802311c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 802315a:	4606      	mov	r6, r0
 802315c:	e7e8      	b.n	8023130 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 802315e:	2c0f      	cmp	r4, #15
 8023160:	d8eb      	bhi.n	802313a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023162:	4606      	mov	r6, r0
 8023164:	fb14 f30c 	smulbb	r3, r4, ip
 8023168:	043d      	lsls	r5, r7, #16
 802316a:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 802316e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023172:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8023176:	10db      	asrs	r3, r3, #3
 8023178:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802317c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023180:	432f      	orrs	r7, r5
 8023182:	f1cc 0510 	rsb	r5, ip, #16
 8023186:	ea4e 0202 	orr.w	r2, lr, r2
 802318a:	1b2d      	subs	r5, r5, r4
 802318c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8023190:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8023194:	4354      	muls	r4, r2
 8023196:	fb05 4507 	mla	r5, r5, r7, r4
 802319a:	0404      	lsls	r4, r0, #16
 802319c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80231a0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80231a4:	4320      	orrs	r0, r4
 80231a6:	fb03 5400 	mla	r4, r3, r0, r5
 80231aa:	0430      	lsls	r0, r6, #16
 80231ac:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80231b0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80231b4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80231b8:	4330      	orrs	r0, r6
 80231ba:	fb03 4000 	mla	r0, r3, r0, r4
 80231be:	0d43      	lsrs	r3, r0, #21
 80231c0:	0940      	lsrs	r0, r0, #5
 80231c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80231c6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80231ca:	4318      	orrs	r0, r3
 80231cc:	8008      	strh	r0, [r1, #0]
 80231ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80231d2:	bf00      	nop
 80231d4:	0802e369 	.word	0x0802e369
 80231d8:	0802e9df 	.word	0x0802e9df
 80231dc:	0802e3ed 	.word	0x0802e3ed

080231e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80231e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231e4:	ed2d 8b0a 	vpush	{d8-d12}
 80231e8:	b093      	sub	sp, #76	; 0x4c
 80231ea:	eeb0 aa40 	vmov.f32	s20, s0
 80231ee:	eef0 9a60 	vmov.f32	s19, s1
 80231f2:	920f      	str	r2, [sp, #60]	; 0x3c
 80231f4:	eeb0 9a41 	vmov.f32	s18, s2
 80231f8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80231fa:	eeb0 8a62 	vmov.f32	s16, s5
 80231fe:	9010      	str	r0, [sp, #64]	; 0x40
 8023200:	eef0 8a43 	vmov.f32	s17, s6
 8023204:	6850      	ldr	r0, [r2, #4]
 8023206:	eeb0 ca44 	vmov.f32	s24, s8
 802320a:	9108      	str	r1, [sp, #32]
 802320c:	eef0 ba64 	vmov.f32	s23, s9
 8023210:	9306      	str	r3, [sp, #24]
 8023212:	eeb0 ba45 	vmov.f32	s22, s10
 8023216:	6812      	ldr	r2, [r2, #0]
 8023218:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802321c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023220:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023224:	fb00 1303 	mla	r3, r0, r3, r1
 8023228:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802322c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802322e:	681b      	ldr	r3, [r3, #0]
 8023230:	9307      	str	r3, [sp, #28]
 8023232:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023234:	685f      	ldr	r7, [r3, #4]
 8023236:	3704      	adds	r7, #4
 8023238:	9b08      	ldr	r3, [sp, #32]
 802323a:	2b00      	cmp	r3, #0
 802323c:	dc03      	bgt.n	8023246 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802323e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023240:	2b00      	cmp	r3, #0
 8023242:	f340 81b2 	ble.w	80235aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8023246:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023248:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802324c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023250:	1e48      	subs	r0, r1, #1
 8023252:	f102 3cff 	add.w	ip, r2, #4294967295
 8023256:	9b06      	ldr	r3, [sp, #24]
 8023258:	2b00      	cmp	r3, #0
 802325a:	f340 80a9 	ble.w	80233b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 802325e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023262:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023266:	d406      	bmi.n	8023276 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023268:	4586      	cmp	lr, r0
 802326a:	da04      	bge.n	8023276 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802326c:	2b00      	cmp	r3, #0
 802326e:	db02      	blt.n	8023276 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023270:	4563      	cmp	r3, ip
 8023272:	f2c0 809e 	blt.w	80233b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8023276:	f11e 0e01 	adds.w	lr, lr, #1
 802327a:	f100 808f 	bmi.w	802339c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802327e:	4571      	cmp	r1, lr
 8023280:	f2c0 808c 	blt.w	802339c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023284:	3301      	adds	r3, #1
 8023286:	f100 8089 	bmi.w	802339c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802328a:	429a      	cmp	r2, r3
 802328c:	f2c0 8086 	blt.w	802339c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023290:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023294:	46c8      	mov	r8, r9
 8023296:	f1bb 0f00 	cmp.w	fp, #0
 802329a:	f340 80a6 	ble.w	80233ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802329e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80232a0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80232a4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80232a6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80232aa:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80232ae:	1422      	asrs	r2, r4, #16
 80232b0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80232b4:	689b      	ldr	r3, [r3, #8]
 80232b6:	f100 80e3 	bmi.w	8023480 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80232ba:	f103 3aff 	add.w	sl, r3, #4294967295
 80232be:	4552      	cmp	r2, sl
 80232c0:	f280 80de 	bge.w	8023480 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80232c4:	f1bc 0f00 	cmp.w	ip, #0
 80232c8:	f2c0 80da 	blt.w	8023480 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80232cc:	f10e 3aff 	add.w	sl, lr, #4294967295
 80232d0:	45d4      	cmp	ip, sl
 80232d2:	f280 80d5 	bge.w	8023480 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80232d6:	b21b      	sxth	r3, r3
 80232d8:	9d07      	ldr	r5, [sp, #28]
 80232da:	fb0c 2203 	mla	r2, ip, r3, r2
 80232de:	eb05 0a02 	add.w	sl, r5, r2
 80232e2:	5caa      	ldrb	r2, [r5, r2]
 80232e4:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80232e8:	2800      	cmp	r0, #0
 80232ea:	f000 80c0 	beq.w	802346e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 80232ee:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80232f2:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80232f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80232f8:	b151      	cbz	r1, 8023310 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80232fa:	eb0a 0203 	add.w	r2, sl, r3
 80232fe:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023302:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023306:	9309      	str	r3, [sp, #36]	; 0x24
 8023308:	7853      	ldrb	r3, [r2, #1]
 802330a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802330e:	930c      	str	r3, [sp, #48]	; 0x30
 8023310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023312:	fb10 f201 	smulbb	r2, r0, r1
 8023316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023318:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802331c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023320:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023324:	10d2      	asrs	r2, r2, #3
 8023326:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802332a:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802332e:	ea4c 0c03 	orr.w	ip, ip, r3
 8023332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023334:	041b      	lsls	r3, r3, #16
 8023336:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802333a:	432b      	orrs	r3, r5
 802333c:	4353      	muls	r3, r2
 802333e:	fb0a 330c 	mla	r3, sl, ip, r3
 8023342:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023346:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802334a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802334e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023352:	f1c1 0c10 	rsb	ip, r1, #16
 8023356:	ebac 0c00 	sub.w	ip, ip, r0
 802335a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802335e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023362:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023368:	0418      	lsls	r0, r3, #16
 802336a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802336e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023372:	4318      	orrs	r0, r3
 8023374:	fb02 c200 	mla	r2, r2, r0, ip
 8023378:	0d53      	lsrs	r3, r2, #21
 802337a:	0952      	lsrs	r2, r2, #5
 802337c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023380:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023384:	431a      	orrs	r2, r3
 8023386:	f8a8 2000 	strh.w	r2, [r8]
 802338a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802338c:	f108 0802 	add.w	r8, r8, #2
 8023390:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023394:	441c      	add	r4, r3
 8023396:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023398:	441e      	add	r6, r3
 802339a:	e77c      	b.n	8023296 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802339c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802339e:	f109 0902 	add.w	r9, r9, #2
 80233a2:	441c      	add	r4, r3
 80233a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80233a6:	441e      	add	r6, r3
 80233a8:	9b06      	ldr	r3, [sp, #24]
 80233aa:	3b01      	subs	r3, #1
 80233ac:	9306      	str	r3, [sp, #24]
 80233ae:	e752      	b.n	8023256 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80233b0:	d020      	beq.n	80233f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80233b2:	9b06      	ldr	r3, [sp, #24]
 80233b4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80233b6:	3b01      	subs	r3, #1
 80233b8:	fb00 4003 	mla	r0, r0, r3, r4
 80233bc:	1400      	asrs	r0, r0, #16
 80233be:	f53f af67 	bmi.w	8023290 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80233c2:	3901      	subs	r1, #1
 80233c4:	4288      	cmp	r0, r1
 80233c6:	f6bf af63 	bge.w	8023290 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80233ca:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80233cc:	fb01 6303 	mla	r3, r1, r3, r6
 80233d0:	141b      	asrs	r3, r3, #16
 80233d2:	f53f af5d 	bmi.w	8023290 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80233d6:	3a01      	subs	r2, #1
 80233d8:	4293      	cmp	r3, r2
 80233da:	f6bf af59 	bge.w	8023290 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80233de:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80233e2:	46ca      	mov	sl, r9
 80233e4:	f1b8 0f00 	cmp.w	r8, #0
 80233e8:	dc67      	bgt.n	80234ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80233ea:	9b06      	ldr	r3, [sp, #24]
 80233ec:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80233f0:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80233f4:	9b08      	ldr	r3, [sp, #32]
 80233f6:	2b00      	cmp	r3, #0
 80233f8:	f340 80d7 	ble.w	80235aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80233fc:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8023400:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023402:	ee79 9aab 	vadd.f32	s19, s19, s23
 8023406:	eef0 6a48 	vmov.f32	s13, s16
 802340a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802340e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8023412:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023416:	ee16 4a90 	vmov	r4, s13
 802341a:	eef0 6a68 	vmov.f32	s13, s17
 802341e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023422:	ee16 6a90 	vmov	r6, s13
 8023426:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802342a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802342e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023432:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023436:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802343a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802343e:	ee18 2a10 	vmov	r2, s16
 8023442:	eeb0 8a47 	vmov.f32	s16, s14
 8023446:	fb92 f3f3 	sdiv	r3, r2, r3
 802344a:	ee18 2a90 	vmov	r2, s17
 802344e:	9329      	str	r3, [sp, #164]	; 0xa4
 8023450:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023452:	eef0 8a67 	vmov.f32	s17, s15
 8023456:	fb92 f3f3 	sdiv	r3, r2, r3
 802345a:	932a      	str	r3, [sp, #168]	; 0xa8
 802345c:	9b08      	ldr	r3, [sp, #32]
 802345e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023460:	3b01      	subs	r3, #1
 8023462:	9308      	str	r3, [sp, #32]
 8023464:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023466:	bf08      	it	eq
 8023468:	4613      	moveq	r3, r2
 802346a:	9306      	str	r3, [sp, #24]
 802346c:	e6e4      	b.n	8023238 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802346e:	2900      	cmp	r1, #0
 8023470:	f43f af4e 	beq.w	8023310 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023474:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023478:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802347c:	9309      	str	r3, [sp, #36]	; 0x24
 802347e:	e747      	b.n	8023310 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023480:	f112 0a01 	adds.w	sl, r2, #1
 8023484:	d481      	bmi.n	802338a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023486:	4553      	cmp	r3, sl
 8023488:	f6ff af7f 	blt.w	802338a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802348c:	f11c 0a01 	adds.w	sl, ip, #1
 8023490:	f53f af7b 	bmi.w	802338a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023494:	45d6      	cmp	lr, sl
 8023496:	f6ff af78 	blt.w	802338a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802349a:	b21b      	sxth	r3, r3
 802349c:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80234a0:	fa0f f28e 	sxth.w	r2, lr
 80234a4:	9300      	str	r3, [sp, #0]
 80234a6:	463b      	mov	r3, r7
 80234a8:	9201      	str	r2, [sp, #4]
 80234aa:	9a07      	ldr	r2, [sp, #28]
 80234ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80234b0:	4641      	mov	r1, r8
 80234b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80234b4:	f7ff fdfe 	bl	80230b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80234b8:	e767      	b.n	802338a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80234ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80234bc:	1422      	asrs	r2, r4, #16
 80234be:	1431      	asrs	r1, r6, #16
 80234c0:	9d07      	ldr	r5, [sp, #28]
 80234c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80234c6:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80234ca:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80234ce:	fb03 2101 	mla	r1, r3, r1, r2
 80234d2:	9a07      	ldr	r2, [sp, #28]
 80234d4:	440a      	add	r2, r1
 80234d6:	5c69      	ldrb	r1, [r5, r1]
 80234d8:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80234dc:	f1be 0f00 	cmp.w	lr, #0
 80234e0:	d05c      	beq.n	802359c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 80234e2:	f892 c001 	ldrb.w	ip, [r2, #1]
 80234e6:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80234ea:	950d      	str	r5, [sp, #52]	; 0x34
 80234ec:	b150      	cbz	r0, 8023504 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80234ee:	eb02 0c03 	add.w	ip, r2, r3
 80234f2:	5cd3      	ldrb	r3, [r2, r3]
 80234f4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80234f8:	930a      	str	r3, [sp, #40]	; 0x28
 80234fa:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80234fe:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023502:	930e      	str	r3, [sp, #56]	; 0x38
 8023504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023506:	fb1e f200 	smulbb	r2, lr, r0
 802350a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802350c:	f108 38ff 	add.w	r8, r8, #4294967295
 8023510:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023514:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023518:	10d2      	asrs	r2, r2, #3
 802351a:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 802351e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023522:	ea4c 0c03 	orr.w	ip, ip, r3
 8023526:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802352a:	9311      	str	r3, [sp, #68]	; 0x44
 802352c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802352e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023530:	041b      	lsls	r3, r3, #16
 8023532:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023536:	ea43 030b 	orr.w	r3, r3, fp
 802353a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802353e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023542:	4353      	muls	r3, r2
 8023544:	fb05 3c0c 	mla	ip, r5, ip, r3
 8023548:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802354c:	ea43 0b01 	orr.w	fp, r3, r1
 8023550:	f1c0 0110 	rsb	r1, r0, #16
 8023554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023556:	eba1 0e0e 	sub.w	lr, r1, lr
 802355a:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802355e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023562:	fb0e cc0b 	mla	ip, lr, fp, ip
 8023566:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802356a:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 802356e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023572:	ea4b 0e0e 	orr.w	lr, fp, lr
 8023576:	fb02 cc0e 	mla	ip, r2, lr, ip
 802357a:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802357e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023582:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023586:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802358a:	ea43 0c0c 	orr.w	ip, r3, ip
 802358e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023590:	441c      	add	r4, r3
 8023592:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023594:	f82a cb02 	strh.w	ip, [sl], #2
 8023598:	441e      	add	r6, r3
 802359a:	e723      	b.n	80233e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802359c:	2800      	cmp	r0, #0
 802359e:	d0b1      	beq.n	8023504 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80235a0:	5cd3      	ldrb	r3, [r2, r3]
 80235a2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80235a6:	930a      	str	r3, [sp, #40]	; 0x28
 80235a8:	e7ac      	b.n	8023504 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80235aa:	b013      	add	sp, #76	; 0x4c
 80235ac:	ecbd 8b0a 	vpop	{d8-d12}
 80235b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080235b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80235b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235b8:	468b      	mov	fp, r1
 80235ba:	8809      	ldrh	r1, [r1, #0]
 80235bc:	b089      	sub	sp, #36	; 0x24
 80235be:	10cd      	asrs	r5, r1, #3
 80235c0:	ea4f 2921 	mov.w	r9, r1, asr #8
 80235c4:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 80235c8:	00c9      	lsls	r1, r1, #3
 80235ca:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80235ce:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80235d2:	9202      	str	r2, [sp, #8]
 80235d4:	b2c9      	uxtb	r1, r1
 80235d6:	9500      	str	r5, [sp, #0]
 80235d8:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 80235dc:	9101      	str	r1, [sp, #4]
 80235de:	9900      	ldr	r1, [sp, #0]
 80235e0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80235e4:	0209      	lsls	r1, r1, #8
 80235e6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80235ea:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 80235ee:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80235f2:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 80235f6:	fb04 650e 	mla	r5, r4, lr, r6
 80235fa:	2c00      	cmp	r4, #0
 80235fc:	eb02 0805 	add.w	r8, r2, r5
 8023600:	9a01      	ldr	r2, [sp, #4]
 8023602:	ea41 0102 	orr.w	r1, r1, r2
 8023606:	9107      	str	r1, [sp, #28]
 8023608:	db43      	blt.n	8023692 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 802360a:	45a2      	cmp	sl, r4
 802360c:	dd41      	ble.n	8023692 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 802360e:	2e00      	cmp	r6, #0
 8023610:	db3d      	blt.n	802368e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8023612:	45b6      	cmp	lr, r6
 8023614:	dd3b      	ble.n	802368e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8023616:	9a02      	ldr	r2, [sp, #8]
 8023618:	5d55      	ldrb	r5, [r2, r5]
 802361a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802361e:	441d      	add	r5, r3
 8023620:	1c72      	adds	r2, r6, #1
 8023622:	d439      	bmi.n	8023698 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8023624:	4596      	cmp	lr, r2
 8023626:	dd37      	ble.n	8023698 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8023628:	2f00      	cmp	r7, #0
 802362a:	d035      	beq.n	8023698 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 802362c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8023630:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023634:	4419      	add	r1, r3
 8023636:	3401      	adds	r4, #1
 8023638:	d432      	bmi.n	80236a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802363a:	45a2      	cmp	sl, r4
 802363c:	dd30      	ble.n	80236a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802363e:	b378      	cbz	r0, 80236a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8023640:	2e00      	cmp	r6, #0
 8023642:	db2b      	blt.n	802369c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8023644:	45b6      	cmp	lr, r6
 8023646:	dd29      	ble.n	802369c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8023648:	f818 400e 	ldrb.w	r4, [r8, lr]
 802364c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023650:	441c      	add	r4, r3
 8023652:	3601      	adds	r6, #1
 8023654:	d427      	bmi.n	80236a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8023656:	45b6      	cmp	lr, r6
 8023658:	dd25      	ble.n	80236a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802365a:	b327      	cbz	r7, 80236a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802365c:	44c6      	add	lr, r8
 802365e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023662:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023666:	4413      	add	r3, r2
 8023668:	782a      	ldrb	r2, [r5, #0]
 802366a:	2f0f      	cmp	r7, #15
 802366c:	9202      	str	r2, [sp, #8]
 802366e:	780a      	ldrb	r2, [r1, #0]
 8023670:	9203      	str	r2, [sp, #12]
 8023672:	7822      	ldrb	r2, [r4, #0]
 8023674:	9204      	str	r2, [sp, #16]
 8023676:	781a      	ldrb	r2, [r3, #0]
 8023678:	9205      	str	r2, [sp, #20]
 802367a:	d801      	bhi.n	8023680 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 802367c:	280f      	cmp	r0, #15
 802367e:	d914      	bls.n	80236aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8023680:	4b3f      	ldr	r3, [pc, #252]	; (8023780 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8023682:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8023686:	4a3f      	ldr	r2, [pc, #252]	; (8023784 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8023688:	483f      	ldr	r0, [pc, #252]	; (8023788 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 802368a:	f006 fb31 	bl	8029cf0 <__assert_func>
 802368e:	ad07      	add	r5, sp, #28
 8023690:	e7c6      	b.n	8023620 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8023692:	a907      	add	r1, sp, #28
 8023694:	460d      	mov	r5, r1
 8023696:	e7ce      	b.n	8023636 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8023698:	a907      	add	r1, sp, #28
 802369a:	e7cc      	b.n	8023636 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 802369c:	ac07      	add	r4, sp, #28
 802369e:	e7d8      	b.n	8023652 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 80236a0:	ab07      	add	r3, sp, #28
 80236a2:	461c      	mov	r4, r3
 80236a4:	e7e0      	b.n	8023668 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80236a6:	ab07      	add	r3, sp, #28
 80236a8:	e7de      	b.n	8023668 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80236aa:	b2ba      	uxth	r2, r7
 80236ac:	f891 8002 	ldrb.w	r8, [r1, #2]
 80236b0:	b280      	uxth	r0, r0
 80236b2:	7849      	ldrb	r1, [r1, #1]
 80236b4:	78ae      	ldrb	r6, [r5, #2]
 80236b6:	fa1f f78c 	uxth.w	r7, ip
 80236ba:	fb02 fa00 	mul.w	sl, r2, r0
 80236be:	0112      	lsls	r2, r2, #4
 80236c0:	786d      	ldrb	r5, [r5, #1]
 80236c2:	ea6f 0c0c 	mvn.w	ip, ip
 80236c6:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80236ca:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80236ce:	eba2 020a 	sub.w	r2, r2, sl
 80236d2:	fa5f fc8c 	uxtb.w	ip, ip
 80236d6:	b280      	uxth	r0, r0
 80236d8:	fb19 f90c 	smulbb	r9, r9, ip
 80236dc:	b292      	uxth	r2, r2
 80236de:	ebae 0e00 	sub.w	lr, lr, r0
 80236e2:	4351      	muls	r1, r2
 80236e4:	fa1f fe8e 	uxth.w	lr, lr
 80236e8:	fb02 f808 	mul.w	r8, r2, r8
 80236ec:	fb0e 1505 	mla	r5, lr, r5, r1
 80236f0:	7861      	ldrb	r1, [r4, #1]
 80236f2:	fb0e 8806 	mla	r8, lr, r6, r8
 80236f6:	78a6      	ldrb	r6, [r4, #2]
 80236f8:	fb00 5501 	mla	r5, r0, r1, r5
 80236fc:	7859      	ldrb	r1, [r3, #1]
 80236fe:	fb00 8806 	mla	r8, r0, r6, r8
 8023702:	789e      	ldrb	r6, [r3, #2]
 8023704:	9b00      	ldr	r3, [sp, #0]
 8023706:	fb0a 5101 	mla	r1, sl, r1, r5
 802370a:	fb0a 8606 	mla	r6, sl, r6, r8
 802370e:	fb13 f50c 	smulbb	r5, r3, ip
 8023712:	9b03      	ldr	r3, [sp, #12]
 8023714:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023718:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802371c:	435a      	muls	r2, r3
 802371e:	9b02      	ldr	r3, [sp, #8]
 8023720:	fb06 9607 	mla	r6, r6, r7, r9
 8023724:	fb0e 2203 	mla	r2, lr, r3, r2
 8023728:	9b04      	ldr	r3, [sp, #16]
 802372a:	b2b6      	uxth	r6, r6
 802372c:	fb01 5107 	mla	r1, r1, r7, r5
 8023730:	fb00 2003 	mla	r0, r0, r3, r2
 8023734:	9b05      	ldr	r3, [sp, #20]
 8023736:	f106 0901 	add.w	r9, r6, #1
 802373a:	b289      	uxth	r1, r1
 802373c:	fb0a 0a03 	mla	sl, sl, r3, r0
 8023740:	9b01      	ldr	r3, [sp, #4]
 8023742:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8023746:	1c4d      	adds	r5, r1, #1
 8023748:	fb13 fc0c 	smulbb	ip, r3, ip
 802374c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023750:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 8023754:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8023758:	fb0a c707 	mla	r7, sl, r7, ip
 802375c:	0949      	lsrs	r1, r1, #5
 802375e:	b2bf      	uxth	r7, r7
 8023760:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023764:	1c7e      	adds	r6, r7, #1
 8023766:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802376a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802376e:	ea46 0609 	orr.w	r6, r6, r9
 8023772:	430e      	orrs	r6, r1
 8023774:	f8ab 6000 	strh.w	r6, [fp]
 8023778:	b009      	add	sp, #36	; 0x24
 802377a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802377e:	bf00      	nop
 8023780:	0802e369 	.word	0x0802e369
 8023784:	0802e936 	.word	0x0802e936
 8023788:	0802e3ed 	.word	0x0802e3ed

0802378c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802378c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023790:	ed2d 8b08 	vpush	{d8-d11}
 8023794:	b095      	sub	sp, #84	; 0x54
 8023796:	eeb0 aa40 	vmov.f32	s20, s0
 802379a:	eef0 9a60 	vmov.f32	s19, s1
 802379e:	9212      	str	r2, [sp, #72]	; 0x48
 80237a0:	eeb0 9a41 	vmov.f32	s18, s2
 80237a4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80237a6:	eeb0 8a62 	vmov.f32	s16, s5
 80237aa:	9309      	str	r3, [sp, #36]	; 0x24
 80237ac:	eef0 8a43 	vmov.f32	s17, s6
 80237b0:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80237b4:	eef0 ba44 	vmov.f32	s23, s8
 80237b8:	9013      	str	r0, [sp, #76]	; 0x4c
 80237ba:	eeb0 ba64 	vmov.f32	s22, s9
 80237be:	930f      	str	r3, [sp, #60]	; 0x3c
 80237c0:	eef0 aa45 	vmov.f32	s21, s10
 80237c4:	6850      	ldr	r0, [r2, #4]
 80237c6:	910e      	str	r1, [sp, #56]	; 0x38
 80237c8:	6812      	ldr	r2, [r2, #0]
 80237ca:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80237ce:	fb00 1303 	mla	r3, r0, r3, r1
 80237d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80237d6:	930a      	str	r3, [sp, #40]	; 0x28
 80237d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80237da:	681b      	ldr	r3, [r3, #0]
 80237dc:	930d      	str	r3, [sp, #52]	; 0x34
 80237de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80237e0:	685c      	ldr	r4, [r3, #4]
 80237e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80237e4:	3404      	adds	r4, #4
 80237e6:	43db      	mvns	r3, r3
 80237e8:	b2db      	uxtb	r3, r3
 80237ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80237ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	dc03      	bgt.n	80237fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80237f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80237f4:	2b00      	cmp	r3, #0
 80237f6:	f340 8255 	ble.w	8023ca4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80237fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80237fc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023800:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023804:	1e48      	subs	r0, r1, #1
 8023806:	1e55      	subs	r5, r2, #1
 8023808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802380a:	2b00      	cmp	r3, #0
 802380c:	f340 80f9 	ble.w	8023a02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8023810:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8023812:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023814:	1436      	asrs	r6, r6, #16
 8023816:	ea4f 4323 	mov.w	r3, r3, asr #16
 802381a:	d406      	bmi.n	802382a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802381c:	4286      	cmp	r6, r0
 802381e:	da04      	bge.n	802382a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023820:	2b00      	cmp	r3, #0
 8023822:	db02      	blt.n	802382a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023824:	42ab      	cmp	r3, r5
 8023826:	f2c0 80ed 	blt.w	8023a04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802382a:	3601      	adds	r6, #1
 802382c:	f100 80da 	bmi.w	80239e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023830:	42b1      	cmp	r1, r6
 8023832:	f2c0 80d7 	blt.w	80239e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023836:	3301      	adds	r3, #1
 8023838:	f100 80d4 	bmi.w	80239e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802383c:	429a      	cmp	r2, r3
 802383e:	f2c0 80d1 	blt.w	80239e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023844:	9311      	str	r3, [sp, #68]	; 0x44
 8023846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023848:	930c      	str	r3, [sp, #48]	; 0x30
 802384a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802384c:	2b00      	cmp	r3, #0
 802384e:	f340 80fa 	ble.w	8023a46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8023852:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8023854:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023856:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023858:	68c6      	ldr	r6, [r0, #12]
 802385a:	141d      	asrs	r5, r3, #16
 802385c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802385e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023862:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023864:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023866:	1400      	asrs	r0, r0, #16
 8023868:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802386c:	6892      	ldr	r2, [r2, #8]
 802386e:	f100 813e 	bmi.w	8023aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023872:	1e57      	subs	r7, r2, #1
 8023874:	42b8      	cmp	r0, r7
 8023876:	f280 813a 	bge.w	8023aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802387a:	2d00      	cmp	r5, #0
 802387c:	f2c0 8137 	blt.w	8023aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023880:	1e77      	subs	r7, r6, #1
 8023882:	42bd      	cmp	r5, r7
 8023884:	f280 8133 	bge.w	8023aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023888:	b212      	sxth	r2, r2
 802388a:	fb05 0002 	mla	r0, r5, r2, r0
 802388e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023890:	f815 a000 	ldrb.w	sl, [r5, r0]
 8023894:	182e      	adds	r6, r5, r0
 8023896:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802389a:	eb04 050a 	add.w	r5, r4, sl
 802389e:	2b00      	cmp	r3, #0
 80238a0:	f000 8117 	beq.w	8023ad2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80238a4:	f896 c001 	ldrb.w	ip, [r6, #1]
 80238a8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80238ac:	44a4      	add	ip, r4
 80238ae:	2900      	cmp	r1, #0
 80238b0:	f000 8117 	beq.w	8023ae2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80238b4:	18b0      	adds	r0, r6, r2
 80238b6:	5cb2      	ldrb	r2, [r6, r2]
 80238b8:	7840      	ldrb	r0, [r0, #1]
 80238ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80238be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80238c2:	4422      	add	r2, r4
 80238c4:	4420      	add	r0, r4
 80238c6:	b29b      	uxth	r3, r3
 80238c8:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80238cc:	b289      	uxth	r1, r1
 80238ce:	f895 b002 	ldrb.w	fp, [r5, #2]
 80238d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80238d4:	fb03 f901 	mul.w	r9, r3, r1
 80238d8:	011b      	lsls	r3, r3, #4
 80238da:	f8b6 e000 	ldrh.w	lr, [r6]
 80238de:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80238e2:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80238e6:	eba3 0309 	sub.w	r3, r3, r9
 80238ea:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80238ee:	b289      	uxth	r1, r1
 80238f0:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80238f4:	b29b      	uxth	r3, r3
 80238f6:	eba8 0801 	sub.w	r8, r8, r1
 80238fa:	435f      	muls	r7, r3
 80238fc:	fa1f f888 	uxth.w	r8, r8
 8023900:	9310      	str	r3, [sp, #64]	; 0x40
 8023902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023904:	fb08 770b 	mla	r7, r8, fp, r7
 8023908:	f892 b002 	ldrb.w	fp, [r2, #2]
 802390c:	fb01 770b 	mla	r7, r1, fp, r7
 8023910:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023914:	fb09 770b 	mla	r7, r9, fp, r7
 8023918:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 802391c:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023920:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023924:	fb1b fb03 	smulbb	fp, fp, r3
 8023928:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802392a:	fb07 b706 	mla	r7, r7, r6, fp
 802392e:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023932:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023936:	f89c c000 	ldrb.w	ip, [ip]
 802393a:	b2bf      	uxth	r7, r7
 802393c:	435d      	muls	r5, r3
 802393e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023940:	fb08 550b 	mla	r5, r8, fp, r5
 8023944:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023948:	fb01 550b 	mla	r5, r1, fp, r5
 802394c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023950:	fb09 550b 	mla	r5, r9, fp, r5
 8023954:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8023958:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802395c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023960:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023964:	fa5f fe8e 	uxtb.w	lr, lr
 8023968:	fb1b fb03 	smulbb	fp, fp, r3
 802396c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802396e:	fb03 f30c 	mul.w	r3, r3, ip
 8023972:	f892 c000 	ldrb.w	ip, [r2]
 8023976:	fb05 b506 	mla	r5, r5, r6, fp
 802397a:	fb08 330a 	mla	r3, r8, sl, r3
 802397e:	b2ad      	uxth	r5, r5
 8023980:	fb01 330c 	mla	r3, r1, ip, r3
 8023984:	f890 c000 	ldrb.w	ip, [r0]
 8023988:	f105 0b01 	add.w	fp, r5, #1
 802398c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023992:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023996:	fb1e fe03 	smulbb	lr, lr, r3
 802399a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802399e:	1c7b      	adds	r3, r7, #1
 80239a0:	096d      	lsrs	r5, r5, #5
 80239a2:	fb0c e606 	mla	r6, ip, r6, lr
 80239a6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80239aa:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80239ae:	b2b6      	uxth	r6, r6
 80239b0:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 80239b4:	1c77      	adds	r7, r6, #1
 80239b6:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80239ba:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80239be:	431f      	orrs	r7, r3
 80239c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80239c2:	433d      	orrs	r5, r7
 80239c4:	801d      	strh	r5, [r3, #0]
 80239c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80239c8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80239ca:	3302      	adds	r3, #2
 80239cc:	930c      	str	r3, [sp, #48]	; 0x30
 80239ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80239d0:	4413      	add	r3, r2
 80239d2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80239d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80239d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80239d8:	4413      	add	r3, r2
 80239da:	9328      	str	r3, [sp, #160]	; 0xa0
 80239dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80239de:	3b01      	subs	r3, #1
 80239e0:	9311      	str	r3, [sp, #68]	; 0x44
 80239e2:	e732      	b.n	802384a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80239e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80239e6:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80239e8:	4433      	add	r3, r6
 80239ea:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80239ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80239ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80239f0:	4433      	add	r3, r6
 80239f2:	9328      	str	r3, [sp, #160]	; 0xa0
 80239f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239f6:	3b01      	subs	r3, #1
 80239f8:	9309      	str	r3, [sp, #36]	; 0x24
 80239fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80239fc:	3302      	adds	r3, #2
 80239fe:	930a      	str	r3, [sp, #40]	; 0x28
 8023a00:	e702      	b.n	8023808 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023a02:	d027      	beq.n	8023a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8023a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a06:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023a08:	3b01      	subs	r3, #1
 8023a0a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8023a0c:	fb00 5003 	mla	r0, r0, r3, r5
 8023a10:	1400      	asrs	r0, r0, #16
 8023a12:	f53f af16 	bmi.w	8023842 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023a16:	3901      	subs	r1, #1
 8023a18:	4288      	cmp	r0, r1
 8023a1a:	f6bf af12 	bge.w	8023842 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023a1e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023a20:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023a22:	fb01 0303 	mla	r3, r1, r3, r0
 8023a26:	141b      	asrs	r3, r3, #16
 8023a28:	f53f af0b 	bmi.w	8023842 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023a2c:	3a01      	subs	r2, #1
 8023a2e:	4293      	cmp	r3, r2
 8023a30:	f6bf af07 	bge.w	8023842 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a36:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8023a3a:	9311      	str	r3, [sp, #68]	; 0x44
 8023a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a3e:	930c      	str	r3, [sp, #48]	; 0x30
 8023a40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023a42:	2b00      	cmp	r3, #0
 8023a44:	dc70      	bgt.n	8023b28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8023a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023a4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023a4e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023a52:	930a      	str	r3, [sp, #40]	; 0x28
 8023a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023a56:	2b00      	cmp	r3, #0
 8023a58:	f340 8124 	ble.w	8023ca4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8023a5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a62:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023a66:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023a6a:	eef0 6a48 	vmov.f32	s13, s16
 8023a6e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023a72:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023a76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a7a:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8023a7e:	eef0 6a68 	vmov.f32	s13, s17
 8023a82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a86:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8023a8a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023a8e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023a92:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023a96:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023a9a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023a9e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023aa2:	ee18 2a10 	vmov	r2, s16
 8023aa6:	eeb0 8a47 	vmov.f32	s16, s14
 8023aaa:	fb92 f3f3 	sdiv	r3, r2, r3
 8023aae:	ee18 2a90 	vmov	r2, s17
 8023ab2:	9329      	str	r3, [sp, #164]	; 0xa4
 8023ab4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023ab6:	eef0 8a67 	vmov.f32	s17, s15
 8023aba:	fb92 f3f3 	sdiv	r3, r2, r3
 8023abe:	932a      	str	r3, [sp, #168]	; 0xa8
 8023ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023ac2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023ac4:	3b01      	subs	r3, #1
 8023ac6:	930e      	str	r3, [sp, #56]	; 0x38
 8023ac8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023aca:	bf08      	it	eq
 8023acc:	4613      	moveq	r3, r2
 8023ace:	9309      	str	r3, [sp, #36]	; 0x24
 8023ad0:	e68c      	b.n	80237ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023ad2:	b149      	cbz	r1, 8023ae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8023ad4:	5cb2      	ldrb	r2, [r6, r2]
 8023ad6:	4628      	mov	r0, r5
 8023ad8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023adc:	4422      	add	r2, r4
 8023ade:	46ac      	mov	ip, r5
 8023ae0:	e6f1      	b.n	80238c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023ae2:	4628      	mov	r0, r5
 8023ae4:	462a      	mov	r2, r5
 8023ae6:	e6ee      	b.n	80238c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023ae8:	4628      	mov	r0, r5
 8023aea:	462a      	mov	r2, r5
 8023aec:	e7f7      	b.n	8023ade <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8023aee:	1c47      	adds	r7, r0, #1
 8023af0:	f53f af69 	bmi.w	80239c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023af4:	42ba      	cmp	r2, r7
 8023af6:	f6ff af66 	blt.w	80239c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023afa:	1c6f      	adds	r7, r5, #1
 8023afc:	f53f af63 	bmi.w	80239c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023b00:	42be      	cmp	r6, r7
 8023b02:	f6ff af60 	blt.w	80239c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023b06:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023b08:	b236      	sxth	r6, r6
 8023b0a:	b212      	sxth	r2, r2
 8023b0c:	9002      	str	r0, [sp, #8]
 8023b0e:	9601      	str	r6, [sp, #4]
 8023b10:	9200      	str	r2, [sp, #0]
 8023b12:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023b14:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8023b18:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8023b1c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8023b20:	4623      	mov	r3, r4
 8023b22:	f7ff fd47 	bl	80235b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023b26:	e74e      	b.n	80239c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023b28:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023b2a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023b2c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023b30:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8023b32:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023b34:	1400      	asrs	r0, r0, #16
 8023b36:	142d      	asrs	r5, r5, #16
 8023b38:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023b3a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023b3e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023b42:	fb02 5000 	mla	r0, r2, r0, r5
 8023b46:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023b48:	f815 9000 	ldrb.w	r9, [r5, r0]
 8023b4c:	182e      	adds	r6, r5, r0
 8023b4e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023b52:	eb04 0509 	add.w	r5, r4, r9
 8023b56:	2b00      	cmp	r3, #0
 8023b58:	f000 8096 	beq.w	8023c88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8023b5c:	7877      	ldrb	r7, [r6, #1]
 8023b5e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023b62:	4427      	add	r7, r4
 8023b64:	2900      	cmp	r1, #0
 8023b66:	f000 8097 	beq.w	8023c98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8023b6a:	18b0      	adds	r0, r6, r2
 8023b6c:	5cb2      	ldrb	r2, [r6, r2]
 8023b6e:	7840      	ldrb	r0, [r0, #1]
 8023b70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023b78:	4422      	add	r2, r4
 8023b7a:	4420      	add	r0, r4
 8023b7c:	b29b      	uxth	r3, r3
 8023b7e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023b80:	b289      	uxth	r1, r1
 8023b82:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023b86:	f8b6 c000 	ldrh.w	ip, [r6]
 8023b8a:	fb03 f801 	mul.w	r8, r3, r1
 8023b8e:	011b      	lsls	r3, r3, #4
 8023b90:	78be      	ldrb	r6, [r7, #2]
 8023b92:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023b96:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023b9a:	eba3 0308 	sub.w	r3, r3, r8
 8023b9e:	f814 9009 	ldrb.w	r9, [r4, r9]
 8023ba2:	b289      	uxth	r1, r1
 8023ba4:	b29b      	uxth	r3, r3
 8023ba6:	ebae 0e01 	sub.w	lr, lr, r1
 8023baa:	435e      	muls	r6, r3
 8023bac:	fa1f fe8e 	uxth.w	lr, lr
 8023bb0:	9310      	str	r3, [sp, #64]	; 0x40
 8023bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023bb4:	fb0e 660b 	mla	r6, lr, fp, r6
 8023bb8:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023bbc:	fb01 660b 	mla	r6, r1, fp, r6
 8023bc0:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023bc4:	fb08 660b 	mla	r6, r8, fp, r6
 8023bc8:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8023bcc:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023bd0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023bd4:	fb1b fb03 	smulbb	fp, fp, r3
 8023bd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023bda:	fb06 b60a 	mla	r6, r6, sl, fp
 8023bde:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023be2:	787d      	ldrb	r5, [r7, #1]
 8023be4:	783f      	ldrb	r7, [r7, #0]
 8023be6:	b2b6      	uxth	r6, r6
 8023be8:	435d      	muls	r5, r3
 8023bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023bec:	fb0e 550b 	mla	r5, lr, fp, r5
 8023bf0:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023bf4:	fb01 550b 	mla	r5, r1, fp, r5
 8023bf8:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023bfc:	fb08 550b 	mla	r5, r8, fp, r5
 8023c00:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8023c04:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023c08:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023c0c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023c10:	fa5f fc8c 	uxtb.w	ip, ip
 8023c14:	fb1b fb03 	smulbb	fp, fp, r3
 8023c18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023c1a:	437b      	muls	r3, r7
 8023c1c:	7817      	ldrb	r7, [r2, #0]
 8023c1e:	fb05 b50a 	mla	r5, r5, sl, fp
 8023c22:	fb0e 3309 	mla	r3, lr, r9, r3
 8023c26:	b2ad      	uxth	r5, r5
 8023c28:	fb01 3307 	mla	r3, r1, r7, r3
 8023c2c:	7807      	ldrb	r7, [r0, #0]
 8023c2e:	f105 0b01 	add.w	fp, r5, #1
 8023c32:	fb08 3707 	mla	r7, r8, r7, r3
 8023c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c38:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023c3c:	fb1c fc03 	smulbb	ip, ip, r3
 8023c40:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023c44:	1c73      	adds	r3, r6, #1
 8023c46:	096d      	lsrs	r5, r5, #5
 8023c48:	fb07 c70a 	mla	r7, r7, sl, ip
 8023c4c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023c50:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023c54:	b2bf      	uxth	r7, r7
 8023c56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023c58:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8023c5c:	1c7a      	adds	r2, r7, #1
 8023c5e:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023c62:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023c66:	4316      	orrs	r6, r2
 8023c68:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023c6a:	432e      	orrs	r6, r5
 8023c6c:	f823 6b02 	strh.w	r6, [r3], #2
 8023c70:	930c      	str	r3, [sp, #48]	; 0x30
 8023c72:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023c74:	4413      	add	r3, r2
 8023c76:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023c78:	9327      	str	r3, [sp, #156]	; 0x9c
 8023c7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023c7c:	4413      	add	r3, r2
 8023c7e:	9328      	str	r3, [sp, #160]	; 0xa0
 8023c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023c82:	3b01      	subs	r3, #1
 8023c84:	9311      	str	r3, [sp, #68]	; 0x44
 8023c86:	e6db      	b.n	8023a40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8023c88:	b149      	cbz	r1, 8023c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8023c8a:	5cb2      	ldrb	r2, [r6, r2]
 8023c8c:	4628      	mov	r0, r5
 8023c8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c92:	4422      	add	r2, r4
 8023c94:	462f      	mov	r7, r5
 8023c96:	e771      	b.n	8023b7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8023c98:	4628      	mov	r0, r5
 8023c9a:	462a      	mov	r2, r5
 8023c9c:	e76e      	b.n	8023b7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8023c9e:	4628      	mov	r0, r5
 8023ca0:	462a      	mov	r2, r5
 8023ca2:	e7f7      	b.n	8023c94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8023ca4:	b015      	add	sp, #84	; 0x54
 8023ca6:	ecbd 8b08 	vpop	{d8-d11}
 8023caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8023cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cb4:	880e      	ldrh	r6, [r1, #0]
 8023cb6:	b085      	sub	sp, #20
 8023cb8:	4691      	mov	r9, r2
 8023cba:	0230      	lsls	r0, r6, #8
 8023cbc:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8023cc0:	9101      	str	r1, [sp, #4]
 8023cc2:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8023cc6:	0170      	lsls	r0, r6, #5
 8023cc8:	00f6      	lsls	r6, r6, #3
 8023cca:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8023cce:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8023cd2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8023cd6:	b2f6      	uxtb	r6, r6
 8023cd8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8023cdc:	ea4b 0000 	orr.w	r0, fp, r0
 8023ce0:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8023ce4:	4306      	orrs	r6, r0
 8023ce6:	fb05 7a0c 	mla	sl, r5, ip, r7
 8023cea:	2d00      	cmp	r5, #0
 8023cec:	9603      	str	r6, [sp, #12]
 8023cee:	eb09 0e0a 	add.w	lr, r9, sl
 8023cf2:	db42      	blt.n	8023d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8023cf4:	45a8      	cmp	r8, r5
 8023cf6:	dd40      	ble.n	8023d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8023cf8:	2f00      	cmp	r7, #0
 8023cfa:	db3c      	blt.n	8023d76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8023cfc:	45bc      	cmp	ip, r7
 8023cfe:	dd3a      	ble.n	8023d76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8023d00:	f819 600a 	ldrb.w	r6, [r9, sl]
 8023d04:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023d08:	441e      	add	r6, r3
 8023d0a:	1c78      	adds	r0, r7, #1
 8023d0c:	d438      	bmi.n	8023d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8023d0e:	4584      	cmp	ip, r0
 8023d10:	dd36      	ble.n	8023d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8023d12:	b3aa      	cbz	r2, 8023d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8023d14:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023d18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023d1c:	4418      	add	r0, r3
 8023d1e:	3501      	adds	r5, #1
 8023d20:	d432      	bmi.n	8023d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8023d22:	45a8      	cmp	r8, r5
 8023d24:	dd30      	ble.n	8023d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8023d26:	b37c      	cbz	r4, 8023d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8023d28:	2f00      	cmp	r7, #0
 8023d2a:	db2b      	blt.n	8023d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8023d2c:	45bc      	cmp	ip, r7
 8023d2e:	dd29      	ble.n	8023d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8023d30:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8023d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023d38:	441d      	add	r5, r3
 8023d3a:	3701      	adds	r7, #1
 8023d3c:	d427      	bmi.n	8023d8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8023d3e:	45bc      	cmp	ip, r7
 8023d40:	dd25      	ble.n	8023d8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8023d42:	b322      	cbz	r2, 8023d8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8023d44:	44f4      	add	ip, lr
 8023d46:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8023d4a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023d4e:	443b      	add	r3, r7
 8023d50:	781f      	ldrb	r7, [r3, #0]
 8023d52:	2a0f      	cmp	r2, #15
 8023d54:	f896 9000 	ldrb.w	r9, [r6]
 8023d58:	f890 a000 	ldrb.w	sl, [r0]
 8023d5c:	4639      	mov	r1, r7
 8023d5e:	f895 8000 	ldrb.w	r8, [r5]
 8023d62:	d801      	bhi.n	8023d68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 8023d64:	2c0f      	cmp	r4, #15
 8023d66:	d914      	bls.n	8023d92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8023d68:	4b2c      	ldr	r3, [pc, #176]	; (8023e1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8023d6a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8023d6e:	4a2c      	ldr	r2, [pc, #176]	; (8023e20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8023d70:	482c      	ldr	r0, [pc, #176]	; (8023e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 8023d72:	f005 ffbd 	bl	8029cf0 <__assert_func>
 8023d76:	ae03      	add	r6, sp, #12
 8023d78:	e7c7      	b.n	8023d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8023d7a:	a803      	add	r0, sp, #12
 8023d7c:	4606      	mov	r6, r0
 8023d7e:	e7ce      	b.n	8023d1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023d80:	a803      	add	r0, sp, #12
 8023d82:	e7cc      	b.n	8023d1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023d84:	ad03      	add	r5, sp, #12
 8023d86:	e7d8      	b.n	8023d3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8023d88:	ab03      	add	r3, sp, #12
 8023d8a:	461d      	mov	r5, r3
 8023d8c:	e7e0      	b.n	8023d50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8023d8e:	ab03      	add	r3, sp, #12
 8023d90:	e7de      	b.n	8023d50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8023d92:	b292      	uxth	r2, r2
 8023d94:	f890 c002 	ldrb.w	ip, [r0, #2]
 8023d98:	b2a4      	uxth	r4, r4
 8023d9a:	f896 b002 	ldrb.w	fp, [r6, #2]
 8023d9e:	7840      	ldrb	r0, [r0, #1]
 8023da0:	fb02 fe04 	mul.w	lr, r2, r4
 8023da4:	0112      	lsls	r2, r2, #4
 8023da6:	7876      	ldrb	r6, [r6, #1]
 8023da8:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8023dac:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8023db0:	eba2 020e 	sub.w	r2, r2, lr
 8023db4:	b2a4      	uxth	r4, r4
 8023db6:	b292      	uxth	r2, r2
 8023db8:	1b3f      	subs	r7, r7, r4
 8023dba:	fb02 fc0c 	mul.w	ip, r2, ip
 8023dbe:	b2bf      	uxth	r7, r7
 8023dc0:	fb07 cc0b 	mla	ip, r7, fp, ip
 8023dc4:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023dc8:	fb04 cc0b 	mla	ip, r4, fp, ip
 8023dcc:	f893 b002 	ldrb.w	fp, [r3, #2]
 8023dd0:	785b      	ldrb	r3, [r3, #1]
 8023dd2:	fb0e cc0b 	mla	ip, lr, fp, ip
 8023dd6:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8023dda:	fb02 fc0a 	mul.w	ip, r2, sl
 8023dde:	4342      	muls	r2, r0
 8023de0:	7868      	ldrb	r0, [r5, #1]
 8023de2:	fb07 cc09 	mla	ip, r7, r9, ip
 8023de6:	fb07 2206 	mla	r2, r7, r6, r2
 8023dea:	fb04 cc08 	mla	ip, r4, r8, ip
 8023dee:	fb04 2400 	mla	r4, r4, r0, r2
 8023df2:	fb0e cc01 	mla	ip, lr, r1, ip
 8023df6:	fb0e 4e03 	mla	lr, lr, r3, r4
 8023dfa:	9b01      	ldr	r3, [sp, #4]
 8023dfc:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023e00:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023e04:	ea4c 0c0b 	orr.w	ip, ip, fp
 8023e08:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8023e0c:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023e10:	f8a3 c000 	strh.w	ip, [r3]
 8023e14:	b005      	add	sp, #20
 8023e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e1a:	bf00      	nop
 8023e1c:	0802e369 	.word	0x0802e369
 8023e20:	0802e936 	.word	0x0802e936
 8023e24:	0802e3ed 	.word	0x0802e3ed

08023e28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e2c:	ed2d 8b08 	vpush	{d8-d11}
 8023e30:	b08f      	sub	sp, #60	; 0x3c
 8023e32:	eeb0 aa40 	vmov.f32	s20, s0
 8023e36:	eef0 9a60 	vmov.f32	s19, s1
 8023e3a:	920c      	str	r2, [sp, #48]	; 0x30
 8023e3c:	eeb0 9a41 	vmov.f32	s18, s2
 8023e40:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023e42:	eeb0 8a62 	vmov.f32	s16, s5
 8023e46:	900d      	str	r0, [sp, #52]	; 0x34
 8023e48:	eef0 8a43 	vmov.f32	s17, s6
 8023e4c:	6850      	ldr	r0, [r2, #4]
 8023e4e:	eef0 ba44 	vmov.f32	s23, s8
 8023e52:	910a      	str	r1, [sp, #40]	; 0x28
 8023e54:	eeb0 ba64 	vmov.f32	s22, s9
 8023e58:	9306      	str	r3, [sp, #24]
 8023e5a:	eef0 aa45 	vmov.f32	s21, s10
 8023e5e:	6812      	ldr	r2, [r2, #0]
 8023e60:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8023e64:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8023e68:	fb00 1303 	mla	r3, r0, r3, r1
 8023e6c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023e70:	9307      	str	r3, [sp, #28]
 8023e72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e74:	681b      	ldr	r3, [r3, #0]
 8023e76:	9308      	str	r3, [sp, #32]
 8023e78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e7a:	685c      	ldr	r4, [r3, #4]
 8023e7c:	3404      	adds	r4, #4
 8023e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e80:	2b00      	cmp	r3, #0
 8023e82:	dc03      	bgt.n	8023e8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8023e84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023e86:	2b00      	cmp	r3, #0
 8023e88:	f340 81d5 	ble.w	8024236 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8023e8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e8e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e92:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023e96:	1e48      	subs	r0, r1, #1
 8023e98:	1e56      	subs	r6, r2, #1
 8023e9a:	9b06      	ldr	r3, [sp, #24]
 8023e9c:	2b00      	cmp	r3, #0
 8023e9e:	f340 80b6 	ble.w	802400e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8023ea2:	ea5f 472b 	movs.w	r7, fp, asr #16
 8023ea6:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023eaa:	d406      	bmi.n	8023eba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023eac:	4287      	cmp	r7, r0
 8023eae:	da04      	bge.n	8023eba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023eb0:	2b00      	cmp	r3, #0
 8023eb2:	db02      	blt.n	8023eba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023eb4:	42b3      	cmp	r3, r6
 8023eb6:	f2c0 80ab 	blt.w	8024010 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8023eba:	3701      	adds	r7, #1
 8023ebc:	f100 809c 	bmi.w	8023ff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023ec0:	42b9      	cmp	r1, r7
 8023ec2:	f2c0 8099 	blt.w	8023ff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023ec6:	3301      	adds	r3, #1
 8023ec8:	f100 8096 	bmi.w	8023ff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023ecc:	429a      	cmp	r2, r3
 8023ece:	f2c0 8093 	blt.w	8023ff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023ed2:	9b06      	ldr	r3, [sp, #24]
 8023ed4:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ed6:	9b07      	ldr	r3, [sp, #28]
 8023ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8023eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023edc:	2b00      	cmp	r3, #0
 8023ede:	f340 80b4 	ble.w	802404a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8023ee2:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023ee4:	142e      	asrs	r6, r5, #16
 8023ee6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023ee8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023eec:	68c7      	ldr	r7, [r0, #12]
 8023eee:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023ef2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023ef6:	6892      	ldr	r2, [r2, #8]
 8023ef8:	f100 80fb 	bmi.w	80240f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8023efc:	f102 3cff 	add.w	ip, r2, #4294967295
 8023f00:	4560      	cmp	r0, ip
 8023f02:	f280 80f6 	bge.w	80240f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8023f06:	2e00      	cmp	r6, #0
 8023f08:	f2c0 80f3 	blt.w	80240f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8023f0c:	f107 3cff 	add.w	ip, r7, #4294967295
 8023f10:	4566      	cmp	r6, ip
 8023f12:	f280 80ee 	bge.w	80240f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8023f16:	b212      	sxth	r2, r2
 8023f18:	fb06 0002 	mla	r0, r6, r2, r0
 8023f1c:	9e08      	ldr	r6, [sp, #32]
 8023f1e:	1837      	adds	r7, r6, r0
 8023f20:	5c30      	ldrb	r0, [r6, r0]
 8023f22:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8023f26:	eb04 0c08 	add.w	ip, r4, r8
 8023f2a:	2b00      	cmp	r3, #0
 8023f2c:	f000 80d3 	beq.w	80240d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8023f30:	787e      	ldrb	r6, [r7, #1]
 8023f32:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023f36:	4426      	add	r6, r4
 8023f38:	2900      	cmp	r1, #0
 8023f3a:	f000 80d4 	beq.w	80240e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8023f3e:	18b8      	adds	r0, r7, r2
 8023f40:	5cba      	ldrb	r2, [r7, r2]
 8023f42:	7840      	ldrb	r0, [r0, #1]
 8023f44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023f48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023f4c:	4422      	add	r2, r4
 8023f4e:	4420      	add	r0, r4
 8023f50:	b29b      	uxth	r3, r3
 8023f52:	78b7      	ldrb	r7, [r6, #2]
 8023f54:	b289      	uxth	r1, r1
 8023f56:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023f5a:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023f5e:	fb03 f901 	mul.w	r9, r3, r1
 8023f62:	011b      	lsls	r3, r3, #4
 8023f64:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023f68:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023f6c:	eba3 0309 	sub.w	r3, r3, r9
 8023f70:	b289      	uxth	r1, r1
 8023f72:	b29b      	uxth	r3, r3
 8023f74:	ebae 0e01 	sub.w	lr, lr, r1
 8023f78:	435f      	muls	r7, r3
 8023f7a:	fa1f fe8e 	uxth.w	lr, lr
 8023f7e:	fb0e 770a 	mla	r7, lr, sl, r7
 8023f82:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023f86:	fb01 770a 	mla	r7, r1, sl, r7
 8023f8a:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023f8e:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023f92:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023f96:	f896 8000 	ldrb.w	r8, [r6]
 8023f9a:	7876      	ldrb	r6, [r6, #1]
 8023f9c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8023fa0:	fb03 f808 	mul.w	r8, r3, r8
 8023fa4:	4373      	muls	r3, r6
 8023fa6:	fb0e 8807 	mla	r8, lr, r7, r8
 8023faa:	7817      	ldrb	r7, [r2, #0]
 8023fac:	fb0e 330c 	mla	r3, lr, ip, r3
 8023fb0:	fb01 8807 	mla	r8, r1, r7, r8
 8023fb4:	7807      	ldrb	r7, [r0, #0]
 8023fb6:	fb09 8707 	mla	r7, r9, r7, r8
 8023fba:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023fbe:	ea47 070a 	orr.w	r7, r7, sl
 8023fc2:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023fc6:	fb01 310a 	mla	r1, r1, sl, r3
 8023fca:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fd0:	fb09 1a0a 	mla	sl, r9, sl, r1
 8023fd4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023fd8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023fdc:	ea47 070a 	orr.w	r7, r7, sl
 8023fe0:	801f      	strh	r7, [r3, #0]
 8023fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fe4:	3302      	adds	r3, #2
 8023fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8023fe8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023fea:	449b      	add	fp, r3
 8023fec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023fee:	441d      	add	r5, r3
 8023ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ff2:	3b01      	subs	r3, #1
 8023ff4:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ff6:	e770      	b.n	8023eda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023ff8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023ffa:	449b      	add	fp, r3
 8023ffc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023ffe:	441d      	add	r5, r3
 8024000:	9b06      	ldr	r3, [sp, #24]
 8024002:	3b01      	subs	r3, #1
 8024004:	9306      	str	r3, [sp, #24]
 8024006:	9b07      	ldr	r3, [sp, #28]
 8024008:	3302      	adds	r3, #2
 802400a:	9307      	str	r3, [sp, #28]
 802400c:	e745      	b.n	8023e9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802400e:	d023      	beq.n	8024058 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024010:	9b06      	ldr	r3, [sp, #24]
 8024012:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024014:	3b01      	subs	r3, #1
 8024016:	fb00 b003 	mla	r0, r0, r3, fp
 802401a:	1400      	asrs	r0, r0, #16
 802401c:	f53f af59 	bmi.w	8023ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024020:	3901      	subs	r1, #1
 8024022:	4288      	cmp	r0, r1
 8024024:	f6bf af55 	bge.w	8023ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024028:	9924      	ldr	r1, [sp, #144]	; 0x90
 802402a:	fb01 5303 	mla	r3, r1, r3, r5
 802402e:	141b      	asrs	r3, r3, #16
 8024030:	f53f af4f 	bmi.w	8023ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024034:	3a01      	subs	r2, #1
 8024036:	4293      	cmp	r3, r2
 8024038:	f6bf af4b 	bge.w	8023ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802403c:	9b06      	ldr	r3, [sp, #24]
 802403e:	9309      	str	r3, [sp, #36]	; 0x24
 8024040:	9b07      	ldr	r3, [sp, #28]
 8024042:	930b      	str	r3, [sp, #44]	; 0x2c
 8024044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024046:	2b00      	cmp	r3, #0
 8024048:	dc70      	bgt.n	802412c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 802404a:	9b06      	ldr	r3, [sp, #24]
 802404c:	9a07      	ldr	r2, [sp, #28]
 802404e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024052:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024056:	9307      	str	r3, [sp, #28]
 8024058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802405a:	2b00      	cmp	r3, #0
 802405c:	f340 80eb 	ble.w	8024236 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8024060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024064:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024066:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802406a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802406e:	eef0 6a48 	vmov.f32	s13, s16
 8024072:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024076:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802407a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802407e:	ee16 ba90 	vmov	fp, s13
 8024082:	eef0 6a68 	vmov.f32	s13, s17
 8024086:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802408a:	ee16 5a90 	vmov	r5, s13
 802408e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024092:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024096:	ee37 8a48 	vsub.f32	s16, s14, s16
 802409a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802409e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80240a2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80240a6:	ee18 2a10 	vmov	r2, s16
 80240aa:	eeb0 8a47 	vmov.f32	s16, s14
 80240ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80240b2:	ee18 2a90 	vmov	r2, s17
 80240b6:	9323      	str	r3, [sp, #140]	; 0x8c
 80240b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80240ba:	eef0 8a67 	vmov.f32	s17, s15
 80240be:	fb92 f3f3 	sdiv	r3, r2, r3
 80240c2:	9324      	str	r3, [sp, #144]	; 0x90
 80240c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80240c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80240c8:	3b01      	subs	r3, #1
 80240ca:	930a      	str	r3, [sp, #40]	; 0x28
 80240cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80240ce:	bf08      	it	eq
 80240d0:	4613      	moveq	r3, r2
 80240d2:	9306      	str	r3, [sp, #24]
 80240d4:	e6d3      	b.n	8023e7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80240d6:	b149      	cbz	r1, 80240ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 80240d8:	5cba      	ldrb	r2, [r7, r2]
 80240da:	4660      	mov	r0, ip
 80240dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80240e0:	4422      	add	r2, r4
 80240e2:	4666      	mov	r6, ip
 80240e4:	e734      	b.n	8023f50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80240e6:	4660      	mov	r0, ip
 80240e8:	4662      	mov	r2, ip
 80240ea:	e731      	b.n	8023f50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80240ec:	4660      	mov	r0, ip
 80240ee:	4662      	mov	r2, ip
 80240f0:	e7f7      	b.n	80240e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80240f2:	f110 0c01 	adds.w	ip, r0, #1
 80240f6:	f53f af74 	bmi.w	8023fe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80240fa:	4562      	cmp	r2, ip
 80240fc:	f6ff af71 	blt.w	8023fe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024100:	f116 0c01 	adds.w	ip, r6, #1
 8024104:	f53f af6d 	bmi.w	8023fe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024108:	4567      	cmp	r7, ip
 802410a:	f6ff af6a 	blt.w	8023fe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802410e:	b23f      	sxth	r7, r7
 8024110:	b212      	sxth	r2, r2
 8024112:	9701      	str	r7, [sp, #4]
 8024114:	9200      	str	r2, [sp, #0]
 8024116:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802411a:	e9cd 0602 	strd	r0, r6, [sp, #8]
 802411e:	4623      	mov	r3, r4
 8024120:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024122:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8024126:	f7ff fdc3 	bl	8023cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802412a:	e75a      	b.n	8023fe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802412c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802412e:	ea4f 462b 	mov.w	r6, fp, asr #16
 8024132:	1428      	asrs	r0, r5, #16
 8024134:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024138:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802413c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024140:	fb02 6000 	mla	r0, r2, r0, r6
 8024144:	9e08      	ldr	r6, [sp, #32]
 8024146:	f816 8000 	ldrb.w	r8, [r6, r0]
 802414a:	1837      	adds	r7, r6, r0
 802414c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024150:	eb04 0c08 	add.w	ip, r4, r8
 8024154:	2b00      	cmp	r3, #0
 8024156:	d060      	beq.n	802421a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8024158:	787e      	ldrb	r6, [r7, #1]
 802415a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802415e:	4426      	add	r6, r4
 8024160:	2900      	cmp	r1, #0
 8024162:	d062      	beq.n	802422a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8024164:	18b8      	adds	r0, r7, r2
 8024166:	5cba      	ldrb	r2, [r7, r2]
 8024168:	7840      	ldrb	r0, [r0, #1]
 802416a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802416e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024172:	4422      	add	r2, r4
 8024174:	4420      	add	r0, r4
 8024176:	b29b      	uxth	r3, r3
 8024178:	78b7      	ldrb	r7, [r6, #2]
 802417a:	b289      	uxth	r1, r1
 802417c:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024180:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024184:	fb03 f901 	mul.w	r9, r3, r1
 8024188:	011b      	lsls	r3, r3, #4
 802418a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802418e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024192:	eba3 0309 	sub.w	r3, r3, r9
 8024196:	b289      	uxth	r1, r1
 8024198:	b29b      	uxth	r3, r3
 802419a:	ebae 0e01 	sub.w	lr, lr, r1
 802419e:	435f      	muls	r7, r3
 80241a0:	fa1f fe8e 	uxth.w	lr, lr
 80241a4:	fb0e 770a 	mla	r7, lr, sl, r7
 80241a8:	f892 a002 	ldrb.w	sl, [r2, #2]
 80241ac:	fb01 770a 	mla	r7, r1, sl, r7
 80241b0:	f890 a002 	ldrb.w	sl, [r0, #2]
 80241b4:	fb09 7a0a 	mla	sl, r9, sl, r7
 80241b8:	f814 7008 	ldrb.w	r7, [r4, r8]
 80241bc:	f896 8000 	ldrb.w	r8, [r6]
 80241c0:	7876      	ldrb	r6, [r6, #1]
 80241c2:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80241c6:	fb03 f808 	mul.w	r8, r3, r8
 80241ca:	4373      	muls	r3, r6
 80241cc:	7856      	ldrb	r6, [r2, #1]
 80241ce:	fb0e 8807 	mla	r8, lr, r7, r8
 80241d2:	7817      	ldrb	r7, [r2, #0]
 80241d4:	fb0e 330c 	mla	r3, lr, ip, r3
 80241d8:	fb01 8807 	mla	r8, r1, r7, r8
 80241dc:	7807      	ldrb	r7, [r0, #0]
 80241de:	fb01 3306 	mla	r3, r1, r6, r3
 80241e2:	fb09 8707 	mla	r7, r9, r7, r8
 80241e6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80241ea:	ea47 070a 	orr.w	r7, r7, sl
 80241ee:	f890 a001 	ldrb.w	sl, [r0, #1]
 80241f2:	fb09 3a0a 	mla	sl, r9, sl, r3
 80241f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80241f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80241fc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8024200:	ea47 070a 	orr.w	r7, r7, sl
 8024204:	f823 7b02 	strh.w	r7, [r3], #2
 8024208:	930b      	str	r3, [sp, #44]	; 0x2c
 802420a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802420c:	449b      	add	fp, r3
 802420e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024210:	441d      	add	r5, r3
 8024212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024214:	3b01      	subs	r3, #1
 8024216:	9309      	str	r3, [sp, #36]	; 0x24
 8024218:	e714      	b.n	8024044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 802421a:	b149      	cbz	r1, 8024230 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 802421c:	5cba      	ldrb	r2, [r7, r2]
 802421e:	4660      	mov	r0, ip
 8024220:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024224:	4422      	add	r2, r4
 8024226:	4666      	mov	r6, ip
 8024228:	e7a5      	b.n	8024176 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802422a:	4660      	mov	r0, ip
 802422c:	4662      	mov	r2, ip
 802422e:	e7a2      	b.n	8024176 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8024230:	4660      	mov	r0, ip
 8024232:	4662      	mov	r2, ip
 8024234:	e7f7      	b.n	8024226 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8024236:	b00f      	add	sp, #60	; 0x3c
 8024238:	ecbd 8b08 	vpop	{d8-d11}
 802423c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024240 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8024240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024244:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8024248:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 802424c:	2c00      	cmp	r4, #0
 802424e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8024252:	fb04 560c 	mla	r6, r4, ip, r5
 8024256:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 802425a:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 802425e:	eb02 0e06 	add.w	lr, r2, r6
 8024262:	db3d      	blt.n	80242e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8024264:	45a0      	cmp	r8, r4
 8024266:	dd3b      	ble.n	80242e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8024268:	2d00      	cmp	r5, #0
 802426a:	db37      	blt.n	80242dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 802426c:	45ac      	cmp	ip, r5
 802426e:	dd35      	ble.n	80242dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8024270:	5d92      	ldrb	r2, [r2, r6]
 8024272:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024276:	1c6e      	adds	r6, r5, #1
 8024278:	d435      	bmi.n	80242e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 802427a:	45b4      	cmp	ip, r6
 802427c:	dd33      	ble.n	80242e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 802427e:	b3a0      	cbz	r0, 80242ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8024280:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8024284:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8024288:	3401      	adds	r4, #1
 802428a:	d432      	bmi.n	80242f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 802428c:	45a0      	cmp	r8, r4
 802428e:	dd30      	ble.n	80242f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8024290:	b397      	cbz	r7, 80242f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 8024292:	2d00      	cmp	r5, #0
 8024294:	db2b      	blt.n	80242ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8024296:	45ac      	cmp	ip, r5
 8024298:	dd29      	ble.n	80242ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 802429a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802429e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80242a2:	3501      	adds	r5, #1
 80242a4:	d42b      	bmi.n	80242fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80242a6:	45ac      	cmp	ip, r5
 80242a8:	dd29      	ble.n	80242fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80242aa:	b350      	cbz	r0, 8024302 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 80242ac:	44f4      	add	ip, lr
 80242ae:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80242b2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80242b6:	280f      	cmp	r0, #15
 80242b8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80242bc:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80242c0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80242c4:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80242c8:	d801      	bhi.n	80242ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 80242ca:	2f0f      	cmp	r7, #15
 80242cc:	d91b      	bls.n	8024306 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 80242ce:	4b8d      	ldr	r3, [pc, #564]	; (8024504 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 80242d0:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80242d4:	4a8c      	ldr	r2, [pc, #560]	; (8024508 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 80242d6:	488d      	ldr	r0, [pc, #564]	; (802450c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 80242d8:	f005 fd0a 	bl	8029cf0 <__assert_func>
 80242dc:	2200      	movs	r2, #0
 80242de:	e7ca      	b.n	8024276 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 80242e0:	2600      	movs	r6, #0
 80242e2:	4632      	mov	r2, r6
 80242e4:	e7d0      	b.n	8024288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80242e6:	2600      	movs	r6, #0
 80242e8:	e7ce      	b.n	8024288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80242ea:	4606      	mov	r6, r0
 80242ec:	e7cc      	b.n	8024288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80242ee:	2400      	movs	r4, #0
 80242f0:	e7d7      	b.n	80242a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 80242f2:	2300      	movs	r3, #0
 80242f4:	461c      	mov	r4, r3
 80242f6:	e7de      	b.n	80242b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80242f8:	463b      	mov	r3, r7
 80242fa:	463c      	mov	r4, r7
 80242fc:	e7db      	b.n	80242b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80242fe:	2300      	movs	r3, #0
 8024300:	e7d9      	b.n	80242b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024302:	4603      	mov	r3, r0
 8024304:	e7d7      	b.n	80242b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024306:	b280      	uxth	r0, r0
 8024308:	b2bf      	uxth	r7, r7
 802430a:	fb07 fe00 	mul.w	lr, r7, r0
 802430e:	0100      	lsls	r0, r0, #4
 8024310:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024314:	eba0 0c0e 	sub.w	ip, r0, lr
 8024318:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802431c:	b2bf      	uxth	r7, r7
 802431e:	fa1f fc8c 	uxth.w	ip, ip
 8024322:	1bed      	subs	r5, r5, r7
 8024324:	fb0a f00c 	mul.w	r0, sl, ip
 8024328:	b2ad      	uxth	r5, r5
 802432a:	fb0b 0005 	mla	r0, fp, r5, r0
 802432e:	fb07 0009 	mla	r0, r7, r9, r0
 8024332:	fb0e 0008 	mla	r0, lr, r8, r0
 8024336:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802433a:	9001      	str	r0, [sp, #4]
 802433c:	2800      	cmp	r0, #0
 802433e:	f000 80de 	beq.w	80244fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8024342:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024346:	d018      	beq.n	802437a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 8024348:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802434c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024350:	fb0b f000 	mul.w	r0, fp, r0
 8024354:	fb0b fb02 	mul.w	fp, fp, r2
 8024358:	0a02      	lsrs	r2, r0, #8
 802435a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802435e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024362:	4402      	add	r2, r0
 8024364:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024368:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802436c:	0a12      	lsrs	r2, r2, #8
 802436e:	0a00      	lsrs	r0, r0, #8
 8024370:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024374:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024378:	4302      	orrs	r2, r0
 802437a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802437e:	d01a      	beq.n	80243b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8024380:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8024384:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024388:	fb0a f000 	mul.w	r0, sl, r0
 802438c:	fb0a fa06 	mul.w	sl, sl, r6
 8024390:	0a06      	lsrs	r6, r0, #8
 8024392:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024396:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802439a:	4406      	add	r6, r0
 802439c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80243a0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80243a4:	0a36      	lsrs	r6, r6, #8
 80243a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80243aa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80243ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80243b2:	ea46 060a 	orr.w	r6, r6, sl
 80243b6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80243ba:	d01b      	beq.n	80243f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 80243bc:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80243c0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80243c4:	fb09 fa0a 	mul.w	sl, r9, sl
 80243c8:	fb09 f004 	mul.w	r0, r9, r4
 80243cc:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80243d0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80243d4:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80243d8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80243dc:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80243e0:	4454      	add	r4, sl
 80243e2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80243e6:	0a24      	lsrs	r4, r4, #8
 80243e8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80243ec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80243f0:	ea44 0409 	orr.w	r4, r4, r9
 80243f4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80243f8:	d01b      	beq.n	8024432 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 80243fa:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80243fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024402:	fb08 f909 	mul.w	r9, r8, r9
 8024406:	fb08 f003 	mul.w	r0, r8, r3
 802440a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802440e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024412:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8024416:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802441a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802441e:	444b      	add	r3, r9
 8024420:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024424:	0a1b      	lsrs	r3, r3, #8
 8024426:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802442a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802442e:	ea43 0308 	orr.w	r3, r3, r8
 8024432:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024436:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802443a:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 802443e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024442:	fb0c f808 	mul.w	r8, ip, r8
 8024446:	8808      	ldrh	r0, [r1, #0]
 8024448:	fb0c f606 	mul.w	r6, ip, r6
 802444c:	fb05 8909 	mla	r9, r5, r9, r8
 8024450:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8024454:	fb05 6502 	mla	r5, r5, r2, r6
 8024458:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802445c:	fb07 9908 	mla	r9, r7, r8, r9
 8024460:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8024464:	fb07 5704 	mla	r7, r7, r4, r5
 8024468:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802446c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024470:	b2b6      	uxth	r6, r6
 8024472:	fb0e 9808 	mla	r8, lr, r8, r9
 8024476:	9a01      	ldr	r2, [sp, #4]
 8024478:	fb0e 7e03 	mla	lr, lr, r3, r7
 802447c:	1205      	asrs	r5, r0, #8
 802447e:	4372      	muls	r2, r6
 8024480:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024484:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024488:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802448c:	1c53      	adds	r3, r2, #1
 802448e:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024492:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024496:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802449a:	ea48 0e0e 	orr.w	lr, r8, lr
 802449e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80244a2:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80244a6:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80244aa:	b2db      	uxtb	r3, r3
 80244ac:	fb12 f206 	smulbb	r2, r2, r6
 80244b0:	fa5f fe8e 	uxtb.w	lr, lr
 80244b4:	fb14 f406 	smulbb	r4, r4, r6
 80244b8:	fb05 2503 	mla	r5, r5, r3, r2
 80244bc:	10c2      	asrs	r2, r0, #3
 80244be:	fb1e fe06 	smulbb	lr, lr, r6
 80244c2:	00c0      	lsls	r0, r0, #3
 80244c4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80244c8:	b2ad      	uxth	r5, r5
 80244ca:	b2c0      	uxtb	r0, r0
 80244cc:	fb02 4203 	mla	r2, r2, r3, r4
 80244d0:	fb00 e303 	mla	r3, r0, r3, lr
 80244d4:	b294      	uxth	r4, r2
 80244d6:	b298      	uxth	r0, r3
 80244d8:	1c6b      	adds	r3, r5, #1
 80244da:	1c62      	adds	r2, r4, #1
 80244dc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80244e0:	1c43      	adds	r3, r0, #1
 80244e2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80244e6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80244ea:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80244ee:	0952      	lsrs	r2, r2, #5
 80244f0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80244f4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80244f8:	432b      	orrs	r3, r5
 80244fa:	4313      	orrs	r3, r2
 80244fc:	800b      	strh	r3, [r1, #0]
 80244fe:	b003      	add	sp, #12
 8024500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024504:	0802e369 	.word	0x0802e369
 8024508:	0802e936 	.word	0x0802e936
 802450c:	0802e3ed 	.word	0x0802e3ed

08024510 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024514:	ed2d 8b08 	vpush	{d8-d11}
 8024518:	b09f      	sub	sp, #124	; 0x7c
 802451a:	eeb0 aa40 	vmov.f32	s20, s0
 802451e:	eef0 9a60 	vmov.f32	s19, s1
 8024522:	921b      	str	r2, [sp, #108]	; 0x6c
 8024524:	eeb0 9a41 	vmov.f32	s18, s2
 8024528:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802452a:	eeb0 8a62 	vmov.f32	s16, s5
 802452e:	9309      	str	r3, [sp, #36]	; 0x24
 8024530:	eef0 8a43 	vmov.f32	s17, s6
 8024534:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8024538:	eef0 ba44 	vmov.f32	s23, s8
 802453c:	901d      	str	r0, [sp, #116]	; 0x74
 802453e:	eeb0 ba64 	vmov.f32	s22, s9
 8024542:	931c      	str	r3, [sp, #112]	; 0x70
 8024544:	eef0 aa45 	vmov.f32	s21, s10
 8024548:	6850      	ldr	r0, [r2, #4]
 802454a:	9119      	str	r1, [sp, #100]	; 0x64
 802454c:	6812      	ldr	r2, [r2, #0]
 802454e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8024550:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8024554:	fb00 1303 	mla	r3, r0, r3, r1
 8024558:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802455c:	930c      	str	r3, [sp, #48]	; 0x30
 802455e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024560:	681b      	ldr	r3, [r3, #0]
 8024562:	9312      	str	r3, [sp, #72]	; 0x48
 8024564:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024566:	685e      	ldr	r6, [r3, #4]
 8024568:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 802456c:	3604      	adds	r6, #4
 802456e:	930d      	str	r3, [sp, #52]	; 0x34
 8024570:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024572:	2b00      	cmp	r3, #0
 8024574:	dc03      	bgt.n	802457e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024576:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024578:	2b00      	cmp	r3, #0
 802457a:	f340 8387 	ble.w	8024c8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 802457e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024580:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024584:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024588:	1e48      	subs	r0, r1, #1
 802458a:	1e57      	subs	r7, r2, #1
 802458c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802458e:	2b00      	cmp	r3, #0
 8024590:	f340 8194 	ble.w	80248bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8024594:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024596:	142b      	asrs	r3, r5, #16
 8024598:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802459c:	d406      	bmi.n	80245ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802459e:	4584      	cmp	ip, r0
 80245a0:	da04      	bge.n	80245ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80245a2:	2b00      	cmp	r3, #0
 80245a4:	db02      	blt.n	80245ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80245a6:	42bb      	cmp	r3, r7
 80245a8:	f2c0 8189 	blt.w	80248be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80245ac:	f11c 0c01 	adds.w	ip, ip, #1
 80245b0:	f100 8177 	bmi.w	80248a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80245b4:	4561      	cmp	r1, ip
 80245b6:	f2c0 8174 	blt.w	80248a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80245ba:	3301      	adds	r3, #1
 80245bc:	f100 8171 	bmi.w	80248a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80245c0:	429a      	cmp	r2, r3
 80245c2:	f2c0 816e 	blt.w	80248a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80245c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245c8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80245ca:	931a      	str	r3, [sp, #104]	; 0x68
 80245cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80245ce:	2b00      	cmp	r3, #0
 80245d0:	f340 8193 	ble.w	80248fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80245d4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80245d6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80245da:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80245de:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80245e2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80245e4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80245e8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80245ea:	141b      	asrs	r3, r3, #16
 80245ec:	f100 81d6 	bmi.w	802499c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80245f0:	f100 38ff 	add.w	r8, r0, #4294967295
 80245f4:	4543      	cmp	r3, r8
 80245f6:	f280 81d1 	bge.w	802499c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80245fa:	f1bc 0f00 	cmp.w	ip, #0
 80245fe:	f2c0 81cd 	blt.w	802499c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024602:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024606:	45c4      	cmp	ip, r8
 8024608:	f280 81c8 	bge.w	802499c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802460c:	b200      	sxth	r0, r0
 802460e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024610:	fb0c 3300 	mla	r3, ip, r0, r3
 8024614:	eb04 0803 	add.w	r8, r4, r3
 8024618:	5ce3      	ldrb	r3, [r4, r3]
 802461a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802461e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024622:	2a00      	cmp	r2, #0
 8024624:	f000 81af 	beq.w	8024986 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8024628:	f898 c001 	ldrb.w	ip, [r8, #1]
 802462c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024630:	940e      	str	r4, [sp, #56]	; 0x38
 8024632:	0e24      	lsrs	r4, r4, #24
 8024634:	9415      	str	r4, [sp, #84]	; 0x54
 8024636:	b179      	cbz	r1, 8024658 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024638:	eb08 0c00 	add.w	ip, r8, r0
 802463c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024640:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024644:	900a      	str	r0, [sp, #40]	; 0x28
 8024646:	0e00      	lsrs	r0, r0, #24
 8024648:	9013      	str	r0, [sp, #76]	; 0x4c
 802464a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802464e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024652:	900f      	str	r0, [sp, #60]	; 0x3c
 8024654:	0e00      	lsrs	r0, r0, #24
 8024656:	9016      	str	r0, [sp, #88]	; 0x58
 8024658:	b292      	uxth	r2, r2
 802465a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802465c:	b289      	uxth	r1, r1
 802465e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024660:	fb02 f901 	mul.w	r9, r2, r1
 8024664:	0112      	lsls	r2, r2, #4
 8024666:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802466a:	eba2 0809 	sub.w	r8, r2, r9
 802466e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024672:	b289      	uxth	r1, r1
 8024674:	fa1f f888 	uxth.w	r8, r8
 8024678:	1a52      	subs	r2, r2, r1
 802467a:	fb08 f000 	mul.w	r0, r8, r0
 802467e:	b292      	uxth	r2, r2
 8024680:	fb02 000e 	mla	r0, r2, lr, r0
 8024684:	fb01 0004 	mla	r0, r1, r4, r0
 8024688:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802468a:	fb09 0004 	mla	r0, r9, r4, r0
 802468e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024692:	2800      	cmp	r0, #0
 8024694:	f000 80fa 	beq.w	802488c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024698:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802469c:	d01b      	beq.n	80246d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802469e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80246a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80246a6:	fb0e fa0a 	mul.w	sl, lr, sl
 80246aa:	fb0e fe03 	mul.w	lr, lr, r3
 80246ae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80246b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80246b6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80246ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80246be:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80246c2:	4453      	add	r3, sl
 80246c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80246c8:	0a1b      	lsrs	r3, r3, #8
 80246ca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80246ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80246d2:	ea43 030c 	orr.w	r3, r3, ip
 80246d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80246d8:	2cff      	cmp	r4, #255	; 0xff
 80246da:	d021      	beq.n	8024720 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80246dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80246de:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80246e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80246e4:	fb04 fb0b 	mul.w	fp, r4, fp
 80246e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80246ea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80246ee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80246f0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80246f4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80246f8:	fb04 fa0a 	mul.w	sl, r4, sl
 80246fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024700:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024704:	44de      	add	lr, fp
 8024706:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802470a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802470e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024712:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024716:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802471a:	ea4e 040a 	orr.w	r4, lr, sl
 802471e:	940e      	str	r4, [sp, #56]	; 0x38
 8024720:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024722:	2cff      	cmp	r4, #255	; 0xff
 8024724:	d021      	beq.n	802476a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8024726:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024728:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802472c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802472e:	fb04 fb0b 	mul.w	fp, r4, fp
 8024732:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024734:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024738:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802473a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802473e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024742:	fb04 fa0a 	mul.w	sl, r4, sl
 8024746:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802474a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802474e:	44de      	add	lr, fp
 8024750:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024754:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024758:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802475c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024760:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024764:	ea4e 040a 	orr.w	r4, lr, sl
 8024768:	940a      	str	r4, [sp, #40]	; 0x28
 802476a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802476c:	2cff      	cmp	r4, #255	; 0xff
 802476e:	d021      	beq.n	80247b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024770:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024772:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024776:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024778:	fb04 fb0b 	mul.w	fp, r4, fp
 802477c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802477e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024782:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024784:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024788:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802478c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024790:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024794:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024798:	44de      	add	lr, fp
 802479a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802479e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80247a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80247a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80247aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80247ae:	ea4e 040a 	orr.w	r4, lr, sl
 80247b2:	940f      	str	r4, [sp, #60]	; 0x3c
 80247b4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80247b6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80247ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80247be:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80247c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80247c4:	fb08 fc0c 	mul.w	ip, r8, ip
 80247c8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80247cc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80247d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80247d2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80247d6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80247da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80247dc:	fb09 cc0e 	mla	ip, r9, lr, ip
 80247e0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80247e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80247e6:	fb08 f80e 	mul.w	r8, r8, lr
 80247ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247ee:	fb02 8303 	mla	r3, r2, r3, r8
 80247f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80247f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80247f8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80247fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80247fe:	fb01 330a 	mla	r3, r1, sl, r3
 8024802:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024806:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024808:	fb09 3901 	mla	r9, r9, r1, r3
 802480c:	883b      	ldrh	r3, [r7, #0]
 802480e:	4342      	muls	r2, r0
 8024810:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024814:	1c50      	adds	r0, r2, #1
 8024816:	1219      	asrs	r1, r3, #8
 8024818:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802481c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024820:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024824:	ea4c 0c09 	orr.w	ip, ip, r9
 8024828:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802482c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8024830:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8024834:	b2c0      	uxtb	r0, r0
 8024836:	fb12 f204 	smulbb	r2, r2, r4
 802483a:	fa5f fc8c 	uxtb.w	ip, ip
 802483e:	fb1e fe04 	smulbb	lr, lr, r4
 8024842:	fb01 2100 	mla	r1, r1, r0, r2
 8024846:	10da      	asrs	r2, r3, #3
 8024848:	fb1c fc04 	smulbb	ip, ip, r4
 802484c:	00db      	lsls	r3, r3, #3
 802484e:	b289      	uxth	r1, r1
 8024850:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024854:	b2db      	uxtb	r3, r3
 8024856:	fb02 e200 	mla	r2, r2, r0, lr
 802485a:	fb03 c300 	mla	r3, r3, r0, ip
 802485e:	b292      	uxth	r2, r2
 8024860:	fa1f fc83 	uxth.w	ip, r3
 8024864:	1c4b      	adds	r3, r1, #1
 8024866:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802486a:	f10c 0301 	add.w	r3, ip, #1
 802486e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8024872:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8024876:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802487a:	430b      	orrs	r3, r1
 802487c:	1c51      	adds	r1, r2, #1
 802487e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024882:	0952      	lsrs	r2, r2, #5
 8024884:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024888:	4313      	orrs	r3, r2
 802488a:	803b      	strh	r3, [r7, #0]
 802488c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802488e:	3702      	adds	r7, #2
 8024890:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8024892:	441a      	add	r2, r3
 8024894:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024896:	441d      	add	r5, r3
 8024898:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802489a:	9231      	str	r2, [sp, #196]	; 0xc4
 802489c:	3b01      	subs	r3, #1
 802489e:	931a      	str	r3, [sp, #104]	; 0x68
 80248a0:	e694      	b.n	80245cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80248a2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80248a4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80248a6:	441c      	add	r4, r3
 80248a8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80248aa:	441d      	add	r5, r3
 80248ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248ae:	9431      	str	r4, [sp, #196]	; 0xc4
 80248b0:	3b01      	subs	r3, #1
 80248b2:	9309      	str	r3, [sp, #36]	; 0x24
 80248b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80248b6:	3302      	adds	r3, #2
 80248b8:	930c      	str	r3, [sp, #48]	; 0x30
 80248ba:	e667      	b.n	802458c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80248bc:	d024      	beq.n	8024908 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80248be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248c0:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80248c2:	3b01      	subs	r3, #1
 80248c4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80248c6:	fb00 4003 	mla	r0, r0, r3, r4
 80248ca:	1400      	asrs	r0, r0, #16
 80248cc:	f53f ae7b 	bmi.w	80245c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80248d0:	3901      	subs	r1, #1
 80248d2:	4288      	cmp	r0, r1
 80248d4:	f6bf ae77 	bge.w	80245c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80248d8:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80248da:	fb01 5303 	mla	r3, r1, r3, r5
 80248de:	141b      	asrs	r3, r3, #16
 80248e0:	f53f ae71 	bmi.w	80245c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80248e4:	3a01      	subs	r2, #1
 80248e6:	4293      	cmp	r3, r2
 80248e8:	f6bf ae6d 	bge.w	80245c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80248ec:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80248f0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80248f4:	f1bb 0f00 	cmp.w	fp, #0
 80248f8:	dc70      	bgt.n	80249dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 80248fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024902:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024906:	930c      	str	r3, [sp, #48]	; 0x30
 8024908:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802490a:	2b00      	cmp	r3, #0
 802490c:	f340 81be 	ble.w	8024c8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8024910:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024914:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024916:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802491a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802491e:	eef0 6a48 	vmov.f32	s13, s16
 8024922:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024926:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802492a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802492e:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8024932:	eef0 6a68 	vmov.f32	s13, s17
 8024936:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802493a:	ee16 5a90 	vmov	r5, s13
 802493e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024942:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024946:	ee37 8a48 	vsub.f32	s16, s14, s16
 802494a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802494e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024952:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024956:	ee18 2a10 	vmov	r2, s16
 802495a:	eeb0 8a47 	vmov.f32	s16, s14
 802495e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024962:	ee18 2a90 	vmov	r2, s17
 8024966:	9333      	str	r3, [sp, #204]	; 0xcc
 8024968:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802496a:	eef0 8a67 	vmov.f32	s17, s15
 802496e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024972:	9334      	str	r3, [sp, #208]	; 0xd0
 8024974:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024976:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8024978:	3b01      	subs	r3, #1
 802497a:	9319      	str	r3, [sp, #100]	; 0x64
 802497c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802497e:	bf08      	it	eq
 8024980:	4613      	moveq	r3, r2
 8024982:	9309      	str	r3, [sp, #36]	; 0x24
 8024984:	e5f4      	b.n	8024570 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8024986:	2900      	cmp	r1, #0
 8024988:	f43f ae66 	beq.w	8024658 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802498c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024990:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024994:	900a      	str	r0, [sp, #40]	; 0x28
 8024996:	0e00      	lsrs	r0, r0, #24
 8024998:	9013      	str	r0, [sp, #76]	; 0x4c
 802499a:	e65d      	b.n	8024658 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802499c:	f113 0801 	adds.w	r8, r3, #1
 80249a0:	f53f af74 	bmi.w	802488c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80249a4:	4540      	cmp	r0, r8
 80249a6:	f6ff af71 	blt.w	802488c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80249aa:	f11c 0801 	adds.w	r8, ip, #1
 80249ae:	f53f af6d 	bmi.w	802488c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80249b2:	45c6      	cmp	lr, r8
 80249b4:	f6ff af6a 	blt.w	802488c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80249b8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80249ba:	b200      	sxth	r0, r0
 80249bc:	9302      	str	r3, [sp, #8]
 80249be:	fa0f f38e 	sxth.w	r3, lr
 80249c2:	9000      	str	r0, [sp, #0]
 80249c4:	9301      	str	r3, [sp, #4]
 80249c6:	4633      	mov	r3, r6
 80249c8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80249ca:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80249ce:	e9cd c203 	strd	ip, r2, [sp, #12]
 80249d2:	4639      	mov	r1, r7
 80249d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80249d6:	f7ff fc33 	bl	8024240 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80249da:	e757      	b.n	802488c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80249dc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80249de:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80249e2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80249e4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80249e8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80249ea:	1427      	asrs	r7, r4, #16
 80249ec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80249ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80249f2:	142b      	asrs	r3, r5, #16
 80249f4:	fb01 7303 	mla	r3, r1, r3, r7
 80249f8:	18e7      	adds	r7, r4, r3
 80249fa:	5ce3      	ldrb	r3, [r4, r3]
 80249fc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024a00:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024a04:	2a00      	cmp	r2, #0
 8024a06:	f000 8137 	beq.w	8024c78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 8024a0a:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024a0e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8024a12:	9410      	str	r4, [sp, #64]	; 0x40
 8024a14:	0e24      	lsrs	r4, r4, #24
 8024a16:	9417      	str	r4, [sp, #92]	; 0x5c
 8024a18:	b170      	cbz	r0, 8024a38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8024a1a:	eb07 0e01 	add.w	lr, r7, r1
 8024a1e:	5c79      	ldrb	r1, [r7, r1]
 8024a20:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024a24:	910b      	str	r1, [sp, #44]	; 0x2c
 8024a26:	0e09      	lsrs	r1, r1, #24
 8024a28:	9114      	str	r1, [sp, #80]	; 0x50
 8024a2a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024a2e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024a32:	9111      	str	r1, [sp, #68]	; 0x44
 8024a34:	0e09      	lsrs	r1, r1, #24
 8024a36:	9118      	str	r1, [sp, #96]	; 0x60
 8024a38:	b292      	uxth	r2, r2
 8024a3a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8024a3c:	b280      	uxth	r0, r0
 8024a3e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024a40:	fb02 f800 	mul.w	r8, r2, r0
 8024a44:	0112      	lsls	r2, r2, #4
 8024a46:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024a4a:	eba2 0e08 	sub.w	lr, r2, r8
 8024a4e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024a52:	b280      	uxth	r0, r0
 8024a54:	fa1f fe8e 	uxth.w	lr, lr
 8024a58:	1a12      	subs	r2, r2, r0
 8024a5a:	fb0e f101 	mul.w	r1, lr, r1
 8024a5e:	b292      	uxth	r2, r2
 8024a60:	fb02 110c 	mla	r1, r2, ip, r1
 8024a64:	fb00 1104 	mla	r1, r0, r4, r1
 8024a68:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024a6a:	fb08 1104 	mla	r1, r8, r4, r1
 8024a6e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024a72:	2900      	cmp	r1, #0
 8024a74:	f000 80f5 	beq.w	8024c62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8024a78:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024a7c:	d019      	beq.n	8024ab2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8024a7e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024a82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024a86:	fb0c fa0a 	mul.w	sl, ip, sl
 8024a8a:	fb0c fc03 	mul.w	ip, ip, r3
 8024a8e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024a92:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024a96:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024a9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024a9e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024aa2:	4453      	add	r3, sl
 8024aa4:	0a3f      	lsrs	r7, r7, #8
 8024aa6:	0a1b      	lsrs	r3, r3, #8
 8024aa8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024aac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024ab0:	433b      	orrs	r3, r7
 8024ab2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024ab4:	2cff      	cmp	r4, #255	; 0xff
 8024ab6:	d020      	beq.n	8024afa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8024ab8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024aba:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024abe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024ac0:	4367      	muls	r7, r4
 8024ac2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024ac4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024ac8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024acc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024ace:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024ad2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ad6:	fb04 fa0a 	mul.w	sl, r4, sl
 8024ada:	44bc      	add	ip, r7
 8024adc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024ae0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ae4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024ae8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024aec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024af0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024af4:	ea4c 040a 	orr.w	r4, ip, sl
 8024af8:	9410      	str	r4, [sp, #64]	; 0x40
 8024afa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024afc:	2cff      	cmp	r4, #255	; 0xff
 8024afe:	d020      	beq.n	8024b42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8024b00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024b02:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024b06:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024b08:	4367      	muls	r7, r4
 8024b0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024b0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024b10:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024b14:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024b16:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024b1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b1e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024b22:	44bc      	add	ip, r7
 8024b24:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024b28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024b30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024b3c:	ea4c 040a 	orr.w	r4, ip, sl
 8024b40:	940b      	str	r4, [sp, #44]	; 0x2c
 8024b42:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024b44:	2cff      	cmp	r4, #255	; 0xff
 8024b46:	d020      	beq.n	8024b8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 8024b48:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024b4a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024b4e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024b50:	4367      	muls	r7, r4
 8024b52:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024b54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024b58:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024b5c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024b5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024b62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b66:	fb04 fa0a 	mul.w	sl, r4, sl
 8024b6a:	44bc      	add	ip, r7
 8024b6c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024b70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b74:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024b78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024b84:	ea4c 040a 	orr.w	r4, ip, sl
 8024b88:	9411      	str	r4, [sp, #68]	; 0x44
 8024b8a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024b8c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024b90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b94:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024b98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024b9a:	fb0e f707 	mul.w	r7, lr, r7
 8024b9e:	fb02 770c 	mla	r7, r2, ip, r7
 8024ba2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024ba6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024ba8:	fb00 770c 	mla	r7, r0, ip, r7
 8024bac:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024bb0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024bb2:	fb08 770c 	mla	r7, r8, ip, r7
 8024bb6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024bba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024bbc:	fb0e fe0c 	mul.w	lr, lr, ip
 8024bc0:	0a3f      	lsrs	r7, r7, #8
 8024bc2:	fb02 e303 	mla	r3, r2, r3, lr
 8024bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024bc8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024bcc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024bd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024bd2:	fb00 330a 	mla	r3, r0, sl, r3
 8024bd6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024bda:	f8b9 0000 	ldrh.w	r0, [r9]
 8024bde:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024be4:	1202      	asrs	r2, r0, #8
 8024be6:	434b      	muls	r3, r1
 8024be8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024bec:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024bf0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024bf4:	1c59      	adds	r1, r3, #1
 8024bf6:	ea47 070c 	orr.w	r7, r7, ip
 8024bfa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024bfe:	0c3b      	lsrs	r3, r7, #16
 8024c00:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024c04:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024c08:	b2ff      	uxtb	r7, r7
 8024c0a:	fb13 f304 	smulbb	r3, r3, r4
 8024c0e:	b2c9      	uxtb	r1, r1
 8024c10:	fb1c fc04 	smulbb	ip, ip, r4
 8024c14:	fb02 3201 	mla	r2, r2, r1, r3
 8024c18:	10c3      	asrs	r3, r0, #3
 8024c1a:	fb17 f704 	smulbb	r7, r7, r4
 8024c1e:	00c0      	lsls	r0, r0, #3
 8024c20:	b292      	uxth	r2, r2
 8024c22:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024c26:	b2c0      	uxtb	r0, r0
 8024c28:	fb03 c301 	mla	r3, r3, r1, ip
 8024c2c:	f102 0c01 	add.w	ip, r2, #1
 8024c30:	fb00 7001 	mla	r0, r0, r1, r7
 8024c34:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024c38:	b280      	uxth	r0, r0
 8024c3a:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8024c3e:	b29b      	uxth	r3, r3
 8024c40:	1c42      	adds	r2, r0, #1
 8024c42:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024c46:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024c4a:	ea42 020c 	orr.w	r2, r2, ip
 8024c4e:	f103 0c01 	add.w	ip, r3, #1
 8024c52:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024c56:	095b      	lsrs	r3, r3, #5
 8024c58:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c5c:	431a      	orrs	r2, r3
 8024c5e:	f8a9 2000 	strh.w	r2, [r9]
 8024c62:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024c64:	f109 0902 	add.w	r9, r9, #2
 8024c68:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8024c6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024c6e:	441a      	add	r2, r3
 8024c70:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024c72:	9231      	str	r2, [sp, #196]	; 0xc4
 8024c74:	441d      	add	r5, r3
 8024c76:	e63d      	b.n	80248f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024c78:	2800      	cmp	r0, #0
 8024c7a:	f43f aedd 	beq.w	8024a38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8024c7e:	5c79      	ldrb	r1, [r7, r1]
 8024c80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024c84:	910b      	str	r1, [sp, #44]	; 0x2c
 8024c86:	0e09      	lsrs	r1, r1, #24
 8024c88:	9114      	str	r1, [sp, #80]	; 0x50
 8024c8a:	e6d5      	b.n	8024a38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8024c8c:	b01f      	add	sp, #124	; 0x7c
 8024c8e:	ecbd 8b08 	vpop	{d8-d11}
 8024c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024c98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8024c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c9c:	880e      	ldrh	r6, [r1, #0]
 8024c9e:	b085      	sub	sp, #20
 8024ca0:	4691      	mov	r9, r2
 8024ca2:	ea4f 2826 	mov.w	r8, r6, asr #8
 8024ca6:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8024caa:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8024cae:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 8024cb2:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8024cb6:	00f6      	lsls	r6, r6, #3
 8024cb8:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8024cbc:	9200      	str	r2, [sp, #0]
 8024cbe:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 8024cc2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8024cc6:	9201      	str	r2, [sp, #4]
 8024cc8:	b2f2      	uxtb	r2, r6
 8024cca:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8024cce:	9202      	str	r2, [sp, #8]
 8024cd0:	fb04 560c 	mla	r6, r4, ip, r5
 8024cd4:	2c00      	cmp	r4, #0
 8024cd6:	eb09 0806 	add.w	r8, r9, r6
 8024cda:	db3f      	blt.n	8024d5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8024cdc:	45a6      	cmp	lr, r4
 8024cde:	dd3d      	ble.n	8024d5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8024ce0:	2d00      	cmp	r5, #0
 8024ce2:	db39      	blt.n	8024d58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8024ce4:	45ac      	cmp	ip, r5
 8024ce6:	dd37      	ble.n	8024d58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8024ce8:	f819 2006 	ldrb.w	r2, [r9, r6]
 8024cec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024cf0:	1c6e      	adds	r6, r5, #1
 8024cf2:	d436      	bmi.n	8024d62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8024cf4:	45b4      	cmp	ip, r6
 8024cf6:	dd34      	ble.n	8024d62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8024cf8:	b3a8      	cbz	r0, 8024d66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 8024cfa:	f898 6001 	ldrb.w	r6, [r8, #1]
 8024cfe:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8024d02:	3401      	adds	r4, #1
 8024d04:	d433      	bmi.n	8024d6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8024d06:	45a6      	cmp	lr, r4
 8024d08:	dd31      	ble.n	8024d6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8024d0a:	b39f      	cbz	r7, 8024d74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8024d0c:	2d00      	cmp	r5, #0
 8024d0e:	eb08 0e0c 	add.w	lr, r8, ip
 8024d12:	db2a      	blt.n	8024d6a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8024d14:	45ac      	cmp	ip, r5
 8024d16:	dd28      	ble.n	8024d6a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8024d18:	f818 400c 	ldrb.w	r4, [r8, ip]
 8024d1c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8024d20:	3501      	adds	r5, #1
 8024d22:	d42a      	bmi.n	8024d7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8024d24:	45ac      	cmp	ip, r5
 8024d26:	dd28      	ble.n	8024d7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8024d28:	b348      	cbz	r0, 8024d7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8024d2a:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8024d2e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024d32:	280f      	cmp	r0, #15
 8024d34:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024d38:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024d3c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024d40:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024d44:	d801      	bhi.n	8024d4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 8024d46:	2f0f      	cmp	r7, #15
 8024d48:	d91b      	bls.n	8024d82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 8024d4a:	4b7e      	ldr	r3, [pc, #504]	; (8024f44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8024d4c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8024d50:	4a7d      	ldr	r2, [pc, #500]	; (8024f48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8024d52:	487e      	ldr	r0, [pc, #504]	; (8024f4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8024d54:	f004 ffcc 	bl	8029cf0 <__assert_func>
 8024d58:	2200      	movs	r2, #0
 8024d5a:	e7c9      	b.n	8024cf0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8024d5c:	2600      	movs	r6, #0
 8024d5e:	4632      	mov	r2, r6
 8024d60:	e7cf      	b.n	8024d02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8024d62:	2600      	movs	r6, #0
 8024d64:	e7cd      	b.n	8024d02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8024d66:	4606      	mov	r6, r0
 8024d68:	e7cb      	b.n	8024d02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8024d6a:	2400      	movs	r4, #0
 8024d6c:	e7d8      	b.n	8024d20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8024d6e:	2300      	movs	r3, #0
 8024d70:	461c      	mov	r4, r3
 8024d72:	e7de      	b.n	8024d32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8024d74:	463b      	mov	r3, r7
 8024d76:	463c      	mov	r4, r7
 8024d78:	e7db      	b.n	8024d32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8024d7a:	2300      	movs	r3, #0
 8024d7c:	e7d9      	b.n	8024d32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8024d7e:	4603      	mov	r3, r0
 8024d80:	e7d7      	b.n	8024d32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8024d82:	b280      	uxth	r0, r0
 8024d84:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024d88:	b2bf      	uxth	r7, r7
 8024d8a:	fb00 fe07 	mul.w	lr, r0, r7
 8024d8e:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8024d92:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024d96:	eba0 0c0e 	sub.w	ip, r0, lr
 8024d9a:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8024d9e:	b2bf      	uxth	r7, r7
 8024da0:	fa1f fc8c 	uxth.w	ip, ip
 8024da4:	eba5 0507 	sub.w	r5, r5, r7
 8024da8:	fb0c f00a 	mul.w	r0, ip, sl
 8024dac:	b2ad      	uxth	r5, r5
 8024dae:	fb05 000b 	mla	r0, r5, fp, r0
 8024db2:	fb07 0009 	mla	r0, r7, r9, r0
 8024db6:	fb0e 0008 	mla	r0, lr, r8, r0
 8024dba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024dbe:	9003      	str	r0, [sp, #12]
 8024dc0:	d018      	beq.n	8024df4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 8024dc2:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024dc6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024dca:	fb0b f000 	mul.w	r0, fp, r0
 8024dce:	fb0b fb02 	mul.w	fp, fp, r2
 8024dd2:	0a02      	lsrs	r2, r0, #8
 8024dd4:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024dd8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024ddc:	4402      	add	r2, r0
 8024dde:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024de2:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024de6:	0a12      	lsrs	r2, r2, #8
 8024de8:	0a00      	lsrs	r0, r0, #8
 8024dea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024dee:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024df2:	4302      	orrs	r2, r0
 8024df4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024df8:	d019      	beq.n	8024e2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 8024dfa:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024dfe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024e02:	fb0a fb0b 	mul.w	fp, sl, fp
 8024e06:	fb0a fa06 	mul.w	sl, sl, r6
 8024e0a:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024e0e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024e12:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024e16:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024e1a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024e1e:	445e      	add	r6, fp
 8024e20:	0a00      	lsrs	r0, r0, #8
 8024e22:	0a36      	lsrs	r6, r6, #8
 8024e24:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024e28:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024e2c:	4306      	orrs	r6, r0
 8024e2e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024e32:	d019      	beq.n	8024e68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 8024e34:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024e38:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024e3c:	fb09 fa0a 	mul.w	sl, r9, sl
 8024e40:	fb09 f904 	mul.w	r9, r9, r4
 8024e44:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024e48:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024e4c:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8024e50:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024e54:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8024e58:	4454      	add	r4, sl
 8024e5a:	0a00      	lsrs	r0, r0, #8
 8024e5c:	0a24      	lsrs	r4, r4, #8
 8024e5e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024e62:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024e66:	4304      	orrs	r4, r0
 8024e68:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024e6c:	d019      	beq.n	8024ea2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 8024e6e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8024e72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024e76:	fb08 f909 	mul.w	r9, r8, r9
 8024e7a:	fb08 f803 	mul.w	r8, r8, r3
 8024e7e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8024e82:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024e86:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8024e8a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e8e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024e92:	444b      	add	r3, r9
 8024e94:	0a00      	lsrs	r0, r0, #8
 8024e96:	0a1b      	lsrs	r3, r3, #8
 8024e98:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024e9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024ea0:	4303      	orrs	r3, r0
 8024ea2:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024ea6:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024eaa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024eae:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024eb2:	fb0c f808 	mul.w	r8, ip, r8
 8024eb6:	fb0c f606 	mul.w	r6, ip, r6
 8024eba:	fb05 8800 	mla	r8, r5, r0, r8
 8024ebe:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8024ec2:	fb05 6202 	mla	r2, r5, r2, r6
 8024ec6:	9d00      	ldr	r5, [sp, #0]
 8024ec8:	fb07 8800 	mla	r8, r7, r0, r8
 8024ecc:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8024ed0:	fb0e 8000 	mla	r0, lr, r0, r8
 8024ed4:	0a00      	lsrs	r0, r0, #8
 8024ed6:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8024eda:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8024ede:	fb07 2700 	mla	r7, r7, r0, r2
 8024ee2:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8024ee6:	9b03      	ldr	r3, [sp, #12]
 8024ee8:	fb0e 7000 	mla	r0, lr, r0, r7
 8024eec:	9a02      	ldr	r2, [sp, #8]
 8024eee:	43dc      	mvns	r4, r3
 8024ef0:	9b01      	ldr	r3, [sp, #4]
 8024ef2:	0a00      	lsrs	r0, r0, #8
 8024ef4:	b2e4      	uxtb	r4, r4
 8024ef6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024efa:	4363      	muls	r3, r4
 8024efc:	4365      	muls	r5, r4
 8024efe:	ea48 0000 	orr.w	r0, r8, r0
 8024f02:	4362      	muls	r2, r4
 8024f04:	1c5e      	adds	r6, r3, #1
 8024f06:	4614      	mov	r4, r2
 8024f08:	1c6a      	adds	r2, r5, #1
 8024f0a:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8024f0e:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8024f12:	0a03      	lsrs	r3, r0, #8
 8024f14:	0c02      	lsrs	r2, r0, #16
 8024f16:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8024f1a:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8024f1e:	00db      	lsls	r3, r3, #3
 8024f20:	0212      	lsls	r2, r2, #8
 8024f22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024f26:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024f2a:	4313      	orrs	r3, r2
 8024f2c:	1c62      	adds	r2, r4, #1
 8024f2e:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8024f32:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8024f36:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8024f3a:	4318      	orrs	r0, r3
 8024f3c:	8008      	strh	r0, [r1, #0]
 8024f3e:	b005      	add	sp, #20
 8024f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f44:	0802e369 	.word	0x0802e369
 8024f48:	0802e936 	.word	0x0802e936
 8024f4c:	0802e3ed 	.word	0x0802e3ed

08024f50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f54:	ed2d 8b08 	vpush	{d8-d11}
 8024f58:	b09b      	sub	sp, #108	; 0x6c
 8024f5a:	eeb0 aa40 	vmov.f32	s20, s0
 8024f5e:	eef0 9a60 	vmov.f32	s19, s1
 8024f62:	9218      	str	r2, [sp, #96]	; 0x60
 8024f64:	eeb0 9a41 	vmov.f32	s18, s2
 8024f68:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8024f6a:	eeb0 8a62 	vmov.f32	s16, s5
 8024f6e:	9019      	str	r0, [sp, #100]	; 0x64
 8024f70:	eef0 8a43 	vmov.f32	s17, s6
 8024f74:	6850      	ldr	r0, [r2, #4]
 8024f76:	eef0 ba44 	vmov.f32	s23, s8
 8024f7a:	9116      	str	r1, [sp, #88]	; 0x58
 8024f7c:	eeb0 ba64 	vmov.f32	s22, s9
 8024f80:	9307      	str	r3, [sp, #28]
 8024f82:	eef0 aa45 	vmov.f32	s21, s10
 8024f86:	6812      	ldr	r2, [r2, #0]
 8024f88:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8024f8a:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8024f8e:	fb00 1303 	mla	r3, r0, r3, r1
 8024f92:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024f96:	930a      	str	r3, [sp, #40]	; 0x28
 8024f98:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024f9a:	681b      	ldr	r3, [r3, #0]
 8024f9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8024f9e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024fa0:	685e      	ldr	r6, [r3, #4]
 8024fa2:	3604      	adds	r6, #4
 8024fa4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024fa6:	2b00      	cmp	r3, #0
 8024fa8:	dc03      	bgt.n	8024fb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8024faa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024fac:	2b00      	cmp	r3, #0
 8024fae:	f340 8373 	ble.w	8025698 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8024fb2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024fb4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024fb8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024fbc:	1e48      	subs	r0, r1, #1
 8024fbe:	1e57      	subs	r7, r2, #1
 8024fc0:	9b07      	ldr	r3, [sp, #28]
 8024fc2:	2b00      	cmp	r3, #0
 8024fc4:	f340 818f 	ble.w	80252e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8024fc8:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8024fca:	142b      	asrs	r3, r5, #16
 8024fcc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024fd0:	d406      	bmi.n	8024fe0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024fd2:	4584      	cmp	ip, r0
 8024fd4:	da04      	bge.n	8024fe0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024fd6:	2b00      	cmp	r3, #0
 8024fd8:	db02      	blt.n	8024fe0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024fda:	42bb      	cmp	r3, r7
 8024fdc:	f2c0 8184 	blt.w	80252e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8024fe0:	f11c 0c01 	adds.w	ip, ip, #1
 8024fe4:	f100 8172 	bmi.w	80252cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024fe8:	4561      	cmp	r1, ip
 8024fea:	f2c0 816f 	blt.w	80252cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024fee:	3301      	adds	r3, #1
 8024ff0:	f100 816c 	bmi.w	80252cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024ff4:	429a      	cmp	r2, r3
 8024ff6:	f2c0 8169 	blt.w	80252cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024ffa:	9b07      	ldr	r3, [sp, #28]
 8024ffc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024ffe:	9317      	str	r3, [sp, #92]	; 0x5c
 8025000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025002:	2b00      	cmp	r3, #0
 8025004:	f340 818e 	ble.w	8025324 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8025008:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802500a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802500e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025012:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025016:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025018:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802501c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802501e:	141b      	asrs	r3, r3, #16
 8025020:	f100 81d1 	bmi.w	80253c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025024:	f101 38ff 	add.w	r8, r1, #4294967295
 8025028:	4543      	cmp	r3, r8
 802502a:	f280 81cc 	bge.w	80253c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802502e:	f1bc 0f00 	cmp.w	ip, #0
 8025032:	f2c0 81c8 	blt.w	80253c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025036:	f10e 38ff 	add.w	r8, lr, #4294967295
 802503a:	45c4      	cmp	ip, r8
 802503c:	f280 81c3 	bge.w	80253c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025040:	b209      	sxth	r1, r1
 8025042:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025044:	fb0c 3301 	mla	r3, ip, r1, r3
 8025048:	eb04 0803 	add.w	r8, r4, r3
 802504c:	5ce3      	ldrb	r3, [r4, r3]
 802504e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025052:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025056:	2a00      	cmp	r2, #0
 8025058:	f000 81aa 	beq.w	80253b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 802505c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025060:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025064:	940b      	str	r4, [sp, #44]	; 0x2c
 8025066:	0e24      	lsrs	r4, r4, #24
 8025068:	9412      	str	r4, [sp, #72]	; 0x48
 802506a:	b178      	cbz	r0, 802508c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802506c:	eb08 0c01 	add.w	ip, r8, r1
 8025070:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025074:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025078:	9108      	str	r1, [sp, #32]
 802507a:	0e09      	lsrs	r1, r1, #24
 802507c:	9110      	str	r1, [sp, #64]	; 0x40
 802507e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8025082:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025086:	910c      	str	r1, [sp, #48]	; 0x30
 8025088:	0e09      	lsrs	r1, r1, #24
 802508a:	9113      	str	r1, [sp, #76]	; 0x4c
 802508c:	b292      	uxth	r2, r2
 802508e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025090:	b280      	uxth	r0, r0
 8025092:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025094:	fb02 f900 	mul.w	r9, r2, r0
 8025098:	0112      	lsls	r2, r2, #4
 802509a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802509e:	eba2 0809 	sub.w	r8, r2, r9
 80250a2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80250a6:	b280      	uxth	r0, r0
 80250a8:	fa1f f888 	uxth.w	r8, r8
 80250ac:	1a12      	subs	r2, r2, r0
 80250ae:	fb08 f101 	mul.w	r1, r8, r1
 80250b2:	b292      	uxth	r2, r2
 80250b4:	fb02 110e 	mla	r1, r2, lr, r1
 80250b8:	fb00 1104 	mla	r1, r0, r4, r1
 80250bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80250be:	fb09 1104 	mla	r1, r9, r4, r1
 80250c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80250c6:	2900      	cmp	r1, #0
 80250c8:	f000 80f5 	beq.w	80252b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80250cc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80250d0:	d01b      	beq.n	802510a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80250d2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80250d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80250da:	fb0e fa0a 	mul.w	sl, lr, sl
 80250de:	fb0e fe03 	mul.w	lr, lr, r3
 80250e2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80250e6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80250ea:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80250ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80250f2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80250f6:	4453      	add	r3, sl
 80250f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80250fc:	0a1b      	lsrs	r3, r3, #8
 80250fe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025102:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025106:	ea43 030c 	orr.w	r3, r3, ip
 802510a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802510c:	2cff      	cmp	r4, #255	; 0xff
 802510e:	d021      	beq.n	8025154 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8025110:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025112:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025116:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025118:	fb04 fb0b 	mul.w	fp, r4, fp
 802511c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802511e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025122:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025124:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025128:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802512c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025130:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025134:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025138:	44de      	add	lr, fp
 802513a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802513e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025142:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025146:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802514a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802514e:	ea4e 040a 	orr.w	r4, lr, sl
 8025152:	940b      	str	r4, [sp, #44]	; 0x2c
 8025154:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025156:	2cff      	cmp	r4, #255	; 0xff
 8025158:	d021      	beq.n	802519e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802515a:	9c08      	ldr	r4, [sp, #32]
 802515c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025160:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025162:	fb04 fb0b 	mul.w	fp, r4, fp
 8025166:	9c08      	ldr	r4, [sp, #32]
 8025168:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802516c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802516e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025172:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025176:	fb04 fa0a 	mul.w	sl, r4, sl
 802517a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802517e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025182:	44de      	add	lr, fp
 8025184:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025188:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802518c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025190:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025194:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025198:	ea4e 040a 	orr.w	r4, lr, sl
 802519c:	9408      	str	r4, [sp, #32]
 802519e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80251a0:	2cff      	cmp	r4, #255	; 0xff
 80251a2:	d021      	beq.n	80251e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80251a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80251a6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80251aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80251ac:	fb04 fb0b 	mul.w	fp, r4, fp
 80251b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80251b2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80251b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80251b8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80251bc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80251c0:	fb04 fa0a 	mul.w	sl, r4, sl
 80251c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80251c8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80251cc:	44de      	add	lr, fp
 80251ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80251d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80251da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80251de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80251e2:	ea4e 040a 	orr.w	r4, lr, sl
 80251e6:	940c      	str	r4, [sp, #48]	; 0x30
 80251e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80251ea:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80251ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80251f2:	43c9      	mvns	r1, r1
 80251f4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80251f8:	9c08      	ldr	r4, [sp, #32]
 80251fa:	fb08 fc0c 	mul.w	ip, r8, ip
 80251fe:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025202:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025206:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025208:	fb00 cc0e 	mla	ip, r0, lr, ip
 802520c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025210:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025212:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025216:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802521a:	fb08 f80e 	mul.w	r8, r8, lr
 802521e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025222:	fa5f fe81 	uxtb.w	lr, r1
 8025226:	fb02 8303 	mla	r3, r2, r3, r8
 802522a:	9a08      	ldr	r2, [sp, #32]
 802522c:	f8b7 8000 	ldrh.w	r8, [r7]
 8025230:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025234:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802523a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802523e:	fb00 330a 	mla	r3, r0, sl, r3
 8025242:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8025246:	ea4f 2228 	mov.w	r2, r8, asr #8
 802524a:	fb09 3900 	mla	r9, r9, r0, r3
 802524e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8025252:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025256:	b2c9      	uxtb	r1, r1
 8025258:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802525c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025260:	fb02 f20e 	mul.w	r2, r2, lr
 8025264:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025268:	fb00 f00e 	mul.w	r0, r0, lr
 802526c:	1c53      	adds	r3, r2, #1
 802526e:	fb01 f10e 	mul.w	r1, r1, lr
 8025272:	ea4c 0c09 	orr.w	ip, ip, r9
 8025276:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802527a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802527e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025282:	4a60      	ldr	r2, [pc, #384]	; (8025404 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8025284:	b2db      	uxtb	r3, r3
 8025286:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802528a:	1c43      	adds	r3, r0, #1
 802528c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025290:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025294:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025298:	00db      	lsls	r3, r3, #3
 802529a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802529e:	4313      	orrs	r3, r2
 80252a0:	1c4a      	adds	r2, r1, #1
 80252a2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80252a6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80252aa:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80252ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80252b2:	f8a7 c000 	strh.w	ip, [r7]
 80252b6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80252b8:	3702      	adds	r7, #2
 80252ba:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80252bc:	441a      	add	r2, r3
 80252be:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80252c0:	441d      	add	r5, r3
 80252c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80252c4:	922d      	str	r2, [sp, #180]	; 0xb4
 80252c6:	3b01      	subs	r3, #1
 80252c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80252ca:	e699      	b.n	8025000 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80252cc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80252ce:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80252d0:	441c      	add	r4, r3
 80252d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80252d4:	441d      	add	r5, r3
 80252d6:	9b07      	ldr	r3, [sp, #28]
 80252d8:	942d      	str	r4, [sp, #180]	; 0xb4
 80252da:	3b01      	subs	r3, #1
 80252dc:	9307      	str	r3, [sp, #28]
 80252de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80252e0:	3302      	adds	r3, #2
 80252e2:	930a      	str	r3, [sp, #40]	; 0x28
 80252e4:	e66c      	b.n	8024fc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80252e6:	d024      	beq.n	8025332 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80252e8:	9b07      	ldr	r3, [sp, #28]
 80252ea:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80252ec:	3b01      	subs	r3, #1
 80252ee:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80252f0:	fb00 4003 	mla	r0, r0, r3, r4
 80252f4:	1400      	asrs	r0, r0, #16
 80252f6:	f53f ae80 	bmi.w	8024ffa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80252fa:	3901      	subs	r1, #1
 80252fc:	4288      	cmp	r0, r1
 80252fe:	f6bf ae7c 	bge.w	8024ffa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025302:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8025304:	fb01 5303 	mla	r3, r1, r3, r5
 8025308:	141b      	asrs	r3, r3, #16
 802530a:	f53f ae76 	bmi.w	8024ffa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802530e:	3a01      	subs	r2, #1
 8025310:	4293      	cmp	r3, r2
 8025312:	f6bf ae72 	bge.w	8024ffa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025316:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802531a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802531e:	f1bb 0f00 	cmp.w	fp, #0
 8025322:	dc71      	bgt.n	8025408 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8025324:	9b07      	ldr	r3, [sp, #28]
 8025326:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802532a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802532c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025330:	930a      	str	r3, [sp, #40]	; 0x28
 8025332:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025334:	2b00      	cmp	r3, #0
 8025336:	f340 81af 	ble.w	8025698 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802533a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802533e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025340:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025344:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025348:	eef0 6a48 	vmov.f32	s13, s16
 802534c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025350:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025354:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025358:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 802535c:	eef0 6a68 	vmov.f32	s13, s17
 8025360:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025364:	ee16 5a90 	vmov	r5, s13
 8025368:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802536c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025370:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025374:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025378:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802537c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025380:	ee18 2a10 	vmov	r2, s16
 8025384:	eeb0 8a47 	vmov.f32	s16, s14
 8025388:	fb92 f3f3 	sdiv	r3, r2, r3
 802538c:	ee18 2a90 	vmov	r2, s17
 8025390:	932f      	str	r3, [sp, #188]	; 0xbc
 8025392:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025394:	eef0 8a67 	vmov.f32	s17, s15
 8025398:	fb92 f3f3 	sdiv	r3, r2, r3
 802539c:	9330      	str	r3, [sp, #192]	; 0xc0
 802539e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80253a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80253a2:	3b01      	subs	r3, #1
 80253a4:	9316      	str	r3, [sp, #88]	; 0x58
 80253a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80253a8:	bf08      	it	eq
 80253aa:	4613      	moveq	r3, r2
 80253ac:	9307      	str	r3, [sp, #28]
 80253ae:	e5f9      	b.n	8024fa4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80253b0:	2800      	cmp	r0, #0
 80253b2:	f43f ae6b 	beq.w	802508c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80253b6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80253ba:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80253be:	9108      	str	r1, [sp, #32]
 80253c0:	0e09      	lsrs	r1, r1, #24
 80253c2:	9110      	str	r1, [sp, #64]	; 0x40
 80253c4:	e662      	b.n	802508c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80253c6:	f113 0801 	adds.w	r8, r3, #1
 80253ca:	f53f af74 	bmi.w	80252b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80253ce:	4541      	cmp	r1, r8
 80253d0:	f6ff af71 	blt.w	80252b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80253d4:	f11c 0801 	adds.w	r8, ip, #1
 80253d8:	f53f af6d 	bmi.w	80252b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80253dc:	45c6      	cmp	lr, r8
 80253de:	f6ff af6a 	blt.w	80252b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80253e2:	b209      	sxth	r1, r1
 80253e4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80253e8:	fa0f f38e 	sxth.w	r3, lr
 80253ec:	9100      	str	r1, [sp, #0]
 80253ee:	4639      	mov	r1, r7
 80253f0:	9301      	str	r3, [sp, #4]
 80253f2:	4633      	mov	r3, r6
 80253f4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80253f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80253fa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80253fc:	f7ff fc4c 	bl	8024c98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8025400:	e759      	b.n	80252b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025402:	bf00      	nop
 8025404:	fffff800 	.word	0xfffff800
 8025408:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802540a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802540e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025410:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025414:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025416:	1427      	asrs	r7, r4, #16
 8025418:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802541a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802541e:	142b      	asrs	r3, r5, #16
 8025420:	fb01 7303 	mla	r3, r1, r3, r7
 8025424:	18e7      	adds	r7, r4, r3
 8025426:	5ce3      	ldrb	r3, [r4, r3]
 8025428:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802542c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025430:	2a00      	cmp	r2, #0
 8025432:	f000 8127 	beq.w	8025684 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8025436:	f897 e001 	ldrb.w	lr, [r7, #1]
 802543a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802543e:	940d      	str	r4, [sp, #52]	; 0x34
 8025440:	0e24      	lsrs	r4, r4, #24
 8025442:	9414      	str	r4, [sp, #80]	; 0x50
 8025444:	b170      	cbz	r0, 8025464 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8025446:	eb07 0e01 	add.w	lr, r7, r1
 802544a:	5c79      	ldrb	r1, [r7, r1]
 802544c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025450:	9109      	str	r1, [sp, #36]	; 0x24
 8025452:	0e09      	lsrs	r1, r1, #24
 8025454:	9111      	str	r1, [sp, #68]	; 0x44
 8025456:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802545a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802545e:	910e      	str	r1, [sp, #56]	; 0x38
 8025460:	0e09      	lsrs	r1, r1, #24
 8025462:	9115      	str	r1, [sp, #84]	; 0x54
 8025464:	b292      	uxth	r2, r2
 8025466:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025468:	b280      	uxth	r0, r0
 802546a:	fb02 f800 	mul.w	r8, r2, r0
 802546e:	0112      	lsls	r2, r2, #4
 8025470:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025474:	eba2 0e08 	sub.w	lr, r2, r8
 8025478:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802547c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802547e:	b280      	uxth	r0, r0
 8025480:	fa1f fe8e 	uxth.w	lr, lr
 8025484:	1a09      	subs	r1, r1, r0
 8025486:	fb0e f202 	mul.w	r2, lr, r2
 802548a:	b289      	uxth	r1, r1
 802548c:	fb01 220c 	mla	r2, r1, ip, r2
 8025490:	fb00 2204 	mla	r2, r0, r4, r2
 8025494:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025496:	fb08 2204 	mla	r2, r8, r4, r2
 802549a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802549e:	2a00      	cmp	r2, #0
 80254a0:	f000 80e5 	beq.w	802566e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80254a4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80254a8:	d019      	beq.n	80254de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 80254aa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80254ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80254b2:	fb0c fa0a 	mul.w	sl, ip, sl
 80254b6:	fb0c fc03 	mul.w	ip, ip, r3
 80254ba:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80254be:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80254c2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80254c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80254ca:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80254ce:	4453      	add	r3, sl
 80254d0:	0a3f      	lsrs	r7, r7, #8
 80254d2:	0a1b      	lsrs	r3, r3, #8
 80254d4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80254d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80254dc:	433b      	orrs	r3, r7
 80254de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80254e0:	2cff      	cmp	r4, #255	; 0xff
 80254e2:	d020      	beq.n	8025526 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 80254e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80254e6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80254ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80254ec:	4367      	muls	r7, r4
 80254ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80254f0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80254f4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80254f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80254fa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80254fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025502:	fb04 fa0a 	mul.w	sl, r4, sl
 8025506:	44bc      	add	ip, r7
 8025508:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802550c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025510:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025514:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025518:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802551c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025520:	ea4c 040a 	orr.w	r4, ip, sl
 8025524:	940d      	str	r4, [sp, #52]	; 0x34
 8025526:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025528:	2cff      	cmp	r4, #255	; 0xff
 802552a:	d020      	beq.n	802556e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 802552c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802552e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025532:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025534:	4367      	muls	r7, r4
 8025536:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025538:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802553c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025540:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025542:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025546:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802554a:	fb04 fa0a 	mul.w	sl, r4, sl
 802554e:	44bc      	add	ip, r7
 8025550:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025554:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025558:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802555c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025560:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025564:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025568:	ea4c 040a 	orr.w	r4, ip, sl
 802556c:	9409      	str	r4, [sp, #36]	; 0x24
 802556e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025570:	2cff      	cmp	r4, #255	; 0xff
 8025572:	d020      	beq.n	80255b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 8025574:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025576:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802557a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802557c:	4367      	muls	r7, r4
 802557e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025580:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025584:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025588:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802558a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802558e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025592:	fb04 fa0a 	mul.w	sl, r4, sl
 8025596:	44bc      	add	ip, r7
 8025598:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802559c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80255a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80255a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80255a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80255ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80255b0:	ea4c 040a 	orr.w	r4, ip, sl
 80255b4:	940e      	str	r4, [sp, #56]	; 0x38
 80255b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80255b8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80255bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80255c0:	43d2      	mvns	r2, r2
 80255c2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80255c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80255c8:	b2d2      	uxtb	r2, r2
 80255ca:	fb0e f707 	mul.w	r7, lr, r7
 80255ce:	fb01 770c 	mla	r7, r1, ip, r7
 80255d2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80255d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80255d8:	fb00 770c 	mla	r7, r0, ip, r7
 80255dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80255e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80255e2:	fb08 770c 	mla	r7, r8, ip, r7
 80255e6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80255ea:	fb0e fe0c 	mul.w	lr, lr, ip
 80255ee:	0a3f      	lsrs	r7, r7, #8
 80255f0:	fb01 e303 	mla	r3, r1, r3, lr
 80255f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80255f6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80255fa:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80255fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025600:	fb00 330a 	mla	r3, r0, sl, r3
 8025604:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025608:	fb08 3c0c 	mla	ip, r8, ip, r3
 802560c:	f8b9 3000 	ldrh.w	r3, [r9]
 8025610:	1218      	asrs	r0, r3, #8
 8025612:	10d9      	asrs	r1, r3, #3
 8025614:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025618:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802561c:	00db      	lsls	r3, r3, #3
 802561e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025622:	4350      	muls	r0, r2
 8025624:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025628:	b2db      	uxtb	r3, r3
 802562a:	4351      	muls	r1, r2
 802562c:	ea47 070c 	orr.w	r7, r7, ip
 8025630:	4353      	muls	r3, r2
 8025632:	1c42      	adds	r2, r0, #1
 8025634:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025638:	0c3a      	lsrs	r2, r7, #16
 802563a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802563e:	4a19      	ldr	r2, [pc, #100]	; (80256a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8025640:	b2c0      	uxtb	r0, r0
 8025642:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8025646:	1c4a      	adds	r2, r1, #1
 8025648:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802564c:	0a3a      	lsrs	r2, r7, #8
 802564e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025652:	00c9      	lsls	r1, r1, #3
 8025654:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025658:	4301      	orrs	r1, r0
 802565a:	1c58      	adds	r0, r3, #1
 802565c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025660:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025664:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8025668:	4308      	orrs	r0, r1
 802566a:	f8a9 0000 	strh.w	r0, [r9]
 802566e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025670:	f109 0902 	add.w	r9, r9, #2
 8025674:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025676:	f10b 3bff 	add.w	fp, fp, #4294967295
 802567a:	441a      	add	r2, r3
 802567c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802567e:	922d      	str	r2, [sp, #180]	; 0xb4
 8025680:	441d      	add	r5, r3
 8025682:	e64c      	b.n	802531e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8025684:	2800      	cmp	r0, #0
 8025686:	f43f aeed 	beq.w	8025464 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802568a:	5c79      	ldrb	r1, [r7, r1]
 802568c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025690:	9109      	str	r1, [sp, #36]	; 0x24
 8025692:	0e09      	lsrs	r1, r1, #24
 8025694:	9111      	str	r1, [sp, #68]	; 0x44
 8025696:	e6e5      	b.n	8025464 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8025698:	b01b      	add	sp, #108	; 0x6c
 802569a:	ecbd 8b08 	vpop	{d8-d11}
 802569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256a2:	bf00      	nop
 80256a4:	fffff800 	.word	0xfffff800

080256a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80256a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256ac:	b085      	sub	sp, #20
 80256ae:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80256b2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80256b6:	9103      	str	r1, [sp, #12]
 80256b8:	2d00      	cmp	r5, #0
 80256ba:	fb05 7106 	mla	r1, r5, r6, r7
 80256be:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80256c2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80256c6:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 80256ca:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80256ce:	eb03 0901 	add.w	r9, r3, r1
 80256d2:	9401      	str	r4, [sp, #4]
 80256d4:	f2c0 80c0 	blt.w	8025858 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80256d8:	45a8      	cmp	r8, r5
 80256da:	f340 80bd 	ble.w	8025858 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80256de:	2f00      	cmp	r7, #0
 80256e0:	f2c0 80b6 	blt.w	8025850 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80256e4:	42be      	cmp	r6, r7
 80256e6:	f340 80b3 	ble.w	8025850 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80256ea:	f813 c001 	ldrb.w	ip, [r3, r1]
 80256ee:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80256f2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80256f6:	d019      	beq.n	802572c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 80256f8:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80256fc:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025700:	435a      	muls	r2, r3
 8025702:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8025706:	f64f 011f 	movw	r1, #63519	; 0xf81f
 802570a:	fb0c f403 	mul.w	r4, ip, r3
 802570e:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8025712:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025716:	441a      	add	r2, r3
 8025718:	f104 0320 	add.w	r3, r4, #32
 802571c:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8025720:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8025724:	0a1b      	lsrs	r3, r3, #8
 8025726:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802572a:	4319      	orrs	r1, r3
 802572c:	b289      	uxth	r1, r1
 802572e:	1c7b      	adds	r3, r7, #1
 8025730:	f100 8097 	bmi.w	8025862 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8025734:	429e      	cmp	r6, r3
 8025736:	f340 8094 	ble.w	8025862 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 802573a:	2800      	cmp	r0, #0
 802573c:	f000 8094 	beq.w	8025868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8025740:	f899 4001 	ldrb.w	r4, [r9, #1]
 8025744:	9b01      	ldr	r3, [sp, #4]
 8025746:	2cff      	cmp	r4, #255	; 0xff
 8025748:	885b      	ldrh	r3, [r3, #2]
 802574a:	d01b      	beq.n	8025784 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 802574c:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8025750:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8025754:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025758:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802575c:	fb0a f202 	mul.w	r2, sl, r2
 8025760:	fb04 fa03 	mul.w	sl, r4, r3
 8025764:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8025768:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802576c:	441a      	add	r2, r3
 802576e:	f10a 0320 	add.w	r3, sl, #32
 8025772:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025776:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802577a:	0a1b      	lsrs	r3, r3, #8
 802577c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025780:	ea4b 0303 	orr.w	r3, fp, r3
 8025784:	b29b      	uxth	r3, r3
 8025786:	3501      	adds	r5, #1
 8025788:	d474      	bmi.n	8025874 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802578a:	45a8      	cmp	r8, r5
 802578c:	dd72      	ble.n	8025874 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802578e:	f1be 0f00 	cmp.w	lr, #0
 8025792:	f000 8120 	beq.w	80259d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8025796:	2f00      	cmp	r7, #0
 8025798:	db69      	blt.n	802586e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802579a:	42be      	cmp	r6, r7
 802579c:	dd67      	ble.n	802586e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802579e:	f819 5006 	ldrb.w	r5, [r9, r6]
 80257a2:	9a01      	ldr	r2, [sp, #4]
 80257a4:	2dff      	cmp	r5, #255	; 0xff
 80257a6:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80257aa:	d01c      	beq.n	80257e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 80257ac:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80257b0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80257b4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80257b8:	fb08 f802 	mul.w	r8, r8, r2
 80257bc:	fb05 fa0b 	mul.w	sl, r5, fp
 80257c0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80257c4:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80257c8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80257cc:	4490      	add	r8, r2
 80257ce:	f10a 0220 	add.w	r2, sl, #32
 80257d2:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80257d6:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80257da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80257de:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80257e2:	ea4b 0b0a 	orr.w	fp, fp, sl
 80257e6:	fa1f fb8b 	uxth.w	fp, fp
 80257ea:	3701      	adds	r7, #1
 80257ec:	d447      	bmi.n	802587e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80257ee:	42be      	cmp	r6, r7
 80257f0:	dd45      	ble.n	802587e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80257f2:	2800      	cmp	r0, #0
 80257f4:	d046      	beq.n	8025884 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 80257f6:	3601      	adds	r6, #1
 80257f8:	9a01      	ldr	r2, [sp, #4]
 80257fa:	f819 7006 	ldrb.w	r7, [r9, r6]
 80257fe:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8025802:	2fff      	cmp	r7, #255	; 0xff
 8025804:	d01a      	beq.n	802583c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8025806:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 802580a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802580e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025812:	fb08 f806 	mul.w	r8, r8, r6
 8025816:	fb07 f902 	mul.w	r9, r7, r2
 802581a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802581e:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8025822:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025826:	44b0      	add	r8, r6
 8025828:	f109 0620 	add.w	r6, r9, #32
 802582c:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8025830:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025834:	0a36      	lsrs	r6, r6, #8
 8025836:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802583a:	4332      	orrs	r2, r6
 802583c:	b292      	uxth	r2, r2
 802583e:	280f      	cmp	r0, #15
 8025840:	d922      	bls.n	8025888 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8025842:	4b69      	ldr	r3, [pc, #420]	; (80259e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8025844:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025848:	4a68      	ldr	r2, [pc, #416]	; (80259ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 802584a:	4869      	ldr	r0, [pc, #420]	; (80259f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 802584c:	f004 fa50 	bl	8029cf0 <__assert_func>
 8025850:	f04f 0c00 	mov.w	ip, #0
 8025854:	4661      	mov	r1, ip
 8025856:	e76a      	b.n	802572e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8025858:	2400      	movs	r4, #0
 802585a:	46a4      	mov	ip, r4
 802585c:	4623      	mov	r3, r4
 802585e:	4621      	mov	r1, r4
 8025860:	e791      	b.n	8025786 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025862:	2400      	movs	r4, #0
 8025864:	4623      	mov	r3, r4
 8025866:	e78e      	b.n	8025786 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025868:	4604      	mov	r4, r0
 802586a:	4603      	mov	r3, r0
 802586c:	e78b      	b.n	8025786 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802586e:	2500      	movs	r5, #0
 8025870:	46ab      	mov	fp, r5
 8025872:	e7ba      	b.n	80257ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8025874:	2700      	movs	r7, #0
 8025876:	463d      	mov	r5, r7
 8025878:	463a      	mov	r2, r7
 802587a:	46bb      	mov	fp, r7
 802587c:	e7df      	b.n	802583e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 802587e:	2700      	movs	r7, #0
 8025880:	463a      	mov	r2, r7
 8025882:	e7dc      	b.n	802583e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8025884:	4607      	mov	r7, r0
 8025886:	4602      	mov	r2, r0
 8025888:	f1be 0f0f 	cmp.w	lr, #15
 802588c:	d8d9      	bhi.n	8025842 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 802588e:	b286      	uxth	r6, r0
 8025890:	fa1f f98e 	uxth.w	r9, lr
 8025894:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025898:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802589c:	fb06 f809 	mul.w	r8, r6, r9
 80258a0:	0136      	lsls	r6, r6, #4
 80258a2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80258a6:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80258aa:	9601      	str	r6, [sp, #4]
 80258ac:	ea4a 0101 	orr.w	r1, sl, r1
 80258b0:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 80258b4:	fa1f f689 	uxth.w	r6, r9
 80258b8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80258bc:	fb10 f90e 	smulbb	r9, r0, lr
 80258c0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80258c4:	9602      	str	r6, [sp, #8]
 80258c6:	460e      	mov	r6, r1
 80258c8:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80258cc:	f1ce 0110 	rsb	r1, lr, #16
 80258d0:	ea4a 0303 	orr.w	r3, sl, r3
 80258d4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80258d8:	1a09      	subs	r1, r1, r0
 80258da:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80258de:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80258e2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80258e6:	4343      	muls	r3, r0
 80258e8:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80258ec:	9801      	ldr	r0, [sp, #4]
 80258ee:	ea4a 0202 	orr.w	r2, sl, r2
 80258f2:	fb01 3106 	mla	r1, r1, r6, r3
 80258f6:	9e02      	ldr	r6, [sp, #8]
 80258f8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80258fc:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8025900:	fb09 1302 	mla	r3, r9, r2, r1
 8025904:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025908:	1b80      	subs	r0, r0, r6
 802590a:	9e01      	ldr	r6, [sp, #4]
 802590c:	9a03      	ldr	r2, [sp, #12]
 802590e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025912:	eba6 0608 	sub.w	r6, r6, r8
 8025916:	b280      	uxth	r0, r0
 8025918:	8811      	ldrh	r1, [r2, #0]
 802591a:	ea4a 0b0b 	orr.w	fp, sl, fp
 802591e:	b2b6      	uxth	r6, r6
 8025920:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8025924:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025928:	4374      	muls	r4, r6
 802592a:	b292      	uxth	r2, r2
 802592c:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8025930:	fb0c 4400 	mla	r4, ip, r0, r4
 8025934:	9802      	ldr	r0, [sp, #8]
 8025936:	ea4f 535e 	mov.w	r3, lr, lsr #21
 802593a:	fb00 4505 	mla	r5, r0, r5, r4
 802593e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025942:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025946:	1208      	asrs	r0, r1, #8
 8025948:	fb08 5707 	mla	r7, r8, r7, r5
 802594c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025950:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025954:	10cd      	asrs	r5, r1, #3
 8025956:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802595a:	ea43 0e0e 	orr.w	lr, r3, lr
 802595e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025962:	4357      	muls	r7, r2
 8025964:	fa1f f38e 	uxth.w	r3, lr
 8025968:	f107 0801 	add.w	r8, r7, #1
 802596c:	121c      	asrs	r4, r3, #8
 802596e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8025972:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025976:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802597a:	b2ff      	uxtb	r7, r7
 802597c:	fb10 f007 	smulbb	r0, r0, r7
 8025980:	fb15 f507 	smulbb	r5, r5, r7
 8025984:	fb04 0402 	mla	r4, r4, r2, r0
 8025988:	10d8      	asrs	r0, r3, #3
 802598a:	00db      	lsls	r3, r3, #3
 802598c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025990:	b2a4      	uxth	r4, r4
 8025992:	fb00 5002 	mla	r0, r0, r2, r5
 8025996:	b2dd      	uxtb	r5, r3
 8025998:	00cb      	lsls	r3, r1, #3
 802599a:	b280      	uxth	r0, r0
 802599c:	b2db      	uxtb	r3, r3
 802599e:	fb13 f307 	smulbb	r3, r3, r7
 80259a2:	fb05 3202 	mla	r2, r5, r2, r3
 80259a6:	1c63      	adds	r3, r4, #1
 80259a8:	b292      	uxth	r2, r2
 80259aa:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80259ae:	1c53      	adds	r3, r2, #1
 80259b0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80259b4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80259b8:	1c42      	adds	r2, r0, #1
 80259ba:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80259be:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80259c2:	9a03      	ldr	r2, [sp, #12]
 80259c4:	0940      	lsrs	r0, r0, #5
 80259c6:	4323      	orrs	r3, r4
 80259c8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80259cc:	4303      	orrs	r3, r0
 80259ce:	8013      	strh	r3, [r2, #0]
 80259d0:	b005      	add	sp, #20
 80259d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259d6:	280f      	cmp	r0, #15
 80259d8:	f63f af33 	bhi.w	8025842 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80259dc:	4677      	mov	r7, lr
 80259de:	4675      	mov	r5, lr
 80259e0:	4672      	mov	r2, lr
 80259e2:	46f3      	mov	fp, lr
 80259e4:	e753      	b.n	802588e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 80259e6:	bf00      	nop
 80259e8:	0802e369 	.word	0x0802e369
 80259ec:	0802e936 	.word	0x0802e936
 80259f0:	0802e3ed 	.word	0x0802e3ed

080259f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80259f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259f8:	ed2d 8b08 	vpush	{d8-d11}
 80259fc:	b097      	sub	sp, #92	; 0x5c
 80259fe:	eeb0 aa40 	vmov.f32	s20, s0
 8025a02:	eef0 9a60 	vmov.f32	s19, s1
 8025a06:	9214      	str	r2, [sp, #80]	; 0x50
 8025a08:	eeb0 9a41 	vmov.f32	s18, s2
 8025a0c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025a0e:	eeb0 8a62 	vmov.f32	s16, s5
 8025a12:	9308      	str	r3, [sp, #32]
 8025a14:	eef0 8a43 	vmov.f32	s17, s6
 8025a18:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025a1c:	eef0 ba44 	vmov.f32	s23, s8
 8025a20:	9015      	str	r0, [sp, #84]	; 0x54
 8025a22:	eeb0 ba64 	vmov.f32	s22, s9
 8025a26:	9312      	str	r3, [sp, #72]	; 0x48
 8025a28:	eef0 aa45 	vmov.f32	s21, s10
 8025a2c:	6850      	ldr	r0, [r2, #4]
 8025a2e:	9111      	str	r1, [sp, #68]	; 0x44
 8025a30:	6812      	ldr	r2, [r2, #0]
 8025a32:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025a36:	fb00 1303 	mla	r3, r0, r3, r1
 8025a3a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8025a40:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025a42:	681b      	ldr	r3, [r3, #0]
 8025a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8025a46:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025a48:	685b      	ldr	r3, [r3, #4]
 8025a4a:	930c      	str	r3, [sp, #48]	; 0x30
 8025a4c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8025a50:	930a      	str	r3, [sp, #40]	; 0x28
 8025a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025a54:	2b00      	cmp	r3, #0
 8025a56:	dc03      	bgt.n	8025a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025a58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	f340 83cd 	ble.w	80261fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8025a60:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025a62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025a66:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025a6a:	1e48      	subs	r0, r1, #1
 8025a6c:	1e55      	subs	r5, r2, #1
 8025a6e:	9b08      	ldr	r3, [sp, #32]
 8025a70:	2b00      	cmp	r3, #0
 8025a72:	f340 81a5 	ble.w	8025dc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025a76:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8025a78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025a7a:	1436      	asrs	r6, r6, #16
 8025a7c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025a80:	d406      	bmi.n	8025a90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025a82:	4286      	cmp	r6, r0
 8025a84:	da04      	bge.n	8025a90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025a86:	2b00      	cmp	r3, #0
 8025a88:	db02      	blt.n	8025a90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025a8a:	42ab      	cmp	r3, r5
 8025a8c:	f2c0 8199 	blt.w	8025dc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8025a90:	3601      	adds	r6, #1
 8025a92:	f100 8186 	bmi.w	8025da2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025a96:	42b1      	cmp	r1, r6
 8025a98:	f2c0 8183 	blt.w	8025da2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025a9c:	3301      	adds	r3, #1
 8025a9e:	f100 8180 	bmi.w	8025da2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025aa2:	429a      	cmp	r2, r3
 8025aa4:	f2c0 817d 	blt.w	8025da2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025aa8:	9b08      	ldr	r3, [sp, #32]
 8025aaa:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025aae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025ab0:	9313      	str	r3, [sp, #76]	; 0x4c
 8025ab2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025ab4:	2b00      	cmp	r3, #0
 8025ab6:	f340 81a6 	ble.w	8025e06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8025aba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025abc:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8025abe:	1418      	asrs	r0, r3, #16
 8025ac0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025ac2:	142d      	asrs	r5, r5, #16
 8025ac4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025ac8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025aca:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025ace:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025ad0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025ad4:	f100 81fa 	bmi.w	8025ecc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025ad8:	f102 3eff 	add.w	lr, r2, #4294967295
 8025adc:	4575      	cmp	r5, lr
 8025ade:	f280 81f5 	bge.w	8025ecc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025ae2:	2800      	cmp	r0, #0
 8025ae4:	f2c0 81f2 	blt.w	8025ecc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025ae8:	f103 3eff 	add.w	lr, r3, #4294967295
 8025aec:	4570      	cmp	r0, lr
 8025aee:	f280 81ed 	bge.w	8025ecc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025af2:	b212      	sxth	r2, r2
 8025af4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025af6:	fa1f fe81 	uxth.w	lr, r1
 8025afa:	fb00 5002 	mla	r0, r0, r2, r5
 8025afe:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025b02:	eb03 0a00 	add.w	sl, r3, r0
 8025b06:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025b0a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025b0e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025b12:	b29b      	uxth	r3, r3
 8025b14:	f1bc 0f00 	cmp.w	ip, #0
 8025b18:	f000 81bb 	beq.w	8025e92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025b1c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025b20:	eb0a 0b02 	add.w	fp, sl, r2
 8025b24:	fa1f fa8c 	uxth.w	sl, ip
 8025b28:	940d      	str	r4, [sp, #52]	; 0x34
 8025b2a:	fb0a fe0e 	mul.w	lr, sl, lr
 8025b2e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025b32:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025b36:	eba5 050e 	sub.w	r5, r5, lr
 8025b3a:	940e      	str	r4, [sp, #56]	; 0x38
 8025b3c:	fa1f fa8a 	uxth.w	sl, sl
 8025b40:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025b42:	b2ad      	uxth	r5, r5
 8025b44:	eba3 030a 	sub.w	r3, r3, sl
 8025b48:	fb08 f505 	mul.w	r5, r8, r5
 8025b4c:	b29b      	uxth	r3, r3
 8025b4e:	fb09 5303 	mla	r3, r9, r3, r5
 8025b52:	fb0a 3304 	mla	r3, sl, r4, r3
 8025b56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025b58:	fb0e 3304 	mla	r3, lr, r4, r3
 8025b5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025b60:	2b00      	cmp	r3, #0
 8025b62:	f000 8111 	beq.w	8025d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025b66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025b68:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025b6c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025b70:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025b74:	f000 8192 	beq.w	8025e9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8025b78:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025b7c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025b80:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025b84:	fb0a fe0e 	mul.w	lr, sl, lr
 8025b88:	fb09 f000 	mul.w	r0, r9, r0
 8025b8c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025b90:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025b94:	f100 0b20 	add.w	fp, r0, #32
 8025b98:	44ce      	add	lr, r9
 8025b9a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025b9e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025ba2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ba6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025baa:	ea4e 0909 	orr.w	r9, lr, r9
 8025bae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025bb2:	8868      	ldrh	r0, [r5, #2]
 8025bb4:	d019      	beq.n	8025bea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8025bb6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025bba:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025bbe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025bc2:	fb0a fe0e 	mul.w	lr, sl, lr
 8025bc6:	fb08 f800 	mul.w	r8, r8, r0
 8025bca:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025bce:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025bd2:	f108 0b20 	add.w	fp, r8, #32
 8025bd6:	4486      	add	lr, r0
 8025bd8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025bdc:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025be0:	0a00      	lsrs	r0, r0, #8
 8025be2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025be6:	ea4e 0000 	orr.w	r0, lr, r0
 8025bea:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025bee:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025bf2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025bf6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025bfa:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025bfe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025c02:	ea4e 0909 	orr.w	r9, lr, r9
 8025c06:	ea4a 0000 	orr.w	r0, sl, r0
 8025c0a:	f1bc 0f00 	cmp.w	ip, #0
 8025c0e:	f000 8147 	beq.w	8025ea0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8025c12:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025c16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025c18:	3a01      	subs	r2, #1
 8025c1a:	2cff      	cmp	r4, #255	; 0xff
 8025c1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025c20:	f102 0202 	add.w	r2, r2, #2
 8025c24:	eb05 0e02 	add.w	lr, r5, r2
 8025c28:	5aaa      	ldrh	r2, [r5, r2]
 8025c2a:	d018      	beq.n	8025c5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8025c2c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025c30:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025c34:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025c38:	fb04 fa02 	mul.w	sl, r4, r2
 8025c3c:	fb08 f805 	mul.w	r8, r8, r5
 8025c40:	f10a 0520 	add.w	r5, sl, #32
 8025c44:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025c48:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025c4c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025c50:	4442      	add	r2, r8
 8025c52:	0a2d      	lsrs	r5, r5, #8
 8025c54:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025c58:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025c5c:	432a      	orrs	r2, r5
 8025c5e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025c60:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025c64:	2cff      	cmp	r4, #255	; 0xff
 8025c66:	d01a      	beq.n	8025c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8025c68:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025c6c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025c70:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025c74:	fb04 fa05 	mul.w	sl, r4, r5
 8025c78:	fb08 f80e 	mul.w	r8, r8, lr
 8025c7c:	f10a 0e20 	add.w	lr, sl, #32
 8025c80:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025c84:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025c88:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025c8c:	4445      	add	r5, r8
 8025c8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025c92:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025c96:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025c9a:	ea45 050e 	orr.w	r5, r5, lr
 8025c9e:	fb1c fe01 	smulbb	lr, ip, r1
 8025ca2:	f1cc 0810 	rsb	r8, ip, #16
 8025ca6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025caa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025cae:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025cb2:	eba8 0801 	sub.w	r8, r8, r1
 8025cb6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025cba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025cbe:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025cc2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025cc6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025cca:	ea4a 0202 	orr.w	r2, sl, r2
 8025cce:	4341      	muls	r1, r0
 8025cd0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025cd4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025cd8:	fb09 1108 	mla	r1, r9, r8, r1
 8025cdc:	ea4b 0505 	orr.w	r5, fp, r5
 8025ce0:	fb0c 1102 	mla	r1, ip, r2, r1
 8025ce4:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025ce8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025cec:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025cf0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025cf4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025cf8:	ea42 0e0e 	orr.w	lr, r2, lr
 8025cfc:	fa1f f28e 	uxth.w	r2, lr
 8025d00:	2bff      	cmp	r3, #255	; 0xff
 8025d02:	d103      	bne.n	8025d0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025d04:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025d06:	29ff      	cmp	r1, #255	; 0xff
 8025d08:	f000 80de 	beq.w	8025ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8025d0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025d0e:	1215      	asrs	r5, r2, #8
 8025d10:	8838      	ldrh	r0, [r7, #0]
 8025d12:	434b      	muls	r3, r1
 8025d14:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025d18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025d1a:	f103 0c01 	add.w	ip, r3, #1
 8025d1e:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8025d22:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025d26:	fa5f fc83 	uxtb.w	ip, r3
 8025d2a:	1203      	asrs	r3, r0, #8
 8025d2c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025d30:	fb13 f30c 	smulbb	r3, r3, ip
 8025d34:	fb05 3501 	mla	r5, r5, r1, r3
 8025d38:	10c3      	asrs	r3, r0, #3
 8025d3a:	10d1      	asrs	r1, r2, #3
 8025d3c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025d40:	00d2      	lsls	r2, r2, #3
 8025d42:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025d46:	b2ad      	uxth	r5, r5
 8025d48:	fb13 f30c 	smulbb	r3, r3, ip
 8025d4c:	b2d2      	uxtb	r2, r2
 8025d4e:	fb01 3104 	mla	r1, r1, r4, r3
 8025d52:	00c3      	lsls	r3, r0, #3
 8025d54:	b2db      	uxtb	r3, r3
 8025d56:	b289      	uxth	r1, r1
 8025d58:	fb13 f30c 	smulbb	r3, r3, ip
 8025d5c:	fb02 3304 	mla	r3, r2, r4, r3
 8025d60:	b29a      	uxth	r2, r3
 8025d62:	1c6b      	adds	r3, r5, #1
 8025d64:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025d68:	1c53      	adds	r3, r2, #1
 8025d6a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025d6e:	1c4a      	adds	r2, r1, #1
 8025d70:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025d74:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025d78:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025d7c:	0949      	lsrs	r1, r1, #5
 8025d7e:	432b      	orrs	r3, r5
 8025d80:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025d84:	430b      	orrs	r3, r1
 8025d86:	803b      	strh	r3, [r7, #0]
 8025d88:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025d8a:	3702      	adds	r7, #2
 8025d8c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025d8e:	4413      	add	r3, r2
 8025d90:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025d92:	9329      	str	r3, [sp, #164]	; 0xa4
 8025d94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025d96:	441a      	add	r2, r3
 8025d98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025d9a:	3b01      	subs	r3, #1
 8025d9c:	922a      	str	r2, [sp, #168]	; 0xa8
 8025d9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8025da0:	e687      	b.n	8025ab2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8025da2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025da4:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8025da6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8025da8:	4433      	add	r3, r6
 8025daa:	9329      	str	r3, [sp, #164]	; 0xa4
 8025dac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025dae:	441c      	add	r4, r3
 8025db0:	9b08      	ldr	r3, [sp, #32]
 8025db2:	3b01      	subs	r3, #1
 8025db4:	942a      	str	r4, [sp, #168]	; 0xa8
 8025db6:	9308      	str	r3, [sp, #32]
 8025db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025dba:	3302      	adds	r3, #2
 8025dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8025dbe:	e656      	b.n	8025a6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025dc0:	d028      	beq.n	8025e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8025dc2:	9b08      	ldr	r3, [sp, #32]
 8025dc4:	982b      	ldr	r0, [sp, #172]	; 0xac
 8025dc6:	3b01      	subs	r3, #1
 8025dc8:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8025dca:	fb00 5003 	mla	r0, r0, r3, r5
 8025dce:	1400      	asrs	r0, r0, #16
 8025dd0:	f53f ae6a 	bmi.w	8025aa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025dd4:	3901      	subs	r1, #1
 8025dd6:	4288      	cmp	r0, r1
 8025dd8:	f6bf ae66 	bge.w	8025aa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025ddc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8025dde:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8025de0:	fb01 0303 	mla	r3, r1, r3, r0
 8025de4:	141b      	asrs	r3, r3, #16
 8025de6:	f53f ae5f 	bmi.w	8025aa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025dea:	3a01      	subs	r2, #1
 8025dec:	4293      	cmp	r3, r2
 8025dee:	f6bf ae5b 	bge.w	8025aa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025df2:	9b08      	ldr	r3, [sp, #32]
 8025df4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025df8:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8025dfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8025dfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025e00:	2b00      	cmp	r3, #0
 8025e02:	f300 8082 	bgt.w	8025f0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8025e06:	9b08      	ldr	r3, [sp, #32]
 8025e08:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025e0e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025e12:	9309      	str	r3, [sp, #36]	; 0x24
 8025e14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025e16:	2b00      	cmp	r3, #0
 8025e18:	f340 81ef 	ble.w	80261fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8025e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025e20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e22:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025e26:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025e2a:	eef0 6a48 	vmov.f32	s13, s16
 8025e2e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025e32:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025e36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025e3a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025e3e:	eef0 6a68 	vmov.f32	s13, s17
 8025e42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025e46:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8025e4a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025e4e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025e52:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025e56:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025e5a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025e5e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025e62:	ee18 2a10 	vmov	r2, s16
 8025e66:	eeb0 8a47 	vmov.f32	s16, s14
 8025e6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025e6e:	ee18 2a90 	vmov	r2, s17
 8025e72:	932b      	str	r3, [sp, #172]	; 0xac
 8025e74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e76:	eef0 8a67 	vmov.f32	s17, s15
 8025e7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025e7e:	932c      	str	r3, [sp, #176]	; 0xb0
 8025e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025e82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025e84:	3b01      	subs	r3, #1
 8025e86:	9311      	str	r3, [sp, #68]	; 0x44
 8025e88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e8a:	bf08      	it	eq
 8025e8c:	4613      	moveq	r3, r2
 8025e8e:	9308      	str	r3, [sp, #32]
 8025e90:	e5df      	b.n	8025a52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8025e92:	fb08 f505 	mul.w	r5, r8, r5
 8025e96:	fb09 5303 	mla	r3, r9, r3, r5
 8025e9a:	e65f      	b.n	8025b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8025e9c:	4681      	mov	r9, r0
 8025e9e:	e686      	b.n	8025bae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025ea0:	f1c1 0210 	rsb	r2, r1, #16
 8025ea4:	4341      	muls	r1, r0
 8025ea6:	fb09 1902 	mla	r9, r9, r2, r1
 8025eaa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025eae:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025eb2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025eb6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025eba:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025ebe:	ea42 0909 	orr.w	r9, r2, r9
 8025ec2:	fa1f f289 	uxth.w	r2, r9
 8025ec6:	e71b      	b.n	8025d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8025ec8:	803a      	strh	r2, [r7, #0]
 8025eca:	e75d      	b.n	8025d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025ecc:	f115 0e01 	adds.w	lr, r5, #1
 8025ed0:	f53f af5a 	bmi.w	8025d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025ed4:	4572      	cmp	r2, lr
 8025ed6:	f6ff af57 	blt.w	8025d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025eda:	f110 0e01 	adds.w	lr, r0, #1
 8025ede:	f53f af53 	bmi.w	8025d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025ee2:	4573      	cmp	r3, lr
 8025ee4:	f6ff af50 	blt.w	8025d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025ee8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025eea:	b21b      	sxth	r3, r3
 8025eec:	b212      	sxth	r2, r2
 8025eee:	9502      	str	r5, [sp, #8]
 8025ef0:	9301      	str	r3, [sp, #4]
 8025ef2:	9200      	str	r2, [sp, #0]
 8025ef4:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8025ef8:	e9cd c405 	strd	ip, r4, [sp, #20]
 8025efc:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8025f00:	4639      	mov	r1, r7
 8025f02:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025f04:	f7ff fbd0 	bl	80256a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8025f08:	e73e      	b.n	8025d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025f0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025f0c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025f10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025f12:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025f16:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025f18:	fa1f fc82 	uxth.w	ip, r2
 8025f1c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f20:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025f22:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025f26:	141f      	asrs	r7, r3, #16
 8025f28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025f2a:	141b      	asrs	r3, r3, #16
 8025f2c:	fb01 3707 	mla	r7, r1, r7, r3
 8025f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025f32:	eb03 0a07 	add.w	sl, r3, r7
 8025f36:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025f3a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025f3e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025f42:	b29b      	uxth	r3, r3
 8025f44:	2d00      	cmp	r5, #0
 8025f46:	f000 813d 	beq.w	80261c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8025f4a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025f4e:	eb0a 0b01 	add.w	fp, sl, r1
 8025f52:	fa1f fa85 	uxth.w	sl, r5
 8025f56:	940f      	str	r4, [sp, #60]	; 0x3c
 8025f58:	fb0a fc0c 	mul.w	ip, sl, ip
 8025f5c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025f60:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025f64:	eba0 000c 	sub.w	r0, r0, ip
 8025f68:	9410      	str	r4, [sp, #64]	; 0x40
 8025f6a:	fa1f fa8a 	uxth.w	sl, sl
 8025f6e:	b280      	uxth	r0, r0
 8025f70:	eba3 030a 	sub.w	r3, r3, sl
 8025f74:	fb08 f000 	mul.w	r0, r8, r0
 8025f78:	b29b      	uxth	r3, r3
 8025f7a:	fb09 0303 	mla	r3, r9, r3, r0
 8025f7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025f80:	fb0a 3300 	mla	r3, sl, r0, r3
 8025f84:	fb0c 3304 	mla	r3, ip, r4, r3
 8025f88:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025f8c:	2b00      	cmp	r3, #0
 8025f8e:	f000 810b 	beq.w	80261a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8025f92:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025f94:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025f98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025f9a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025f9e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025fa2:	f000 8114 	beq.w	80261ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8025fa6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025faa:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025fae:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025fb2:	fb0a fc0c 	mul.w	ip, sl, ip
 8025fb6:	fb09 f707 	mul.w	r7, r9, r7
 8025fba:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025fbe:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025fc2:	f107 0b20 	add.w	fp, r7, #32
 8025fc6:	44cc      	add	ip, r9
 8025fc8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025fcc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025fd0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025fd4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025fd8:	ea4c 0909 	orr.w	r9, ip, r9
 8025fdc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025fe0:	8847      	ldrh	r7, [r0, #2]
 8025fe2:	d019      	beq.n	8026018 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8025fe4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025fe8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025fec:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025ff0:	fb0a fc0c 	mul.w	ip, sl, ip
 8025ff4:	fb08 f807 	mul.w	r8, r8, r7
 8025ff8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025ffc:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026000:	f108 0b20 	add.w	fp, r8, #32
 8026004:	44bc      	add	ip, r7
 8026006:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802600a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802600e:	0a3f      	lsrs	r7, r7, #8
 8026010:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026014:	ea4c 0707 	orr.w	r7, ip, r7
 8026018:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802601c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026020:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026024:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026028:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802602c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026030:	ea4c 0909 	orr.w	r9, ip, r9
 8026034:	ea4a 0707 	orr.w	r7, sl, r7
 8026038:	2d00      	cmp	r5, #0
 802603a:	f000 80ca 	beq.w	80261d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 802603e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026042:	3901      	subs	r1, #1
 8026044:	0049      	lsls	r1, r1, #1
 8026046:	3102      	adds	r1, #2
 8026048:	eb00 0c01 	add.w	ip, r0, r1
 802604c:	5a41      	ldrh	r1, [r0, r1]
 802604e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026050:	28ff      	cmp	r0, #255	; 0xff
 8026052:	d019      	beq.n	8026088 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8026054:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8026058:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802605a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802605e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026062:	fb04 fa01 	mul.w	sl, r4, r1
 8026066:	fb08 f800 	mul.w	r8, r8, r0
 802606a:	f10a 0020 	add.w	r0, sl, #32
 802606e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026072:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026076:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802607a:	4441      	add	r1, r8
 802607c:	0a00      	lsrs	r0, r0, #8
 802607e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026082:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026086:	4301      	orrs	r1, r0
 8026088:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802608a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802608e:	2cff      	cmp	r4, #255	; 0xff
 8026090:	d01a      	beq.n	80260c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8026092:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8026096:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802609a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802609e:	fb04 fa00 	mul.w	sl, r4, r0
 80260a2:	fb08 f80c 	mul.w	r8, r8, ip
 80260a6:	f10a 0c20 	add.w	ip, sl, #32
 80260aa:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80260ae:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80260b2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80260b6:	4440      	add	r0, r8
 80260b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80260bc:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80260c0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80260c4:	ea40 000c 	orr.w	r0, r0, ip
 80260c8:	fb15 fc02 	smulbb	ip, r5, r2
 80260cc:	f1c5 0810 	rsb	r8, r5, #16
 80260d0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80260d4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80260d8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80260dc:	eba8 0802 	sub.w	r8, r8, r2
 80260e0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80260e4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80260e8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80260ec:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80260f0:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80260f4:	ea4a 0101 	orr.w	r1, sl, r1
 80260f8:	437a      	muls	r2, r7
 80260fa:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80260fe:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026102:	fb09 2208 	mla	r2, r9, r8, r2
 8026106:	ea4b 0000 	orr.w	r0, fp, r0
 802610a:	fb05 2201 	mla	r2, r5, r1, r2
 802610e:	fb0c 2200 	mla	r2, ip, r0, r2
 8026112:	0d57      	lsrs	r7, r2, #21
 8026114:	0952      	lsrs	r2, r2, #5
 8026116:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802611a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802611e:	433a      	orrs	r2, r7
 8026120:	2bff      	cmp	r3, #255	; 0xff
 8026122:	b292      	uxth	r2, r2
 8026124:	d102      	bne.n	802612c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8026126:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026128:	29ff      	cmp	r1, #255	; 0xff
 802612a:	d063      	beq.n	80261f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 802612c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802612e:	1215      	asrs	r5, r2, #8
 8026130:	f8be 1000 	ldrh.w	r1, [lr]
 8026134:	4343      	muls	r3, r0
 8026136:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026138:	10cf      	asrs	r7, r1, #3
 802613a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802613e:	1c58      	adds	r0, r3, #1
 8026140:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026144:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8026148:	1208      	asrs	r0, r1, #8
 802614a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802614e:	00c9      	lsls	r1, r1, #3
 8026150:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026154:	b2db      	uxtb	r3, r3
 8026156:	b2c9      	uxtb	r1, r1
 8026158:	fb10 f003 	smulbb	r0, r0, r3
 802615c:	fb11 f103 	smulbb	r1, r1, r3
 8026160:	fb05 0504 	mla	r5, r5, r4, r0
 8026164:	10d0      	asrs	r0, r2, #3
 8026166:	fb17 f703 	smulbb	r7, r7, r3
 802616a:	00d2      	lsls	r2, r2, #3
 802616c:	b2ad      	uxth	r5, r5
 802616e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026172:	b2d2      	uxtb	r2, r2
 8026174:	fb00 7004 	mla	r0, r0, r4, r7
 8026178:	1c6b      	adds	r3, r5, #1
 802617a:	fb02 1204 	mla	r2, r2, r4, r1
 802617e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026182:	b292      	uxth	r2, r2
 8026184:	b280      	uxth	r0, r0
 8026186:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802618a:	1c57      	adds	r7, r2, #1
 802618c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026190:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026194:	433d      	orrs	r5, r7
 8026196:	1c47      	adds	r7, r0, #1
 8026198:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802619c:	097f      	lsrs	r7, r7, #5
 802619e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80261a2:	433d      	orrs	r5, r7
 80261a4:	f8ae 5000 	strh.w	r5, [lr]
 80261a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80261aa:	f10e 0e02 	add.w	lr, lr, #2
 80261ae:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80261b0:	4413      	add	r3, r2
 80261b2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80261b4:	9329      	str	r3, [sp, #164]	; 0xa4
 80261b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80261b8:	441a      	add	r2, r3
 80261ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80261bc:	3b01      	subs	r3, #1
 80261be:	922a      	str	r2, [sp, #168]	; 0xa8
 80261c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80261c2:	e61c      	b.n	8025dfe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80261c4:	fb08 f000 	mul.w	r0, r8, r0
 80261c8:	fb09 0303 	mla	r3, r9, r3, r0
 80261cc:	e6dc      	b.n	8025f88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 80261ce:	46b9      	mov	r9, r7
 80261d0:	e704      	b.n	8025fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 80261d2:	f1c2 0110 	rsb	r1, r2, #16
 80261d6:	437a      	muls	r2, r7
 80261d8:	fb09 2901 	mla	r9, r9, r1, r2
 80261dc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80261e0:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80261e4:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80261e8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80261ec:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80261f0:	4302      	orrs	r2, r0
 80261f2:	e795      	b.n	8026120 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 80261f4:	f8ae 2000 	strh.w	r2, [lr]
 80261f8:	e7d6      	b.n	80261a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 80261fa:	b017      	add	sp, #92	; 0x5c
 80261fc:	ecbd 8b08 	vpop	{d8-d11}
 8026200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026204 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8026204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026208:	b085      	sub	sp, #20
 802620a:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802620e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8026212:	9103      	str	r1, [sp, #12]
 8026214:	2d00      	cmp	r5, #0
 8026216:	fb05 7106 	mla	r1, r5, r6, r7
 802621a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802621e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8026222:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8026226:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802622a:	eb02 0901 	add.w	r9, r2, r1
 802622e:	9401      	str	r4, [sp, #4]
 8026230:	f2c0 80c0 	blt.w	80263b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8026234:	45a8      	cmp	r8, r5
 8026236:	f340 80bd 	ble.w	80263b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802623a:	2f00      	cmp	r7, #0
 802623c:	f2c0 80b6 	blt.w	80263ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8026240:	42be      	cmp	r6, r7
 8026242:	f340 80b3 	ble.w	80263ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8026246:	f812 c001 	ldrb.w	ip, [r2, r1]
 802624a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 802624e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026252:	d019      	beq.n	8026288 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8026254:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8026258:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802625c:	435a      	muls	r2, r3
 802625e:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8026262:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8026266:	fb0c f403 	mul.w	r4, ip, r3
 802626a:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 802626e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8026272:	441a      	add	r2, r3
 8026274:	f104 0320 	add.w	r3, r4, #32
 8026278:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 802627c:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8026280:	0a1b      	lsrs	r3, r3, #8
 8026282:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026286:	4319      	orrs	r1, r3
 8026288:	b289      	uxth	r1, r1
 802628a:	1c7b      	adds	r3, r7, #1
 802628c:	f100 8097 	bmi.w	80263be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8026290:	429e      	cmp	r6, r3
 8026292:	f340 8094 	ble.w	80263be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8026296:	2800      	cmp	r0, #0
 8026298:	f000 8094 	beq.w	80263c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 802629c:	f899 4001 	ldrb.w	r4, [r9, #1]
 80262a0:	9b01      	ldr	r3, [sp, #4]
 80262a2:	2cff      	cmp	r4, #255	; 0xff
 80262a4:	885b      	ldrh	r3, [r3, #2]
 80262a6:	d01b      	beq.n	80262e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 80262a8:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80262ac:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80262b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80262b4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80262b8:	fb0a f202 	mul.w	r2, sl, r2
 80262bc:	fb04 fa03 	mul.w	sl, r4, r3
 80262c0:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80262c4:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80262c8:	441a      	add	r2, r3
 80262ca:	f10a 0320 	add.w	r3, sl, #32
 80262ce:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80262d2:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80262d6:	0a1b      	lsrs	r3, r3, #8
 80262d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80262dc:	ea4b 0303 	orr.w	r3, fp, r3
 80262e0:	b29b      	uxth	r3, r3
 80262e2:	3501      	adds	r5, #1
 80262e4:	d474      	bmi.n	80263d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80262e6:	45a8      	cmp	r8, r5
 80262e8:	dd72      	ble.n	80263d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80262ea:	f1be 0f00 	cmp.w	lr, #0
 80262ee:	f000 8110 	beq.w	8026512 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 80262f2:	2f00      	cmp	r7, #0
 80262f4:	db69      	blt.n	80263ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80262f6:	42be      	cmp	r6, r7
 80262f8:	dd67      	ble.n	80263ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80262fa:	f819 5006 	ldrb.w	r5, [r9, r6]
 80262fe:	9a01      	ldr	r2, [sp, #4]
 8026300:	2dff      	cmp	r5, #255	; 0xff
 8026302:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8026306:	d01c      	beq.n	8026342 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8026308:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 802630c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8026310:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8026314:	fb08 f802 	mul.w	r8, r8, r2
 8026318:	fb05 fa0b 	mul.w	sl, r5, fp
 802631c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026320:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8026324:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026328:	4490      	add	r8, r2
 802632a:	f10a 0220 	add.w	r2, sl, #32
 802632e:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8026332:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8026336:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802633a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802633e:	ea4b 0b0a 	orr.w	fp, fp, sl
 8026342:	fa1f fb8b 	uxth.w	fp, fp
 8026346:	3701      	adds	r7, #1
 8026348:	d447      	bmi.n	80263da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 802634a:	42be      	cmp	r6, r7
 802634c:	dd45      	ble.n	80263da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 802634e:	2800      	cmp	r0, #0
 8026350:	d046      	beq.n	80263e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8026352:	3601      	adds	r6, #1
 8026354:	9a01      	ldr	r2, [sp, #4]
 8026356:	f819 7006 	ldrb.w	r7, [r9, r6]
 802635a:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 802635e:	2fff      	cmp	r7, #255	; 0xff
 8026360:	d01a      	beq.n	8026398 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8026362:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8026366:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802636a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802636e:	fb08 f806 	mul.w	r8, r8, r6
 8026372:	fb07 f902 	mul.w	r9, r7, r2
 8026376:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802637a:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 802637e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026382:	44b0      	add	r8, r6
 8026384:	f109 0620 	add.w	r6, r9, #32
 8026388:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 802638c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026390:	0a36      	lsrs	r6, r6, #8
 8026392:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8026396:	4332      	orrs	r2, r6
 8026398:	b292      	uxth	r2, r2
 802639a:	280f      	cmp	r0, #15
 802639c:	d922      	bls.n	80263e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 802639e:	4b61      	ldr	r3, [pc, #388]	; (8026524 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 80263a0:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80263a4:	4a60      	ldr	r2, [pc, #384]	; (8026528 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 80263a6:	4861      	ldr	r0, [pc, #388]	; (802652c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 80263a8:	f003 fca2 	bl	8029cf0 <__assert_func>
 80263ac:	f04f 0c00 	mov.w	ip, #0
 80263b0:	4661      	mov	r1, ip
 80263b2:	e76a      	b.n	802628a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80263b4:	2400      	movs	r4, #0
 80263b6:	46a4      	mov	ip, r4
 80263b8:	4623      	mov	r3, r4
 80263ba:	4621      	mov	r1, r4
 80263bc:	e791      	b.n	80262e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80263be:	2400      	movs	r4, #0
 80263c0:	4623      	mov	r3, r4
 80263c2:	e78e      	b.n	80262e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80263c4:	4604      	mov	r4, r0
 80263c6:	4603      	mov	r3, r0
 80263c8:	e78b      	b.n	80262e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80263ca:	2500      	movs	r5, #0
 80263cc:	46ab      	mov	fp, r5
 80263ce:	e7ba      	b.n	8026346 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 80263d0:	2700      	movs	r7, #0
 80263d2:	463d      	mov	r5, r7
 80263d4:	463a      	mov	r2, r7
 80263d6:	46bb      	mov	fp, r7
 80263d8:	e7df      	b.n	802639a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80263da:	2700      	movs	r7, #0
 80263dc:	463a      	mov	r2, r7
 80263de:	e7dc      	b.n	802639a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80263e0:	4607      	mov	r7, r0
 80263e2:	4602      	mov	r2, r0
 80263e4:	f1be 0f0f 	cmp.w	lr, #15
 80263e8:	d8d9      	bhi.n	802639e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80263ea:	b286      	uxth	r6, r0
 80263ec:	fa1f f98e 	uxth.w	r9, lr
 80263f0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80263f4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80263f8:	fb06 f809 	mul.w	r8, r6, r9
 80263fc:	0136      	lsls	r6, r6, #4
 80263fe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026402:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026406:	9601      	str	r6, [sp, #4]
 8026408:	ea4a 0101 	orr.w	r1, sl, r1
 802640c:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8026410:	fa1f f689 	uxth.w	r6, r9
 8026414:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026418:	fb10 f90e 	smulbb	r9, r0, lr
 802641c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026420:	9602      	str	r6, [sp, #8]
 8026422:	460e      	mov	r6, r1
 8026424:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8026428:	f1ce 0110 	rsb	r1, lr, #16
 802642c:	ea4a 0303 	orr.w	r3, sl, r3
 8026430:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026434:	1a09      	subs	r1, r1, r0
 8026436:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802643a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802643e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026442:	4343      	muls	r3, r0
 8026444:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8026448:	ea4a 0202 	orr.w	r2, sl, r2
 802644c:	9802      	ldr	r0, [sp, #8]
 802644e:	fb01 3106 	mla	r1, r1, r6, r3
 8026452:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8026456:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802645a:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 802645e:	fb09 1302 	mla	r3, r9, r2, r1
 8026462:	9a03      	ldr	r2, [sp, #12]
 8026464:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026468:	8811      	ldrh	r1, [r2, #0]
 802646a:	9a01      	ldr	r2, [sp, #4]
 802646c:	ea4a 0b0b 	orr.w	fp, sl, fp
 8026470:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026474:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8026478:	1a12      	subs	r2, r2, r0
 802647a:	9801      	ldr	r0, [sp, #4]
 802647c:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8026480:	eba0 0608 	sub.w	r6, r0, r8
 8026484:	b292      	uxth	r2, r2
 8026486:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802648a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802648e:	b2b6      	uxth	r6, r6
 8026490:	10c8      	asrs	r0, r1, #3
 8026492:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026496:	4374      	muls	r4, r6
 8026498:	ea43 0e0e 	orr.w	lr, r3, lr
 802649c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80264a0:	fb0c 4402 	mla	r4, ip, r2, r4
 80264a4:	9a02      	ldr	r2, [sp, #8]
 80264a6:	fa1f f38e 	uxth.w	r3, lr
 80264aa:	fb02 4505 	mla	r5, r2, r5, r4
 80264ae:	120a      	asrs	r2, r1, #8
 80264b0:	00c9      	lsls	r1, r1, #3
 80264b2:	fb08 5707 	mla	r7, r8, r7, r5
 80264b6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80264ba:	b2c9      	uxtb	r1, r1
 80264bc:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80264c0:	b2ff      	uxtb	r7, r7
 80264c2:	437a      	muls	r2, r7
 80264c4:	4378      	muls	r0, r7
 80264c6:	434f      	muls	r7, r1
 80264c8:	1c51      	adds	r1, r2, #1
 80264ca:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80264ce:	121a      	asrs	r2, r3, #8
 80264d0:	f022 0207 	bic.w	r2, r2, #7
 80264d4:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80264d8:	1c41      	adds	r1, r0, #1
 80264da:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80264de:	10d9      	asrs	r1, r3, #3
 80264e0:	0212      	lsls	r2, r2, #8
 80264e2:	f021 0103 	bic.w	r1, r1, #3
 80264e6:	00db      	lsls	r3, r3, #3
 80264e8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80264ec:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80264f0:	00c9      	lsls	r1, r1, #3
 80264f2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80264f6:	430a      	orrs	r2, r1
 80264f8:	1c79      	adds	r1, r7, #1
 80264fa:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80264fe:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8026502:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026506:	4313      	orrs	r3, r2
 8026508:	9a03      	ldr	r2, [sp, #12]
 802650a:	8013      	strh	r3, [r2, #0]
 802650c:	b005      	add	sp, #20
 802650e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026512:	280f      	cmp	r0, #15
 8026514:	f63f af43 	bhi.w	802639e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8026518:	4677      	mov	r7, lr
 802651a:	4675      	mov	r5, lr
 802651c:	4672      	mov	r2, lr
 802651e:	46f3      	mov	fp, lr
 8026520:	e763      	b.n	80263ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8026522:	bf00      	nop
 8026524:	0802e369 	.word	0x0802e369
 8026528:	0802e936 	.word	0x0802e936
 802652c:	0802e3ed 	.word	0x0802e3ed

08026530 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026534:	ed2d 8b08 	vpush	{d8-d11}
 8026538:	b093      	sub	sp, #76	; 0x4c
 802653a:	eeb0 aa40 	vmov.f32	s20, s0
 802653e:	eef0 9a60 	vmov.f32	s19, s1
 8026542:	9210      	str	r2, [sp, #64]	; 0x40
 8026544:	eeb0 9a41 	vmov.f32	s18, s2
 8026548:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802654a:	eeb0 8a62 	vmov.f32	s16, s5
 802654e:	9011      	str	r0, [sp, #68]	; 0x44
 8026550:	eef0 8a43 	vmov.f32	s17, s6
 8026554:	6850      	ldr	r0, [r2, #4]
 8026556:	eef0 ba44 	vmov.f32	s23, s8
 802655a:	910e      	str	r1, [sp, #56]	; 0x38
 802655c:	eeb0 ba64 	vmov.f32	s22, s9
 8026560:	9306      	str	r3, [sp, #24]
 8026562:	eef0 aa45 	vmov.f32	s21, s10
 8026566:	6812      	ldr	r2, [r2, #0]
 8026568:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802656c:	fb00 1303 	mla	r3, r0, r3, r1
 8026570:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026574:	9307      	str	r3, [sp, #28]
 8026576:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026578:	681b      	ldr	r3, [r3, #0]
 802657a:	9308      	str	r3, [sp, #32]
 802657c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802657e:	685b      	ldr	r3, [r3, #4]
 8026580:	9309      	str	r3, [sp, #36]	; 0x24
 8026582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026584:	2b00      	cmp	r3, #0
 8026586:	dc03      	bgt.n	8026590 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8026588:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802658a:	2b00      	cmp	r3, #0
 802658c:	f340 83b6 	ble.w	8026cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8026590:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026592:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026596:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802659a:	1e48      	subs	r0, r1, #1
 802659c:	1e55      	subs	r5, r2, #1
 802659e:	9b06      	ldr	r3, [sp, #24]
 80265a0:	2b00      	cmp	r3, #0
 80265a2:	f340 8165 	ble.w	8026870 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 80265a6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80265a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80265aa:	1436      	asrs	r6, r6, #16
 80265ac:	ea4f 4323 	mov.w	r3, r3, asr #16
 80265b0:	d406      	bmi.n	80265c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80265b2:	4286      	cmp	r6, r0
 80265b4:	da04      	bge.n	80265c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80265b6:	2b00      	cmp	r3, #0
 80265b8:	db02      	blt.n	80265c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80265ba:	42ab      	cmp	r3, r5
 80265bc:	f2c0 8159 	blt.w	8026872 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80265c0:	3601      	adds	r6, #1
 80265c2:	f100 8146 	bmi.w	8026852 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80265c6:	42b1      	cmp	r1, r6
 80265c8:	f2c0 8143 	blt.w	8026852 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80265cc:	3301      	adds	r3, #1
 80265ce:	f100 8140 	bmi.w	8026852 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80265d2:	429a      	cmp	r2, r3
 80265d4:	f2c0 813d 	blt.w	8026852 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80265d8:	9b06      	ldr	r3, [sp, #24]
 80265da:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80265de:	9f07      	ldr	r7, [sp, #28]
 80265e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80265e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80265e4:	2b00      	cmp	r3, #0
 80265e6:	f340 8166 	ble.w	80268b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80265ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80265ec:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80265ee:	1418      	asrs	r0, r3, #16
 80265f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80265f2:	142d      	asrs	r5, r5, #16
 80265f4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80265f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80265fa:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80265fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026600:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026604:	f100 81f0 	bmi.w	80269e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026608:	f102 3eff 	add.w	lr, r2, #4294967295
 802660c:	4575      	cmp	r5, lr
 802660e:	f280 81eb 	bge.w	80269e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026612:	2800      	cmp	r0, #0
 8026614:	f2c0 81e8 	blt.w	80269e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026618:	f103 3eff 	add.w	lr, r3, #4294967295
 802661c:	4570      	cmp	r0, lr
 802661e:	f280 81e3 	bge.w	80269e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026622:	b212      	sxth	r2, r2
 8026624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026626:	fa1f fe81 	uxth.w	lr, r1
 802662a:	fb00 5002 	mla	r0, r0, r2, r5
 802662e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026632:	eb03 0a00 	add.w	sl, r3, r0
 8026636:	f813 9000 	ldrb.w	r9, [r3, r0]
 802663a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802663e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026642:	b29b      	uxth	r3, r3
 8026644:	f1bc 0f00 	cmp.w	ip, #0
 8026648:	f000 817b 	beq.w	8026942 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802664c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026650:	eb0a 0b02 	add.w	fp, sl, r2
 8026654:	fa1f fa8c 	uxth.w	sl, ip
 8026658:	940a      	str	r4, [sp, #40]	; 0x28
 802665a:	fb0a fe0e 	mul.w	lr, sl, lr
 802665e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026662:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026666:	eba5 050e 	sub.w	r5, r5, lr
 802666a:	940b      	str	r4, [sp, #44]	; 0x2c
 802666c:	fa1f fa8a 	uxth.w	sl, sl
 8026670:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026672:	b2ad      	uxth	r5, r5
 8026674:	eba3 030a 	sub.w	r3, r3, sl
 8026678:	fb08 f505 	mul.w	r5, r8, r5
 802667c:	b29b      	uxth	r3, r3
 802667e:	fb09 5303 	mla	r3, r9, r3, r5
 8026682:	fb0a 3304 	mla	r3, sl, r4, r3
 8026686:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026688:	fb0e 3304 	mla	r3, lr, r4, r3
 802668c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026690:	2b00      	cmp	r3, #0
 8026692:	f000 80d1 	beq.w	8026838 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026696:	9c08      	ldr	r4, [sp, #32]
 8026698:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802669c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80266a0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80266a4:	f000 8152 	beq.w	802694c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80266a8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80266ac:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80266b0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80266b4:	fb0a fe0e 	mul.w	lr, sl, lr
 80266b8:	fb09 f000 	mul.w	r0, r9, r0
 80266bc:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80266c0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80266c4:	f100 0b20 	add.w	fp, r0, #32
 80266c8:	44ce      	add	lr, r9
 80266ca:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80266ce:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80266d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80266d6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80266da:	ea4e 0909 	orr.w	r9, lr, r9
 80266de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80266e2:	8868      	ldrh	r0, [r5, #2]
 80266e4:	d019      	beq.n	802671a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80266e6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80266ea:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80266ee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80266f2:	fb0a fe0e 	mul.w	lr, sl, lr
 80266f6:	fb08 f800 	mul.w	r8, r8, r0
 80266fa:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80266fe:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026702:	f108 0b20 	add.w	fp, r8, #32
 8026706:	4486      	add	lr, r0
 8026708:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802670c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026710:	0a00      	lsrs	r0, r0, #8
 8026712:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026716:	ea4e 0000 	orr.w	r0, lr, r0
 802671a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802671e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026722:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026726:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802672a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802672e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026732:	ea4e 0909 	orr.w	r9, lr, r9
 8026736:	ea4a 0000 	orr.w	r0, sl, r0
 802673a:	f1bc 0f00 	cmp.w	ip, #0
 802673e:	f000 8107 	beq.w	8026950 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026742:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8026746:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026748:	3a01      	subs	r2, #1
 802674a:	2cff      	cmp	r4, #255	; 0xff
 802674c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026750:	f102 0202 	add.w	r2, r2, #2
 8026754:	eb05 0e02 	add.w	lr, r5, r2
 8026758:	5aaa      	ldrh	r2, [r5, r2]
 802675a:	d018      	beq.n	802678e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802675c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026760:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026764:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026768:	fb04 fa02 	mul.w	sl, r4, r2
 802676c:	fb08 f805 	mul.w	r8, r8, r5
 8026770:	f10a 0520 	add.w	r5, sl, #32
 8026774:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026778:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802677c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026780:	4442      	add	r2, r8
 8026782:	0a2d      	lsrs	r5, r5, #8
 8026784:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026788:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802678c:	432a      	orrs	r2, r5
 802678e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026790:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026794:	2cff      	cmp	r4, #255	; 0xff
 8026796:	d01a      	beq.n	80267ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8026798:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802679c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80267a0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80267a4:	fb04 fa05 	mul.w	sl, r4, r5
 80267a8:	fb08 f80e 	mul.w	r8, r8, lr
 80267ac:	f10a 0e20 	add.w	lr, sl, #32
 80267b0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80267b4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80267b8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80267bc:	4445      	add	r5, r8
 80267be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80267c2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80267c6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80267ca:	ea45 050e 	orr.w	r5, r5, lr
 80267ce:	fb1c fe01 	smulbb	lr, ip, r1
 80267d2:	f1cc 0810 	rsb	r8, ip, #16
 80267d6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80267da:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80267de:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80267e2:	eba8 0801 	sub.w	r8, r8, r1
 80267e6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80267ea:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80267ee:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80267f2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80267f6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80267fa:	ea4a 0202 	orr.w	r2, sl, r2
 80267fe:	4341      	muls	r1, r0
 8026800:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026804:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026808:	fb09 1108 	mla	r1, r9, r8, r1
 802680c:	ea4b 0505 	orr.w	r5, fp, r5
 8026810:	fb0c 1102 	mla	r1, ip, r2, r1
 8026814:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026818:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802681c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026820:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026824:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026828:	ea42 0e0e 	orr.w	lr, r2, lr
 802682c:	fa1f f28e 	uxth.w	r2, lr
 8026830:	2bff      	cmp	r3, #255	; 0xff
 8026832:	f040 80a1 	bne.w	8026978 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8026836:	803a      	strh	r2, [r7, #0]
 8026838:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802683a:	3702      	adds	r7, #2
 802683c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802683e:	4413      	add	r3, r2
 8026840:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8026842:	9325      	str	r3, [sp, #148]	; 0x94
 8026844:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026846:	441a      	add	r2, r3
 8026848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802684a:	3b01      	subs	r3, #1
 802684c:	9226      	str	r2, [sp, #152]	; 0x98
 802684e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026850:	e6c7      	b.n	80265e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026852:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026854:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8026856:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8026858:	4433      	add	r3, r6
 802685a:	9325      	str	r3, [sp, #148]	; 0x94
 802685c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802685e:	441c      	add	r4, r3
 8026860:	9b06      	ldr	r3, [sp, #24]
 8026862:	3b01      	subs	r3, #1
 8026864:	9426      	str	r4, [sp, #152]	; 0x98
 8026866:	9306      	str	r3, [sp, #24]
 8026868:	9b07      	ldr	r3, [sp, #28]
 802686a:	3302      	adds	r3, #2
 802686c:	9307      	str	r3, [sp, #28]
 802686e:	e696      	b.n	802659e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026870:	d028      	beq.n	80268c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026872:	9b06      	ldr	r3, [sp, #24]
 8026874:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026876:	3b01      	subs	r3, #1
 8026878:	9d25      	ldr	r5, [sp, #148]	; 0x94
 802687a:	fb00 5003 	mla	r0, r0, r3, r5
 802687e:	1400      	asrs	r0, r0, #16
 8026880:	f53f aeaa 	bmi.w	80265d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026884:	3901      	subs	r1, #1
 8026886:	4288      	cmp	r0, r1
 8026888:	f6bf aea6 	bge.w	80265d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802688c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802688e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8026890:	fb01 0303 	mla	r3, r1, r3, r0
 8026894:	141b      	asrs	r3, r3, #16
 8026896:	f53f ae9f 	bmi.w	80265d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802689a:	3a01      	subs	r2, #1
 802689c:	4293      	cmp	r3, r2
 802689e:	f6bf ae9b 	bge.w	80265d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80268a2:	9b06      	ldr	r3, [sp, #24]
 80268a4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80268a8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80268ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80268ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80268b0:	2b00      	cmp	r3, #0
 80268b2:	f300 80b6 	bgt.w	8026a22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80268b6:	9b06      	ldr	r3, [sp, #24]
 80268b8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80268bc:	9b07      	ldr	r3, [sp, #28]
 80268be:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80268c2:	9307      	str	r3, [sp, #28]
 80268c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80268c6:	2b00      	cmp	r3, #0
 80268c8:	f340 8218 	ble.w	8026cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80268cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80268d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80268d2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80268d6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80268da:	eef0 6a48 	vmov.f32	s13, s16
 80268de:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80268e2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80268e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80268ea:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80268ee:	eef0 6a68 	vmov.f32	s13, s17
 80268f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80268f6:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80268fa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80268fe:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026902:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026906:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802690a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802690e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026912:	ee18 2a10 	vmov	r2, s16
 8026916:	eeb0 8a47 	vmov.f32	s16, s14
 802691a:	fb92 f3f3 	sdiv	r3, r2, r3
 802691e:	ee18 2a90 	vmov	r2, s17
 8026922:	9327      	str	r3, [sp, #156]	; 0x9c
 8026924:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026926:	eef0 8a67 	vmov.f32	s17, s15
 802692a:	fb92 f3f3 	sdiv	r3, r2, r3
 802692e:	9328      	str	r3, [sp, #160]	; 0xa0
 8026930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026932:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026934:	3b01      	subs	r3, #1
 8026936:	930e      	str	r3, [sp, #56]	; 0x38
 8026938:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802693a:	bf08      	it	eq
 802693c:	4613      	moveq	r3, r2
 802693e:	9306      	str	r3, [sp, #24]
 8026940:	e61f      	b.n	8026582 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8026942:	fb08 f505 	mul.w	r5, r8, r5
 8026946:	fb09 5303 	mla	r3, r9, r3, r5
 802694a:	e69f      	b.n	802668c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 802694c:	4681      	mov	r9, r0
 802694e:	e6c6      	b.n	80266de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8026950:	f1c1 0210 	rsb	r2, r1, #16
 8026954:	4341      	muls	r1, r0
 8026956:	fb09 1902 	mla	r9, r9, r2, r1
 802695a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802695e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026962:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026966:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802696a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802696e:	ea42 0909 	orr.w	r9, r2, r9
 8026972:	fa1f f289 	uxth.w	r2, r9
 8026976:	e75b      	b.n	8026830 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8026978:	f8b7 c000 	ldrh.w	ip, [r7]
 802697c:	43db      	mvns	r3, r3
 802697e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8026982:	fa5f fe83 	uxtb.w	lr, r3
 8026986:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802698a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802698e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8026992:	fb00 f00e 	mul.w	r0, r0, lr
 8026996:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802699a:	b2db      	uxtb	r3, r3
 802699c:	1c41      	adds	r1, r0, #1
 802699e:	fb05 f50e 	mul.w	r5, r5, lr
 80269a2:	fb03 f30e 	mul.w	r3, r3, lr
 80269a6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80269aa:	1211      	asrs	r1, r2, #8
 80269ac:	f021 0107 	bic.w	r1, r1, #7
 80269b0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80269b4:	48d4      	ldr	r0, [pc, #848]	; (8026d08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 80269b6:	b2c9      	uxtb	r1, r1
 80269b8:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80269bc:	1c69      	adds	r1, r5, #1
 80269be:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80269c2:	10d1      	asrs	r1, r2, #3
 80269c4:	00d2      	lsls	r2, r2, #3
 80269c6:	f021 0103 	bic.w	r1, r1, #3
 80269ca:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80269ce:	00c9      	lsls	r1, r1, #3
 80269d0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80269d4:	4301      	orrs	r1, r0
 80269d6:	1c58      	adds	r0, r3, #1
 80269d8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80269dc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80269e0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80269e4:	430a      	orrs	r2, r1
 80269e6:	e726      	b.n	8026836 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80269e8:	f115 0e01 	adds.w	lr, r5, #1
 80269ec:	f53f af24 	bmi.w	8026838 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80269f0:	4572      	cmp	r2, lr
 80269f2:	f6ff af21 	blt.w	8026838 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80269f6:	f110 0e01 	adds.w	lr, r0, #1
 80269fa:	f53f af1d 	bmi.w	8026838 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80269fe:	4573      	cmp	r3, lr
 8026a00:	f6ff af1a 	blt.w	8026838 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026a04:	b21b      	sxth	r3, r3
 8026a06:	b212      	sxth	r2, r2
 8026a08:	9301      	str	r3, [sp, #4]
 8026a0a:	9200      	str	r2, [sp, #0]
 8026a0c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8026a10:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8026a14:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8026a18:	4639      	mov	r1, r7
 8026a1a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026a1c:	f7ff fbf2 	bl	8026204 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8026a20:	e70a      	b.n	8026838 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026a22:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026a24:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026a28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026a2a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026a2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026a30:	fa1f fc82 	uxth.w	ip, r2
 8026a34:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026a38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026a3a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026a3e:	141f      	asrs	r7, r3, #16
 8026a40:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026a42:	141b      	asrs	r3, r3, #16
 8026a44:	fb01 3707 	mla	r7, r1, r7, r3
 8026a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a4a:	eb03 0a07 	add.w	sl, r3, r7
 8026a4e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026a52:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026a56:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026a5a:	b29b      	uxth	r3, r3
 8026a5c:	2d00      	cmp	r5, #0
 8026a5e:	f000 80fe 	beq.w	8026c5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8026a62:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026a66:	eb0a 0b01 	add.w	fp, sl, r1
 8026a6a:	fa1f fa85 	uxth.w	sl, r5
 8026a6e:	940c      	str	r4, [sp, #48]	; 0x30
 8026a70:	fb0a fc0c 	mul.w	ip, sl, ip
 8026a74:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026a78:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026a7c:	eba0 000c 	sub.w	r0, r0, ip
 8026a80:	940d      	str	r4, [sp, #52]	; 0x34
 8026a82:	fa1f fa8a 	uxth.w	sl, sl
 8026a86:	b280      	uxth	r0, r0
 8026a88:	eba3 030a 	sub.w	r3, r3, sl
 8026a8c:	fb08 f000 	mul.w	r0, r8, r0
 8026a90:	b29b      	uxth	r3, r3
 8026a92:	fb09 0303 	mla	r3, r9, r3, r0
 8026a96:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026a98:	fb0a 3300 	mla	r3, sl, r0, r3
 8026a9c:	fb0c 3304 	mla	r3, ip, r4, r3
 8026aa0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026aa4:	2b00      	cmp	r3, #0
 8026aa6:	f000 80cc 	beq.w	8026c42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8026aaa:	9808      	ldr	r0, [sp, #32]
 8026aac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026ab0:	9c08      	ldr	r4, [sp, #32]
 8026ab2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026ab6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026aba:	f000 80d5 	beq.w	8026c68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8026abe:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026ac2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026ac6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026aca:	fb0a fc0c 	mul.w	ip, sl, ip
 8026ace:	fb09 f707 	mul.w	r7, r9, r7
 8026ad2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026ad6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026ada:	f107 0b20 	add.w	fp, r7, #32
 8026ade:	44cc      	add	ip, r9
 8026ae0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026ae4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026ae8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026aec:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026af0:	ea4c 0909 	orr.w	r9, ip, r9
 8026af4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026af8:	8847      	ldrh	r7, [r0, #2]
 8026afa:	d019      	beq.n	8026b30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8026afc:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026b00:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026b04:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026b08:	fb0a fc0c 	mul.w	ip, sl, ip
 8026b0c:	fb08 f807 	mul.w	r8, r8, r7
 8026b10:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026b14:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026b18:	f108 0b20 	add.w	fp, r8, #32
 8026b1c:	44bc      	add	ip, r7
 8026b1e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026b22:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026b26:	0a3f      	lsrs	r7, r7, #8
 8026b28:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026b2c:	ea4c 0707 	orr.w	r7, ip, r7
 8026b30:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026b34:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026b38:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026b3c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026b40:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026b44:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026b48:	ea4c 0909 	orr.w	r9, ip, r9
 8026b4c:	ea4a 0707 	orr.w	r7, sl, r7
 8026b50:	2d00      	cmp	r5, #0
 8026b52:	f000 808b 	beq.w	8026c6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8026b56:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026b5a:	3901      	subs	r1, #1
 8026b5c:	0049      	lsls	r1, r1, #1
 8026b5e:	3102      	adds	r1, #2
 8026b60:	eb00 0c01 	add.w	ip, r0, r1
 8026b64:	5a41      	ldrh	r1, [r0, r1]
 8026b66:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026b68:	28ff      	cmp	r0, #255	; 0xff
 8026b6a:	d019      	beq.n	8026ba0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8026b6c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8026b70:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026b72:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026b76:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026b7a:	fb04 fa01 	mul.w	sl, r4, r1
 8026b7e:	fb08 f800 	mul.w	r8, r8, r0
 8026b82:	f10a 0020 	add.w	r0, sl, #32
 8026b86:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026b8a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026b8e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026b92:	4441      	add	r1, r8
 8026b94:	0a00      	lsrs	r0, r0, #8
 8026b96:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026b9a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026b9e:	4301      	orrs	r1, r0
 8026ba0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026ba2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026ba6:	2cff      	cmp	r4, #255	; 0xff
 8026ba8:	d01a      	beq.n	8026be0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8026baa:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8026bae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026bb2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026bb6:	fb04 fa00 	mul.w	sl, r4, r0
 8026bba:	fb08 f80c 	mul.w	r8, r8, ip
 8026bbe:	f10a 0c20 	add.w	ip, sl, #32
 8026bc2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026bc6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026bca:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026bce:	4440      	add	r0, r8
 8026bd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026bd4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026bd8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026bdc:	ea40 000c 	orr.w	r0, r0, ip
 8026be0:	fb15 fc02 	smulbb	ip, r5, r2
 8026be4:	f1c5 0810 	rsb	r8, r5, #16
 8026be8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026bec:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026bf0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026bf4:	eba8 0802 	sub.w	r8, r8, r2
 8026bf8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026bfc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026c00:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026c04:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026c08:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026c0c:	ea4a 0101 	orr.w	r1, sl, r1
 8026c10:	437a      	muls	r2, r7
 8026c12:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026c16:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026c1a:	fb09 2208 	mla	r2, r9, r8, r2
 8026c1e:	ea4b 0000 	orr.w	r0, fp, r0
 8026c22:	fb05 2201 	mla	r2, r5, r1, r2
 8026c26:	fb0c 2200 	mla	r2, ip, r0, r2
 8026c2a:	0d57      	lsrs	r7, r2, #21
 8026c2c:	0952      	lsrs	r2, r2, #5
 8026c2e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026c32:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026c36:	433a      	orrs	r2, r7
 8026c38:	2bff      	cmp	r3, #255	; 0xff
 8026c3a:	b292      	uxth	r2, r2
 8026c3c:	d127      	bne.n	8026c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8026c3e:	f8ae 2000 	strh.w	r2, [lr]
 8026c42:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026c44:	f10e 0e02 	add.w	lr, lr, #2
 8026c48:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026c4a:	4413      	add	r3, r2
 8026c4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8026c4e:	9325      	str	r3, [sp, #148]	; 0x94
 8026c50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026c52:	441a      	add	r2, r3
 8026c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026c56:	3b01      	subs	r3, #1
 8026c58:	9226      	str	r2, [sp, #152]	; 0x98
 8026c5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8026c5c:	e627      	b.n	80268ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026c5e:	fb08 f000 	mul.w	r0, r8, r0
 8026c62:	fb09 0303 	mla	r3, r9, r3, r0
 8026c66:	e71b      	b.n	8026aa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8026c68:	46b9      	mov	r9, r7
 8026c6a:	e743      	b.n	8026af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8026c6c:	f1c2 0110 	rsb	r1, r2, #16
 8026c70:	437a      	muls	r2, r7
 8026c72:	fb09 2901 	mla	r9, r9, r1, r2
 8026c76:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026c7a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026c7e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026c82:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026c86:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026c8a:	4302      	orrs	r2, r0
 8026c8c:	e7d4      	b.n	8026c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8026c8e:	f8be 7000 	ldrh.w	r7, [lr]
 8026c92:	43db      	mvns	r3, r3
 8026c94:	4c1c      	ldr	r4, [pc, #112]	; (8026d08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8026c96:	1238      	asrs	r0, r7, #8
 8026c98:	fa5f fc83 	uxtb.w	ip, r3
 8026c9c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026ca0:	10fd      	asrs	r5, r7, #3
 8026ca2:	00fb      	lsls	r3, r7, #3
 8026ca4:	fb00 f00c 	mul.w	r0, r0, ip
 8026ca8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026cac:	b2db      	uxtb	r3, r3
 8026cae:	fb05 f10c 	mul.w	r1, r5, ip
 8026cb2:	1c45      	adds	r5, r0, #1
 8026cb4:	fb03 f30c 	mul.w	r3, r3, ip
 8026cb8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026cbc:	1215      	asrs	r5, r2, #8
 8026cbe:	f025 0507 	bic.w	r5, r5, #7
 8026cc2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026cc6:	1c4d      	adds	r5, r1, #1
 8026cc8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8026ccc:	10d1      	asrs	r1, r2, #3
 8026cce:	b2c0      	uxtb	r0, r0
 8026cd0:	f021 0103 	bic.w	r1, r1, #3
 8026cd4:	00d2      	lsls	r2, r2, #3
 8026cd6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8026cda:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026cde:	00c9      	lsls	r1, r1, #3
 8026ce0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026ce4:	4308      	orrs	r0, r1
 8026ce6:	1c59      	adds	r1, r3, #1
 8026ce8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026cec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026cf0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026cf4:	4318      	orrs	r0, r3
 8026cf6:	f8ae 0000 	strh.w	r0, [lr]
 8026cfa:	e7a2      	b.n	8026c42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8026cfc:	b013      	add	sp, #76	; 0x4c
 8026cfe:	ecbd 8b08 	vpop	{d8-d11}
 8026d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d06:	bf00      	nop
 8026d08:	fffff800 	.word	0xfffff800

08026d0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8026d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026d10:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8026d14:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8026d18:	fb0c 4e03 	mla	lr, ip, r3, r4
 8026d1c:	f1bc 0f00 	cmp.w	ip, #0
 8026d20:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8026d24:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8026d28:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8026d2c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8026d30:	8808      	ldrh	r0, [r1, #0]
 8026d32:	db2f      	blt.n	8026d94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8026d34:	45e2      	cmp	sl, ip
 8026d36:	dd2d      	ble.n	8026d94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8026d38:	2c00      	cmp	r4, #0
 8026d3a:	db29      	blt.n	8026d90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8026d3c:	42a3      	cmp	r3, r4
 8026d3e:	dd27      	ble.n	8026d90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8026d40:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8026d44:	1c62      	adds	r2, r4, #1
 8026d46:	d428      	bmi.n	8026d9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8026d48:	4293      	cmp	r3, r2
 8026d4a:	dd26      	ble.n	8026d9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8026d4c:	b32f      	cbz	r7, 8026d9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8026d4e:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8026d52:	f11c 0c01 	adds.w	ip, ip, #1
 8026d56:	d424      	bmi.n	8026da2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8026d58:	45e2      	cmp	sl, ip
 8026d5a:	dd22      	ble.n	8026da2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8026d5c:	2e00      	cmp	r6, #0
 8026d5e:	f000 809d 	beq.w	8026e9c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8026d62:	2c00      	cmp	r4, #0
 8026d64:	db1b      	blt.n	8026d9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8026d66:	42a3      	cmp	r3, r4
 8026d68:	dd19      	ble.n	8026d9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8026d6a:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8026d6e:	3401      	adds	r4, #1
 8026d70:	d41a      	bmi.n	8026da8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8026d72:	42a3      	cmp	r3, r4
 8026d74:	dd18      	ble.n	8026da8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8026d76:	b1cf      	cbz	r7, 8026dac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8026d78:	3301      	adds	r3, #1
 8026d7a:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8026d7e:	2f0f      	cmp	r7, #15
 8026d80:	d915      	bls.n	8026dae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8026d82:	4b49      	ldr	r3, [pc, #292]	; (8026ea8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8026d84:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8026d88:	4a48      	ldr	r2, [pc, #288]	; (8026eac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8026d8a:	4849      	ldr	r0, [pc, #292]	; (8026eb0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8026d8c:	f002 ffb0 	bl	8029cf0 <__assert_func>
 8026d90:	4681      	mov	r9, r0
 8026d92:	e7d7      	b.n	8026d44 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8026d94:	4686      	mov	lr, r0
 8026d96:	4681      	mov	r9, r0
 8026d98:	e7db      	b.n	8026d52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8026d9a:	4686      	mov	lr, r0
 8026d9c:	e7d9      	b.n	8026d52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8026d9e:	4684      	mov	ip, r0
 8026da0:	e7e5      	b.n	8026d6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8026da2:	4603      	mov	r3, r0
 8026da4:	4684      	mov	ip, r0
 8026da6:	e7ea      	b.n	8026d7e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8026da8:	4603      	mov	r3, r0
 8026daa:	e7e8      	b.n	8026d7e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8026dac:	4603      	mov	r3, r0
 8026dae:	2e0f      	cmp	r6, #15
 8026db0:	d8e7      	bhi.n	8026d82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8026db2:	fb17 f806 	smulbb	r8, r7, r6
 8026db6:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8026dba:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8026dbe:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026dc2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026dc6:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8026dca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026dce:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026dd2:	ea44 0909 	orr.w	r9, r4, r9
 8026dd6:	f1c6 0410 	rsb	r4, r6, #16
 8026dda:	041a      	lsls	r2, r3, #16
 8026ddc:	ea4a 0e0e 	orr.w	lr, sl, lr
 8026de0:	1be4      	subs	r4, r4, r7
 8026de2:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8026de6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026dea:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026dee:	fb07 fe0e 	mul.w	lr, r7, lr
 8026df2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8026df6:	4313      	orrs	r3, r2
 8026df8:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8026dfc:	fb04 e409 	mla	r4, r4, r9, lr
 8026e00:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8026e04:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026e08:	b2af      	uxth	r7, r5
 8026e0a:	fb08 4303 	mla	r3, r8, r3, r4
 8026e0e:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8026e12:	43ed      	mvns	r5, r5
 8026e14:	4322      	orrs	r2, r4
 8026e16:	b2ed      	uxtb	r5, r5
 8026e18:	fb06 3202 	mla	r2, r6, r2, r3
 8026e1c:	10c6      	asrs	r6, r0, #3
 8026e1e:	0d53      	lsrs	r3, r2, #21
 8026e20:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8026e24:	0952      	lsrs	r2, r2, #5
 8026e26:	fb16 f605 	smulbb	r6, r6, r5
 8026e2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026e2e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026e32:	431a      	orrs	r2, r3
 8026e34:	b293      	uxth	r3, r2
 8026e36:	1202      	asrs	r2, r0, #8
 8026e38:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026e3c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026e40:	00dc      	lsls	r4, r3, #3
 8026e42:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026e46:	fb12 f205 	smulbb	r2, r2, r5
 8026e4a:	b2e4      	uxtb	r4, r4
 8026e4c:	fb0c 2c07 	mla	ip, ip, r7, r2
 8026e50:	10da      	asrs	r2, r3, #3
 8026e52:	00c3      	lsls	r3, r0, #3
 8026e54:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026e58:	fa1f fc8c 	uxth.w	ip, ip
 8026e5c:	b2db      	uxtb	r3, r3
 8026e5e:	fb02 6207 	mla	r2, r2, r7, r6
 8026e62:	fb13 f305 	smulbb	r3, r3, r5
 8026e66:	b296      	uxth	r6, r2
 8026e68:	fb04 3307 	mla	r3, r4, r7, r3
 8026e6c:	b29a      	uxth	r2, r3
 8026e6e:	f10c 0301 	add.w	r3, ip, #1
 8026e72:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026e76:	1c53      	adds	r3, r2, #1
 8026e78:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026e7c:	1c72      	adds	r2, r6, #1
 8026e7e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8026e82:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8026e86:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026e8a:	0952      	lsrs	r2, r2, #5
 8026e8c:	ea43 030c 	orr.w	r3, r3, ip
 8026e90:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026e94:	4313      	orrs	r3, r2
 8026e96:	800b      	strh	r3, [r1, #0]
 8026e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026e9c:	2f0f      	cmp	r7, #15
 8026e9e:	f63f af70 	bhi.w	8026d82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8026ea2:	4603      	mov	r3, r0
 8026ea4:	4684      	mov	ip, r0
 8026ea6:	e784      	b.n	8026db2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8026ea8:	0802e369 	.word	0x0802e369
 8026eac:	0802e9df 	.word	0x0802e9df
 8026eb0:	0802e3ed 	.word	0x0802e3ed

08026eb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026eb8:	ed2d 8b08 	vpush	{d8-d11}
 8026ebc:	b093      	sub	sp, #76	; 0x4c
 8026ebe:	461d      	mov	r5, r3
 8026ec0:	eeb0 aa40 	vmov.f32	s20, s0
 8026ec4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026ec6:	eef0 9a60 	vmov.f32	s19, s1
 8026eca:	9210      	str	r2, [sp, #64]	; 0x40
 8026ecc:	eeb0 9a41 	vmov.f32	s18, s2
 8026ed0:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8026ed4:	eeb0 8a62 	vmov.f32	s16, s5
 8026ed8:	910a      	str	r1, [sp, #40]	; 0x28
 8026eda:	eef0 8a43 	vmov.f32	s17, s6
 8026ede:	920b      	str	r2, [sp, #44]	; 0x2c
 8026ee0:	eef0 ba44 	vmov.f32	s23, s8
 8026ee4:	6859      	ldr	r1, [r3, #4]
 8026ee6:	eeb0 ba64 	vmov.f32	s22, s9
 8026eea:	681b      	ldr	r3, [r3, #0]
 8026eec:	eef0 aa45 	vmov.f32	s21, s10
 8026ef0:	9011      	str	r0, [sp, #68]	; 0x44
 8026ef2:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8026ef6:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8026efa:	fb01 2707 	mla	r7, r1, r7, r2
 8026efe:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8026f02:	9307      	str	r3, [sp, #28]
 8026f04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026f06:	681b      	ldr	r3, [r3, #0]
 8026f08:	9309      	str	r3, [sp, #36]	; 0x24
 8026f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026f0c:	43db      	mvns	r3, r3
 8026f0e:	b2db      	uxtb	r3, r3
 8026f10:	9308      	str	r3, [sp, #32]
 8026f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f14:	2b00      	cmp	r3, #0
 8026f16:	dc03      	bgt.n	8026f20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026f18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026f1a:	2b00      	cmp	r3, #0
 8026f1c:	f340 8205 	ble.w	802732a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8026f20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026f22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026f26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026f2a:	1e48      	subs	r0, r1, #1
 8026f2c:	f102 3cff 	add.w	ip, r2, #4294967295
 8026f30:	2d00      	cmp	r5, #0
 8026f32:	f340 80da 	ble.w	80270ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8026f36:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026f3a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026f3e:	d406      	bmi.n	8026f4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026f40:	4586      	cmp	lr, r0
 8026f42:	da04      	bge.n	8026f4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026f44:	2b00      	cmp	r3, #0
 8026f46:	db02      	blt.n	8026f4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026f48:	4563      	cmp	r3, ip
 8026f4a:	f2c0 80cf 	blt.w	80270ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8026f4e:	f11e 0e01 	adds.w	lr, lr, #1
 8026f52:	f100 80c1 	bmi.w	80270d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026f56:	4571      	cmp	r1, lr
 8026f58:	f2c0 80be 	blt.w	80270d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026f5c:	3301      	adds	r3, #1
 8026f5e:	f100 80bb 	bmi.w	80270d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026f62:	429a      	cmp	r2, r3
 8026f64:	f2c0 80b8 	blt.w	80270d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026f68:	46a9      	mov	r9, r5
 8026f6a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8026f6e:	f1b9 0f00 	cmp.w	r9, #0
 8026f72:	f340 80d8 	ble.w	8027126 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8026f76:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026f78:	1421      	asrs	r1, r4, #16
 8026f7a:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026f7e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026f82:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026f86:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026f8a:	f100 8112 	bmi.w	80271b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026f8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8026f92:	4551      	cmp	r1, sl
 8026f94:	f280 810d 	bge.w	80271b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026f98:	2800      	cmp	r0, #0
 8026f9a:	f2c0 810a 	blt.w	80271b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026f9e:	f103 3aff 	add.w	sl, r3, #4294967295
 8026fa2:	4550      	cmp	r0, sl
 8026fa4:	f280 8105 	bge.w	80271b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026fa8:	fa0f f38e 	sxth.w	r3, lr
 8026fac:	fb00 1103 	mla	r1, r0, r3, r1
 8026fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026fb2:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8026fb6:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8026fba:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8026fbe:	f1bc 0f00 	cmp.w	ip, #0
 8026fc2:	d007      	beq.n	8026fd4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8026fc4:	005b      	lsls	r3, r3, #1
 8026fc6:	eb0a 0003 	add.w	r0, sl, r3
 8026fca:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8026fce:	930c      	str	r3, [sp, #48]	; 0x30
 8026fd0:	8843      	ldrh	r3, [r0, #2]
 8026fd2:	930d      	str	r3, [sp, #52]	; 0x34
 8026fd4:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8026fd8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026fdc:	fb12 f30c 	smulbb	r3, r2, ip
 8026fe0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026fe4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026fe8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026fec:	10db      	asrs	r3, r3, #3
 8026fee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026ff2:	ea40 000e 	orr.w	r0, r0, lr
 8026ff6:	f1cc 0e10 	rsb	lr, ip, #16
 8026ffa:	ea4a 0101 	orr.w	r1, sl, r1
 8026ffe:	9f08      	ldr	r7, [sp, #32]
 8027000:	ebae 0e02 	sub.w	lr, lr, r2
 8027004:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027008:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802700c:	4351      	muls	r1, r2
 802700e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027010:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027014:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027016:	0410      	lsls	r0, r2, #16
 8027018:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802701c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027020:	4310      	orrs	r0, r2
 8027022:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027024:	0412      	lsls	r2, r2, #16
 8027026:	fb03 e000 	mla	r0, r3, r0, lr
 802702a:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802702e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027032:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027036:	ea42 020e 	orr.w	r2, r2, lr
 802703a:	fb03 0302 	mla	r3, r3, r2, r0
 802703e:	f8b8 0000 	ldrh.w	r0, [r8]
 8027042:	0d5a      	lsrs	r2, r3, #21
 8027044:	095b      	lsrs	r3, r3, #5
 8027046:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802704a:	1201      	asrs	r1, r0, #8
 802704c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027050:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8027054:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027058:	00c0      	lsls	r0, r0, #3
 802705a:	4313      	orrs	r3, r2
 802705c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8027060:	fb11 f107 	smulbb	r1, r1, r7
 8027064:	b2c0      	uxtb	r0, r0
 8027066:	b29b      	uxth	r3, r3
 8027068:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802706c:	fb10 f007 	smulbb	r0, r0, r7
 8027070:	fb1e fe07 	smulbb	lr, lr, r7
 8027074:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027078:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802707c:	fb0c 1c02 	mla	ip, ip, r2, r1
 8027080:	10d9      	asrs	r1, r3, #3
 8027082:	00db      	lsls	r3, r3, #3
 8027084:	fa1f fc8c 	uxth.w	ip, ip
 8027088:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802708c:	b2db      	uxtb	r3, r3
 802708e:	fb01 e102 	mla	r1, r1, r2, lr
 8027092:	fb03 0302 	mla	r3, r3, r2, r0
 8027096:	b289      	uxth	r1, r1
 8027098:	b29a      	uxth	r2, r3
 802709a:	f10c 0301 	add.w	r3, ip, #1
 802709e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80270a2:	1c53      	adds	r3, r2, #1
 80270a4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80270a8:	1c4a      	adds	r2, r1, #1
 80270aa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80270ae:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80270b2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80270b6:	0949      	lsrs	r1, r1, #5
 80270b8:	ea43 030c 	orr.w	r3, r3, ip
 80270bc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80270c0:	430b      	orrs	r3, r1
 80270c2:	f8a8 3000 	strh.w	r3, [r8]
 80270c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80270c8:	f108 0802 	add.w	r8, r8, #2
 80270cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80270d0:	441c      	add	r4, r3
 80270d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80270d4:	441e      	add	r6, r3
 80270d6:	e74a      	b.n	8026f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80270d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80270da:	3d01      	subs	r5, #1
 80270dc:	441c      	add	r4, r3
 80270de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80270e0:	441e      	add	r6, r3
 80270e2:	9b07      	ldr	r3, [sp, #28]
 80270e4:	3302      	adds	r3, #2
 80270e6:	9307      	str	r3, [sp, #28]
 80270e8:	e722      	b.n	8026f30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80270ea:	d022      	beq.n	8027132 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80270ec:	1e6b      	subs	r3, r5, #1
 80270ee:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80270f0:	fb00 4003 	mla	r0, r0, r3, r4
 80270f4:	1400      	asrs	r0, r0, #16
 80270f6:	f53f af37 	bmi.w	8026f68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80270fa:	3901      	subs	r1, #1
 80270fc:	4288      	cmp	r0, r1
 80270fe:	f6bf af33 	bge.w	8026f68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027102:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8027104:	fb01 6303 	mla	r3, r1, r3, r6
 8027108:	141b      	asrs	r3, r3, #16
 802710a:	f53f af2d 	bmi.w	8026f68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802710e:	3a01      	subs	r2, #1
 8027110:	4293      	cmp	r3, r2
 8027112:	f6bf af29 	bge.w	8026f68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027116:	46a8      	mov	r8, r5
 8027118:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802711c:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8027120:	f1b8 0f00 	cmp.w	r8, #0
 8027124:	dc60      	bgt.n	80271e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8027126:	9b07      	ldr	r3, [sp, #28]
 8027128:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802712c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027130:	9307      	str	r3, [sp, #28]
 8027132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027134:	2b00      	cmp	r3, #0
 8027136:	f340 80f8 	ble.w	802732a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802713a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802713e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027140:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027144:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027148:	eef0 6a48 	vmov.f32	s13, s16
 802714c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027150:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027154:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027158:	ee16 4a90 	vmov	r4, s13
 802715c:	eef0 6a68 	vmov.f32	s13, s17
 8027160:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027164:	ee16 6a90 	vmov	r6, s13
 8027168:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802716c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027170:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027174:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027178:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802717c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027180:	ee18 2a10 	vmov	r2, s16
 8027184:	eeb0 8a47 	vmov.f32	s16, s14
 8027188:	fb92 f3f3 	sdiv	r3, r2, r3
 802718c:	ee18 2a90 	vmov	r2, s17
 8027190:	9327      	str	r3, [sp, #156]	; 0x9c
 8027192:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027194:	eef0 8a67 	vmov.f32	s17, s15
 8027198:	fb92 f3f3 	sdiv	r3, r2, r3
 802719c:	9328      	str	r3, [sp, #160]	; 0xa0
 802719e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80271a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80271a2:	3b01      	subs	r3, #1
 80271a4:	930a      	str	r3, [sp, #40]	; 0x28
 80271a6:	bf08      	it	eq
 80271a8:	4615      	moveq	r5, r2
 80271aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80271ac:	bf18      	it	ne
 80271ae:	461d      	movne	r5, r3
 80271b0:	e6af      	b.n	8026f12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80271b2:	f111 0a01 	adds.w	sl, r1, #1
 80271b6:	d486      	bmi.n	80270c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80271b8:	45d6      	cmp	lr, sl
 80271ba:	db84      	blt.n	80270c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80271bc:	f110 0a01 	adds.w	sl, r0, #1
 80271c0:	d481      	bmi.n	80270c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80271c2:	4553      	cmp	r3, sl
 80271c4:	f6ff af7f 	blt.w	80270c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80271c8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80271ca:	b21b      	sxth	r3, r3
 80271cc:	9101      	str	r1, [sp, #4]
 80271ce:	4641      	mov	r1, r8
 80271d0:	9300      	str	r3, [sp, #0]
 80271d2:	fa0f f38e 	sxth.w	r3, lr
 80271d6:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80271da:	e9cd c704 	strd	ip, r7, [sp, #16]
 80271de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80271e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80271e2:	f7ff fd93 	bl	8026d0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80271e6:	e76e      	b.n	80270c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80271e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80271ea:	1430      	asrs	r0, r6, #16
 80271ec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80271ee:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80271f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80271f6:	1423      	asrs	r3, r4, #16
 80271f8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80271fc:	fb01 3000 	mla	r0, r1, r0, r3
 8027200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027202:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8027206:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802720a:	8858      	ldrh	r0, [r3, #2]
 802720c:	f1be 0f00 	cmp.w	lr, #0
 8027210:	d00b      	beq.n	802722a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8027212:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027216:	3901      	subs	r1, #1
 8027218:	0049      	lsls	r1, r1, #1
 802721a:	3102      	adds	r1, #2
 802721c:	eb03 0b01 	add.w	fp, r3, r1
 8027220:	5a5b      	ldrh	r3, [r3, r1]
 8027222:	930e      	str	r3, [sp, #56]	; 0x38
 8027224:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027228:	930f      	str	r3, [sp, #60]	; 0x3c
 802722a:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802722e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027232:	fb12 f30e 	smulbb	r3, r2, lr
 8027236:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802723a:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802723e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027242:	10db      	asrs	r3, r3, #3
 8027244:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027248:	ea41 010c 	orr.w	r1, r1, ip
 802724c:	f1ce 0c10 	rsb	ip, lr, #16
 8027250:	ea4b 0000 	orr.w	r0, fp, r0
 8027254:	9f08      	ldr	r7, [sp, #32]
 8027256:	ebac 0c02 	sub.w	ip, ip, r2
 802725a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802725e:	f108 38ff 	add.w	r8, r8, #4294967295
 8027262:	4350      	muls	r0, r2
 8027264:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027268:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802726a:	fb0c 0c01 	mla	ip, ip, r1, r0
 802726e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8027270:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027274:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8027278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802727a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802727e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027282:	0412      	lsls	r2, r2, #16
 8027284:	ea4b 0101 	orr.w	r1, fp, r1
 8027288:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802728c:	fb03 c101 	mla	r1, r3, r1, ip
 8027290:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027294:	4302      	orrs	r2, r0
 8027296:	fb03 1202 	mla	r2, r3, r2, r1
 802729a:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802729e:	0952      	lsrs	r2, r2, #5
 80272a0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80272a4:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 80272a8:	f8b9 2000 	ldrh.w	r2, [r9]
 80272ac:	ea4b 0303 	orr.w	r3, fp, r3
 80272b0:	1211      	asrs	r1, r2, #8
 80272b2:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80272b6:	b29b      	uxth	r3, r3
 80272b8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80272bc:	00d2      	lsls	r2, r2, #3
 80272be:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80272c2:	fb11 f107 	smulbb	r1, r1, r7
 80272c6:	1218      	asrs	r0, r3, #8
 80272c8:	fb1c fc07 	smulbb	ip, ip, r7
 80272cc:	b2d2      	uxtb	r2, r2
 80272ce:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80272d2:	fb12 f207 	smulbb	r2, r2, r7
 80272d6:	fb00 100a 	mla	r0, r0, sl, r1
 80272da:	10d9      	asrs	r1, r3, #3
 80272dc:	00db      	lsls	r3, r3, #3
 80272de:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80272e2:	b280      	uxth	r0, r0
 80272e4:	b2db      	uxtb	r3, r3
 80272e6:	fb01 c10a 	mla	r1, r1, sl, ip
 80272ea:	fb03 230a 	mla	r3, r3, sl, r2
 80272ee:	1c42      	adds	r2, r0, #1
 80272f0:	b289      	uxth	r1, r1
 80272f2:	b29b      	uxth	r3, r3
 80272f4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80272f8:	f101 0c01 	add.w	ip, r1, #1
 80272fc:	1c5a      	adds	r2, r3, #1
 80272fe:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027302:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027306:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802730a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802730c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027310:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027314:	441c      	add	r4, r3
 8027316:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802731a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802731c:	4310      	orrs	r0, r2
 802731e:	441e      	add	r6, r3
 8027320:	ea40 000c 	orr.w	r0, r0, ip
 8027324:	f829 0b02 	strh.w	r0, [r9], #2
 8027328:	e6fa      	b.n	8027120 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802732a:	b013      	add	sp, #76	; 0x4c
 802732c:	ecbd 8b08 	vpop	{d8-d11}
 8027330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027334 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8027334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027338:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 802733c:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8027340:	fb06 5c03 	mla	ip, r6, r3, r5
 8027344:	2e00      	cmp	r6, #0
 8027346:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 802734a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 802734e:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027352:	8808      	ldrh	r0, [r1, #0]
 8027354:	db2e      	blt.n	80273b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8027356:	45b0      	cmp	r8, r6
 8027358:	dd2c      	ble.n	80273b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802735a:	2d00      	cmp	r5, #0
 802735c:	db28      	blt.n	80273b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802735e:	42ab      	cmp	r3, r5
 8027360:	dd26      	ble.n	80273b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8027362:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8027366:	1c6a      	adds	r2, r5, #1
 8027368:	d427      	bmi.n	80273ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802736a:	4293      	cmp	r3, r2
 802736c:	dd25      	ble.n	80273ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802736e:	b324      	cbz	r4, 80273ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027370:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027374:	3601      	adds	r6, #1
 8027376:	d424      	bmi.n	80273c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8027378:	45b0      	cmp	r8, r6
 802737a:	dd22      	ble.n	80273c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802737c:	b31f      	cbz	r7, 80273c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 802737e:	2d00      	cmp	r5, #0
 8027380:	db1d      	blt.n	80273be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8027382:	42ab      	cmp	r3, r5
 8027384:	dd1b      	ble.n	80273be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8027386:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 802738a:	3501      	adds	r5, #1
 802738c:	d405      	bmi.n	802739a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802738e:	42ab      	cmp	r3, r5
 8027390:	dd03      	ble.n	802739a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027392:	b124      	cbz	r4, 802739e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8027394:	3301      	adds	r3, #1
 8027396:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 802739a:	2c0f      	cmp	r4, #15
 802739c:	d801      	bhi.n	80273a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802739e:	2f0f      	cmp	r7, #15
 80273a0:	d914      	bls.n	80273cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 80273a2:	4b27      	ldr	r3, [pc, #156]	; (8027440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 80273a4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80273a8:	4a26      	ldr	r2, [pc, #152]	; (8027444 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 80273aa:	4827      	ldr	r0, [pc, #156]	; (8027448 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 80273ac:	f002 fca0 	bl	8029cf0 <__assert_func>
 80273b0:	4684      	mov	ip, r0
 80273b2:	e7d8      	b.n	8027366 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 80273b4:	4602      	mov	r2, r0
 80273b6:	4684      	mov	ip, r0
 80273b8:	e7dc      	b.n	8027374 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80273ba:	4602      	mov	r2, r0
 80273bc:	e7da      	b.n	8027374 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80273be:	4606      	mov	r6, r0
 80273c0:	e7e3      	b.n	802738a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 80273c2:	4606      	mov	r6, r0
 80273c4:	e7e9      	b.n	802739a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80273c6:	2c0f      	cmp	r4, #15
 80273c8:	d8eb      	bhi.n	80273a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80273ca:	4606      	mov	r6, r0
 80273cc:	fb14 f307 	smulbb	r3, r4, r7
 80273d0:	ea4f 450c 	mov.w	r5, ip, lsl #16
 80273d4:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80273d8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80273dc:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80273e0:	10db      	asrs	r3, r3, #3
 80273e2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80273e6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80273ea:	ea45 0c0c 	orr.w	ip, r5, ip
 80273ee:	f1c7 0510 	rsb	r5, r7, #16
 80273f2:	ea4e 0202 	orr.w	r2, lr, r2
 80273f6:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 80273fa:	1b2d      	subs	r5, r5, r4
 80273fc:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8027400:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8027404:	4354      	muls	r4, r2
 8027406:	fb05 450c 	mla	r5, r5, ip, r4
 802740a:	0404      	lsls	r4, r0, #16
 802740c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027410:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027414:	4320      	orrs	r0, r4
 8027416:	fb03 5400 	mla	r4, r3, r0, r5
 802741a:	0430      	lsls	r0, r6, #16
 802741c:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8027420:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027424:	4330      	orrs	r0, r6
 8027426:	fb07 4000 	mla	r0, r7, r0, r4
 802742a:	0d43      	lsrs	r3, r0, #21
 802742c:	0940      	lsrs	r0, r0, #5
 802742e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027432:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027436:	4318      	orrs	r0, r3
 8027438:	8008      	strh	r0, [r1, #0]
 802743a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802743e:	bf00      	nop
 8027440:	0802e369 	.word	0x0802e369
 8027444:	0802e9df 	.word	0x0802e9df
 8027448:	0802e3ed 	.word	0x0802e3ed

0802744c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802744c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027450:	ed2d 8b08 	vpush	{d8-d11}
 8027454:	b08f      	sub	sp, #60	; 0x3c
 8027456:	461d      	mov	r5, r3
 8027458:	eeb0 aa40 	vmov.f32	s20, s0
 802745c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802745e:	eef0 9a60 	vmov.f32	s19, s1
 8027462:	9107      	str	r1, [sp, #28]
 8027464:	eeb0 9a41 	vmov.f32	s18, s2
 8027468:	6859      	ldr	r1, [r3, #4]
 802746a:	eeb0 8a62 	vmov.f32	s16, s5
 802746e:	920c      	str	r2, [sp, #48]	; 0x30
 8027470:	eef0 8a43 	vmov.f32	s17, s6
 8027474:	681b      	ldr	r3, [r3, #0]
 8027476:	eef0 ba44 	vmov.f32	s23, s8
 802747a:	eeb0 ba64 	vmov.f32	s22, s9
 802747e:	900d      	str	r0, [sp, #52]	; 0x34
 8027480:	eef0 aa45 	vmov.f32	s21, s10
 8027484:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8027488:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802748c:	fb01 2707 	mla	r7, r1, r7, r2
 8027490:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8027494:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027496:	f8d3 8000 	ldr.w	r8, [r3]
 802749a:	9b07      	ldr	r3, [sp, #28]
 802749c:	2b00      	cmp	r3, #0
 802749e:	dc03      	bgt.n	80274a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80274a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80274a2:	2b00      	cmp	r3, #0
 80274a4:	f340 8182 	ble.w	80277ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80274a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80274aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80274ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80274b2:	1e48      	subs	r0, r1, #1
 80274b4:	f102 3cff 	add.w	ip, r2, #4294967295
 80274b8:	2d00      	cmp	r5, #0
 80274ba:	f340 809b 	ble.w	80275f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 80274be:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80274c2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80274c6:	d406      	bmi.n	80274d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80274c8:	4586      	cmp	lr, r0
 80274ca:	da04      	bge.n	80274d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80274cc:	2b00      	cmp	r3, #0
 80274ce:	db02      	blt.n	80274d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80274d0:	4563      	cmp	r3, ip
 80274d2:	f2c0 8090 	blt.w	80275f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80274d6:	f11e 0e01 	adds.w	lr, lr, #1
 80274da:	f100 8084 	bmi.w	80275e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80274de:	4571      	cmp	r1, lr
 80274e0:	f2c0 8081 	blt.w	80275e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80274e4:	3301      	adds	r3, #1
 80274e6:	d47e      	bmi.n	80275e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80274e8:	429a      	cmp	r2, r3
 80274ea:	db7c      	blt.n	80275e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80274ec:	46aa      	mov	sl, r5
 80274ee:	46b9      	mov	r9, r7
 80274f0:	f1ba 0f00 	cmp.w	sl, #0
 80274f4:	f340 8099 	ble.w	802762a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80274f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80274fa:	1421      	asrs	r1, r4, #16
 80274fc:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027500:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027504:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027508:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802750c:	f100 80d1 	bmi.w	80276b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027510:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027514:	4559      	cmp	r1, fp
 8027516:	f280 80cc 	bge.w	80276b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802751a:	2800      	cmp	r0, #0
 802751c:	f2c0 80c9 	blt.w	80276b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027520:	f103 3bff 	add.w	fp, r3, #4294967295
 8027524:	4558      	cmp	r0, fp
 8027526:	f280 80c4 	bge.w	80276b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802752a:	fa0f fe8e 	sxth.w	lr, lr
 802752e:	fb00 110e 	mla	r1, r0, lr, r1
 8027532:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027536:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802753a:	8841      	ldrh	r1, [r0, #2]
 802753c:	f1bc 0f00 	cmp.w	ip, #0
 8027540:	d00b      	beq.n	802755a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8027542:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8027546:	3b01      	subs	r3, #1
 8027548:	005b      	lsls	r3, r3, #1
 802754a:	3302      	adds	r3, #2
 802754c:	eb00 0e03 	add.w	lr, r0, r3
 8027550:	5ac3      	ldrh	r3, [r0, r3]
 8027552:	9308      	str	r3, [sp, #32]
 8027554:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8027558:	9309      	str	r3, [sp, #36]	; 0x24
 802755a:	ea4f 400b 	mov.w	r0, fp, lsl #16
 802755e:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027562:	fb12 f30c 	smulbb	r3, r2, ip
 8027566:	f1cc 0e10 	rsb	lr, ip, #16
 802756a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802756e:	10db      	asrs	r3, r3, #3
 8027570:	ebae 0e02 	sub.w	lr, lr, r2
 8027574:	ea40 000b 	orr.w	r0, r0, fp
 8027578:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802757c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027580:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027584:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027588:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802758c:	ea4b 0101 	orr.w	r1, fp, r1
 8027590:	4351      	muls	r1, r2
 8027592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027594:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027598:	0410      	lsls	r0, r2, #16
 802759a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802759e:	9908      	ldr	r1, [sp, #32]
 80275a0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80275a4:	4310      	orrs	r0, r2
 80275a6:	9a08      	ldr	r2, [sp, #32]
 80275a8:	0412      	lsls	r2, r2, #16
 80275aa:	fb03 e000 	mla	r0, r3, r0, lr
 80275ae:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80275b2:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80275b6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80275ba:	ea42 020e 	orr.w	r2, r2, lr
 80275be:	fb03 0302 	mla	r3, r3, r2, r0
 80275c2:	0d5a      	lsrs	r2, r3, #21
 80275c4:	095b      	lsrs	r3, r3, #5
 80275c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80275ca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80275ce:	4313      	orrs	r3, r2
 80275d0:	f8a9 3000 	strh.w	r3, [r9]
 80275d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80275d6:	f109 0902 	add.w	r9, r9, #2
 80275da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80275de:	441c      	add	r4, r3
 80275e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80275e2:	441e      	add	r6, r3
 80275e4:	e784      	b.n	80274f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80275e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80275e8:	3d01      	subs	r5, #1
 80275ea:	3702      	adds	r7, #2
 80275ec:	441c      	add	r4, r3
 80275ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80275f0:	441e      	add	r6, r3
 80275f2:	e761      	b.n	80274b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80275f4:	d01d      	beq.n	8027632 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80275f6:	1e6b      	subs	r3, r5, #1
 80275f8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80275fa:	fb00 4003 	mla	r0, r0, r3, r4
 80275fe:	1400      	asrs	r0, r0, #16
 8027600:	f53f af74 	bmi.w	80274ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027604:	3901      	subs	r1, #1
 8027606:	4288      	cmp	r0, r1
 8027608:	f6bf af70 	bge.w	80274ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802760c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802760e:	fb01 6303 	mla	r3, r1, r3, r6
 8027612:	141b      	asrs	r3, r3, #16
 8027614:	f53f af6a 	bmi.w	80274ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027618:	3a01      	subs	r2, #1
 802761a:	4293      	cmp	r3, r2
 802761c:	f6bf af66 	bge.w	80274ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027620:	46a9      	mov	r9, r5
 8027622:	46ba      	mov	sl, r7
 8027624:	f1b9 0f00 	cmp.w	r9, #0
 8027628:	dc5b      	bgt.n	80276e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802762a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802762e:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8027632:	9b07      	ldr	r3, [sp, #28]
 8027634:	2b00      	cmp	r3, #0
 8027636:	f340 80b9 	ble.w	80277ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802763a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802763e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027640:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027644:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027648:	eef0 6a48 	vmov.f32	s13, s16
 802764c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027650:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027654:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027658:	ee16 4a90 	vmov	r4, s13
 802765c:	eef0 6a68 	vmov.f32	s13, s17
 8027660:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027664:	ee16 6a90 	vmov	r6, s13
 8027668:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802766c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027670:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027674:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027678:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802767c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027680:	ee18 2a10 	vmov	r2, s16
 8027684:	eeb0 8a47 	vmov.f32	s16, s14
 8027688:	fb92 f3f3 	sdiv	r3, r2, r3
 802768c:	ee18 2a90 	vmov	r2, s17
 8027690:	9323      	str	r3, [sp, #140]	; 0x8c
 8027692:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027694:	eef0 8a67 	vmov.f32	s17, s15
 8027698:	fb92 f3f3 	sdiv	r3, r2, r3
 802769c:	9324      	str	r3, [sp, #144]	; 0x90
 802769e:	9b07      	ldr	r3, [sp, #28]
 80276a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80276a2:	3b01      	subs	r3, #1
 80276a4:	9307      	str	r3, [sp, #28]
 80276a6:	bf08      	it	eq
 80276a8:	4615      	moveq	r5, r2
 80276aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80276ac:	bf18      	it	ne
 80276ae:	461d      	movne	r5, r3
 80276b0:	e6f3      	b.n	802749a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80276b2:	f111 0b01 	adds.w	fp, r1, #1
 80276b6:	d48d      	bmi.n	80275d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80276b8:	45de      	cmp	lr, fp
 80276ba:	db8b      	blt.n	80275d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80276bc:	f110 0b01 	adds.w	fp, r0, #1
 80276c0:	d488      	bmi.n	80275d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80276c2:	455b      	cmp	r3, fp
 80276c4:	db86      	blt.n	80275d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80276c6:	b21b      	sxth	r3, r3
 80276c8:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80276cc:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80276d0:	9300      	str	r3, [sp, #0]
 80276d2:	4642      	mov	r2, r8
 80276d4:	fa0f f38e 	sxth.w	r3, lr
 80276d8:	4649      	mov	r1, r9
 80276da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80276dc:	f7ff fe2a 	bl	8027334 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80276e0:	e778      	b.n	80275d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80276e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80276e4:	1420      	asrs	r0, r4, #16
 80276e6:	1431      	asrs	r1, r6, #16
 80276e8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80276ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80276f0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80276f4:	fb03 0101 	mla	r1, r3, r1, r0
 80276f8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80276fc:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8027700:	8841      	ldrh	r1, [r0, #2]
 8027702:	f1be 0f00 	cmp.w	lr, #0
 8027706:	d00b      	beq.n	8027720 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8027708:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802770c:	3b01      	subs	r3, #1
 802770e:	005b      	lsls	r3, r3, #1
 8027710:	3302      	adds	r3, #2
 8027712:	eb00 0b03 	add.w	fp, r0, r3
 8027716:	5ac3      	ldrh	r3, [r0, r3]
 8027718:	930a      	str	r3, [sp, #40]	; 0x28
 802771a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802771e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027720:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8027724:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027728:	fb12 f30e 	smulbb	r3, r2, lr
 802772c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027730:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027734:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027738:	10db      	asrs	r3, r3, #3
 802773a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802773e:	ea40 000c 	orr.w	r0, r0, ip
 8027742:	f1ce 0c10 	rsb	ip, lr, #16
 8027746:	ea4b 0101 	orr.w	r1, fp, r1
 802774a:	f109 39ff 	add.w	r9, r9, #4294967295
 802774e:	ebac 0c02 	sub.w	ip, ip, r2
 8027752:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027756:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802775a:	4351      	muls	r1, r2
 802775c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802775e:	fb0c 1c00 	mla	ip, ip, r0, r1
 8027762:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027764:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027768:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802776c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802776e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027772:	0412      	lsls	r2, r2, #16
 8027774:	ea4b 0000 	orr.w	r0, fp, r0
 8027778:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802777c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027780:	fb03 c000 	mla	r0, r3, r0, ip
 8027784:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027788:	ea42 0b0b 	orr.w	fp, r2, fp
 802778c:	fb03 000b 	mla	r0, r3, fp, r0
 8027790:	0d43      	lsrs	r3, r0, #21
 8027792:	0940      	lsrs	r0, r0, #5
 8027794:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027798:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802779c:	4318      	orrs	r0, r3
 802779e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80277a0:	441c      	add	r4, r3
 80277a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80277a4:	f82a 0b02 	strh.w	r0, [sl], #2
 80277a8:	441e      	add	r6, r3
 80277aa:	e73b      	b.n	8027624 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80277ac:	b00f      	add	sp, #60	; 0x3c
 80277ae:	ecbd 8b08 	vpop	{d8-d11}
 80277b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080277b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80277b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277bc:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80277c0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80277c4:	fb04 5603 	mla	r6, r4, r3, r5
 80277c8:	2c00      	cmp	r4, #0
 80277ca:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80277ce:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80277d2:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80277d6:	db36      	blt.n	8027846 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80277d8:	45a6      	cmp	lr, r4
 80277da:	dd34      	ble.n	8027846 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80277dc:	2d00      	cmp	r5, #0
 80277de:	db30      	blt.n	8027842 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80277e0:	42ab      	cmp	r3, r5
 80277e2:	dd2e      	ble.n	8027842 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80277e4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80277e8:	1c6e      	adds	r6, r5, #1
 80277ea:	d42f      	bmi.n	802784c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 80277ec:	42b3      	cmp	r3, r6
 80277ee:	dd2d      	ble.n	802784c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 80277f0:	b370      	cbz	r0, 8027850 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 80277f2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80277f6:	3401      	adds	r4, #1
 80277f8:	d42e      	bmi.n	8027858 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80277fa:	45a6      	cmp	lr, r4
 80277fc:	dd2c      	ble.n	8027858 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80277fe:	b377      	cbz	r7, 802785e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 8027800:	2d00      	cmp	r5, #0
 8027802:	db27      	blt.n	8027854 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8027804:	42ab      	cmp	r3, r5
 8027806:	dd25      	ble.n	8027854 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8027808:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802780c:	3501      	adds	r5, #1
 802780e:	d429      	bmi.n	8027864 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8027810:	42ab      	cmp	r3, r5
 8027812:	dd27      	ble.n	8027864 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8027814:	b340      	cbz	r0, 8027868 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8027816:	3301      	adds	r3, #1
 8027818:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 802781c:	280f      	cmp	r0, #15
 802781e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8027822:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027826:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802782a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802782e:	d801      	bhi.n	8027834 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8027830:	2f0f      	cmp	r7, #15
 8027832:	d91b      	bls.n	802786c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8027834:	4b8d      	ldr	r3, [pc, #564]	; (8027a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8027836:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802783a:	4a8d      	ldr	r2, [pc, #564]	; (8027a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 802783c:	488d      	ldr	r0, [pc, #564]	; (8027a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 802783e:	f002 fa57 	bl	8029cf0 <__assert_func>
 8027842:	2200      	movs	r2, #0
 8027844:	e7d0      	b.n	80277e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 8027846:	2600      	movs	r6, #0
 8027848:	4632      	mov	r2, r6
 802784a:	e7d4      	b.n	80277f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 802784c:	2600      	movs	r6, #0
 802784e:	e7d2      	b.n	80277f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8027850:	4606      	mov	r6, r0
 8027852:	e7d0      	b.n	80277f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8027854:	2400      	movs	r4, #0
 8027856:	e7d9      	b.n	802780c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8027858:	2300      	movs	r3, #0
 802785a:	461c      	mov	r4, r3
 802785c:	e7de      	b.n	802781c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 802785e:	463b      	mov	r3, r7
 8027860:	463c      	mov	r4, r7
 8027862:	e7db      	b.n	802781c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8027864:	2300      	movs	r3, #0
 8027866:	e7d9      	b.n	802781c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8027868:	4603      	mov	r3, r0
 802786a:	e7d7      	b.n	802781c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 802786c:	b280      	uxth	r0, r0
 802786e:	b2bf      	uxth	r7, r7
 8027870:	fb07 fe00 	mul.w	lr, r7, r0
 8027874:	0100      	lsls	r0, r0, #4
 8027876:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802787a:	eba0 0c0e 	sub.w	ip, r0, lr
 802787e:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8027882:	b2bf      	uxth	r7, r7
 8027884:	fa1f fc8c 	uxth.w	ip, ip
 8027888:	1bed      	subs	r5, r5, r7
 802788a:	fb0a f00c 	mul.w	r0, sl, ip
 802788e:	b2ad      	uxth	r5, r5
 8027890:	fb0b 0005 	mla	r0, fp, r5, r0
 8027894:	fb07 0009 	mla	r0, r7, r9, r0
 8027898:	fb0e 0008 	mla	r0, lr, r8, r0
 802789c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80278a0:	9001      	str	r0, [sp, #4]
 80278a2:	2800      	cmp	r0, #0
 80278a4:	f000 80de 	beq.w	8027a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 80278a8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80278ac:	d018      	beq.n	80278e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 80278ae:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80278b2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80278b6:	fb0b f000 	mul.w	r0, fp, r0
 80278ba:	fb0b fb02 	mul.w	fp, fp, r2
 80278be:	0a02      	lsrs	r2, r0, #8
 80278c0:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80278c4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80278c8:	4402      	add	r2, r0
 80278ca:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80278ce:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80278d2:	0a12      	lsrs	r2, r2, #8
 80278d4:	0a00      	lsrs	r0, r0, #8
 80278d6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80278da:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80278de:	4302      	orrs	r2, r0
 80278e0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80278e4:	d01a      	beq.n	802791c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 80278e6:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80278ea:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80278ee:	fb0a f000 	mul.w	r0, sl, r0
 80278f2:	fb0a fa06 	mul.w	sl, sl, r6
 80278f6:	0a06      	lsrs	r6, r0, #8
 80278f8:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80278fc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027900:	4406      	add	r6, r0
 8027902:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027906:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802790a:	0a36      	lsrs	r6, r6, #8
 802790c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027910:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027914:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027918:	ea46 060a 	orr.w	r6, r6, sl
 802791c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027920:	d01b      	beq.n	802795a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 8027922:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027926:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802792a:	fb09 fa0a 	mul.w	sl, r9, sl
 802792e:	fb09 f004 	mul.w	r0, r9, r4
 8027932:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8027936:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802793a:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802793e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027942:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8027946:	4454      	add	r4, sl
 8027948:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802794c:	0a24      	lsrs	r4, r4, #8
 802794e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027952:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027956:	ea44 0409 	orr.w	r4, r4, r9
 802795a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802795e:	d01b      	beq.n	8027998 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 8027960:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8027964:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027968:	fb08 f909 	mul.w	r9, r8, r9
 802796c:	fb08 f003 	mul.w	r0, r8, r3
 8027970:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8027974:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027978:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802797c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027980:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8027984:	444b      	add	r3, r9
 8027986:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802798a:	0a1b      	lsrs	r3, r3, #8
 802798c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027990:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027994:	ea43 0308 	orr.w	r3, r3, r8
 8027998:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802799c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80279a0:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 80279a4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80279a8:	fb0c f808 	mul.w	r8, ip, r8
 80279ac:	8808      	ldrh	r0, [r1, #0]
 80279ae:	fb0c f606 	mul.w	r6, ip, r6
 80279b2:	fb05 8909 	mla	r9, r5, r9, r8
 80279b6:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80279ba:	fb05 6502 	mla	r5, r5, r2, r6
 80279be:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80279c2:	fb07 9908 	mla	r9, r7, r8, r9
 80279c6:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80279ca:	fb07 5704 	mla	r7, r7, r4, r5
 80279ce:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80279d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80279d6:	b2b6      	uxth	r6, r6
 80279d8:	fb0e 9808 	mla	r8, lr, r8, r9
 80279dc:	9a01      	ldr	r2, [sp, #4]
 80279de:	fb0e 7e03 	mla	lr, lr, r3, r7
 80279e2:	1205      	asrs	r5, r0, #8
 80279e4:	4372      	muls	r2, r6
 80279e6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80279ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80279ee:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80279f2:	1c53      	adds	r3, r2, #1
 80279f4:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80279f8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80279fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027a00:	ea48 0e0e 	orr.w	lr, r8, lr
 8027a04:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8027a08:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8027a0c:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8027a10:	b2db      	uxtb	r3, r3
 8027a12:	fb12 f206 	smulbb	r2, r2, r6
 8027a16:	fa5f fe8e 	uxtb.w	lr, lr
 8027a1a:	fb14 f406 	smulbb	r4, r4, r6
 8027a1e:	fb05 2503 	mla	r5, r5, r3, r2
 8027a22:	10c2      	asrs	r2, r0, #3
 8027a24:	fb1e fe06 	smulbb	lr, lr, r6
 8027a28:	00c0      	lsls	r0, r0, #3
 8027a2a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027a2e:	b2ad      	uxth	r5, r5
 8027a30:	b2c0      	uxtb	r0, r0
 8027a32:	fb02 4203 	mla	r2, r2, r3, r4
 8027a36:	fb00 e303 	mla	r3, r0, r3, lr
 8027a3a:	b294      	uxth	r4, r2
 8027a3c:	b298      	uxth	r0, r3
 8027a3e:	1c6b      	adds	r3, r5, #1
 8027a40:	1c62      	adds	r2, r4, #1
 8027a42:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027a46:	1c43      	adds	r3, r0, #1
 8027a48:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027a4c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027a50:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027a54:	0952      	lsrs	r2, r2, #5
 8027a56:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027a5a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027a5e:	432b      	orrs	r3, r5
 8027a60:	4313      	orrs	r3, r2
 8027a62:	800b      	strh	r3, [r1, #0]
 8027a64:	b003      	add	sp, #12
 8027a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a6a:	bf00      	nop
 8027a6c:	0802e369 	.word	0x0802e369
 8027a70:	0802e936 	.word	0x0802e936
 8027a74:	0802e3ed 	.word	0x0802e3ed

08027a78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a7c:	ed2d 8b08 	vpush	{d8-d11}
 8027a80:	b09d      	sub	sp, #116	; 0x74
 8027a82:	eeb0 aa40 	vmov.f32	s20, s0
 8027a86:	eef0 9a60 	vmov.f32	s19, s1
 8027a8a:	9219      	str	r2, [sp, #100]	; 0x64
 8027a8c:	eeb0 9a41 	vmov.f32	s18, s2
 8027a90:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8027a92:	eeb0 8a62 	vmov.f32	s16, s5
 8027a96:	9307      	str	r3, [sp, #28]
 8027a98:	eef0 8a43 	vmov.f32	s17, s6
 8027a9c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8027aa0:	eef0 ba44 	vmov.f32	s23, s8
 8027aa4:	901b      	str	r0, [sp, #108]	; 0x6c
 8027aa6:	eeb0 ba64 	vmov.f32	s22, s9
 8027aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8027aac:	eef0 aa45 	vmov.f32	s21, s10
 8027ab0:	6850      	ldr	r0, [r2, #4]
 8027ab2:	9117      	str	r1, [sp, #92]	; 0x5c
 8027ab4:	6812      	ldr	r2, [r2, #0]
 8027ab6:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8027aba:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8027abe:	fb00 1303 	mla	r3, r0, r3, r1
 8027ac2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8027ac8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027aca:	681b      	ldr	r3, [r3, #0]
 8027acc:	9310      	str	r3, [sp, #64]	; 0x40
 8027ace:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8027ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8027ad4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027ad6:	2b00      	cmp	r3, #0
 8027ad8:	dc03      	bgt.n	8027ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027ada:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027adc:	2b00      	cmp	r3, #0
 8027ade:	f340 8375 	ble.w	80281cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8027ae2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027ae4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027ae8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027aec:	1e48      	subs	r0, r1, #1
 8027aee:	1e57      	subs	r7, r2, #1
 8027af0:	9b07      	ldr	r3, [sp, #28]
 8027af2:	2b00      	cmp	r3, #0
 8027af4:	f340 818e 	ble.w	8027e14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8027af8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027afc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027b00:	d406      	bmi.n	8027b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027b02:	4584      	cmp	ip, r0
 8027b04:	da04      	bge.n	8027b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027b06:	2b00      	cmp	r3, #0
 8027b08:	db02      	blt.n	8027b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027b0a:	42bb      	cmp	r3, r7
 8027b0c:	f2c0 8183 	blt.w	8027e16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027b10:	f11c 0c01 	adds.w	ip, ip, #1
 8027b14:	f100 8173 	bmi.w	8027dfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027b18:	4561      	cmp	r1, ip
 8027b1a:	f2c0 8170 	blt.w	8027dfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027b1e:	3301      	adds	r3, #1
 8027b20:	f100 816d 	bmi.w	8027dfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027b24:	429a      	cmp	r2, r3
 8027b26:	f2c0 816a 	blt.w	8027dfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027b2a:	9b07      	ldr	r3, [sp, #28]
 8027b2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027b2e:	9318      	str	r3, [sp, #96]	; 0x60
 8027b30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027b32:	2b00      	cmp	r3, #0
 8027b34:	f340 818c 	ble.w	8027e50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8027b38:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8027b3a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027b3e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027b40:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027b44:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027b48:	1422      	asrs	r2, r4, #16
 8027b4a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027b4e:	689b      	ldr	r3, [r3, #8]
 8027b50:	f100 81cd 	bmi.w	8027eee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027b54:	f103 38ff 	add.w	r8, r3, #4294967295
 8027b58:	4542      	cmp	r2, r8
 8027b5a:	f280 81c8 	bge.w	8027eee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027b5e:	f1bc 0f00 	cmp.w	ip, #0
 8027b62:	f2c0 81c4 	blt.w	8027eee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027b66:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027b6a:	45c4      	cmp	ip, r8
 8027b6c:	f280 81bf 	bge.w	8027eee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027b70:	b21b      	sxth	r3, r3
 8027b72:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027b74:	fb0c 2203 	mla	r2, ip, r3, r2
 8027b78:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027b7c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027b80:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027b84:	2800      	cmp	r0, #0
 8027b86:	f000 81a9 	beq.w	8027edc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8027b8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027b8e:	950c      	str	r5, [sp, #48]	; 0x30
 8027b90:	0e2d      	lsrs	r5, r5, #24
 8027b92:	9513      	str	r5, [sp, #76]	; 0x4c
 8027b94:	b181      	cbz	r1, 8027bb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027b96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027b9a:	3b01      	subs	r3, #1
 8027b9c:	009b      	lsls	r3, r3, #2
 8027b9e:	3304      	adds	r3, #4
 8027ba0:	eb08 0c03 	add.w	ip, r8, r3
 8027ba4:	f858 3003 	ldr.w	r3, [r8, r3]
 8027ba8:	9308      	str	r3, [sp, #32]
 8027baa:	0e1b      	lsrs	r3, r3, #24
 8027bac:	9311      	str	r3, [sp, #68]	; 0x44
 8027bae:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027bb2:	930d      	str	r3, [sp, #52]	; 0x34
 8027bb4:	0e1b      	lsrs	r3, r3, #24
 8027bb6:	9314      	str	r3, [sp, #80]	; 0x50
 8027bb8:	b280      	uxth	r0, r0
 8027bba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027bbc:	b289      	uxth	r1, r1
 8027bbe:	fb00 f901 	mul.w	r9, r0, r1
 8027bc2:	0100      	lsls	r0, r0, #4
 8027bc4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8027bc8:	eba0 0809 	sub.w	r8, r0, r9
 8027bcc:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027bd0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027bd2:	b289      	uxth	r1, r1
 8027bd4:	fa1f f888 	uxth.w	r8, r8
 8027bd8:	1a5b      	subs	r3, r3, r1
 8027bda:	fb08 f000 	mul.w	r0, r8, r0
 8027bde:	b29b      	uxth	r3, r3
 8027be0:	fb03 000e 	mla	r0, r3, lr, r0
 8027be4:	fb01 0005 	mla	r0, r1, r5, r0
 8027be8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027bea:	fb09 0005 	mla	r0, r9, r5, r0
 8027bee:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027bf2:	2800      	cmp	r0, #0
 8027bf4:	f000 80fa 	beq.w	8027dec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027bf8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027bfc:	d01b      	beq.n	8027c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8027bfe:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8027c02:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027c06:	fb0e fa0a 	mul.w	sl, lr, sl
 8027c0a:	fb0e fe02 	mul.w	lr, lr, r2
 8027c0e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027c12:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027c16:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027c1a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027c1e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027c22:	4452      	add	r2, sl
 8027c24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027c28:	0a12      	lsrs	r2, r2, #8
 8027c2a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027c2e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027c32:	ea42 020c 	orr.w	r2, r2, ip
 8027c36:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027c38:	2dff      	cmp	r5, #255	; 0xff
 8027c3a:	d021      	beq.n	8027c80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8027c3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027c3e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027c42:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027c44:	fb05 fb0b 	mul.w	fp, r5, fp
 8027c48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027c4a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027c4e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027c50:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027c54:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027c58:	fb05 fa0a 	mul.w	sl, r5, sl
 8027c5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027c60:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027c64:	44de      	add	lr, fp
 8027c66:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027c6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027c6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027c72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027c76:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027c7a:	ea4e 050a 	orr.w	r5, lr, sl
 8027c7e:	950c      	str	r5, [sp, #48]	; 0x30
 8027c80:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027c82:	2dff      	cmp	r5, #255	; 0xff
 8027c84:	d021      	beq.n	8027cca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8027c86:	9d08      	ldr	r5, [sp, #32]
 8027c88:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027c8c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027c8e:	fb05 fb0b 	mul.w	fp, r5, fp
 8027c92:	9d08      	ldr	r5, [sp, #32]
 8027c94:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027c98:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027c9a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027c9e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027ca2:	fb05 fa0a 	mul.w	sl, r5, sl
 8027ca6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027caa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027cae:	44de      	add	lr, fp
 8027cb0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027cb4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027cb8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027cbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027cc0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027cc4:	ea4e 050a 	orr.w	r5, lr, sl
 8027cc8:	9508      	str	r5, [sp, #32]
 8027cca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027ccc:	2dff      	cmp	r5, #255	; 0xff
 8027cce:	d021      	beq.n	8027d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8027cd0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027cd2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027cd6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027cd8:	fb05 fb0b 	mul.w	fp, r5, fp
 8027cdc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027cde:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027ce2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027ce4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027ce8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027cec:	fb05 fa0a 	mul.w	sl, r5, sl
 8027cf0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027cf4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027cf8:	44de      	add	lr, fp
 8027cfa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027cfe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027d02:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027d06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027d0a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027d0e:	ea4e 050a 	orr.w	r5, lr, sl
 8027d12:	950d      	str	r5, [sp, #52]	; 0x34
 8027d14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027d16:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027d1a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027d1e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027d22:	9d08      	ldr	r5, [sp, #32]
 8027d24:	fb08 fc0c 	mul.w	ip, r8, ip
 8027d28:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027d2c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027d30:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027d32:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027d36:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027d3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027d3c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027d40:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027d44:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027d46:	fb08 f80e 	mul.w	r8, r8, lr
 8027d4a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d4e:	fb03 8202 	mla	r2, r3, r2, r8
 8027d52:	9b08      	ldr	r3, [sp, #32]
 8027d54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d58:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8027d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027d5e:	fb01 220a 	mla	r2, r1, sl, r2
 8027d62:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8027d66:	883b      	ldrh	r3, [r7, #0]
 8027d68:	fb09 2901 	mla	r9, r9, r1, r2
 8027d6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027d6e:	1219      	asrs	r1, r3, #8
 8027d70:	4342      	muls	r2, r0
 8027d72:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027d76:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027d7a:	1c50      	adds	r0, r2, #1
 8027d7c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027d80:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027d84:	ea4c 0c09 	orr.w	ip, ip, r9
 8027d88:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027d8c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8027d90:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8027d94:	fa5f fc8c 	uxtb.w	ip, ip
 8027d98:	fb12 f205 	smulbb	r2, r2, r5
 8027d9c:	b2c0      	uxtb	r0, r0
 8027d9e:	fb1c fc05 	smulbb	ip, ip, r5
 8027da2:	fb01 2100 	mla	r1, r1, r0, r2
 8027da6:	10da      	asrs	r2, r3, #3
 8027da8:	fb1e fe05 	smulbb	lr, lr, r5
 8027dac:	00db      	lsls	r3, r3, #3
 8027dae:	b289      	uxth	r1, r1
 8027db0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027db4:	b2db      	uxtb	r3, r3
 8027db6:	fb02 e200 	mla	r2, r2, r0, lr
 8027dba:	fb03 c300 	mla	r3, r3, r0, ip
 8027dbe:	b292      	uxth	r2, r2
 8027dc0:	fa1f fc83 	uxth.w	ip, r3
 8027dc4:	1c4b      	adds	r3, r1, #1
 8027dc6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027dca:	f10c 0301 	add.w	r3, ip, #1
 8027dce:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8027dd2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8027dd6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027dda:	430b      	orrs	r3, r1
 8027ddc:	1c51      	adds	r1, r2, #1
 8027dde:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027de2:	0952      	lsrs	r2, r2, #5
 8027de4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027de8:	4313      	orrs	r3, r2
 8027dea:	803b      	strh	r3, [r7, #0]
 8027dec:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027dee:	3702      	adds	r7, #2
 8027df0:	441c      	add	r4, r3
 8027df2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027df4:	441e      	add	r6, r3
 8027df6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027df8:	3b01      	subs	r3, #1
 8027dfa:	9318      	str	r3, [sp, #96]	; 0x60
 8027dfc:	e698      	b.n	8027b30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8027dfe:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027e00:	441c      	add	r4, r3
 8027e02:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027e04:	441e      	add	r6, r3
 8027e06:	9b07      	ldr	r3, [sp, #28]
 8027e08:	3b01      	subs	r3, #1
 8027e0a:	9307      	str	r3, [sp, #28]
 8027e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027e0e:	3302      	adds	r3, #2
 8027e10:	930a      	str	r3, [sp, #40]	; 0x28
 8027e12:	e66d      	b.n	8027af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027e14:	d023      	beq.n	8027e5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8027e16:	9b07      	ldr	r3, [sp, #28]
 8027e18:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8027e1a:	3b01      	subs	r3, #1
 8027e1c:	fb00 4003 	mla	r0, r0, r3, r4
 8027e20:	1400      	asrs	r0, r0, #16
 8027e22:	f53f ae82 	bmi.w	8027b2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027e26:	3901      	subs	r1, #1
 8027e28:	4288      	cmp	r0, r1
 8027e2a:	f6bf ae7e 	bge.w	8027b2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027e2e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8027e30:	fb01 6303 	mla	r3, r1, r3, r6
 8027e34:	141b      	asrs	r3, r3, #16
 8027e36:	f53f ae78 	bmi.w	8027b2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027e3a:	3a01      	subs	r2, #1
 8027e3c:	4293      	cmp	r3, r2
 8027e3e:	f6bf ae74 	bge.w	8027b2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027e42:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027e46:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8027e4a:	f1bb 0f00 	cmp.w	fp, #0
 8027e4e:	dc6c      	bgt.n	8027f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8027e50:	9b07      	ldr	r3, [sp, #28]
 8027e52:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027e58:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027e5c:	930a      	str	r3, [sp, #40]	; 0x28
 8027e5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027e60:	2b00      	cmp	r3, #0
 8027e62:	f340 81b3 	ble.w	80281cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8027e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027e6a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027e6c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027e70:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027e74:	eef0 6a48 	vmov.f32	s13, s16
 8027e78:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027e7c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027e80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027e84:	ee16 4a90 	vmov	r4, s13
 8027e88:	eef0 6a68 	vmov.f32	s13, s17
 8027e8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027e90:	ee16 6a90 	vmov	r6, s13
 8027e94:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027e98:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027e9c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027ea0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027ea4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027ea8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027eac:	ee18 2a10 	vmov	r2, s16
 8027eb0:	eeb0 8a47 	vmov.f32	s16, s14
 8027eb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8027eb8:	ee18 2a90 	vmov	r2, s17
 8027ebc:	9331      	str	r3, [sp, #196]	; 0xc4
 8027ebe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027ec0:	eef0 8a67 	vmov.f32	s17, s15
 8027ec4:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ec8:	9332      	str	r3, [sp, #200]	; 0xc8
 8027eca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027ecc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8027ece:	3b01      	subs	r3, #1
 8027ed0:	9317      	str	r3, [sp, #92]	; 0x5c
 8027ed2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027ed4:	bf08      	it	eq
 8027ed6:	4613      	moveq	r3, r2
 8027ed8:	9307      	str	r3, [sp, #28]
 8027eda:	e5fb      	b.n	8027ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8027edc:	2900      	cmp	r1, #0
 8027ede:	f43f ae6b 	beq.w	8027bb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027ee2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027ee6:	9308      	str	r3, [sp, #32]
 8027ee8:	0e1b      	lsrs	r3, r3, #24
 8027eea:	9311      	str	r3, [sp, #68]	; 0x44
 8027eec:	e664      	b.n	8027bb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027eee:	f112 0801 	adds.w	r8, r2, #1
 8027ef2:	f53f af7b 	bmi.w	8027dec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027ef6:	4543      	cmp	r3, r8
 8027ef8:	f6ff af78 	blt.w	8027dec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027efc:	f11c 0801 	adds.w	r8, ip, #1
 8027f00:	f53f af74 	bmi.w	8027dec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027f04:	45c6      	cmp	lr, r8
 8027f06:	f6ff af71 	blt.w	8027dec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027f0a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8027f0c:	b21b      	sxth	r3, r3
 8027f0e:	9201      	str	r2, [sp, #4]
 8027f10:	fa0f f28e 	sxth.w	r2, lr
 8027f14:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8027f18:	e9cd c002 	strd	ip, r0, [sp, #8]
 8027f1c:	9200      	str	r2, [sp, #0]
 8027f1e:	4639      	mov	r1, r7
 8027f20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027f22:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027f24:	f7ff fc48 	bl	80277b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8027f28:	e760      	b.n	8027dec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027f2a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027f2c:	1427      	asrs	r7, r4, #16
 8027f2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027f30:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027f34:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027f38:	1433      	asrs	r3, r6, #16
 8027f3a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027f3e:	fb01 7303 	mla	r3, r1, r3, r7
 8027f42:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8027f46:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027f4a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027f4e:	2a00      	cmp	r2, #0
 8027f50:	f000 8133 	beq.w	80281ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8027f54:	687d      	ldr	r5, [r7, #4]
 8027f56:	950e      	str	r5, [sp, #56]	; 0x38
 8027f58:	0e2d      	lsrs	r5, r5, #24
 8027f5a:	9515      	str	r5, [sp, #84]	; 0x54
 8027f5c:	b178      	cbz	r0, 8027f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8027f5e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8027f62:	3901      	subs	r1, #1
 8027f64:	0089      	lsls	r1, r1, #2
 8027f66:	3104      	adds	r1, #4
 8027f68:	eb07 0e01 	add.w	lr, r7, r1
 8027f6c:	5879      	ldr	r1, [r7, r1]
 8027f6e:	9109      	str	r1, [sp, #36]	; 0x24
 8027f70:	0e09      	lsrs	r1, r1, #24
 8027f72:	9112      	str	r1, [sp, #72]	; 0x48
 8027f74:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027f78:	910f      	str	r1, [sp, #60]	; 0x3c
 8027f7a:	0e09      	lsrs	r1, r1, #24
 8027f7c:	9116      	str	r1, [sp, #88]	; 0x58
 8027f7e:	b292      	uxth	r2, r2
 8027f80:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027f82:	b280      	uxth	r0, r0
 8027f84:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027f86:	fb02 f800 	mul.w	r8, r2, r0
 8027f8a:	0112      	lsls	r2, r2, #4
 8027f8c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8027f90:	eba2 0e08 	sub.w	lr, r2, r8
 8027f94:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027f98:	b280      	uxth	r0, r0
 8027f9a:	fa1f fe8e 	uxth.w	lr, lr
 8027f9e:	1a12      	subs	r2, r2, r0
 8027fa0:	fb0e f101 	mul.w	r1, lr, r1
 8027fa4:	b292      	uxth	r2, r2
 8027fa6:	fb02 110c 	mla	r1, r2, ip, r1
 8027faa:	fb00 1105 	mla	r1, r0, r5, r1
 8027fae:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027fb0:	fb08 1105 	mla	r1, r8, r5, r1
 8027fb4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027fb8:	2900      	cmp	r1, #0
 8027fba:	f000 80f5 	beq.w	80281a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8027fbe:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027fc2:	d019      	beq.n	8027ff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8027fc4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027fc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027fcc:	fb0c fa0a 	mul.w	sl, ip, sl
 8027fd0:	fb0c fc03 	mul.w	ip, ip, r3
 8027fd4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027fd8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027fdc:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027fe0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027fe4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027fe8:	4453      	add	r3, sl
 8027fea:	0a3f      	lsrs	r7, r7, #8
 8027fec:	0a1b      	lsrs	r3, r3, #8
 8027fee:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027ff2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027ff6:	433b      	orrs	r3, r7
 8027ff8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027ffa:	2dff      	cmp	r5, #255	; 0xff
 8027ffc:	d020      	beq.n	8028040 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8027ffe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028000:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028004:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028006:	436f      	muls	r7, r5
 8028008:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802800a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802800e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028012:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028014:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028018:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802801c:	fb05 fa0a 	mul.w	sl, r5, sl
 8028020:	44bc      	add	ip, r7
 8028022:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028026:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802802a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802802e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028032:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028036:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802803a:	ea4c 050a 	orr.w	r5, ip, sl
 802803e:	950e      	str	r5, [sp, #56]	; 0x38
 8028040:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028042:	2dff      	cmp	r5, #255	; 0xff
 8028044:	d020      	beq.n	8028088 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8028046:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028048:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802804c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802804e:	436f      	muls	r7, r5
 8028050:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028052:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028056:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802805a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802805c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028060:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028064:	fb05 fa0a 	mul.w	sl, r5, sl
 8028068:	44bc      	add	ip, r7
 802806a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802806e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028072:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028076:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802807a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802807e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028082:	ea4c 050a 	orr.w	r5, ip, sl
 8028086:	9509      	str	r5, [sp, #36]	; 0x24
 8028088:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802808a:	2dff      	cmp	r5, #255	; 0xff
 802808c:	d020      	beq.n	80280d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 802808e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028090:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028094:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028096:	436f      	muls	r7, r5
 8028098:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802809a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802809e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80280a2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80280a4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80280a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80280ac:	fb05 fa0a 	mul.w	sl, r5, sl
 80280b0:	44bc      	add	ip, r7
 80280b2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80280b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80280ba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80280be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80280c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80280c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80280ca:	ea4c 050a 	orr.w	r5, ip, sl
 80280ce:	950f      	str	r5, [sp, #60]	; 0x3c
 80280d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80280d2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80280d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80280da:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80280de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80280e0:	fb0e f707 	mul.w	r7, lr, r7
 80280e4:	fb02 770c 	mla	r7, r2, ip, r7
 80280e8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80280ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80280ee:	fb00 770c 	mla	r7, r0, ip, r7
 80280f2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80280f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80280f8:	fb08 770c 	mla	r7, r8, ip, r7
 80280fc:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028100:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028102:	fb0e fe0c 	mul.w	lr, lr, ip
 8028106:	0a3f      	lsrs	r7, r7, #8
 8028108:	fb02 e303 	mla	r3, r2, r3, lr
 802810c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802810e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028112:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8028116:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028118:	fb00 330a 	mla	r3, r0, sl, r3
 802811c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028120:	f8b9 0000 	ldrh.w	r0, [r9]
 8028124:	fb08 3c0c 	mla	ip, r8, ip, r3
 8028128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802812a:	1202      	asrs	r2, r0, #8
 802812c:	4359      	muls	r1, r3
 802812e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028132:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028136:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802813a:	1c4b      	adds	r3, r1, #1
 802813c:	ea47 070c 	orr.w	r7, r7, ip
 8028140:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028144:	0c3b      	lsrs	r3, r7, #16
 8028146:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802814a:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802814e:	b2ff      	uxtb	r7, r7
 8028150:	fb13 f305 	smulbb	r3, r3, r5
 8028154:	b2c9      	uxtb	r1, r1
 8028156:	fb17 f705 	smulbb	r7, r7, r5
 802815a:	fb02 3201 	mla	r2, r2, r1, r3
 802815e:	10c3      	asrs	r3, r0, #3
 8028160:	fb1c fc05 	smulbb	ip, ip, r5
 8028164:	00c0      	lsls	r0, r0, #3
 8028166:	b292      	uxth	r2, r2
 8028168:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802816c:	b2c0      	uxtb	r0, r0
 802816e:	fb03 c301 	mla	r3, r3, r1, ip
 8028172:	fb00 7001 	mla	r0, r0, r1, r7
 8028176:	1c51      	adds	r1, r2, #1
 8028178:	b29b      	uxth	r3, r3
 802817a:	b280      	uxth	r0, r0
 802817c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028180:	f100 0c01 	add.w	ip, r0, #1
 8028184:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8028188:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802818c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8028190:	ea4c 0202 	orr.w	r2, ip, r2
 8028194:	f103 0c01 	add.w	ip, r3, #1
 8028198:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802819c:	095b      	lsrs	r3, r3, #5
 802819e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80281a2:	431a      	orrs	r2, r3
 80281a4:	f8a9 2000 	strh.w	r2, [r9]
 80281a8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80281aa:	f109 0902 	add.w	r9, r9, #2
 80281ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80281b2:	441c      	add	r4, r3
 80281b4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80281b6:	441e      	add	r6, r3
 80281b8:	e647      	b.n	8027e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 80281ba:	2800      	cmp	r0, #0
 80281bc:	f43f aedf 	beq.w	8027f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80281c0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80281c4:	9109      	str	r1, [sp, #36]	; 0x24
 80281c6:	0e09      	lsrs	r1, r1, #24
 80281c8:	9112      	str	r1, [sp, #72]	; 0x48
 80281ca:	e6d8      	b.n	8027f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80281cc:	b01d      	add	sp, #116	; 0x74
 80281ce:	ecbd 8b08 	vpop	{d8-d11}
 80281d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080281d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80281d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281dc:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80281e0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80281e4:	fb04 5603 	mla	r6, r4, r3, r5
 80281e8:	2c00      	cmp	r4, #0
 80281ea:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80281ee:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80281f2:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80281f6:	db37      	blt.n	8028268 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 80281f8:	45a6      	cmp	lr, r4
 80281fa:	dd35      	ble.n	8028268 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 80281fc:	2d00      	cmp	r5, #0
 80281fe:	db31      	blt.n	8028264 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8028200:	42ab      	cmp	r3, r5
 8028202:	dd2f      	ble.n	8028264 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8028204:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8028208:	1c6e      	adds	r6, r5, #1
 802820a:	d430      	bmi.n	802826e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 802820c:	42b3      	cmp	r3, r6
 802820e:	dd2e      	ble.n	802826e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8028210:	b378      	cbz	r0, 8028272 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 8028212:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8028216:	3401      	adds	r4, #1
 8028218:	d42f      	bmi.n	802827a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 802821a:	45a6      	cmp	lr, r4
 802821c:	dd2d      	ble.n	802827a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 802821e:	b37f      	cbz	r7, 8028280 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8028220:	2d00      	cmp	r5, #0
 8028222:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 8028226:	db26      	blt.n	8028276 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8028228:	42ab      	cmp	r3, r5
 802822a:	dd24      	ble.n	8028276 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 802822c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028230:	3501      	adds	r5, #1
 8028232:	d428      	bmi.n	8028286 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8028234:	42ab      	cmp	r3, r5
 8028236:	dd26      	ble.n	8028286 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8028238:	b338      	cbz	r0, 802828a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 802823a:	f8de 3004 	ldr.w	r3, [lr, #4]
 802823e:	280f      	cmp	r0, #15
 8028240:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8028244:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8028248:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802824c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8028250:	d801      	bhi.n	8028256 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 8028252:	2f0f      	cmp	r7, #15
 8028254:	d91b      	bls.n	802828e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 8028256:	4b87      	ldr	r3, [pc, #540]	; (8028474 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8028258:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802825c:	4a86      	ldr	r2, [pc, #536]	; (8028478 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 802825e:	4887      	ldr	r0, [pc, #540]	; (802847c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8028260:	f001 fd46 	bl	8029cf0 <__assert_func>
 8028264:	2200      	movs	r2, #0
 8028266:	e7cf      	b.n	8028208 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8028268:	2600      	movs	r6, #0
 802826a:	4632      	mov	r2, r6
 802826c:	e7d3      	b.n	8028216 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802826e:	2600      	movs	r6, #0
 8028270:	e7d1      	b.n	8028216 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028272:	4606      	mov	r6, r0
 8028274:	e7cf      	b.n	8028216 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028276:	2400      	movs	r4, #0
 8028278:	e7da      	b.n	8028230 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 802827a:	2300      	movs	r3, #0
 802827c:	461c      	mov	r4, r3
 802827e:	e7de      	b.n	802823e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028280:	463b      	mov	r3, r7
 8028282:	463c      	mov	r4, r7
 8028284:	e7db      	b.n	802823e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028286:	2300      	movs	r3, #0
 8028288:	e7d9      	b.n	802823e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802828a:	4603      	mov	r3, r0
 802828c:	e7d7      	b.n	802823e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802828e:	b280      	uxth	r0, r0
 8028290:	b2bf      	uxth	r7, r7
 8028292:	fb07 fe00 	mul.w	lr, r7, r0
 8028296:	0100      	lsls	r0, r0, #4
 8028298:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802829c:	eba0 0c0e 	sub.w	ip, r0, lr
 80282a0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80282a4:	b2bf      	uxth	r7, r7
 80282a6:	fa1f fc8c 	uxth.w	ip, ip
 80282aa:	1bed      	subs	r5, r5, r7
 80282ac:	fb0c f00a 	mul.w	r0, ip, sl
 80282b0:	b2ad      	uxth	r5, r5
 80282b2:	fb0b 0005 	mla	r0, fp, r5, r0
 80282b6:	fb07 0009 	mla	r0, r7, r9, r0
 80282ba:	fb0e 0008 	mla	r0, lr, r8, r0
 80282be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80282c2:	9001      	str	r0, [sp, #4]
 80282c4:	2800      	cmp	r0, #0
 80282c6:	f000 80d1 	beq.w	802846c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 80282ca:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80282ce:	d018      	beq.n	8028302 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 80282d0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80282d4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80282d8:	fb0b f000 	mul.w	r0, fp, r0
 80282dc:	fb0b fb02 	mul.w	fp, fp, r2
 80282e0:	0a02      	lsrs	r2, r0, #8
 80282e2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80282e6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80282ea:	4402      	add	r2, r0
 80282ec:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80282f0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80282f4:	0a12      	lsrs	r2, r2, #8
 80282f6:	0a00      	lsrs	r0, r0, #8
 80282f8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80282fc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028300:	4302      	orrs	r2, r0
 8028302:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8028306:	d01a      	beq.n	802833e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 8028308:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802830c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028310:	fb0a f000 	mul.w	r0, sl, r0
 8028314:	fb0a fa06 	mul.w	sl, sl, r6
 8028318:	0a06      	lsrs	r6, r0, #8
 802831a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802831e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028322:	4406      	add	r6, r0
 8028324:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8028328:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802832c:	0a36      	lsrs	r6, r6, #8
 802832e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028332:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028336:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802833a:	ea46 060a 	orr.w	r6, r6, sl
 802833e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028342:	d01b      	beq.n	802837c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 8028344:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8028348:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802834c:	fb09 fa0a 	mul.w	sl, r9, sl
 8028350:	fb09 f004 	mul.w	r0, r9, r4
 8028354:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8028358:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802835c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8028360:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028364:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8028368:	4454      	add	r4, sl
 802836a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802836e:	0a24      	lsrs	r4, r4, #8
 8028370:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028374:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028378:	ea44 0409 	orr.w	r4, r4, r9
 802837c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028380:	d01b      	beq.n	80283ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 8028382:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8028386:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802838a:	fb08 f909 	mul.w	r9, r8, r9
 802838e:	fb08 f003 	mul.w	r0, r8, r3
 8028392:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8028396:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802839a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802839e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80283a2:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80283a6:	444b      	add	r3, r9
 80283a8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80283ac:	0a1b      	lsrs	r3, r3, #8
 80283ae:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80283b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80283b6:	ea43 0308 	orr.w	r3, r3, r8
 80283ba:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80283be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80283c2:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 80283c6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80283ca:	fb0c f808 	mul.w	r8, ip, r8
 80283ce:	8808      	ldrh	r0, [r1, #0]
 80283d0:	fb0c f606 	mul.w	r6, ip, r6
 80283d4:	fb05 8909 	mla	r9, r5, r9, r8
 80283d8:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80283dc:	fb05 6502 	mla	r5, r5, r2, r6
 80283e0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80283e4:	fb07 9908 	mla	r9, r7, r8, r9
 80283e8:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80283ec:	fb07 5704 	mla	r7, r7, r4, r5
 80283f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80283f4:	fb0e 9808 	mla	r8, lr, r8, r9
 80283f8:	10c4      	asrs	r4, r0, #3
 80283fa:	fb0e 7e03 	mla	lr, lr, r3, r7
 80283fe:	9b01      	ldr	r3, [sp, #4]
 8028400:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028404:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8028408:	43da      	mvns	r2, r3
 802840a:	1203      	asrs	r3, r0, #8
 802840c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028410:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8028414:	b2d2      	uxtb	r2, r2
 8028416:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802841a:	00c0      	lsls	r0, r0, #3
 802841c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028420:	4353      	muls	r3, r2
 8028422:	b2c0      	uxtb	r0, r0
 8028424:	ea48 0e0e 	orr.w	lr, r8, lr
 8028428:	4354      	muls	r4, r2
 802842a:	4350      	muls	r0, r2
 802842c:	1c5a      	adds	r2, r3, #1
 802842e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8028436:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802843a:	1c62      	adds	r2, r4, #1
 802843c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028440:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8028444:	021b      	lsls	r3, r3, #8
 8028446:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802844a:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802844e:	00d2      	lsls	r2, r2, #3
 8028450:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028454:	4313      	orrs	r3, r2
 8028456:	1c42      	adds	r2, r0, #1
 8028458:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802845c:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 8028460:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 8028464:	ea4e 0e03 	orr.w	lr, lr, r3
 8028468:	f8a1 e000 	strh.w	lr, [r1]
 802846c:	b003      	add	sp, #12
 802846e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028472:	bf00      	nop
 8028474:	0802e369 	.word	0x0802e369
 8028478:	0802e936 	.word	0x0802e936
 802847c:	0802e3ed 	.word	0x0802e3ed

08028480 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028484:	ed2d 8b08 	vpush	{d8-d11}
 8028488:	b09b      	sub	sp, #108	; 0x6c
 802848a:	eeb0 aa40 	vmov.f32	s20, s0
 802848e:	eef0 9a60 	vmov.f32	s19, s1
 8028492:	9218      	str	r2, [sp, #96]	; 0x60
 8028494:	eeb0 9a41 	vmov.f32	s18, s2
 8028498:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802849a:	eeb0 8a62 	vmov.f32	s16, s5
 802849e:	9019      	str	r0, [sp, #100]	; 0x64
 80284a0:	eef0 8a43 	vmov.f32	s17, s6
 80284a4:	6850      	ldr	r0, [r2, #4]
 80284a6:	eef0 ba44 	vmov.f32	s23, s8
 80284aa:	9116      	str	r1, [sp, #88]	; 0x58
 80284ac:	eeb0 ba64 	vmov.f32	s22, s9
 80284b0:	9307      	str	r3, [sp, #28]
 80284b2:	eef0 aa45 	vmov.f32	s21, s10
 80284b6:	6812      	ldr	r2, [r2, #0]
 80284b8:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80284bc:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 80284c0:	fb00 1303 	mla	r3, r0, r3, r1
 80284c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80284c8:	930a      	str	r3, [sp, #40]	; 0x28
 80284ca:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80284cc:	681b      	ldr	r3, [r3, #0]
 80284ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80284d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80284d2:	2b00      	cmp	r3, #0
 80284d4:	dc03      	bgt.n	80284de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80284d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80284d8:	2b00      	cmp	r3, #0
 80284da:	f340 8387 	ble.w	8028bec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 80284de:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80284e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80284e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80284e8:	1e48      	subs	r0, r1, #1
 80284ea:	1e57      	subs	r7, r2, #1
 80284ec:	9b07      	ldr	r3, [sp, #28]
 80284ee:	2b00      	cmp	r3, #0
 80284f0:	f340 8166 	ble.w	80287c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 80284f4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80284f8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80284fc:	d406      	bmi.n	802850c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80284fe:	4584      	cmp	ip, r0
 8028500:	da04      	bge.n	802850c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028502:	2b00      	cmp	r3, #0
 8028504:	db02      	blt.n	802850c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028506:	42bb      	cmp	r3, r7
 8028508:	f2c0 815b 	blt.w	80287c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802850c:	f11c 0c01 	adds.w	ip, ip, #1
 8028510:	f100 814b 	bmi.w	80287aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028514:	4561      	cmp	r1, ip
 8028516:	f2c0 8148 	blt.w	80287aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802851a:	3301      	adds	r3, #1
 802851c:	f100 8145 	bmi.w	80287aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028520:	429a      	cmp	r2, r3
 8028522:	f2c0 8142 	blt.w	80287aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028526:	9b07      	ldr	r3, [sp, #28]
 8028528:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802852a:	9317      	str	r3, [sp, #92]	; 0x5c
 802852c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802852e:	2b00      	cmp	r3, #0
 8028530:	f340 8165 	ble.w	80287fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8028534:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8028536:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802853a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802853c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028540:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028544:	1422      	asrs	r2, r4, #16
 8028546:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802854a:	689b      	ldr	r3, [r3, #8]
 802854c:	f100 81d5 	bmi.w	80288fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8028550:	f103 38ff 	add.w	r8, r3, #4294967295
 8028554:	4542      	cmp	r2, r8
 8028556:	f280 81d0 	bge.w	80288fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802855a:	f1bc 0f00 	cmp.w	ip, #0
 802855e:	f2c0 81cc 	blt.w	80288fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8028562:	f10e 38ff 	add.w	r8, lr, #4294967295
 8028566:	45c4      	cmp	ip, r8
 8028568:	f280 81c7 	bge.w	80288fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802856c:	b21b      	sxth	r3, r3
 802856e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028570:	fb0c 2203 	mla	r2, ip, r3, r2
 8028574:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028578:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802857c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028580:	2900      	cmp	r1, #0
 8028582:	f000 8182 	beq.w	802888a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8028586:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802858a:	950b      	str	r5, [sp, #44]	; 0x2c
 802858c:	0e2d      	lsrs	r5, r5, #24
 802858e:	9512      	str	r5, [sp, #72]	; 0x48
 8028590:	b180      	cbz	r0, 80285b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028592:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8028596:	3b01      	subs	r3, #1
 8028598:	009b      	lsls	r3, r3, #2
 802859a:	3304      	adds	r3, #4
 802859c:	eb08 0c03 	add.w	ip, r8, r3
 80285a0:	f858 3003 	ldr.w	r3, [r8, r3]
 80285a4:	9308      	str	r3, [sp, #32]
 80285a6:	0e1b      	lsrs	r3, r3, #24
 80285a8:	9310      	str	r3, [sp, #64]	; 0x40
 80285aa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80285ae:	930c      	str	r3, [sp, #48]	; 0x30
 80285b0:	0e1b      	lsrs	r3, r3, #24
 80285b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80285b4:	b289      	uxth	r1, r1
 80285b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80285b8:	b280      	uxth	r0, r0
 80285ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80285bc:	fb01 f900 	mul.w	r9, r1, r0
 80285c0:	0109      	lsls	r1, r1, #4
 80285c2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80285c6:	eba1 0809 	sub.w	r8, r1, r9
 80285ca:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80285ce:	b280      	uxth	r0, r0
 80285d0:	fa1f f888 	uxth.w	r8, r8
 80285d4:	1a09      	subs	r1, r1, r0
 80285d6:	fb08 f303 	mul.w	r3, r8, r3
 80285da:	b289      	uxth	r1, r1
 80285dc:	fb01 330e 	mla	r3, r1, lr, r3
 80285e0:	fb00 3305 	mla	r3, r0, r5, r3
 80285e4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80285e6:	fb09 3305 	mla	r3, r9, r5, r3
 80285ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80285ee:	2b00      	cmp	r3, #0
 80285f0:	f000 80d2 	beq.w	8028798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80285f4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80285f8:	d01b      	beq.n	8028632 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 80285fa:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80285fe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028602:	fb0e fa0a 	mul.w	sl, lr, sl
 8028606:	fb0e fe02 	mul.w	lr, lr, r2
 802860a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802860e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028612:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028616:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802861a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802861e:	4452      	add	r2, sl
 8028620:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028624:	0a12      	lsrs	r2, r2, #8
 8028626:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802862a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802862e:	ea42 020c 	orr.w	r2, r2, ip
 8028632:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028634:	2dff      	cmp	r5, #255	; 0xff
 8028636:	d021      	beq.n	802867c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8028638:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802863a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802863e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028640:	fb05 fb0b 	mul.w	fp, r5, fp
 8028644:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028646:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802864a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802864c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028650:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028654:	fb05 fa0a 	mul.w	sl, r5, sl
 8028658:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802865c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028660:	44de      	add	lr, fp
 8028662:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028666:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802866a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802866e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028672:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028676:	ea4e 050a 	orr.w	r5, lr, sl
 802867a:	950b      	str	r5, [sp, #44]	; 0x2c
 802867c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802867e:	2dff      	cmp	r5, #255	; 0xff
 8028680:	d021      	beq.n	80286c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028682:	9d08      	ldr	r5, [sp, #32]
 8028684:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028688:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802868a:	fb05 fb0b 	mul.w	fp, r5, fp
 802868e:	9d08      	ldr	r5, [sp, #32]
 8028690:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028694:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028696:	fb05 fa0e 	mul.w	sl, r5, lr
 802869a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802869e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80286a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80286a6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80286aa:	44de      	add	lr, fp
 80286ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80286b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80286b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80286b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80286bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80286c0:	ea4e 050a 	orr.w	r5, lr, sl
 80286c4:	9508      	str	r5, [sp, #32]
 80286c6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80286c8:	2dff      	cmp	r5, #255	; 0xff
 80286ca:	d021      	beq.n	8028710 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80286cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80286ce:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80286d2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80286d4:	fb05 fb0b 	mul.w	fp, r5, fp
 80286d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80286da:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80286de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80286e0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80286e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80286e8:	fb05 fa0a 	mul.w	sl, r5, sl
 80286ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80286f0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80286f4:	44de      	add	lr, fp
 80286f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80286fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80286fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028702:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028706:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802870a:	ea4e 050a 	orr.w	r5, lr, sl
 802870e:	950c      	str	r5, [sp, #48]	; 0x30
 8028710:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028712:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028716:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802871a:	2bff      	cmp	r3, #255	; 0xff
 802871c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028720:	9d08      	ldr	r5, [sp, #32]
 8028722:	fb08 fc0c 	mul.w	ip, r8, ip
 8028726:	fb01 cc0e 	mla	ip, r1, lr, ip
 802872a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802872e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028730:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028734:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028738:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802873a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802873e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028742:	fb08 f80e 	mul.w	r8, r8, lr
 8028746:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802874a:	fb01 8202 	mla	r2, r1, r2, r8
 802874e:	9908      	ldr	r1, [sp, #32]
 8028750:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028754:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028758:	990c      	ldr	r1, [sp, #48]	; 0x30
 802875a:	fb00 220a 	mla	r2, r0, sl, r2
 802875e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8028762:	fb09 2900 	mla	r9, r9, r0, r2
 8028766:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802876a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802876e:	ea4c 0c09 	orr.w	ip, ip, r9
 8028772:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8028776:	f040 8091 	bne.w	802889c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802877a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802877e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8028782:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028786:	f022 0207 	bic.w	r2, r2, #7
 802878a:	431a      	orrs	r2, r3
 802878c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8028790:	ea4c 0c02 	orr.w	ip, ip, r2
 8028794:	f8a7 c000 	strh.w	ip, [r7]
 8028798:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802879a:	3702      	adds	r7, #2
 802879c:	441c      	add	r4, r3
 802879e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80287a0:	441e      	add	r6, r3
 80287a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80287a4:	3b01      	subs	r3, #1
 80287a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80287a8:	e6c0      	b.n	802852c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80287aa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80287ac:	441c      	add	r4, r3
 80287ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80287b0:	441e      	add	r6, r3
 80287b2:	9b07      	ldr	r3, [sp, #28]
 80287b4:	3b01      	subs	r3, #1
 80287b6:	9307      	str	r3, [sp, #28]
 80287b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80287ba:	3302      	adds	r3, #2
 80287bc:	930a      	str	r3, [sp, #40]	; 0x28
 80287be:	e695      	b.n	80284ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80287c0:	d024      	beq.n	802880c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 80287c2:	9b07      	ldr	r3, [sp, #28]
 80287c4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80287c6:	3b01      	subs	r3, #1
 80287c8:	fb00 4003 	mla	r0, r0, r3, r4
 80287cc:	1400      	asrs	r0, r0, #16
 80287ce:	f53f aeaa 	bmi.w	8028526 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80287d2:	3901      	subs	r1, #1
 80287d4:	4288      	cmp	r0, r1
 80287d6:	f6bf aea6 	bge.w	8028526 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80287da:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80287dc:	fb01 6303 	mla	r3, r1, r3, r6
 80287e0:	141b      	asrs	r3, r3, #16
 80287e2:	f53f aea0 	bmi.w	8028526 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80287e6:	3a01      	subs	r2, #1
 80287e8:	4293      	cmp	r3, r2
 80287ea:	f6bf ae9c 	bge.w	8028526 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80287ee:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80287f2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80287f6:	f1bb 0f00 	cmp.w	fp, #0
 80287fa:	f300 809a 	bgt.w	8028932 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 80287fe:	9b07      	ldr	r3, [sp, #28]
 8028800:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028806:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802880a:	930a      	str	r3, [sp, #40]	; 0x28
 802880c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802880e:	2b00      	cmp	r3, #0
 8028810:	f340 81ec 	ble.w	8028bec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8028814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028818:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802881a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802881e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028822:	eef0 6a48 	vmov.f32	s13, s16
 8028826:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802882a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802882e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028832:	ee16 4a90 	vmov	r4, s13
 8028836:	eef0 6a68 	vmov.f32	s13, s17
 802883a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802883e:	ee16 6a90 	vmov	r6, s13
 8028842:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028846:	ee69 7a27 	vmul.f32	s15, s18, s15
 802884a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802884e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028852:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028856:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802885a:	ee18 2a10 	vmov	r2, s16
 802885e:	eeb0 8a47 	vmov.f32	s16, s14
 8028862:	fb92 f3f3 	sdiv	r3, r2, r3
 8028866:	ee18 2a90 	vmov	r2, s17
 802886a:	932f      	str	r3, [sp, #188]	; 0xbc
 802886c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802886e:	eef0 8a67 	vmov.f32	s17, s15
 8028872:	fb92 f3f3 	sdiv	r3, r2, r3
 8028876:	9330      	str	r3, [sp, #192]	; 0xc0
 8028878:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802887a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802887c:	3b01      	subs	r3, #1
 802887e:	9316      	str	r3, [sp, #88]	; 0x58
 8028880:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028882:	bf08      	it	eq
 8028884:	4613      	moveq	r3, r2
 8028886:	9307      	str	r3, [sp, #28]
 8028888:	e622      	b.n	80284d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 802888a:	2800      	cmp	r0, #0
 802888c:	f43f ae92 	beq.w	80285b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028890:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028894:	9308      	str	r3, [sp, #32]
 8028896:	0e1b      	lsrs	r3, r3, #24
 8028898:	9310      	str	r3, [sp, #64]	; 0x40
 802889a:	e68b      	b.n	80285b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802889c:	8839      	ldrh	r1, [r7, #0]
 802889e:	43db      	mvns	r3, r3
 80288a0:	4dd5      	ldr	r5, [pc, #852]	; (8028bf8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 80288a2:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80288a6:	fa5f f883 	uxtb.w	r8, r3
 80288aa:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80288ae:	10c8      	asrs	r0, r1, #3
 80288b0:	00cb      	lsls	r3, r1, #3
 80288b2:	fb0e fe08 	mul.w	lr, lr, r8
 80288b6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80288ba:	b2db      	uxtb	r3, r3
 80288bc:	f10e 0101 	add.w	r1, lr, #1
 80288c0:	fb00 f008 	mul.w	r0, r0, r8
 80288c4:	fb03 f308 	mul.w	r3, r3, r8
 80288c8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80288cc:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80288d0:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80288d4:	f100 0e01 	add.w	lr, r0, #1
 80288d8:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80288dc:	b2c9      	uxtb	r1, r1
 80288de:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80288e2:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80288e6:	00d2      	lsls	r2, r2, #3
 80288e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80288ec:	430a      	orrs	r2, r1
 80288ee:	1c59      	adds	r1, r3, #1
 80288f0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80288f4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80288f8:	e748      	b.n	802878c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80288fa:	f112 0801 	adds.w	r8, r2, #1
 80288fe:	f53f af4b 	bmi.w	8028798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028902:	4543      	cmp	r3, r8
 8028904:	f6ff af48 	blt.w	8028798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028908:	f11c 0801 	adds.w	r8, ip, #1
 802890c:	f53f af44 	bmi.w	8028798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028910:	45c6      	cmp	lr, r8
 8028912:	f6ff af41 	blt.w	8028798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028916:	b21b      	sxth	r3, r3
 8028918:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802891c:	fa0f f28e 	sxth.w	r2, lr
 8028920:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8028924:	9200      	str	r2, [sp, #0]
 8028926:	4639      	mov	r1, r7
 8028928:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802892a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802892c:	f7ff fc54 	bl	80281d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8028930:	e732      	b.n	8028798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028932:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028934:	1421      	asrs	r1, r4, #16
 8028936:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028938:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802893c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8028940:	1433      	asrs	r3, r6, #16
 8028942:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028946:	fb07 1303 	mla	r3, r7, r3, r1
 802894a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802894c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8028950:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028954:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028958:	2a00      	cmp	r2, #0
 802895a:	f000 8108 	beq.w	8028b6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802895e:	684d      	ldr	r5, [r1, #4]
 8028960:	950d      	str	r5, [sp, #52]	; 0x34
 8028962:	0e2d      	lsrs	r5, r5, #24
 8028964:	9514      	str	r5, [sp, #80]	; 0x50
 8028966:	b178      	cbz	r0, 8028988 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8028968:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802896c:	3f01      	subs	r7, #1
 802896e:	00bf      	lsls	r7, r7, #2
 8028970:	3704      	adds	r7, #4
 8028972:	eb01 0e07 	add.w	lr, r1, r7
 8028976:	59c9      	ldr	r1, [r1, r7]
 8028978:	9109      	str	r1, [sp, #36]	; 0x24
 802897a:	0e09      	lsrs	r1, r1, #24
 802897c:	9111      	str	r1, [sp, #68]	; 0x44
 802897e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028982:	910e      	str	r1, [sp, #56]	; 0x38
 8028984:	0e09      	lsrs	r1, r1, #24
 8028986:	9115      	str	r1, [sp, #84]	; 0x54
 8028988:	b292      	uxth	r2, r2
 802898a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802898c:	b280      	uxth	r0, r0
 802898e:	fb02 f900 	mul.w	r9, r2, r0
 8028992:	0112      	lsls	r2, r2, #4
 8028994:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028998:	eba2 0e09 	sub.w	lr, r2, r9
 802899c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80289a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80289a2:	b280      	uxth	r0, r0
 80289a4:	fa1f fe8e 	uxth.w	lr, lr
 80289a8:	1a09      	subs	r1, r1, r0
 80289aa:	fb0e f202 	mul.w	r2, lr, r2
 80289ae:	b289      	uxth	r1, r1
 80289b0:	fb01 220c 	mla	r2, r1, ip, r2
 80289b4:	fb00 2205 	mla	r2, r0, r5, r2
 80289b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80289ba:	fb09 2205 	mla	r2, r9, r5, r2
 80289be:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80289c2:	2a00      	cmp	r2, #0
 80289c4:	f000 80ca 	beq.w	8028b5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80289c8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80289cc:	d019      	beq.n	8028a02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 80289ce:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80289d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80289d6:	fb0c fa0a 	mul.w	sl, ip, sl
 80289da:	fb0c fc03 	mul.w	ip, ip, r3
 80289de:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80289e2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80289e6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80289ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80289ee:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80289f2:	4453      	add	r3, sl
 80289f4:	0a3f      	lsrs	r7, r7, #8
 80289f6:	0a1b      	lsrs	r3, r3, #8
 80289f8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80289fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028a00:	433b      	orrs	r3, r7
 8028a02:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028a04:	2dff      	cmp	r5, #255	; 0xff
 8028a06:	d020      	beq.n	8028a4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 8028a08:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028a0a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028a0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028a10:	436f      	muls	r7, r5
 8028a12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028a14:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028a18:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028a1c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028a1e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028a22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028a26:	fb05 fa0a 	mul.w	sl, r5, sl
 8028a2a:	44bc      	add	ip, r7
 8028a2c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028a30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a34:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028a38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028a3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028a40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028a44:	ea4c 050a 	orr.w	r5, ip, sl
 8028a48:	950d      	str	r5, [sp, #52]	; 0x34
 8028a4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028a4c:	2dff      	cmp	r5, #255	; 0xff
 8028a4e:	d020      	beq.n	8028a92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 8028a50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028a52:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028a56:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028a58:	436f      	muls	r7, r5
 8028a5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028a5c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028a60:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028a62:	fb05 fa0c 	mul.w	sl, r5, ip
 8028a66:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028a6a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028a6e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028a72:	44bc      	add	ip, r7
 8028a74:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028a78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028a7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028a84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028a88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028a8c:	ea4c 050a 	orr.w	r5, ip, sl
 8028a90:	9509      	str	r5, [sp, #36]	; 0x24
 8028a92:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028a94:	2dff      	cmp	r5, #255	; 0xff
 8028a96:	d020      	beq.n	8028ada <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8028a98:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028a9a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028a9e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028aa0:	436f      	muls	r7, r5
 8028aa2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028aa4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028aa8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028aac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028aae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028ab2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028ab6:	fb05 fa0a 	mul.w	sl, r5, sl
 8028aba:	44bc      	add	ip, r7
 8028abc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028ac0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028ac4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028ac8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028acc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028ad0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028ad4:	ea4c 050a 	orr.w	r5, ip, sl
 8028ad8:	950e      	str	r5, [sp, #56]	; 0x38
 8028ada:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028adc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028ae0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028ae4:	2aff      	cmp	r2, #255	; 0xff
 8028ae6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028aea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028aec:	fb0e f707 	mul.w	r7, lr, r7
 8028af0:	fb01 770c 	mla	r7, r1, ip, r7
 8028af4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028af8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028afa:	fb00 770c 	mla	r7, r0, ip, r7
 8028afe:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028b02:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028b04:	fb09 770c 	mla	r7, r9, ip, r7
 8028b08:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028b0c:	fb0e fe0c 	mul.w	lr, lr, ip
 8028b10:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8028b14:	fb01 e303 	mla	r3, r1, r3, lr
 8028b18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028b1a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028b1e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028b22:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028b24:	fb00 330a 	mla	r3, r0, sl, r3
 8028b28:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8028b2c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8028b30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028b34:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028b38:	ea47 070c 	orr.w	r7, r7, ip
 8028b3c:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8028b40:	d11e      	bne.n	8028b80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 8028b42:	097a      	lsrs	r2, r7, #5
 8028b44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8028b48:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8028b4c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028b50:	f023 0307 	bic.w	r3, r3, #7
 8028b54:	4313      	orrs	r3, r2
 8028b56:	431f      	orrs	r7, r3
 8028b58:	f8a8 7000 	strh.w	r7, [r8]
 8028b5c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028b5e:	f108 0802 	add.w	r8, r8, #2
 8028b62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028b66:	441c      	add	r4, r3
 8028b68:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028b6a:	441e      	add	r6, r3
 8028b6c:	e643      	b.n	80287f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8028b6e:	2800      	cmp	r0, #0
 8028b70:	f43f af0a 	beq.w	8028988 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8028b74:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8028b78:	9109      	str	r1, [sp, #36]	; 0x24
 8028b7a:	0e09      	lsrs	r1, r1, #24
 8028b7c:	9111      	str	r1, [sp, #68]	; 0x44
 8028b7e:	e703      	b.n	8028988 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8028b80:	f8b8 1000 	ldrh.w	r1, [r8]
 8028b84:	43d2      	mvns	r2, r2
 8028b86:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8028b8a:	fa5f fe82 	uxtb.w	lr, r2
 8028b8e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028b92:	10c8      	asrs	r0, r1, #3
 8028b94:	00ca      	lsls	r2, r1, #3
 8028b96:	fb0c fc0e 	mul.w	ip, ip, lr
 8028b9a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028b9e:	b2d2      	uxtb	r2, r2
 8028ba0:	f10c 0101 	add.w	r1, ip, #1
 8028ba4:	fb00 f00e 	mul.w	r0, r0, lr
 8028ba8:	fb02 f20e 	mul.w	r2, r2, lr
 8028bac:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028bb0:	0c39      	lsrs	r1, r7, #16
 8028bb2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028bb6:	4910      	ldr	r1, [pc, #64]	; (8028bf8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8028bb8:	fa5f fc8c 	uxtb.w	ip, ip
 8028bbc:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8028bc0:	1c41      	adds	r1, r0, #1
 8028bc2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028bc6:	1c51      	adds	r1, r2, #1
 8028bc8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028bcc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028bd0:	00c0      	lsls	r0, r0, #3
 8028bd2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8028bd6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028bda:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8028bde:	ea4c 0c00 	orr.w	ip, ip, r0
 8028be2:	ea47 0c0c 	orr.w	ip, r7, ip
 8028be6:	f8a8 c000 	strh.w	ip, [r8]
 8028bea:	e7b7      	b.n	8028b5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8028bec:	b01b      	add	sp, #108	; 0x6c
 8028bee:	ecbd 8b08 	vpop	{d8-d11}
 8028bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028bf6:	bf00      	nop
 8028bf8:	fffff800 	.word	0xfffff800

08028bfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8028bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028c00:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8028c04:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8028c08:	2c00      	cmp	r4, #0
 8028c0a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028c0e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8028c12:	fb04 ce03 	mla	lr, r4, r3, ip
 8028c16:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8028c1a:	db60      	blt.n	8028cde <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8028c1c:	45a1      	cmp	r9, r4
 8028c1e:	dd5e      	ble.n	8028cde <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8028c20:	f1bc 0f00 	cmp.w	ip, #0
 8028c24:	db59      	blt.n	8028cda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8028c26:	45e0      	cmp	r8, ip
 8028c28:	dd57      	ble.n	8028cda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8028c2a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8028c2e:	f01e 0f01 	tst.w	lr, #1
 8028c32:	5c16      	ldrb	r6, [r2, r0]
 8028c34:	bf0c      	ite	eq
 8028c36:	f006 060f 	andeq.w	r6, r6, #15
 8028c3a:	1136      	asrne	r6, r6, #4
 8028c3c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028c40:	b2f6      	uxtb	r6, r6
 8028c42:	f11c 0001 	adds.w	r0, ip, #1
 8028c46:	d44d      	bmi.n	8028ce4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8028c48:	4580      	cmp	r8, r0
 8028c4a:	dd4b      	ble.n	8028ce4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8028c4c:	2d00      	cmp	r5, #0
 8028c4e:	d04b      	beq.n	8028ce8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8028c50:	f10e 0a01 	add.w	sl, lr, #1
 8028c54:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8028c58:	f01a 0f01 	tst.w	sl, #1
 8028c5c:	5c10      	ldrb	r0, [r2, r0]
 8028c5e:	bf0c      	ite	eq
 8028c60:	f000 000f 	andeq.w	r0, r0, #15
 8028c64:	1100      	asrne	r0, r0, #4
 8028c66:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028c6a:	b2c0      	uxtb	r0, r0
 8028c6c:	3401      	adds	r4, #1
 8028c6e:	d43f      	bmi.n	8028cf0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8028c70:	45a1      	cmp	r9, r4
 8028c72:	dd3d      	ble.n	8028cf0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8028c74:	2f00      	cmp	r7, #0
 8028c76:	f000 80a8 	beq.w	8028dca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 8028c7a:	f1bc 0f00 	cmp.w	ip, #0
 8028c7e:	db35      	blt.n	8028cec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8028c80:	45e0      	cmp	r8, ip
 8028c82:	dd33      	ble.n	8028cec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8028c84:	eb03 090e 	add.w	r9, r3, lr
 8028c88:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8028c8c:	f019 0f01 	tst.w	r9, #1
 8028c90:	5d14      	ldrb	r4, [r2, r4]
 8028c92:	bf0c      	ite	eq
 8028c94:	f004 040f 	andeq.w	r4, r4, #15
 8028c98:	1124      	asrne	r4, r4, #4
 8028c9a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028c9e:	b2e4      	uxtb	r4, r4
 8028ca0:	f11c 0c01 	adds.w	ip, ip, #1
 8028ca4:	d427      	bmi.n	8028cf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8028ca6:	45e0      	cmp	r8, ip
 8028ca8:	dd25      	ble.n	8028cf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8028caa:	b335      	cbz	r5, 8028cfa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8028cac:	3301      	adds	r3, #1
 8028cae:	449e      	add	lr, r3
 8028cb0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028cb4:	f01e 0f01 	tst.w	lr, #1
 8028cb8:	5cd2      	ldrb	r2, [r2, r3]
 8028cba:	bf0c      	ite	eq
 8028cbc:	f002 020f 	andeq.w	r2, r2, #15
 8028cc0:	1112      	asrne	r2, r2, #4
 8028cc2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028cc6:	b2d3      	uxtb	r3, r2
 8028cc8:	2d0f      	cmp	r5, #15
 8028cca:	d917      	bls.n	8028cfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8028ccc:	4b42      	ldr	r3, [pc, #264]	; (8028dd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 8028cce:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8028cd2:	4a42      	ldr	r2, [pc, #264]	; (8028ddc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8028cd4:	4842      	ldr	r0, [pc, #264]	; (8028de0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8028cd6:	f001 f80b 	bl	8029cf0 <__assert_func>
 8028cda:	2600      	movs	r6, #0
 8028cdc:	e7b1      	b.n	8028c42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8028cde:	2000      	movs	r0, #0
 8028ce0:	4606      	mov	r6, r0
 8028ce2:	e7c3      	b.n	8028c6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028ce4:	2000      	movs	r0, #0
 8028ce6:	e7c1      	b.n	8028c6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028ce8:	4628      	mov	r0, r5
 8028cea:	e7bf      	b.n	8028c6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028cec:	2400      	movs	r4, #0
 8028cee:	e7d7      	b.n	8028ca0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8028cf0:	2300      	movs	r3, #0
 8028cf2:	461c      	mov	r4, r3
 8028cf4:	e7e8      	b.n	8028cc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8028cf6:	2300      	movs	r3, #0
 8028cf8:	e7e6      	b.n	8028cc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8028cfa:	462b      	mov	r3, r5
 8028cfc:	2f0f      	cmp	r7, #15
 8028cfe:	d8e5      	bhi.n	8028ccc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8028d00:	b2ad      	uxth	r5, r5
 8028d02:	b2bf      	uxth	r7, r7
 8028d04:	fb05 fc07 	mul.w	ip, r5, r7
 8028d08:	012d      	lsls	r5, r5, #4
 8028d0a:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8028d0e:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8028d12:	eba5 050c 	sub.w	r5, r5, ip
 8028d16:	b2bf      	uxth	r7, r7
 8028d18:	b2ad      	uxth	r5, r5
 8028d1a:	1bd2      	subs	r2, r2, r7
 8028d1c:	4368      	muls	r0, r5
 8028d1e:	b292      	uxth	r2, r2
 8028d20:	fb06 0002 	mla	r0, r6, r2, r0
 8028d24:	fb07 0404 	mla	r4, r7, r4, r0
 8028d28:	fb0c 4303 	mla	r3, ip, r3, r4
 8028d2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028d30:	b1b3      	cbz	r3, 8028d60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8028d32:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8028d36:	435a      	muls	r2, r3
 8028d38:	1c53      	adds	r3, r2, #1
 8028d3a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028d3e:	4a29      	ldr	r2, [pc, #164]	; (8028de4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 8028d40:	121b      	asrs	r3, r3, #8
 8028d42:	6812      	ldr	r2, [r2, #0]
 8028d44:	2bff      	cmp	r3, #255	; 0xff
 8028d46:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8028d4a:	d10b      	bne.n	8028d64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 8028d4c:	0950      	lsrs	r0, r2, #5
 8028d4e:	4b26      	ldr	r3, [pc, #152]	; (8028de8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 8028d50:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028d54:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028d58:	4033      	ands	r3, r6
 8028d5a:	4318      	orrs	r0, r3
 8028d5c:	4302      	orrs	r2, r0
 8028d5e:	800a      	strh	r2, [r1, #0]
 8028d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028d64:	880d      	ldrh	r5, [r1, #0]
 8028d66:	b29f      	uxth	r7, r3
 8028d68:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8028d6c:	43db      	mvns	r3, r3
 8028d6e:	122c      	asrs	r4, r5, #8
 8028d70:	fb10 f007 	smulbb	r0, r0, r7
 8028d74:	b2db      	uxtb	r3, r3
 8028d76:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8028d7a:	b2f6      	uxtb	r6, r6
 8028d7c:	b2d2      	uxtb	r2, r2
 8028d7e:	fb04 0403 	mla	r4, r4, r3, r0
 8028d82:	10e8      	asrs	r0, r5, #3
 8028d84:	fb12 f207 	smulbb	r2, r2, r7
 8028d88:	00ed      	lsls	r5, r5, #3
 8028d8a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028d8e:	b2a4      	uxth	r4, r4
 8028d90:	fb16 f607 	smulbb	r6, r6, r7
 8028d94:	b2ed      	uxtb	r5, r5
 8028d96:	fb00 6603 	mla	r6, r0, r3, r6
 8028d9a:	fb05 2303 	mla	r3, r5, r3, r2
 8028d9e:	b2b0      	uxth	r0, r6
 8028da0:	b29a      	uxth	r2, r3
 8028da2:	1c63      	adds	r3, r4, #1
 8028da4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028da8:	1c53      	adds	r3, r2, #1
 8028daa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028dae:	1c42      	adds	r2, r0, #1
 8028db0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8028db4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028db8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028dbc:	0940      	lsrs	r0, r0, #5
 8028dbe:	4323      	orrs	r3, r4
 8028dc0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028dc4:	4303      	orrs	r3, r0
 8028dc6:	800b      	strh	r3, [r1, #0]
 8028dc8:	e7ca      	b.n	8028d60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8028dca:	2d0f      	cmp	r5, #15
 8028dcc:	f63f af7e 	bhi.w	8028ccc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8028dd0:	463b      	mov	r3, r7
 8028dd2:	463c      	mov	r4, r7
 8028dd4:	e794      	b.n	8028d00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8028dd6:	bf00      	nop
 8028dd8:	0802e369 	.word	0x0802e369
 8028ddc:	0802e936 	.word	0x0802e936
 8028de0:	0802e3ed 	.word	0x0802e3ed
 8028de4:	2400af4c 	.word	0x2400af4c
 8028de8:	00fff800 	.word	0x00fff800

08028dec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028df0:	ed2d 8b08 	vpush	{d8-d11}
 8028df4:	b097      	sub	sp, #92	; 0x5c
 8028df6:	eeb0 aa40 	vmov.f32	s20, s0
 8028dfa:	eef0 9a60 	vmov.f32	s19, s1
 8028dfe:	9214      	str	r2, [sp, #80]	; 0x50
 8028e00:	eeb0 9a41 	vmov.f32	s18, s2
 8028e04:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8028e06:	eeb0 8a62 	vmov.f32	s16, s5
 8028e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8028e0c:	eef0 8a43 	vmov.f32	s17, s6
 8028e10:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8028e14:	eef0 ba44 	vmov.f32	s23, s8
 8028e18:	9015      	str	r0, [sp, #84]	; 0x54
 8028e1a:	eeb0 ba64 	vmov.f32	s22, s9
 8028e1e:	6850      	ldr	r0, [r2, #4]
 8028e20:	eef0 aa45 	vmov.f32	s21, s10
 8028e24:	910d      	str	r1, [sp, #52]	; 0x34
 8028e26:	930f      	str	r3, [sp, #60]	; 0x3c
 8028e28:	6812      	ldr	r2, [r2, #0]
 8028e2a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8028e2e:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8028e32:	fb00 1303 	mla	r3, r0, r3, r1
 8028e36:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028e3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028e3c:	689b      	ldr	r3, [r3, #8]
 8028e3e:	3301      	adds	r3, #1
 8028e40:	f023 0301 	bic.w	r3, r3, #1
 8028e44:	930a      	str	r3, [sp, #40]	; 0x28
 8028e46:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028e48:	681f      	ldr	r7, [r3, #0]
 8028e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028e4c:	2b00      	cmp	r3, #0
 8028e4e:	dc03      	bgt.n	8028e58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028e50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028e52:	2b00      	cmp	r3, #0
 8028e54:	f340 8289 	ble.w	802936a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8028e58:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028e5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028e5e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028e62:	1e48      	subs	r0, r1, #1
 8028e64:	f102 3cff 	add.w	ip, r2, #4294967295
 8028e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028e6a:	2b00      	cmp	r3, #0
 8028e6c:	f340 80c5 	ble.w	8028ffa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8028e70:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028e74:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028e78:	d406      	bmi.n	8028e88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028e7a:	4586      	cmp	lr, r0
 8028e7c:	da04      	bge.n	8028e88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028e7e:	2b00      	cmp	r3, #0
 8028e80:	db02      	blt.n	8028e88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028e82:	4563      	cmp	r3, ip
 8028e84:	f2c0 80ba 	blt.w	8028ffc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8028e88:	f11e 0e01 	adds.w	lr, lr, #1
 8028e8c:	f100 80ab 	bmi.w	8028fe6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028e90:	4571      	cmp	r1, lr
 8028e92:	f2c0 80a8 	blt.w	8028fe6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028e96:	3301      	adds	r3, #1
 8028e98:	f100 80a5 	bmi.w	8028fe6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028e9c:	429a      	cmp	r2, r3
 8028e9e:	f2c0 80a2 	blt.w	8028fe6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028ea4:	46c8      	mov	r8, r9
 8028ea6:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8028eaa:	930e      	str	r3, [sp, #56]	; 0x38
 8028eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028eae:	2b00      	cmp	r3, #0
 8028eb0:	f340 80c4 	ble.w	802903c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8028eb4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028eb6:	1430      	asrs	r0, r6, #16
 8028eb8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028ebc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028ec0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028ec4:	1423      	asrs	r3, r4, #16
 8028ec6:	f100 814f 	bmi.w	8029168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8028eca:	f10c 3bff 	add.w	fp, ip, #4294967295
 8028ece:	455b      	cmp	r3, fp
 8028ed0:	f280 814a 	bge.w	8029168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8028ed4:	2800      	cmp	r0, #0
 8028ed6:	f2c0 8147 	blt.w	8029168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8028eda:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028ede:	4558      	cmp	r0, fp
 8028ee0:	f280 8142 	bge.w	8029168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8028ee4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028ee6:	fb00 3305 	mla	r3, r0, r5, r3
 8028eea:	0858      	lsrs	r0, r3, #1
 8028eec:	07dd      	lsls	r5, r3, #31
 8028eee:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028ef2:	bf54      	ite	pl
 8028ef4:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028ef8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028efc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028f00:	fa5f fc8c 	uxtb.w	ip, ip
 8028f04:	2a00      	cmp	r2, #0
 8028f06:	f000 80dd 	beq.w	80290c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028f0a:	1c58      	adds	r0, r3, #1
 8028f0c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028f10:	07c0      	lsls	r0, r0, #31
 8028f12:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028f16:	bf54      	ite	pl
 8028f18:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028f1c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028f20:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028f24:	fa5f f08e 	uxtb.w	r0, lr
 8028f28:	9010      	str	r0, [sp, #64]	; 0x40
 8028f2a:	b1d9      	cbz	r1, 8028f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8028f2c:	4453      	add	r3, sl
 8028f2e:	0858      	lsrs	r0, r3, #1
 8028f30:	07dd      	lsls	r5, r3, #31
 8028f32:	f103 0301 	add.w	r3, r3, #1
 8028f36:	5c38      	ldrb	r0, [r7, r0]
 8028f38:	bf54      	ite	pl
 8028f3a:	f000 000f 	andpl.w	r0, r0, #15
 8028f3e:	1100      	asrmi	r0, r0, #4
 8028f40:	07dd      	lsls	r5, r3, #31
 8028f42:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028f46:	b2c0      	uxtb	r0, r0
 8028f48:	900b      	str	r0, [sp, #44]	; 0x2c
 8028f4a:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8028f4e:	f817 e000 	ldrb.w	lr, [r7, r0]
 8028f52:	bf54      	ite	pl
 8028f54:	f00e 030f 	andpl.w	r3, lr, #15
 8028f58:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8028f5c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028f60:	b2db      	uxtb	r3, r3
 8028f62:	9311      	str	r3, [sp, #68]	; 0x44
 8028f64:	b292      	uxth	r2, r2
 8028f66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028f68:	b289      	uxth	r1, r1
 8028f6a:	fb02 f301 	mul.w	r3, r2, r1
 8028f6e:	0112      	lsls	r2, r2, #4
 8028f70:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028f74:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8028f78:	1ad2      	subs	r2, r2, r3
 8028f7a:	b289      	uxth	r1, r1
 8028f7c:	b292      	uxth	r2, r2
 8028f7e:	1a40      	subs	r0, r0, r1
 8028f80:	436a      	muls	r2, r5
 8028f82:	b280      	uxth	r0, r0
 8028f84:	fb0c 2c00 	mla	ip, ip, r0, r2
 8028f88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028f8a:	fb01 c102 	mla	r1, r1, r2, ip
 8028f8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028f90:	fb03 1302 	mla	r3, r3, r2, r1
 8028f94:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028f98:	b1db      	cbz	r3, 8028fd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8028f9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028f9c:	4353      	muls	r3, r2
 8028f9e:	1c5a      	adds	r2, r3, #1
 8028fa0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028fa4:	4ac6      	ldr	r2, [pc, #792]	; (80292c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8028fa6:	121b      	asrs	r3, r3, #8
 8028fa8:	6812      	ldr	r2, [r2, #0]
 8028faa:	2bff      	cmp	r3, #255	; 0xff
 8028fac:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028fb0:	f040 8099 	bne.w	80290e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8028fb4:	0953      	lsrs	r3, r2, #5
 8028fb6:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8028fba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028fbe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028fc2:	f02c 0c07 	bic.w	ip, ip, #7
 8028fc6:	ea43 0c0c 	orr.w	ip, r3, ip
 8028fca:	ea4c 0202 	orr.w	r2, ip, r2
 8028fce:	f8a8 2000 	strh.w	r2, [r8]
 8028fd2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028fd4:	f108 0802 	add.w	r8, r8, #2
 8028fd8:	441c      	add	r4, r3
 8028fda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028fdc:	441e      	add	r6, r3
 8028fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028fe0:	3b01      	subs	r3, #1
 8028fe2:	930e      	str	r3, [sp, #56]	; 0x38
 8028fe4:	e762      	b.n	8028eac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8028fe6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028fe8:	f109 0902 	add.w	r9, r9, #2
 8028fec:	441c      	add	r4, r3
 8028fee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028ff0:	441e      	add	r6, r3
 8028ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028ff4:	3b01      	subs	r3, #1
 8028ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8028ff8:	e736      	b.n	8028e68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028ffa:	d024      	beq.n	8029046 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8028ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028ffe:	982b      	ldr	r0, [sp, #172]	; 0xac
 8029000:	3b01      	subs	r3, #1
 8029002:	fb00 4003 	mla	r0, r0, r3, r4
 8029006:	1400      	asrs	r0, r0, #16
 8029008:	f53f af4b 	bmi.w	8028ea2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802900c:	3901      	subs	r1, #1
 802900e:	4288      	cmp	r0, r1
 8029010:	f6bf af47 	bge.w	8028ea2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029014:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8029016:	fb01 6303 	mla	r3, r1, r3, r6
 802901a:	141b      	asrs	r3, r3, #16
 802901c:	f53f af41 	bmi.w	8028ea2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029020:	3a01      	subs	r2, #1
 8029022:	4293      	cmp	r3, r2
 8029024:	f6bf af3d 	bge.w	8028ea2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029028:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802902c:	46c8      	mov	r8, r9
 802902e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8029032:	930e      	str	r3, [sp, #56]	; 0x38
 8029034:	f1bb 0f00 	cmp.w	fp, #0
 8029038:	f300 80b7 	bgt.w	80291aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 802903c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802903e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029042:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029048:	2b00      	cmp	r3, #0
 802904a:	f340 818e 	ble.w	802936a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 802904e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029052:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029054:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029058:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802905c:	eef0 6a48 	vmov.f32	s13, s16
 8029060:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029064:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029068:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802906c:	ee16 4a90 	vmov	r4, s13
 8029070:	eef0 6a68 	vmov.f32	s13, s17
 8029074:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029078:	ee16 6a90 	vmov	r6, s13
 802907c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029080:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029084:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029088:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802908c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029090:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029094:	ee18 2a10 	vmov	r2, s16
 8029098:	eeb0 8a47 	vmov.f32	s16, s14
 802909c:	fb92 f3f3 	sdiv	r3, r2, r3
 80290a0:	ee18 2a90 	vmov	r2, s17
 80290a4:	932b      	str	r3, [sp, #172]	; 0xac
 80290a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80290a8:	eef0 8a67 	vmov.f32	s17, s15
 80290ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80290b0:	932c      	str	r3, [sp, #176]	; 0xb0
 80290b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80290b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80290b6:	3b01      	subs	r3, #1
 80290b8:	930d      	str	r3, [sp, #52]	; 0x34
 80290ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80290bc:	bf08      	it	eq
 80290be:	4613      	moveq	r3, r2
 80290c0:	9309      	str	r3, [sp, #36]	; 0x24
 80290c2:	e6c2      	b.n	8028e4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80290c4:	2900      	cmp	r1, #0
 80290c6:	f43f af4d 	beq.w	8028f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 80290ca:	eb0a 0003 	add.w	r0, sl, r3
 80290ce:	0843      	lsrs	r3, r0, #1
 80290d0:	07c0      	lsls	r0, r0, #31
 80290d2:	5cfb      	ldrb	r3, [r7, r3]
 80290d4:	bf54      	ite	pl
 80290d6:	f003 030f 	andpl.w	r3, r3, #15
 80290da:	111b      	asrmi	r3, r3, #4
 80290dc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80290e0:	b2db      	uxtb	r3, r3
 80290e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80290e4:	e73e      	b.n	8028f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 80290e6:	f8b8 e000 	ldrh.w	lr, [r8]
 80290ea:	fa1f fb83 	uxth.w	fp, r3
 80290ee:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80290f2:	43db      	mvns	r3, r3
 80290f4:	ea4f 202e 	mov.w	r0, lr, asr #8
 80290f8:	fb11 f10b 	smulbb	r1, r1, fp
 80290fc:	b2db      	uxtb	r3, r3
 80290fe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029102:	fa5f fc8c 	uxtb.w	ip, ip
 8029106:	b2d2      	uxtb	r2, r2
 8029108:	fb00 1003 	mla	r0, r0, r3, r1
 802910c:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029110:	fb1c fc0b 	smulbb	ip, ip, fp
 8029114:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029118:	b280      	uxth	r0, r0
 802911a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802911e:	fb12 fb0b 	smulbb	fp, r2, fp
 8029122:	fa5f fe8e 	uxtb.w	lr, lr
 8029126:	fb01 cc03 	mla	ip, r1, r3, ip
 802912a:	fb0e bb03 	mla	fp, lr, r3, fp
 802912e:	1c43      	adds	r3, r0, #1
 8029130:	fa1f fc8c 	uxth.w	ip, ip
 8029134:	fa1f fb8b 	uxth.w	fp, fp
 8029138:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802913c:	f10c 0101 	add.w	r1, ip, #1
 8029140:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8029144:	f10b 0001 	add.w	r0, fp, #1
 8029148:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802914c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029150:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029154:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029158:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802915c:	4318      	orrs	r0, r3
 802915e:	ea40 000c 	orr.w	r0, r0, ip
 8029162:	f8a8 0000 	strh.w	r0, [r8]
 8029166:	e734      	b.n	8028fd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029168:	f113 0b01 	adds.w	fp, r3, #1
 802916c:	f53f af31 	bmi.w	8028fd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029170:	45dc      	cmp	ip, fp
 8029172:	f6ff af2e 	blt.w	8028fd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029176:	f110 0b01 	adds.w	fp, r0, #1
 802917a:	f53f af2a 	bmi.w	8028fd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802917e:	45de      	cmp	lr, fp
 8029180:	f6ff af27 	blt.w	8028fd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029184:	9302      	str	r3, [sp, #8]
 8029186:	fa0f f38e 	sxth.w	r3, lr
 802918a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802918c:	9301      	str	r3, [sp, #4]
 802918e:	fa0f f38c 	sxth.w	r3, ip
 8029192:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029196:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802919a:	9300      	str	r3, [sp, #0]
 802919c:	463a      	mov	r2, r7
 802919e:	4653      	mov	r3, sl
 80291a0:	4641      	mov	r1, r8
 80291a2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80291a4:	f7ff fd2a 	bl	8028bfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80291a8:	e713      	b.n	8028fd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80291aa:	1422      	asrs	r2, r4, #16
 80291ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80291ae:	1433      	asrs	r3, r6, #16
 80291b0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80291b4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80291b8:	fb05 2303 	mla	r3, r5, r3, r2
 80291bc:	085a      	lsrs	r2, r3, #1
 80291be:	07dd      	lsls	r5, r3, #31
 80291c0:	5cba      	ldrb	r2, [r7, r2]
 80291c2:	bf54      	ite	pl
 80291c4:	f002 020f 	andpl.w	r2, r2, #15
 80291c8:	1112      	asrmi	r2, r2, #4
 80291ca:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80291ce:	b2d2      	uxtb	r2, r2
 80291d0:	2900      	cmp	r1, #0
 80291d2:	d077      	beq.n	80292c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80291d4:	f103 0e01 	add.w	lr, r3, #1
 80291d8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80291dc:	f01e 0f01 	tst.w	lr, #1
 80291e0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80291e4:	bf0c      	ite	eq
 80291e6:	f00c 0c0f 	andeq.w	ip, ip, #15
 80291ea:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80291ee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80291f2:	fa5f f58c 	uxtb.w	r5, ip
 80291f6:	9512      	str	r5, [sp, #72]	; 0x48
 80291f8:	b308      	cbz	r0, 802923e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80291fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80291fc:	442b      	add	r3, r5
 80291fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029202:	07dd      	lsls	r5, r3, #31
 8029204:	f103 0301 	add.w	r3, r3, #1
 8029208:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802920c:	bf54      	ite	pl
 802920e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029212:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029216:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802921a:	fa5f f58c 	uxtb.w	r5, ip
 802921e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029222:	950c      	str	r5, [sp, #48]	; 0x30
 8029224:	07dd      	lsls	r5, r3, #31
 8029226:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802922a:	bf54      	ite	pl
 802922c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029230:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029234:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029238:	fa5f f38c 	uxtb.w	r3, ip
 802923c:	9313      	str	r3, [sp, #76]	; 0x4c
 802923e:	b289      	uxth	r1, r1
 8029240:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029242:	b280      	uxth	r0, r0
 8029244:	fb01 f300 	mul.w	r3, r1, r0
 8029248:	0109      	lsls	r1, r1, #4
 802924a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802924e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8029252:	1ac9      	subs	r1, r1, r3
 8029254:	b280      	uxth	r0, r0
 8029256:	b289      	uxth	r1, r1
 8029258:	ebac 0c00 	sub.w	ip, ip, r0
 802925c:	4369      	muls	r1, r5
 802925e:	fa1f fc8c 	uxth.w	ip, ip
 8029262:	fb02 120c 	mla	r2, r2, ip, r1
 8029266:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029268:	fb00 2001 	mla	r0, r0, r1, r2
 802926c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802926e:	fb03 0302 	mla	r3, r3, r2, r0
 8029272:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029276:	b1d3      	cbz	r3, 80292ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029278:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802927a:	4353      	muls	r3, r2
 802927c:	1c5a      	adds	r2, r3, #1
 802927e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029282:	4a0f      	ldr	r2, [pc, #60]	; (80292c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8029284:	121b      	asrs	r3, r3, #8
 8029286:	6812      	ldr	r2, [r2, #0]
 8029288:	2bff      	cmp	r3, #255	; 0xff
 802928a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802928e:	d12d      	bne.n	80292ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8029290:	0953      	lsrs	r3, r2, #5
 8029292:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8029296:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802929a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802929e:	f02c 0c07 	bic.w	ip, ip, #7
 80292a2:	ea43 0c0c 	orr.w	ip, r3, ip
 80292a6:	ea4c 0202 	orr.w	r2, ip, r2
 80292aa:	f8a8 2000 	strh.w	r2, [r8]
 80292ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80292b0:	f108 0802 	add.w	r8, r8, #2
 80292b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80292b8:	441c      	add	r4, r3
 80292ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80292bc:	441e      	add	r6, r3
 80292be:	e6b9      	b.n	8029034 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80292c0:	2400af4c 	.word	0x2400af4c
 80292c4:	2800      	cmp	r0, #0
 80292c6:	d0ba      	beq.n	802923e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80292c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80292ca:	442b      	add	r3, r5
 80292cc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80292d0:	07db      	lsls	r3, r3, #31
 80292d2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80292d6:	bf54      	ite	pl
 80292d8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80292dc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80292e0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80292e4:	fa5f f38c 	uxtb.w	r3, ip
 80292e8:	930c      	str	r3, [sp, #48]	; 0x30
 80292ea:	e7a8      	b.n	802923e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80292ec:	f8b8 e000 	ldrh.w	lr, [r8]
 80292f0:	fa1f fa83 	uxth.w	sl, r3
 80292f4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80292f8:	43db      	mvns	r3, r3
 80292fa:	ea4f 202e 	mov.w	r0, lr, asr #8
 80292fe:	fb11 f10a 	smulbb	r1, r1, sl
 8029302:	b2db      	uxtb	r3, r3
 8029304:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029308:	b2d2      	uxtb	r2, r2
 802930a:	fa5f fc8c 	uxtb.w	ip, ip
 802930e:	fb00 1003 	mla	r0, r0, r3, r1
 8029312:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029316:	fb12 f20a 	smulbb	r2, r2, sl
 802931a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802931e:	b280      	uxth	r0, r0
 8029320:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029324:	fb1c fc0a 	smulbb	ip, ip, sl
 8029328:	fa5f fe8e 	uxtb.w	lr, lr
 802932c:	fb0e 2203 	mla	r2, lr, r3, r2
 8029330:	fb01 cc03 	mla	ip, r1, r3, ip
 8029334:	1c43      	adds	r3, r0, #1
 8029336:	b292      	uxth	r2, r2
 8029338:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802933c:	1c51      	adds	r1, r2, #1
 802933e:	fa1f fc8c 	uxth.w	ip, ip
 8029342:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8029346:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802934a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802934e:	4308      	orrs	r0, r1
 8029350:	f10c 0101 	add.w	r1, ip, #1
 8029354:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029358:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802935c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029360:	ea40 000c 	orr.w	r0, r0, ip
 8029364:	f8a8 0000 	strh.w	r0, [r8]
 8029368:	e7a1      	b.n	80292ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802936a:	b017      	add	sp, #92	; 0x5c
 802936c:	ecbd 8b08 	vpop	{d8-d11}
 8029370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8029374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029378:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802937c:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029380:	2c00      	cmp	r4, #0
 8029382:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029386:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802938a:	fb04 ce03 	mla	lr, r4, r3, ip
 802938e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8029392:	db60      	blt.n	8029456 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8029394:	45a1      	cmp	r9, r4
 8029396:	dd5e      	ble.n	8029456 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8029398:	f1bc 0f00 	cmp.w	ip, #0
 802939c:	db59      	blt.n	8029452 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802939e:	45e0      	cmp	r8, ip
 80293a0:	dd57      	ble.n	8029452 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80293a2:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80293a6:	f01e 0f01 	tst.w	lr, #1
 80293aa:	5c16      	ldrb	r6, [r2, r0]
 80293ac:	bf0c      	ite	eq
 80293ae:	f006 060f 	andeq.w	r6, r6, #15
 80293b2:	1136      	asrne	r6, r6, #4
 80293b4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80293b8:	b2f6      	uxtb	r6, r6
 80293ba:	f11c 0001 	adds.w	r0, ip, #1
 80293be:	d44d      	bmi.n	802945c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80293c0:	4580      	cmp	r8, r0
 80293c2:	dd4b      	ble.n	802945c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80293c4:	2d00      	cmp	r5, #0
 80293c6:	d04b      	beq.n	8029460 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 80293c8:	f10e 0a01 	add.w	sl, lr, #1
 80293cc:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80293d0:	f01a 0f01 	tst.w	sl, #1
 80293d4:	5c10      	ldrb	r0, [r2, r0]
 80293d6:	bf0c      	ite	eq
 80293d8:	f000 000f 	andeq.w	r0, r0, #15
 80293dc:	1100      	asrne	r0, r0, #4
 80293de:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80293e2:	b2c0      	uxtb	r0, r0
 80293e4:	3401      	adds	r4, #1
 80293e6:	d43f      	bmi.n	8029468 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80293e8:	45a1      	cmp	r9, r4
 80293ea:	dd3d      	ble.n	8029468 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80293ec:	2f00      	cmp	r7, #0
 80293ee:	f000 8093 	beq.w	8029518 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 80293f2:	f1bc 0f00 	cmp.w	ip, #0
 80293f6:	db35      	blt.n	8029464 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80293f8:	45e0      	cmp	r8, ip
 80293fa:	dd33      	ble.n	8029464 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80293fc:	eb03 090e 	add.w	r9, r3, lr
 8029400:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8029404:	f019 0f01 	tst.w	r9, #1
 8029408:	5d14      	ldrb	r4, [r2, r4]
 802940a:	bf0c      	ite	eq
 802940c:	f004 040f 	andeq.w	r4, r4, #15
 8029410:	1124      	asrne	r4, r4, #4
 8029412:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029416:	b2e4      	uxtb	r4, r4
 8029418:	f11c 0c01 	adds.w	ip, ip, #1
 802941c:	d427      	bmi.n	802946e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802941e:	45e0      	cmp	r8, ip
 8029420:	dd25      	ble.n	802946e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8029422:	b335      	cbz	r5, 8029472 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8029424:	3301      	adds	r3, #1
 8029426:	449e      	add	lr, r3
 8029428:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802942c:	f01e 0f01 	tst.w	lr, #1
 8029430:	5cd2      	ldrb	r2, [r2, r3]
 8029432:	bf0c      	ite	eq
 8029434:	f002 020f 	andeq.w	r2, r2, #15
 8029438:	1112      	asrne	r2, r2, #4
 802943a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802943e:	b2d3      	uxtb	r3, r2
 8029440:	2d0f      	cmp	r5, #15
 8029442:	d917      	bls.n	8029474 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8029444:	4b37      	ldr	r3, [pc, #220]	; (8029524 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 8029446:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802944a:	4a37      	ldr	r2, [pc, #220]	; (8029528 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 802944c:	4837      	ldr	r0, [pc, #220]	; (802952c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802944e:	f000 fc4f 	bl	8029cf0 <__assert_func>
 8029452:	2600      	movs	r6, #0
 8029454:	e7b1      	b.n	80293ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8029456:	2000      	movs	r0, #0
 8029458:	4606      	mov	r6, r0
 802945a:	e7c3      	b.n	80293e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802945c:	2000      	movs	r0, #0
 802945e:	e7c1      	b.n	80293e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029460:	4628      	mov	r0, r5
 8029462:	e7bf      	b.n	80293e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029464:	2400      	movs	r4, #0
 8029466:	e7d7      	b.n	8029418 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8029468:	2300      	movs	r3, #0
 802946a:	461c      	mov	r4, r3
 802946c:	e7e8      	b.n	8029440 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802946e:	2300      	movs	r3, #0
 8029470:	e7e6      	b.n	8029440 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8029472:	462b      	mov	r3, r5
 8029474:	2f0f      	cmp	r7, #15
 8029476:	d8e5      	bhi.n	8029444 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8029478:	b2ad      	uxth	r5, r5
 802947a:	b2bf      	uxth	r7, r7
 802947c:	fb05 fc07 	mul.w	ip, r5, r7
 8029480:	012d      	lsls	r5, r5, #4
 8029482:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029486:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802948a:	eba5 050c 	sub.w	r5, r5, ip
 802948e:	b2bf      	uxth	r7, r7
 8029490:	b2ad      	uxth	r5, r5
 8029492:	1bd2      	subs	r2, r2, r7
 8029494:	4368      	muls	r0, r5
 8029496:	b292      	uxth	r2, r2
 8029498:	fb06 0002 	mla	r0, r6, r2, r0
 802949c:	fb07 0404 	mla	r4, r7, r4, r0
 80294a0:	fb0c 4303 	mla	r3, ip, r3, r4
 80294a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80294a8:	b3a3      	cbz	r3, 8029514 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80294aa:	4a21      	ldr	r2, [pc, #132]	; (8029530 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 80294ac:	880e      	ldrh	r6, [r1, #0]
 80294ae:	6815      	ldr	r5, [r2, #0]
 80294b0:	b29a      	uxth	r2, r3
 80294b2:	1234      	asrs	r4, r6, #8
 80294b4:	43db      	mvns	r3, r3
 80294b6:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80294ba:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80294be:	b2db      	uxtb	r3, r3
 80294c0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80294c4:	fb10 f002 	smulbb	r0, r0, r2
 80294c8:	b2ed      	uxtb	r5, r5
 80294ca:	fb17 f702 	smulbb	r7, r7, r2
 80294ce:	fb04 0403 	mla	r4, r4, r3, r0
 80294d2:	10f0      	asrs	r0, r6, #3
 80294d4:	fb15 f202 	smulbb	r2, r5, r2
 80294d8:	00f6      	lsls	r6, r6, #3
 80294da:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80294de:	b2a4      	uxth	r4, r4
 80294e0:	b2f6      	uxtb	r6, r6
 80294e2:	fb00 7003 	mla	r0, r0, r3, r7
 80294e6:	fb06 2303 	mla	r3, r6, r3, r2
 80294ea:	b280      	uxth	r0, r0
 80294ec:	b29a      	uxth	r2, r3
 80294ee:	1c63      	adds	r3, r4, #1
 80294f0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80294f4:	1c53      	adds	r3, r2, #1
 80294f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80294fa:	1c42      	adds	r2, r0, #1
 80294fc:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029500:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029504:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029508:	0940      	lsrs	r0, r0, #5
 802950a:	4323      	orrs	r3, r4
 802950c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029510:	4303      	orrs	r3, r0
 8029512:	800b      	strh	r3, [r1, #0]
 8029514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029518:	2d0f      	cmp	r5, #15
 802951a:	d893      	bhi.n	8029444 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802951c:	463b      	mov	r3, r7
 802951e:	463c      	mov	r4, r7
 8029520:	e7aa      	b.n	8029478 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8029522:	bf00      	nop
 8029524:	0802e369 	.word	0x0802e369
 8029528:	0802e936 	.word	0x0802e936
 802952c:	0802e3ed 	.word	0x0802e3ed
 8029530:	2400af4c 	.word	0x2400af4c

08029534 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029538:	ed2d 8b08 	vpush	{d8-d11}
 802953c:	b093      	sub	sp, #76	; 0x4c
 802953e:	461d      	mov	r5, r3
 8029540:	eeb0 aa40 	vmov.f32	s20, s0
 8029544:	920c      	str	r2, [sp, #48]	; 0x30
 8029546:	eef0 9a60 	vmov.f32	s19, s1
 802954a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802954c:	eeb0 9a41 	vmov.f32	s18, s2
 8029550:	9011      	str	r0, [sp, #68]	; 0x44
 8029552:	eeb0 8a62 	vmov.f32	s16, s5
 8029556:	6850      	ldr	r0, [r2, #4]
 8029558:	eef0 8a43 	vmov.f32	s17, s6
 802955c:	9107      	str	r1, [sp, #28]
 802955e:	eef0 ba44 	vmov.f32	s23, s8
 8029562:	6812      	ldr	r2, [r2, #0]
 8029564:	eeb0 ba64 	vmov.f32	s22, s9
 8029568:	eef0 aa45 	vmov.f32	s21, s10
 802956c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8029570:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8029574:	fb00 1303 	mla	r3, r0, r3, r1
 8029578:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802957c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802957e:	689b      	ldr	r3, [r3, #8]
 8029580:	3301      	adds	r3, #1
 8029582:	f023 0301 	bic.w	r3, r3, #1
 8029586:	9306      	str	r3, [sp, #24]
 8029588:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802958a:	681f      	ldr	r7, [r3, #0]
 802958c:	9b07      	ldr	r3, [sp, #28]
 802958e:	2b00      	cmp	r3, #0
 8029590:	dc03      	bgt.n	802959a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029594:	2b00      	cmp	r3, #0
 8029596:	f340 8267 	ble.w	8029a68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802959a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802959c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80295a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80295a4:	1e48      	subs	r0, r1, #1
 80295a6:	f102 3cff 	add.w	ip, r2, #4294967295
 80295aa:	2d00      	cmp	r5, #0
 80295ac:	f340 80b7 	ble.w	802971e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80295b0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80295b4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80295b8:	d406      	bmi.n	80295c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80295ba:	4586      	cmp	lr, r0
 80295bc:	da04      	bge.n	80295c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80295be:	2b00      	cmp	r3, #0
 80295c0:	db02      	blt.n	80295c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80295c2:	4563      	cmp	r3, ip
 80295c4:	f2c0 80ac 	blt.w	8029720 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80295c8:	f11e 0e01 	adds.w	lr, lr, #1
 80295cc:	f100 809f 	bmi.w	802970e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80295d0:	4571      	cmp	r1, lr
 80295d2:	f2c0 809c 	blt.w	802970e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80295d6:	3301      	adds	r3, #1
 80295d8:	f100 8099 	bmi.w	802970e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80295dc:	429a      	cmp	r2, r3
 80295de:	f2c0 8096 	blt.w	802970e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80295e2:	46c8      	mov	r8, r9
 80295e4:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80295e8:	9509      	str	r5, [sp, #36]	; 0x24
 80295ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80295ec:	2b00      	cmp	r3, #0
 80295ee:	f340 80b5 	ble.w	802975c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80295f2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80295f6:	1430      	asrs	r0, r6, #16
 80295f8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80295fc:	9308      	str	r3, [sp, #32]
 80295fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029600:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029604:	1423      	asrs	r3, r4, #16
 8029606:	f100 813f 	bmi.w	8029888 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802960a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802960e:	455b      	cmp	r3, fp
 8029610:	f280 813a 	bge.w	8029888 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029614:	2800      	cmp	r0, #0
 8029616:	f2c0 8137 	blt.w	8029888 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802961a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802961e:	4558      	cmp	r0, fp
 8029620:	f280 8132 	bge.w	8029888 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029624:	9a06      	ldr	r2, [sp, #24]
 8029626:	fb00 3302 	mla	r3, r0, r2, r3
 802962a:	0858      	lsrs	r0, r3, #1
 802962c:	07da      	lsls	r2, r3, #31
 802962e:	9a08      	ldr	r2, [sp, #32]
 8029630:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029634:	bf54      	ite	pl
 8029636:	f00c 0c0f 	andpl.w	ip, ip, #15
 802963a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802963e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029642:	fa5f fc8c 	uxtb.w	ip, ip
 8029646:	2a00      	cmp	r2, #0
 8029648:	f000 80cc 	beq.w	80297e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802964c:	1c58      	adds	r0, r3, #1
 802964e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029652:	07c0      	lsls	r0, r0, #31
 8029654:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029658:	bf54      	ite	pl
 802965a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802965e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029662:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029666:	fa5f fe8e 	uxtb.w	lr, lr
 802966a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802966e:	b1b9      	cbz	r1, 80296a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8029670:	4453      	add	r3, sl
 8029672:	0858      	lsrs	r0, r3, #1
 8029674:	07da      	lsls	r2, r3, #31
 8029676:	5c38      	ldrb	r0, [r7, r0]
 8029678:	bf54      	ite	pl
 802967a:	f000 000f 	andpl.w	r0, r0, #15
 802967e:	1100      	asrmi	r0, r0, #4
 8029680:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029684:	b2c0      	uxtb	r0, r0
 8029686:	900a      	str	r0, [sp, #40]	; 0x28
 8029688:	1c58      	adds	r0, r3, #1
 802968a:	0843      	lsrs	r3, r0, #1
 802968c:	07c2      	lsls	r2, r0, #31
 802968e:	5cfb      	ldrb	r3, [r7, r3]
 8029690:	bf54      	ite	pl
 8029692:	f003 030f 	andpl.w	r3, r3, #15
 8029696:	111b      	asrmi	r3, r3, #4
 8029698:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802969c:	b2db      	uxtb	r3, r3
 802969e:	930e      	str	r3, [sp, #56]	; 0x38
 80296a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80296a4:	b289      	uxth	r1, r1
 80296a6:	fb02 f301 	mul.w	r3, r2, r1
 80296aa:	0112      	lsls	r2, r2, #4
 80296ac:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80296b0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80296b4:	1ad2      	subs	r2, r2, r3
 80296b6:	b289      	uxth	r1, r1
 80296b8:	b292      	uxth	r2, r2
 80296ba:	1a40      	subs	r0, r0, r1
 80296bc:	fa1f fe80 	uxth.w	lr, r0
 80296c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80296c2:	4342      	muls	r2, r0
 80296c4:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80296c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80296ca:	fb01 c102 	mla	r1, r1, r2, ip
 80296ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80296d0:	fb03 1302 	mla	r3, r3, r2, r1
 80296d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80296d8:	2bff      	cmp	r3, #255	; 0xff
 80296da:	f040 8094 	bne.w	8029806 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 80296de:	4bbf      	ldr	r3, [pc, #764]	; (80299dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 80296e0:	681a      	ldr	r2, [r3, #0]
 80296e2:	4bbf      	ldr	r3, [pc, #764]	; (80299e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80296e4:	0951      	lsrs	r1, r2, #5
 80296e6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80296ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80296ee:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80296f2:	430b      	orrs	r3, r1
 80296f4:	4313      	orrs	r3, r2
 80296f6:	f8a8 3000 	strh.w	r3, [r8]
 80296fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80296fc:	f108 0802 	add.w	r8, r8, #2
 8029700:	441c      	add	r4, r3
 8029702:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029704:	441e      	add	r6, r3
 8029706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029708:	3b01      	subs	r3, #1
 802970a:	9309      	str	r3, [sp, #36]	; 0x24
 802970c:	e76d      	b.n	80295ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802970e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029710:	3d01      	subs	r5, #1
 8029712:	f109 0902 	add.w	r9, r9, #2
 8029716:	441c      	add	r4, r3
 8029718:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802971a:	441e      	add	r6, r3
 802971c:	e745      	b.n	80295aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802971e:	d021      	beq.n	8029764 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8029720:	1e6b      	subs	r3, r5, #1
 8029722:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8029724:	fb00 4003 	mla	r0, r0, r3, r4
 8029728:	1400      	asrs	r0, r0, #16
 802972a:	f53f af5a 	bmi.w	80295e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802972e:	3901      	subs	r1, #1
 8029730:	4288      	cmp	r0, r1
 8029732:	f6bf af56 	bge.w	80295e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029736:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8029738:	fb01 6303 	mla	r3, r1, r3, r6
 802973c:	141b      	asrs	r3, r3, #16
 802973e:	f53f af50 	bmi.w	80295e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029742:	3a01      	subs	r2, #1
 8029744:	4293      	cmp	r3, r2
 8029746:	f6bf af4c 	bge.w	80295e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802974a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802974e:	46a8      	mov	r8, r5
 8029750:	46ce      	mov	lr, r9
 8029752:	9308      	str	r3, [sp, #32]
 8029754:	f1b8 0f00 	cmp.w	r8, #0
 8029758:	f300 80b6 	bgt.w	80298c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802975c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029760:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029764:	9b07      	ldr	r3, [sp, #28]
 8029766:	2b00      	cmp	r3, #0
 8029768:	f340 817e 	ble.w	8029a68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802976c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029770:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029772:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029776:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802977a:	eef0 6a48 	vmov.f32	s13, s16
 802977e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029782:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029786:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802978a:	ee16 4a90 	vmov	r4, s13
 802978e:	eef0 6a68 	vmov.f32	s13, s17
 8029792:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029796:	ee16 6a90 	vmov	r6, s13
 802979a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802979e:	ee69 7a27 	vmul.f32	s15, s18, s15
 80297a2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80297a6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80297aa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80297ae:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80297b2:	ee18 2a10 	vmov	r2, s16
 80297b6:	eeb0 8a47 	vmov.f32	s16, s14
 80297ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80297be:	ee18 2a90 	vmov	r2, s17
 80297c2:	9327      	str	r3, [sp, #156]	; 0x9c
 80297c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80297c6:	eef0 8a67 	vmov.f32	s17, s15
 80297ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80297ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80297d0:	9b07      	ldr	r3, [sp, #28]
 80297d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80297d4:	3b01      	subs	r3, #1
 80297d6:	9307      	str	r3, [sp, #28]
 80297d8:	bf08      	it	eq
 80297da:	4615      	moveq	r5, r2
 80297dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80297de:	bf18      	it	ne
 80297e0:	461d      	movne	r5, r3
 80297e2:	e6d3      	b.n	802958c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80297e4:	2900      	cmp	r1, #0
 80297e6:	f43f af5b 	beq.w	80296a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80297ea:	eb0a 0003 	add.w	r0, sl, r3
 80297ee:	0843      	lsrs	r3, r0, #1
 80297f0:	07c0      	lsls	r0, r0, #31
 80297f2:	5cfb      	ldrb	r3, [r7, r3]
 80297f4:	bf54      	ite	pl
 80297f6:	f003 030f 	andpl.w	r3, r3, #15
 80297fa:	111b      	asrmi	r3, r3, #4
 80297fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029800:	b2db      	uxtb	r3, r3
 8029802:	930a      	str	r3, [sp, #40]	; 0x28
 8029804:	e74c      	b.n	80296a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8029806:	2b00      	cmp	r3, #0
 8029808:	f43f af77 	beq.w	80296fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802980c:	4a73      	ldr	r2, [pc, #460]	; (80299dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802980e:	fa1f fe83 	uxth.w	lr, r3
 8029812:	f8b8 c000 	ldrh.w	ip, [r8]
 8029816:	43db      	mvns	r3, r3
 8029818:	6810      	ldr	r0, [r2, #0]
 802981a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802981e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8029822:	b2db      	uxtb	r3, r3
 8029824:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029828:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802982c:	fb12 f20e 	smulbb	r2, r2, lr
 8029830:	b2c0      	uxtb	r0, r0
 8029832:	fb1b fb0e 	smulbb	fp, fp, lr
 8029836:	fb01 2103 	mla	r1, r1, r3, r2
 802983a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802983e:	fb10 fe0e 	smulbb	lr, r0, lr
 8029842:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029846:	b289      	uxth	r1, r1
 8029848:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802984c:	fa5f fc8c 	uxtb.w	ip, ip
 8029850:	fb02 b203 	mla	r2, r2, r3, fp
 8029854:	1c48      	adds	r0, r1, #1
 8029856:	fb0c e303 	mla	r3, ip, r3, lr
 802985a:	b292      	uxth	r2, r2
 802985c:	b29b      	uxth	r3, r3
 802985e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8029862:	f102 0b01 	add.w	fp, r2, #1
 8029866:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802986a:	1c59      	adds	r1, r3, #1
 802986c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8029870:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8029874:	0952      	lsrs	r2, r2, #5
 8029876:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802987a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802987e:	4301      	orrs	r1, r0
 8029880:	4311      	orrs	r1, r2
 8029882:	f8a8 1000 	strh.w	r1, [r8]
 8029886:	e738      	b.n	80296fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029888:	f113 0b01 	adds.w	fp, r3, #1
 802988c:	f53f af35 	bmi.w	80296fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029890:	45dc      	cmp	ip, fp
 8029892:	f6ff af32 	blt.w	80296fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029896:	f110 0b01 	adds.w	fp, r0, #1
 802989a:	f53f af2e 	bmi.w	80296fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802989e:	45de      	cmp	lr, fp
 80298a0:	f6ff af2b 	blt.w	80296fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80298a4:	9302      	str	r3, [sp, #8]
 80298a6:	fa0f f38e 	sxth.w	r3, lr
 80298aa:	9a08      	ldr	r2, [sp, #32]
 80298ac:	9301      	str	r3, [sp, #4]
 80298ae:	fa0f f38c 	sxth.w	r3, ip
 80298b2:	9105      	str	r1, [sp, #20]
 80298b4:	4641      	mov	r1, r8
 80298b6:	9300      	str	r3, [sp, #0]
 80298b8:	4653      	mov	r3, sl
 80298ba:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80298be:	463a      	mov	r2, r7
 80298c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80298c2:	f7ff fd57 	bl	8029374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 80298c6:	e718      	b.n	80296fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80298c8:	1422      	asrs	r2, r4, #16
 80298ca:	9906      	ldr	r1, [sp, #24]
 80298cc:	1433      	asrs	r3, r6, #16
 80298ce:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80298d2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80298d6:	fb01 2303 	mla	r3, r1, r3, r2
 80298da:	085a      	lsrs	r2, r3, #1
 80298dc:	07d9      	lsls	r1, r3, #31
 80298de:	5cba      	ldrb	r2, [r7, r2]
 80298e0:	bf54      	ite	pl
 80298e2:	f002 020f 	andpl.w	r2, r2, #15
 80298e6:	1112      	asrmi	r2, r2, #4
 80298e8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80298ec:	b2d2      	uxtb	r2, r2
 80298ee:	2800      	cmp	r0, #0
 80298f0:	d063      	beq.n	80299ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 80298f2:	f103 0a01 	add.w	sl, r3, #1
 80298f6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80298fa:	f01a 0f01 	tst.w	sl, #1
 80298fe:	5c79      	ldrb	r1, [r7, r1]
 8029900:	bf0c      	ite	eq
 8029902:	f001 010f 	andeq.w	r1, r1, #15
 8029906:	1109      	asrne	r1, r1, #4
 8029908:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802990c:	b2c9      	uxtb	r1, r1
 802990e:	910f      	str	r1, [sp, #60]	; 0x3c
 8029910:	f1bc 0f00 	cmp.w	ip, #0
 8029914:	d01a      	beq.n	802994c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8029916:	9908      	ldr	r1, [sp, #32]
 8029918:	440b      	add	r3, r1
 802991a:	0859      	lsrs	r1, r3, #1
 802991c:	f013 0f01 	tst.w	r3, #1
 8029920:	f103 0301 	add.w	r3, r3, #1
 8029924:	5c79      	ldrb	r1, [r7, r1]
 8029926:	bf0c      	ite	eq
 8029928:	f001 010f 	andeq.w	r1, r1, #15
 802992c:	1109      	asrne	r1, r1, #4
 802992e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029932:	b2c9      	uxtb	r1, r1
 8029934:	910b      	str	r1, [sp, #44]	; 0x2c
 8029936:	0859      	lsrs	r1, r3, #1
 8029938:	07db      	lsls	r3, r3, #31
 802993a:	5c79      	ldrb	r1, [r7, r1]
 802993c:	bf54      	ite	pl
 802993e:	f001 010f 	andpl.w	r1, r1, #15
 8029942:	1109      	asrmi	r1, r1, #4
 8029944:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029948:	b2c9      	uxtb	r1, r1
 802994a:	9110      	str	r1, [sp, #64]	; 0x40
 802994c:	b280      	uxth	r0, r0
 802994e:	fa1f fc8c 	uxth.w	ip, ip
 8029952:	fb00 f30c 	mul.w	r3, r0, ip
 8029956:	0100      	lsls	r0, r0, #4
 8029958:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802995c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8029960:	1ac0      	subs	r0, r0, r3
 8029962:	fa1f fc8c 	uxth.w	ip, ip
 8029966:	b280      	uxth	r0, r0
 8029968:	eba1 010c 	sub.w	r1, r1, ip
 802996c:	fa1f fa81 	uxth.w	sl, r1
 8029970:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029972:	4348      	muls	r0, r1
 8029974:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029976:	fb02 020a 	mla	r2, r2, sl, r0
 802997a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802997e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029980:	fb03 c302 	mla	r3, r3, r2, ip
 8029984:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029988:	2bff      	cmp	r3, #255	; 0xff
 802998a:	d12b      	bne.n	80299e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802998c:	4b13      	ldr	r3, [pc, #76]	; (80299dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802998e:	681a      	ldr	r2, [r3, #0]
 8029990:	4b13      	ldr	r3, [pc, #76]	; (80299e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8029992:	0951      	lsrs	r1, r2, #5
 8029994:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8029998:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802999c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80299a0:	430b      	orrs	r3, r1
 80299a2:	4313      	orrs	r3, r2
 80299a4:	f8ae 3000 	strh.w	r3, [lr]
 80299a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80299aa:	f10e 0e02 	add.w	lr, lr, #2
 80299ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80299b2:	441c      	add	r4, r3
 80299b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80299b6:	441e      	add	r6, r3
 80299b8:	e6cc      	b.n	8029754 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80299ba:	f1bc 0f00 	cmp.w	ip, #0
 80299be:	d0c5      	beq.n	802994c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 80299c0:	9908      	ldr	r1, [sp, #32]
 80299c2:	440b      	add	r3, r1
 80299c4:	0859      	lsrs	r1, r3, #1
 80299c6:	07db      	lsls	r3, r3, #31
 80299c8:	5c79      	ldrb	r1, [r7, r1]
 80299ca:	bf54      	ite	pl
 80299cc:	f001 010f 	andpl.w	r1, r1, #15
 80299d0:	1109      	asrmi	r1, r1, #4
 80299d2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80299d6:	b2c9      	uxtb	r1, r1
 80299d8:	910b      	str	r1, [sp, #44]	; 0x2c
 80299da:	e7b7      	b.n	802994c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 80299dc:	2400af4c 	.word	0x2400af4c
 80299e0:	fffff800 	.word	0xfffff800
 80299e4:	2b00      	cmp	r3, #0
 80299e6:	d0df      	beq.n	80299a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 80299e8:	4a22      	ldr	r2, [pc, #136]	; (8029a74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 80299ea:	fa1f fa83 	uxth.w	sl, r3
 80299ee:	f8be c000 	ldrh.w	ip, [lr]
 80299f2:	43db      	mvns	r3, r3
 80299f4:	6810      	ldr	r0, [r2, #0]
 80299f6:	ea4f 212c 	mov.w	r1, ip, asr #8
 80299fa:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80299fe:	b2db      	uxtb	r3, r3
 8029a00:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029a04:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8029a08:	fb12 f20a 	smulbb	r2, r2, sl
 8029a0c:	b2c0      	uxtb	r0, r0
 8029a0e:	fb1b fb0a 	smulbb	fp, fp, sl
 8029a12:	fb01 2103 	mla	r1, r1, r3, r2
 8029a16:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029a1a:	fb10 f00a 	smulbb	r0, r0, sl
 8029a1e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029a22:	b289      	uxth	r1, r1
 8029a24:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029a28:	fa5f fc8c 	uxtb.w	ip, ip
 8029a2c:	fb02 b203 	mla	r2, r2, r3, fp
 8029a30:	fb0c 0003 	mla	r0, ip, r3, r0
 8029a34:	1c4b      	adds	r3, r1, #1
 8029a36:	b292      	uxth	r2, r2
 8029a38:	b280      	uxth	r0, r0
 8029a3a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029a3e:	f100 0b01 	add.w	fp, r0, #1
 8029a42:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8029a46:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8029a4a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8029a4e:	ea4b 0101 	orr.w	r1, fp, r1
 8029a52:	f102 0b01 	add.w	fp, r2, #1
 8029a56:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8029a5a:	0952      	lsrs	r2, r2, #5
 8029a5c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029a60:	4311      	orrs	r1, r2
 8029a62:	f8ae 1000 	strh.w	r1, [lr]
 8029a66:	e79f      	b.n	80299a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8029a68:	b013      	add	sp, #76	; 0x4c
 8029a6a:	ecbd 8b08 	vpop	{d8-d11}
 8029a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a72:	bf00      	nop
 8029a74:	2400af4c 	.word	0x2400af4c

08029a78 <CRC_Lock>:
 8029a78:	4a20      	ldr	r2, [pc, #128]	; (8029afc <CRC_Lock+0x84>)
 8029a7a:	b530      	push	{r4, r5, lr}
 8029a7c:	6813      	ldr	r3, [r2, #0]
 8029a7e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8029a82:	f24c 2540 	movw	r5, #49728	; 0xc240
 8029a86:	f023 0301 	bic.w	r3, r3, #1
 8029a8a:	6013      	str	r3, [r2, #0]
 8029a8c:	4b1c      	ldr	r3, [pc, #112]	; (8029b00 <CRC_Lock+0x88>)
 8029a8e:	681a      	ldr	r2, [r3, #0]
 8029a90:	4022      	ands	r2, r4
 8029a92:	42aa      	cmp	r2, r5
 8029a94:	d005      	beq.n	8029aa2 <CRC_Lock+0x2a>
 8029a96:	681b      	ldr	r3, [r3, #0]
 8029a98:	f24c 2270 	movw	r2, #49776	; 0xc270
 8029a9c:	4023      	ands	r3, r4
 8029a9e:	4293      	cmp	r3, r2
 8029aa0:	d124      	bne.n	8029aec <CRC_Lock+0x74>
 8029aa2:	4b18      	ldr	r3, [pc, #96]	; (8029b04 <CRC_Lock+0x8c>)
 8029aa4:	681b      	ldr	r3, [r3, #0]
 8029aa6:	bb0b      	cbnz	r3, 8029aec <CRC_Lock+0x74>
 8029aa8:	4b17      	ldr	r3, [pc, #92]	; (8029b08 <CRC_Lock+0x90>)
 8029aaa:	681a      	ldr	r2, [r3, #0]
 8029aac:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029ab0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8029ab4:	d00d      	beq.n	8029ad2 <CRC_Lock+0x5a>
 8029ab6:	681a      	ldr	r2, [r3, #0]
 8029ab8:	f240 4483 	movw	r4, #1155	; 0x483
 8029abc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029ac0:	42a2      	cmp	r2, r4
 8029ac2:	d006      	beq.n	8029ad2 <CRC_Lock+0x5a>
 8029ac4:	681b      	ldr	r3, [r3, #0]
 8029ac6:	f240 4285 	movw	r2, #1157	; 0x485
 8029aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029ace:	4293      	cmp	r3, r2
 8029ad0:	d10c      	bne.n	8029aec <CRC_Lock+0x74>
 8029ad2:	4b0e      	ldr	r3, [pc, #56]	; (8029b0c <CRC_Lock+0x94>)
 8029ad4:	2201      	movs	r2, #1
 8029ad6:	601a      	str	r2, [r3, #0]
 8029ad8:	681a      	ldr	r2, [r3, #0]
 8029ada:	2a00      	cmp	r2, #0
 8029adc:	d1fc      	bne.n	8029ad8 <CRC_Lock+0x60>
 8029ade:	4b0c      	ldr	r3, [pc, #48]	; (8029b10 <CRC_Lock+0x98>)
 8029ae0:	6018      	str	r0, [r3, #0]
 8029ae2:	6818      	ldr	r0, [r3, #0]
 8029ae4:	1a43      	subs	r3, r0, r1
 8029ae6:	4258      	negs	r0, r3
 8029ae8:	4158      	adcs	r0, r3
 8029aea:	bd30      	pop	{r4, r5, pc}
 8029aec:	4b09      	ldr	r3, [pc, #36]	; (8029b14 <CRC_Lock+0x9c>)
 8029aee:	2201      	movs	r2, #1
 8029af0:	601a      	str	r2, [r3, #0]
 8029af2:	681a      	ldr	r2, [r3, #0]
 8029af4:	2a00      	cmp	r2, #0
 8029af6:	d1fc      	bne.n	8029af2 <CRC_Lock+0x7a>
 8029af8:	4b07      	ldr	r3, [pc, #28]	; (8029b18 <CRC_Lock+0xa0>)
 8029afa:	e7f1      	b.n	8029ae0 <CRC_Lock+0x68>
 8029afc:	e0002000 	.word	0xe0002000
 8029b00:	e000ed00 	.word	0xe000ed00
 8029b04:	e0042000 	.word	0xe0042000
 8029b08:	5c001000 	.word	0x5c001000
 8029b0c:	58024c08 	.word	0x58024c08
 8029b10:	58024c00 	.word	0x58024c00
 8029b14:	40023008 	.word	0x40023008
 8029b18:	40023000 	.word	0x40023000

08029b1c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029b1c:	6101      	str	r1, [r0, #16]
 8029b1e:	4770      	bx	lr

08029b20 <_ZN8touchgfx8Gestures4tickEv>:
 8029b20:	7b83      	ldrb	r3, [r0, #14]
 8029b22:	b14b      	cbz	r3, 8029b38 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029b24:	8903      	ldrh	r3, [r0, #8]
 8029b26:	3301      	adds	r3, #1
 8029b28:	b29b      	uxth	r3, r3
 8029b2a:	2b07      	cmp	r3, #7
 8029b2c:	8103      	strh	r3, [r0, #8]
 8029b2e:	bf81      	itttt	hi
 8029b30:	2300      	movhi	r3, #0
 8029b32:	8143      	strhhi	r3, [r0, #10]
 8029b34:	8183      	strhhi	r3, [r0, #12]
 8029b36:	7383      	strbhi	r3, [r0, #14]
 8029b38:	4770      	bx	lr
	...

08029b3c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029b3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029b40:	4604      	mov	r4, r0
 8029b42:	4698      	mov	r8, r3
 8029b44:	8880      	ldrh	r0, [r0, #4]
 8029b46:	4617      	mov	r7, r2
 8029b48:	4b1d      	ldr	r3, [pc, #116]	; (8029bc0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8029b4a:	460e      	mov	r6, r1
 8029b4c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8029b50:	eba8 0000 	sub.w	r0, r8, r0
 8029b54:	9300      	str	r3, [sp, #0]
 8029b56:	2300      	movs	r3, #0
 8029b58:	b280      	uxth	r0, r0
 8029b5a:	8aa2      	ldrh	r2, [r4, #20]
 8029b5c:	f88d 3004 	strb.w	r3, [sp, #4]
 8029b60:	b203      	sxth	r3, r0
 8029b62:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8029b66:	88e1      	ldrh	r1, [r4, #6]
 8029b68:	2b00      	cmp	r3, #0
 8029b6a:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029b6e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8029b72:	bfb8      	it	lt
 8029b74:	4240      	neglt	r0, r0
 8029b76:	f8ad 500c 	strh.w	r5, [sp, #12]
 8029b7a:	bfb8      	it	lt
 8029b7c:	b203      	sxthlt	r3, r0
 8029b7e:	4293      	cmp	r3, r2
 8029b80:	dc08      	bgt.n	8029b94 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8029b82:	1a69      	subs	r1, r5, r1
 8029b84:	b289      	uxth	r1, r1
 8029b86:	b20b      	sxth	r3, r1
 8029b88:	2b00      	cmp	r3, #0
 8029b8a:	bfbc      	itt	lt
 8029b8c:	4249      	neglt	r1, r1
 8029b8e:	b20b      	sxthlt	r3, r1
 8029b90:	429a      	cmp	r2, r3
 8029b92:	da13      	bge.n	8029bbc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8029b94:	6920      	ldr	r0, [r4, #16]
 8029b96:	4669      	mov	r1, sp
 8029b98:	eba8 0606 	sub.w	r6, r8, r6
 8029b9c:	1bef      	subs	r7, r5, r7
 8029b9e:	6803      	ldr	r3, [r0, #0]
 8029ba0:	685b      	ldr	r3, [r3, #4]
 8029ba2:	4798      	blx	r3
 8029ba4:	2300      	movs	r3, #0
 8029ba6:	2001      	movs	r0, #1
 8029ba8:	8166      	strh	r6, [r4, #10]
 8029baa:	8123      	strh	r3, [r4, #8]
 8029bac:	81a7      	strh	r7, [r4, #12]
 8029bae:	f8a4 8004 	strh.w	r8, [r4, #4]
 8029bb2:	80e5      	strh	r5, [r4, #6]
 8029bb4:	73a0      	strb	r0, [r4, #14]
 8029bb6:	b004      	add	sp, #16
 8029bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029bbc:	2000      	movs	r0, #0
 8029bbe:	e7fa      	b.n	8029bb6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8029bc0:	0802c744 	.word	0x0802c744

08029bc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8029bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029bc6:	461e      	mov	r6, r3
 8029bc8:	1e4b      	subs	r3, r1, #1
 8029bca:	b085      	sub	sp, #20
 8029bcc:	4604      	mov	r4, r0
 8029bce:	2b01      	cmp	r3, #1
 8029bd0:	460d      	mov	r5, r1
 8029bd2:	4617      	mov	r7, r2
 8029bd4:	d84b      	bhi.n	8029c6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8029bd6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8029bda:	1cd3      	adds	r3, r2, #3
 8029bdc:	b29b      	uxth	r3, r3
 8029bde:	2b06      	cmp	r3, #6
 8029be0:	d916      	bls.n	8029c10 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8029be2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8029c84 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029be6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029bea:	f8cd c004 	str.w	ip, [sp, #4]
 8029bee:	f04f 0c00 	mov.w	ip, #0
 8029bf2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029bf6:	6900      	ldr	r0, [r0, #16]
 8029bf8:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029bfc:	a901      	add	r1, sp, #4
 8029bfe:	f88d c008 	strb.w	ip, [sp, #8]
 8029c02:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029c06:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029c0a:	6803      	ldr	r3, [r0, #0]
 8029c0c:	689b      	ldr	r3, [r3, #8]
 8029c0e:	4798      	blx	r3
 8029c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029c14:	1cd3      	adds	r3, r2, #3
 8029c16:	b29b      	uxth	r3, r3
 8029c18:	2b06      	cmp	r3, #6
 8029c1a:	d916      	bls.n	8029c4a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029c1c:	f8df c064 	ldr.w	ip, [pc, #100]	; 8029c84 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029c20:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029c24:	f8cd c004 	str.w	ip, [sp, #4]
 8029c28:	f04f 0c01 	mov.w	ip, #1
 8029c2c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029c30:	6920      	ldr	r0, [r4, #16]
 8029c32:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029c36:	a901      	add	r1, sp, #4
 8029c38:	f88d c008 	strb.w	ip, [sp, #8]
 8029c3c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029c40:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029c44:	6803      	ldr	r3, [r0, #0]
 8029c46:	689b      	ldr	r3, [r3, #8]
 8029c48:	4798      	blx	r3
 8029c4a:	4b0d      	ldr	r3, [pc, #52]	; (8029c80 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029c4c:	a901      	add	r1, sp, #4
 8029c4e:	6920      	ldr	r0, [r4, #16]
 8029c50:	9301      	str	r3, [sp, #4]
 8029c52:	2300      	movs	r3, #0
 8029c54:	f88d 5008 	strb.w	r5, [sp, #8]
 8029c58:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029c5c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8029c60:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029c64:	6803      	ldr	r3, [r0, #0]
 8029c66:	681b      	ldr	r3, [r3, #0]
 8029c68:	4798      	blx	r3
 8029c6a:	b005      	add	sp, #20
 8029c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029c6e:	2900      	cmp	r1, #0
 8029c70:	d1eb      	bne.n	8029c4a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029c72:	80a2      	strh	r2, [r4, #4]
 8029c74:	80c6      	strh	r6, [r0, #6]
 8029c76:	60a1      	str	r1, [r4, #8]
 8029c78:	81a1      	strh	r1, [r4, #12]
 8029c7a:	73a1      	strb	r1, [r4, #14]
 8029c7c:	e7e5      	b.n	8029c4a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029c7e:	bf00      	nop
 8029c80:	0802c730 	.word	0x0802c730
 8029c84:	0802d7d0 	.word	0x0802d7d0

08029c88 <__aeabi_atexit>:
 8029c88:	460b      	mov	r3, r1
 8029c8a:	4601      	mov	r1, r0
 8029c8c:	4618      	mov	r0, r3
 8029c8e:	f000 b853 	b.w	8029d38 <__cxa_atexit>

08029c92 <_ZdlPvj>:
 8029c92:	f000 b812 	b.w	8029cba <_ZdlPv>

08029c96 <__cxa_guard_acquire>:
 8029c96:	6803      	ldr	r3, [r0, #0]
 8029c98:	07db      	lsls	r3, r3, #31
 8029c9a:	d406      	bmi.n	8029caa <__cxa_guard_acquire+0x14>
 8029c9c:	7843      	ldrb	r3, [r0, #1]
 8029c9e:	b103      	cbz	r3, 8029ca2 <__cxa_guard_acquire+0xc>
 8029ca0:	deff      	udf	#255	; 0xff
 8029ca2:	2301      	movs	r3, #1
 8029ca4:	7043      	strb	r3, [r0, #1]
 8029ca6:	4618      	mov	r0, r3
 8029ca8:	4770      	bx	lr
 8029caa:	2000      	movs	r0, #0
 8029cac:	4770      	bx	lr

08029cae <__cxa_guard_release>:
 8029cae:	2301      	movs	r3, #1
 8029cb0:	6003      	str	r3, [r0, #0]
 8029cb2:	4770      	bx	lr

08029cb4 <__cxa_pure_virtual>:
 8029cb4:	b508      	push	{r3, lr}
 8029cb6:	f000 f80f 	bl	8029cd8 <_ZSt9terminatev>

08029cba <_ZdlPv>:
 8029cba:	f000 b88f 	b.w	8029ddc <free>

08029cbe <_ZN10__cxxabiv111__terminateEPFvvE>:
 8029cbe:	b508      	push	{r3, lr}
 8029cc0:	4780      	blx	r0
 8029cc2:	f000 f80e 	bl	8029ce2 <abort>
	...

08029cc8 <_ZSt13get_terminatev>:
 8029cc8:	4b02      	ldr	r3, [pc, #8]	; (8029cd4 <_ZSt13get_terminatev+0xc>)
 8029cca:	6818      	ldr	r0, [r3, #0]
 8029ccc:	f3bf 8f5b 	dmb	ish
 8029cd0:	4770      	bx	lr
 8029cd2:	bf00      	nop
 8029cd4:	240000dc 	.word	0x240000dc

08029cd8 <_ZSt9terminatev>:
 8029cd8:	b508      	push	{r3, lr}
 8029cda:	f7ff fff5 	bl	8029cc8 <_ZSt13get_terminatev>
 8029cde:	f7ff ffee 	bl	8029cbe <_ZN10__cxxabiv111__terminateEPFvvE>

08029ce2 <abort>:
 8029ce2:	b508      	push	{r3, lr}
 8029ce4:	2006      	movs	r0, #6
 8029ce6:	f000 fc67 	bl	802a5b8 <raise>
 8029cea:	2001      	movs	r0, #1
 8029cec:	f7d8 ffe8 	bl	8002cc0 <_exit>

08029cf0 <__assert_func>:
 8029cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029cf2:	4614      	mov	r4, r2
 8029cf4:	461a      	mov	r2, r3
 8029cf6:	4b09      	ldr	r3, [pc, #36]	; (8029d1c <__assert_func+0x2c>)
 8029cf8:	681b      	ldr	r3, [r3, #0]
 8029cfa:	4605      	mov	r5, r0
 8029cfc:	68d8      	ldr	r0, [r3, #12]
 8029cfe:	b14c      	cbz	r4, 8029d14 <__assert_func+0x24>
 8029d00:	4b07      	ldr	r3, [pc, #28]	; (8029d20 <__assert_func+0x30>)
 8029d02:	9100      	str	r1, [sp, #0]
 8029d04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029d08:	4906      	ldr	r1, [pc, #24]	; (8029d24 <__assert_func+0x34>)
 8029d0a:	462b      	mov	r3, r5
 8029d0c:	f000 f828 	bl	8029d60 <fiprintf>
 8029d10:	f7ff ffe7 	bl	8029ce2 <abort>
 8029d14:	4b04      	ldr	r3, [pc, #16]	; (8029d28 <__assert_func+0x38>)
 8029d16:	461c      	mov	r4, r3
 8029d18:	e7f3      	b.n	8029d02 <__assert_func+0x12>
 8029d1a:	bf00      	nop
 8029d1c:	240000e0 	.word	0x240000e0
 8029d20:	0802eb71 	.word	0x0802eb71
 8029d24:	0802eb7e 	.word	0x0802eb7e
 8029d28:	0802ebac 	.word	0x0802ebac

08029d2c <atexit>:
 8029d2c:	2300      	movs	r3, #0
 8029d2e:	4601      	mov	r1, r0
 8029d30:	461a      	mov	r2, r3
 8029d32:	4618      	mov	r0, r3
 8029d34:	f000 bd1c 	b.w	802a770 <__register_exitproc>

08029d38 <__cxa_atexit>:
 8029d38:	b510      	push	{r4, lr}
 8029d3a:	4c05      	ldr	r4, [pc, #20]	; (8029d50 <__cxa_atexit+0x18>)
 8029d3c:	4613      	mov	r3, r2
 8029d3e:	b12c      	cbz	r4, 8029d4c <__cxa_atexit+0x14>
 8029d40:	460a      	mov	r2, r1
 8029d42:	4601      	mov	r1, r0
 8029d44:	2002      	movs	r0, #2
 8029d46:	f000 fd13 	bl	802a770 <__register_exitproc>
 8029d4a:	bd10      	pop	{r4, pc}
 8029d4c:	4620      	mov	r0, r4
 8029d4e:	e7fc      	b.n	8029d4a <__cxa_atexit+0x12>
 8029d50:	0802a771 	.word	0x0802a771

08029d54 <__errno>:
 8029d54:	4b01      	ldr	r3, [pc, #4]	; (8029d5c <__errno+0x8>)
 8029d56:	6818      	ldr	r0, [r3, #0]
 8029d58:	4770      	bx	lr
 8029d5a:	bf00      	nop
 8029d5c:	240000e0 	.word	0x240000e0

08029d60 <fiprintf>:
 8029d60:	b40e      	push	{r1, r2, r3}
 8029d62:	b503      	push	{r0, r1, lr}
 8029d64:	4601      	mov	r1, r0
 8029d66:	ab03      	add	r3, sp, #12
 8029d68:	4805      	ldr	r0, [pc, #20]	; (8029d80 <fiprintf+0x20>)
 8029d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8029d6e:	6800      	ldr	r0, [r0, #0]
 8029d70:	9301      	str	r3, [sp, #4]
 8029d72:	f000 f925 	bl	8029fc0 <_vfiprintf_r>
 8029d76:	b002      	add	sp, #8
 8029d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8029d7c:	b003      	add	sp, #12
 8029d7e:	4770      	bx	lr
 8029d80:	240000e0 	.word	0x240000e0

08029d84 <__libc_init_array>:
 8029d84:	b570      	push	{r4, r5, r6, lr}
 8029d86:	4d0d      	ldr	r5, [pc, #52]	; (8029dbc <__libc_init_array+0x38>)
 8029d88:	4c0d      	ldr	r4, [pc, #52]	; (8029dc0 <__libc_init_array+0x3c>)
 8029d8a:	1b64      	subs	r4, r4, r5
 8029d8c:	10a4      	asrs	r4, r4, #2
 8029d8e:	2600      	movs	r6, #0
 8029d90:	42a6      	cmp	r6, r4
 8029d92:	d109      	bne.n	8029da8 <__libc_init_array+0x24>
 8029d94:	4d0b      	ldr	r5, [pc, #44]	; (8029dc4 <__libc_init_array+0x40>)
 8029d96:	4c0c      	ldr	r4, [pc, #48]	; (8029dc8 <__libc_init_array+0x44>)
 8029d98:	f001 f824 	bl	802ade4 <_init>
 8029d9c:	1b64      	subs	r4, r4, r5
 8029d9e:	10a4      	asrs	r4, r4, #2
 8029da0:	2600      	movs	r6, #0
 8029da2:	42a6      	cmp	r6, r4
 8029da4:	d105      	bne.n	8029db2 <__libc_init_array+0x2e>
 8029da6:	bd70      	pop	{r4, r5, r6, pc}
 8029da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8029dac:	4798      	blx	r3
 8029dae:	3601      	adds	r6, #1
 8029db0:	e7ee      	b.n	8029d90 <__libc_init_array+0xc>
 8029db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8029db6:	4798      	blx	r3
 8029db8:	3601      	adds	r6, #1
 8029dba:	e7f2      	b.n	8029da2 <__libc_init_array+0x1e>
 8029dbc:	0802eca8 	.word	0x0802eca8
 8029dc0:	0802eca8 	.word	0x0802eca8
 8029dc4:	0802eca8 	.word	0x0802eca8
 8029dc8:	0802ecbc 	.word	0x0802ecbc

08029dcc <malloc>:
 8029dcc:	4b02      	ldr	r3, [pc, #8]	; (8029dd8 <malloc+0xc>)
 8029dce:	4601      	mov	r1, r0
 8029dd0:	6818      	ldr	r0, [r3, #0]
 8029dd2:	f000 b871 	b.w	8029eb8 <_malloc_r>
 8029dd6:	bf00      	nop
 8029dd8:	240000e0 	.word	0x240000e0

08029ddc <free>:
 8029ddc:	4b02      	ldr	r3, [pc, #8]	; (8029de8 <free+0xc>)
 8029dde:	4601      	mov	r1, r0
 8029de0:	6818      	ldr	r0, [r3, #0]
 8029de2:	f000 b819 	b.w	8029e18 <_free_r>
 8029de6:	bf00      	nop
 8029de8:	240000e0 	.word	0x240000e0

08029dec <memcpy>:
 8029dec:	440a      	add	r2, r1
 8029dee:	4291      	cmp	r1, r2
 8029df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8029df4:	d100      	bne.n	8029df8 <memcpy+0xc>
 8029df6:	4770      	bx	lr
 8029df8:	b510      	push	{r4, lr}
 8029dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029e02:	4291      	cmp	r1, r2
 8029e04:	d1f9      	bne.n	8029dfa <memcpy+0xe>
 8029e06:	bd10      	pop	{r4, pc}

08029e08 <memset>:
 8029e08:	4402      	add	r2, r0
 8029e0a:	4603      	mov	r3, r0
 8029e0c:	4293      	cmp	r3, r2
 8029e0e:	d100      	bne.n	8029e12 <memset+0xa>
 8029e10:	4770      	bx	lr
 8029e12:	f803 1b01 	strb.w	r1, [r3], #1
 8029e16:	e7f9      	b.n	8029e0c <memset+0x4>

08029e18 <_free_r>:
 8029e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029e1a:	2900      	cmp	r1, #0
 8029e1c:	d048      	beq.n	8029eb0 <_free_r+0x98>
 8029e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029e22:	9001      	str	r0, [sp, #4]
 8029e24:	2b00      	cmp	r3, #0
 8029e26:	f1a1 0404 	sub.w	r4, r1, #4
 8029e2a:	bfb8      	it	lt
 8029e2c:	18e4      	addlt	r4, r4, r3
 8029e2e:	f000 ff21 	bl	802ac74 <__malloc_lock>
 8029e32:	4a20      	ldr	r2, [pc, #128]	; (8029eb4 <_free_r+0x9c>)
 8029e34:	9801      	ldr	r0, [sp, #4]
 8029e36:	6813      	ldr	r3, [r2, #0]
 8029e38:	4615      	mov	r5, r2
 8029e3a:	b933      	cbnz	r3, 8029e4a <_free_r+0x32>
 8029e3c:	6063      	str	r3, [r4, #4]
 8029e3e:	6014      	str	r4, [r2, #0]
 8029e40:	b003      	add	sp, #12
 8029e42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029e46:	f000 bf1b 	b.w	802ac80 <__malloc_unlock>
 8029e4a:	42a3      	cmp	r3, r4
 8029e4c:	d90b      	bls.n	8029e66 <_free_r+0x4e>
 8029e4e:	6821      	ldr	r1, [r4, #0]
 8029e50:	1862      	adds	r2, r4, r1
 8029e52:	4293      	cmp	r3, r2
 8029e54:	bf04      	itt	eq
 8029e56:	681a      	ldreq	r2, [r3, #0]
 8029e58:	685b      	ldreq	r3, [r3, #4]
 8029e5a:	6063      	str	r3, [r4, #4]
 8029e5c:	bf04      	itt	eq
 8029e5e:	1852      	addeq	r2, r2, r1
 8029e60:	6022      	streq	r2, [r4, #0]
 8029e62:	602c      	str	r4, [r5, #0]
 8029e64:	e7ec      	b.n	8029e40 <_free_r+0x28>
 8029e66:	461a      	mov	r2, r3
 8029e68:	685b      	ldr	r3, [r3, #4]
 8029e6a:	b10b      	cbz	r3, 8029e70 <_free_r+0x58>
 8029e6c:	42a3      	cmp	r3, r4
 8029e6e:	d9fa      	bls.n	8029e66 <_free_r+0x4e>
 8029e70:	6811      	ldr	r1, [r2, #0]
 8029e72:	1855      	adds	r5, r2, r1
 8029e74:	42a5      	cmp	r5, r4
 8029e76:	d10b      	bne.n	8029e90 <_free_r+0x78>
 8029e78:	6824      	ldr	r4, [r4, #0]
 8029e7a:	4421      	add	r1, r4
 8029e7c:	1854      	adds	r4, r2, r1
 8029e7e:	42a3      	cmp	r3, r4
 8029e80:	6011      	str	r1, [r2, #0]
 8029e82:	d1dd      	bne.n	8029e40 <_free_r+0x28>
 8029e84:	681c      	ldr	r4, [r3, #0]
 8029e86:	685b      	ldr	r3, [r3, #4]
 8029e88:	6053      	str	r3, [r2, #4]
 8029e8a:	4421      	add	r1, r4
 8029e8c:	6011      	str	r1, [r2, #0]
 8029e8e:	e7d7      	b.n	8029e40 <_free_r+0x28>
 8029e90:	d902      	bls.n	8029e98 <_free_r+0x80>
 8029e92:	230c      	movs	r3, #12
 8029e94:	6003      	str	r3, [r0, #0]
 8029e96:	e7d3      	b.n	8029e40 <_free_r+0x28>
 8029e98:	6825      	ldr	r5, [r4, #0]
 8029e9a:	1961      	adds	r1, r4, r5
 8029e9c:	428b      	cmp	r3, r1
 8029e9e:	bf04      	itt	eq
 8029ea0:	6819      	ldreq	r1, [r3, #0]
 8029ea2:	685b      	ldreq	r3, [r3, #4]
 8029ea4:	6063      	str	r3, [r4, #4]
 8029ea6:	bf04      	itt	eq
 8029ea8:	1949      	addeq	r1, r1, r5
 8029eaa:	6021      	streq	r1, [r4, #0]
 8029eac:	6054      	str	r4, [r2, #4]
 8029eae:	e7c7      	b.n	8029e40 <_free_r+0x28>
 8029eb0:	b003      	add	sp, #12
 8029eb2:	bd30      	pop	{r4, r5, pc}
 8029eb4:	2400b040 	.word	0x2400b040

08029eb8 <_malloc_r>:
 8029eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029eba:	1ccd      	adds	r5, r1, #3
 8029ebc:	f025 0503 	bic.w	r5, r5, #3
 8029ec0:	3508      	adds	r5, #8
 8029ec2:	2d0c      	cmp	r5, #12
 8029ec4:	bf38      	it	cc
 8029ec6:	250c      	movcc	r5, #12
 8029ec8:	2d00      	cmp	r5, #0
 8029eca:	4606      	mov	r6, r0
 8029ecc:	db01      	blt.n	8029ed2 <_malloc_r+0x1a>
 8029ece:	42a9      	cmp	r1, r5
 8029ed0:	d903      	bls.n	8029eda <_malloc_r+0x22>
 8029ed2:	230c      	movs	r3, #12
 8029ed4:	6033      	str	r3, [r6, #0]
 8029ed6:	2000      	movs	r0, #0
 8029ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029eda:	f000 fecb 	bl	802ac74 <__malloc_lock>
 8029ede:	4921      	ldr	r1, [pc, #132]	; (8029f64 <_malloc_r+0xac>)
 8029ee0:	680a      	ldr	r2, [r1, #0]
 8029ee2:	4614      	mov	r4, r2
 8029ee4:	b99c      	cbnz	r4, 8029f0e <_malloc_r+0x56>
 8029ee6:	4f20      	ldr	r7, [pc, #128]	; (8029f68 <_malloc_r+0xb0>)
 8029ee8:	683b      	ldr	r3, [r7, #0]
 8029eea:	b923      	cbnz	r3, 8029ef6 <_malloc_r+0x3e>
 8029eec:	4621      	mov	r1, r4
 8029eee:	4630      	mov	r0, r6
 8029ef0:	f000 fb2a 	bl	802a548 <_sbrk_r>
 8029ef4:	6038      	str	r0, [r7, #0]
 8029ef6:	4629      	mov	r1, r5
 8029ef8:	4630      	mov	r0, r6
 8029efa:	f000 fb25 	bl	802a548 <_sbrk_r>
 8029efe:	1c43      	adds	r3, r0, #1
 8029f00:	d123      	bne.n	8029f4a <_malloc_r+0x92>
 8029f02:	230c      	movs	r3, #12
 8029f04:	6033      	str	r3, [r6, #0]
 8029f06:	4630      	mov	r0, r6
 8029f08:	f000 feba 	bl	802ac80 <__malloc_unlock>
 8029f0c:	e7e3      	b.n	8029ed6 <_malloc_r+0x1e>
 8029f0e:	6823      	ldr	r3, [r4, #0]
 8029f10:	1b5b      	subs	r3, r3, r5
 8029f12:	d417      	bmi.n	8029f44 <_malloc_r+0x8c>
 8029f14:	2b0b      	cmp	r3, #11
 8029f16:	d903      	bls.n	8029f20 <_malloc_r+0x68>
 8029f18:	6023      	str	r3, [r4, #0]
 8029f1a:	441c      	add	r4, r3
 8029f1c:	6025      	str	r5, [r4, #0]
 8029f1e:	e004      	b.n	8029f2a <_malloc_r+0x72>
 8029f20:	6863      	ldr	r3, [r4, #4]
 8029f22:	42a2      	cmp	r2, r4
 8029f24:	bf0c      	ite	eq
 8029f26:	600b      	streq	r3, [r1, #0]
 8029f28:	6053      	strne	r3, [r2, #4]
 8029f2a:	4630      	mov	r0, r6
 8029f2c:	f000 fea8 	bl	802ac80 <__malloc_unlock>
 8029f30:	f104 000b 	add.w	r0, r4, #11
 8029f34:	1d23      	adds	r3, r4, #4
 8029f36:	f020 0007 	bic.w	r0, r0, #7
 8029f3a:	1ac2      	subs	r2, r0, r3
 8029f3c:	d0cc      	beq.n	8029ed8 <_malloc_r+0x20>
 8029f3e:	1a1b      	subs	r3, r3, r0
 8029f40:	50a3      	str	r3, [r4, r2]
 8029f42:	e7c9      	b.n	8029ed8 <_malloc_r+0x20>
 8029f44:	4622      	mov	r2, r4
 8029f46:	6864      	ldr	r4, [r4, #4]
 8029f48:	e7cc      	b.n	8029ee4 <_malloc_r+0x2c>
 8029f4a:	1cc4      	adds	r4, r0, #3
 8029f4c:	f024 0403 	bic.w	r4, r4, #3
 8029f50:	42a0      	cmp	r0, r4
 8029f52:	d0e3      	beq.n	8029f1c <_malloc_r+0x64>
 8029f54:	1a21      	subs	r1, r4, r0
 8029f56:	4630      	mov	r0, r6
 8029f58:	f000 faf6 	bl	802a548 <_sbrk_r>
 8029f5c:	3001      	adds	r0, #1
 8029f5e:	d1dd      	bne.n	8029f1c <_malloc_r+0x64>
 8029f60:	e7cf      	b.n	8029f02 <_malloc_r+0x4a>
 8029f62:	bf00      	nop
 8029f64:	2400b040 	.word	0x2400b040
 8029f68:	2400b044 	.word	0x2400b044

08029f6c <__sfputc_r>:
 8029f6c:	6893      	ldr	r3, [r2, #8]
 8029f6e:	3b01      	subs	r3, #1
 8029f70:	2b00      	cmp	r3, #0
 8029f72:	b410      	push	{r4}
 8029f74:	6093      	str	r3, [r2, #8]
 8029f76:	da08      	bge.n	8029f8a <__sfputc_r+0x1e>
 8029f78:	6994      	ldr	r4, [r2, #24]
 8029f7a:	42a3      	cmp	r3, r4
 8029f7c:	db01      	blt.n	8029f82 <__sfputc_r+0x16>
 8029f7e:	290a      	cmp	r1, #10
 8029f80:	d103      	bne.n	8029f8a <__sfputc_r+0x1e>
 8029f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029f86:	f000 bb33 	b.w	802a5f0 <__swbuf_r>
 8029f8a:	6813      	ldr	r3, [r2, #0]
 8029f8c:	1c58      	adds	r0, r3, #1
 8029f8e:	6010      	str	r0, [r2, #0]
 8029f90:	7019      	strb	r1, [r3, #0]
 8029f92:	4608      	mov	r0, r1
 8029f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029f98:	4770      	bx	lr

08029f9a <__sfputs_r>:
 8029f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029f9c:	4606      	mov	r6, r0
 8029f9e:	460f      	mov	r7, r1
 8029fa0:	4614      	mov	r4, r2
 8029fa2:	18d5      	adds	r5, r2, r3
 8029fa4:	42ac      	cmp	r4, r5
 8029fa6:	d101      	bne.n	8029fac <__sfputs_r+0x12>
 8029fa8:	2000      	movs	r0, #0
 8029faa:	e007      	b.n	8029fbc <__sfputs_r+0x22>
 8029fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029fb0:	463a      	mov	r2, r7
 8029fb2:	4630      	mov	r0, r6
 8029fb4:	f7ff ffda 	bl	8029f6c <__sfputc_r>
 8029fb8:	1c43      	adds	r3, r0, #1
 8029fba:	d1f3      	bne.n	8029fa4 <__sfputs_r+0xa>
 8029fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029fc0 <_vfiprintf_r>:
 8029fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029fc4:	460d      	mov	r5, r1
 8029fc6:	b09d      	sub	sp, #116	; 0x74
 8029fc8:	4614      	mov	r4, r2
 8029fca:	4698      	mov	r8, r3
 8029fcc:	4606      	mov	r6, r0
 8029fce:	b118      	cbz	r0, 8029fd8 <_vfiprintf_r+0x18>
 8029fd0:	6983      	ldr	r3, [r0, #24]
 8029fd2:	b90b      	cbnz	r3, 8029fd8 <_vfiprintf_r+0x18>
 8029fd4:	f000 fd48 	bl	802aa68 <__sinit>
 8029fd8:	4b89      	ldr	r3, [pc, #548]	; (802a200 <_vfiprintf_r+0x240>)
 8029fda:	429d      	cmp	r5, r3
 8029fdc:	d11b      	bne.n	802a016 <_vfiprintf_r+0x56>
 8029fde:	6875      	ldr	r5, [r6, #4]
 8029fe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029fe2:	07d9      	lsls	r1, r3, #31
 8029fe4:	d405      	bmi.n	8029ff2 <_vfiprintf_r+0x32>
 8029fe6:	89ab      	ldrh	r3, [r5, #12]
 8029fe8:	059a      	lsls	r2, r3, #22
 8029fea:	d402      	bmi.n	8029ff2 <_vfiprintf_r+0x32>
 8029fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029fee:	f000 fdd9 	bl	802aba4 <__retarget_lock_acquire_recursive>
 8029ff2:	89ab      	ldrh	r3, [r5, #12]
 8029ff4:	071b      	lsls	r3, r3, #28
 8029ff6:	d501      	bpl.n	8029ffc <_vfiprintf_r+0x3c>
 8029ff8:	692b      	ldr	r3, [r5, #16]
 8029ffa:	b9eb      	cbnz	r3, 802a038 <_vfiprintf_r+0x78>
 8029ffc:	4629      	mov	r1, r5
 8029ffe:	4630      	mov	r0, r6
 802a000:	f000 fb48 	bl	802a694 <__swsetup_r>
 802a004:	b1c0      	cbz	r0, 802a038 <_vfiprintf_r+0x78>
 802a006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a008:	07dc      	lsls	r4, r3, #31
 802a00a:	d50e      	bpl.n	802a02a <_vfiprintf_r+0x6a>
 802a00c:	f04f 30ff 	mov.w	r0, #4294967295
 802a010:	b01d      	add	sp, #116	; 0x74
 802a012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a016:	4b7b      	ldr	r3, [pc, #492]	; (802a204 <_vfiprintf_r+0x244>)
 802a018:	429d      	cmp	r5, r3
 802a01a:	d101      	bne.n	802a020 <_vfiprintf_r+0x60>
 802a01c:	68b5      	ldr	r5, [r6, #8]
 802a01e:	e7df      	b.n	8029fe0 <_vfiprintf_r+0x20>
 802a020:	4b79      	ldr	r3, [pc, #484]	; (802a208 <_vfiprintf_r+0x248>)
 802a022:	429d      	cmp	r5, r3
 802a024:	bf08      	it	eq
 802a026:	68f5      	ldreq	r5, [r6, #12]
 802a028:	e7da      	b.n	8029fe0 <_vfiprintf_r+0x20>
 802a02a:	89ab      	ldrh	r3, [r5, #12]
 802a02c:	0598      	lsls	r0, r3, #22
 802a02e:	d4ed      	bmi.n	802a00c <_vfiprintf_r+0x4c>
 802a030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a032:	f000 fdb9 	bl	802aba8 <__retarget_lock_release_recursive>
 802a036:	e7e9      	b.n	802a00c <_vfiprintf_r+0x4c>
 802a038:	2300      	movs	r3, #0
 802a03a:	9309      	str	r3, [sp, #36]	; 0x24
 802a03c:	2320      	movs	r3, #32
 802a03e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a042:	f8cd 800c 	str.w	r8, [sp, #12]
 802a046:	2330      	movs	r3, #48	; 0x30
 802a048:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802a20c <_vfiprintf_r+0x24c>
 802a04c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a050:	f04f 0901 	mov.w	r9, #1
 802a054:	4623      	mov	r3, r4
 802a056:	469a      	mov	sl, r3
 802a058:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a05c:	b10a      	cbz	r2, 802a062 <_vfiprintf_r+0xa2>
 802a05e:	2a25      	cmp	r2, #37	; 0x25
 802a060:	d1f9      	bne.n	802a056 <_vfiprintf_r+0x96>
 802a062:	ebba 0b04 	subs.w	fp, sl, r4
 802a066:	d00b      	beq.n	802a080 <_vfiprintf_r+0xc0>
 802a068:	465b      	mov	r3, fp
 802a06a:	4622      	mov	r2, r4
 802a06c:	4629      	mov	r1, r5
 802a06e:	4630      	mov	r0, r6
 802a070:	f7ff ff93 	bl	8029f9a <__sfputs_r>
 802a074:	3001      	adds	r0, #1
 802a076:	f000 80aa 	beq.w	802a1ce <_vfiprintf_r+0x20e>
 802a07a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a07c:	445a      	add	r2, fp
 802a07e:	9209      	str	r2, [sp, #36]	; 0x24
 802a080:	f89a 3000 	ldrb.w	r3, [sl]
 802a084:	2b00      	cmp	r3, #0
 802a086:	f000 80a2 	beq.w	802a1ce <_vfiprintf_r+0x20e>
 802a08a:	2300      	movs	r3, #0
 802a08c:	f04f 32ff 	mov.w	r2, #4294967295
 802a090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a094:	f10a 0a01 	add.w	sl, sl, #1
 802a098:	9304      	str	r3, [sp, #16]
 802a09a:	9307      	str	r3, [sp, #28]
 802a09c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a0a0:	931a      	str	r3, [sp, #104]	; 0x68
 802a0a2:	4654      	mov	r4, sl
 802a0a4:	2205      	movs	r2, #5
 802a0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a0aa:	4858      	ldr	r0, [pc, #352]	; (802a20c <_vfiprintf_r+0x24c>)
 802a0ac:	f7d6 f920 	bl	80002f0 <memchr>
 802a0b0:	9a04      	ldr	r2, [sp, #16]
 802a0b2:	b9d8      	cbnz	r0, 802a0ec <_vfiprintf_r+0x12c>
 802a0b4:	06d1      	lsls	r1, r2, #27
 802a0b6:	bf44      	itt	mi
 802a0b8:	2320      	movmi	r3, #32
 802a0ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a0be:	0713      	lsls	r3, r2, #28
 802a0c0:	bf44      	itt	mi
 802a0c2:	232b      	movmi	r3, #43	; 0x2b
 802a0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a0c8:	f89a 3000 	ldrb.w	r3, [sl]
 802a0cc:	2b2a      	cmp	r3, #42	; 0x2a
 802a0ce:	d015      	beq.n	802a0fc <_vfiprintf_r+0x13c>
 802a0d0:	9a07      	ldr	r2, [sp, #28]
 802a0d2:	4654      	mov	r4, sl
 802a0d4:	2000      	movs	r0, #0
 802a0d6:	f04f 0c0a 	mov.w	ip, #10
 802a0da:	4621      	mov	r1, r4
 802a0dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a0e0:	3b30      	subs	r3, #48	; 0x30
 802a0e2:	2b09      	cmp	r3, #9
 802a0e4:	d94e      	bls.n	802a184 <_vfiprintf_r+0x1c4>
 802a0e6:	b1b0      	cbz	r0, 802a116 <_vfiprintf_r+0x156>
 802a0e8:	9207      	str	r2, [sp, #28]
 802a0ea:	e014      	b.n	802a116 <_vfiprintf_r+0x156>
 802a0ec:	eba0 0308 	sub.w	r3, r0, r8
 802a0f0:	fa09 f303 	lsl.w	r3, r9, r3
 802a0f4:	4313      	orrs	r3, r2
 802a0f6:	9304      	str	r3, [sp, #16]
 802a0f8:	46a2      	mov	sl, r4
 802a0fa:	e7d2      	b.n	802a0a2 <_vfiprintf_r+0xe2>
 802a0fc:	9b03      	ldr	r3, [sp, #12]
 802a0fe:	1d19      	adds	r1, r3, #4
 802a100:	681b      	ldr	r3, [r3, #0]
 802a102:	9103      	str	r1, [sp, #12]
 802a104:	2b00      	cmp	r3, #0
 802a106:	bfbb      	ittet	lt
 802a108:	425b      	neglt	r3, r3
 802a10a:	f042 0202 	orrlt.w	r2, r2, #2
 802a10e:	9307      	strge	r3, [sp, #28]
 802a110:	9307      	strlt	r3, [sp, #28]
 802a112:	bfb8      	it	lt
 802a114:	9204      	strlt	r2, [sp, #16]
 802a116:	7823      	ldrb	r3, [r4, #0]
 802a118:	2b2e      	cmp	r3, #46	; 0x2e
 802a11a:	d10c      	bne.n	802a136 <_vfiprintf_r+0x176>
 802a11c:	7863      	ldrb	r3, [r4, #1]
 802a11e:	2b2a      	cmp	r3, #42	; 0x2a
 802a120:	d135      	bne.n	802a18e <_vfiprintf_r+0x1ce>
 802a122:	9b03      	ldr	r3, [sp, #12]
 802a124:	1d1a      	adds	r2, r3, #4
 802a126:	681b      	ldr	r3, [r3, #0]
 802a128:	9203      	str	r2, [sp, #12]
 802a12a:	2b00      	cmp	r3, #0
 802a12c:	bfb8      	it	lt
 802a12e:	f04f 33ff 	movlt.w	r3, #4294967295
 802a132:	3402      	adds	r4, #2
 802a134:	9305      	str	r3, [sp, #20]
 802a136:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802a21c <_vfiprintf_r+0x25c>
 802a13a:	7821      	ldrb	r1, [r4, #0]
 802a13c:	2203      	movs	r2, #3
 802a13e:	4650      	mov	r0, sl
 802a140:	f7d6 f8d6 	bl	80002f0 <memchr>
 802a144:	b140      	cbz	r0, 802a158 <_vfiprintf_r+0x198>
 802a146:	2340      	movs	r3, #64	; 0x40
 802a148:	eba0 000a 	sub.w	r0, r0, sl
 802a14c:	fa03 f000 	lsl.w	r0, r3, r0
 802a150:	9b04      	ldr	r3, [sp, #16]
 802a152:	4303      	orrs	r3, r0
 802a154:	3401      	adds	r4, #1
 802a156:	9304      	str	r3, [sp, #16]
 802a158:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a15c:	482c      	ldr	r0, [pc, #176]	; (802a210 <_vfiprintf_r+0x250>)
 802a15e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a162:	2206      	movs	r2, #6
 802a164:	f7d6 f8c4 	bl	80002f0 <memchr>
 802a168:	2800      	cmp	r0, #0
 802a16a:	d03f      	beq.n	802a1ec <_vfiprintf_r+0x22c>
 802a16c:	4b29      	ldr	r3, [pc, #164]	; (802a214 <_vfiprintf_r+0x254>)
 802a16e:	bb1b      	cbnz	r3, 802a1b8 <_vfiprintf_r+0x1f8>
 802a170:	9b03      	ldr	r3, [sp, #12]
 802a172:	3307      	adds	r3, #7
 802a174:	f023 0307 	bic.w	r3, r3, #7
 802a178:	3308      	adds	r3, #8
 802a17a:	9303      	str	r3, [sp, #12]
 802a17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a17e:	443b      	add	r3, r7
 802a180:	9309      	str	r3, [sp, #36]	; 0x24
 802a182:	e767      	b.n	802a054 <_vfiprintf_r+0x94>
 802a184:	fb0c 3202 	mla	r2, ip, r2, r3
 802a188:	460c      	mov	r4, r1
 802a18a:	2001      	movs	r0, #1
 802a18c:	e7a5      	b.n	802a0da <_vfiprintf_r+0x11a>
 802a18e:	2300      	movs	r3, #0
 802a190:	3401      	adds	r4, #1
 802a192:	9305      	str	r3, [sp, #20]
 802a194:	4619      	mov	r1, r3
 802a196:	f04f 0c0a 	mov.w	ip, #10
 802a19a:	4620      	mov	r0, r4
 802a19c:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a1a0:	3a30      	subs	r2, #48	; 0x30
 802a1a2:	2a09      	cmp	r2, #9
 802a1a4:	d903      	bls.n	802a1ae <_vfiprintf_r+0x1ee>
 802a1a6:	2b00      	cmp	r3, #0
 802a1a8:	d0c5      	beq.n	802a136 <_vfiprintf_r+0x176>
 802a1aa:	9105      	str	r1, [sp, #20]
 802a1ac:	e7c3      	b.n	802a136 <_vfiprintf_r+0x176>
 802a1ae:	fb0c 2101 	mla	r1, ip, r1, r2
 802a1b2:	4604      	mov	r4, r0
 802a1b4:	2301      	movs	r3, #1
 802a1b6:	e7f0      	b.n	802a19a <_vfiprintf_r+0x1da>
 802a1b8:	ab03      	add	r3, sp, #12
 802a1ba:	9300      	str	r3, [sp, #0]
 802a1bc:	462a      	mov	r2, r5
 802a1be:	4b16      	ldr	r3, [pc, #88]	; (802a218 <_vfiprintf_r+0x258>)
 802a1c0:	a904      	add	r1, sp, #16
 802a1c2:	4630      	mov	r0, r6
 802a1c4:	f3af 8000 	nop.w
 802a1c8:	4607      	mov	r7, r0
 802a1ca:	1c78      	adds	r0, r7, #1
 802a1cc:	d1d6      	bne.n	802a17c <_vfiprintf_r+0x1bc>
 802a1ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a1d0:	07d9      	lsls	r1, r3, #31
 802a1d2:	d405      	bmi.n	802a1e0 <_vfiprintf_r+0x220>
 802a1d4:	89ab      	ldrh	r3, [r5, #12]
 802a1d6:	059a      	lsls	r2, r3, #22
 802a1d8:	d402      	bmi.n	802a1e0 <_vfiprintf_r+0x220>
 802a1da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a1dc:	f000 fce4 	bl	802aba8 <__retarget_lock_release_recursive>
 802a1e0:	89ab      	ldrh	r3, [r5, #12]
 802a1e2:	065b      	lsls	r3, r3, #25
 802a1e4:	f53f af12 	bmi.w	802a00c <_vfiprintf_r+0x4c>
 802a1e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a1ea:	e711      	b.n	802a010 <_vfiprintf_r+0x50>
 802a1ec:	ab03      	add	r3, sp, #12
 802a1ee:	9300      	str	r3, [sp, #0]
 802a1f0:	462a      	mov	r2, r5
 802a1f2:	4b09      	ldr	r3, [pc, #36]	; (802a218 <_vfiprintf_r+0x258>)
 802a1f4:	a904      	add	r1, sp, #16
 802a1f6:	4630      	mov	r0, r6
 802a1f8:	f000 f880 	bl	802a2fc <_printf_i>
 802a1fc:	e7e4      	b.n	802a1c8 <_vfiprintf_r+0x208>
 802a1fe:	bf00      	nop
 802a200:	0802ec0c 	.word	0x0802ec0c
 802a204:	0802ec2c 	.word	0x0802ec2c
 802a208:	0802ebec 	.word	0x0802ebec
 802a20c:	0802ebb4 	.word	0x0802ebb4
 802a210:	0802ebbe 	.word	0x0802ebbe
 802a214:	00000000 	.word	0x00000000
 802a218:	08029f9b 	.word	0x08029f9b
 802a21c:	0802ebba 	.word	0x0802ebba

0802a220 <_printf_common>:
 802a220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a224:	4616      	mov	r6, r2
 802a226:	4699      	mov	r9, r3
 802a228:	688a      	ldr	r2, [r1, #8]
 802a22a:	690b      	ldr	r3, [r1, #16]
 802a22c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802a230:	4293      	cmp	r3, r2
 802a232:	bfb8      	it	lt
 802a234:	4613      	movlt	r3, r2
 802a236:	6033      	str	r3, [r6, #0]
 802a238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802a23c:	4607      	mov	r7, r0
 802a23e:	460c      	mov	r4, r1
 802a240:	b10a      	cbz	r2, 802a246 <_printf_common+0x26>
 802a242:	3301      	adds	r3, #1
 802a244:	6033      	str	r3, [r6, #0]
 802a246:	6823      	ldr	r3, [r4, #0]
 802a248:	0699      	lsls	r1, r3, #26
 802a24a:	bf42      	ittt	mi
 802a24c:	6833      	ldrmi	r3, [r6, #0]
 802a24e:	3302      	addmi	r3, #2
 802a250:	6033      	strmi	r3, [r6, #0]
 802a252:	6825      	ldr	r5, [r4, #0]
 802a254:	f015 0506 	ands.w	r5, r5, #6
 802a258:	d106      	bne.n	802a268 <_printf_common+0x48>
 802a25a:	f104 0a19 	add.w	sl, r4, #25
 802a25e:	68e3      	ldr	r3, [r4, #12]
 802a260:	6832      	ldr	r2, [r6, #0]
 802a262:	1a9b      	subs	r3, r3, r2
 802a264:	42ab      	cmp	r3, r5
 802a266:	dc26      	bgt.n	802a2b6 <_printf_common+0x96>
 802a268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802a26c:	1e13      	subs	r3, r2, #0
 802a26e:	6822      	ldr	r2, [r4, #0]
 802a270:	bf18      	it	ne
 802a272:	2301      	movne	r3, #1
 802a274:	0692      	lsls	r2, r2, #26
 802a276:	d42b      	bmi.n	802a2d0 <_printf_common+0xb0>
 802a278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a27c:	4649      	mov	r1, r9
 802a27e:	4638      	mov	r0, r7
 802a280:	47c0      	blx	r8
 802a282:	3001      	adds	r0, #1
 802a284:	d01e      	beq.n	802a2c4 <_printf_common+0xa4>
 802a286:	6823      	ldr	r3, [r4, #0]
 802a288:	68e5      	ldr	r5, [r4, #12]
 802a28a:	6832      	ldr	r2, [r6, #0]
 802a28c:	f003 0306 	and.w	r3, r3, #6
 802a290:	2b04      	cmp	r3, #4
 802a292:	bf08      	it	eq
 802a294:	1aad      	subeq	r5, r5, r2
 802a296:	68a3      	ldr	r3, [r4, #8]
 802a298:	6922      	ldr	r2, [r4, #16]
 802a29a:	bf0c      	ite	eq
 802a29c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802a2a0:	2500      	movne	r5, #0
 802a2a2:	4293      	cmp	r3, r2
 802a2a4:	bfc4      	itt	gt
 802a2a6:	1a9b      	subgt	r3, r3, r2
 802a2a8:	18ed      	addgt	r5, r5, r3
 802a2aa:	2600      	movs	r6, #0
 802a2ac:	341a      	adds	r4, #26
 802a2ae:	42b5      	cmp	r5, r6
 802a2b0:	d11a      	bne.n	802a2e8 <_printf_common+0xc8>
 802a2b2:	2000      	movs	r0, #0
 802a2b4:	e008      	b.n	802a2c8 <_printf_common+0xa8>
 802a2b6:	2301      	movs	r3, #1
 802a2b8:	4652      	mov	r2, sl
 802a2ba:	4649      	mov	r1, r9
 802a2bc:	4638      	mov	r0, r7
 802a2be:	47c0      	blx	r8
 802a2c0:	3001      	adds	r0, #1
 802a2c2:	d103      	bne.n	802a2cc <_printf_common+0xac>
 802a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 802a2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a2cc:	3501      	adds	r5, #1
 802a2ce:	e7c6      	b.n	802a25e <_printf_common+0x3e>
 802a2d0:	18e1      	adds	r1, r4, r3
 802a2d2:	1c5a      	adds	r2, r3, #1
 802a2d4:	2030      	movs	r0, #48	; 0x30
 802a2d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802a2da:	4422      	add	r2, r4
 802a2dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802a2e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802a2e4:	3302      	adds	r3, #2
 802a2e6:	e7c7      	b.n	802a278 <_printf_common+0x58>
 802a2e8:	2301      	movs	r3, #1
 802a2ea:	4622      	mov	r2, r4
 802a2ec:	4649      	mov	r1, r9
 802a2ee:	4638      	mov	r0, r7
 802a2f0:	47c0      	blx	r8
 802a2f2:	3001      	adds	r0, #1
 802a2f4:	d0e6      	beq.n	802a2c4 <_printf_common+0xa4>
 802a2f6:	3601      	adds	r6, #1
 802a2f8:	e7d9      	b.n	802a2ae <_printf_common+0x8e>
	...

0802a2fc <_printf_i>:
 802a2fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a300:	460c      	mov	r4, r1
 802a302:	4691      	mov	r9, r2
 802a304:	7e27      	ldrb	r7, [r4, #24]
 802a306:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a308:	2f78      	cmp	r7, #120	; 0x78
 802a30a:	4680      	mov	r8, r0
 802a30c:	469a      	mov	sl, r3
 802a30e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a312:	d807      	bhi.n	802a324 <_printf_i+0x28>
 802a314:	2f62      	cmp	r7, #98	; 0x62
 802a316:	d80a      	bhi.n	802a32e <_printf_i+0x32>
 802a318:	2f00      	cmp	r7, #0
 802a31a:	f000 80d8 	beq.w	802a4ce <_printf_i+0x1d2>
 802a31e:	2f58      	cmp	r7, #88	; 0x58
 802a320:	f000 80a3 	beq.w	802a46a <_printf_i+0x16e>
 802a324:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802a328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802a32c:	e03a      	b.n	802a3a4 <_printf_i+0xa8>
 802a32e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802a332:	2b15      	cmp	r3, #21
 802a334:	d8f6      	bhi.n	802a324 <_printf_i+0x28>
 802a336:	a001      	add	r0, pc, #4	; (adr r0, 802a33c <_printf_i+0x40>)
 802a338:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802a33c:	0802a395 	.word	0x0802a395
 802a340:	0802a3a9 	.word	0x0802a3a9
 802a344:	0802a325 	.word	0x0802a325
 802a348:	0802a325 	.word	0x0802a325
 802a34c:	0802a325 	.word	0x0802a325
 802a350:	0802a325 	.word	0x0802a325
 802a354:	0802a3a9 	.word	0x0802a3a9
 802a358:	0802a325 	.word	0x0802a325
 802a35c:	0802a325 	.word	0x0802a325
 802a360:	0802a325 	.word	0x0802a325
 802a364:	0802a325 	.word	0x0802a325
 802a368:	0802a4b5 	.word	0x0802a4b5
 802a36c:	0802a3d9 	.word	0x0802a3d9
 802a370:	0802a497 	.word	0x0802a497
 802a374:	0802a325 	.word	0x0802a325
 802a378:	0802a325 	.word	0x0802a325
 802a37c:	0802a4d7 	.word	0x0802a4d7
 802a380:	0802a325 	.word	0x0802a325
 802a384:	0802a3d9 	.word	0x0802a3d9
 802a388:	0802a325 	.word	0x0802a325
 802a38c:	0802a325 	.word	0x0802a325
 802a390:	0802a49f 	.word	0x0802a49f
 802a394:	680b      	ldr	r3, [r1, #0]
 802a396:	1d1a      	adds	r2, r3, #4
 802a398:	681b      	ldr	r3, [r3, #0]
 802a39a:	600a      	str	r2, [r1, #0]
 802a39c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802a3a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a3a4:	2301      	movs	r3, #1
 802a3a6:	e0a3      	b.n	802a4f0 <_printf_i+0x1f4>
 802a3a8:	6825      	ldr	r5, [r4, #0]
 802a3aa:	6808      	ldr	r0, [r1, #0]
 802a3ac:	062e      	lsls	r6, r5, #24
 802a3ae:	f100 0304 	add.w	r3, r0, #4
 802a3b2:	d50a      	bpl.n	802a3ca <_printf_i+0xce>
 802a3b4:	6805      	ldr	r5, [r0, #0]
 802a3b6:	600b      	str	r3, [r1, #0]
 802a3b8:	2d00      	cmp	r5, #0
 802a3ba:	da03      	bge.n	802a3c4 <_printf_i+0xc8>
 802a3bc:	232d      	movs	r3, #45	; 0x2d
 802a3be:	426d      	negs	r5, r5
 802a3c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a3c4:	485e      	ldr	r0, [pc, #376]	; (802a540 <_printf_i+0x244>)
 802a3c6:	230a      	movs	r3, #10
 802a3c8:	e019      	b.n	802a3fe <_printf_i+0x102>
 802a3ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 802a3ce:	6805      	ldr	r5, [r0, #0]
 802a3d0:	600b      	str	r3, [r1, #0]
 802a3d2:	bf18      	it	ne
 802a3d4:	b22d      	sxthne	r5, r5
 802a3d6:	e7ef      	b.n	802a3b8 <_printf_i+0xbc>
 802a3d8:	680b      	ldr	r3, [r1, #0]
 802a3da:	6825      	ldr	r5, [r4, #0]
 802a3dc:	1d18      	adds	r0, r3, #4
 802a3de:	6008      	str	r0, [r1, #0]
 802a3e0:	0628      	lsls	r0, r5, #24
 802a3e2:	d501      	bpl.n	802a3e8 <_printf_i+0xec>
 802a3e4:	681d      	ldr	r5, [r3, #0]
 802a3e6:	e002      	b.n	802a3ee <_printf_i+0xf2>
 802a3e8:	0669      	lsls	r1, r5, #25
 802a3ea:	d5fb      	bpl.n	802a3e4 <_printf_i+0xe8>
 802a3ec:	881d      	ldrh	r5, [r3, #0]
 802a3ee:	4854      	ldr	r0, [pc, #336]	; (802a540 <_printf_i+0x244>)
 802a3f0:	2f6f      	cmp	r7, #111	; 0x6f
 802a3f2:	bf0c      	ite	eq
 802a3f4:	2308      	moveq	r3, #8
 802a3f6:	230a      	movne	r3, #10
 802a3f8:	2100      	movs	r1, #0
 802a3fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802a3fe:	6866      	ldr	r6, [r4, #4]
 802a400:	60a6      	str	r6, [r4, #8]
 802a402:	2e00      	cmp	r6, #0
 802a404:	bfa2      	ittt	ge
 802a406:	6821      	ldrge	r1, [r4, #0]
 802a408:	f021 0104 	bicge.w	r1, r1, #4
 802a40c:	6021      	strge	r1, [r4, #0]
 802a40e:	b90d      	cbnz	r5, 802a414 <_printf_i+0x118>
 802a410:	2e00      	cmp	r6, #0
 802a412:	d04d      	beq.n	802a4b0 <_printf_i+0x1b4>
 802a414:	4616      	mov	r6, r2
 802a416:	fbb5 f1f3 	udiv	r1, r5, r3
 802a41a:	fb03 5711 	mls	r7, r3, r1, r5
 802a41e:	5dc7      	ldrb	r7, [r0, r7]
 802a420:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802a424:	462f      	mov	r7, r5
 802a426:	42bb      	cmp	r3, r7
 802a428:	460d      	mov	r5, r1
 802a42a:	d9f4      	bls.n	802a416 <_printf_i+0x11a>
 802a42c:	2b08      	cmp	r3, #8
 802a42e:	d10b      	bne.n	802a448 <_printf_i+0x14c>
 802a430:	6823      	ldr	r3, [r4, #0]
 802a432:	07df      	lsls	r7, r3, #31
 802a434:	d508      	bpl.n	802a448 <_printf_i+0x14c>
 802a436:	6923      	ldr	r3, [r4, #16]
 802a438:	6861      	ldr	r1, [r4, #4]
 802a43a:	4299      	cmp	r1, r3
 802a43c:	bfde      	ittt	le
 802a43e:	2330      	movle	r3, #48	; 0x30
 802a440:	f806 3c01 	strble.w	r3, [r6, #-1]
 802a444:	f106 36ff 	addle.w	r6, r6, #4294967295
 802a448:	1b92      	subs	r2, r2, r6
 802a44a:	6122      	str	r2, [r4, #16]
 802a44c:	f8cd a000 	str.w	sl, [sp]
 802a450:	464b      	mov	r3, r9
 802a452:	aa03      	add	r2, sp, #12
 802a454:	4621      	mov	r1, r4
 802a456:	4640      	mov	r0, r8
 802a458:	f7ff fee2 	bl	802a220 <_printf_common>
 802a45c:	3001      	adds	r0, #1
 802a45e:	d14c      	bne.n	802a4fa <_printf_i+0x1fe>
 802a460:	f04f 30ff 	mov.w	r0, #4294967295
 802a464:	b004      	add	sp, #16
 802a466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a46a:	4835      	ldr	r0, [pc, #212]	; (802a540 <_printf_i+0x244>)
 802a46c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802a470:	6823      	ldr	r3, [r4, #0]
 802a472:	680e      	ldr	r6, [r1, #0]
 802a474:	061f      	lsls	r7, r3, #24
 802a476:	f856 5b04 	ldr.w	r5, [r6], #4
 802a47a:	600e      	str	r6, [r1, #0]
 802a47c:	d514      	bpl.n	802a4a8 <_printf_i+0x1ac>
 802a47e:	07d9      	lsls	r1, r3, #31
 802a480:	bf44      	itt	mi
 802a482:	f043 0320 	orrmi.w	r3, r3, #32
 802a486:	6023      	strmi	r3, [r4, #0]
 802a488:	b91d      	cbnz	r5, 802a492 <_printf_i+0x196>
 802a48a:	6823      	ldr	r3, [r4, #0]
 802a48c:	f023 0320 	bic.w	r3, r3, #32
 802a490:	6023      	str	r3, [r4, #0]
 802a492:	2310      	movs	r3, #16
 802a494:	e7b0      	b.n	802a3f8 <_printf_i+0xfc>
 802a496:	6823      	ldr	r3, [r4, #0]
 802a498:	f043 0320 	orr.w	r3, r3, #32
 802a49c:	6023      	str	r3, [r4, #0]
 802a49e:	2378      	movs	r3, #120	; 0x78
 802a4a0:	4828      	ldr	r0, [pc, #160]	; (802a544 <_printf_i+0x248>)
 802a4a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802a4a6:	e7e3      	b.n	802a470 <_printf_i+0x174>
 802a4a8:	065e      	lsls	r6, r3, #25
 802a4aa:	bf48      	it	mi
 802a4ac:	b2ad      	uxthmi	r5, r5
 802a4ae:	e7e6      	b.n	802a47e <_printf_i+0x182>
 802a4b0:	4616      	mov	r6, r2
 802a4b2:	e7bb      	b.n	802a42c <_printf_i+0x130>
 802a4b4:	680b      	ldr	r3, [r1, #0]
 802a4b6:	6826      	ldr	r6, [r4, #0]
 802a4b8:	6960      	ldr	r0, [r4, #20]
 802a4ba:	1d1d      	adds	r5, r3, #4
 802a4bc:	600d      	str	r5, [r1, #0]
 802a4be:	0635      	lsls	r5, r6, #24
 802a4c0:	681b      	ldr	r3, [r3, #0]
 802a4c2:	d501      	bpl.n	802a4c8 <_printf_i+0x1cc>
 802a4c4:	6018      	str	r0, [r3, #0]
 802a4c6:	e002      	b.n	802a4ce <_printf_i+0x1d2>
 802a4c8:	0671      	lsls	r1, r6, #25
 802a4ca:	d5fb      	bpl.n	802a4c4 <_printf_i+0x1c8>
 802a4cc:	8018      	strh	r0, [r3, #0]
 802a4ce:	2300      	movs	r3, #0
 802a4d0:	6123      	str	r3, [r4, #16]
 802a4d2:	4616      	mov	r6, r2
 802a4d4:	e7ba      	b.n	802a44c <_printf_i+0x150>
 802a4d6:	680b      	ldr	r3, [r1, #0]
 802a4d8:	1d1a      	adds	r2, r3, #4
 802a4da:	600a      	str	r2, [r1, #0]
 802a4dc:	681e      	ldr	r6, [r3, #0]
 802a4de:	6862      	ldr	r2, [r4, #4]
 802a4e0:	2100      	movs	r1, #0
 802a4e2:	4630      	mov	r0, r6
 802a4e4:	f7d5 ff04 	bl	80002f0 <memchr>
 802a4e8:	b108      	cbz	r0, 802a4ee <_printf_i+0x1f2>
 802a4ea:	1b80      	subs	r0, r0, r6
 802a4ec:	6060      	str	r0, [r4, #4]
 802a4ee:	6863      	ldr	r3, [r4, #4]
 802a4f0:	6123      	str	r3, [r4, #16]
 802a4f2:	2300      	movs	r3, #0
 802a4f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a4f8:	e7a8      	b.n	802a44c <_printf_i+0x150>
 802a4fa:	6923      	ldr	r3, [r4, #16]
 802a4fc:	4632      	mov	r2, r6
 802a4fe:	4649      	mov	r1, r9
 802a500:	4640      	mov	r0, r8
 802a502:	47d0      	blx	sl
 802a504:	3001      	adds	r0, #1
 802a506:	d0ab      	beq.n	802a460 <_printf_i+0x164>
 802a508:	6823      	ldr	r3, [r4, #0]
 802a50a:	079b      	lsls	r3, r3, #30
 802a50c:	d413      	bmi.n	802a536 <_printf_i+0x23a>
 802a50e:	68e0      	ldr	r0, [r4, #12]
 802a510:	9b03      	ldr	r3, [sp, #12]
 802a512:	4298      	cmp	r0, r3
 802a514:	bfb8      	it	lt
 802a516:	4618      	movlt	r0, r3
 802a518:	e7a4      	b.n	802a464 <_printf_i+0x168>
 802a51a:	2301      	movs	r3, #1
 802a51c:	4632      	mov	r2, r6
 802a51e:	4649      	mov	r1, r9
 802a520:	4640      	mov	r0, r8
 802a522:	47d0      	blx	sl
 802a524:	3001      	adds	r0, #1
 802a526:	d09b      	beq.n	802a460 <_printf_i+0x164>
 802a528:	3501      	adds	r5, #1
 802a52a:	68e3      	ldr	r3, [r4, #12]
 802a52c:	9903      	ldr	r1, [sp, #12]
 802a52e:	1a5b      	subs	r3, r3, r1
 802a530:	42ab      	cmp	r3, r5
 802a532:	dcf2      	bgt.n	802a51a <_printf_i+0x21e>
 802a534:	e7eb      	b.n	802a50e <_printf_i+0x212>
 802a536:	2500      	movs	r5, #0
 802a538:	f104 0619 	add.w	r6, r4, #25
 802a53c:	e7f5      	b.n	802a52a <_printf_i+0x22e>
 802a53e:	bf00      	nop
 802a540:	0802ebc5 	.word	0x0802ebc5
 802a544:	0802ebd6 	.word	0x0802ebd6

0802a548 <_sbrk_r>:
 802a548:	b538      	push	{r3, r4, r5, lr}
 802a54a:	4d06      	ldr	r5, [pc, #24]	; (802a564 <_sbrk_r+0x1c>)
 802a54c:	2300      	movs	r3, #0
 802a54e:	4604      	mov	r4, r0
 802a550:	4608      	mov	r0, r1
 802a552:	602b      	str	r3, [r5, #0]
 802a554:	f7d8 fc2c 	bl	8002db0 <_sbrk>
 802a558:	1c43      	adds	r3, r0, #1
 802a55a:	d102      	bne.n	802a562 <_sbrk_r+0x1a>
 802a55c:	682b      	ldr	r3, [r5, #0]
 802a55e:	b103      	cbz	r3, 802a562 <_sbrk_r+0x1a>
 802a560:	6023      	str	r3, [r4, #0]
 802a562:	bd38      	pop	{r3, r4, r5, pc}
 802a564:	2400b6a0 	.word	0x2400b6a0

0802a568 <_raise_r>:
 802a568:	291f      	cmp	r1, #31
 802a56a:	b538      	push	{r3, r4, r5, lr}
 802a56c:	4604      	mov	r4, r0
 802a56e:	460d      	mov	r5, r1
 802a570:	d904      	bls.n	802a57c <_raise_r+0x14>
 802a572:	2316      	movs	r3, #22
 802a574:	6003      	str	r3, [r0, #0]
 802a576:	f04f 30ff 	mov.w	r0, #4294967295
 802a57a:	bd38      	pop	{r3, r4, r5, pc}
 802a57c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a57e:	b112      	cbz	r2, 802a586 <_raise_r+0x1e>
 802a580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a584:	b94b      	cbnz	r3, 802a59a <_raise_r+0x32>
 802a586:	4620      	mov	r0, r4
 802a588:	f000 f830 	bl	802a5ec <_getpid_r>
 802a58c:	462a      	mov	r2, r5
 802a58e:	4601      	mov	r1, r0
 802a590:	4620      	mov	r0, r4
 802a592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a596:	f000 b817 	b.w	802a5c8 <_kill_r>
 802a59a:	2b01      	cmp	r3, #1
 802a59c:	d00a      	beq.n	802a5b4 <_raise_r+0x4c>
 802a59e:	1c59      	adds	r1, r3, #1
 802a5a0:	d103      	bne.n	802a5aa <_raise_r+0x42>
 802a5a2:	2316      	movs	r3, #22
 802a5a4:	6003      	str	r3, [r0, #0]
 802a5a6:	2001      	movs	r0, #1
 802a5a8:	e7e7      	b.n	802a57a <_raise_r+0x12>
 802a5aa:	2400      	movs	r4, #0
 802a5ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a5b0:	4628      	mov	r0, r5
 802a5b2:	4798      	blx	r3
 802a5b4:	2000      	movs	r0, #0
 802a5b6:	e7e0      	b.n	802a57a <_raise_r+0x12>

0802a5b8 <raise>:
 802a5b8:	4b02      	ldr	r3, [pc, #8]	; (802a5c4 <raise+0xc>)
 802a5ba:	4601      	mov	r1, r0
 802a5bc:	6818      	ldr	r0, [r3, #0]
 802a5be:	f7ff bfd3 	b.w	802a568 <_raise_r>
 802a5c2:	bf00      	nop
 802a5c4:	240000e0 	.word	0x240000e0

0802a5c8 <_kill_r>:
 802a5c8:	b538      	push	{r3, r4, r5, lr}
 802a5ca:	4d07      	ldr	r5, [pc, #28]	; (802a5e8 <_kill_r+0x20>)
 802a5cc:	2300      	movs	r3, #0
 802a5ce:	4604      	mov	r4, r0
 802a5d0:	4608      	mov	r0, r1
 802a5d2:	4611      	mov	r1, r2
 802a5d4:	602b      	str	r3, [r5, #0]
 802a5d6:	f7d8 fb63 	bl	8002ca0 <_kill>
 802a5da:	1c43      	adds	r3, r0, #1
 802a5dc:	d102      	bne.n	802a5e4 <_kill_r+0x1c>
 802a5de:	682b      	ldr	r3, [r5, #0]
 802a5e0:	b103      	cbz	r3, 802a5e4 <_kill_r+0x1c>
 802a5e2:	6023      	str	r3, [r4, #0]
 802a5e4:	bd38      	pop	{r3, r4, r5, pc}
 802a5e6:	bf00      	nop
 802a5e8:	2400b6a0 	.word	0x2400b6a0

0802a5ec <_getpid_r>:
 802a5ec:	f7d8 bb50 	b.w	8002c90 <_getpid>

0802a5f0 <__swbuf_r>:
 802a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a5f2:	460e      	mov	r6, r1
 802a5f4:	4614      	mov	r4, r2
 802a5f6:	4605      	mov	r5, r0
 802a5f8:	b118      	cbz	r0, 802a602 <__swbuf_r+0x12>
 802a5fa:	6983      	ldr	r3, [r0, #24]
 802a5fc:	b90b      	cbnz	r3, 802a602 <__swbuf_r+0x12>
 802a5fe:	f000 fa33 	bl	802aa68 <__sinit>
 802a602:	4b21      	ldr	r3, [pc, #132]	; (802a688 <__swbuf_r+0x98>)
 802a604:	429c      	cmp	r4, r3
 802a606:	d12b      	bne.n	802a660 <__swbuf_r+0x70>
 802a608:	686c      	ldr	r4, [r5, #4]
 802a60a:	69a3      	ldr	r3, [r4, #24]
 802a60c:	60a3      	str	r3, [r4, #8]
 802a60e:	89a3      	ldrh	r3, [r4, #12]
 802a610:	071a      	lsls	r2, r3, #28
 802a612:	d52f      	bpl.n	802a674 <__swbuf_r+0x84>
 802a614:	6923      	ldr	r3, [r4, #16]
 802a616:	b36b      	cbz	r3, 802a674 <__swbuf_r+0x84>
 802a618:	6923      	ldr	r3, [r4, #16]
 802a61a:	6820      	ldr	r0, [r4, #0]
 802a61c:	1ac0      	subs	r0, r0, r3
 802a61e:	6963      	ldr	r3, [r4, #20]
 802a620:	b2f6      	uxtb	r6, r6
 802a622:	4283      	cmp	r3, r0
 802a624:	4637      	mov	r7, r6
 802a626:	dc04      	bgt.n	802a632 <__swbuf_r+0x42>
 802a628:	4621      	mov	r1, r4
 802a62a:	4628      	mov	r0, r5
 802a62c:	f000 f988 	bl	802a940 <_fflush_r>
 802a630:	bb30      	cbnz	r0, 802a680 <__swbuf_r+0x90>
 802a632:	68a3      	ldr	r3, [r4, #8]
 802a634:	3b01      	subs	r3, #1
 802a636:	60a3      	str	r3, [r4, #8]
 802a638:	6823      	ldr	r3, [r4, #0]
 802a63a:	1c5a      	adds	r2, r3, #1
 802a63c:	6022      	str	r2, [r4, #0]
 802a63e:	701e      	strb	r6, [r3, #0]
 802a640:	6963      	ldr	r3, [r4, #20]
 802a642:	3001      	adds	r0, #1
 802a644:	4283      	cmp	r3, r0
 802a646:	d004      	beq.n	802a652 <__swbuf_r+0x62>
 802a648:	89a3      	ldrh	r3, [r4, #12]
 802a64a:	07db      	lsls	r3, r3, #31
 802a64c:	d506      	bpl.n	802a65c <__swbuf_r+0x6c>
 802a64e:	2e0a      	cmp	r6, #10
 802a650:	d104      	bne.n	802a65c <__swbuf_r+0x6c>
 802a652:	4621      	mov	r1, r4
 802a654:	4628      	mov	r0, r5
 802a656:	f000 f973 	bl	802a940 <_fflush_r>
 802a65a:	b988      	cbnz	r0, 802a680 <__swbuf_r+0x90>
 802a65c:	4638      	mov	r0, r7
 802a65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a660:	4b0a      	ldr	r3, [pc, #40]	; (802a68c <__swbuf_r+0x9c>)
 802a662:	429c      	cmp	r4, r3
 802a664:	d101      	bne.n	802a66a <__swbuf_r+0x7a>
 802a666:	68ac      	ldr	r4, [r5, #8]
 802a668:	e7cf      	b.n	802a60a <__swbuf_r+0x1a>
 802a66a:	4b09      	ldr	r3, [pc, #36]	; (802a690 <__swbuf_r+0xa0>)
 802a66c:	429c      	cmp	r4, r3
 802a66e:	bf08      	it	eq
 802a670:	68ec      	ldreq	r4, [r5, #12]
 802a672:	e7ca      	b.n	802a60a <__swbuf_r+0x1a>
 802a674:	4621      	mov	r1, r4
 802a676:	4628      	mov	r0, r5
 802a678:	f000 f80c 	bl	802a694 <__swsetup_r>
 802a67c:	2800      	cmp	r0, #0
 802a67e:	d0cb      	beq.n	802a618 <__swbuf_r+0x28>
 802a680:	f04f 37ff 	mov.w	r7, #4294967295
 802a684:	e7ea      	b.n	802a65c <__swbuf_r+0x6c>
 802a686:	bf00      	nop
 802a688:	0802ec0c 	.word	0x0802ec0c
 802a68c:	0802ec2c 	.word	0x0802ec2c
 802a690:	0802ebec 	.word	0x0802ebec

0802a694 <__swsetup_r>:
 802a694:	4b32      	ldr	r3, [pc, #200]	; (802a760 <__swsetup_r+0xcc>)
 802a696:	b570      	push	{r4, r5, r6, lr}
 802a698:	681d      	ldr	r5, [r3, #0]
 802a69a:	4606      	mov	r6, r0
 802a69c:	460c      	mov	r4, r1
 802a69e:	b125      	cbz	r5, 802a6aa <__swsetup_r+0x16>
 802a6a0:	69ab      	ldr	r3, [r5, #24]
 802a6a2:	b913      	cbnz	r3, 802a6aa <__swsetup_r+0x16>
 802a6a4:	4628      	mov	r0, r5
 802a6a6:	f000 f9df 	bl	802aa68 <__sinit>
 802a6aa:	4b2e      	ldr	r3, [pc, #184]	; (802a764 <__swsetup_r+0xd0>)
 802a6ac:	429c      	cmp	r4, r3
 802a6ae:	d10f      	bne.n	802a6d0 <__swsetup_r+0x3c>
 802a6b0:	686c      	ldr	r4, [r5, #4]
 802a6b2:	89a3      	ldrh	r3, [r4, #12]
 802a6b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a6b8:	0719      	lsls	r1, r3, #28
 802a6ba:	d42c      	bmi.n	802a716 <__swsetup_r+0x82>
 802a6bc:	06dd      	lsls	r5, r3, #27
 802a6be:	d411      	bmi.n	802a6e4 <__swsetup_r+0x50>
 802a6c0:	2309      	movs	r3, #9
 802a6c2:	6033      	str	r3, [r6, #0]
 802a6c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802a6c8:	81a3      	strh	r3, [r4, #12]
 802a6ca:	f04f 30ff 	mov.w	r0, #4294967295
 802a6ce:	e03e      	b.n	802a74e <__swsetup_r+0xba>
 802a6d0:	4b25      	ldr	r3, [pc, #148]	; (802a768 <__swsetup_r+0xd4>)
 802a6d2:	429c      	cmp	r4, r3
 802a6d4:	d101      	bne.n	802a6da <__swsetup_r+0x46>
 802a6d6:	68ac      	ldr	r4, [r5, #8]
 802a6d8:	e7eb      	b.n	802a6b2 <__swsetup_r+0x1e>
 802a6da:	4b24      	ldr	r3, [pc, #144]	; (802a76c <__swsetup_r+0xd8>)
 802a6dc:	429c      	cmp	r4, r3
 802a6de:	bf08      	it	eq
 802a6e0:	68ec      	ldreq	r4, [r5, #12]
 802a6e2:	e7e6      	b.n	802a6b2 <__swsetup_r+0x1e>
 802a6e4:	0758      	lsls	r0, r3, #29
 802a6e6:	d512      	bpl.n	802a70e <__swsetup_r+0x7a>
 802a6e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a6ea:	b141      	cbz	r1, 802a6fe <__swsetup_r+0x6a>
 802a6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a6f0:	4299      	cmp	r1, r3
 802a6f2:	d002      	beq.n	802a6fa <__swsetup_r+0x66>
 802a6f4:	4630      	mov	r0, r6
 802a6f6:	f7ff fb8f 	bl	8029e18 <_free_r>
 802a6fa:	2300      	movs	r3, #0
 802a6fc:	6363      	str	r3, [r4, #52]	; 0x34
 802a6fe:	89a3      	ldrh	r3, [r4, #12]
 802a700:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802a704:	81a3      	strh	r3, [r4, #12]
 802a706:	2300      	movs	r3, #0
 802a708:	6063      	str	r3, [r4, #4]
 802a70a:	6923      	ldr	r3, [r4, #16]
 802a70c:	6023      	str	r3, [r4, #0]
 802a70e:	89a3      	ldrh	r3, [r4, #12]
 802a710:	f043 0308 	orr.w	r3, r3, #8
 802a714:	81a3      	strh	r3, [r4, #12]
 802a716:	6923      	ldr	r3, [r4, #16]
 802a718:	b94b      	cbnz	r3, 802a72e <__swsetup_r+0x9a>
 802a71a:	89a3      	ldrh	r3, [r4, #12]
 802a71c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802a720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a724:	d003      	beq.n	802a72e <__swsetup_r+0x9a>
 802a726:	4621      	mov	r1, r4
 802a728:	4630      	mov	r0, r6
 802a72a:	f000 fa63 	bl	802abf4 <__smakebuf_r>
 802a72e:	89a0      	ldrh	r0, [r4, #12]
 802a730:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a734:	f010 0301 	ands.w	r3, r0, #1
 802a738:	d00a      	beq.n	802a750 <__swsetup_r+0xbc>
 802a73a:	2300      	movs	r3, #0
 802a73c:	60a3      	str	r3, [r4, #8]
 802a73e:	6963      	ldr	r3, [r4, #20]
 802a740:	425b      	negs	r3, r3
 802a742:	61a3      	str	r3, [r4, #24]
 802a744:	6923      	ldr	r3, [r4, #16]
 802a746:	b943      	cbnz	r3, 802a75a <__swsetup_r+0xc6>
 802a748:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802a74c:	d1ba      	bne.n	802a6c4 <__swsetup_r+0x30>
 802a74e:	bd70      	pop	{r4, r5, r6, pc}
 802a750:	0781      	lsls	r1, r0, #30
 802a752:	bf58      	it	pl
 802a754:	6963      	ldrpl	r3, [r4, #20]
 802a756:	60a3      	str	r3, [r4, #8]
 802a758:	e7f4      	b.n	802a744 <__swsetup_r+0xb0>
 802a75a:	2000      	movs	r0, #0
 802a75c:	e7f7      	b.n	802a74e <__swsetup_r+0xba>
 802a75e:	bf00      	nop
 802a760:	240000e0 	.word	0x240000e0
 802a764:	0802ec0c 	.word	0x0802ec0c
 802a768:	0802ec2c 	.word	0x0802ec2c
 802a76c:	0802ebec 	.word	0x0802ebec

0802a770 <__register_exitproc>:
 802a770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a774:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802a830 <__register_exitproc+0xc0>
 802a778:	4606      	mov	r6, r0
 802a77a:	f8d8 0000 	ldr.w	r0, [r8]
 802a77e:	461f      	mov	r7, r3
 802a780:	460d      	mov	r5, r1
 802a782:	4691      	mov	r9, r2
 802a784:	f000 fa0e 	bl	802aba4 <__retarget_lock_acquire_recursive>
 802a788:	4b25      	ldr	r3, [pc, #148]	; (802a820 <__register_exitproc+0xb0>)
 802a78a:	681c      	ldr	r4, [r3, #0]
 802a78c:	b934      	cbnz	r4, 802a79c <__register_exitproc+0x2c>
 802a78e:	4c25      	ldr	r4, [pc, #148]	; (802a824 <__register_exitproc+0xb4>)
 802a790:	601c      	str	r4, [r3, #0]
 802a792:	4b25      	ldr	r3, [pc, #148]	; (802a828 <__register_exitproc+0xb8>)
 802a794:	b113      	cbz	r3, 802a79c <__register_exitproc+0x2c>
 802a796:	681b      	ldr	r3, [r3, #0]
 802a798:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802a79c:	6863      	ldr	r3, [r4, #4]
 802a79e:	2b1f      	cmp	r3, #31
 802a7a0:	dd07      	ble.n	802a7b2 <__register_exitproc+0x42>
 802a7a2:	f8d8 0000 	ldr.w	r0, [r8]
 802a7a6:	f000 f9ff 	bl	802aba8 <__retarget_lock_release_recursive>
 802a7aa:	f04f 30ff 	mov.w	r0, #4294967295
 802a7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a7b2:	b34e      	cbz	r6, 802a808 <__register_exitproc+0x98>
 802a7b4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802a7b8:	b988      	cbnz	r0, 802a7de <__register_exitproc+0x6e>
 802a7ba:	4b1c      	ldr	r3, [pc, #112]	; (802a82c <__register_exitproc+0xbc>)
 802a7bc:	b923      	cbnz	r3, 802a7c8 <__register_exitproc+0x58>
 802a7be:	f8d8 0000 	ldr.w	r0, [r8]
 802a7c2:	f000 f9f0 	bl	802aba6 <__retarget_lock_release>
 802a7c6:	e7f0      	b.n	802a7aa <__register_exitproc+0x3a>
 802a7c8:	f44f 7084 	mov.w	r0, #264	; 0x108
 802a7cc:	f7ff fafe 	bl	8029dcc <malloc>
 802a7d0:	2800      	cmp	r0, #0
 802a7d2:	d0f4      	beq.n	802a7be <__register_exitproc+0x4e>
 802a7d4:	2300      	movs	r3, #0
 802a7d6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802a7da:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802a7de:	6863      	ldr	r3, [r4, #4]
 802a7e0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802a7e4:	2201      	movs	r2, #1
 802a7e6:	409a      	lsls	r2, r3
 802a7e8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802a7ec:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802a7f0:	4313      	orrs	r3, r2
 802a7f2:	2e02      	cmp	r6, #2
 802a7f4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802a7f8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802a7fc:	bf02      	ittt	eq
 802a7fe:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802a802:	431a      	orreq	r2, r3
 802a804:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802a808:	6863      	ldr	r3, [r4, #4]
 802a80a:	f8d8 0000 	ldr.w	r0, [r8]
 802a80e:	1c5a      	adds	r2, r3, #1
 802a810:	3302      	adds	r3, #2
 802a812:	6062      	str	r2, [r4, #4]
 802a814:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802a818:	f000 f9c6 	bl	802aba8 <__retarget_lock_release_recursive>
 802a81c:	2000      	movs	r0, #0
 802a81e:	e7c6      	b.n	802a7ae <__register_exitproc+0x3e>
 802a820:	2400b1dc 	.word	0x2400b1dc
 802a824:	2400b150 	.word	0x2400b150
 802a828:	0802ebe8 	.word	0x0802ebe8
 802a82c:	08029dcd 	.word	0x08029dcd
 802a830:	24000144 	.word	0x24000144

0802a834 <__sflush_r>:
 802a834:	898a      	ldrh	r2, [r1, #12]
 802a836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a83a:	4605      	mov	r5, r0
 802a83c:	0710      	lsls	r0, r2, #28
 802a83e:	460c      	mov	r4, r1
 802a840:	d458      	bmi.n	802a8f4 <__sflush_r+0xc0>
 802a842:	684b      	ldr	r3, [r1, #4]
 802a844:	2b00      	cmp	r3, #0
 802a846:	dc05      	bgt.n	802a854 <__sflush_r+0x20>
 802a848:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802a84a:	2b00      	cmp	r3, #0
 802a84c:	dc02      	bgt.n	802a854 <__sflush_r+0x20>
 802a84e:	2000      	movs	r0, #0
 802a850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a856:	2e00      	cmp	r6, #0
 802a858:	d0f9      	beq.n	802a84e <__sflush_r+0x1a>
 802a85a:	2300      	movs	r3, #0
 802a85c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802a860:	682f      	ldr	r7, [r5, #0]
 802a862:	602b      	str	r3, [r5, #0]
 802a864:	d032      	beq.n	802a8cc <__sflush_r+0x98>
 802a866:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802a868:	89a3      	ldrh	r3, [r4, #12]
 802a86a:	075a      	lsls	r2, r3, #29
 802a86c:	d505      	bpl.n	802a87a <__sflush_r+0x46>
 802a86e:	6863      	ldr	r3, [r4, #4]
 802a870:	1ac0      	subs	r0, r0, r3
 802a872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802a874:	b10b      	cbz	r3, 802a87a <__sflush_r+0x46>
 802a876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a878:	1ac0      	subs	r0, r0, r3
 802a87a:	2300      	movs	r3, #0
 802a87c:	4602      	mov	r2, r0
 802a87e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a880:	6a21      	ldr	r1, [r4, #32]
 802a882:	4628      	mov	r0, r5
 802a884:	47b0      	blx	r6
 802a886:	1c43      	adds	r3, r0, #1
 802a888:	89a3      	ldrh	r3, [r4, #12]
 802a88a:	d106      	bne.n	802a89a <__sflush_r+0x66>
 802a88c:	6829      	ldr	r1, [r5, #0]
 802a88e:	291d      	cmp	r1, #29
 802a890:	d82c      	bhi.n	802a8ec <__sflush_r+0xb8>
 802a892:	4a2a      	ldr	r2, [pc, #168]	; (802a93c <__sflush_r+0x108>)
 802a894:	40ca      	lsrs	r2, r1
 802a896:	07d6      	lsls	r6, r2, #31
 802a898:	d528      	bpl.n	802a8ec <__sflush_r+0xb8>
 802a89a:	2200      	movs	r2, #0
 802a89c:	6062      	str	r2, [r4, #4]
 802a89e:	04d9      	lsls	r1, r3, #19
 802a8a0:	6922      	ldr	r2, [r4, #16]
 802a8a2:	6022      	str	r2, [r4, #0]
 802a8a4:	d504      	bpl.n	802a8b0 <__sflush_r+0x7c>
 802a8a6:	1c42      	adds	r2, r0, #1
 802a8a8:	d101      	bne.n	802a8ae <__sflush_r+0x7a>
 802a8aa:	682b      	ldr	r3, [r5, #0]
 802a8ac:	b903      	cbnz	r3, 802a8b0 <__sflush_r+0x7c>
 802a8ae:	6560      	str	r0, [r4, #84]	; 0x54
 802a8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a8b2:	602f      	str	r7, [r5, #0]
 802a8b4:	2900      	cmp	r1, #0
 802a8b6:	d0ca      	beq.n	802a84e <__sflush_r+0x1a>
 802a8b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a8bc:	4299      	cmp	r1, r3
 802a8be:	d002      	beq.n	802a8c6 <__sflush_r+0x92>
 802a8c0:	4628      	mov	r0, r5
 802a8c2:	f7ff faa9 	bl	8029e18 <_free_r>
 802a8c6:	2000      	movs	r0, #0
 802a8c8:	6360      	str	r0, [r4, #52]	; 0x34
 802a8ca:	e7c1      	b.n	802a850 <__sflush_r+0x1c>
 802a8cc:	6a21      	ldr	r1, [r4, #32]
 802a8ce:	2301      	movs	r3, #1
 802a8d0:	4628      	mov	r0, r5
 802a8d2:	47b0      	blx	r6
 802a8d4:	1c41      	adds	r1, r0, #1
 802a8d6:	d1c7      	bne.n	802a868 <__sflush_r+0x34>
 802a8d8:	682b      	ldr	r3, [r5, #0]
 802a8da:	2b00      	cmp	r3, #0
 802a8dc:	d0c4      	beq.n	802a868 <__sflush_r+0x34>
 802a8de:	2b1d      	cmp	r3, #29
 802a8e0:	d001      	beq.n	802a8e6 <__sflush_r+0xb2>
 802a8e2:	2b16      	cmp	r3, #22
 802a8e4:	d101      	bne.n	802a8ea <__sflush_r+0xb6>
 802a8e6:	602f      	str	r7, [r5, #0]
 802a8e8:	e7b1      	b.n	802a84e <__sflush_r+0x1a>
 802a8ea:	89a3      	ldrh	r3, [r4, #12]
 802a8ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a8f0:	81a3      	strh	r3, [r4, #12]
 802a8f2:	e7ad      	b.n	802a850 <__sflush_r+0x1c>
 802a8f4:	690f      	ldr	r7, [r1, #16]
 802a8f6:	2f00      	cmp	r7, #0
 802a8f8:	d0a9      	beq.n	802a84e <__sflush_r+0x1a>
 802a8fa:	0793      	lsls	r3, r2, #30
 802a8fc:	680e      	ldr	r6, [r1, #0]
 802a8fe:	bf08      	it	eq
 802a900:	694b      	ldreq	r3, [r1, #20]
 802a902:	600f      	str	r7, [r1, #0]
 802a904:	bf18      	it	ne
 802a906:	2300      	movne	r3, #0
 802a908:	eba6 0807 	sub.w	r8, r6, r7
 802a90c:	608b      	str	r3, [r1, #8]
 802a90e:	f1b8 0f00 	cmp.w	r8, #0
 802a912:	dd9c      	ble.n	802a84e <__sflush_r+0x1a>
 802a914:	6a21      	ldr	r1, [r4, #32]
 802a916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802a918:	4643      	mov	r3, r8
 802a91a:	463a      	mov	r2, r7
 802a91c:	4628      	mov	r0, r5
 802a91e:	47b0      	blx	r6
 802a920:	2800      	cmp	r0, #0
 802a922:	dc06      	bgt.n	802a932 <__sflush_r+0xfe>
 802a924:	89a3      	ldrh	r3, [r4, #12]
 802a926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a92a:	81a3      	strh	r3, [r4, #12]
 802a92c:	f04f 30ff 	mov.w	r0, #4294967295
 802a930:	e78e      	b.n	802a850 <__sflush_r+0x1c>
 802a932:	4407      	add	r7, r0
 802a934:	eba8 0800 	sub.w	r8, r8, r0
 802a938:	e7e9      	b.n	802a90e <__sflush_r+0xda>
 802a93a:	bf00      	nop
 802a93c:	20400001 	.word	0x20400001

0802a940 <_fflush_r>:
 802a940:	b538      	push	{r3, r4, r5, lr}
 802a942:	690b      	ldr	r3, [r1, #16]
 802a944:	4605      	mov	r5, r0
 802a946:	460c      	mov	r4, r1
 802a948:	b913      	cbnz	r3, 802a950 <_fflush_r+0x10>
 802a94a:	2500      	movs	r5, #0
 802a94c:	4628      	mov	r0, r5
 802a94e:	bd38      	pop	{r3, r4, r5, pc}
 802a950:	b118      	cbz	r0, 802a95a <_fflush_r+0x1a>
 802a952:	6983      	ldr	r3, [r0, #24]
 802a954:	b90b      	cbnz	r3, 802a95a <_fflush_r+0x1a>
 802a956:	f000 f887 	bl	802aa68 <__sinit>
 802a95a:	4b14      	ldr	r3, [pc, #80]	; (802a9ac <_fflush_r+0x6c>)
 802a95c:	429c      	cmp	r4, r3
 802a95e:	d11b      	bne.n	802a998 <_fflush_r+0x58>
 802a960:	686c      	ldr	r4, [r5, #4]
 802a962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a966:	2b00      	cmp	r3, #0
 802a968:	d0ef      	beq.n	802a94a <_fflush_r+0xa>
 802a96a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a96c:	07d0      	lsls	r0, r2, #31
 802a96e:	d404      	bmi.n	802a97a <_fflush_r+0x3a>
 802a970:	0599      	lsls	r1, r3, #22
 802a972:	d402      	bmi.n	802a97a <_fflush_r+0x3a>
 802a974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a976:	f000 f915 	bl	802aba4 <__retarget_lock_acquire_recursive>
 802a97a:	4628      	mov	r0, r5
 802a97c:	4621      	mov	r1, r4
 802a97e:	f7ff ff59 	bl	802a834 <__sflush_r>
 802a982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a984:	07da      	lsls	r2, r3, #31
 802a986:	4605      	mov	r5, r0
 802a988:	d4e0      	bmi.n	802a94c <_fflush_r+0xc>
 802a98a:	89a3      	ldrh	r3, [r4, #12]
 802a98c:	059b      	lsls	r3, r3, #22
 802a98e:	d4dd      	bmi.n	802a94c <_fflush_r+0xc>
 802a990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a992:	f000 f909 	bl	802aba8 <__retarget_lock_release_recursive>
 802a996:	e7d9      	b.n	802a94c <_fflush_r+0xc>
 802a998:	4b05      	ldr	r3, [pc, #20]	; (802a9b0 <_fflush_r+0x70>)
 802a99a:	429c      	cmp	r4, r3
 802a99c:	d101      	bne.n	802a9a2 <_fflush_r+0x62>
 802a99e:	68ac      	ldr	r4, [r5, #8]
 802a9a0:	e7df      	b.n	802a962 <_fflush_r+0x22>
 802a9a2:	4b04      	ldr	r3, [pc, #16]	; (802a9b4 <_fflush_r+0x74>)
 802a9a4:	429c      	cmp	r4, r3
 802a9a6:	bf08      	it	eq
 802a9a8:	68ec      	ldreq	r4, [r5, #12]
 802a9aa:	e7da      	b.n	802a962 <_fflush_r+0x22>
 802a9ac:	0802ec0c 	.word	0x0802ec0c
 802a9b0:	0802ec2c 	.word	0x0802ec2c
 802a9b4:	0802ebec 	.word	0x0802ebec

0802a9b8 <std>:
 802a9b8:	2300      	movs	r3, #0
 802a9ba:	b510      	push	{r4, lr}
 802a9bc:	4604      	mov	r4, r0
 802a9be:	e9c0 3300 	strd	r3, r3, [r0]
 802a9c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802a9c6:	6083      	str	r3, [r0, #8]
 802a9c8:	8181      	strh	r1, [r0, #12]
 802a9ca:	6643      	str	r3, [r0, #100]	; 0x64
 802a9cc:	81c2      	strh	r2, [r0, #14]
 802a9ce:	6183      	str	r3, [r0, #24]
 802a9d0:	4619      	mov	r1, r3
 802a9d2:	2208      	movs	r2, #8
 802a9d4:	305c      	adds	r0, #92	; 0x5c
 802a9d6:	f7ff fa17 	bl	8029e08 <memset>
 802a9da:	4b05      	ldr	r3, [pc, #20]	; (802a9f0 <std+0x38>)
 802a9dc:	6263      	str	r3, [r4, #36]	; 0x24
 802a9de:	4b05      	ldr	r3, [pc, #20]	; (802a9f4 <std+0x3c>)
 802a9e0:	62a3      	str	r3, [r4, #40]	; 0x28
 802a9e2:	4b05      	ldr	r3, [pc, #20]	; (802a9f8 <std+0x40>)
 802a9e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 802a9e6:	4b05      	ldr	r3, [pc, #20]	; (802a9fc <std+0x44>)
 802a9e8:	6224      	str	r4, [r4, #32]
 802a9ea:	6323      	str	r3, [r4, #48]	; 0x30
 802a9ec:	bd10      	pop	{r4, pc}
 802a9ee:	bf00      	nop
 802a9f0:	0802ac8d 	.word	0x0802ac8d
 802a9f4:	0802acaf 	.word	0x0802acaf
 802a9f8:	0802ace7 	.word	0x0802ace7
 802a9fc:	0802ad0b 	.word	0x0802ad0b

0802aa00 <_cleanup_r>:
 802aa00:	4901      	ldr	r1, [pc, #4]	; (802aa08 <_cleanup_r+0x8>)
 802aa02:	f000 b8af 	b.w	802ab64 <_fwalk_reent>
 802aa06:	bf00      	nop
 802aa08:	0802a941 	.word	0x0802a941

0802aa0c <__sfmoreglue>:
 802aa0c:	b570      	push	{r4, r5, r6, lr}
 802aa0e:	1e4a      	subs	r2, r1, #1
 802aa10:	2568      	movs	r5, #104	; 0x68
 802aa12:	4355      	muls	r5, r2
 802aa14:	460e      	mov	r6, r1
 802aa16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802aa1a:	f7ff fa4d 	bl	8029eb8 <_malloc_r>
 802aa1e:	4604      	mov	r4, r0
 802aa20:	b140      	cbz	r0, 802aa34 <__sfmoreglue+0x28>
 802aa22:	2100      	movs	r1, #0
 802aa24:	e9c0 1600 	strd	r1, r6, [r0]
 802aa28:	300c      	adds	r0, #12
 802aa2a:	60a0      	str	r0, [r4, #8]
 802aa2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802aa30:	f7ff f9ea 	bl	8029e08 <memset>
 802aa34:	4620      	mov	r0, r4
 802aa36:	bd70      	pop	{r4, r5, r6, pc}

0802aa38 <__sfp_lock_acquire>:
 802aa38:	4801      	ldr	r0, [pc, #4]	; (802aa40 <__sfp_lock_acquire+0x8>)
 802aa3a:	f000 b8b3 	b.w	802aba4 <__retarget_lock_acquire_recursive>
 802aa3e:	bf00      	nop
 802aa40:	2400b69c 	.word	0x2400b69c

0802aa44 <__sfp_lock_release>:
 802aa44:	4801      	ldr	r0, [pc, #4]	; (802aa4c <__sfp_lock_release+0x8>)
 802aa46:	f000 b8af 	b.w	802aba8 <__retarget_lock_release_recursive>
 802aa4a:	bf00      	nop
 802aa4c:	2400b69c 	.word	0x2400b69c

0802aa50 <__sinit_lock_acquire>:
 802aa50:	4801      	ldr	r0, [pc, #4]	; (802aa58 <__sinit_lock_acquire+0x8>)
 802aa52:	f000 b8a7 	b.w	802aba4 <__retarget_lock_acquire_recursive>
 802aa56:	bf00      	nop
 802aa58:	2400b697 	.word	0x2400b697

0802aa5c <__sinit_lock_release>:
 802aa5c:	4801      	ldr	r0, [pc, #4]	; (802aa64 <__sinit_lock_release+0x8>)
 802aa5e:	f000 b8a3 	b.w	802aba8 <__retarget_lock_release_recursive>
 802aa62:	bf00      	nop
 802aa64:	2400b697 	.word	0x2400b697

0802aa68 <__sinit>:
 802aa68:	b510      	push	{r4, lr}
 802aa6a:	4604      	mov	r4, r0
 802aa6c:	f7ff fff0 	bl	802aa50 <__sinit_lock_acquire>
 802aa70:	69a3      	ldr	r3, [r4, #24]
 802aa72:	b11b      	cbz	r3, 802aa7c <__sinit+0x14>
 802aa74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802aa78:	f7ff bff0 	b.w	802aa5c <__sinit_lock_release>
 802aa7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802aa80:	6523      	str	r3, [r4, #80]	; 0x50
 802aa82:	4b13      	ldr	r3, [pc, #76]	; (802aad0 <__sinit+0x68>)
 802aa84:	4a13      	ldr	r2, [pc, #76]	; (802aad4 <__sinit+0x6c>)
 802aa86:	681b      	ldr	r3, [r3, #0]
 802aa88:	62a2      	str	r2, [r4, #40]	; 0x28
 802aa8a:	42a3      	cmp	r3, r4
 802aa8c:	bf04      	itt	eq
 802aa8e:	2301      	moveq	r3, #1
 802aa90:	61a3      	streq	r3, [r4, #24]
 802aa92:	4620      	mov	r0, r4
 802aa94:	f000 f820 	bl	802aad8 <__sfp>
 802aa98:	6060      	str	r0, [r4, #4]
 802aa9a:	4620      	mov	r0, r4
 802aa9c:	f000 f81c 	bl	802aad8 <__sfp>
 802aaa0:	60a0      	str	r0, [r4, #8]
 802aaa2:	4620      	mov	r0, r4
 802aaa4:	f000 f818 	bl	802aad8 <__sfp>
 802aaa8:	2200      	movs	r2, #0
 802aaaa:	60e0      	str	r0, [r4, #12]
 802aaac:	2104      	movs	r1, #4
 802aaae:	6860      	ldr	r0, [r4, #4]
 802aab0:	f7ff ff82 	bl	802a9b8 <std>
 802aab4:	68a0      	ldr	r0, [r4, #8]
 802aab6:	2201      	movs	r2, #1
 802aab8:	2109      	movs	r1, #9
 802aaba:	f7ff ff7d 	bl	802a9b8 <std>
 802aabe:	68e0      	ldr	r0, [r4, #12]
 802aac0:	2202      	movs	r2, #2
 802aac2:	2112      	movs	r1, #18
 802aac4:	f7ff ff78 	bl	802a9b8 <std>
 802aac8:	2301      	movs	r3, #1
 802aaca:	61a3      	str	r3, [r4, #24]
 802aacc:	e7d2      	b.n	802aa74 <__sinit+0xc>
 802aace:	bf00      	nop
 802aad0:	0802ebb0 	.word	0x0802ebb0
 802aad4:	0802aa01 	.word	0x0802aa01

0802aad8 <__sfp>:
 802aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aada:	4607      	mov	r7, r0
 802aadc:	f7ff ffac 	bl	802aa38 <__sfp_lock_acquire>
 802aae0:	4b1e      	ldr	r3, [pc, #120]	; (802ab5c <__sfp+0x84>)
 802aae2:	681e      	ldr	r6, [r3, #0]
 802aae4:	69b3      	ldr	r3, [r6, #24]
 802aae6:	b913      	cbnz	r3, 802aaee <__sfp+0x16>
 802aae8:	4630      	mov	r0, r6
 802aaea:	f7ff ffbd 	bl	802aa68 <__sinit>
 802aaee:	3648      	adds	r6, #72	; 0x48
 802aaf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802aaf4:	3b01      	subs	r3, #1
 802aaf6:	d503      	bpl.n	802ab00 <__sfp+0x28>
 802aaf8:	6833      	ldr	r3, [r6, #0]
 802aafa:	b30b      	cbz	r3, 802ab40 <__sfp+0x68>
 802aafc:	6836      	ldr	r6, [r6, #0]
 802aafe:	e7f7      	b.n	802aaf0 <__sfp+0x18>
 802ab00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802ab04:	b9d5      	cbnz	r5, 802ab3c <__sfp+0x64>
 802ab06:	4b16      	ldr	r3, [pc, #88]	; (802ab60 <__sfp+0x88>)
 802ab08:	60e3      	str	r3, [r4, #12]
 802ab0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802ab0e:	6665      	str	r5, [r4, #100]	; 0x64
 802ab10:	f000 f847 	bl	802aba2 <__retarget_lock_init_recursive>
 802ab14:	f7ff ff96 	bl	802aa44 <__sfp_lock_release>
 802ab18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802ab1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802ab20:	6025      	str	r5, [r4, #0]
 802ab22:	61a5      	str	r5, [r4, #24]
 802ab24:	2208      	movs	r2, #8
 802ab26:	4629      	mov	r1, r5
 802ab28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802ab2c:	f7ff f96c 	bl	8029e08 <memset>
 802ab30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802ab34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802ab38:	4620      	mov	r0, r4
 802ab3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ab3c:	3468      	adds	r4, #104	; 0x68
 802ab3e:	e7d9      	b.n	802aaf4 <__sfp+0x1c>
 802ab40:	2104      	movs	r1, #4
 802ab42:	4638      	mov	r0, r7
 802ab44:	f7ff ff62 	bl	802aa0c <__sfmoreglue>
 802ab48:	4604      	mov	r4, r0
 802ab4a:	6030      	str	r0, [r6, #0]
 802ab4c:	2800      	cmp	r0, #0
 802ab4e:	d1d5      	bne.n	802aafc <__sfp+0x24>
 802ab50:	f7ff ff78 	bl	802aa44 <__sfp_lock_release>
 802ab54:	230c      	movs	r3, #12
 802ab56:	603b      	str	r3, [r7, #0]
 802ab58:	e7ee      	b.n	802ab38 <__sfp+0x60>
 802ab5a:	bf00      	nop
 802ab5c:	0802ebb0 	.word	0x0802ebb0
 802ab60:	ffff0001 	.word	0xffff0001

0802ab64 <_fwalk_reent>:
 802ab64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ab68:	4606      	mov	r6, r0
 802ab6a:	4688      	mov	r8, r1
 802ab6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802ab70:	2700      	movs	r7, #0
 802ab72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802ab76:	f1b9 0901 	subs.w	r9, r9, #1
 802ab7a:	d505      	bpl.n	802ab88 <_fwalk_reent+0x24>
 802ab7c:	6824      	ldr	r4, [r4, #0]
 802ab7e:	2c00      	cmp	r4, #0
 802ab80:	d1f7      	bne.n	802ab72 <_fwalk_reent+0xe>
 802ab82:	4638      	mov	r0, r7
 802ab84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ab88:	89ab      	ldrh	r3, [r5, #12]
 802ab8a:	2b01      	cmp	r3, #1
 802ab8c:	d907      	bls.n	802ab9e <_fwalk_reent+0x3a>
 802ab8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802ab92:	3301      	adds	r3, #1
 802ab94:	d003      	beq.n	802ab9e <_fwalk_reent+0x3a>
 802ab96:	4629      	mov	r1, r5
 802ab98:	4630      	mov	r0, r6
 802ab9a:	47c0      	blx	r8
 802ab9c:	4307      	orrs	r7, r0
 802ab9e:	3568      	adds	r5, #104	; 0x68
 802aba0:	e7e9      	b.n	802ab76 <_fwalk_reent+0x12>

0802aba2 <__retarget_lock_init_recursive>:
 802aba2:	4770      	bx	lr

0802aba4 <__retarget_lock_acquire_recursive>:
 802aba4:	4770      	bx	lr

0802aba6 <__retarget_lock_release>:
 802aba6:	4770      	bx	lr

0802aba8 <__retarget_lock_release_recursive>:
 802aba8:	4770      	bx	lr

0802abaa <__swhatbuf_r>:
 802abaa:	b570      	push	{r4, r5, r6, lr}
 802abac:	460e      	mov	r6, r1
 802abae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802abb2:	2900      	cmp	r1, #0
 802abb4:	b096      	sub	sp, #88	; 0x58
 802abb6:	4614      	mov	r4, r2
 802abb8:	461d      	mov	r5, r3
 802abba:	da07      	bge.n	802abcc <__swhatbuf_r+0x22>
 802abbc:	2300      	movs	r3, #0
 802abbe:	602b      	str	r3, [r5, #0]
 802abc0:	89b3      	ldrh	r3, [r6, #12]
 802abc2:	061a      	lsls	r2, r3, #24
 802abc4:	d410      	bmi.n	802abe8 <__swhatbuf_r+0x3e>
 802abc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802abca:	e00e      	b.n	802abea <__swhatbuf_r+0x40>
 802abcc:	466a      	mov	r2, sp
 802abce:	f000 f8c3 	bl	802ad58 <_fstat_r>
 802abd2:	2800      	cmp	r0, #0
 802abd4:	dbf2      	blt.n	802abbc <__swhatbuf_r+0x12>
 802abd6:	9a01      	ldr	r2, [sp, #4]
 802abd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802abdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802abe0:	425a      	negs	r2, r3
 802abe2:	415a      	adcs	r2, r3
 802abe4:	602a      	str	r2, [r5, #0]
 802abe6:	e7ee      	b.n	802abc6 <__swhatbuf_r+0x1c>
 802abe8:	2340      	movs	r3, #64	; 0x40
 802abea:	2000      	movs	r0, #0
 802abec:	6023      	str	r3, [r4, #0]
 802abee:	b016      	add	sp, #88	; 0x58
 802abf0:	bd70      	pop	{r4, r5, r6, pc}
	...

0802abf4 <__smakebuf_r>:
 802abf4:	898b      	ldrh	r3, [r1, #12]
 802abf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802abf8:	079d      	lsls	r5, r3, #30
 802abfa:	4606      	mov	r6, r0
 802abfc:	460c      	mov	r4, r1
 802abfe:	d507      	bpl.n	802ac10 <__smakebuf_r+0x1c>
 802ac00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802ac04:	6023      	str	r3, [r4, #0]
 802ac06:	6123      	str	r3, [r4, #16]
 802ac08:	2301      	movs	r3, #1
 802ac0a:	6163      	str	r3, [r4, #20]
 802ac0c:	b002      	add	sp, #8
 802ac0e:	bd70      	pop	{r4, r5, r6, pc}
 802ac10:	ab01      	add	r3, sp, #4
 802ac12:	466a      	mov	r2, sp
 802ac14:	f7ff ffc9 	bl	802abaa <__swhatbuf_r>
 802ac18:	9900      	ldr	r1, [sp, #0]
 802ac1a:	4605      	mov	r5, r0
 802ac1c:	4630      	mov	r0, r6
 802ac1e:	f7ff f94b 	bl	8029eb8 <_malloc_r>
 802ac22:	b948      	cbnz	r0, 802ac38 <__smakebuf_r+0x44>
 802ac24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ac28:	059a      	lsls	r2, r3, #22
 802ac2a:	d4ef      	bmi.n	802ac0c <__smakebuf_r+0x18>
 802ac2c:	f023 0303 	bic.w	r3, r3, #3
 802ac30:	f043 0302 	orr.w	r3, r3, #2
 802ac34:	81a3      	strh	r3, [r4, #12]
 802ac36:	e7e3      	b.n	802ac00 <__smakebuf_r+0xc>
 802ac38:	4b0d      	ldr	r3, [pc, #52]	; (802ac70 <__smakebuf_r+0x7c>)
 802ac3a:	62b3      	str	r3, [r6, #40]	; 0x28
 802ac3c:	89a3      	ldrh	r3, [r4, #12]
 802ac3e:	6020      	str	r0, [r4, #0]
 802ac40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ac44:	81a3      	strh	r3, [r4, #12]
 802ac46:	9b00      	ldr	r3, [sp, #0]
 802ac48:	6163      	str	r3, [r4, #20]
 802ac4a:	9b01      	ldr	r3, [sp, #4]
 802ac4c:	6120      	str	r0, [r4, #16]
 802ac4e:	b15b      	cbz	r3, 802ac68 <__smakebuf_r+0x74>
 802ac50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ac54:	4630      	mov	r0, r6
 802ac56:	f000 f891 	bl	802ad7c <_isatty_r>
 802ac5a:	b128      	cbz	r0, 802ac68 <__smakebuf_r+0x74>
 802ac5c:	89a3      	ldrh	r3, [r4, #12]
 802ac5e:	f023 0303 	bic.w	r3, r3, #3
 802ac62:	f043 0301 	orr.w	r3, r3, #1
 802ac66:	81a3      	strh	r3, [r4, #12]
 802ac68:	89a0      	ldrh	r0, [r4, #12]
 802ac6a:	4305      	orrs	r5, r0
 802ac6c:	81a5      	strh	r5, [r4, #12]
 802ac6e:	e7cd      	b.n	802ac0c <__smakebuf_r+0x18>
 802ac70:	0802aa01 	.word	0x0802aa01

0802ac74 <__malloc_lock>:
 802ac74:	4801      	ldr	r0, [pc, #4]	; (802ac7c <__malloc_lock+0x8>)
 802ac76:	f7ff bf95 	b.w	802aba4 <__retarget_lock_acquire_recursive>
 802ac7a:	bf00      	nop
 802ac7c:	2400b698 	.word	0x2400b698

0802ac80 <__malloc_unlock>:
 802ac80:	4801      	ldr	r0, [pc, #4]	; (802ac88 <__malloc_unlock+0x8>)
 802ac82:	f7ff bf91 	b.w	802aba8 <__retarget_lock_release_recursive>
 802ac86:	bf00      	nop
 802ac88:	2400b698 	.word	0x2400b698

0802ac8c <__sread>:
 802ac8c:	b510      	push	{r4, lr}
 802ac8e:	460c      	mov	r4, r1
 802ac90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ac94:	f000 f894 	bl	802adc0 <_read_r>
 802ac98:	2800      	cmp	r0, #0
 802ac9a:	bfab      	itete	ge
 802ac9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802ac9e:	89a3      	ldrhlt	r3, [r4, #12]
 802aca0:	181b      	addge	r3, r3, r0
 802aca2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802aca6:	bfac      	ite	ge
 802aca8:	6563      	strge	r3, [r4, #84]	; 0x54
 802acaa:	81a3      	strhlt	r3, [r4, #12]
 802acac:	bd10      	pop	{r4, pc}

0802acae <__swrite>:
 802acae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802acb2:	461f      	mov	r7, r3
 802acb4:	898b      	ldrh	r3, [r1, #12]
 802acb6:	05db      	lsls	r3, r3, #23
 802acb8:	4605      	mov	r5, r0
 802acba:	460c      	mov	r4, r1
 802acbc:	4616      	mov	r6, r2
 802acbe:	d505      	bpl.n	802accc <__swrite+0x1e>
 802acc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802acc4:	2302      	movs	r3, #2
 802acc6:	2200      	movs	r2, #0
 802acc8:	f000 f868 	bl	802ad9c <_lseek_r>
 802accc:	89a3      	ldrh	r3, [r4, #12]
 802acce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802acd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802acd6:	81a3      	strh	r3, [r4, #12]
 802acd8:	4632      	mov	r2, r6
 802acda:	463b      	mov	r3, r7
 802acdc:	4628      	mov	r0, r5
 802acde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ace2:	f000 b817 	b.w	802ad14 <_write_r>

0802ace6 <__sseek>:
 802ace6:	b510      	push	{r4, lr}
 802ace8:	460c      	mov	r4, r1
 802acea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802acee:	f000 f855 	bl	802ad9c <_lseek_r>
 802acf2:	1c43      	adds	r3, r0, #1
 802acf4:	89a3      	ldrh	r3, [r4, #12]
 802acf6:	bf15      	itete	ne
 802acf8:	6560      	strne	r0, [r4, #84]	; 0x54
 802acfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802acfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ad02:	81a3      	strheq	r3, [r4, #12]
 802ad04:	bf18      	it	ne
 802ad06:	81a3      	strhne	r3, [r4, #12]
 802ad08:	bd10      	pop	{r4, pc}

0802ad0a <__sclose>:
 802ad0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ad0e:	f000 b813 	b.w	802ad38 <_close_r>
	...

0802ad14 <_write_r>:
 802ad14:	b538      	push	{r3, r4, r5, lr}
 802ad16:	4d07      	ldr	r5, [pc, #28]	; (802ad34 <_write_r+0x20>)
 802ad18:	4604      	mov	r4, r0
 802ad1a:	4608      	mov	r0, r1
 802ad1c:	4611      	mov	r1, r2
 802ad1e:	2200      	movs	r2, #0
 802ad20:	602a      	str	r2, [r5, #0]
 802ad22:	461a      	mov	r2, r3
 802ad24:	f7d7 fff3 	bl	8002d0e <_write>
 802ad28:	1c43      	adds	r3, r0, #1
 802ad2a:	d102      	bne.n	802ad32 <_write_r+0x1e>
 802ad2c:	682b      	ldr	r3, [r5, #0]
 802ad2e:	b103      	cbz	r3, 802ad32 <_write_r+0x1e>
 802ad30:	6023      	str	r3, [r4, #0]
 802ad32:	bd38      	pop	{r3, r4, r5, pc}
 802ad34:	2400b6a0 	.word	0x2400b6a0

0802ad38 <_close_r>:
 802ad38:	b538      	push	{r3, r4, r5, lr}
 802ad3a:	4d06      	ldr	r5, [pc, #24]	; (802ad54 <_close_r+0x1c>)
 802ad3c:	2300      	movs	r3, #0
 802ad3e:	4604      	mov	r4, r0
 802ad40:	4608      	mov	r0, r1
 802ad42:	602b      	str	r3, [r5, #0]
 802ad44:	f7d7 ffff 	bl	8002d46 <_close>
 802ad48:	1c43      	adds	r3, r0, #1
 802ad4a:	d102      	bne.n	802ad52 <_close_r+0x1a>
 802ad4c:	682b      	ldr	r3, [r5, #0]
 802ad4e:	b103      	cbz	r3, 802ad52 <_close_r+0x1a>
 802ad50:	6023      	str	r3, [r4, #0]
 802ad52:	bd38      	pop	{r3, r4, r5, pc}
 802ad54:	2400b6a0 	.word	0x2400b6a0

0802ad58 <_fstat_r>:
 802ad58:	b538      	push	{r3, r4, r5, lr}
 802ad5a:	4d07      	ldr	r5, [pc, #28]	; (802ad78 <_fstat_r+0x20>)
 802ad5c:	2300      	movs	r3, #0
 802ad5e:	4604      	mov	r4, r0
 802ad60:	4608      	mov	r0, r1
 802ad62:	4611      	mov	r1, r2
 802ad64:	602b      	str	r3, [r5, #0]
 802ad66:	f7d7 fffa 	bl	8002d5e <_fstat>
 802ad6a:	1c43      	adds	r3, r0, #1
 802ad6c:	d102      	bne.n	802ad74 <_fstat_r+0x1c>
 802ad6e:	682b      	ldr	r3, [r5, #0]
 802ad70:	b103      	cbz	r3, 802ad74 <_fstat_r+0x1c>
 802ad72:	6023      	str	r3, [r4, #0]
 802ad74:	bd38      	pop	{r3, r4, r5, pc}
 802ad76:	bf00      	nop
 802ad78:	2400b6a0 	.word	0x2400b6a0

0802ad7c <_isatty_r>:
 802ad7c:	b538      	push	{r3, r4, r5, lr}
 802ad7e:	4d06      	ldr	r5, [pc, #24]	; (802ad98 <_isatty_r+0x1c>)
 802ad80:	2300      	movs	r3, #0
 802ad82:	4604      	mov	r4, r0
 802ad84:	4608      	mov	r0, r1
 802ad86:	602b      	str	r3, [r5, #0]
 802ad88:	f7d7 fff9 	bl	8002d7e <_isatty>
 802ad8c:	1c43      	adds	r3, r0, #1
 802ad8e:	d102      	bne.n	802ad96 <_isatty_r+0x1a>
 802ad90:	682b      	ldr	r3, [r5, #0]
 802ad92:	b103      	cbz	r3, 802ad96 <_isatty_r+0x1a>
 802ad94:	6023      	str	r3, [r4, #0]
 802ad96:	bd38      	pop	{r3, r4, r5, pc}
 802ad98:	2400b6a0 	.word	0x2400b6a0

0802ad9c <_lseek_r>:
 802ad9c:	b538      	push	{r3, r4, r5, lr}
 802ad9e:	4d07      	ldr	r5, [pc, #28]	; (802adbc <_lseek_r+0x20>)
 802ada0:	4604      	mov	r4, r0
 802ada2:	4608      	mov	r0, r1
 802ada4:	4611      	mov	r1, r2
 802ada6:	2200      	movs	r2, #0
 802ada8:	602a      	str	r2, [r5, #0]
 802adaa:	461a      	mov	r2, r3
 802adac:	f7d7 fff2 	bl	8002d94 <_lseek>
 802adb0:	1c43      	adds	r3, r0, #1
 802adb2:	d102      	bne.n	802adba <_lseek_r+0x1e>
 802adb4:	682b      	ldr	r3, [r5, #0]
 802adb6:	b103      	cbz	r3, 802adba <_lseek_r+0x1e>
 802adb8:	6023      	str	r3, [r4, #0]
 802adba:	bd38      	pop	{r3, r4, r5, pc}
 802adbc:	2400b6a0 	.word	0x2400b6a0

0802adc0 <_read_r>:
 802adc0:	b538      	push	{r3, r4, r5, lr}
 802adc2:	4d07      	ldr	r5, [pc, #28]	; (802ade0 <_read_r+0x20>)
 802adc4:	4604      	mov	r4, r0
 802adc6:	4608      	mov	r0, r1
 802adc8:	4611      	mov	r1, r2
 802adca:	2200      	movs	r2, #0
 802adcc:	602a      	str	r2, [r5, #0]
 802adce:	461a      	mov	r2, r3
 802add0:	f7d7 ff80 	bl	8002cd4 <_read>
 802add4:	1c43      	adds	r3, r0, #1
 802add6:	d102      	bne.n	802adde <_read_r+0x1e>
 802add8:	682b      	ldr	r3, [r5, #0]
 802adda:	b103      	cbz	r3, 802adde <_read_r+0x1e>
 802addc:	6023      	str	r3, [r4, #0]
 802adde:	bd38      	pop	{r3, r4, r5, pc}
 802ade0:	2400b6a0 	.word	0x2400b6a0

0802ade4 <_init>:
 802ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ade6:	bf00      	nop
 802ade8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802adea:	bc08      	pop	{r3}
 802adec:	469e      	mov	lr, r3
 802adee:	4770      	bx	lr

0802adf0 <_fini>:
 802adf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802adf2:	bf00      	nop
 802adf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802adf6:	bc08      	pop	{r3}
 802adf8:	469e      	mov	lr, r3
 802adfa:	4770      	bx	lr
